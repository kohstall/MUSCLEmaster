
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fcc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800a160  0800a160  0001a160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3e8  0800a3e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3f0  0800a3f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3f0  0800a3f0  0001a3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3f4  0800a3f4  0001a3f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a3f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000070  0800a468  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800a468  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000140d6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025d8  00000000  00000000  00034176  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  00036750  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  00037b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021313  00000000  00000000  00038dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e686  00000000  00000000  0005a0db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cb655  00000000  00000000  00068761  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133db6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d0c  00000000  00000000  00133e34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a144 	.word	0x0800a144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a144 	.word	0x0800a144

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 ff6b 	bl	8001e60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f006 ff5a 	bl	8007e48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 ff83 	bl	8001eca <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f000 ff4b 	bl	8001e76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000004 	.word	0x20000004
 8001024:	20000098 	.word	0x20000098

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000098 	.word	0x20000098

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_Delay+0x40>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000004 	.word	0x20000004

08001084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800108c:	2300      	movs	r3, #0
 800108e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d101      	bne.n	800109a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e033      	b.n	8001102 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d109      	bne.n	80010b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f006 fef8 	bl	8007e98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ba:	f003 0310 	and.w	r3, r3, #16
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d118      	bne.n	80010f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010ca:	f023 0302 	bic.w	r3, r3, #2
 80010ce:	f043 0202 	orr.w	r2, r3, #2
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 fbf0 	bl	80018bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f023 0303 	bic.w	r3, r3, #3
 80010ea:	f043 0201 	orr.w	r2, r3, #1
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
 80010f2:	e001      	b.n	80010f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010f4:	2301      	movs	r3, #1
 80010f6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001100:	7bfb      	ldrb	r3, [r7, #15]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3710      	adds	r7, #16
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800111e:	2b01      	cmp	r3, #1
 8001120:	d101      	bne.n	8001126 <HAL_ADC_Start+0x1a>
 8001122:	2302      	movs	r3, #2
 8001124:	e0a5      	b.n	8001272 <HAL_ADC_Start+0x166>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2201      	movs	r2, #1
 800112a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	2b01      	cmp	r3, #1
 800113a:	d018      	beq.n	800116e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	689a      	ldr	r2, [r3, #8]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f042 0201 	orr.w	r2, r2, #1
 800114a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800114c:	4b4c      	ldr	r3, [pc, #304]	; (8001280 <HAL_ADC_Start+0x174>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a4c      	ldr	r2, [pc, #304]	; (8001284 <HAL_ADC_Start+0x178>)
 8001152:	fba2 2303 	umull	r2, r3, r2, r3
 8001156:	0c9a      	lsrs	r2, r3, #18
 8001158:	4613      	mov	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	4413      	add	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001160:	e002      	b.n	8001168 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	3b01      	subs	r3, #1
 8001166:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f9      	bne.n	8001162 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	2b01      	cmp	r3, #1
 800117a:	d179      	bne.n	8001270 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001184:	f023 0301 	bic.w	r3, r3, #1
 8001188:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800119a:	2b00      	cmp	r3, #0
 800119c:	d007      	beq.n	80011ae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011a6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011ba:	d106      	bne.n	80011ca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c0:	f023 0206 	bic.w	r2, r3, #6
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	645a      	str	r2, [r3, #68]	; 0x44
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011d8:	4b2b      	ldr	r3, [pc, #172]	; (8001288 <HAL_ADC_Start+0x17c>)
 80011da:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011e4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 031f 	and.w	r3, r3, #31
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d12a      	bne.n	8001248 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a25      	ldr	r2, [pc, #148]	; (800128c <HAL_ADC_Start+0x180>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d015      	beq.n	8001228 <HAL_ADC_Start+0x11c>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a23      	ldr	r2, [pc, #140]	; (8001290 <HAL_ADC_Start+0x184>)
 8001202:	4293      	cmp	r3, r2
 8001204:	d105      	bne.n	8001212 <HAL_ADC_Start+0x106>
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_ADC_Start+0x17c>)
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 031f 	and.w	r3, r3, #31
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00a      	beq.n	8001228 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a1f      	ldr	r2, [pc, #124]	; (8001294 <HAL_ADC_Start+0x188>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d129      	bne.n	8001270 <HAL_ADC_Start+0x164>
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <HAL_ADC_Start+0x17c>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f003 031f 	and.w	r3, r3, #31
 8001224:	2b0f      	cmp	r3, #15
 8001226:	d823      	bhi.n	8001270 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	689b      	ldr	r3, [r3, #8]
 800122e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d11c      	bne.n	8001270 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	689a      	ldr	r2, [r3, #8]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	e013      	b.n	8001270 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0f      	ldr	r2, [pc, #60]	; (800128c <HAL_ADC_Start+0x180>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d10e      	bne.n	8001270 <HAL_ADC_Start+0x164>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d107      	bne.n	8001270 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	689a      	ldr	r2, [r3, #8]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800126e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3714      	adds	r7, #20
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000008 	.word	0x20000008
 8001284:	431bde83 	.word	0x431bde83
 8001288:	40012300 	.word	0x40012300
 800128c:	40012000 	.word	0x40012000
 8001290:	40012100 	.word	0x40012100
 8001294:	40012200 	.word	0x40012200

08001298 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b4:	d113      	bne.n	80012de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c4:	d10b      	bne.n	80012de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f043 0220 	orr.w	r2, r3, #32
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e05c      	b.n	8001398 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012de:	f7ff fea3 	bl	8001028 <HAL_GetTick>
 80012e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012e4:	e01a      	b.n	800131c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012ec:	d016      	beq.n	800131c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <HAL_ADC_PollForConversion+0x6c>
 80012f4:	f7ff fe98 	bl	8001028 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d20b      	bcs.n	800131c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f043 0204 	orr.w	r2, r3, #4
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2200      	movs	r2, #0
 8001314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001318:	2303      	movs	r3, #3
 800131a:	e03d      	b.n	8001398 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b02      	cmp	r3, #2
 8001328:	d1dd      	bne.n	80012e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f06f 0212 	mvn.w	r2, #18
 8001332:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d123      	bne.n	8001396 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001352:	2b00      	cmp	r3, #0
 8001354:	d11f      	bne.n	8001396 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800135c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001360:	2b00      	cmp	r3, #0
 8001362:	d006      	beq.n	8001372 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800136e:	2b00      	cmp	r3, #0
 8001370:	d111      	bne.n	8001396 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d105      	bne.n	8001396 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f043 0201 	orr.w	r2, r3, #1
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}

080013a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	2300      	movs	r3, #0
 80013ae:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b02      	cmp	r3, #2
 80013bc:	bf0c      	ite	eq
 80013be:	2301      	moveq	r3, #1
 80013c0:	2300      	movne	r3, #0
 80013c2:	b2db      	uxtb	r3, r3
 80013c4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f003 0320 	and.w	r3, r3, #32
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d049      	beq.n	8001476 <HAL_ADC_IRQHandler+0xd6>
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d046      	beq.n	8001476 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d105      	bne.n	8001400 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d12b      	bne.n	8001466 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d127      	bne.n	8001466 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800141c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001420:	2b00      	cmp	r3, #0
 8001422:	d006      	beq.n	8001432 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800142e:	2b00      	cmp	r3, #0
 8001430:	d119      	bne.n	8001466 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0220 	bic.w	r2, r2, #32
 8001440:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d105      	bne.n	8001466 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f043 0201 	orr.w	r2, r3, #1
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f8e8 	bl	800163c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f06f 0212 	mvn.w	r2, #18
 8001474:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0304 	and.w	r3, r3, #4
 8001480:	2b04      	cmp	r3, #4
 8001482:	bf0c      	ite	eq
 8001484:	2301      	moveq	r3, #1
 8001486:	2300      	movne	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	2b80      	cmp	r3, #128	; 0x80
 8001498:	bf0c      	ite	eq
 800149a:	2301      	moveq	r3, #1
 800149c:	2300      	movne	r3, #0
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d057      	beq.n	8001558 <HAL_ADC_IRQHandler+0x1b8>
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d054      	beq.n	8001558 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 0310 	and.w	r3, r3, #16
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d105      	bne.n	80014c6 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d139      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014da:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d006      	beq.n	80014f0 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12b      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d124      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001508:	2b00      	cmp	r3, #0
 800150a:	d11d      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001510:	2b00      	cmp	r3, #0
 8001512:	d119      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685a      	ldr	r2, [r3, #4]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001522:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001528:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001538:	2b00      	cmp	r3, #0
 800153a:	d105      	bne.n	8001548 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f043 0201 	orr.w	r2, r3, #1
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fab3 	bl	8001ab4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f06f 020c 	mvn.w	r2, #12
 8001556:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f003 0301 	and.w	r3, r3, #1
 8001562:	2b01      	cmp	r3, #1
 8001564:	bf0c      	ite	eq
 8001566:	2301      	moveq	r3, #1
 8001568:	2300      	movne	r3, #0
 800156a:	b2db      	uxtb	r3, r3
 800156c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001578:	2b40      	cmp	r3, #64	; 0x40
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d017      	beq.n	80015ba <HAL_ADC_IRQHandler+0x21a>
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d014      	beq.n	80015ba <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b01      	cmp	r3, #1
 800159c:	d10d      	bne.n	80015ba <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 f850 	bl	8001650 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f06f 0201 	mvn.w	r2, #1
 80015b8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0320 	and.w	r3, r3, #32
 80015c4:	2b20      	cmp	r3, #32
 80015c6:	bf0c      	ite	eq
 80015c8:	2301      	moveq	r3, #1
 80015ca:	2300      	movne	r3, #0
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80015da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80015de:	bf0c      	ite	eq
 80015e0:	2301      	moveq	r3, #1
 80015e2:	2300      	movne	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <HAL_ADC_IRQHandler+0x27a>
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d012      	beq.n	800161a <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	f043 0202 	orr.w	r2, r3, #2
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f06f 0220 	mvn.w	r2, #32
 8001608:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f000 f82a 	bl	8001664 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f06f 0220 	mvn.w	r2, #32
 8001618:	601a      	str	r2, [r3, #0]
  }
}
 800161a:	bf00      	nop
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr

08001650 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr

08001678 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001678:	b480      	push	{r7}
 800167a:	b085      	sub	sp, #20
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800168c:	2b01      	cmp	r3, #1
 800168e:	d101      	bne.n	8001694 <HAL_ADC_ConfigChannel+0x1c>
 8001690:	2302      	movs	r3, #2
 8001692:	e105      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x228>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2201      	movs	r2, #1
 8001698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2b09      	cmp	r3, #9
 80016a2:	d925      	bls.n	80016f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68d9      	ldr	r1, [r3, #12]
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	461a      	mov	r2, r3
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	3b1e      	subs	r3, #30
 80016ba:	2207      	movs	r2, #7
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43da      	mvns	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	400a      	ands	r2, r1
 80016c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68d9      	ldr	r1, [r3, #12]
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	4603      	mov	r3, r0
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4403      	add	r3, r0
 80016e2:	3b1e      	subs	r3, #30
 80016e4:	409a      	lsls	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	e022      	b.n	8001736 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	6919      	ldr	r1, [r3, #16]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	b29b      	uxth	r3, r3
 80016fc:	461a      	mov	r2, r3
 80016fe:	4613      	mov	r3, r2
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	4413      	add	r3, r2
 8001704:	2207      	movs	r2, #7
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	400a      	ands	r2, r1
 8001712:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6919      	ldr	r1, [r3, #16]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	689a      	ldr	r2, [r3, #8]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4618      	mov	r0, r3
 8001726:	4603      	mov	r3, r0
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	4403      	add	r3, r0
 800172c:	409a      	lsls	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b06      	cmp	r3, #6
 800173c:	d824      	bhi.n	8001788 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685a      	ldr	r2, [r3, #4]
 8001748:	4613      	mov	r3, r2
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	4413      	add	r3, r2
 800174e:	3b05      	subs	r3, #5
 8001750:	221f      	movs	r2, #31
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43da      	mvns	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	400a      	ands	r2, r1
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	b29b      	uxth	r3, r3
 800176c:	4618      	mov	r0, r3
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	4613      	mov	r3, r2
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	4413      	add	r3, r2
 8001778:	3b05      	subs	r3, #5
 800177a:	fa00 f203 	lsl.w	r2, r0, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	430a      	orrs	r2, r1
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
 8001786:	e04c      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b0c      	cmp	r3, #12
 800178e:	d824      	bhi.n	80017da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	4613      	mov	r3, r2
 800179c:	009b      	lsls	r3, r3, #2
 800179e:	4413      	add	r3, r2
 80017a0:	3b23      	subs	r3, #35	; 0x23
 80017a2:	221f      	movs	r2, #31
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	43da      	mvns	r2, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	400a      	ands	r2, r1
 80017b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	4618      	mov	r0, r3
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685a      	ldr	r2, [r3, #4]
 80017c4:	4613      	mov	r3, r2
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	3b23      	subs	r3, #35	; 0x23
 80017cc:	fa00 f203 	lsl.w	r2, r0, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	430a      	orrs	r2, r1
 80017d6:	631a      	str	r2, [r3, #48]	; 0x30
 80017d8:	e023      	b.n	8001822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b41      	subs	r3, #65	; 0x41
 80017ec:	221f      	movs	r2, #31
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	400a      	ands	r2, r1
 80017fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b41      	subs	r3, #65	; 0x41
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <HAL_ADC_ConfigChannel+0x234>)
 8001824:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <HAL_ADC_ConfigChannel+0x238>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d109      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1cc>
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2b12      	cmp	r3, #18
 8001836:	d105      	bne.n	8001844 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_ADC_ConfigChannel+0x238>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d123      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x21e>
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d003      	beq.n	800185e <HAL_ADC_ConfigChannel+0x1e6>
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2b11      	cmp	r3, #17
 800185c:	d11b      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b10      	cmp	r3, #16
 8001870:	d111      	bne.n	8001896 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_ADC_ConfigChannel+0x23c>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a10      	ldr	r2, [pc, #64]	; (80018b8 <HAL_ADC_ConfigChannel+0x240>)
 8001878:	fba2 2303 	umull	r2, r3, r2, r3
 800187c:	0c9a      	lsrs	r2, r3, #18
 800187e:	4613      	mov	r3, r2
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	4413      	add	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001888:	e002      	b.n	8001890 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800188a:	68bb      	ldr	r3, [r7, #8]
 800188c:	3b01      	subs	r3, #1
 800188e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f9      	bne.n	800188a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
}
 80018a0:	4618      	mov	r0, r3
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	40012300 	.word	0x40012300
 80018b0:	40012000 	.word	0x40012000
 80018b4:	20000008 	.word	0x20000008
 80018b8:	431bde83 	.word	0x431bde83

080018bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c4:	4b79      	ldr	r3, [pc, #484]	; (8001aac <ADC_Init+0x1f0>)
 80018c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	431a      	orrs	r2, r3
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	685a      	ldr	r2, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	6859      	ldr	r1, [r3, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	691b      	ldr	r3, [r3, #16]
 80018fc:	021a      	lsls	r2, r3, #8
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6859      	ldr	r1, [r3, #4]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6899      	ldr	r1, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68da      	ldr	r2, [r3, #12]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194e:	4a58      	ldr	r2, [pc, #352]	; (8001ab0 <ADC_Init+0x1f4>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d022      	beq.n	800199a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001962:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6899      	ldr	r1, [r3, #8]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	430a      	orrs	r2, r1
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	e00f      	b.n	80019ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689a      	ldr	r2, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f022 0202 	bic.w	r2, r2, #2
 80019c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	6899      	ldr	r1, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	7e1b      	ldrb	r3, [r3, #24]
 80019d4:	005a      	lsls	r2, r3, #1
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01b      	beq.n	8001a20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	6859      	ldr	r1, [r3, #4]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a12:	3b01      	subs	r3, #1
 8001a14:	035a      	lsls	r2, r3, #13
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	e007      	b.n	8001a30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	69db      	ldr	r3, [r3, #28]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	051a      	lsls	r2, r3, #20
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	430a      	orrs	r2, r1
 8001a54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a72:	025a      	lsls	r2, r3, #9
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6899      	ldr	r1, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	029a      	lsls	r2, r3, #10
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	bf00      	nop
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40012300 	.word	0x40012300
 8001ab0:	0f000001 	.word	0x0f000001

08001ab4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0ed      	b.n	8001cb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d102      	bne.n	8001aec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f006 fa92 	bl	8008010 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0202 	bic.w	r2, r2, #2
 8001afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff fa94 	bl	8001028 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b02:	e012      	b.n	8001b2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b04:	f7ff fa90 	bl	8001028 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b0a      	cmp	r3, #10
 8001b10:	d90b      	bls.n	8001b2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2205      	movs	r2, #5
 8001b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e0c5      	b.n	8001cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1e5      	bne.n	8001b04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b48:	f7ff fa6e 	bl	8001028 <HAL_GetTick>
 8001b4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b4e:	e012      	b.n	8001b76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b50:	f7ff fa6a 	bl	8001028 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b0a      	cmp	r3, #10
 8001b5c:	d90b      	bls.n	8001b76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2205      	movs	r2, #5
 8001b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e09f      	b.n	8001cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f003 0301 	and.w	r3, r3, #1
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0e5      	beq.n	8001b50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	7e1b      	ldrb	r3, [r3, #24]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d108      	bne.n	8001b9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	e007      	b.n	8001bae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	7e5b      	ldrb	r3, [r3, #25]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d108      	bne.n	8001bc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bc4:	601a      	str	r2, [r3, #0]
 8001bc6:	e007      	b.n	8001bd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	7e9b      	ldrb	r3, [r3, #26]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d108      	bne.n	8001bf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0220 	orr.w	r2, r2, #32
 8001bee:	601a      	str	r2, [r3, #0]
 8001bf0:	e007      	b.n	8001c02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0220 	bic.w	r2, r2, #32
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	7edb      	ldrb	r3, [r3, #27]
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f022 0210 	bic.w	r2, r2, #16
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	e007      	b.n	8001c2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f042 0210 	orr.w	r2, r2, #16
 8001c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	7f1b      	ldrb	r3, [r3, #28]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d108      	bne.n	8001c46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 0208 	orr.w	r2, r2, #8
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	e007      	b.n	8001c56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 0208 	bic.w	r2, r2, #8
 8001c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	7f5b      	ldrb	r3, [r3, #29]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d108      	bne.n	8001c70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f042 0204 	orr.w	r2, r2, #4
 8001c6c:	601a      	str	r2, [r3, #0]
 8001c6e:	e007      	b.n	8001c80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0204 	bic.w	r2, r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691b      	ldr	r3, [r3, #16]
 8001c8e:	431a      	orrs	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	ea42 0103 	orr.w	r1, r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	1e5a      	subs	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cb4:	2300      	movs	r3, #0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <__NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d0c:	4b04      	ldr	r3, [pc, #16]	; (8001d20 <__NVIC_GetPriorityGrouping+0x18>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	f003 0307 	and.w	r3, r3, #7
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	db0b      	blt.n	8001d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d36:	79fb      	ldrb	r3, [r7, #7]
 8001d38:	f003 021f 	and.w	r2, r3, #31
 8001d3c:	4907      	ldr	r1, [pc, #28]	; (8001d5c <__NVIC_EnableIRQ+0x38>)
 8001d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d42:	095b      	lsrs	r3, r3, #5
 8001d44:	2001      	movs	r0, #1
 8001d46:	fa00 f202 	lsl.w	r2, r0, r2
 8001d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	6039      	str	r1, [r7, #0]
 8001d6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	db0a      	blt.n	8001d8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	b2da      	uxtb	r2, r3
 8001d78:	490c      	ldr	r1, [pc, #48]	; (8001dac <__NVIC_SetPriority+0x4c>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	0112      	lsls	r2, r2, #4
 8001d80:	b2d2      	uxtb	r2, r2
 8001d82:	440b      	add	r3, r1
 8001d84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d88:	e00a      	b.n	8001da0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	4908      	ldr	r1, [pc, #32]	; (8001db0 <__NVIC_SetPriority+0x50>)
 8001d90:	79fb      	ldrb	r3, [r7, #7]
 8001d92:	f003 030f 	and.w	r3, r3, #15
 8001d96:	3b04      	subs	r3, #4
 8001d98:	0112      	lsls	r2, r2, #4
 8001d9a:	b2d2      	uxtb	r2, r2
 8001d9c:	440b      	add	r3, r1
 8001d9e:	761a      	strb	r2, [r3, #24]
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr
 8001dac:	e000e100 	.word	0xe000e100
 8001db0:	e000ed00 	.word	0xe000ed00

08001db4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	60b9      	str	r1, [r7, #8]
 8001dbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	f003 0307 	and.w	r3, r3, #7
 8001dc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	f1c3 0307 	rsb	r3, r3, #7
 8001dce:	2b04      	cmp	r3, #4
 8001dd0:	bf28      	it	cs
 8001dd2:	2304      	movcs	r3, #4
 8001dd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	3304      	adds	r3, #4
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d902      	bls.n	8001de4 <NVIC_EncodePriority+0x30>
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	3b03      	subs	r3, #3
 8001de2:	e000      	b.n	8001de6 <NVIC_EncodePriority+0x32>
 8001de4:	2300      	movs	r3, #0
 8001de6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43da      	mvns	r2, r3
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	401a      	ands	r2, r3
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dfc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa01 f303 	lsl.w	r3, r1, r3
 8001e06:	43d9      	mvns	r1, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e0c:	4313      	orrs	r3, r2
         );
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3724      	adds	r7, #36	; 0x24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
	...

08001e1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3b01      	subs	r3, #1
 8001e28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e2c:	d301      	bcc.n	8001e32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e00f      	b.n	8001e52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e32:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <SysTick_Config+0x40>)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3a:	210f      	movs	r1, #15
 8001e3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e40:	f7ff ff8e 	bl	8001d60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <SysTick_Config+0x40>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4a:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <SysTick_Config+0x40>)
 8001e4c:	2207      	movs	r2, #7
 8001e4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	e000e010 	.word	0xe000e010

08001e60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7ff ff29 	bl	8001cc0 <__NVIC_SetPriorityGrouping>
}
 8001e6e:	bf00      	nop
 8001e70:	3708      	adds	r7, #8
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd80      	pop	{r7, pc}

08001e76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e76:	b580      	push	{r7, lr}
 8001e78:	b086      	sub	sp, #24
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	60b9      	str	r1, [r7, #8]
 8001e80:	607a      	str	r2, [r7, #4]
 8001e82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e84:	2300      	movs	r3, #0
 8001e86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e88:	f7ff ff3e 	bl	8001d08 <__NVIC_GetPriorityGrouping>
 8001e8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	68b9      	ldr	r1, [r7, #8]
 8001e92:	6978      	ldr	r0, [r7, #20]
 8001e94:	f7ff ff8e 	bl	8001db4 <NVIC_EncodePriority>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7ff ff5d 	bl	8001d60 <__NVIC_SetPriority>
}
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b082      	sub	sp, #8
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff ff31 	bl	8001d24 <__NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b082      	sub	sp, #8
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff ffa2 	bl	8001e1c <SysTick_Config>
 8001ed8:	4603      	mov	r3, r0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3708      	adds	r7, #8
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d004      	beq.n	8001f00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2280      	movs	r2, #128	; 0x80
 8001efa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e00c      	b.n	8001f1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2205      	movs	r2, #5
 8001f04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f36:	2300      	movs	r3, #0
 8001f38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
 8001f42:	e16b      	b.n	800221c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f44:	2201      	movs	r2, #1
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	697a      	ldr	r2, [r7, #20]
 8001f54:	4013      	ands	r3, r2
 8001f56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	f040 815a 	bne.w	8002216 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d00b      	beq.n	8001f82 <HAL_GPIO_Init+0x5a>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d007      	beq.n	8001f82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f76:	2b11      	cmp	r3, #17
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b12      	cmp	r3, #18
 8001f80:	d130      	bne.n	8001fe4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 0201 	and.w	r2, r3, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d003      	beq.n	8002024 <HAL_GPIO_Init+0xfc>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b12      	cmp	r3, #18
 8002022:	d123      	bne.n	800206c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	08da      	lsrs	r2, r3, #3
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3208      	adds	r2, #8
 800202c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002030:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f003 0307 	and.w	r3, r3, #7
 8002038:	009b      	lsls	r3, r3, #2
 800203a:	220f      	movs	r2, #15
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4013      	ands	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	691a      	ldr	r2, [r3, #16]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	fa02 f303 	lsl.w	r3, r2, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4313      	orrs	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	08da      	lsrs	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	3208      	adds	r2, #8
 8002066:	69b9      	ldr	r1, [r7, #24]
 8002068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	2203      	movs	r2, #3
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	43db      	mvns	r3, r3
 800207e:	69ba      	ldr	r2, [r7, #24]
 8002080:	4013      	ands	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f003 0203 	and.w	r2, r3, #3
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	fa02 f303 	lsl.w	r3, r2, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80b4 	beq.w	8002216 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	60fb      	str	r3, [r7, #12]
 80020b2:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <HAL_GPIO_Init+0x308>)
 80020b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b6:	4a5e      	ldr	r2, [pc, #376]	; (8002230 <HAL_GPIO_Init+0x308>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020bc:	6453      	str	r3, [r2, #68]	; 0x44
 80020be:	4b5c      	ldr	r3, [pc, #368]	; (8002230 <HAL_GPIO_Init+0x308>)
 80020c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ca:	4a5a      	ldr	r2, [pc, #360]	; (8002234 <HAL_GPIO_Init+0x30c>)
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	3302      	adds	r3, #2
 80020d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	220f      	movs	r2, #15
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a51      	ldr	r2, [pc, #324]	; (8002238 <HAL_GPIO_Init+0x310>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d02b      	beq.n	800214e <HAL_GPIO_Init+0x226>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a50      	ldr	r2, [pc, #320]	; (800223c <HAL_GPIO_Init+0x314>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d025      	beq.n	800214a <HAL_GPIO_Init+0x222>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a4f      	ldr	r2, [pc, #316]	; (8002240 <HAL_GPIO_Init+0x318>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01f      	beq.n	8002146 <HAL_GPIO_Init+0x21e>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a4e      	ldr	r2, [pc, #312]	; (8002244 <HAL_GPIO_Init+0x31c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d019      	beq.n	8002142 <HAL_GPIO_Init+0x21a>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a4d      	ldr	r2, [pc, #308]	; (8002248 <HAL_GPIO_Init+0x320>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d013      	beq.n	800213e <HAL_GPIO_Init+0x216>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a4c      	ldr	r2, [pc, #304]	; (800224c <HAL_GPIO_Init+0x324>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d00d      	beq.n	800213a <HAL_GPIO_Init+0x212>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4a4b      	ldr	r2, [pc, #300]	; (8002250 <HAL_GPIO_Init+0x328>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d007      	beq.n	8002136 <HAL_GPIO_Init+0x20e>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_GPIO_Init+0x32c>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d101      	bne.n	8002132 <HAL_GPIO_Init+0x20a>
 800212e:	2307      	movs	r3, #7
 8002130:	e00e      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002132:	2308      	movs	r3, #8
 8002134:	e00c      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002136:	2306      	movs	r3, #6
 8002138:	e00a      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800213a:	2305      	movs	r3, #5
 800213c:	e008      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800213e:	2304      	movs	r3, #4
 8002140:	e006      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002142:	2303      	movs	r3, #3
 8002144:	e004      	b.n	8002150 <HAL_GPIO_Init+0x228>
 8002146:	2302      	movs	r3, #2
 8002148:	e002      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800214a:	2301      	movs	r3, #1
 800214c:	e000      	b.n	8002150 <HAL_GPIO_Init+0x228>
 800214e:	2300      	movs	r3, #0
 8002150:	69fa      	ldr	r2, [r7, #28]
 8002152:	f002 0203 	and.w	r2, r2, #3
 8002156:	0092      	lsls	r2, r2, #2
 8002158:	4093      	lsls	r3, r2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002160:	4934      	ldr	r1, [pc, #208]	; (8002234 <HAL_GPIO_Init+0x30c>)
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	089b      	lsrs	r3, r3, #2
 8002166:	3302      	adds	r3, #2
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <HAL_GPIO_Init+0x330>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	43db      	mvns	r3, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4013      	ands	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800218a:	69ba      	ldr	r2, [r7, #24]
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4313      	orrs	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002192:	4a31      	ldr	r2, [pc, #196]	; (8002258 <HAL_GPIO_Init+0x330>)
 8002194:	69bb      	ldr	r3, [r7, #24]
 8002196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002198:	4b2f      	ldr	r3, [pc, #188]	; (8002258 <HAL_GPIO_Init+0x330>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	43db      	mvns	r3, r3
 80021a2:	69ba      	ldr	r2, [r7, #24]
 80021a4:	4013      	ands	r3, r2
 80021a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021bc:	4a26      	ldr	r2, [pc, #152]	; (8002258 <HAL_GPIO_Init+0x330>)
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c2:	4b25      	ldr	r3, [pc, #148]	; (8002258 <HAL_GPIO_Init+0x330>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_GPIO_Init+0x330>)
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_GPIO_Init+0x330>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	43db      	mvns	r3, r3
 80021f6:	69ba      	ldr	r2, [r7, #24]
 80021f8:	4013      	ands	r3, r2
 80021fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d003      	beq.n	8002210 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002210:	4a11      	ldr	r2, [pc, #68]	; (8002258 <HAL_GPIO_Init+0x330>)
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3301      	adds	r3, #1
 800221a:	61fb      	str	r3, [r7, #28]
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b0f      	cmp	r3, #15
 8002220:	f67f ae90 	bls.w	8001f44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002224:	bf00      	nop
 8002226:	3724      	adds	r7, #36	; 0x24
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40023800 	.word	0x40023800
 8002234:	40013800 	.word	0x40013800
 8002238:	40020000 	.word	0x40020000
 800223c:	40020400 	.word	0x40020400
 8002240:	40020800 	.word	0x40020800
 8002244:	40020c00 	.word	0x40020c00
 8002248:	40021000 	.word	0x40021000
 800224c:	40021400 	.word	0x40021400
 8002250:	40021800 	.word	0x40021800
 8002254:	40021c00 	.word	0x40021c00
 8002258:	40013c00 	.word	0x40013c00

0800225c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	807b      	strh	r3, [r7, #2]
 8002268:	4613      	mov	r3, r2
 800226a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800226c:	787b      	ldrb	r3, [r7, #1]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002278:	e003      	b.n	8002282 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800227a:	887b      	ldrh	r3, [r7, #2]
 800227c:	041a      	lsls	r2, r3, #16
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	619a      	str	r2, [r3, #24]
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	6078      	str	r0, [r7, #4]
 8002296:	460b      	mov	r3, r1
 8002298:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695a      	ldr	r2, [r3, #20]
 800229e:	887b      	ldrh	r3, [r7, #2]
 80022a0:	401a      	ands	r2, r3
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d104      	bne.n	80022b2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022a8:	887b      	ldrh	r3, [r7, #2]
 80022aa:	041a      	lsls	r2, r3, #16
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80022b0:	e002      	b.n	80022b8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80022b2:	887a      	ldrh	r2, [r7, #2]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	619a      	str	r2, [r3, #24]
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	4603      	mov	r3, r0
 80022cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022ce:	4b08      	ldr	r3, [pc, #32]	; (80022f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022d0:	695a      	ldr	r2, [r3, #20]
 80022d2:	88fb      	ldrh	r3, [r7, #6]
 80022d4:	4013      	ands	r3, r2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022e0:	88fb      	ldrh	r3, [r7, #6]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f005 fd8e 	bl	8007e04 <HAL_GPIO_EXTI_Callback>
  }
}
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40013c00 	.word	0x40013c00

080022f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e11f      	b.n	8002546 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d106      	bne.n	8002320 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f005 fec0 	bl	80080a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2224      	movs	r2, #36	; 0x24
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681a      	ldr	r2, [r3, #0]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 0201 	bic.w	r2, r2, #1
 8002336:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002346:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002356:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002358:	f001 fb8e 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 800235c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	4a7b      	ldr	r2, [pc, #492]	; (8002550 <HAL_I2C_Init+0x25c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d807      	bhi.n	8002378 <HAL_I2C_Init+0x84>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4a7a      	ldr	r2, [pc, #488]	; (8002554 <HAL_I2C_Init+0x260>)
 800236c:	4293      	cmp	r3, r2
 800236e:	bf94      	ite	ls
 8002370:	2301      	movls	r3, #1
 8002372:	2300      	movhi	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	e006      	b.n	8002386 <HAL_I2C_Init+0x92>
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4a77      	ldr	r2, [pc, #476]	; (8002558 <HAL_I2C_Init+0x264>)
 800237c:	4293      	cmp	r3, r2
 800237e:	bf94      	ite	ls
 8002380:	2301      	movls	r3, #1
 8002382:	2300      	movhi	r3, #0
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e0db      	b.n	8002546 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	4a72      	ldr	r2, [pc, #456]	; (800255c <HAL_I2C_Init+0x268>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	0c9b      	lsrs	r3, r3, #18
 8002398:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a64      	ldr	r2, [pc, #400]	; (8002550 <HAL_I2C_Init+0x25c>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d802      	bhi.n	80023c8 <HAL_I2C_Init+0xd4>
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	3301      	adds	r3, #1
 80023c6:	e009      	b.n	80023dc <HAL_I2C_Init+0xe8>
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023ce:	fb02 f303 	mul.w	r3, r2, r3
 80023d2:	4a63      	ldr	r2, [pc, #396]	; (8002560 <HAL_I2C_Init+0x26c>)
 80023d4:	fba2 2303 	umull	r2, r3, r2, r3
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	3301      	adds	r3, #1
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6812      	ldr	r2, [r2, #0]
 80023e0:	430b      	orrs	r3, r1
 80023e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	69db      	ldr	r3, [r3, #28]
 80023ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4956      	ldr	r1, [pc, #344]	; (8002550 <HAL_I2C_Init+0x25c>)
 80023f8:	428b      	cmp	r3, r1
 80023fa:	d80d      	bhi.n	8002418 <HAL_I2C_Init+0x124>
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	1e59      	subs	r1, r3, #1
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	fbb1 f3f3 	udiv	r3, r1, r3
 800240a:	3301      	adds	r3, #1
 800240c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002410:	2b04      	cmp	r3, #4
 8002412:	bf38      	it	cc
 8002414:	2304      	movcc	r3, #4
 8002416:	e04f      	b.n	80024b8 <HAL_I2C_Init+0x1c4>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d111      	bne.n	8002444 <HAL_I2C_Init+0x150>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6859      	ldr	r1, [r3, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	440b      	add	r3, r1
 800242e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002432:	3301      	adds	r3, #1
 8002434:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002438:	2b00      	cmp	r3, #0
 800243a:	bf0c      	ite	eq
 800243c:	2301      	moveq	r3, #1
 800243e:	2300      	movne	r3, #0
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e012      	b.n	800246a <HAL_I2C_Init+0x176>
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	1e58      	subs	r0, r3, #1
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6859      	ldr	r1, [r3, #4]
 800244c:	460b      	mov	r3, r1
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	0099      	lsls	r1, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	fbb0 f3f3 	udiv	r3, r0, r3
 800245a:	3301      	adds	r3, #1
 800245c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_Init+0x17e>
 800246e:	2301      	movs	r3, #1
 8002470:	e022      	b.n	80024b8 <HAL_I2C_Init+0x1c4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10e      	bne.n	8002498 <HAL_I2C_Init+0x1a4>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	1e58      	subs	r0, r3, #1
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6859      	ldr	r1, [r3, #4]
 8002482:	460b      	mov	r3, r1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	440b      	add	r3, r1
 8002488:	fbb0 f3f3 	udiv	r3, r0, r3
 800248c:	3301      	adds	r3, #1
 800248e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002492:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002496:	e00f      	b.n	80024b8 <HAL_I2C_Init+0x1c4>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1e58      	subs	r0, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6859      	ldr	r1, [r3, #4]
 80024a0:	460b      	mov	r3, r1
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	0099      	lsls	r1, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ae:	3301      	adds	r3, #1
 80024b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024b8:	6879      	ldr	r1, [r7, #4]
 80024ba:	6809      	ldr	r1, [r1, #0]
 80024bc:	4313      	orrs	r3, r2
 80024be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69da      	ldr	r2, [r3, #28]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6911      	ldr	r1, [r2, #16]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	68d2      	ldr	r2, [r2, #12]
 80024f2:	4311      	orrs	r1, r2
 80024f4:	687a      	ldr	r2, [r7, #4]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	430b      	orrs	r3, r1
 80024fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695a      	ldr	r2, [r3, #20]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f042 0201 	orr.w	r2, r2, #1
 8002526:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2220      	movs	r2, #32
 8002532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2200      	movs	r2, #0
 800253a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	000186a0 	.word	0x000186a0
 8002554:	001e847f 	.word	0x001e847f
 8002558:	003d08ff 	.word	0x003d08ff
 800255c:	431bde83 	.word	0x431bde83
 8002560:	10624dd3 	.word	0x10624dd3

08002564 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af02      	add	r7, sp, #8
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	461a      	mov	r2, r3
 8002570:	460b      	mov	r3, r1
 8002572:	817b      	strh	r3, [r7, #10]
 8002574:	4613      	mov	r3, r2
 8002576:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002578:	f7fe fd56 	bl	8001028 <HAL_GetTick>
 800257c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	f040 80e0 	bne.w	800274c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	2319      	movs	r3, #25
 8002592:	2201      	movs	r2, #1
 8002594:	4970      	ldr	r1, [pc, #448]	; (8002758 <HAL_I2C_Master_Transmit+0x1f4>)
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 fc56 	bl	8002e48 <I2C_WaitOnFlagUntilTimeout>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80025a2:	2302      	movs	r3, #2
 80025a4:	e0d3      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_I2C_Master_Transmit+0x50>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e0cc      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d007      	beq.n	80025da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f042 0201 	orr.w	r2, r2, #1
 80025d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2221      	movs	r2, #33	; 0x21
 80025ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2210      	movs	r2, #16
 80025f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	893a      	ldrh	r2, [r7, #8]
 800260a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002610:	b29a      	uxth	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	4a50      	ldr	r2, [pc, #320]	; (800275c <HAL_I2C_Master_Transmit+0x1f8>)
 800261a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800261c:	8979      	ldrh	r1, [r7, #10]
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fac2 	bl	8002bac <I2C_MasterRequestWrite>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e08d      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002632:	2300      	movs	r3, #0
 8002634:	613b      	str	r3, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002648:	e066      	b.n	8002718 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	6a39      	ldr	r1, [r7, #32]
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 fcd0 	bl	8002ff4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d00d      	beq.n	8002676 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2b04      	cmp	r3, #4
 8002660:	d107      	bne.n	8002672 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002670:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06b      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267a:	781a      	ldrb	r2, [r3, #0]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002686:	1c5a      	adds	r2, r3, #1
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29b      	uxth	r3, r3
 8002692:	3b01      	subs	r3, #1
 8002694:	b29a      	uxth	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269e:	3b01      	subs	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	f003 0304 	and.w	r3, r3, #4
 80026b0:	2b04      	cmp	r3, #4
 80026b2:	d11b      	bne.n	80026ec <HAL_I2C_Master_Transmit+0x188>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d017      	beq.n	80026ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	781a      	ldrb	r2, [r3, #0]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	3b01      	subs	r3, #1
 80026da:	b29a      	uxth	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	3b01      	subs	r3, #1
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	6a39      	ldr	r1, [r7, #32]
 80026f0:	68f8      	ldr	r0, [r7, #12]
 80026f2:	f000 fcc0 	bl	8003076 <I2C_WaitOnBTFFlagUntilTimeout>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00d      	beq.n	8002718 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	2b04      	cmp	r3, #4
 8002702:	d107      	bne.n	8002714 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002712:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e01a      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	2b00      	cmp	r3, #0
 800271e:	d194      	bne.n	800264a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2220      	movs	r2, #32
 8002734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002748:	2300      	movs	r3, #0
 800274a:	e000      	b.n	800274e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800274c:	2302      	movs	r3, #2
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3718      	adds	r7, #24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	00100002 	.word	0x00100002
 800275c:	ffff0000 	.word	0xffff0000

08002760 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08c      	sub	sp, #48	; 0x30
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	607a      	str	r2, [r7, #4]
 800276a:	461a      	mov	r2, r3
 800276c:	460b      	mov	r3, r1
 800276e:	817b      	strh	r3, [r7, #10]
 8002770:	4613      	mov	r3, r2
 8002772:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7fe fc58 	bl	8001028 <HAL_GetTick>
 8002778:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b20      	cmp	r3, #32
 8002784:	f040 820b 	bne.w	8002b9e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	2319      	movs	r3, #25
 800278e:	2201      	movs	r2, #1
 8002790:	497c      	ldr	r1, [pc, #496]	; (8002984 <HAL_I2C_Master_Receive+0x224>)
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f000 fb58 	bl	8002e48 <I2C_WaitOnFlagUntilTimeout>
 8002798:	4603      	mov	r3, r0
 800279a:	2b00      	cmp	r3, #0
 800279c:	d001      	beq.n	80027a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
 80027a0:	e1fe      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_I2C_Master_Receive+0x50>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e1f7      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0301 	and.w	r3, r3, #1
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d007      	beq.n	80027d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0201 	orr.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2222      	movs	r2, #34	; 0x22
 80027ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2210      	movs	r2, #16
 80027f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2200      	movs	r2, #0
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	893a      	ldrh	r2, [r7, #8]
 8002806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29a      	uxth	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4a5c      	ldr	r2, [pc, #368]	; (8002988 <HAL_I2C_Master_Receive+0x228>)
 8002816:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002818:	8979      	ldrh	r1, [r7, #10]
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fa46 	bl	8002cb0 <I2C_MasterRequestRead>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e1b8      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002832:	2b00      	cmp	r3, #0
 8002834:	d113      	bne.n	800285e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002836:	2300      	movs	r3, #0
 8002838:	623b      	str	r3, [r7, #32]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	695b      	ldr	r3, [r3, #20]
 8002840:	623b      	str	r3, [r7, #32]
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	e18c      	b.n	8002b78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002862:	2b01      	cmp	r3, #1
 8002864:	d11b      	bne.n	800289e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002874:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	695b      	ldr	r3, [r3, #20]
 8002880:	61fb      	str	r3, [r7, #28]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289a:	601a      	str	r2, [r3, #0]
 800289c:	e16c      	b.n	8002b78 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d11b      	bne.n	80028de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	61bb      	str	r3, [r7, #24]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	61bb      	str	r3, [r7, #24]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	e14c      	b.n	8002b78 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	695b      	ldr	r3, [r3, #20]
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002904:	e138      	b.n	8002b78 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800290a:	2b03      	cmp	r3, #3
 800290c:	f200 80f1 	bhi.w	8002af2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002914:	2b01      	cmp	r3, #1
 8002916:	d123      	bne.n	8002960 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800291c:	68f8      	ldr	r0, [r7, #12]
 800291e:	f000 fbeb 	bl	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e139      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	1c5a      	adds	r2, r3, #1
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002948:	3b01      	subs	r3, #1
 800294a:	b29a      	uxth	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800295e:	e10b      	b.n	8002b78 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002964:	2b02      	cmp	r3, #2
 8002966:	d14e      	bne.n	8002a06 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296e:	2200      	movs	r2, #0
 8002970:	4906      	ldr	r1, [pc, #24]	; (800298c <HAL_I2C_Master_Receive+0x22c>)
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fa68 	bl	8002e48 <I2C_WaitOnFlagUntilTimeout>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e10e      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
 8002982:	bf00      	nop
 8002984:	00100002 	.word	0x00100002
 8002988:	ffff0000 	.word	0xffff0000
 800298c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	691a      	ldr	r2, [r3, #16]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	1c5a      	adds	r2, r3, #1
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	3b01      	subs	r3, #1
 80029cc:	b29a      	uxth	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	691a      	ldr	r2, [r3, #16]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ee:	3b01      	subs	r3, #1
 80029f0:	b29a      	uxth	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029fa:	b29b      	uxth	r3, r3
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a04:	e0b8      	b.n	8002b78 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a08:	9300      	str	r3, [sp, #0]
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	4966      	ldr	r1, [pc, #408]	; (8002ba8 <HAL_I2C_Master_Receive+0x448>)
 8002a10:	68f8      	ldr	r0, [r7, #12]
 8002a12:	f000 fa19 	bl	8002e48 <I2C_WaitOnFlagUntilTimeout>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d001      	beq.n	8002a20 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0bf      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a68:	2200      	movs	r2, #0
 8002a6a:	494f      	ldr	r1, [pc, #316]	; (8002ba8 <HAL_I2C_Master_Receive+0x448>)
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 f9eb 	bl	8002e48 <I2C_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a78:	2301      	movs	r3, #1
 8002a7a:	e091      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691a      	ldr	r2, [r3, #16]
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	1c5a      	adds	r2, r3, #1
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac8:	b2d2      	uxtb	r2, r2
 8002aca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002af0:	e042      	b.n	8002b78 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f000 fafe 	bl	80030f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e04c      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	691a      	ldr	r2, [r3, #16]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	1c5a      	adds	r2, r3, #1
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b22:	3b01      	subs	r3, #1
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d118      	bne.n	8002b78 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	f47f aec2 	bne.w	8002906 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2220      	movs	r2, #32
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2200      	movs	r2, #0
 8002b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
  }
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3728      	adds	r7, #40	; 0x28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	00010004 	.word	0x00010004

08002bac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d006      	beq.n	8002bd6 <I2C_MasterRequestWrite+0x2a>
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d003      	beq.n	8002bd6 <I2C_MasterRequestWrite+0x2a>
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bd4:	d108      	bne.n	8002be8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e00b      	b.n	8002c00 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	2b12      	cmp	r3, #18
 8002bee:	d107      	bne.n	8002c00 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bfe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	9300      	str	r3, [sp, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2200      	movs	r2, #0
 8002c08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f91b 	bl	8002e48 <I2C_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d00c      	beq.n	8002c32 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e035      	b.n	8002c9e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c3a:	d108      	bne.n	8002c4e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c4a:	611a      	str	r2, [r3, #16]
 8002c4c:	e01b      	b.n	8002c86 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c4e:	897b      	ldrh	r3, [r7, #10]
 8002c50:	11db      	asrs	r3, r3, #7
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f003 0306 	and.w	r3, r3, #6
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f063 030f 	orn	r3, r3, #15
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	490f      	ldr	r1, [pc, #60]	; (8002ca8 <I2C_MasterRequestWrite+0xfc>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f942 	bl	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e010      	b.n	8002c9e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c7c:	897b      	ldrh	r3, [r7, #10]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4908      	ldr	r1, [pc, #32]	; (8002cac <I2C_MasterRequestWrite+0x100>)
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f000 f932 	bl	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c92:	4603      	mov	r3, r0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d001      	beq.n	8002c9c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	00010008 	.word	0x00010008
 8002cac:	00010002 	.word	0x00010002

08002cb0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b088      	sub	sp, #32
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cd4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d006      	beq.n	8002cea <I2C_MasterRequestRead+0x3a>
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d003      	beq.n	8002cea <I2C_MasterRequestRead+0x3a>
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ce8:	d108      	bne.n	8002cfc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	e00b      	b.n	8002d14 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	2b11      	cmp	r3, #17
 8002d02:	d107      	bne.n	8002d14 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d12:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f891 	bl	8002e48 <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00c      	beq.n	8002d46 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e078      	b.n	8002e38 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d4e:	d108      	bne.n	8002d62 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d50:	897b      	ldrh	r3, [r7, #10]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	f043 0301 	orr.w	r3, r3, #1
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	611a      	str	r2, [r3, #16]
 8002d60:	e05e      	b.n	8002e20 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d62:	897b      	ldrh	r3, [r7, #10]
 8002d64:	11db      	asrs	r3, r3, #7
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f003 0306 	and.w	r3, r3, #6
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f063 030f 	orn	r3, r3, #15
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4930      	ldr	r1, [pc, #192]	; (8002e40 <I2C_MasterRequestRead+0x190>)
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 f8b8 	bl	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e053      	b.n	8002e38 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d90:	897b      	ldrh	r3, [r7, #10]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	4929      	ldr	r1, [pc, #164]	; (8002e44 <I2C_MasterRequestRead+0x194>)
 8002da0:	68f8      	ldr	r0, [r7, #12]
 8002da2:	f000 f8a8 	bl	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e043      	b.n	8002e38 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	695b      	ldr	r3, [r3, #20]
 8002dba:	613b      	str	r3, [r7, #16]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	699b      	ldr	r3, [r3, #24]
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd4:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f830 	bl	8002e48 <I2C_WaitOnFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00c      	beq.n	8002e08 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e02:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e017      	b.n	8002e38 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002e08:	897b      	ldrh	r3, [r7, #10]
 8002e0a:	11db      	asrs	r3, r3, #7
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f003 0306 	and.w	r3, r3, #6
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	f063 030e 	orn	r3, r3, #14
 8002e18:	b2da      	uxtb	r2, r3
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4907      	ldr	r1, [pc, #28]	; (8002e44 <I2C_MasterRequestRead+0x194>)
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f865 	bl	8002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	00010008 	.word	0x00010008
 8002e44:	00010002 	.word	0x00010002

08002e48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b084      	sub	sp, #16
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	4613      	mov	r3, r2
 8002e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e58:	e025      	b.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e60:	d021      	beq.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e62:	f7fe f8e1 	bl	8001028 <HAL_GetTick>
 8002e66:	4602      	mov	r2, r0
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	1ad3      	subs	r3, r2, r3
 8002e6c:	683a      	ldr	r2, [r7, #0]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d302      	bcc.n	8002e78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d116      	bne.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2220      	movs	r2, #32
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e92:	f043 0220 	orr.w	r2, r3, #32
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e023      	b.n	8002eee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	0c1b      	lsrs	r3, r3, #16
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d10d      	bne.n	8002ecc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bf0c      	ite	eq
 8002ec2:	2301      	moveq	r3, #1
 8002ec4:	2300      	movne	r3, #0
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	e00c      	b.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699b      	ldr	r3, [r3, #24]
 8002ed2:	43da      	mvns	r2, r3
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	bf0c      	ite	eq
 8002ede:	2301      	moveq	r3, #1
 8002ee0:	2300      	movne	r3, #0
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d0b6      	beq.n	8002e5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}

08002ef6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	60f8      	str	r0, [r7, #12]
 8002efe:	60b9      	str	r1, [r7, #8]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f04:	e051      	b.n	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f14:	d123      	bne.n	8002f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f24:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f2e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f043 0204 	orr.w	r2, r3, #4
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e046      	b.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f64:	d021      	beq.n	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f66:	f7fe f85f 	bl	8001028 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d302      	bcc.n	8002f7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d116      	bne.n	8002faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2220      	movs	r2, #32
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f043 0220 	orr.w	r2, r3, #32
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e020      	b.n	8002fec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	0c1b      	lsrs	r3, r3, #16
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d10c      	bne.n	8002fce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	bf14      	ite	ne
 8002fc6:	2301      	movne	r3, #1
 8002fc8:	2300      	moveq	r3, #0
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	e00b      	b.n	8002fe6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	699b      	ldr	r3, [r3, #24]
 8002fd4:	43da      	mvns	r2, r3
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	bf14      	ite	ne
 8002fe0:	2301      	movne	r3, #1
 8002fe2:	2300      	moveq	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d18d      	bne.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003000:	e02d      	b.n	800305e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 f8ce 	bl	80031a4 <I2C_IsAcknowledgeFailed>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e02d      	b.n	800306e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003018:	d021      	beq.n	800305e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800301a:	f7fe f805 	bl	8001028 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d116      	bne.n	800305e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0220 	orr.w	r2, r3, #32
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e007      	b.n	800306e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	695b      	ldr	r3, [r3, #20]
 8003064:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003068:	2b80      	cmp	r3, #128	; 0x80
 800306a:	d1ca      	bne.n	8003002 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3710      	adds	r7, #16
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b084      	sub	sp, #16
 800307a:	af00      	add	r7, sp, #0
 800307c:	60f8      	str	r0, [r7, #12]
 800307e:	60b9      	str	r1, [r7, #8]
 8003080:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003082:	e02d      	b.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f88d 	bl	80031a4 <I2C_IsAcknowledgeFailed>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e02d      	b.n	80030f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800309a:	d021      	beq.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7fd ffc4 	bl	8001028 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d302      	bcc.n	80030b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0304 	and.w	r3, r3, #4
 80030ea:	2b04      	cmp	r3, #4
 80030ec:	d1ca      	bne.n	8003084 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003104:	e042      	b.n	800318c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695b      	ldr	r3, [r3, #20]
 800310c:	f003 0310 	and.w	r3, r3, #16
 8003110:	2b10      	cmp	r3, #16
 8003112:	d119      	bne.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0210 	mvn.w	r2, #16
 800311c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e029      	b.n	800319c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003148:	f7fd ff6e 	bl	8001028 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	429a      	cmp	r2, r3
 8003156:	d302      	bcc.n	800315e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2220      	movs	r2, #32
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003178:	f043 0220 	orr.w	r2, r3, #32
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	2200      	movs	r2, #0
 8003184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e007      	b.n	800319c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003196:	2b40      	cmp	r3, #64	; 0x40
 8003198:	d1b5      	bne.n	8003106 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800319a:	2300      	movs	r3, #0
}
 800319c:	4618      	mov	r0, r3
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ba:	d11b      	bne.n	80031f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2220      	movs	r2, #32
 80031d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e0:	f043 0204 	orr.w	r2, r3, #4
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	370c      	adds	r7, #12
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
	...

08003204 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e25b      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d075      	beq.n	800330e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003222:	4ba3      	ldr	r3, [pc, #652]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d00c      	beq.n	8003248 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800322e:	4ba0      	ldr	r3, [pc, #640]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003236:	2b08      	cmp	r3, #8
 8003238:	d112      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800323a:	4b9d      	ldr	r3, [pc, #628]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003246:	d10b      	bne.n	8003260 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003248:	4b99      	ldr	r3, [pc, #612]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05b      	beq.n	800330c <HAL_RCC_OscConfig+0x108>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d157      	bne.n	800330c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e236      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x74>
 800326a:	4b91      	ldr	r3, [pc, #580]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4a90      	ldr	r2, [pc, #576]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003274:	6013      	str	r3, [r2, #0]
 8003276:	e01d      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003280:	d10c      	bne.n	800329c <HAL_RCC_OscConfig+0x98>
 8003282:	4b8b      	ldr	r3, [pc, #556]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a8a      	ldr	r2, [pc, #552]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b88      	ldr	r3, [pc, #544]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a87      	ldr	r2, [pc, #540]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	e00b      	b.n	80032b4 <HAL_RCC_OscConfig+0xb0>
 800329c:	4b84      	ldr	r3, [pc, #528]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a83      	ldr	r2, [pc, #524]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b81      	ldr	r3, [pc, #516]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a80      	ldr	r2, [pc, #512]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032bc:	f7fd feb4 	bl	8001028 <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fd feb0 	bl	8001028 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e1fb      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032d6:	4b76      	ldr	r3, [pc, #472]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0xc0>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e4:	f7fd fea0 	bl	8001028 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fd fe9c 	bl	8001028 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e1e7      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032fe:	4b6c      	ldr	r3, [pc, #432]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0xe8>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d063      	beq.n	80033e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800331a:	4b65      	ldr	r3, [pc, #404]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f003 030c 	and.w	r3, r3, #12
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00b      	beq.n	800333e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003326:	4b62      	ldr	r3, [pc, #392]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800332e:	2b08      	cmp	r3, #8
 8003330:	d11c      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003332:	4b5f      	ldr	r3, [pc, #380]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d116      	bne.n	800336c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333e:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d005      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e1bb      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003356:	4b56      	ldr	r3, [pc, #344]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4952      	ldr	r1, [pc, #328]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003366:	4313      	orrs	r3, r2
 8003368:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336a:	e03a      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d020      	beq.n	80033b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003374:	4b4f      	ldr	r3, [pc, #316]	; (80034b4 <HAL_RCC_OscConfig+0x2b0>)
 8003376:	2201      	movs	r2, #1
 8003378:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337a:	f7fd fe55 	bl	8001028 <HAL_GetTick>
 800337e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003382:	f7fd fe51 	bl	8001028 <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e19c      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003394:	4b46      	ldr	r3, [pc, #280]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a0:	4b43      	ldr	r3, [pc, #268]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	4940      	ldr	r1, [pc, #256]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]
 80033b4:	e015      	b.n	80033e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b6:	4b3f      	ldr	r3, [pc, #252]	; (80034b4 <HAL_RCC_OscConfig+0x2b0>)
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033bc:	f7fd fe34 	bl	8001028 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7fd fe30 	bl	8001028 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e17b      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d6:	4b36      	ldr	r3, [pc, #216]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1f0      	bne.n	80033c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0308 	and.w	r3, r3, #8
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d030      	beq.n	8003450 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d016      	beq.n	8003424 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f6:	4b30      	ldr	r3, [pc, #192]	; (80034b8 <HAL_RCC_OscConfig+0x2b4>)
 80033f8:	2201      	movs	r2, #1
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fd fe14 	bl	8001028 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003404:	f7fd fe10 	bl	8001028 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e15b      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003416:	4b26      	ldr	r3, [pc, #152]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d0f0      	beq.n	8003404 <HAL_RCC_OscConfig+0x200>
 8003422:	e015      	b.n	8003450 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_OscConfig+0x2b4>)
 8003426:	2200      	movs	r2, #0
 8003428:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342a:	f7fd fdfd 	bl	8001028 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003430:	e008      	b.n	8003444 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003432:	f7fd fdf9 	bl	8001028 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d901      	bls.n	8003444 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e144      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f0      	bne.n	8003432 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 80a0 	beq.w	800359e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800345e:	2300      	movs	r3, #0
 8003460:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003462:	4b13      	ldr	r3, [pc, #76]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10f      	bne.n	800348e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800346e:	2300      	movs	r3, #0
 8003470:	60bb      	str	r3, [r7, #8]
 8003472:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003476:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800347c:	6413      	str	r3, [r2, #64]	; 0x40
 800347e:	4b0c      	ldr	r3, [pc, #48]	; (80034b0 <HAL_RCC_OscConfig+0x2ac>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003486:	60bb      	str	r3, [r7, #8]
 8003488:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348a:	2301      	movs	r3, #1
 800348c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348e:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_RCC_OscConfig+0x2b8>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d121      	bne.n	80034de <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800349a:	4b08      	ldr	r3, [pc, #32]	; (80034bc <HAL_RCC_OscConfig+0x2b8>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a07      	ldr	r2, [pc, #28]	; (80034bc <HAL_RCC_OscConfig+0x2b8>)
 80034a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034a6:	f7fd fdbf 	bl	8001028 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ac:	e011      	b.n	80034d2 <HAL_RCC_OscConfig+0x2ce>
 80034ae:	bf00      	nop
 80034b0:	40023800 	.word	0x40023800
 80034b4:	42470000 	.word	0x42470000
 80034b8:	42470e80 	.word	0x42470e80
 80034bc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034c0:	f7fd fdb2 	bl	8001028 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e0fd      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034d2:	4b81      	ldr	r3, [pc, #516]	; (80036d8 <HAL_RCC_OscConfig+0x4d4>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d106      	bne.n	80034f4 <HAL_RCC_OscConfig+0x2f0>
 80034e6:	4b7d      	ldr	r3, [pc, #500]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a7c      	ldr	r2, [pc, #496]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 80034ec:	f043 0301 	orr.w	r3, r3, #1
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
 80034f2:	e01c      	b.n	800352e <HAL_RCC_OscConfig+0x32a>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d10c      	bne.n	8003516 <HAL_RCC_OscConfig+0x312>
 80034fc:	4b77      	ldr	r3, [pc, #476]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 80034fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003500:	4a76      	ldr	r2, [pc, #472]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003502:	f043 0304 	orr.w	r3, r3, #4
 8003506:	6713      	str	r3, [r2, #112]	; 0x70
 8003508:	4b74      	ldr	r3, [pc, #464]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a73      	ldr	r2, [pc, #460]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	e00b      	b.n	800352e <HAL_RCC_OscConfig+0x32a>
 8003516:	4b71      	ldr	r3, [pc, #452]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800351a:	4a70      	ldr	r2, [pc, #448]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 800351c:	f023 0301 	bic.w	r3, r3, #1
 8003520:	6713      	str	r3, [r2, #112]	; 0x70
 8003522:	4b6e      	ldr	r3, [pc, #440]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a6d      	ldr	r2, [pc, #436]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003528:	f023 0304 	bic.w	r3, r3, #4
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d015      	beq.n	8003562 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003536:	f7fd fd77 	bl	8001028 <HAL_GetTick>
 800353a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800353c:	e00a      	b.n	8003554 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800353e:	f7fd fd73 	bl	8001028 <HAL_GetTick>
 8003542:	4602      	mov	r2, r0
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	f241 3288 	movw	r2, #5000	; 0x1388
 800354c:	4293      	cmp	r3, r2
 800354e:	d901      	bls.n	8003554 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003550:	2303      	movs	r3, #3
 8003552:	e0bc      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003554:	4b61      	ldr	r3, [pc, #388]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d0ee      	beq.n	800353e <HAL_RCC_OscConfig+0x33a>
 8003560:	e014      	b.n	800358c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003562:	f7fd fd61 	bl	8001028 <HAL_GetTick>
 8003566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003568:	e00a      	b.n	8003580 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800356a:	f7fd fd5d 	bl	8001028 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	f241 3288 	movw	r2, #5000	; 0x1388
 8003578:	4293      	cmp	r3, r2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0a6      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	4b56      	ldr	r3, [pc, #344]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d1ee      	bne.n	800356a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800358c:	7dfb      	ldrb	r3, [r7, #23]
 800358e:	2b01      	cmp	r3, #1
 8003590:	d105      	bne.n	800359e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003592:	4b52      	ldr	r3, [pc, #328]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003596:	4a51      	ldr	r2, [pc, #324]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003598:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800359c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 8092 	beq.w	80036cc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a8:	4b4c      	ldr	r3, [pc, #304]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 030c 	and.w	r3, r3, #12
 80035b0:	2b08      	cmp	r3, #8
 80035b2:	d05c      	beq.n	800366e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d141      	bne.n	8003640 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <HAL_RCC_OscConfig+0x4dc>)
 80035be:	2200      	movs	r2, #0
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fd fd31 	bl	8001028 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fd fd2d 	bl	8001028 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e078      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035dc:	4b3f      	ldr	r3, [pc, #252]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1f0      	bne.n	80035ca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	69da      	ldr	r2, [r3, #28]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f6:	019b      	lsls	r3, r3, #6
 80035f8:	431a      	orrs	r2, r3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	085b      	lsrs	r3, r3, #1
 8003600:	3b01      	subs	r3, #1
 8003602:	041b      	lsls	r3, r3, #16
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	061b      	lsls	r3, r3, #24
 800360c:	4933      	ldr	r1, [pc, #204]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003612:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <HAL_RCC_OscConfig+0x4dc>)
 8003614:	2201      	movs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fd fd06 	bl	8001028 <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003620:	f7fd fd02 	bl	8001028 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e04d      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b2a      	ldr	r3, [pc, #168]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x41c>
 800363e:	e045      	b.n	80036cc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <HAL_RCC_OscConfig+0x4dc>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003646:	f7fd fcef 	bl	8001028 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364e:	f7fd fceb 	bl	8001028 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e036      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x44a>
 800366c:	e02e      	b.n	80036cc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d101      	bne.n	800367a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e029      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800367a:	4b18      	ldr	r3, [pc, #96]	; (80036dc <HAL_RCC_OscConfig+0x4d8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	429a      	cmp	r2, r3
 800368c:	d11c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d115      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036a2:	4013      	ands	r3, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d10d      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d106      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d001      	beq.n	80036cc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e000      	b.n	80036ce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3718      	adds	r7, #24
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	40007000 	.word	0x40007000
 80036dc:	40023800 	.word	0x40023800
 80036e0:	42470060 	.word	0x42470060

080036e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d101      	bne.n	80036f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e0cc      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036f8:	4b68      	ldr	r3, [pc, #416]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 030f 	and.w	r3, r3, #15
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	429a      	cmp	r2, r3
 8003704:	d90c      	bls.n	8003720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003706:	4b65      	ldr	r3, [pc, #404]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	b2d2      	uxtb	r2, r2
 800370c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800370e:	4b63      	ldr	r3, [pc, #396]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	683a      	ldr	r2, [r7, #0]
 8003718:	429a      	cmp	r2, r3
 800371a:	d001      	beq.n	8003720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0b8      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0304 	and.w	r3, r3, #4
 8003734:	2b00      	cmp	r3, #0
 8003736:	d005      	beq.n	8003744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003738:	4b59      	ldr	r3, [pc, #356]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0308 	and.w	r3, r3, #8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003750:	4b53      	ldr	r3, [pc, #332]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	4a52      	ldr	r2, [pc, #328]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800375a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800375c:	4b50      	ldr	r3, [pc, #320]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	494d      	ldr	r1, [pc, #308]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800376a:	4313      	orrs	r3, r2
 800376c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d044      	beq.n	8003804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003782:	4b47      	ldr	r3, [pc, #284]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d119      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e07f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d003      	beq.n	80037a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d107      	bne.n	80037b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a2:	4b3f      	ldr	r3, [pc, #252]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e06f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037b2:	4b3b      	ldr	r3, [pc, #236]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e067      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037c2:	4b37      	ldr	r3, [pc, #220]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f023 0203 	bic.w	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	4934      	ldr	r1, [pc, #208]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037d4:	f7fd fc28 	bl	8001028 <HAL_GetTick>
 80037d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037da:	e00a      	b.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037dc:	f7fd fc24 	bl	8001028 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e04f      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f2:	4b2b      	ldr	r3, [pc, #172]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 020c 	and.w	r2, r3, #12
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	429a      	cmp	r2, r3
 8003802:	d1eb      	bne.n	80037dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003804:	4b25      	ldr	r3, [pc, #148]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 030f 	and.w	r3, r3, #15
 800380c:	683a      	ldr	r2, [r7, #0]
 800380e:	429a      	cmp	r2, r3
 8003810:	d20c      	bcs.n	800382c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003812:	4b22      	ldr	r3, [pc, #136]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381a:	4b20      	ldr	r3, [pc, #128]	; (800389c <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	683a      	ldr	r2, [r7, #0]
 8003824:	429a      	cmp	r2, r3
 8003826:	d001      	beq.n	800382c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e032      	b.n	8003892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003838:	4b19      	ldr	r3, [pc, #100]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	4916      	ldr	r1, [pc, #88]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d009      	beq.n	800386a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003856:	4b12      	ldr	r3, [pc, #72]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	490e      	ldr	r1, [pc, #56]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	4313      	orrs	r3, r2
 8003868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800386a:	f000 f821 	bl	80038b0 <HAL_RCC_GetSysClockFreq>
 800386e:	4601      	mov	r1, r0
 8003870:	4b0b      	ldr	r3, [pc, #44]	; (80038a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	091b      	lsrs	r3, r3, #4
 8003876:	f003 030f 	and.w	r3, r3, #15
 800387a:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_RCC_ClockConfig+0x1c0>)
 800387c:	5cd3      	ldrb	r3, [r2, r3]
 800387e:	fa21 f303 	lsr.w	r3, r1, r3
 8003882:	4a09      	ldr	r2, [pc, #36]	; (80038a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003886:	4b09      	ldr	r3, [pc, #36]	; (80038ac <HAL_RCC_ClockConfig+0x1c8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4618      	mov	r0, r3
 800388c:	f7fd fb88 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3710      	adds	r7, #16
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	40023c00 	.word	0x40023c00
 80038a0:	40023800 	.word	0x40023800
 80038a4:	0800a19c 	.word	0x0800a19c
 80038a8:	20000008 	.word	0x20000008
 80038ac:	20000000 	.word	0x20000000

080038b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038b2:	b085      	sub	sp, #20
 80038b4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	607b      	str	r3, [r7, #4]
 80038ba:	2300      	movs	r3, #0
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	2300      	movs	r3, #0
 80038c0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038c6:	4b63      	ldr	r3, [pc, #396]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 030c 	and.w	r3, r3, #12
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d007      	beq.n	80038e2 <HAL_RCC_GetSysClockFreq+0x32>
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d008      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0x38>
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 80b4 	bne.w	8003a44 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038dc:	4b5e      	ldr	r3, [pc, #376]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80038de:	60bb      	str	r3, [r7, #8]
       break;
 80038e0:	e0b3      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038e2:	4b5e      	ldr	r3, [pc, #376]	; (8003a5c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038e4:	60bb      	str	r3, [r7, #8]
      break;
 80038e6:	e0b0      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038e8:	4b5a      	ldr	r3, [pc, #360]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038f2:	4b58      	ldr	r3, [pc, #352]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d04a      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038fe:	4b55      	ldr	r3, [pc, #340]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	099b      	lsrs	r3, r3, #6
 8003904:	f04f 0400 	mov.w	r4, #0
 8003908:	f240 11ff 	movw	r1, #511	; 0x1ff
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	ea03 0501 	and.w	r5, r3, r1
 8003914:	ea04 0602 	and.w	r6, r4, r2
 8003918:	4629      	mov	r1, r5
 800391a:	4632      	mov	r2, r6
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	f04f 0400 	mov.w	r4, #0
 8003924:	0154      	lsls	r4, r2, #5
 8003926:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800392a:	014b      	lsls	r3, r1, #5
 800392c:	4619      	mov	r1, r3
 800392e:	4622      	mov	r2, r4
 8003930:	1b49      	subs	r1, r1, r5
 8003932:	eb62 0206 	sbc.w	r2, r2, r6
 8003936:	f04f 0300 	mov.w	r3, #0
 800393a:	f04f 0400 	mov.w	r4, #0
 800393e:	0194      	lsls	r4, r2, #6
 8003940:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003944:	018b      	lsls	r3, r1, #6
 8003946:	1a5b      	subs	r3, r3, r1
 8003948:	eb64 0402 	sbc.w	r4, r4, r2
 800394c:	f04f 0100 	mov.w	r1, #0
 8003950:	f04f 0200 	mov.w	r2, #0
 8003954:	00e2      	lsls	r2, r4, #3
 8003956:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800395a:	00d9      	lsls	r1, r3, #3
 800395c:	460b      	mov	r3, r1
 800395e:	4614      	mov	r4, r2
 8003960:	195b      	adds	r3, r3, r5
 8003962:	eb44 0406 	adc.w	r4, r4, r6
 8003966:	f04f 0100 	mov.w	r1, #0
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	0262      	lsls	r2, r4, #9
 8003970:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003974:	0259      	lsls	r1, r3, #9
 8003976:	460b      	mov	r3, r1
 8003978:	4614      	mov	r4, r2
 800397a:	4618      	mov	r0, r3
 800397c:	4621      	mov	r1, r4
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f04f 0400 	mov.w	r4, #0
 8003984:	461a      	mov	r2, r3
 8003986:	4623      	mov	r3, r4
 8003988:	f7fd f968 	bl	8000c5c <__aeabi_uldivmod>
 800398c:	4603      	mov	r3, r0
 800398e:	460c      	mov	r4, r1
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e049      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003994:	4b2f      	ldr	r3, [pc, #188]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	f04f 0400 	mov.w	r4, #0
 800399e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	ea03 0501 	and.w	r5, r3, r1
 80039aa:	ea04 0602 	and.w	r6, r4, r2
 80039ae:	4629      	mov	r1, r5
 80039b0:	4632      	mov	r2, r6
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	f04f 0400 	mov.w	r4, #0
 80039ba:	0154      	lsls	r4, r2, #5
 80039bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039c0:	014b      	lsls	r3, r1, #5
 80039c2:	4619      	mov	r1, r3
 80039c4:	4622      	mov	r2, r4
 80039c6:	1b49      	subs	r1, r1, r5
 80039c8:	eb62 0206 	sbc.w	r2, r2, r6
 80039cc:	f04f 0300 	mov.w	r3, #0
 80039d0:	f04f 0400 	mov.w	r4, #0
 80039d4:	0194      	lsls	r4, r2, #6
 80039d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039da:	018b      	lsls	r3, r1, #6
 80039dc:	1a5b      	subs	r3, r3, r1
 80039de:	eb64 0402 	sbc.w	r4, r4, r2
 80039e2:	f04f 0100 	mov.w	r1, #0
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	00e2      	lsls	r2, r4, #3
 80039ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039f0:	00d9      	lsls	r1, r3, #3
 80039f2:	460b      	mov	r3, r1
 80039f4:	4614      	mov	r4, r2
 80039f6:	195b      	adds	r3, r3, r5
 80039f8:	eb44 0406 	adc.w	r4, r4, r6
 80039fc:	f04f 0100 	mov.w	r1, #0
 8003a00:	f04f 0200 	mov.w	r2, #0
 8003a04:	02a2      	lsls	r2, r4, #10
 8003a06:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a0a:	0299      	lsls	r1, r3, #10
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4614      	mov	r4, r2
 8003a10:	4618      	mov	r0, r3
 8003a12:	4621      	mov	r1, r4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f04f 0400 	mov.w	r4, #0
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4623      	mov	r3, r4
 8003a1e:	f7fd f91d 	bl	8000c5c <__aeabi_uldivmod>
 8003a22:	4603      	mov	r3, r0
 8003a24:	460c      	mov	r4, r1
 8003a26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a28:	4b0a      	ldr	r3, [pc, #40]	; (8003a54 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	0c1b      	lsrs	r3, r3, #16
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	3301      	adds	r3, #1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	60bb      	str	r3, [r7, #8]
      break;
 8003a42:	e002      	b.n	8003a4a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a46:	60bb      	str	r3, [r7, #8]
      break;
 8003a48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a4a:	68bb      	ldr	r3, [r7, #8]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a54:	40023800 	.word	0x40023800
 8003a58:	00f42400 	.word	0x00f42400
 8003a5c:	007a1200 	.word	0x007a1200

08003a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a64:	4b03      	ldr	r3, [pc, #12]	; (8003a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a66:	681b      	ldr	r3, [r3, #0]
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000008 	.word	0x20000008

08003a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a7c:	f7ff fff0 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003a80:	4601      	mov	r1, r0
 8003a82:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	0a9b      	lsrs	r3, r3, #10
 8003a88:	f003 0307 	and.w	r3, r3, #7
 8003a8c:	4a03      	ldr	r2, [pc, #12]	; (8003a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a8e:	5cd3      	ldrb	r3, [r2, r3]
 8003a90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40023800 	.word	0x40023800
 8003a9c:	0800a1ac 	.word	0x0800a1ac

08003aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003aa4:	f7ff ffdc 	bl	8003a60 <HAL_RCC_GetHCLKFreq>
 8003aa8:	4601      	mov	r1, r0
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	0b5b      	lsrs	r3, r3, #13
 8003ab0:	f003 0307 	and.w	r3, r3, #7
 8003ab4:	4a03      	ldr	r2, [pc, #12]	; (8003ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ab6:	5cd3      	ldrb	r3, [r2, r3]
 8003ab8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	0800a1ac 	.word	0x0800a1ac

08003ac8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e056      	b.n	8003b88 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d106      	bne.n	8003afa <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f004 fb4f 	bl	8008198 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2202      	movs	r2, #2
 8003afe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b10:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	431a      	orrs	r2, r3
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	695b      	ldr	r3, [r3, #20]
 8003b2c:	431a      	orrs	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b36:	431a      	orrs	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69db      	ldr	r3, [r3, #28]
 8003b3c:	431a      	orrs	r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	ea42 0103 	orr.w	r1, r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	699b      	ldr	r3, [r3, #24]
 8003b56:	0c1b      	lsrs	r3, r3, #16
 8003b58:	f003 0104 	and.w	r1, r3, #4
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	69da      	ldr	r2, [r3, #28]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b76:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b86:	2300      	movs	r3, #0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b088      	sub	sp, #32
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_SPI_Transmit+0x22>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e11e      	b.n	8003df0 <HAL_SPI_Transmit+0x260>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003bba:	f7fd fa35 	bl	8001028 <HAL_GetTick>
 8003bbe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003bc0:	88fb      	ldrh	r3, [r7, #6]
 8003bc2:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d002      	beq.n	8003bd6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003bd4:	e103      	b.n	8003dde <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d002      	beq.n	8003be2 <HAL_SPI_Transmit+0x52>
 8003bdc:	88fb      	ldrh	r3, [r7, #6]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d102      	bne.n	8003be8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003be6:	e0fa      	b.n	8003dde <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2203      	movs	r2, #3
 8003bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	68ba      	ldr	r2, [r7, #8]
 8003bfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	88fa      	ldrh	r2, [r7, #6]
 8003c00:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	88fa      	ldrh	r2, [r7, #6]
 8003c06:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c2e:	d107      	bne.n	8003c40 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	681a      	ldr	r2, [r3, #0]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4a:	2b40      	cmp	r3, #64	; 0x40
 8003c4c:	d007      	beq.n	8003c5e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c66:	d14b      	bne.n	8003d00 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <HAL_SPI_Transmit+0xe6>
 8003c70:	8afb      	ldrh	r3, [r7, #22]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d13e      	bne.n	8003cf4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	881a      	ldrh	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c86:	1c9a      	adds	r2, r3, #2
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	3b01      	subs	r3, #1
 8003c94:	b29a      	uxth	r2, r3
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c9a:	e02b      	b.n	8003cf4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d112      	bne.n	8003cd0 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cce:	e011      	b.n	8003cf4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cd0:	f7fd f9aa 	bl	8001028 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d803      	bhi.n	8003ce8 <HAL_SPI_Transmit+0x158>
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ce6:	d102      	bne.n	8003cee <HAL_SPI_Transmit+0x15e>
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cf2:	e074      	b.n	8003dde <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1ce      	bne.n	8003c9c <HAL_SPI_Transmit+0x10c>
 8003cfe:	e04c      	b.n	8003d9a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_SPI_Transmit+0x17e>
 8003d08:	8afb      	ldrh	r3, [r7, #22]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d140      	bne.n	8003d90 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	330c      	adds	r3, #12
 8003d18:	7812      	ldrb	r2, [r2, #0]
 8003d1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	1c5a      	adds	r2, r3, #1
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d2a:	b29b      	uxth	r3, r3
 8003d2c:	3b01      	subs	r3, #1
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003d34:	e02c      	b.n	8003d90 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d113      	bne.n	8003d6c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	7812      	ldrb	r2, [r2, #0]
 8003d50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	3b01      	subs	r3, #1
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d6a:	e011      	b.n	8003d90 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d6c:	f7fd f95c 	bl	8001028 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	683a      	ldr	r2, [r7, #0]
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d803      	bhi.n	8003d84 <HAL_SPI_Transmit+0x1f4>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d82:	d102      	bne.n	8003d8a <HAL_SPI_Transmit+0x1fa>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d102      	bne.n	8003d90 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d8e:	e026      	b.n	8003dde <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1cd      	bne.n	8003d36 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	6839      	ldr	r1, [r7, #0]
 8003d9e:	68f8      	ldr	r0, [r7, #12]
 8003da0:	f000 fcc4 	bl	800472c <SPI_EndRxTxTransaction>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db8:	2300      	movs	r3, #0
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	613b      	str	r3, [r7, #16]
 8003dcc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	77fb      	strb	r3, [r7, #31]
 8003dda:	e000      	b.n	8003dde <HAL_SPI_Transmit+0x24e>
  }

error:
 8003ddc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2201      	movs	r2, #1
 8003de2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dee:	7ffb      	ldrb	r3, [r7, #31]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3720      	adds	r7, #32
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	603b      	str	r3, [r7, #0]
 8003e04:	4613      	mov	r3, r2
 8003e06:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e14:	d112      	bne.n	8003e3c <HAL_SPI_Receive+0x44>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10e      	bne.n	8003e3c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2204      	movs	r2, #4
 8003e22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003e26:	88fa      	ldrh	r2, [r7, #6]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	9300      	str	r3, [sp, #0]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f8e9 	bl	800400a <HAL_SPI_TransmitReceive>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	e0e2      	b.n	8004002 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d101      	bne.n	8003e4a <HAL_SPI_Receive+0x52>
 8003e46:	2302      	movs	r3, #2
 8003e48:	e0db      	b.n	8004002 <HAL_SPI_Receive+0x20a>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e52:	f7fd f8e9 	bl	8001028 <HAL_GetTick>
 8003e56:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d002      	beq.n	8003e6a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
 8003e66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e68:	e0c2      	b.n	8003ff0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <HAL_SPI_Receive+0x7e>
 8003e70:	88fb      	ldrh	r3, [r7, #6]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d102      	bne.n	8003e7c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e7a:	e0b9      	b.n	8003ff0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2204      	movs	r2, #4
 8003e80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	88fa      	ldrh	r2, [r7, #6]
 8003e94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	88fa      	ldrh	r2, [r7, #6]
 8003e9a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec2:	d107      	bne.n	8003ed4 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ed2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d007      	beq.n	8003ef2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d162      	bne.n	8003fc0 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003efa:	e02e      	b.n	8003f5a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 0301 	and.w	r3, r3, #1
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d115      	bne.n	8003f36 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f103 020c 	add.w	r2, r3, #12
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	7812      	ldrb	r2, [r2, #0]
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f34:	e011      	b.n	8003f5a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f36:	f7fd f877 	bl	8001028 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	683a      	ldr	r2, [r7, #0]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d803      	bhi.n	8003f4e <HAL_SPI_Receive+0x156>
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f4c:	d102      	bne.n	8003f54 <HAL_SPI_Receive+0x15c>
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d102      	bne.n	8003f5a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f58:	e04a      	b.n	8003ff0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1cb      	bne.n	8003efc <HAL_SPI_Receive+0x104>
 8003f64:	e031      	b.n	8003fca <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d113      	bne.n	8003f9c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68da      	ldr	r2, [r3, #12]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	b292      	uxth	r2, r2
 8003f80:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	1c9a      	adds	r2, r3, #2
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f9a:	e011      	b.n	8003fc0 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f9c:	f7fd f844 	bl	8001028 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	683a      	ldr	r2, [r7, #0]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d803      	bhi.n	8003fb4 <HAL_SPI_Receive+0x1bc>
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fb2:	d102      	bne.n	8003fba <HAL_SPI_Receive+0x1c2>
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003fba:	2303      	movs	r3, #3
 8003fbc:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003fbe:	e017      	b.n	8003ff0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1cd      	bne.n	8003f66 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fca:	693a      	ldr	r2, [r7, #16]
 8003fcc:	6839      	ldr	r1, [r7, #0]
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fb46 	bl	8004660 <SPI_EndRxTransaction>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	75fb      	strb	r3, [r7, #23]
 8003fec:	e000      	b.n	8003ff0 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003fee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004000:	7dfb      	ldrb	r3, [r7, #23]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b08c      	sub	sp, #48	; 0x30
 800400e:	af00      	add	r7, sp, #0
 8004010:	60f8      	str	r0, [r7, #12]
 8004012:	60b9      	str	r1, [r7, #8]
 8004014:	607a      	str	r2, [r7, #4]
 8004016:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004018:	2301      	movs	r3, #1
 800401a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_SPI_TransmitReceive+0x26>
 800402c:	2302      	movs	r3, #2
 800402e:	e18a      	b.n	8004346 <HAL_SPI_TransmitReceive+0x33c>
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004038:	f7fc fff6 	bl	8001028 <HAL_GetTick>
 800403c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004044:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800404e:	887b      	ldrh	r3, [r7, #2]
 8004050:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004052:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004056:	2b01      	cmp	r3, #1
 8004058:	d00f      	beq.n	800407a <HAL_SPI_TransmitReceive+0x70>
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004060:	d107      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <HAL_SPI_TransmitReceive+0x68>
 800406a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800406e:	2b04      	cmp	r3, #4
 8004070:	d003      	beq.n	800407a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004072:	2302      	movs	r3, #2
 8004074:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004078:	e15b      	b.n	8004332 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_SPI_TransmitReceive+0x82>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d002      	beq.n	800408c <HAL_SPI_TransmitReceive+0x82>
 8004086:	887b      	ldrh	r3, [r7, #2]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d103      	bne.n	8004094 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004092:	e14e      	b.n	8004332 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800409a:	b2db      	uxtb	r3, r3
 800409c:	2b04      	cmp	r3, #4
 800409e:	d003      	beq.n	80040a8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2205      	movs	r2, #5
 80040a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	887a      	ldrh	r2, [r7, #2]
 80040b8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	887a      	ldrh	r2, [r7, #2]
 80040be:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	887a      	ldrh	r2, [r7, #2]
 80040ca:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	887a      	ldrh	r2, [r7, #2]
 80040d0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2200      	movs	r2, #0
 80040dc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e8:	2b40      	cmp	r3, #64	; 0x40
 80040ea:	d007      	beq.n	80040fc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040fa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004104:	d178      	bne.n	80041f8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d002      	beq.n	8004114 <HAL_SPI_TransmitReceive+0x10a>
 800410e:	8b7b      	ldrh	r3, [r7, #26]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d166      	bne.n	80041e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004138:	e053      	b.n	80041e2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d11b      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x176>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800414c:	b29b      	uxth	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d016      	beq.n	8004180 <HAL_SPI_TransmitReceive+0x176>
 8004152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004154:	2b01      	cmp	r3, #1
 8004156:	d113      	bne.n	8004180 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800415c:	881a      	ldrh	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004168:	1c9a      	adds	r2, r3, #2
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004172:	b29b      	uxth	r3, r3
 8004174:	3b01      	subs	r3, #1
 8004176:	b29a      	uxth	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800417c:	2300      	movs	r3, #0
 800417e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b01      	cmp	r3, #1
 800418c:	d119      	bne.n	80041c2 <HAL_SPI_TransmitReceive+0x1b8>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004192:	b29b      	uxth	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d014      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a2:	b292      	uxth	r2, r2
 80041a4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	1c9a      	adds	r2, r3, #2
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041be:	2301      	movs	r3, #1
 80041c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041c2:	f7fc ff31 	bl	8001028 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d807      	bhi.n	80041e2 <HAL_SPI_TransmitReceive+0x1d8>
 80041d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d8:	d003      	beq.n	80041e2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041e0:	e0a7      	b.n	8004332 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1a6      	bne.n	800413a <HAL_SPI_TransmitReceive+0x130>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1a1      	bne.n	800413a <HAL_SPI_TransmitReceive+0x130>
 80041f6:	e07c      	b.n	80042f2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_TransmitReceive+0x1fc>
 8004200:	8b7b      	ldrh	r3, [r7, #26]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d16b      	bne.n	80042de <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	330c      	adds	r3, #12
 8004210:	7812      	ldrb	r2, [r2, #0]
 8004212:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004222:	b29b      	uxth	r3, r3
 8004224:	3b01      	subs	r3, #1
 8004226:	b29a      	uxth	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800422c:	e057      	b.n	80042de <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 0302 	and.w	r3, r3, #2
 8004238:	2b02      	cmp	r3, #2
 800423a:	d11c      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x26c>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d017      	beq.n	8004276 <HAL_SPI_TransmitReceive+0x26c>
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004248:	2b01      	cmp	r3, #1
 800424a:	d114      	bne.n	8004276 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	330c      	adds	r3, #12
 8004256:	7812      	ldrb	r2, [r2, #0]
 8004258:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004268:	b29b      	uxth	r3, r3
 800426a:	3b01      	subs	r3, #1
 800426c:	b29a      	uxth	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b01      	cmp	r3, #1
 8004282:	d119      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x2ae>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004288:	b29b      	uxth	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d014      	beq.n	80042b8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042b4:	2301      	movs	r3, #1
 80042b6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042b8:	f7fc feb6 	bl	8001028 <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d803      	bhi.n	80042d0 <HAL_SPI_TransmitReceive+0x2c6>
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042ce:	d102      	bne.n	80042d6 <HAL_SPI_TransmitReceive+0x2cc>
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d103      	bne.n	80042de <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042dc:	e029      	b.n	8004332 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1a2      	bne.n	800422e <HAL_SPI_TransmitReceive+0x224>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d19d      	bne.n	800422e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fa18 	bl	800472c <SPI_EndRxTxTransaction>
 80042fc:	4603      	mov	r3, r0
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d006      	beq.n	8004310 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2220      	movs	r2, #32
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800430e:	e010      	b.n	8004332 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10b      	bne.n	8004330 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	e000      	b.n	8004332 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004330:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2201      	movs	r2, #1
 8004336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004346:	4618      	mov	r0, r3
 8004348:	3730      	adds	r7, #48	; 0x30
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
	...

08004350 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b088      	sub	sp, #32
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	099b      	lsrs	r3, r3, #6
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800437a:	2b00      	cmp	r3, #0
 800437c:	d00a      	beq.n	8004394 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	4798      	blx	r3
    return;
 8004392:	e0d8      	b.n	8004546 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	085b      	lsrs	r3, r3, #1
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00a      	beq.n	80043b6 <HAL_SPI_IRQHandler+0x66>
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	09db      	lsrs	r3, r3, #7
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d004      	beq.n	80043b6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	4798      	blx	r3
    return;
 80043b4:	e0c7      	b.n	8004546 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	095b      	lsrs	r3, r3, #5
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10c      	bne.n	80043dc <HAL_SPI_IRQHandler+0x8c>
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	099b      	lsrs	r3, r3, #6
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	0a1b      	lsrs	r3, r3, #8
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f000 80b5 	beq.w	8004546 <HAL_SPI_IRQHandler+0x1f6>
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 80ae 	beq.w	8004546 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	099b      	lsrs	r3, r3, #6
 80043ee:	f003 0301 	and.w	r3, r3, #1
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d023      	beq.n	800443e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d011      	beq.n	8004426 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	f043 0204 	orr.w	r2, r3, #4
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800440e:	2300      	movs	r3, #0
 8004410:	617b      	str	r3, [r7, #20]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	617b      	str	r3, [r7, #20]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	e00b      	b.n	800443e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004426:	2300      	movs	r3, #0
 8004428:	613b      	str	r3, [r7, #16]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	613b      	str	r3, [r7, #16]
 800443a:	693b      	ldr	r3, [r7, #16]
        return;
 800443c:	e083      	b.n	8004546 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	f003 0301 	and.w	r3, r3, #1
 8004446:	2b00      	cmp	r3, #0
 8004448:	d014      	beq.n	8004474 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444e:	f043 0201 	orr.w	r2, r3, #1
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004470:	601a      	str	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	0a1b      	lsrs	r3, r3, #8
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b00      	cmp	r3, #0
 800447e:	d00c      	beq.n	800449a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004484:	f043 0208 	orr.w	r2, r3, #8
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800448c:	2300      	movs	r3, #0
 800448e:	60bb      	str	r3, [r7, #8]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d050      	beq.n	8004544 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685a      	ldr	r2, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80044b0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_SPI_IRQHandler+0x17e>
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d034      	beq.n	8004538 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0203 	bic.w	r2, r2, #3
 80044dc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d011      	beq.n	800450a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ea:	4a18      	ldr	r2, [pc, #96]	; (800454c <HAL_SPI_IRQHandler+0x1fc>)
 80044ec:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f2:	4618      	mov	r0, r3
 80044f4:	f7fd fcf5 	bl	8001ee2 <HAL_DMA_Abort_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d005      	beq.n	800450a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800450e:	2b00      	cmp	r3, #0
 8004510:	d016      	beq.n	8004540 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004516:	4a0d      	ldr	r2, [pc, #52]	; (800454c <HAL_SPI_IRQHandler+0x1fc>)
 8004518:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fcdf 	bl	8001ee2 <HAL_DMA_Abort_IT>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004536:	e003      	b.n	8004540 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	f000 f809 	bl	8004550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800453e:	e000      	b.n	8004542 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004540:	bf00      	nop
    return;
 8004542:	bf00      	nop
 8004544:	bf00      	nop
  }
}
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	08004565 	.word	0x08004565

08004550 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004558:	bf00      	nop
 800455a:	370c      	adds	r7, #12
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b084      	sub	sp, #16
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff ffe6 	bl	8004550 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800459c:	e04c      	b.n	8004638 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045a4:	d048      	beq.n	8004638 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80045a6:	f7fc fd3f 	bl	8001028 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d902      	bls.n	80045bc <SPI_WaitFlagStateUntilTimeout+0x30>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d13d      	bne.n	8004638 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685a      	ldr	r2, [r3, #4]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80045ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045d4:	d111      	bne.n	80045fa <SPI_WaitFlagStateUntilTimeout+0x6e>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045de:	d004      	beq.n	80045ea <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045e8:	d107      	bne.n	80045fa <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004602:	d10f      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004622:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e00f      	b.n	8004658 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4013      	ands	r3, r2
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	429a      	cmp	r2, r3
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	461a      	mov	r2, r3
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	429a      	cmp	r2, r3
 8004654:	d1a3      	bne.n	800459e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004656:	2300      	movs	r3, #0
}
 8004658:	4618      	mov	r0, r3
 800465a:	3710      	adds	r7, #16
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b086      	sub	sp, #24
 8004664:	af02      	add	r7, sp, #8
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004674:	d111      	bne.n	800469a <SPI_EndRxTransaction+0x3a>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800467e:	d004      	beq.n	800468a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004688:	d107      	bne.n	800469a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681a      	ldr	r2, [r3, #0]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004698:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046a2:	d12a      	bne.n	80046fa <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ac:	d012      	beq.n	80046d4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	2200      	movs	r2, #0
 80046b6:	2180      	movs	r1, #128	; 0x80
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f7ff ff67 	bl	800458c <SPI_WaitFlagStateUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d02d      	beq.n	8004720 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c8:	f043 0220 	orr.w	r2, r3, #32
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e026      	b.n	8004722 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	2200      	movs	r2, #0
 80046dc:	2101      	movs	r1, #1
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff ff54 	bl	800458c <SPI_WaitFlagStateUntilTimeout>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01a      	beq.n	8004720 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ee:	f043 0220 	orr.w	r2, r3, #32
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e013      	b.n	8004722 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	2200      	movs	r2, #0
 8004702:	2101      	movs	r1, #1
 8004704:	68f8      	ldr	r0, [r7, #12]
 8004706:	f7ff ff41 	bl	800458c <SPI_WaitFlagStateUntilTimeout>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800471c:	2303      	movs	r3, #3
 800471e:	e000      	b.n	8004722 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3710      	adds	r7, #16
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b088      	sub	sp, #32
 8004730:	af02      	add	r7, sp, #8
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004738:	4b1b      	ldr	r3, [pc, #108]	; (80047a8 <SPI_EndRxTxTransaction+0x7c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a1b      	ldr	r2, [pc, #108]	; (80047ac <SPI_EndRxTxTransaction+0x80>)
 800473e:	fba2 2303 	umull	r2, r3, r2, r3
 8004742:	0d5b      	lsrs	r3, r3, #21
 8004744:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004748:	fb02 f303 	mul.w	r3, r2, r3
 800474c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004756:	d112      	bne.n	800477e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	9300      	str	r3, [sp, #0]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2200      	movs	r2, #0
 8004760:	2180      	movs	r1, #128	; 0x80
 8004762:	68f8      	ldr	r0, [r7, #12]
 8004764:	f7ff ff12 	bl	800458c <SPI_WaitFlagStateUntilTimeout>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d016      	beq.n	800479c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	f043 0220 	orr.w	r2, r3, #32
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e00f      	b.n	800479e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d00a      	beq.n	800479a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	3b01      	subs	r3, #1
 8004788:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d0f2      	beq.n	800477e <SPI_EndRxTxTransaction+0x52>
 8004798:	e000      	b.n	800479c <SPI_EndRxTxTransaction+0x70>
        break;
 800479a:	bf00      	nop
  }

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000008 	.word	0x20000008
 80047ac:	165e9f81 	.word	0x165e9f81

080047b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d101      	bne.n	80047c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e01d      	b.n	80047fe <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d106      	bne.n	80047dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f003 fd2e 	bl	8008238 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2202      	movs	r2, #2
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	3304      	adds	r3, #4
 80047ec:	4619      	mov	r1, r3
 80047ee:	4610      	mov	r0, r2
 80047f0:	f000 fd2e 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
	...

08004808 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
 8004810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2201      	movs	r2, #1
 8004818:	6839      	ldr	r1, [r7, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f001 f92c 	bl	8005a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a15      	ldr	r2, [pc, #84]	; (800487c <HAL_TIM_OC_Start+0x74>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d004      	beq.n	8004834 <HAL_TIM_OC_Start+0x2c>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a14      	ldr	r2, [pc, #80]	; (8004880 <HAL_TIM_OC_Start+0x78>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d101      	bne.n	8004838 <HAL_TIM_OC_Start+0x30>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <HAL_TIM_OC_Start+0x32>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d007      	beq.n	800484e <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2b06      	cmp	r3, #6
 800485e:	d007      	beq.n	8004870 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3710      	adds	r7, #16
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	40010000 	.word	0x40010000
 8004880:	40010400 	.word	0x40010400

08004884 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b082      	sub	sp, #8
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e01d      	b.n	80048d2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489c:	b2db      	uxtb	r3, r3
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d106      	bne.n	80048b0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f815 	bl	80048da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	3304      	adds	r3, #4
 80048c0:	4619      	mov	r1, r3
 80048c2:	4610      	mov	r0, r2
 80048c4:	f000 fcc4 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2201      	movs	r2, #1
 8004900:	6839      	ldr	r1, [r7, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f001 f8b8 	bl	8005a78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a15      	ldr	r2, [pc, #84]	; (8004964 <HAL_TIM_PWM_Start+0x74>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d004      	beq.n	800491c <HAL_TIM_PWM_Start+0x2c>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a14      	ldr	r2, [pc, #80]	; (8004968 <HAL_TIM_PWM_Start+0x78>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d101      	bne.n	8004920 <HAL_TIM_PWM_Start+0x30>
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <HAL_TIM_PWM_Start+0x32>
 8004920:	2300      	movs	r3, #0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d007      	beq.n	8004936 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b06      	cmp	r3, #6
 8004946:	d007      	beq.n	8004958 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	40010000 	.word	0x40010000
 8004968:	40010400 	.word	0x40010400

0800496c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e01d      	b.n	80049ba <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004984:	b2db      	uxtb	r3, r3
 8004986:	2b00      	cmp	r3, #0
 8004988:	d106      	bne.n	8004998 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 f815 	bl	80049c2 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2202      	movs	r2, #2
 800499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	3304      	adds	r3, #4
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f000 fc50 	bl	8005250 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b083      	sub	sp, #12
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80049ca:	bf00      	nop
 80049cc:	370c      	adds	r7, #12
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049d6:	b580      	push	{r7, lr}
 80049d8:	b086      	sub	sp, #24
 80049da:	af00      	add	r7, sp, #0
 80049dc:	6078      	str	r0, [r7, #4]
 80049de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d101      	bne.n	80049ea <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e083      	b.n	8004af2 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d106      	bne.n	8004a04 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f003 fcbe 	bl	8008380 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a1a:	f023 0307 	bic.w	r3, r3, #7
 8004a1e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	3304      	adds	r3, #4
 8004a28:	4619      	mov	r1, r3
 8004a2a:	4610      	mov	r0, r2
 8004a2c:	f000 fc10 	bl	8005250 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	699b      	ldr	r3, [r3, #24]
 8004a3e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6a1b      	ldr	r3, [r3, #32]
 8004a46:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	697a      	ldr	r2, [r7, #20]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a58:	f023 0303 	bic.w	r3, r3, #3
 8004a5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	689a      	ldr	r2, [r3, #8]
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	021b      	lsls	r3, r3, #8
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	693a      	ldr	r2, [r7, #16]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a76:	f023 030c 	bic.w	r3, r3, #12
 8004a7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	68da      	ldr	r2, [r3, #12]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	021b      	lsls	r3, r3, #8
 8004a92:	4313      	orrs	r3, r2
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	691b      	ldr	r3, [r3, #16]
 8004a9e:	011a      	lsls	r2, r3, #4
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	031b      	lsls	r3, r3, #12
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004ab4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004abc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	011b      	lsls	r3, r3, #4
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	4313      	orrs	r3, r2
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	697a      	ldr	r2, [r7, #20]
 8004ad6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	693a      	ldr	r2, [r7, #16]
 8004ade:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af0:	2300      	movs	r3, #0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3718      	adds	r7, #24
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b082      	sub	sp, #8
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d002      	beq.n	8004b10 <HAL_TIM_Encoder_Start_IT+0x16>
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	d010      	beq.n	8004b30 <HAL_TIM_Encoder_Start_IT+0x36>
 8004b0e:	e01f      	b.n	8004b50 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2201      	movs	r2, #1
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 ffad 	bl	8005a78 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68da      	ldr	r2, [r3, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0202 	orr.w	r2, r2, #2
 8004b2c:	60da      	str	r2, [r3, #12]
      break;
 8004b2e:	e02e      	b.n	8004b8e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	2104      	movs	r1, #4
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 ff9d 	bl	8005a78 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68da      	ldr	r2, [r3, #12]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0204 	orr.w	r2, r2, #4
 8004b4c:	60da      	str	r2, [r3, #12]
      break;
 8004b4e:	e01e      	b.n	8004b8e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2201      	movs	r2, #1
 8004b56:	2100      	movs	r1, #0
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 ff8d 	bl	8005a78 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2201      	movs	r2, #1
 8004b64:	2104      	movs	r1, #4
 8004b66:	4618      	mov	r0, r3
 8004b68:	f000 ff86 	bl	8005a78 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68da      	ldr	r2, [r3, #12]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0202 	orr.w	r2, r2, #2
 8004b7a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68da      	ldr	r2, [r3, #12]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0204 	orr.w	r2, r2, #4
 8004b8a:	60da      	str	r2, [r3, #12]
      break;
 8004b8c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f042 0201 	orr.w	r2, r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3708      	adds	r7, #8
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d122      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d11b      	bne.n	8004c04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f06f 0202 	mvn.w	r2, #2
 8004bd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	f003 0303 	and.w	r3, r3, #3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d003      	beq.n	8004bf2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fb11 	bl	8005212 <HAL_TIM_IC_CaptureCallback>
 8004bf0:	e005      	b.n	8004bfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fb03 	bl	80051fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf8:	6878      	ldr	r0, [r7, #4]
 8004bfa:	f000 fb14 	bl	8005226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f003 0304 	and.w	r3, r3, #4
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d122      	bne.n	8004c58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d11b      	bne.n	8004c58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f06f 0204 	mvn.w	r2, #4
 8004c28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	699b      	ldr	r3, [r3, #24]
 8004c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d003      	beq.n	8004c46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 fae7 	bl	8005212 <HAL_TIM_IC_CaptureCallback>
 8004c44:	e005      	b.n	8004c52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 fad9 	bl	80051fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 faea 	bl	8005226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b08      	cmp	r3, #8
 8004c64:	d122      	bne.n	8004cac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0308 	and.w	r3, r3, #8
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d11b      	bne.n	8004cac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0208 	mvn.w	r2, #8
 8004c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2204      	movs	r2, #4
 8004c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f000 fabd 	bl	8005212 <HAL_TIM_IC_CaptureCallback>
 8004c98:	e005      	b.n	8004ca6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 faaf 	bl	80051fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 fac0 	bl	8005226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0310 	and.w	r3, r3, #16
 8004cb6:	2b10      	cmp	r3, #16
 8004cb8:	d122      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b10      	cmp	r3, #16
 8004cc6:	d11b      	bne.n	8004d00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0210 	mvn.w	r2, #16
 8004cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2208      	movs	r2, #8
 8004cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 fa93 	bl	8005212 <HAL_TIM_IC_CaptureCallback>
 8004cec:	e005      	b.n	8004cfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cee:	6878      	ldr	r0, [r7, #4]
 8004cf0:	f000 fa85 	bl	80051fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 fa96 	bl	8005226 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f003 0301 	and.w	r3, r3, #1
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d10e      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	f003 0301 	and.w	r3, r3, #1
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d107      	bne.n	8004d2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f06f 0201 	mvn.w	r2, #1
 8004d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa5f 	bl	80051ea <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d10e      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d44:	2b80      	cmp	r3, #128	; 0x80
 8004d46:	d107      	bne.n	8004d58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 ffb8 	bl	8005cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	691b      	ldr	r3, [r3, #16]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d10e      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d70:	2b40      	cmp	r3, #64	; 0x40
 8004d72:	d107      	bne.n	8004d84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fa5b 	bl	800523a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d10e      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d107      	bne.n	8004db0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f06f 0220 	mvn.w	r2, #32
 8004da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 ff82 	bl	8005cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004db0:	bf00      	nop
 8004db2:	3708      	adds	r7, #8
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e08a      	b.n	8004ee8 <HAL_TIM_IC_ConfigChannel+0x130>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11b      	bne.n	8004e20 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6818      	ldr	r0, [r3, #0]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6819      	ldr	r1, [r3, #0]
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	f000 fc7a 	bl	80056f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	699a      	ldr	r2, [r3, #24]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f022 020c 	bic.w	r2, r2, #12
 8004e0a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6999      	ldr	r1, [r3, #24]
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	689a      	ldr	r2, [r3, #8]
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	619a      	str	r2, [r3, #24]
 8004e1e:	e05a      	b.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d11c      	bne.n	8004e60 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6818      	ldr	r0, [r3, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	6819      	ldr	r1, [r3, #0]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	685a      	ldr	r2, [r3, #4]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f000 fcfe 	bl	8005836 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	699a      	ldr	r2, [r3, #24]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e48:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6999      	ldr	r1, [r3, #24]
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	021a      	lsls	r2, r3, #8
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	619a      	str	r2, [r3, #24]
 8004e5e:	e03a      	b.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b08      	cmp	r3, #8
 8004e64:	d11b      	bne.n	8004e9e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	6819      	ldr	r1, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f000 fd4b 	bl	8005910 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69da      	ldr	r2, [r3, #28]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f022 020c 	bic.w	r2, r2, #12
 8004e88:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	69d9      	ldr	r1, [r3, #28]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	61da      	str	r2, [r3, #28]
 8004e9c:	e01b      	b.n	8004ed6 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	685a      	ldr	r2, [r3, #4]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	68db      	ldr	r3, [r3, #12]
 8004eae:	f000 fd6b 	bl	8005988 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	69da      	ldr	r2, [r3, #28]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004ec0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	69d9      	ldr	r1, [r3, #28]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	021a      	lsls	r2, r3, #8
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3710      	adds	r7, #16
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f02:	2b01      	cmp	r3, #1
 8004f04:	d101      	bne.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004f06:	2302      	movs	r3, #2
 8004f08:	e0b4      	b.n	8005074 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b0c      	cmp	r3, #12
 8004f1e:	f200 809f 	bhi.w	8005060 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004f22:	a201      	add	r2, pc, #4	; (adr r2, 8004f28 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f28:	08004f5d 	.word	0x08004f5d
 8004f2c:	08005061 	.word	0x08005061
 8004f30:	08005061 	.word	0x08005061
 8004f34:	08005061 	.word	0x08005061
 8004f38:	08004f9d 	.word	0x08004f9d
 8004f3c:	08005061 	.word	0x08005061
 8004f40:	08005061 	.word	0x08005061
 8004f44:	08005061 	.word	0x08005061
 8004f48:	08004fdf 	.word	0x08004fdf
 8004f4c:	08005061 	.word	0x08005061
 8004f50:	08005061 	.word	0x08005061
 8004f54:	08005061 	.word	0x08005061
 8004f58:	0800501f 	.word	0x0800501f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68b9      	ldr	r1, [r7, #8]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f000 fa14 	bl	8005390 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	699a      	ldr	r2, [r3, #24]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 0208 	orr.w	r2, r2, #8
 8004f76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f022 0204 	bic.w	r2, r2, #4
 8004f86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6999      	ldr	r1, [r3, #24]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	430a      	orrs	r2, r1
 8004f98:	619a      	str	r2, [r3, #24]
      break;
 8004f9a:	e062      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68b9      	ldr	r1, [r7, #8]
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f000 fa64 	bl	8005470 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	699a      	ldr	r2, [r3, #24]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	699a      	ldr	r2, [r3, #24]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	6999      	ldr	r1, [r3, #24]
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	021a      	lsls	r2, r3, #8
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	619a      	str	r2, [r3, #24]
      break;
 8004fdc:	e041      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	68b9      	ldr	r1, [r7, #8]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f000 fab9 	bl	800555c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0208 	orr.w	r2, r2, #8
 8004ff8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0204 	bic.w	r2, r2, #4
 8005008:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69d9      	ldr	r1, [r3, #28]
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	691a      	ldr	r2, [r3, #16]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	430a      	orrs	r2, r1
 800501a:	61da      	str	r2, [r3, #28]
      break;
 800501c:	e021      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68b9      	ldr	r1, [r7, #8]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fb0d 	bl	8005644 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69da      	ldr	r2, [r3, #28]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005038:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	69da      	ldr	r2, [r3, #28]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005048:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	69d9      	ldr	r1, [r3, #28]
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	021a      	lsls	r2, r3, #8
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	61da      	str	r2, [r3, #28]
      break;
 800505e:	e000      	b.n	8005062 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005060:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2201      	movs	r2, #1
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2200      	movs	r2, #0
 800506e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b084      	sub	sp, #16
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800508c:	2b01      	cmp	r3, #1
 800508e:	d101      	bne.n	8005094 <HAL_TIM_ConfigClockSource+0x18>
 8005090:	2302      	movs	r3, #2
 8005092:	e0a6      	b.n	80051e2 <HAL_TIM_ConfigClockSource+0x166>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050ba:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2b40      	cmp	r3, #64	; 0x40
 80050ca:	d067      	beq.n	800519c <HAL_TIM_ConfigClockSource+0x120>
 80050cc:	2b40      	cmp	r3, #64	; 0x40
 80050ce:	d80b      	bhi.n	80050e8 <HAL_TIM_ConfigClockSource+0x6c>
 80050d0:	2b10      	cmp	r3, #16
 80050d2:	d073      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x140>
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d802      	bhi.n	80050de <HAL_TIM_ConfigClockSource+0x62>
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d06f      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80050dc:	e078      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050de:	2b20      	cmp	r3, #32
 80050e0:	d06c      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x140>
 80050e2:	2b30      	cmp	r3, #48	; 0x30
 80050e4:	d06a      	beq.n	80051bc <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050e6:	e073      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d00d      	beq.n	8005108 <HAL_TIM_ConfigClockSource+0x8c>
 80050ec:	2b70      	cmp	r3, #112	; 0x70
 80050ee:	d804      	bhi.n	80050fa <HAL_TIM_ConfigClockSource+0x7e>
 80050f0:	2b50      	cmp	r3, #80	; 0x50
 80050f2:	d033      	beq.n	800515c <HAL_TIM_ConfigClockSource+0xe0>
 80050f4:	2b60      	cmp	r3, #96	; 0x60
 80050f6:	d041      	beq.n	800517c <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050f8:	e06a      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fe:	d066      	beq.n	80051ce <HAL_TIM_ConfigClockSource+0x152>
 8005100:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005104:	d017      	beq.n	8005136 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005106:	e063      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	6899      	ldr	r1, [r3, #8]
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f000 fc8e 	bl	8005a38 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800512a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	609a      	str	r2, [r3, #8]
      break;
 8005134:	e04c      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6899      	ldr	r1, [r3, #8]
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	68db      	ldr	r3, [r3, #12]
 8005146:	f000 fc77 	bl	8005a38 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005158:	609a      	str	r2, [r3, #8]
      break;
 800515a:	e039      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6818      	ldr	r0, [r3, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	6859      	ldr	r1, [r3, #4]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	461a      	mov	r2, r3
 800516a:	f000 fb35 	bl	80057d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	2150      	movs	r1, #80	; 0x50
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fc44 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 800517a:	e029      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6818      	ldr	r0, [r3, #0]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	6859      	ldr	r1, [r3, #4]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	461a      	mov	r2, r3
 800518a:	f000 fb91 	bl	80058b0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	2160      	movs	r1, #96	; 0x60
 8005194:	4618      	mov	r0, r3
 8005196:	f000 fc34 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 800519a:	e019      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6818      	ldr	r0, [r3, #0]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	6859      	ldr	r1, [r3, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	461a      	mov	r2, r3
 80051aa:	f000 fb15 	bl	80057d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2140      	movs	r1, #64	; 0x40
 80051b4:	4618      	mov	r0, r3
 80051b6:	f000 fc24 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 80051ba:	e009      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4619      	mov	r1, r3
 80051c6:	4610      	mov	r0, r2
 80051c8:	f000 fc1b 	bl	8005a02 <TIM_ITRx_SetConfig>
      break;
 80051cc:	e000      	b.n	80051d0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80051ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2200      	movs	r2, #0
 80051dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051e0:	2300      	movs	r3, #0
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}

080051ea <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b083      	sub	sp, #12
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051fe:	b480      	push	{r7}
 8005200:	b083      	sub	sp, #12
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005206:	bf00      	nop
 8005208:	370c      	adds	r7, #12
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr

08005212 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005212:	b480      	push	{r7}
 8005214:	b083      	sub	sp, #12
 8005216:	af00      	add	r7, sp, #0
 8005218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800521a:	bf00      	nop
 800521c:	370c      	adds	r7, #12
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr

08005226 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr

0800523a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800523a:	b480      	push	{r7}
 800523c:	b083      	sub	sp, #12
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005242:	bf00      	nop
 8005244:	370c      	adds	r7, #12
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr
	...

08005250 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a40      	ldr	r2, [pc, #256]	; (8005364 <TIM_Base_SetConfig+0x114>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d013      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526e:	d00f      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a3d      	ldr	r2, [pc, #244]	; (8005368 <TIM_Base_SetConfig+0x118>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d00b      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a3c      	ldr	r2, [pc, #240]	; (800536c <TIM_Base_SetConfig+0x11c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d007      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	4a3b      	ldr	r2, [pc, #236]	; (8005370 <TIM_Base_SetConfig+0x120>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d003      	beq.n	8005290 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3a      	ldr	r2, [pc, #232]	; (8005374 <TIM_Base_SetConfig+0x124>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d108      	bne.n	80052a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	68fa      	ldr	r2, [r7, #12]
 800529e:	4313      	orrs	r3, r2
 80052a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a2f      	ldr	r2, [pc, #188]	; (8005364 <TIM_Base_SetConfig+0x114>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d02b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052b0:	d027      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	4a2c      	ldr	r2, [pc, #176]	; (8005368 <TIM_Base_SetConfig+0x118>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d023      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2b      	ldr	r2, [pc, #172]	; (800536c <TIM_Base_SetConfig+0x11c>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	4a2a      	ldr	r2, [pc, #168]	; (8005370 <TIM_Base_SetConfig+0x120>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d01b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a29      	ldr	r2, [pc, #164]	; (8005374 <TIM_Base_SetConfig+0x124>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d017      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a28      	ldr	r2, [pc, #160]	; (8005378 <TIM_Base_SetConfig+0x128>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a27      	ldr	r2, [pc, #156]	; (800537c <TIM_Base_SetConfig+0x12c>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00f      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a26      	ldr	r2, [pc, #152]	; (8005380 <TIM_Base_SetConfig+0x130>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00b      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a25      	ldr	r2, [pc, #148]	; (8005384 <TIM_Base_SetConfig+0x134>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d007      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a24      	ldr	r2, [pc, #144]	; (8005388 <TIM_Base_SetConfig+0x138>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_Base_SetConfig+0xb2>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a23      	ldr	r2, [pc, #140]	; (800538c <TIM_Base_SetConfig+0x13c>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d108      	bne.n	8005314 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a0a      	ldr	r2, [pc, #40]	; (8005364 <TIM_Base_SetConfig+0x114>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0xf8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a0c      	ldr	r2, [pc, #48]	; (8005374 <TIM_Base_SetConfig+0x124>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d103      	bne.n	8005350 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	691a      	ldr	r2, [r3, #16]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	615a      	str	r2, [r3, #20]
}
 8005356:	bf00      	nop
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop
 8005364:	40010000 	.word	0x40010000
 8005368:	40000400 	.word	0x40000400
 800536c:	40000800 	.word	0x40000800
 8005370:	40000c00 	.word	0x40000c00
 8005374:	40010400 	.word	0x40010400
 8005378:	40014000 	.word	0x40014000
 800537c:	40014400 	.word	0x40014400
 8005380:	40014800 	.word	0x40014800
 8005384:	40001800 	.word	0x40001800
 8005388:	40001c00 	.word	0x40001c00
 800538c:	40002000 	.word	0x40002000

08005390 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005390:	b480      	push	{r7}
 8005392:	b087      	sub	sp, #28
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a1b      	ldr	r3, [r3, #32]
 800539e:	f023 0201 	bic.w	r2, r3, #1
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	699b      	ldr	r3, [r3, #24]
 80053b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f023 0303 	bic.w	r3, r3, #3
 80053c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 0302 	bic.w	r3, r3, #2
 80053d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	697a      	ldr	r2, [r7, #20]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a20      	ldr	r2, [pc, #128]	; (8005468 <TIM_OC1_SetConfig+0xd8>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC1_SetConfig+0x64>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a1f      	ldr	r2, [pc, #124]	; (800546c <TIM_OC1_SetConfig+0xdc>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d10c      	bne.n	800540e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f023 0308 	bic.w	r3, r3, #8
 80053fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	4313      	orrs	r3, r2
 8005404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f023 0304 	bic.w	r3, r3, #4
 800540c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	4a15      	ldr	r2, [pc, #84]	; (8005468 <TIM_OC1_SetConfig+0xd8>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d003      	beq.n	800541e <TIM_OC1_SetConfig+0x8e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	4a14      	ldr	r2, [pc, #80]	; (800546c <TIM_OC1_SetConfig+0xdc>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d111      	bne.n	8005442 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005424:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800542c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	4313      	orrs	r3, r2
 8005436:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685a      	ldr	r2, [r3, #4]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	621a      	str	r2, [r3, #32]
}
 800545c:	bf00      	nop
 800545e:	371c      	adds	r7, #28
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr
 8005468:	40010000 	.word	0x40010000
 800546c:	40010400 	.word	0x40010400

08005470 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005470:	b480      	push	{r7}
 8005472:	b087      	sub	sp, #28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	f023 0210 	bic.w	r2, r3, #16
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800549e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0320 	bic.w	r3, r3, #32
 80054ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a22      	ldr	r2, [pc, #136]	; (8005554 <TIM_OC2_SetConfig+0xe4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_OC2_SetConfig+0x68>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a21      	ldr	r2, [pc, #132]	; (8005558 <TIM_OC2_SetConfig+0xe8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d10d      	bne.n	80054f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	011b      	lsls	r3, r3, #4
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	4313      	orrs	r3, r2
 80054ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a17      	ldr	r2, [pc, #92]	; (8005554 <TIM_OC2_SetConfig+0xe4>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d003      	beq.n	8005504 <TIM_OC2_SetConfig+0x94>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a16      	ldr	r2, [pc, #88]	; (8005558 <TIM_OC2_SetConfig+0xe8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d113      	bne.n	800552c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800550a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	695b      	ldr	r3, [r3, #20]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685a      	ldr	r2, [r3, #4]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	621a      	str	r2, [r3, #32]
}
 8005546:	bf00      	nop
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	40010000 	.word	0x40010000
 8005558:	40010400 	.word	0x40010400

0800555c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800555c:	b480      	push	{r7}
 800555e:	b087      	sub	sp, #28
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	69db      	ldr	r3, [r3, #28]
 8005582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0303 	bic.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68fa      	ldr	r2, [r7, #12]
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a21      	ldr	r2, [pc, #132]	; (800563c <TIM_OC3_SetConfig+0xe0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d003      	beq.n	80055c2 <TIM_OC3_SetConfig+0x66>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a20      	ldr	r2, [pc, #128]	; (8005640 <TIM_OC3_SetConfig+0xe4>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d10d      	bne.n	80055de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	021b      	lsls	r3, r3, #8
 80055d0:	697a      	ldr	r2, [r7, #20]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a16      	ldr	r2, [pc, #88]	; (800563c <TIM_OC3_SetConfig+0xe0>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_OC3_SetConfig+0x92>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a15      	ldr	r2, [pc, #84]	; (8005640 <TIM_OC3_SetConfig+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d113      	bne.n	8005616 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	011b      	lsls	r3, r3, #4
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	4313      	orrs	r3, r2
 8005608:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	693a      	ldr	r2, [r7, #16]
 8005612:	4313      	orrs	r3, r2
 8005614:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	685a      	ldr	r2, [r3, #4]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	621a      	str	r2, [r3, #32]
}
 8005630:	bf00      	nop
 8005632:	371c      	adds	r7, #28
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr
 800563c:	40010000 	.word	0x40010000
 8005640:	40010400 	.word	0x40010400

08005644 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6a1b      	ldr	r3, [r3, #32]
 8005652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a1b      	ldr	r3, [r3, #32]
 800565e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005672:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800567a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	021b      	lsls	r3, r3, #8
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800568e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	031b      	lsls	r3, r3, #12
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a12      	ldr	r2, [pc, #72]	; (80056e8 <TIM_OC4_SetConfig+0xa4>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d003      	beq.n	80056ac <TIM_OC4_SetConfig+0x68>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a11      	ldr	r2, [pc, #68]	; (80056ec <TIM_OC4_SetConfig+0xa8>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d109      	bne.n	80056c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	695b      	ldr	r3, [r3, #20]
 80056b8:	019b      	lsls	r3, r3, #6
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4313      	orrs	r3, r2
 80056be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	693a      	ldr	r2, [r7, #16]
 80056d8:	621a      	str	r2, [r3, #32]
}
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40010000 	.word	0x40010000
 80056ec:	40010400 	.word	0x40010400

080056f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	f023 0201 	bic.w	r2, r3, #1
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4a28      	ldr	r2, [pc, #160]	; (80057bc <TIM_TI1_SetConfig+0xcc>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d01b      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005724:	d017      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	4a25      	ldr	r2, [pc, #148]	; (80057c0 <TIM_TI1_SetConfig+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d013      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4a24      	ldr	r2, [pc, #144]	; (80057c4 <TIM_TI1_SetConfig+0xd4>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d00f      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4a23      	ldr	r2, [pc, #140]	; (80057c8 <TIM_TI1_SetConfig+0xd8>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d00b      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	4a22      	ldr	r2, [pc, #136]	; (80057cc <TIM_TI1_SetConfig+0xdc>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d007      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	4a21      	ldr	r2, [pc, #132]	; (80057d0 <TIM_TI1_SetConfig+0xe0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d003      	beq.n	8005756 <TIM_TI1_SetConfig+0x66>
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4a20      	ldr	r2, [pc, #128]	; (80057d4 <TIM_TI1_SetConfig+0xe4>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d101      	bne.n	800575a <TIM_TI1_SetConfig+0x6a>
 8005756:	2301      	movs	r3, #1
 8005758:	e000      	b.n	800575c <TIM_TI1_SetConfig+0x6c>
 800575a:	2300      	movs	r3, #0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d008      	beq.n	8005772 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0303 	bic.w	r3, r3, #3
 8005766:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	4313      	orrs	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e003      	b.n	800577a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f043 0301 	orr.w	r3, r3, #1
 8005778:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	b2db      	uxtb	r3, r3
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	4313      	orrs	r3, r2
 800578c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f023 030a 	bic.w	r3, r3, #10
 8005794:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	f003 030a 	and.w	r3, r3, #10
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	693a      	ldr	r2, [r7, #16]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	40010000 	.word	0x40010000
 80057c0:	40000400 	.word	0x40000400
 80057c4:	40000800 	.word	0x40000800
 80057c8:	40000c00 	.word	0x40000c00
 80057cc:	40010400 	.word	0x40010400
 80057d0:	40014000 	.word	0x40014000
 80057d4:	40001800 	.word	0x40001800

080057d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6a1b      	ldr	r3, [r3, #32]
 80057e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6a1b      	ldr	r3, [r3, #32]
 80057ee:	f023 0201 	bic.w	r2, r3, #1
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005802:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	693a      	ldr	r2, [r7, #16]
 800580a:	4313      	orrs	r3, r2
 800580c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f023 030a 	bic.w	r3, r3, #10
 8005814:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr

08005836 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005836:	b480      	push	{r7}
 8005838:	b087      	sub	sp, #28
 800583a:	af00      	add	r7, sp, #0
 800583c:	60f8      	str	r0, [r7, #12]
 800583e:	60b9      	str	r1, [r7, #8]
 8005840:	607a      	str	r2, [r7, #4]
 8005842:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	f023 0210 	bic.w	r2, r3, #16
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	699b      	ldr	r3, [r3, #24]
 8005854:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005862:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	4313      	orrs	r3, r2
 800586c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	031b      	lsls	r3, r3, #12
 800587a:	b29b      	uxth	r3, r3
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	011b      	lsls	r3, r3, #4
 800588e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	4313      	orrs	r3, r2
 8005896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	621a      	str	r2, [r3, #32]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b087      	sub	sp, #28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f023 0210 	bic.w	r2, r3, #16
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a1b      	ldr	r3, [r3, #32]
 80058d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	031b      	lsls	r3, r3, #12
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058ec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	621a      	str	r2, [r3, #32]
}
 8005904:	bf00      	nop
 8005906:	371c      	adds	r7, #28
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005910:	b480      	push	{r7}
 8005912:	b087      	sub	sp, #28
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
 800591c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6a1b      	ldr	r3, [r3, #32]
 8005934:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	f023 0303 	bic.w	r3, r3, #3
 800593c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4313      	orrs	r3, r2
 8005944:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800594c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	011b      	lsls	r3, r3, #4
 8005952:	b2db      	uxtb	r3, r3
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	4313      	orrs	r3, r2
 8005958:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005960:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	021b      	lsls	r3, r3, #8
 8005966:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800596a:	693a      	ldr	r2, [r7, #16]
 800596c:	4313      	orrs	r3, r2
 800596e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	697a      	ldr	r2, [r7, #20]
 8005974:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	693a      	ldr	r2, [r7, #16]
 800597a:	621a      	str	r2, [r3, #32]
}
 800597c:	bf00      	nop
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
 8005994:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	021b      	lsls	r3, r3, #8
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	4313      	orrs	r3, r2
 80059be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80059c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	031b      	lsls	r3, r3, #12
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80059da:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	031b      	lsls	r3, r3, #12
 80059e0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	697a      	ldr	r2, [r7, #20]
 80059ee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	693a      	ldr	r2, [r7, #16]
 80059f4:	621a      	str	r2, [r3, #32]
}
 80059f6:	bf00      	nop
 80059f8:	371c      	adds	r7, #28
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b085      	sub	sp, #20
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
 8005a0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a1a:	683a      	ldr	r2, [r7, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f043 0307 	orr.w	r3, r3, #7
 8005a24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	609a      	str	r2, [r3, #8]
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	607a      	str	r2, [r7, #4]
 8005a44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	021a      	lsls	r2, r3, #8
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	609a      	str	r2, [r3, #8]
}
 8005a6c:	bf00      	nop
 8005a6e:	371c      	adds	r7, #28
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f003 031f 	and.w	r3, r3, #31
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	43db      	mvns	r3, r3
 8005a9a:	401a      	ands	r2, r3
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	6a1a      	ldr	r2, [r3, #32]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	f003 031f 	and.w	r3, r3, #31
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	fa01 f303 	lsl.w	r3, r1, r3
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
 8005aca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	2204      	movs	r2, #4
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f000 f901 	bl	8005cdc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ae8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	f003 0307 	and.w	r3, r3, #7
 8005af4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b06      	cmp	r3, #6
 8005afa:	d007      	beq.n	8005b0c <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0201 	orr.w	r2, r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
	...

08005b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b085      	sub	sp, #20
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d101      	bne.n	8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	e05a      	b.n	8005be6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2201      	movs	r2, #1
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2202      	movs	r2, #2
 8005b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d022      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b7c:	d01d      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a1d      	ldr	r2, [pc, #116]	; (8005bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d018      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a1b      	ldr	r2, [pc, #108]	; (8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d013      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a1a      	ldr	r2, [pc, #104]	; (8005c00 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d00e      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a18      	ldr	r2, [pc, #96]	; (8005c04 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d009      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a17      	ldr	r2, [pc, #92]	; (8005c08 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d004      	beq.n	8005bba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d10c      	bne.n	8005bd4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bc0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68ba      	ldr	r2, [r7, #8]
 8005bd2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3714      	adds	r7, #20
 8005bea:	46bd      	mov	sp, r7
 8005bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf0:	4770      	bx	lr
 8005bf2:	bf00      	nop
 8005bf4:	40010000 	.word	0x40010000
 8005bf8:	40000400 	.word	0x40000400
 8005bfc:	40000800 	.word	0x40000800
 8005c00:	40000c00 	.word	0x40000c00
 8005c04:	40010400 	.word	0x40010400
 8005c08:	40014000 	.word	0x40014000
 8005c0c:	40001800 	.word	0x40001800

08005c10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b085      	sub	sp, #20
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d101      	bne.n	8005c2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	e03d      	b.n	8005ca8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3714      	adds	r7, #20
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cd0:	bf00      	nop
 8005cd2:	370c      	adds	r7, #12
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2204      	movs	r2, #4
 8005cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a1a      	ldr	r2, [r3, #32]
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	43db      	mvns	r3, r3
 8005cfe:	401a      	ands	r2, r3
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1a      	ldr	r2, [r3, #32]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	f003 031f 	and.w	r3, r3, #31
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	fa01 f303 	lsl.w	r3, r1, r3
 8005d14:	431a      	orrs	r2, r3
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e03f      	b.n	8005db8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d106      	bne.n	8005d52 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f002 fbdf 	bl	8008510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2224      	movs	r2, #36	; 0x24
 8005d56:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68da      	ldr	r2, [r3, #12]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d68:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fb02 	bl	8006374 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d7e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d8e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68da      	ldr	r2, [r3, #12]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d9e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2220      	movs	r2, #32
 8005db2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3708      	adds	r7, #8
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b085      	sub	sp, #20
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b20      	cmp	r3, #32
 8005dd8:	d130      	bne.n	8005e3c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <HAL_UART_Transmit_IT+0x26>
 8005de0:	88fb      	ldrh	r3, [r7, #6]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d101      	bne.n	8005dea <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e029      	b.n	8005e3e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d101      	bne.n	8005df8 <HAL_UART_Transmit_IT+0x38>
 8005df4:	2302      	movs	r3, #2
 8005df6:	e022      	b.n	8005e3e <HAL_UART_Transmit_IT+0x7e>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	88fa      	ldrh	r2, [r7, #6]
 8005e0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	88fa      	ldrh	r2, [r7, #6]
 8005e10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2221      	movs	r2, #33	; 0x21
 8005e1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e36:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e000      	b.n	8005e3e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e3c:	2302      	movs	r3, #2
  }
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3714      	adds	r7, #20
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b085      	sub	sp, #20
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	60f8      	str	r0, [r7, #12]
 8005e52:	60b9      	str	r1, [r7, #8]
 8005e54:	4613      	mov	r3, r2
 8005e56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d140      	bne.n	8005ee6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d002      	beq.n	8005e70 <HAL_UART_Receive_IT+0x26>
 8005e6a:	88fb      	ldrh	r3, [r7, #6]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e039      	b.n	8005ee8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d101      	bne.n	8005e82 <HAL_UART_Receive_IT+0x38>
 8005e7e:	2302      	movs	r3, #2
 8005e80:	e032      	b.n	8005ee8 <HAL_UART_Receive_IT+0x9e>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	88fa      	ldrh	r2, [r7, #6]
 8005e94:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	88fa      	ldrh	r2, [r7, #6]
 8005e9a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2222      	movs	r2, #34	; 0x22
 8005ea6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	2200      	movs	r2, #0
 8005eae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68da      	ldr	r2, [r3, #12]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ec0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695a      	ldr	r2, [r3, #20]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f042 0201 	orr.w	r2, r2, #1
 8005ed0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f042 0220 	orr.w	r2, r2, #32
 8005ee0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	e000      	b.n	8005ee8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005ee6:	2302      	movs	r3, #2
  }
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b088      	sub	sp, #32
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d10d      	bne.n	8005f46 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d008      	beq.n	8005f46 <HAL_UART_IRQHandler+0x52>
 8005f34:	69bb      	ldr	r3, [r7, #24]
 8005f36:	f003 0320 	and.w	r3, r3, #32
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 f996 	bl	8006270 <UART_Receive_IT>
      return;
 8005f44:	e0d1      	b.n	80060ea <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80b0 	beq.w	80060ae <HAL_UART_IRQHandler+0x1ba>
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	f003 0301 	and.w	r3, r3, #1
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d105      	bne.n	8005f64 <HAL_UART_IRQHandler+0x70>
 8005f58:	69bb      	ldr	r3, [r7, #24]
 8005f5a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f000 80a5 	beq.w	80060ae <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00a      	beq.n	8005f84 <HAL_UART_IRQHandler+0x90>
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7c:	f043 0201 	orr.w	r2, r3, #1
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	f003 0304 	and.w	r3, r3, #4
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d00a      	beq.n	8005fa4 <HAL_UART_IRQHandler+0xb0>
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f003 0301 	and.w	r3, r3, #1
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f9c:	f043 0202 	orr.w	r2, r3, #2
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	f003 0302 	and.w	r3, r3, #2
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d00a      	beq.n	8005fc4 <HAL_UART_IRQHandler+0xd0>
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	f003 0301 	and.w	r3, r3, #1
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d005      	beq.n	8005fc4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fbc:	f043 0204 	orr.w	r2, r3, #4
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	f003 0308 	and.w	r3, r3, #8
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00f      	beq.n	8005fee <HAL_UART_IRQHandler+0xfa>
 8005fce:	69bb      	ldr	r3, [r7, #24]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <HAL_UART_IRQHandler+0xee>
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	f003 0301 	and.w	r3, r3, #1
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d005      	beq.n	8005fee <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	f043 0208 	orr.w	r2, r3, #8
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d078      	beq.n	80060e8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <HAL_UART_IRQHandler+0x11c>
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f930 	bl	8006270 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	695b      	ldr	r3, [r3, #20]
 8006016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800601a:	2b40      	cmp	r3, #64	; 0x40
 800601c:	bf0c      	ite	eq
 800601e:	2301      	moveq	r3, #1
 8006020:	2300      	movne	r3, #0
 8006022:	b2db      	uxtb	r3, r3
 8006024:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <HAL_UART_IRQHandler+0x144>
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d031      	beq.n	800609c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f000 f879 	bl	8006130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006048:	2b40      	cmp	r3, #64	; 0x40
 800604a:	d123      	bne.n	8006094 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800605a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006060:	2b00      	cmp	r3, #0
 8006062:	d013      	beq.n	800608c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006068:	4a21      	ldr	r2, [pc, #132]	; (80060f0 <HAL_UART_IRQHandler+0x1fc>)
 800606a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006070:	4618      	mov	r0, r3
 8006072:	f7fb ff36 	bl	8001ee2 <HAL_DMA_Abort_IT>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d016      	beq.n	80060aa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006086:	4610      	mov	r0, r2
 8006088:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800608a:	e00e      	b.n	80060aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f000 f845 	bl	800611c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006092:	e00a      	b.n	80060aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006094:	6878      	ldr	r0, [r7, #4]
 8006096:	f000 f841 	bl	800611c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609a:	e006      	b.n	80060aa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f83d 	bl	800611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2200      	movs	r2, #0
 80060a6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80060a8:	e01e      	b.n	80060e8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060aa:	bf00      	nop
    return;
 80060ac:	e01c      	b.n	80060e8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <HAL_UART_IRQHandler+0x1d6>
 80060b8:	69bb      	ldr	r3, [r7, #24]
 80060ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f866 	bl	8006194 <UART_Transmit_IT>
    return;
 80060c8:	e00f      	b.n	80060ea <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d00a      	beq.n	80060ea <HAL_UART_IRQHandler+0x1f6>
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f8ae 	bl	8006240 <UART_EndTransmit_IT>
    return;
 80060e4:	bf00      	nop
 80060e6:	e000      	b.n	80060ea <HAL_UART_IRQHandler+0x1f6>
    return;
 80060e8:	bf00      	nop
  }
}
 80060ea:	3720      	adds	r7, #32
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}
 80060f0:	0800616d 	.word	0x0800616d

080060f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006110:	bf00      	nop
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800611c:	b480      	push	{r7}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006124:	bf00      	nop
 8006126:	370c      	adds	r7, #12
 8006128:	46bd      	mov	sp, r7
 800612a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612e:	4770      	bx	lr

08006130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68da      	ldr	r2, [r3, #12]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006146:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f022 0201 	bic.w	r2, r2, #1
 8006156:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2220      	movs	r2, #32
 800615c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b084      	sub	sp, #16
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006178:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2200      	movs	r2, #0
 800617e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	2200      	movs	r2, #0
 8006184:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006186:	68f8      	ldr	r0, [r7, #12]
 8006188:	f7ff ffc8 	bl	800611c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800618c:	bf00      	nop
 800618e:	3710      	adds	r7, #16
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}

08006194 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006194:	b480      	push	{r7}
 8006196:	b085      	sub	sp, #20
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b21      	cmp	r3, #33	; 0x21
 80061a6:	d144      	bne.n	8006232 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061b0:	d11a      	bne.n	80061e8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6a1b      	ldr	r3, [r3, #32]
 80061b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	881b      	ldrh	r3, [r3, #0]
 80061bc:	461a      	mov	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061c6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d105      	bne.n	80061dc <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6a1b      	ldr	r3, [r3, #32]
 80061d4:	1c9a      	adds	r2, r3, #2
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	621a      	str	r2, [r3, #32]
 80061da:	e00e      	b.n	80061fa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a1b      	ldr	r3, [r3, #32]
 80061e0:	1c5a      	adds	r2, r3, #1
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	621a      	str	r2, [r3, #32]
 80061e6:	e008      	b.n	80061fa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	1c59      	adds	r1, r3, #1
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	6211      	str	r1, [r2, #32]
 80061f2:	781a      	ldrb	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061fe:	b29b      	uxth	r3, r3
 8006200:	3b01      	subs	r3, #1
 8006202:	b29b      	uxth	r3, r3
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	4619      	mov	r1, r3
 8006208:	84d1      	strh	r1, [r2, #38]	; 0x26
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10f      	bne.n	800622e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800621c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68da      	ldr	r2, [r3, #12]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800622c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	e000      	b.n	8006234 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006232:	2302      	movs	r3, #2
  }
}
 8006234:	4618      	mov	r0, r3
 8006236:	3714      	adds	r7, #20
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b082      	sub	sp, #8
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	68da      	ldr	r2, [r3, #12]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006256:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff47 	bl	80060f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006266:	2300      	movs	r3, #0
}
 8006268:	4618      	mov	r0, r3
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b22      	cmp	r3, #34	; 0x22
 8006282:	d171      	bne.n	8006368 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628c:	d123      	bne.n	80062d6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006292:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10e      	bne.n	80062ba <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	1c9a      	adds	r2, r3, #2
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	629a      	str	r2, [r3, #40]	; 0x28
 80062b8:	e029      	b.n	800630e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685b      	ldr	r3, [r3, #4]
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	b29a      	uxth	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	629a      	str	r2, [r3, #40]	; 0x28
 80062d4:	e01b      	b.n	800630e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	691b      	ldr	r3, [r3, #16]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10a      	bne.n	80062f4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6858      	ldr	r0, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	6291      	str	r1, [r2, #40]	; 0x28
 80062ee:	b2c2      	uxtb	r2, r0
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	e00c      	b.n	800630e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	b2da      	uxtb	r2, r3
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006300:	1c58      	adds	r0, r3, #1
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	6288      	str	r0, [r1, #40]	; 0x28
 8006306:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006312:	b29b      	uxth	r3, r3
 8006314:	3b01      	subs	r3, #1
 8006316:	b29b      	uxth	r3, r3
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4619      	mov	r1, r3
 800631c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800631e:	2b00      	cmp	r3, #0
 8006320:	d120      	bne.n	8006364 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 0220 	bic.w	r2, r2, #32
 8006330:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006340:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	695a      	ldr	r2, [r3, #20]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f022 0201 	bic.w	r2, r2, #1
 8006350:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7ff fed4 	bl	8006108 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006360:	2300      	movs	r3, #0
 8006362:	e002      	b.n	800636a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	e000      	b.n	800636a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006368:	2302      	movs	r3, #2
  }
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006378:	b085      	sub	sp, #20
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68da      	ldr	r2, [r3, #12]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689a      	ldr	r2, [r3, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	431a      	orrs	r2, r3
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	69db      	ldr	r3, [r3, #28]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80063b6:	f023 030c 	bic.w	r3, r3, #12
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6812      	ldr	r2, [r2, #0]
 80063be:	68f9      	ldr	r1, [r7, #12]
 80063c0:	430b      	orrs	r3, r1
 80063c2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	695b      	ldr	r3, [r3, #20]
 80063ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699a      	ldr	r2, [r3, #24]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	430a      	orrs	r2, r1
 80063d8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	69db      	ldr	r3, [r3, #28]
 80063de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063e2:	f040 818b 	bne.w	80066fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4ac1      	ldr	r2, [pc, #772]	; (80066f0 <UART_SetConfig+0x37c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d005      	beq.n	80063fc <UART_SetConfig+0x88>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4abf      	ldr	r2, [pc, #764]	; (80066f4 <UART_SetConfig+0x380>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	f040 80bd 	bne.w	8006576 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063fc:	f7fd fb50 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 8006400:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	461d      	mov	r5, r3
 8006406:	f04f 0600 	mov.w	r6, #0
 800640a:	46a8      	mov	r8, r5
 800640c:	46b1      	mov	r9, r6
 800640e:	eb18 0308 	adds.w	r3, r8, r8
 8006412:	eb49 0409 	adc.w	r4, r9, r9
 8006416:	4698      	mov	r8, r3
 8006418:	46a1      	mov	r9, r4
 800641a:	eb18 0805 	adds.w	r8, r8, r5
 800641e:	eb49 0906 	adc.w	r9, r9, r6
 8006422:	f04f 0100 	mov.w	r1, #0
 8006426:	f04f 0200 	mov.w	r2, #0
 800642a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800642e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006432:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006436:	4688      	mov	r8, r1
 8006438:	4691      	mov	r9, r2
 800643a:	eb18 0005 	adds.w	r0, r8, r5
 800643e:	eb49 0106 	adc.w	r1, r9, r6
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	461d      	mov	r5, r3
 8006448:	f04f 0600 	mov.w	r6, #0
 800644c:	196b      	adds	r3, r5, r5
 800644e:	eb46 0406 	adc.w	r4, r6, r6
 8006452:	461a      	mov	r2, r3
 8006454:	4623      	mov	r3, r4
 8006456:	f7fa fc01 	bl	8000c5c <__aeabi_uldivmod>
 800645a:	4603      	mov	r3, r0
 800645c:	460c      	mov	r4, r1
 800645e:	461a      	mov	r2, r3
 8006460:	4ba5      	ldr	r3, [pc, #660]	; (80066f8 <UART_SetConfig+0x384>)
 8006462:	fba3 2302 	umull	r2, r3, r3, r2
 8006466:	095b      	lsrs	r3, r3, #5
 8006468:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	461d      	mov	r5, r3
 8006470:	f04f 0600 	mov.w	r6, #0
 8006474:	46a9      	mov	r9, r5
 8006476:	46b2      	mov	sl, r6
 8006478:	eb19 0309 	adds.w	r3, r9, r9
 800647c:	eb4a 040a 	adc.w	r4, sl, sl
 8006480:	4699      	mov	r9, r3
 8006482:	46a2      	mov	sl, r4
 8006484:	eb19 0905 	adds.w	r9, r9, r5
 8006488:	eb4a 0a06 	adc.w	sl, sl, r6
 800648c:	f04f 0100 	mov.w	r1, #0
 8006490:	f04f 0200 	mov.w	r2, #0
 8006494:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006498:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800649c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064a0:	4689      	mov	r9, r1
 80064a2:	4692      	mov	sl, r2
 80064a4:	eb19 0005 	adds.w	r0, r9, r5
 80064a8:	eb4a 0106 	adc.w	r1, sl, r6
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	461d      	mov	r5, r3
 80064b2:	f04f 0600 	mov.w	r6, #0
 80064b6:	196b      	adds	r3, r5, r5
 80064b8:	eb46 0406 	adc.w	r4, r6, r6
 80064bc:	461a      	mov	r2, r3
 80064be:	4623      	mov	r3, r4
 80064c0:	f7fa fbcc 	bl	8000c5c <__aeabi_uldivmod>
 80064c4:	4603      	mov	r3, r0
 80064c6:	460c      	mov	r4, r1
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b8b      	ldr	r3, [pc, #556]	; (80066f8 <UART_SetConfig+0x384>)
 80064cc:	fba3 1302 	umull	r1, r3, r3, r2
 80064d0:	095b      	lsrs	r3, r3, #5
 80064d2:	2164      	movs	r1, #100	; 0x64
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	3332      	adds	r3, #50	; 0x32
 80064de:	4a86      	ldr	r2, [pc, #536]	; (80066f8 <UART_SetConfig+0x384>)
 80064e0:	fba2 2303 	umull	r2, r3, r2, r3
 80064e4:	095b      	lsrs	r3, r3, #5
 80064e6:	005b      	lsls	r3, r3, #1
 80064e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064ec:	4498      	add	r8, r3
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	461d      	mov	r5, r3
 80064f2:	f04f 0600 	mov.w	r6, #0
 80064f6:	46a9      	mov	r9, r5
 80064f8:	46b2      	mov	sl, r6
 80064fa:	eb19 0309 	adds.w	r3, r9, r9
 80064fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006502:	4699      	mov	r9, r3
 8006504:	46a2      	mov	sl, r4
 8006506:	eb19 0905 	adds.w	r9, r9, r5
 800650a:	eb4a 0a06 	adc.w	sl, sl, r6
 800650e:	f04f 0100 	mov.w	r1, #0
 8006512:	f04f 0200 	mov.w	r2, #0
 8006516:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800651a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800651e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006522:	4689      	mov	r9, r1
 8006524:	4692      	mov	sl, r2
 8006526:	eb19 0005 	adds.w	r0, r9, r5
 800652a:	eb4a 0106 	adc.w	r1, sl, r6
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	461d      	mov	r5, r3
 8006534:	f04f 0600 	mov.w	r6, #0
 8006538:	196b      	adds	r3, r5, r5
 800653a:	eb46 0406 	adc.w	r4, r6, r6
 800653e:	461a      	mov	r2, r3
 8006540:	4623      	mov	r3, r4
 8006542:	f7fa fb8b 	bl	8000c5c <__aeabi_uldivmod>
 8006546:	4603      	mov	r3, r0
 8006548:	460c      	mov	r4, r1
 800654a:	461a      	mov	r2, r3
 800654c:	4b6a      	ldr	r3, [pc, #424]	; (80066f8 <UART_SetConfig+0x384>)
 800654e:	fba3 1302 	umull	r1, r3, r3, r2
 8006552:	095b      	lsrs	r3, r3, #5
 8006554:	2164      	movs	r1, #100	; 0x64
 8006556:	fb01 f303 	mul.w	r3, r1, r3
 800655a:	1ad3      	subs	r3, r2, r3
 800655c:	00db      	lsls	r3, r3, #3
 800655e:	3332      	adds	r3, #50	; 0x32
 8006560:	4a65      	ldr	r2, [pc, #404]	; (80066f8 <UART_SetConfig+0x384>)
 8006562:	fba2 2303 	umull	r2, r3, r2, r3
 8006566:	095b      	lsrs	r3, r3, #5
 8006568:	f003 0207 	and.w	r2, r3, #7
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4442      	add	r2, r8
 8006572:	609a      	str	r2, [r3, #8]
 8006574:	e26f      	b.n	8006a56 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006576:	f7fd fa7f 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 800657a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	461d      	mov	r5, r3
 8006580:	f04f 0600 	mov.w	r6, #0
 8006584:	46a8      	mov	r8, r5
 8006586:	46b1      	mov	r9, r6
 8006588:	eb18 0308 	adds.w	r3, r8, r8
 800658c:	eb49 0409 	adc.w	r4, r9, r9
 8006590:	4698      	mov	r8, r3
 8006592:	46a1      	mov	r9, r4
 8006594:	eb18 0805 	adds.w	r8, r8, r5
 8006598:	eb49 0906 	adc.w	r9, r9, r6
 800659c:	f04f 0100 	mov.w	r1, #0
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065b0:	4688      	mov	r8, r1
 80065b2:	4691      	mov	r9, r2
 80065b4:	eb18 0005 	adds.w	r0, r8, r5
 80065b8:	eb49 0106 	adc.w	r1, r9, r6
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	461d      	mov	r5, r3
 80065c2:	f04f 0600 	mov.w	r6, #0
 80065c6:	196b      	adds	r3, r5, r5
 80065c8:	eb46 0406 	adc.w	r4, r6, r6
 80065cc:	461a      	mov	r2, r3
 80065ce:	4623      	mov	r3, r4
 80065d0:	f7fa fb44 	bl	8000c5c <__aeabi_uldivmod>
 80065d4:	4603      	mov	r3, r0
 80065d6:	460c      	mov	r4, r1
 80065d8:	461a      	mov	r2, r3
 80065da:	4b47      	ldr	r3, [pc, #284]	; (80066f8 <UART_SetConfig+0x384>)
 80065dc:	fba3 2302 	umull	r2, r3, r3, r2
 80065e0:	095b      	lsrs	r3, r3, #5
 80065e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	461d      	mov	r5, r3
 80065ea:	f04f 0600 	mov.w	r6, #0
 80065ee:	46a9      	mov	r9, r5
 80065f0:	46b2      	mov	sl, r6
 80065f2:	eb19 0309 	adds.w	r3, r9, r9
 80065f6:	eb4a 040a 	adc.w	r4, sl, sl
 80065fa:	4699      	mov	r9, r3
 80065fc:	46a2      	mov	sl, r4
 80065fe:	eb19 0905 	adds.w	r9, r9, r5
 8006602:	eb4a 0a06 	adc.w	sl, sl, r6
 8006606:	f04f 0100 	mov.w	r1, #0
 800660a:	f04f 0200 	mov.w	r2, #0
 800660e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006612:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006616:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800661a:	4689      	mov	r9, r1
 800661c:	4692      	mov	sl, r2
 800661e:	eb19 0005 	adds.w	r0, r9, r5
 8006622:	eb4a 0106 	adc.w	r1, sl, r6
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	461d      	mov	r5, r3
 800662c:	f04f 0600 	mov.w	r6, #0
 8006630:	196b      	adds	r3, r5, r5
 8006632:	eb46 0406 	adc.w	r4, r6, r6
 8006636:	461a      	mov	r2, r3
 8006638:	4623      	mov	r3, r4
 800663a:	f7fa fb0f 	bl	8000c5c <__aeabi_uldivmod>
 800663e:	4603      	mov	r3, r0
 8006640:	460c      	mov	r4, r1
 8006642:	461a      	mov	r2, r3
 8006644:	4b2c      	ldr	r3, [pc, #176]	; (80066f8 <UART_SetConfig+0x384>)
 8006646:	fba3 1302 	umull	r1, r3, r3, r2
 800664a:	095b      	lsrs	r3, r3, #5
 800664c:	2164      	movs	r1, #100	; 0x64
 800664e:	fb01 f303 	mul.w	r3, r1, r3
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	3332      	adds	r3, #50	; 0x32
 8006658:	4a27      	ldr	r2, [pc, #156]	; (80066f8 <UART_SetConfig+0x384>)
 800665a:	fba2 2303 	umull	r2, r3, r2, r3
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	005b      	lsls	r3, r3, #1
 8006662:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006666:	4498      	add	r8, r3
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	461d      	mov	r5, r3
 800666c:	f04f 0600 	mov.w	r6, #0
 8006670:	46a9      	mov	r9, r5
 8006672:	46b2      	mov	sl, r6
 8006674:	eb19 0309 	adds.w	r3, r9, r9
 8006678:	eb4a 040a 	adc.w	r4, sl, sl
 800667c:	4699      	mov	r9, r3
 800667e:	46a2      	mov	sl, r4
 8006680:	eb19 0905 	adds.w	r9, r9, r5
 8006684:	eb4a 0a06 	adc.w	sl, sl, r6
 8006688:	f04f 0100 	mov.w	r1, #0
 800668c:	f04f 0200 	mov.w	r2, #0
 8006690:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006694:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006698:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800669c:	4689      	mov	r9, r1
 800669e:	4692      	mov	sl, r2
 80066a0:	eb19 0005 	adds.w	r0, r9, r5
 80066a4:	eb4a 0106 	adc.w	r1, sl, r6
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	685b      	ldr	r3, [r3, #4]
 80066ac:	461d      	mov	r5, r3
 80066ae:	f04f 0600 	mov.w	r6, #0
 80066b2:	196b      	adds	r3, r5, r5
 80066b4:	eb46 0406 	adc.w	r4, r6, r6
 80066b8:	461a      	mov	r2, r3
 80066ba:	4623      	mov	r3, r4
 80066bc:	f7fa face 	bl	8000c5c <__aeabi_uldivmod>
 80066c0:	4603      	mov	r3, r0
 80066c2:	460c      	mov	r4, r1
 80066c4:	461a      	mov	r2, r3
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <UART_SetConfig+0x384>)
 80066c8:	fba3 1302 	umull	r1, r3, r3, r2
 80066cc:	095b      	lsrs	r3, r3, #5
 80066ce:	2164      	movs	r1, #100	; 0x64
 80066d0:	fb01 f303 	mul.w	r3, r1, r3
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	3332      	adds	r3, #50	; 0x32
 80066da:	4a07      	ldr	r2, [pc, #28]	; (80066f8 <UART_SetConfig+0x384>)
 80066dc:	fba2 2303 	umull	r2, r3, r2, r3
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	f003 0207 	and.w	r2, r3, #7
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4442      	add	r2, r8
 80066ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066ee:	e1b2      	b.n	8006a56 <UART_SetConfig+0x6e2>
 80066f0:	40011000 	.word	0x40011000
 80066f4:	40011400 	.word	0x40011400
 80066f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4ad7      	ldr	r2, [pc, #860]	; (8006a60 <UART_SetConfig+0x6ec>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d005      	beq.n	8006712 <UART_SetConfig+0x39e>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4ad6      	ldr	r2, [pc, #856]	; (8006a64 <UART_SetConfig+0x6f0>)
 800670c:	4293      	cmp	r3, r2
 800670e:	f040 80d1 	bne.w	80068b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006712:	f7fd f9c5 	bl	8003aa0 <HAL_RCC_GetPCLK2Freq>
 8006716:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	469a      	mov	sl, r3
 800671c:	f04f 0b00 	mov.w	fp, #0
 8006720:	46d0      	mov	r8, sl
 8006722:	46d9      	mov	r9, fp
 8006724:	eb18 0308 	adds.w	r3, r8, r8
 8006728:	eb49 0409 	adc.w	r4, r9, r9
 800672c:	4698      	mov	r8, r3
 800672e:	46a1      	mov	r9, r4
 8006730:	eb18 080a 	adds.w	r8, r8, sl
 8006734:	eb49 090b 	adc.w	r9, r9, fp
 8006738:	f04f 0100 	mov.w	r1, #0
 800673c:	f04f 0200 	mov.w	r2, #0
 8006740:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006744:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006748:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800674c:	4688      	mov	r8, r1
 800674e:	4691      	mov	r9, r2
 8006750:	eb1a 0508 	adds.w	r5, sl, r8
 8006754:	eb4b 0609 	adc.w	r6, fp, r9
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	4619      	mov	r1, r3
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	f04f 0400 	mov.w	r4, #0
 800676a:	0094      	lsls	r4, r2, #2
 800676c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006770:	008b      	lsls	r3, r1, #2
 8006772:	461a      	mov	r2, r3
 8006774:	4623      	mov	r3, r4
 8006776:	4628      	mov	r0, r5
 8006778:	4631      	mov	r1, r6
 800677a:	f7fa fa6f 	bl	8000c5c <__aeabi_uldivmod>
 800677e:	4603      	mov	r3, r0
 8006780:	460c      	mov	r4, r1
 8006782:	461a      	mov	r2, r3
 8006784:	4bb8      	ldr	r3, [pc, #736]	; (8006a68 <UART_SetConfig+0x6f4>)
 8006786:	fba3 2302 	umull	r2, r3, r3, r2
 800678a:	095b      	lsrs	r3, r3, #5
 800678c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	469b      	mov	fp, r3
 8006794:	f04f 0c00 	mov.w	ip, #0
 8006798:	46d9      	mov	r9, fp
 800679a:	46e2      	mov	sl, ip
 800679c:	eb19 0309 	adds.w	r3, r9, r9
 80067a0:	eb4a 040a 	adc.w	r4, sl, sl
 80067a4:	4699      	mov	r9, r3
 80067a6:	46a2      	mov	sl, r4
 80067a8:	eb19 090b 	adds.w	r9, r9, fp
 80067ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067b0:	f04f 0100 	mov.w	r1, #0
 80067b4:	f04f 0200 	mov.w	r2, #0
 80067b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067c4:	4689      	mov	r9, r1
 80067c6:	4692      	mov	sl, r2
 80067c8:	eb1b 0509 	adds.w	r5, fp, r9
 80067cc:	eb4c 060a 	adc.w	r6, ip, sl
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	4619      	mov	r1, r3
 80067d6:	f04f 0200 	mov.w	r2, #0
 80067da:	f04f 0300 	mov.w	r3, #0
 80067de:	f04f 0400 	mov.w	r4, #0
 80067e2:	0094      	lsls	r4, r2, #2
 80067e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067e8:	008b      	lsls	r3, r1, #2
 80067ea:	461a      	mov	r2, r3
 80067ec:	4623      	mov	r3, r4
 80067ee:	4628      	mov	r0, r5
 80067f0:	4631      	mov	r1, r6
 80067f2:	f7fa fa33 	bl	8000c5c <__aeabi_uldivmod>
 80067f6:	4603      	mov	r3, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	461a      	mov	r2, r3
 80067fc:	4b9a      	ldr	r3, [pc, #616]	; (8006a68 <UART_SetConfig+0x6f4>)
 80067fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2164      	movs	r1, #100	; 0x64
 8006806:	fb01 f303 	mul.w	r3, r1, r3
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	3332      	adds	r3, #50	; 0x32
 8006810:	4a95      	ldr	r2, [pc, #596]	; (8006a68 <UART_SetConfig+0x6f4>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800681c:	4498      	add	r8, r3
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	469b      	mov	fp, r3
 8006822:	f04f 0c00 	mov.w	ip, #0
 8006826:	46d9      	mov	r9, fp
 8006828:	46e2      	mov	sl, ip
 800682a:	eb19 0309 	adds.w	r3, r9, r9
 800682e:	eb4a 040a 	adc.w	r4, sl, sl
 8006832:	4699      	mov	r9, r3
 8006834:	46a2      	mov	sl, r4
 8006836:	eb19 090b 	adds.w	r9, r9, fp
 800683a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800683e:	f04f 0100 	mov.w	r1, #0
 8006842:	f04f 0200 	mov.w	r2, #0
 8006846:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800684a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800684e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006852:	4689      	mov	r9, r1
 8006854:	4692      	mov	sl, r2
 8006856:	eb1b 0509 	adds.w	r5, fp, r9
 800685a:	eb4c 060a 	adc.w	r6, ip, sl
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	4619      	mov	r1, r3
 8006864:	f04f 0200 	mov.w	r2, #0
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	f04f 0400 	mov.w	r4, #0
 8006870:	0094      	lsls	r4, r2, #2
 8006872:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006876:	008b      	lsls	r3, r1, #2
 8006878:	461a      	mov	r2, r3
 800687a:	4623      	mov	r3, r4
 800687c:	4628      	mov	r0, r5
 800687e:	4631      	mov	r1, r6
 8006880:	f7fa f9ec 	bl	8000c5c <__aeabi_uldivmod>
 8006884:	4603      	mov	r3, r0
 8006886:	460c      	mov	r4, r1
 8006888:	461a      	mov	r2, r3
 800688a:	4b77      	ldr	r3, [pc, #476]	; (8006a68 <UART_SetConfig+0x6f4>)
 800688c:	fba3 1302 	umull	r1, r3, r3, r2
 8006890:	095b      	lsrs	r3, r3, #5
 8006892:	2164      	movs	r1, #100	; 0x64
 8006894:	fb01 f303 	mul.w	r3, r1, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	3332      	adds	r3, #50	; 0x32
 800689e:	4a72      	ldr	r2, [pc, #456]	; (8006a68 <UART_SetConfig+0x6f4>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	095b      	lsrs	r3, r3, #5
 80068a6:	f003 020f 	and.w	r2, r3, #15
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4442      	add	r2, r8
 80068b0:	609a      	str	r2, [r3, #8]
 80068b2:	e0d0      	b.n	8006a56 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80068b4:	f7fd f8e0 	bl	8003a78 <HAL_RCC_GetPCLK1Freq>
 80068b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	469a      	mov	sl, r3
 80068be:	f04f 0b00 	mov.w	fp, #0
 80068c2:	46d0      	mov	r8, sl
 80068c4:	46d9      	mov	r9, fp
 80068c6:	eb18 0308 	adds.w	r3, r8, r8
 80068ca:	eb49 0409 	adc.w	r4, r9, r9
 80068ce:	4698      	mov	r8, r3
 80068d0:	46a1      	mov	r9, r4
 80068d2:	eb18 080a 	adds.w	r8, r8, sl
 80068d6:	eb49 090b 	adc.w	r9, r9, fp
 80068da:	f04f 0100 	mov.w	r1, #0
 80068de:	f04f 0200 	mov.w	r2, #0
 80068e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068ee:	4688      	mov	r8, r1
 80068f0:	4691      	mov	r9, r2
 80068f2:	eb1a 0508 	adds.w	r5, sl, r8
 80068f6:	eb4b 0609 	adc.w	r6, fp, r9
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	4619      	mov	r1, r3
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	f04f 0400 	mov.w	r4, #0
 800690c:	0094      	lsls	r4, r2, #2
 800690e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006912:	008b      	lsls	r3, r1, #2
 8006914:	461a      	mov	r2, r3
 8006916:	4623      	mov	r3, r4
 8006918:	4628      	mov	r0, r5
 800691a:	4631      	mov	r1, r6
 800691c:	f7fa f99e 	bl	8000c5c <__aeabi_uldivmod>
 8006920:	4603      	mov	r3, r0
 8006922:	460c      	mov	r4, r1
 8006924:	461a      	mov	r2, r3
 8006926:	4b50      	ldr	r3, [pc, #320]	; (8006a68 <UART_SetConfig+0x6f4>)
 8006928:	fba3 2302 	umull	r2, r3, r3, r2
 800692c:	095b      	lsrs	r3, r3, #5
 800692e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	469b      	mov	fp, r3
 8006936:	f04f 0c00 	mov.w	ip, #0
 800693a:	46d9      	mov	r9, fp
 800693c:	46e2      	mov	sl, ip
 800693e:	eb19 0309 	adds.w	r3, r9, r9
 8006942:	eb4a 040a 	adc.w	r4, sl, sl
 8006946:	4699      	mov	r9, r3
 8006948:	46a2      	mov	sl, r4
 800694a:	eb19 090b 	adds.w	r9, r9, fp
 800694e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006952:	f04f 0100 	mov.w	r1, #0
 8006956:	f04f 0200 	mov.w	r2, #0
 800695a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800695e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006962:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006966:	4689      	mov	r9, r1
 8006968:	4692      	mov	sl, r2
 800696a:	eb1b 0509 	adds.w	r5, fp, r9
 800696e:	eb4c 060a 	adc.w	r6, ip, sl
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	4619      	mov	r1, r3
 8006978:	f04f 0200 	mov.w	r2, #0
 800697c:	f04f 0300 	mov.w	r3, #0
 8006980:	f04f 0400 	mov.w	r4, #0
 8006984:	0094      	lsls	r4, r2, #2
 8006986:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800698a:	008b      	lsls	r3, r1, #2
 800698c:	461a      	mov	r2, r3
 800698e:	4623      	mov	r3, r4
 8006990:	4628      	mov	r0, r5
 8006992:	4631      	mov	r1, r6
 8006994:	f7fa f962 	bl	8000c5c <__aeabi_uldivmod>
 8006998:	4603      	mov	r3, r0
 800699a:	460c      	mov	r4, r1
 800699c:	461a      	mov	r2, r3
 800699e:	4b32      	ldr	r3, [pc, #200]	; (8006a68 <UART_SetConfig+0x6f4>)
 80069a0:	fba3 1302 	umull	r1, r3, r3, r2
 80069a4:	095b      	lsrs	r3, r3, #5
 80069a6:	2164      	movs	r1, #100	; 0x64
 80069a8:	fb01 f303 	mul.w	r3, r1, r3
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	3332      	adds	r3, #50	; 0x32
 80069b2:	4a2d      	ldr	r2, [pc, #180]	; (8006a68 <UART_SetConfig+0x6f4>)
 80069b4:	fba2 2303 	umull	r2, r3, r2, r3
 80069b8:	095b      	lsrs	r3, r3, #5
 80069ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069be:	4498      	add	r8, r3
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	469b      	mov	fp, r3
 80069c4:	f04f 0c00 	mov.w	ip, #0
 80069c8:	46d9      	mov	r9, fp
 80069ca:	46e2      	mov	sl, ip
 80069cc:	eb19 0309 	adds.w	r3, r9, r9
 80069d0:	eb4a 040a 	adc.w	r4, sl, sl
 80069d4:	4699      	mov	r9, r3
 80069d6:	46a2      	mov	sl, r4
 80069d8:	eb19 090b 	adds.w	r9, r9, fp
 80069dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069e0:	f04f 0100 	mov.w	r1, #0
 80069e4:	f04f 0200 	mov.w	r2, #0
 80069e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069f4:	4689      	mov	r9, r1
 80069f6:	4692      	mov	sl, r2
 80069f8:	eb1b 0509 	adds.w	r5, fp, r9
 80069fc:	eb4c 060a 	adc.w	r6, ip, sl
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4619      	mov	r1, r3
 8006a06:	f04f 0200 	mov.w	r2, #0
 8006a0a:	f04f 0300 	mov.w	r3, #0
 8006a0e:	f04f 0400 	mov.w	r4, #0
 8006a12:	0094      	lsls	r4, r2, #2
 8006a14:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a18:	008b      	lsls	r3, r1, #2
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	4623      	mov	r3, r4
 8006a1e:	4628      	mov	r0, r5
 8006a20:	4631      	mov	r1, r6
 8006a22:	f7fa f91b 	bl	8000c5c <__aeabi_uldivmod>
 8006a26:	4603      	mov	r3, r0
 8006a28:	460c      	mov	r4, r1
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <UART_SetConfig+0x6f4>)
 8006a2e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a32:	095b      	lsrs	r3, r3, #5
 8006a34:	2164      	movs	r1, #100	; 0x64
 8006a36:	fb01 f303 	mul.w	r3, r1, r3
 8006a3a:	1ad3      	subs	r3, r2, r3
 8006a3c:	011b      	lsls	r3, r3, #4
 8006a3e:	3332      	adds	r3, #50	; 0x32
 8006a40:	4a09      	ldr	r2, [pc, #36]	; (8006a68 <UART_SetConfig+0x6f4>)
 8006a42:	fba2 2303 	umull	r2, r3, r2, r3
 8006a46:	095b      	lsrs	r3, r3, #5
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	4442      	add	r2, r8
 8006a52:	609a      	str	r2, [r3, #8]
}
 8006a54:	e7ff      	b.n	8006a56 <UART_SetConfig+0x6e2>
 8006a56:	bf00      	nop
 8006a58:	3714      	adds	r7, #20
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	40011000 	.word	0x40011000
 8006a64:	40011400 	.word	0x40011400
 8006a68:	51eb851f 	.word	0x51eb851f
 8006a6c:	00000000 	.word	0x00000000

08006a70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a72:	b0c7      	sub	sp, #284	; 0x11c
 8006a74:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a76:	f7fa fa71 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a7a:	f000 fd37 	bl	80074ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a7e:	f001 f8fb 	bl	8007c78 <MX_GPIO_Init>
  MX_TIM9_Init();
 8006a82:	f001 f817 	bl	8007ab4 <MX_TIM9_Init>
  MX_SPI2_Init();
 8006a86:	f000 fecd 	bl	8007824 <MX_SPI2_Init>
  MX_ADC1_Init();
 8006a8a:	f000 fd97 	bl	80075bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8006a8e:	f000 fde7 	bl	8007660 <MX_ADC2_Init>
  MX_CAN1_Init();
 8006a92:	f000 fe37 	bl	8007704 <MX_CAN1_Init>
  MX_I2C1_Init();
 8006a96:	f000 fe69 	bl	800776c <MX_I2C1_Init>
  MX_I2C2_Init();
 8006a9a:	f000 fe95 	bl	80077c8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8006a9e:	f000 fef9 	bl	8007894 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8006aa2:	f001 f8bf 	bl	8007c24 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8006aa6:	f000 ffad 	bl	8007a04 <MX_TIM8_Init>
  MX_TIM13_Init();
 8006aaa:	f001 f875 	bl	8007b98 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8006aae:	2100      	movs	r1, #0
 8006ab0:	486f      	ldr	r0, [pc, #444]	; (8006c70 <main+0x200>)
 8006ab2:	f7fd ff1d 	bl	80048f0 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8006ab6:	2104      	movs	r1, #4
 8006ab8:	486d      	ldr	r0, [pc, #436]	; (8006c70 <main+0x200>)
 8006aba:	f7fd fea5 	bl	8004808 <HAL_TIM_OC_Start>



  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ac4:	486b      	ldr	r0, [pc, #428]	; (8006c74 <main+0x204>)
 8006ac6:	f7fb fbc9 	bl	800225c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8006aca:	2200      	movs	r2, #0
 8006acc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006ad0:	4868      	ldr	r0, [pc, #416]	; (8006c74 <main+0x204>)
 8006ad2:	f7fb fbc3 	bl	800225c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006adc:	4865      	ldr	r0, [pc, #404]	; (8006c74 <main+0x204>)
 8006ade:	f7fb fbbd 	bl	800225c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006ae8:	4862      	ldr	r0, [pc, #392]	; (8006c74 <main+0x204>)
 8006aea:	f7fb fbb7 	bl	800225c <HAL_GPIO_WritePin>
//  for(;;)
//   {
//   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
//   HAL_Delay(600);
//   }
  int i=0;
 8006aee:	2300      	movs	r3, #0
 8006af0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  uint32_t i_fast = 0;
 8006af4:	2300      	movs	r3, #0
 8006af6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  uint32_t i_slow = 0;
 8006afa:	2300      	movs	r3, #0
 8006afc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  uint32_t fast2slow = 2000;
 8006b00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006b04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

  //strcpy((char*)buf, "YUUP");
  sprintf((char*)buf, "START");
 8006b08:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006b0c:	4a5a      	ldr	r2, [pc, #360]	; (8006c78 <main+0x208>)
 8006b0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006b12:	6018      	str	r0, [r3, #0]
 8006b14:	3304      	adds	r3, #4
 8006b16:	8019      	strh	r1, [r3, #0]
  ch='t';
 8006b18:	2374      	movs	r3, #116	; 0x74
 8006b1a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
  int blink_duration = 100;
 8006b1e:	2364      	movs	r3, #100	; 0x64
 8006b20:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 8006b24:	213c      	movs	r1, #60	; 0x3c
 8006b26:	4855      	ldr	r0, [pc, #340]	; (8006c7c <main+0x20c>)
 8006b28:	f7fd ffe7 	bl	8004afa <HAL_TIM_Encoder_Start_IT>
//  HAL_Delay(2);


  // --- MOTOR DRIVER ----------------------------------------------------
  //EN_GATE
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006b2c:	2100      	movs	r1, #0
 8006b2e:	4854      	ldr	r0, [pc, #336]	; (8006c80 <main+0x210>)
 8006b30:	f7fd fede 	bl	80048f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8006b34:	2100      	movs	r1, #0
 8006b36:	4852      	ldr	r0, [pc, #328]	; (8006c80 <main+0x210>)
 8006b38:	f7fe ffc3 	bl	8005ac2 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8006b3c:	2104      	movs	r1, #4
 8006b3e:	4850      	ldr	r0, [pc, #320]	; (8006c80 <main+0x210>)
 8006b40:	f7fd fed6 	bl	80048f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8006b44:	2104      	movs	r1, #4
 8006b46:	484e      	ldr	r0, [pc, #312]	; (8006c80 <main+0x210>)
 8006b48:	f7fe ffbb 	bl	8005ac2 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8006b4c:	2108      	movs	r1, #8
 8006b4e:	484c      	ldr	r0, [pc, #304]	; (8006c80 <main+0x210>)
 8006b50:	f7fd fece 	bl	80048f0 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8006b54:	2108      	movs	r1, #8
 8006b56:	484a      	ldr	r0, [pc, #296]	; (8006c80 <main+0x210>)
 8006b58:	f7fe ffb3 	bl	8005ac2 <HAL_TIMEx_PWMN_Start>

  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b62:	4844      	ldr	r0, [pc, #272]	; (8006c74 <main+0x204>)
 8006b64:	f7fb fb7a 	bl	800225c <HAL_GPIO_WritePin>

  // --- ADC --------------------------------------
  ADC_ChannelConfTypeDef adcChannel;
  adcChannel.Channel = ADC_CHANNEL_14;
 8006b68:	230e      	movs	r3, #14
 8006b6a:	673b      	str	r3, [r7, #112]	; 0x70
	adcChannel.Rank = 1;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	677b      	str	r3, [r7, #116]	; 0x74
	adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006b70:	2307      	movs	r3, #7
 8006b72:	67bb      	str	r3, [r7, #120]	; 0x78
	adcChannel.Offset = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	67fb      	str	r3, [r7, #124]	; 0x7c

	HAL_ADC_ConfigChannel(&hadc2, &adcChannel);
 8006b78:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4841      	ldr	r0, [pc, #260]	; (8006c84 <main+0x214>)
 8006b80:	f7fa fd7a 	bl	8001678 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc2);
 8006b84:	483f      	ldr	r0, [pc, #252]	; (8006c84 <main+0x214>)
 8006b86:	f7fa fac1 	bl	800110c <HAL_ADC_Start>

  // --- ADC ----------------------------------------------------
	//see https://visualgdb.com/tutorials/arm/stm32/adc/
	//uint32_t a_val;
	//a_val = HAL_ADC_GetValue(&hadc2)
	HAL_ADC_Start(&hadc2);
 8006b8a:	483e      	ldr	r0, [pc, #248]	; (8006c84 <main+0x214>)
 8006b8c:	f7fa fabe 	bl	800110c <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc2, 2000) == HAL_OK)
 8006b90:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006b94:	483b      	ldr	r0, [pc, #236]	; (8006c84 <main+0x214>)
 8006b96:	f7fa fb7f 	bl	8001298 <HAL_ADC_PollForConversion>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d109      	bne.n	8006bb4 <main+0x144>
	{
			g_ADCValue = HAL_ADC_GetValue(&hadc2);
 8006ba0:	4838      	ldr	r0, [pc, #224]	; (8006c84 <main+0x214>)
 8006ba2:	f7fa fd3e 	bl	8001622 <HAL_ADC_GetValue>
 8006ba6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			g_MeasurementNumber++;
 8006baa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006bae:	3301      	adds	r3, #1
 8006bb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	// ---I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 8006bb4:	236b      	movs	r3, #107	; 0x6b
 8006bb6:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	buf[1] = 0x00; //switch on
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8006bc0:	23d0      	movs	r3, #208	; 0xd0
 8006bc2:	b299      	uxth	r1, r3
 8006bc4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006bc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	2302      	movs	r3, #2
 8006bd0:	482d      	ldr	r0, [pc, #180]	; (8006c88 <main+0x218>)
 8006bd2:	f7fb fcc7 	bl	8002564 <HAL_I2C_Master_Transmit>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	if (ret != HAL_OK){
 8006bdc:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d008      	beq.n	8006bf6 <main+0x186>
		strcpy((char*)buf, "Error IMU T\r\n");
 8006be4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006be8:	4a28      	ldr	r2, [pc, #160]	; (8006c8c <main+0x21c>)
 8006bea:	461c      	mov	r4, r3
 8006bec:	4613      	mov	r3, r2
 8006bee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bf0:	c407      	stmia	r4!, {r0, r1, r2}
 8006bf2:	8023      	strh	r3, [r4, #0]
 8006bf4:	e002      	b.n	8006bfc <main+0x18c>
	} else {
		buf[0] = 0x00;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	}

	buf[0] = 0x3B;
 8006bfc:	233b      	movs	r3, #59	; 0x3b
 8006bfe:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006c02:	23d0      	movs	r3, #208	; 0xd0
 8006c04:	b299      	uxth	r1, r3
 8006c06:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006c0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	2301      	movs	r3, #1
 8006c12:	481d      	ldr	r0, [pc, #116]	; (8006c88 <main+0x218>)
 8006c14:	f7fb fca6 	bl	8002564 <HAL_I2C_Master_Transmit>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
	if (ret != HAL_OK){
 8006c1e:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d008      	beq.n	8006c38 <main+0x1c8>
		strcpy((char*)buf, "Error IMU T\r\n");
 8006c26:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006c2a:	4a18      	ldr	r2, [pc, #96]	; (8006c8c <main+0x21c>)
 8006c2c:	461c      	mov	r4, r3
 8006c2e:	4613      	mov	r3, r2
 8006c30:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c32:	c407      	stmia	r4!, {r0, r1, r2}
 8006c34:	8023      	strh	r3, [r4, #0]
 8006c36:	e039      	b.n	8006cac <main+0x23c>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006c38:	23d0      	movs	r3, #208	; 0xd0
 8006c3a:	b299      	uxth	r1, r3
 8006c3c:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8006c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c44:	9300      	str	r3, [sp, #0]
 8006c46:	2301      	movs	r3, #1
 8006c48:	480f      	ldr	r0, [pc, #60]	; (8006c88 <main+0x218>)
 8006c4a:	f7fb fd89 	bl	8002760 <HAL_I2C_Master_Receive>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	f887 30eb 	strb.w	r3, [r7, #235]	; 0xeb
		if (ret != HAL_OK){
 8006c54:	f897 30eb 	ldrb.w	r3, [r7, #235]	; 0xeb
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d01b      	beq.n	8006c94 <main+0x224>
			strcpy((char*)buf, "Error IMU R\r\n");
 8006c5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006c60:	4a0b      	ldr	r2, [pc, #44]	; (8006c90 <main+0x220>)
 8006c62:	461c      	mov	r4, r3
 8006c64:	4613      	mov	r3, r2
 8006c66:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c68:	c407      	stmia	r4!, {r0, r1, r2}
 8006c6a:	8023      	strh	r3, [r4, #0]
 8006c6c:	e01e      	b.n	8006cac <main+0x23c>
 8006c6e:	bf00      	nop
 8006c70:	20000330 	.word	0x20000330
 8006c74:	40021000 	.word	0x40021000
 8006c78:	0800a160 	.word	0x0800a160
 8006c7c:	200000f4 	.word	0x200000f4
 8006c80:	200002f0 	.word	0x200002f0
 8006c84:	20000174 	.word	0x20000174
 8006c88:	20000210 	.word	0x20000210
 8006c8c:	0800a168 	.word	0x0800a168
 8006c90:	0800a178 	.word	0x0800a178
		} else {
			accel8l = (int8_t)buf[0];
 8006c94:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 8006c98:	f887 30ea 	strb.w	r3, [r7, #234]	; 0xea
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8006c9c:	f897 20ea 	ldrb.w	r2, [r7, #234]	; 0xea
 8006ca0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8006ca4:	49d2      	ldr	r1, [pc, #840]	; (8006ff0 <main+0x580>)
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 fdea 	bl	8008880 <siprintf>
//					}
//
//				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 8006cac:	4ad1      	ldr	r2, [pc, #836]	; (8006ff4 <main+0x584>)
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb2:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 8006cb4:	4acf      	ldr	r2, [pc, #828]	; (8006ff4 <main+0x584>)
 8006cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cba:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

  GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8006cbc:	4bce      	ldr	r3, [pc, #824]	; (8006ff8 <main+0x588>)
 8006cbe:	2210      	movs	r2, #16
 8006cc0:	619a      	str	r2, [r3, #24]


  // --- SPI ----------------------------------------------------
	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

	uint16_t address = 0x0000;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t value = 0x0000;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58

	// --- set ABI and enable PWM
	//TODO: Error handling
	address = AS_ADDR_SETTINGS1 | AS_WRITE ;
 8006cce:	2318      	movs	r3, #24
 8006cd0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	value = 0x0080 | AS_ODD;
 8006cd4:	f248 0380 	movw	r3, #32896	; 0x8080
 8006cd8:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ce2:	48c6      	ldr	r0, [pc, #792]	; (8006ffc <main+0x58c>)
 8006ce4:	f7fb faba 	bl	800225c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006ce8:	f107 015a 	add.w	r1, r7, #90	; 0x5a
 8006cec:	2301      	movs	r3, #1
 8006cee:	2201      	movs	r2, #1
 8006cf0:	48c3      	ldr	r0, [pc, #780]	; (8007000 <main+0x590>)
 8006cf2:	f7fc ff4d 	bl	8003b90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cfc:	48bf      	ldr	r0, [pc, #764]	; (8006ffc <main+0x58c>)
 8006cfe:	f7fb faad 	bl	800225c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d02:	2200      	movs	r2, #0
 8006d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d08:	48bc      	ldr	r0, [pc, #752]	; (8006ffc <main+0x58c>)
 8006d0a:	f7fb faa7 	bl	800225c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8006d0e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006d12:	2301      	movs	r3, #1
 8006d14:	2201      	movs	r2, #1
 8006d16:	48ba      	ldr	r0, [pc, #744]	; (8007000 <main+0x590>)
 8006d18:	f7fc ff3a 	bl	8003b90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d22:	48b6      	ldr	r0, [pc, #728]	; (8006ffc <main+0x58c>)
 8006d24:	f7fb fa9a 	bl	800225c <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses
	address = AS_ADDR_SETTINGS2 | AS_WRITE ;
 8006d28:	f248 0319 	movw	r3, #32793	; 0x8019
 8006d2c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	value = 0x0020 | AS_ODD;
 8006d30:	f248 0320 	movw	r3, #32800	; 0x8020
 8006d34:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d3e:	48af      	ldr	r0, [pc, #700]	; (8006ffc <main+0x58c>)
 8006d40:	f7fb fa8c 	bl	800225c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006d44:	f107 015a 	add.w	r1, r7, #90	; 0x5a
 8006d48:	2301      	movs	r3, #1
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	48ac      	ldr	r0, [pc, #688]	; (8007000 <main+0x590>)
 8006d4e:	f7fc ff1f 	bl	8003b90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006d52:	2201      	movs	r2, #1
 8006d54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d58:	48a8      	ldr	r0, [pc, #672]	; (8006ffc <main+0x58c>)
 8006d5a:	f7fb fa7f 	bl	800225c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d5e:	2200      	movs	r2, #0
 8006d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d64:	48a5      	ldr	r0, [pc, #660]	; (8006ffc <main+0x58c>)
 8006d66:	f7fb fa79 	bl	800225c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8006d6a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006d6e:	2301      	movs	r3, #1
 8006d70:	2201      	movs	r2, #1
 8006d72:	48a3      	ldr	r0, [pc, #652]	; (8007000 <main+0x590>)
 8006d74:	f7fc ff0c 	bl	8003b90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006d78:	2201      	movs	r2, #1
 8006d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d7e:	489f      	ldr	r0, [pc, #636]	; (8006ffc <main+0x58c>)
 8006d80:	f7fb fa6c 	bl	800225c <HAL_GPIO_WritePin>

	// --- read angle
	address = 0x3FFE | AS_READ ;
 8006d84:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8006d88:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint16_t angle = 0x0000;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d92:	2200      	movs	r2, #0
 8006d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d98:	4898      	ldr	r0, [pc, #608]	; (8006ffc <main+0x58c>)
 8006d9a:	f7fb fa5f 	bl	800225c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);//this is the value
 8006d9e:	f107 015a 	add.w	r1, r7, #90	; 0x5a
 8006da2:	2301      	movs	r3, #1
 8006da4:	2201      	movs	r2, #1
 8006da6:	4896      	ldr	r0, [pc, #600]	; (8007000 <main+0x590>)
 8006da8:	f7fc fef2 	bl	8003b90 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006dac:	2201      	movs	r2, #1
 8006dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006db2:	4892      	ldr	r0, [pc, #584]	; (8006ffc <main+0x58c>)
 8006db4:	f7fb fa52 	bl	800225c <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006db8:	2200      	movs	r2, #0
 8006dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dbe:	488f      	ldr	r0, [pc, #572]	; (8006ffc <main+0x58c>)
 8006dc0:	f7fb fa4c 	bl	800225c <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint16_t *)&angle, 1, 1);
 8006dc4:	f107 0156 	add.w	r1, r7, #86	; 0x56
 8006dc8:	2301      	movs	r3, #1
 8006dca:	2201      	movs	r2, #1
 8006dcc:	488c      	ldr	r0, [pc, #560]	; (8007000 <main+0x590>)
 8006dce:	f7fd f813 	bl	8003df8 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006dd8:	4888      	ldr	r0, [pc, #544]	; (8006ffc <main+0x58c>)
 8006dda:	f7fb fa3f 	bl	800225c <HAL_GPIO_WritePin>

	// --- Calibrate counter_angle -----------------------------------
	angle &= AS_DATA_MASK;
 8006dde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006de2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	TIM8->CNT = (uint16_t) ((float)angle /16384.0 * 2000.0);
 8006dec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006df0:	ee07 3a90 	vmov	s15, r3
 8006df4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006df8:	ee17 0a90 	vmov	r0, s15
 8006dfc:	f7f9 fba4 	bl	8000548 <__aeabi_f2d>
 8006e00:	f04f 0200 	mov.w	r2, #0
 8006e04:	4b7f      	ldr	r3, [pc, #508]	; (8007004 <main+0x594>)
 8006e06:	f7f9 fd21 	bl	800084c <__aeabi_ddiv>
 8006e0a:	4603      	mov	r3, r0
 8006e0c:	460c      	mov	r4, r1
 8006e0e:	4618      	mov	r0, r3
 8006e10:	4621      	mov	r1, r4
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	4b7c      	ldr	r3, [pc, #496]	; (8007008 <main+0x598>)
 8006e18:	f7f9 fbee 	bl	80005f8 <__aeabi_dmul>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	4618      	mov	r0, r3
 8006e22:	4621      	mov	r1, r4
 8006e24:	f7f9 feaa 	bl	8000b7c <__aeabi_d2uiz>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	4b77      	ldr	r3, [pc, #476]	; (800700c <main+0x59c>)
 8006e2e:	625a      	str	r2, [r3, #36]	; 0x24



	float amp = 0.05;  // amp
 8006e30:	4b77      	ldr	r3, [pc, #476]	; (8007010 <main+0x5a0>)
 8006e32:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	float phase_shift = PI/2;
 8006e36:	4b77      	ldr	r3, [pc, #476]	; (8007014 <main+0x5a4>)
 8006e38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	int pwm = 2048;
 8006e3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e40:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  while (1)
  {
  	// -------------------------------------------------------------
		// --- FAST PROCESS ----------------------------------------------------
		// -------------------------------------------------------------
  	HAL_Delay(1);
 8006e44:	2001      	movs	r0, #1
 8006e46:	f7fa f8fb 	bl	8001040 <HAL_Delay>
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006e4a:	4b6c      	ldr	r3, [pc, #432]	; (8006ffc <main+0x58c>)
 8006e4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e50:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006e52:	4b6a      	ldr	r3, [pc, #424]	; (8006ffc <main+0x58c>)
 8006e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e58:	619a      	str	r2, [r3, #24]
  	HAL_GPIO_TogglePin(debug1_out_GPIO_Port, debug1_out_Pin);//takes 550ns
 8006e5a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e5e:	4867      	ldr	r0, [pc, #412]	; (8006ffc <main+0x58c>)
 8006e60:	f7fb fa15 	bl	800228e <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(debug1_out_GPIO_Port, debug1_out_Pin);
 8006e64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e68:	4864      	ldr	r0, [pc, #400]	; (8006ffc <main+0x58c>)
 8006e6a:	f7fb fa10 	bl	800228e <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(debug1_out_GPIO_Port, debug1_out_Pin);
 8006e6e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e72:	4862      	ldr	r0, [pc, #392]	; (8006ffc <main+0x58c>)
 8006e74:	f7fb fa0b 	bl	800228e <HAL_GPIO_TogglePin>
  	HAL_GPIO_TogglePin(debug1_out_GPIO_Port, debug1_out_Pin);
 8006e78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e7c:	485f      	ldr	r0, [pc, #380]	; (8006ffc <main+0x58c>)
 8006e7e:	f7fb fa06 	bl	800228e <HAL_GPIO_TogglePin>
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8006e82:	4b5e      	ldr	r3, [pc, #376]	; (8006ffc <main+0x58c>)
 8006e84:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e88:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006e8a:	4b5c      	ldr	r3, [pc, #368]	; (8006ffc <main+0x58c>)
 8006e8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e90:	619a      	str	r2, [r3, #24]

  	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);

  	// --- get angle
  	EncVal = TIM8->CNT;//takes 550ns
 8006e92:	4b5e      	ldr	r3, [pc, #376]	; (800700c <main+0x59c>)
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	b21a      	sxth	r2, r3
 8006e98:	4b5f      	ldr	r3, [pc, #380]	; (8007018 <main+0x5a8>)
 8006e9a:	801a      	strh	r2, [r3, #0]

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006e9c:	4b57      	ldr	r3, [pc, #348]	; (8006ffc <main+0x58c>)
 8006e9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ea2:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006ea4:	4b55      	ldr	r3, [pc, #340]	; (8006ffc <main+0x58c>)
 8006ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eaa:	619a      	str	r2, [r3, #24]

  	// --- MOTOR DRIVER ----------------------------------------------------
  	// --- PWM pulses

  	float phase = (float) EncVal * 0.0031415 ; //(float) EncVal / 2000.0 * 2*PI * 7 ;
 8006eac:	4b5a      	ldr	r3, [pc, #360]	; (8007018 <main+0x5a8>)
 8006eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006eb2:	ee07 3a90 	vmov	s15, r3
 8006eb6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eba:	ee17 0a90 	vmov	r0, s15
 8006ebe:	f7f9 fb43 	bl	8000548 <__aeabi_f2d>
 8006ec2:	a347      	add	r3, pc, #284	; (adr r3, 8006fe0 <main+0x570>)
 8006ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ec8:	f7f9 fb96 	bl	80005f8 <__aeabi_dmul>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	460c      	mov	r4, r1
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	f7f9 fe72 	bl	8000bbc <__aeabi_d2f>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  	//float phase = 0.0;

    //float phase = ((float)i_fast)/20.0 * 2.0 * PI;

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8006ede:	4b47      	ldr	r3, [pc, #284]	; (8006ffc <main+0x58c>)
 8006ee0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006ee4:	619a      	str	r2, [r3, #24]
  	  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006ee6:	4b45      	ldr	r3, [pc, #276]	; (8006ffc <main+0x58c>)
 8006ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eec:	619a      	str	r2, [r3, #24]


    float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel
 8006eee:	4b4b      	ldr	r3, [pc, #300]	; (800701c <main+0x5ac>)
 8006ef0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8006ef4:	4b41      	ldr	r3, [pc, #260]	; (8006ffc <main+0x58c>)
 8006ef6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006efa:	619a      	str	r2, [r3, #24]
      	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006efc:	4b3f      	ldr	r3, [pc, #252]	; (8006ffc <main+0x58c>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f02:	619a      	str	r2, [r3, #24]

    u0 *= amp;
 8006f04:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8006f08:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8006f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f10:	edc7 7a37 	vstr	s15, [r7, #220]	; 0xdc

    debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8006f14:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <main+0x58c>)
 8006f16:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f1a:	619a      	str	r2, [r3, #24]
      	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006f1c:	4b37      	ldr	r3, [pc, #220]	; (8006ffc <main+0x58c>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f22:	619a      	str	r2, [r3, #24]

    phase += phase_shift;
 8006f24:	ed97 7a38 	vldr	s14, [r7, #224]	; 0xe0
 8006f28:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8006f2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f30:	edc7 7a38 	vstr	s15, [r7, #224]	; 0xe0

    debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8006f34:	4b31      	ldr	r3, [pc, #196]	; (8006ffc <main+0x58c>)
 8006f36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f3a:	619a      	str	r2, [r3, #24]
      	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006f3c:	4b2f      	ldr	r3, [pc, #188]	; (8006ffc <main+0x58c>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	619a      	str	r2, [r3, #24]

    float test = amp/6.1234;
 8006f44:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8006f48:	f7f9 fafe 	bl	8000548 <__aeabi_f2d>
 8006f4c:	a326      	add	r3, pc, #152	; (adr r3, 8006fe8 <main+0x578>)
 8006f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f52:	f7f9 fc7b 	bl	800084c <__aeabi_ddiv>
 8006f56:	4603      	mov	r3, r0
 8006f58:	460c      	mov	r4, r1
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	f7f9 fe2d 	bl	8000bbc <__aeabi_d2f>
 8006f62:	4603      	mov	r3, r0
 8006f64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

		debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8006f68:	4b24      	ldr	r3, [pc, #144]	; (8006ffc <main+0x58c>)
 8006f6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f6e:	619a      	str	r2, [r3, #24]
				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006f70:	4b22      	ldr	r3, [pc, #136]	; (8006ffc <main+0x58c>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f76:	619a      	str	r2, [r3, #24]

    //HAL_GPIO_TogglePin(debug1_out_GPIO_Port, debug1_out_Pin);//11mus since last --> reduced it to 2 mus=200 clock cycles, by taking out divisions

    float uA = u0 * cos(-phase);
 8006f78:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8006f7c:	f7f9 fae4 	bl	8000548 <__aeabi_f2d>
 8006f80:	4604      	mov	r4, r0
 8006f82:	460d      	mov	r5, r1
 8006f84:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8006f88:	eef1 7a67 	vneg.f32	s15, s15
 8006f8c:	ee17 3a90 	vmov	r3, s15
 8006f90:	4618      	mov	r0, r3
 8006f92:	f7f9 fad9 	bl	8000548 <__aeabi_f2d>
 8006f96:	4602      	mov	r2, r0
 8006f98:	460b      	mov	r3, r1
 8006f9a:	ec43 2b10 	vmov	d0, r2, r3
 8006f9e:	f002 f8c3 	bl	8009128 <cos>
 8006fa2:	ec53 2b10 	vmov	r2, r3, d0
 8006fa6:	4620      	mov	r0, r4
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f7f9 fb25 	bl	80005f8 <__aeabi_dmul>
 8006fae:	4603      	mov	r3, r0
 8006fb0:	460c      	mov	r4, r1
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	f7f9 fe01 	bl	8000bbc <__aeabi_d2f>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <main+0x58c>)
 8006fc2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fc6:	619a      	str	r2, [r3, #24]
    				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006fc8:	4b0c      	ldr	r3, [pc, #48]	; (8006ffc <main+0x58c>)
 8006fca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fce:	619a      	str	r2, [r3, #24]
    float uB = u0 * cos(-phase + 2.0 / 3.0 * PI);
 8006fd0:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8006fd4:	f7f9 fab8 	bl	8000548 <__aeabi_f2d>
 8006fd8:	4604      	mov	r4, r0
 8006fda:	460d      	mov	r5, r1
 8006fdc:	e020      	b.n	8007020 <main+0x5b0>
 8006fde:	bf00      	nop
 8006fe0:	f85510d4 	.word	0xf85510d4
 8006fe4:	3f69bc33 	.word	0x3f69bc33
 8006fe8:	91d14e3c 	.word	0x91d14e3c
 8006fec:	40187e5c 	.word	0x40187e5c
 8006ff0:	0800a188 	.word	0x0800a188
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40021000 	.word	0x40021000
 8006ffc:	40020c00 	.word	0x40020c00
 8007000:	2000009c 	.word	0x2000009c
 8007004:	40d00000 	.word	0x40d00000
 8007008:	409f4000 	.word	0x409f4000
 800700c:	40010400 	.word	0x40010400
 8007010:	3d4ccccd 	.word	0x3d4ccccd
 8007014:	3fc90fd8 	.word	0x3fc90fd8
 8007018:	200002ec 	.word	0x200002ec
 800701c:	3f13c9ef 	.word	0x3f13c9ef
 8007020:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8007024:	eef1 7a67 	vneg.f32	s15, s15
 8007028:	ee17 3a90 	vmov	r3, s15
 800702c:	4618      	mov	r0, r3
 800702e:	f7f9 fa8b 	bl	8000548 <__aeabi_f2d>
 8007032:	f20f 4314 	addw	r3, pc, #1044	; 0x414
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f7f9 f927 	bl	800028c <__adddf3>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	ec43 2b17 	vmov	d7, r2, r3
 8007046:	eeb0 0a47 	vmov.f32	s0, s14
 800704a:	eef0 0a67 	vmov.f32	s1, s15
 800704e:	f002 f86b 	bl	8009128 <cos>
 8007052:	ec53 2b10 	vmov	r2, r3, d0
 8007056:	4620      	mov	r0, r4
 8007058:	4629      	mov	r1, r5
 800705a:	f7f9 facd 	bl	80005f8 <__aeabi_dmul>
 800705e:	4603      	mov	r3, r0
 8007060:	460c      	mov	r4, r1
 8007062:	4618      	mov	r0, r3
 8007064:	4621      	mov	r1, r4
 8007066:	f7f9 fda9 	bl	8000bbc <__aeabi_d2f>
 800706a:	4603      	mov	r3, r0
 800706c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    float uC = u0 * cos(-phase + 2.0 * 2.0 / 3.0 * PI);
 8007070:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 8007074:	f7f9 fa68 	bl	8000548 <__aeabi_f2d>
 8007078:	4604      	mov	r4, r0
 800707a:	460d      	mov	r5, r1
 800707c:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8007080:	eef1 7a67 	vneg.f32	s15, s15
 8007084:	ee17 3a90 	vmov	r3, s15
 8007088:	4618      	mov	r0, r3
 800708a:	f7f9 fa5d 	bl	8000548 <__aeabi_f2d>
 800708e:	a3f0      	add	r3, pc, #960	; (adr r3, 8007450 <main+0x9e0>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	f7f9 f8fa 	bl	800028c <__adddf3>
 8007098:	4602      	mov	r2, r0
 800709a:	460b      	mov	r3, r1
 800709c:	ec43 2b17 	vmov	d7, r2, r3
 80070a0:	eeb0 0a47 	vmov.f32	s0, s14
 80070a4:	eef0 0a67 	vmov.f32	s1, s15
 80070a8:	f002 f83e 	bl	8009128 <cos>
 80070ac:	ec53 2b10 	vmov	r2, r3, d0
 80070b0:	4620      	mov	r0, r4
 80070b2:	4629      	mov	r1, r5
 80070b4:	f7f9 faa0 	bl	80005f8 <__aeabi_dmul>
 80070b8:	4603      	mov	r3, r0
 80070ba:	460c      	mov	r4, r1
 80070bc:	4618      	mov	r0, r3
 80070be:	4621      	mov	r1, r4
 80070c0:	f7f9 fd7c 	bl	8000bbc <__aeabi_d2f>
 80070c4:	4603      	mov	r3, r0
 80070c6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 80070ca:	4bd7      	ldr	r3, [pc, #860]	; (8007428 <main+0x9b8>)
 80070cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80070d0:	619a      	str	r2, [r3, #24]
    				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 80070d2:	4bd5      	ldr	r3, [pc, #852]	; (8007428 <main+0x9b8>)
 80070d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070d8:	619a      	str	r2, [r3, #24]

    //HAL_GPIO_TogglePin(debug1_out_GPIO_Port, debug1_out_Pin);//100mus since last == 10000 clock cycles

    float uMin = min(min(uA, uB), uC);
 80070da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80070e6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80070ea:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 80070ee:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 80070f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80070f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070fa:	d502      	bpl.n	8007102 <main+0x692>
 80070fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007100:	e001      	b.n	8007106 <main+0x696>
 8007102:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007106:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800710a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800710e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007112:	ed97 7a30 	vldr	s14, [r7, #192]	; 0xc0
 8007116:	edd7 7a2f 	vldr	s15, [r7, #188]	; 0xbc
 800711a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800711e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007122:	d502      	bpl.n	800712a <main+0x6ba>
 8007124:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007128:	e001      	b.n	800712e <main+0x6be>
 800712a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800712e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    uA -= uMin;
 8007132:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8007136:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800713a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800713e:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4
    uB -= uMin;
 8007142:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8007146:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800714a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800714e:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
    uC -= uMin;
 8007152:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8007156:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800715a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800715e:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc

    debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8007162:	4bb1      	ldr	r3, [pc, #708]	; (8007428 <main+0x9b8>)
 8007164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007168:	619a      	str	r2, [r3, #24]
        				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800716a:	4baf      	ldr	r3, [pc, #700]	; (8007428 <main+0x9b8>)
 800716c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007170:	619a      	str	r2, [r3, #24]

    int pwmA = (uint16_t) (pwm * uA);
 8007172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007176:	ee07 3a90 	vmov	s15, r3
 800717a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800717e:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8007182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800718a:	ee17 3a90 	vmov	r3, s15
 800718e:	b29b      	uxth	r3, r3
 8007190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8007194:	4ba4      	ldr	r3, [pc, #656]	; (8007428 <main+0x9b8>)
 8007196:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800719a:	619a      	str	r2, [r3, #24]
        				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800719c:	4ba2      	ldr	r3, [pc, #648]	; (8007428 <main+0x9b8>)
 800719e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071a2:	619a      	str	r2, [r3, #24]
    int pwmB = (uint16_t) (pwm * uB);
 80071a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071a8:	ee07 3a90 	vmov	s15, r3
 80071ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071b0:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 80071b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071bc:	ee17 3a90 	vmov	r3, s15
 80071c0:	b29b      	uxth	r3, r3
 80071c2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    int pwmC = (uint16_t) (pwm * uC);
 80071c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ca:	ee07 3a90 	vmov	s15, r3
 80071ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071d2:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 80071d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071de:	ee17 3a90 	vmov	r3, s15
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 80071e8:	4b8f      	ldr	r3, [pc, #572]	; (8007428 <main+0x9b8>)
 80071ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80071ee:	619a      	str	r2, [r3, #24]
        				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 80071f0:	4b8d      	ldr	r3, [pc, #564]	; (8007428 <main+0x9b8>)
 80071f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f6:	619a      	str	r2, [r3, #24]


  	TIM1->CCR1 = pwmA;
 80071f8:	4a8c      	ldr	r2, [pc, #560]	; (800742c <main+0x9bc>)
 80071fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071fe:	6353      	str	r3, [r2, #52]	; 0x34
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8007200:	4b89      	ldr	r3, [pc, #548]	; (8007428 <main+0x9b8>)
 8007202:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007206:	619a      	str	r2, [r3, #24]
  	    				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8007208:	4b87      	ldr	r3, [pc, #540]	; (8007428 <main+0x9b8>)
 800720a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800720e:	619a      	str	r2, [r3, #24]
  	TIM1->CCR2 = pwmB;
 8007210:	4a86      	ldr	r2, [pc, #536]	; (800742c <main+0x9bc>)
 8007212:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007216:	6393      	str	r3, [r2, #56]	; 0x38
  	TIM1->CCR3 = pwmC;
 8007218:	4a84      	ldr	r2, [pc, #528]	; (800742c <main+0x9bc>)
 800721a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800721e:	63d3      	str	r3, [r2, #60]	; 0x3c
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 8007220:	4b81      	ldr	r3, [pc, #516]	; (8007428 <main+0x9b8>)
 8007222:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007226:	619a      	str	r2, [r3, #24]
  	    				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8007228:	4b7f      	ldr	r3, [pc, #508]	; (8007428 <main+0x9b8>)
 800722a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800722e:	619a      	str	r2, [r3, #24]

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 8007230:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8007234:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8007238:	fbb3 f2f2 	udiv	r2, r3, r2
 800723c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8007240:	fb01 f202 	mul.w	r2, r1, r2
 8007244:	1a9b      	subs	r3, r3, r2
 8007246:	2b00      	cmp	r3, #0
 8007248:	f040 813a 	bne.w	80074c0 <main+0xa50>

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800724c:	2110      	movs	r1, #16
 800724e:	4878      	ldr	r0, [pc, #480]	; (8007430 <main+0x9c0>)
 8007250:	f7fb f81d 	bl	800228e <HAL_GPIO_TogglePin>
			char buffer3[20];




			itoa((int)phase, buffer0, 10);
 8007254:	edd7 7a38 	vldr	s15, [r7, #224]	; 0xe0
 8007258:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800725c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007260:	220a      	movs	r2, #10
 8007262:	4619      	mov	r1, r3
 8007264:	ee17 0a90 	vmov	r0, s15
 8007268:	f001 fb00 	bl	800886c <itoa>
			itoa(amp*1000, buffer1, 10);
 800726c:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8007270:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8007434 <main+0x9c4>
 8007274:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800727c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007280:	220a      	movs	r2, #10
 8007282:	4619      	mov	r1, r3
 8007284:	ee17 0a90 	vmov	r0, s15
 8007288:	f001 faf0 	bl	800886c <itoa>
			itoa(phase_shift*1000, buffer2, 10);
 800728c:	edd7 7a40 	vldr	s15, [r7, #256]	; 0x100
 8007290:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8007434 <main+0x9c4>
 8007294:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800729c:	f107 0318 	add.w	r3, r7, #24
 80072a0:	220a      	movs	r2, #10
 80072a2:	4619      	mov	r1, r3
 80072a4:	ee17 0a90 	vmov	r0, s15
 80072a8:	f001 fae0 	bl	800886c <itoa>
			itoa(pwmA, buffer3, 10);
 80072ac:	1d3b      	adds	r3, r7, #4
 80072ae:	220a      	movs	r2, #10
 80072b0:	4619      	mov	r1, r3
 80072b2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80072b6:	f001 fad9 	bl	800886c <itoa>


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 80072ba:	f107 0383 	add.w	r3, r7, #131	; 0x83
 80072be:	2201      	movs	r2, #1
 80072c0:	4619      	mov	r1, r3
 80072c2:	485d      	ldr	r0, [pc, #372]	; (8007438 <main+0x9c8>)
 80072c4:	f7fe fdc1 	bl	8005e4a <HAL_UART_Receive_IT>

			sprintf((char*)buf, strcat(strcat(buffer0, "_"),strcat(strcat(buffer1, "_"), strcat(strcat(buffer2, "#"), strcat(buffer3, "_\r\n")))));
 80072c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7f8 ff7f 	bl	80001d0 <strlen>
 80072d2:	4603      	mov	r3, r0
 80072d4:	461a      	mov	r2, r3
 80072d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80072da:	4413      	add	r3, r2
 80072dc:	4957      	ldr	r1, [pc, #348]	; (800743c <main+0x9cc>)
 80072de:	461a      	mov	r2, r3
 80072e0:	460b      	mov	r3, r1
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	8013      	strh	r3, [r2, #0]
 80072e6:	f107 0440 	add.w	r4, r7, #64	; 0x40
 80072ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7f8 ff6e 	bl	80001d0 <strlen>
 80072f4:	4603      	mov	r3, r0
 80072f6:	461a      	mov	r2, r3
 80072f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80072fc:	4413      	add	r3, r2
 80072fe:	494f      	ldr	r1, [pc, #316]	; (800743c <main+0x9cc>)
 8007300:	461a      	mov	r2, r3
 8007302:	460b      	mov	r3, r1
 8007304:	881b      	ldrh	r3, [r3, #0]
 8007306:	8013      	strh	r3, [r2, #0]
 8007308:	f107 052c 	add.w	r5, r7, #44	; 0x2c
 800730c:	f107 0318 	add.w	r3, r7, #24
 8007310:	4618      	mov	r0, r3
 8007312:	f7f8 ff5d 	bl	80001d0 <strlen>
 8007316:	4603      	mov	r3, r0
 8007318:	461a      	mov	r2, r3
 800731a:	f107 0318 	add.w	r3, r7, #24
 800731e:	4413      	add	r3, r2
 8007320:	4947      	ldr	r1, [pc, #284]	; (8007440 <main+0x9d0>)
 8007322:	461a      	mov	r2, r3
 8007324:	460b      	mov	r3, r1
 8007326:	881b      	ldrh	r3, [r3, #0]
 8007328:	8013      	strh	r3, [r2, #0]
 800732a:	f107 0618 	add.w	r6, r7, #24
 800732e:	1d3b      	adds	r3, r7, #4
 8007330:	4618      	mov	r0, r3
 8007332:	f7f8 ff4d 	bl	80001d0 <strlen>
 8007336:	4603      	mov	r3, r0
 8007338:	461a      	mov	r2, r3
 800733a:	1d3b      	adds	r3, r7, #4
 800733c:	4413      	add	r3, r2
 800733e:	4a41      	ldr	r2, [pc, #260]	; (8007444 <main+0x9d4>)
 8007340:	6810      	ldr	r0, [r2, #0]
 8007342:	6018      	str	r0, [r3, #0]
 8007344:	1d3b      	adds	r3, r7, #4
 8007346:	4619      	mov	r1, r3
 8007348:	4630      	mov	r0, r6
 800734a:	f001 fab9 	bl	80088c0 <strcat>
 800734e:	4603      	mov	r3, r0
 8007350:	4619      	mov	r1, r3
 8007352:	4628      	mov	r0, r5
 8007354:	f001 fab4 	bl	80088c0 <strcat>
 8007358:	4603      	mov	r3, r0
 800735a:	4619      	mov	r1, r3
 800735c:	4620      	mov	r0, r4
 800735e:	f001 faaf 	bl	80088c0 <strcat>
 8007362:	4602      	mov	r2, r0
 8007364:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007368:	4611      	mov	r1, r2
 800736a:	4618      	mov	r0, r3
 800736c:	f001 fa88 	bl	8008880 <siprintf>
			HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf));
 8007370:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007374:	4618      	mov	r0, r3
 8007376:	f7f8 ff2b 	bl	80001d0 <strlen>
 800737a:	4603      	mov	r3, r0
 800737c:	b29a      	uxth	r2, r3
 800737e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8007382:	4619      	mov	r1, r3
 8007384:	482c      	ldr	r0, [pc, #176]	; (8007438 <main+0x9c8>)
 8007386:	f7fe fd1b 	bl	8005dc0 <HAL_UART_Transmit_IT>

			switch(ch){
 800738a:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 800738e:	3b61      	subs	r3, #97	; 0x61
 8007390:	2b16      	cmp	r3, #22
 8007392:	f200 808d 	bhi.w	80074b0 <main+0xa40>
 8007396:	a201      	add	r2, pc, #4	; (adr r2, 800739c <main+0x92c>)
 8007398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739c:	08007459 	.word	0x08007459
 80073a0:	080074b1 	.word	0x080074b1
 80073a4:	080074b1 	.word	0x080074b1
 80073a8:	08007485 	.word	0x08007485
 80073ac:	080074b1 	.word	0x080074b1
 80073b0:	080074b1 	.word	0x080074b1
 80073b4:	080074b1 	.word	0x080074b1
 80073b8:	080074b1 	.word	0x080074b1
 80073bc:	080074b1 	.word	0x080074b1
 80073c0:	080074b1 	.word	0x080074b1
 80073c4:	080074b1 	.word	0x080074b1
 80073c8:	080074b1 	.word	0x080074b1
 80073cc:	080074b1 	.word	0x080074b1
 80073d0:	080074b1 	.word	0x080074b1
 80073d4:	080074b1 	.word	0x080074b1
 80073d8:	080074b1 	.word	0x080074b1
 80073dc:	080074b1 	.word	0x080074b1
 80073e0:	080074b1 	.word	0x080074b1
 80073e4:	0800740d 	.word	0x0800740d
 80073e8:	080074b1 	.word	0x080074b1
 80073ec:	080074b1 	.word	0x080074b1
 80073f0:	080074b1 	.word	0x080074b1
 80073f4:	080073f9 	.word	0x080073f9
				case 'w':
					ch='t';
 80073f8:	2374      	movs	r3, #116	; 0x74
 80073fa:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
					amp *= 2;
 80073fe:	edd7 7a41 	vldr	s15, [r7, #260]	; 0x104
 8007402:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007406:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
					break;
 800740a:	e054      	b.n	80074b6 <main+0xa46>
				case 's':
					ch='t';
 800740c:	2374      	movs	r3, #116	; 0x74
 800740e:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
					amp /= 2;
 8007412:	ed97 7a41 	vldr	s14, [r7, #260]	; 0x104
 8007416:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800741a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800741e:	edc7 7a41 	vstr	s15, [r7, #260]	; 0x104
					break;
 8007422:	e048      	b.n	80074b6 <main+0xa46>
 8007424:	f3af 8000 	nop.w
 8007428:	40020c00 	.word	0x40020c00
 800742c:	40010000 	.word	0x40010000
 8007430:	40021000 	.word	0x40021000
 8007434:	447a0000 	.word	0x447a0000
 8007438:	20000134 	.word	0x20000134
 800743c:	0800a190 	.word	0x0800a190
 8007440:	0800a194 	.word	0x0800a194
 8007444:	0800a198 	.word	0x0800a198
 8007448:	fdb20051 	.word	0xfdb20051
 800744c:	4000c151 	.word	0x4000c151
 8007450:	fdb20051 	.word	0xfdb20051
 8007454:	4010c151 	.word	0x4010c151
				case 'a':
					ch='t';
 8007458:	2374      	movs	r3, #116	; 0x74
 800745a:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
					phase_shift += 0.1;
 800745e:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 8007462:	f7f9 f871 	bl	8000548 <__aeabi_f2d>
 8007466:	a31f      	add	r3, pc, #124	; (adr r3, 80074e4 <main+0xa74>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 ff0e 	bl	800028c <__adddf3>
 8007470:	4603      	mov	r3, r0
 8007472:	460c      	mov	r4, r1
 8007474:	4618      	mov	r0, r3
 8007476:	4621      	mov	r1, r4
 8007478:	f7f9 fba0 	bl	8000bbc <__aeabi_d2f>
 800747c:	4603      	mov	r3, r0
 800747e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					break;
 8007482:	e018      	b.n	80074b6 <main+0xa46>
				case 'd':
					ch='t';
 8007484:	2374      	movs	r3, #116	; 0x74
 8007486:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
					phase_shift -= 0.1;
 800748a:	f8d7 0100 	ldr.w	r0, [r7, #256]	; 0x100
 800748e:	f7f9 f85b 	bl	8000548 <__aeabi_f2d>
 8007492:	a314      	add	r3, pc, #80	; (adr r3, 80074e4 <main+0xa74>)
 8007494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007498:	f7f8 fef6 	bl	8000288 <__aeabi_dsub>
 800749c:	4603      	mov	r3, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	4618      	mov	r0, r3
 80074a2:	4621      	mov	r1, r4
 80074a4:	f7f9 fb8a 	bl	8000bbc <__aeabi_d2f>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
					break;
 80074ae:	e002      	b.n	80074b6 <main+0xa46>
				default:
					ch='t';
 80074b0:	2374      	movs	r3, #116	; 0x74
 80074b2:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

			}
			i_slow++;
 80074b6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80074ba:	3301      	adds	r3, #1
 80074bc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	  }

	  i_fast++;
 80074c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80074c4:	3301      	adds	r3, #1
 80074c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  debug1_out_GPIO_Port->BSRR = debug1_out_Pin;
 80074ca:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <main+0xa70>)
 80074cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80074d0:	619a      	str	r2, [r3, #24]
	    	    				debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 80074d2:	4b03      	ldr	r3, [pc, #12]	; (80074e0 <main+0xa70>)
 80074d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074d8:	619a      	str	r2, [r3, #24]
  {
 80074da:	e4b3      	b.n	8006e44 <main+0x3d4>
 80074dc:	f3af 8000 	nop.w
 80074e0:	40020c00 	.word	0x40020c00
 80074e4:	9999999a 	.word	0x9999999a
 80074e8:	3fb99999 	.word	0x3fb99999

080074ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b094      	sub	sp, #80	; 0x50
 80074f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80074f2:	f107 0320 	add.w	r3, r7, #32
 80074f6:	2230      	movs	r2, #48	; 0x30
 80074f8:	2100      	movs	r1, #0
 80074fa:	4618      	mov	r0, r3
 80074fc:	f001 f9b8 	bl	8008870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007500:	f107 030c 	add.w	r3, r7, #12
 8007504:	2200      	movs	r2, #0
 8007506:	601a      	str	r2, [r3, #0]
 8007508:	605a      	str	r2, [r3, #4]
 800750a:	609a      	str	r2, [r3, #8]
 800750c:	60da      	str	r2, [r3, #12]
 800750e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007510:	2300      	movs	r3, #0
 8007512:	60bb      	str	r3, [r7, #8]
 8007514:	4b27      	ldr	r3, [pc, #156]	; (80075b4 <SystemClock_Config+0xc8>)
 8007516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007518:	4a26      	ldr	r2, [pc, #152]	; (80075b4 <SystemClock_Config+0xc8>)
 800751a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800751e:	6413      	str	r3, [r2, #64]	; 0x40
 8007520:	4b24      	ldr	r3, [pc, #144]	; (80075b4 <SystemClock_Config+0xc8>)
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007528:	60bb      	str	r3, [r7, #8]
 800752a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800752c:	2300      	movs	r3, #0
 800752e:	607b      	str	r3, [r7, #4]
 8007530:	4b21      	ldr	r3, [pc, #132]	; (80075b8 <SystemClock_Config+0xcc>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a20      	ldr	r2, [pc, #128]	; (80075b8 <SystemClock_Config+0xcc>)
 8007536:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800753a:	6013      	str	r3, [r2, #0]
 800753c:	4b1e      	ldr	r3, [pc, #120]	; (80075b8 <SystemClock_Config+0xcc>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007544:	607b      	str	r3, [r7, #4]
 8007546:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007548:	2302      	movs	r3, #2
 800754a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800754c:	2301      	movs	r3, #1
 800754e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007550:	2310      	movs	r3, #16
 8007552:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007554:	2302      	movs	r3, #2
 8007556:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007558:	2300      	movs	r3, #0
 800755a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800755c:	2308      	movs	r3, #8
 800755e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8007560:	2354      	movs	r3, #84	; 0x54
 8007562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007564:	2302      	movs	r3, #2
 8007566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8007568:	2303      	movs	r3, #3
 800756a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800756c:	f107 0320 	add.w	r3, r7, #32
 8007570:	4618      	mov	r0, r3
 8007572:	f7fb fe47 	bl	8003204 <HAL_RCC_OscConfig>
 8007576:	4603      	mov	r3, r0
 8007578:	2b00      	cmp	r3, #0
 800757a:	d001      	beq.n	8007580 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800757c:	f000 fc5c 	bl	8007e38 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007580:	230f      	movs	r3, #15
 8007582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007584:	2302      	movs	r3, #2
 8007586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007588:	2300      	movs	r3, #0
 800758a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800758c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007590:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007592:	2300      	movs	r3, #0
 8007594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007596:	f107 030c 	add.w	r3, r7, #12
 800759a:	2102      	movs	r1, #2
 800759c:	4618      	mov	r0, r3
 800759e:	f7fc f8a1 	bl	80036e4 <HAL_RCC_ClockConfig>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d001      	beq.n	80075ac <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80075a8:	f000 fc46 	bl	8007e38 <Error_Handler>
  }
}
 80075ac:	bf00      	nop
 80075ae:	3750      	adds	r7, #80	; 0x50
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	40023800 	.word	0x40023800
 80075b8:	40007000 	.word	0x40007000

080075bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80075c2:	463b      	mov	r3, r7
 80075c4:	2200      	movs	r2, #0
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	605a      	str	r2, [r3, #4]
 80075ca:	609a      	str	r2, [r3, #8]
 80075cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80075ce:	4b21      	ldr	r3, [pc, #132]	; (8007654 <MX_ADC1_Init+0x98>)
 80075d0:	4a21      	ldr	r2, [pc, #132]	; (8007658 <MX_ADC1_Init+0x9c>)
 80075d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80075d4:	4b1f      	ldr	r3, [pc, #124]	; (8007654 <MX_ADC1_Init+0x98>)
 80075d6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80075da:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80075dc:	4b1d      	ldr	r3, [pc, #116]	; (8007654 <MX_ADC1_Init+0x98>)
 80075de:	2200      	movs	r2, #0
 80075e0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <MX_ADC1_Init+0x98>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80075e8:	4b1a      	ldr	r3, [pc, #104]	; (8007654 <MX_ADC1_Init+0x98>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80075ee:	4b19      	ldr	r3, [pc, #100]	; (8007654 <MX_ADC1_Init+0x98>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80075f6:	4b17      	ldr	r3, [pc, #92]	; (8007654 <MX_ADC1_Init+0x98>)
 80075f8:	2200      	movs	r2, #0
 80075fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80075fc:	4b15      	ldr	r3, [pc, #84]	; (8007654 <MX_ADC1_Init+0x98>)
 80075fe:	4a17      	ldr	r2, [pc, #92]	; (800765c <MX_ADC1_Init+0xa0>)
 8007600:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <MX_ADC1_Init+0x98>)
 8007604:	2200      	movs	r2, #0
 8007606:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007608:	4b12      	ldr	r3, [pc, #72]	; (8007654 <MX_ADC1_Init+0x98>)
 800760a:	2201      	movs	r2, #1
 800760c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800760e:	4b11      	ldr	r3, [pc, #68]	; (8007654 <MX_ADC1_Init+0x98>)
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007616:	4b0f      	ldr	r3, [pc, #60]	; (8007654 <MX_ADC1_Init+0x98>)
 8007618:	2201      	movs	r2, #1
 800761a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800761c:	480d      	ldr	r0, [pc, #52]	; (8007654 <MX_ADC1_Init+0x98>)
 800761e:	f7f9 fd31 	bl	8001084 <HAL_ADC_Init>
 8007622:	4603      	mov	r3, r0
 8007624:	2b00      	cmp	r3, #0
 8007626:	d001      	beq.n	800762c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007628:	f000 fc06 	bl	8007e38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800762c:	2302      	movs	r3, #2
 800762e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007630:	2301      	movs	r3, #1
 8007632:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007634:	2300      	movs	r3, #0
 8007636:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8007638:	463b      	mov	r3, r7
 800763a:	4619      	mov	r1, r3
 800763c:	4805      	ldr	r0, [pc, #20]	; (8007654 <MX_ADC1_Init+0x98>)
 800763e:	f7fa f81b 	bl	8001678 <HAL_ADC_ConfigChannel>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8007648:	f000 fbf6 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}
 8007654:	20000264 	.word	0x20000264
 8007658:	40012000 	.word	0x40012000
 800765c:	0f000001 	.word	0x0f000001

08007660 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007666:	463b      	mov	r3, r7
 8007668:	2200      	movs	r2, #0
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	605a      	str	r2, [r3, #4]
 800766e:	609a      	str	r2, [r3, #8]
 8007670:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8007672:	4b21      	ldr	r3, [pc, #132]	; (80076f8 <MX_ADC2_Init+0x98>)
 8007674:	4a21      	ldr	r2, [pc, #132]	; (80076fc <MX_ADC2_Init+0x9c>)
 8007676:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007678:	4b1f      	ldr	r3, [pc, #124]	; (80076f8 <MX_ADC2_Init+0x98>)
 800767a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800767e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007680:	4b1d      	ldr	r3, [pc, #116]	; (80076f8 <MX_ADC2_Init+0x98>)
 8007682:	2200      	movs	r2, #0
 8007684:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8007686:	4b1c      	ldr	r3, [pc, #112]	; (80076f8 <MX_ADC2_Init+0x98>)
 8007688:	2200      	movs	r2, #0
 800768a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800768c:	4b1a      	ldr	r3, [pc, #104]	; (80076f8 <MX_ADC2_Init+0x98>)
 800768e:	2201      	movs	r2, #1
 8007690:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007692:	4b19      	ldr	r3, [pc, #100]	; (80076f8 <MX_ADC2_Init+0x98>)
 8007694:	2200      	movs	r2, #0
 8007696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800769a:	4b17      	ldr	r3, [pc, #92]	; (80076f8 <MX_ADC2_Init+0x98>)
 800769c:	2200      	movs	r2, #0
 800769e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80076a0:	4b15      	ldr	r3, [pc, #84]	; (80076f8 <MX_ADC2_Init+0x98>)
 80076a2:	4a17      	ldr	r2, [pc, #92]	; (8007700 <MX_ADC2_Init+0xa0>)
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80076a6:	4b14      	ldr	r3, [pc, #80]	; (80076f8 <MX_ADC2_Init+0x98>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80076ac:	4b12      	ldr	r3, [pc, #72]	; (80076f8 <MX_ADC2_Init+0x98>)
 80076ae:	2201      	movs	r2, #1
 80076b0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80076b2:	4b11      	ldr	r3, [pc, #68]	; (80076f8 <MX_ADC2_Init+0x98>)
 80076b4:	2200      	movs	r2, #0
 80076b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80076ba:	4b0f      	ldr	r3, [pc, #60]	; (80076f8 <MX_ADC2_Init+0x98>)
 80076bc:	2201      	movs	r2, #1
 80076be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80076c0:	480d      	ldr	r0, [pc, #52]	; (80076f8 <MX_ADC2_Init+0x98>)
 80076c2:	f7f9 fcdf 	bl	8001084 <HAL_ADC_Init>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d001      	beq.n	80076d0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80076cc:	f000 fbb4 	bl	8007e38 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80076d0:	2308      	movs	r3, #8
 80076d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80076d4:	2301      	movs	r3, #1
 80076d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80076d8:	2300      	movs	r3, #0
 80076da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80076dc:	463b      	mov	r3, r7
 80076de:	4619      	mov	r1, r3
 80076e0:	4805      	ldr	r0, [pc, #20]	; (80076f8 <MX_ADC2_Init+0x98>)
 80076e2:	f7f9 ffc9 	bl	8001678 <HAL_ADC_ConfigChannel>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80076ec:	f000 fba4 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	20000174 	.word	0x20000174
 80076fc:	40012100 	.word	0x40012100
 8007700:	0f000001 	.word	0x0f000001

08007704 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007708:	4b16      	ldr	r3, [pc, #88]	; (8007764 <MX_CAN1_Init+0x60>)
 800770a:	4a17      	ldr	r2, [pc, #92]	; (8007768 <MX_CAN1_Init+0x64>)
 800770c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800770e:	4b15      	ldr	r3, [pc, #84]	; (8007764 <MX_CAN1_Init+0x60>)
 8007710:	2210      	movs	r2, #16
 8007712:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007714:	4b13      	ldr	r3, [pc, #76]	; (8007764 <MX_CAN1_Init+0x60>)
 8007716:	2200      	movs	r2, #0
 8007718:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800771a:	4b12      	ldr	r3, [pc, #72]	; (8007764 <MX_CAN1_Init+0x60>)
 800771c:	2200      	movs	r2, #0
 800771e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007720:	4b10      	ldr	r3, [pc, #64]	; (8007764 <MX_CAN1_Init+0x60>)
 8007722:	2200      	movs	r2, #0
 8007724:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007726:	4b0f      	ldr	r3, [pc, #60]	; (8007764 <MX_CAN1_Init+0x60>)
 8007728:	2200      	movs	r2, #0
 800772a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800772c:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <MX_CAN1_Init+0x60>)
 800772e:	2200      	movs	r2, #0
 8007730:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007732:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <MX_CAN1_Init+0x60>)
 8007734:	2200      	movs	r2, #0
 8007736:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007738:	4b0a      	ldr	r3, [pc, #40]	; (8007764 <MX_CAN1_Init+0x60>)
 800773a:	2200      	movs	r2, #0
 800773c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <MX_CAN1_Init+0x60>)
 8007740:	2200      	movs	r2, #0
 8007742:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007744:	4b07      	ldr	r3, [pc, #28]	; (8007764 <MX_CAN1_Init+0x60>)
 8007746:	2200      	movs	r2, #0
 8007748:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800774a:	4b06      	ldr	r3, [pc, #24]	; (8007764 <MX_CAN1_Init+0x60>)
 800774c:	2200      	movs	r2, #0
 800774e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007750:	4804      	ldr	r0, [pc, #16]	; (8007764 <MX_CAN1_Init+0x60>)
 8007752:	f7fa f9b9 	bl	8001ac8 <HAL_CAN_Init>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800775c:	f000 fb6c 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007760:	bf00      	nop
 8007762:	bd80      	pop	{r7, pc}
 8007764:	20000370 	.word	0x20000370
 8007768:	40006400 	.word	0x40006400

0800776c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007770:	4b12      	ldr	r3, [pc, #72]	; (80077bc <MX_I2C1_Init+0x50>)
 8007772:	4a13      	ldr	r2, [pc, #76]	; (80077c0 <MX_I2C1_Init+0x54>)
 8007774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007776:	4b11      	ldr	r3, [pc, #68]	; (80077bc <MX_I2C1_Init+0x50>)
 8007778:	4a12      	ldr	r2, [pc, #72]	; (80077c4 <MX_I2C1_Init+0x58>)
 800777a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800777c:	4b0f      	ldr	r3, [pc, #60]	; (80077bc <MX_I2C1_Init+0x50>)
 800777e:	2200      	movs	r2, #0
 8007780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007782:	4b0e      	ldr	r3, [pc, #56]	; (80077bc <MX_I2C1_Init+0x50>)
 8007784:	2200      	movs	r2, #0
 8007786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007788:	4b0c      	ldr	r3, [pc, #48]	; (80077bc <MX_I2C1_Init+0x50>)
 800778a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800778e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <MX_I2C1_Init+0x50>)
 8007792:	2200      	movs	r2, #0
 8007794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <MX_I2C1_Init+0x50>)
 8007798:	2200      	movs	r2, #0
 800779a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800779c:	4b07      	ldr	r3, [pc, #28]	; (80077bc <MX_I2C1_Init+0x50>)
 800779e:	2200      	movs	r2, #0
 80077a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077a2:	4b06      	ldr	r3, [pc, #24]	; (80077bc <MX_I2C1_Init+0x50>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80077a8:	4804      	ldr	r0, [pc, #16]	; (80077bc <MX_I2C1_Init+0x50>)
 80077aa:	f7fa fda3 	bl	80022f4 <HAL_I2C_Init>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80077b4:	f000 fb40 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80077b8:	bf00      	nop
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	200001bc 	.word	0x200001bc
 80077c0:	40005400 	.word	0x40005400
 80077c4:	000186a0 	.word	0x000186a0

080077c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80077cc:	4b12      	ldr	r3, [pc, #72]	; (8007818 <MX_I2C2_Init+0x50>)
 80077ce:	4a13      	ldr	r2, [pc, #76]	; (800781c <MX_I2C2_Init+0x54>)
 80077d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <MX_I2C2_Init+0x50>)
 80077d4:	4a12      	ldr	r2, [pc, #72]	; (8007820 <MX_I2C2_Init+0x58>)
 80077d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80077d8:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <MX_I2C2_Init+0x50>)
 80077da:	2200      	movs	r2, #0
 80077dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <MX_I2C2_Init+0x50>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <MX_I2C2_Init+0x50>)
 80077e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80077ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80077ec:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <MX_I2C2_Init+0x50>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80077f2:	4b09      	ldr	r3, [pc, #36]	; (8007818 <MX_I2C2_Init+0x50>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <MX_I2C2_Init+0x50>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80077fe:	4b06      	ldr	r3, [pc, #24]	; (8007818 <MX_I2C2_Init+0x50>)
 8007800:	2200      	movs	r2, #0
 8007802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007804:	4804      	ldr	r0, [pc, #16]	; (8007818 <MX_I2C2_Init+0x50>)
 8007806:	f7fa fd75 	bl	80022f4 <HAL_I2C_Init>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8007810:	f000 fb12 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007814:	bf00      	nop
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000210 	.word	0x20000210
 800781c:	40005800 	.word	0x40005800
 8007820:	000186a0 	.word	0x000186a0

08007824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007828:	4b18      	ldr	r3, [pc, #96]	; (800788c <MX_SPI2_Init+0x68>)
 800782a:	4a19      	ldr	r2, [pc, #100]	; (8007890 <MX_SPI2_Init+0x6c>)
 800782c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800782e:	4b17      	ldr	r3, [pc, #92]	; (800788c <MX_SPI2_Init+0x68>)
 8007830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8007836:	4b15      	ldr	r3, [pc, #84]	; (800788c <MX_SPI2_Init+0x68>)
 8007838:	2200      	movs	r2, #0
 800783a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800783c:	4b13      	ldr	r3, [pc, #76]	; (800788c <MX_SPI2_Init+0x68>)
 800783e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007842:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007844:	4b11      	ldr	r3, [pc, #68]	; (800788c <MX_SPI2_Init+0x68>)
 8007846:	2200      	movs	r2, #0
 8007848:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800784a:	4b10      	ldr	r3, [pc, #64]	; (800788c <MX_SPI2_Init+0x68>)
 800784c:	2201      	movs	r2, #1
 800784e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007850:	4b0e      	ldr	r3, [pc, #56]	; (800788c <MX_SPI2_Init+0x68>)
 8007852:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007856:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007858:	4b0c      	ldr	r3, [pc, #48]	; (800788c <MX_SPI2_Init+0x68>)
 800785a:	2218      	movs	r2, #24
 800785c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800785e:	4b0b      	ldr	r3, [pc, #44]	; (800788c <MX_SPI2_Init+0x68>)
 8007860:	2200      	movs	r2, #0
 8007862:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007864:	4b09      	ldr	r3, [pc, #36]	; (800788c <MX_SPI2_Init+0x68>)
 8007866:	2200      	movs	r2, #0
 8007868:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800786a:	4b08      	ldr	r3, [pc, #32]	; (800788c <MX_SPI2_Init+0x68>)
 800786c:	2200      	movs	r2, #0
 800786e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007870:	4b06      	ldr	r3, [pc, #24]	; (800788c <MX_SPI2_Init+0x68>)
 8007872:	220a      	movs	r2, #10
 8007874:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007876:	4805      	ldr	r0, [pc, #20]	; (800788c <MX_SPI2_Init+0x68>)
 8007878:	f7fc f926 	bl	8003ac8 <HAL_SPI_Init>
 800787c:	4603      	mov	r3, r0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8007882:	f000 fad9 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007886:	bf00      	nop
 8007888:	bd80      	pop	{r7, pc}
 800788a:	bf00      	nop
 800788c:	2000009c 	.word	0x2000009c
 8007890:	40003800 	.word	0x40003800

08007894 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b096      	sub	sp, #88	; 0x58
 8007898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800789a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800789e:	2200      	movs	r2, #0
 80078a0:	601a      	str	r2, [r3, #0]
 80078a2:	605a      	str	r2, [r3, #4]
 80078a4:	609a      	str	r2, [r3, #8]
 80078a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078a8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80078ac:	2200      	movs	r2, #0
 80078ae:	601a      	str	r2, [r3, #0]
 80078b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80078b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078b6:	2200      	movs	r2, #0
 80078b8:	601a      	str	r2, [r3, #0]
 80078ba:	605a      	str	r2, [r3, #4]
 80078bc:	609a      	str	r2, [r3, #8]
 80078be:	60da      	str	r2, [r3, #12]
 80078c0:	611a      	str	r2, [r3, #16]
 80078c2:	615a      	str	r2, [r3, #20]
 80078c4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80078c6:	1d3b      	adds	r3, r7, #4
 80078c8:	2220      	movs	r2, #32
 80078ca:	2100      	movs	r1, #0
 80078cc:	4618      	mov	r0, r3
 80078ce:	f000 ffcf 	bl	8008870 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80078d2:	4b4a      	ldr	r3, [pc, #296]	; (80079fc <MX_TIM1_Init+0x168>)
 80078d4:	4a4a      	ldr	r2, [pc, #296]	; (8007a00 <MX_TIM1_Init+0x16c>)
 80078d6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80078d8:	4b48      	ldr	r3, [pc, #288]	; (80079fc <MX_TIM1_Init+0x168>)
 80078da:	2201      	movs	r2, #1
 80078dc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078de:	4b47      	ldr	r3, [pc, #284]	; (80079fc <MX_TIM1_Init+0x168>)
 80078e0:	2200      	movs	r2, #0
 80078e2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048;
 80078e4:	4b45      	ldr	r3, [pc, #276]	; (80079fc <MX_TIM1_Init+0x168>)
 80078e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078ea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078ec:	4b43      	ldr	r3, [pc, #268]	; (80079fc <MX_TIM1_Init+0x168>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80078f2:	4b42      	ldr	r3, [pc, #264]	; (80079fc <MX_TIM1_Init+0x168>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078f8:	4b40      	ldr	r3, [pc, #256]	; (80079fc <MX_TIM1_Init+0x168>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80078fe:	483f      	ldr	r0, [pc, #252]	; (80079fc <MX_TIM1_Init+0x168>)
 8007900:	f7fc ff56 	bl	80047b0 <HAL_TIM_Base_Init>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d001      	beq.n	800790e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800790a:	f000 fa95 	bl	8007e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800790e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007912:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007914:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007918:	4619      	mov	r1, r3
 800791a:	4838      	ldr	r0, [pc, #224]	; (80079fc <MX_TIM1_Init+0x168>)
 800791c:	f7fd fbae 	bl	800507c <HAL_TIM_ConfigClockSource>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d001      	beq.n	800792a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8007926:	f000 fa87 	bl	8007e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800792a:	4834      	ldr	r0, [pc, #208]	; (80079fc <MX_TIM1_Init+0x168>)
 800792c:	f7fc ffaa 	bl	8004884 <HAL_TIM_PWM_Init>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8007936:	f000 fa7f 	bl	8007e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800793a:	2300      	movs	r3, #0
 800793c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800793e:	2300      	movs	r3, #0
 8007940:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007942:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007946:	4619      	mov	r1, r3
 8007948:	482c      	ldr	r0, [pc, #176]	; (80079fc <MX_TIM1_Init+0x168>)
 800794a:	f7fe f8e5 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007954:	f000 fa70 	bl	8007e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007958:	2360      	movs	r3, #96	; 0x60
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800795c:	2300      	movs	r3, #0
 800795e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007960:	2300      	movs	r3, #0
 8007962:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007964:	2300      	movs	r3, #0
 8007966:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007968:	2300      	movs	r3, #0
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800796c:	2300      	movs	r3, #0
 800796e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007970:	2300      	movs	r3, #0
 8007972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007978:	2200      	movs	r2, #0
 800797a:	4619      	mov	r1, r3
 800797c:	481f      	ldr	r0, [pc, #124]	; (80079fc <MX_TIM1_Init+0x168>)
 800797e:	f7fd fab7 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 8007982:	4603      	mov	r3, r0
 8007984:	2b00      	cmp	r3, #0
 8007986:	d001      	beq.n	800798c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8007988:	f000 fa56 	bl	8007e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800798c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007990:	2204      	movs	r2, #4
 8007992:	4619      	mov	r1, r3
 8007994:	4819      	ldr	r0, [pc, #100]	; (80079fc <MX_TIM1_Init+0x168>)
 8007996:	f7fd faab 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80079a0:	f000 fa4a 	bl	8007e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80079a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a8:	2208      	movs	r2, #8
 80079aa:	4619      	mov	r1, r3
 80079ac:	4813      	ldr	r0, [pc, #76]	; (80079fc <MX_TIM1_Init+0x168>)
 80079ae:	f7fd fa9f 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80079b8:	f000 fa3e 	bl	8007e38 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80079bc:	2300      	movs	r3, #0
 80079be:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80079cc:	2300      	movs	r3, #0
 80079ce:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80079d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80079d4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80079d6:	2300      	movs	r3, #0
 80079d8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80079da:	1d3b      	adds	r3, r7, #4
 80079dc:	4619      	mov	r1, r3
 80079de:	4807      	ldr	r0, [pc, #28]	; (80079fc <MX_TIM1_Init+0x168>)
 80079e0:	f7fe f916 	bl	8005c10 <HAL_TIMEx_ConfigBreakDeadTime>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80079ea:	f000 fa25 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80079ee:	4803      	ldr	r0, [pc, #12]	; (80079fc <MX_TIM1_Init+0x168>)
 80079f0:	f000 fd2e 	bl	8008450 <HAL_TIM_MspPostInit>

}
 80079f4:	bf00      	nop
 80079f6:	3758      	adds	r7, #88	; 0x58
 80079f8:	46bd      	mov	sp, r7
 80079fa:	bd80      	pop	{r7, pc}
 80079fc:	200002f0 	.word	0x200002f0
 8007a00:	40010000 	.word	0x40010000

08007a04 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b08c      	sub	sp, #48	; 0x30
 8007a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007a0a:	f107 030c 	add.w	r3, r7, #12
 8007a0e:	2224      	movs	r2, #36	; 0x24
 8007a10:	2100      	movs	r1, #0
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 ff2c 	bl	8008870 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a18:	1d3b      	adds	r3, r7, #4
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	601a      	str	r2, [r3, #0]
 8007a1e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007a20:	4b22      	ldr	r3, [pc, #136]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a22:	4a23      	ldr	r2, [pc, #140]	; (8007ab0 <MX_TIM8_Init+0xac>)
 8007a24:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007a26:	4b21      	ldr	r3, [pc, #132]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a28:	2200      	movs	r2, #0
 8007a2a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a2c:	4b1f      	ldr	r3, [pc, #124]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a2e:	2200      	movs	r2, #0
 8007a30:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8007a32:	4b1e      	ldr	r3, [pc, #120]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007a38:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007a3a:	4b1c      	ldr	r3, [pc, #112]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007a40:	4b1a      	ldr	r3, [pc, #104]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a46:	4b19      	ldr	r3, [pc, #100]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007a50:	2300      	movs	r3, #0
 8007a52:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007a54:	2301      	movs	r3, #1
 8007a56:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007a60:	2300      	movs	r3, #0
 8007a62:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007a64:	2301      	movs	r3, #1
 8007a66:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8007a70:	f107 030c 	add.w	r3, r7, #12
 8007a74:	4619      	mov	r1, r3
 8007a76:	480d      	ldr	r0, [pc, #52]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a78:	f7fc ffad 	bl	80049d6 <HAL_TIM_Encoder_Init>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007a82:	f000 f9d9 	bl	8007e38 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a86:	2300      	movs	r3, #0
 8007a88:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007a8e:	1d3b      	adds	r3, r7, #4
 8007a90:	4619      	mov	r1, r3
 8007a92:	4806      	ldr	r0, [pc, #24]	; (8007aac <MX_TIM8_Init+0xa8>)
 8007a94:	f7fe f840 	bl	8005b18 <HAL_TIMEx_MasterConfigSynchronization>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8007a9e:	f000 f9cb 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007aa2:	bf00      	nop
 8007aa4:	3730      	adds	r7, #48	; 0x30
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	200000f4 	.word	0x200000f4
 8007ab0:	40010400 	.word	0x40010400

08007ab4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08c      	sub	sp, #48	; 0x30
 8007ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007aba:	f107 0320 	add.w	r3, r7, #32
 8007abe:	2200      	movs	r2, #0
 8007ac0:	601a      	str	r2, [r3, #0]
 8007ac2:	605a      	str	r2, [r3, #4]
 8007ac4:	609a      	str	r2, [r3, #8]
 8007ac6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007ac8:	1d3b      	adds	r3, r7, #4
 8007aca:	2200      	movs	r2, #0
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	605a      	str	r2, [r3, #4]
 8007ad0:	609a      	str	r2, [r3, #8]
 8007ad2:	60da      	str	r2, [r3, #12]
 8007ad4:	611a      	str	r2, [r3, #16]
 8007ad6:	615a      	str	r2, [r3, #20]
 8007ad8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8007ada:	4b2d      	ldr	r3, [pc, #180]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007adc:	4a2d      	ldr	r2, [pc, #180]	; (8007b94 <MX_TIM9_Init+0xe0>)
 8007ade:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2;
 8007ae0:	4b2b      	ldr	r3, [pc, #172]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007ae2:	2202      	movs	r2, #2
 8007ae4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ae6:	4b2a      	ldr	r3, [pc, #168]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096;
 8007aec:	4b28      	ldr	r3, [pc, #160]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007aee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007af2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007af4:	4b26      	ldr	r3, [pc, #152]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007afa:	4b25      	ldr	r3, [pc, #148]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8007b00:	4823      	ldr	r0, [pc, #140]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007b02:	f7fc fe55 	bl	80047b0 <HAL_TIM_Base_Init>
 8007b06:	4603      	mov	r3, r0
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d001      	beq.n	8007b10 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8007b0c:	f000 f994 	bl	8007e38 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007b10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007b14:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8007b16:	f107 0320 	add.w	r3, r7, #32
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	481c      	ldr	r0, [pc, #112]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007b1e:	f7fd faad 	bl	800507c <HAL_TIM_ConfigClockSource>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8007b28:	f000 f986 	bl	8007e38 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8007b2c:	4818      	ldr	r0, [pc, #96]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007b2e:	f7fc fea9 	bl	8004884 <HAL_TIM_PWM_Init>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8007b38:	f000 f97e 	bl	8007e38 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007b3c:	2360      	movs	r3, #96	; 0x60
 8007b3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8007b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007b44:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007b4e:	1d3b      	adds	r3, r7, #4
 8007b50:	2200      	movs	r2, #0
 8007b52:	4619      	mov	r1, r3
 8007b54:	480e      	ldr	r0, [pc, #56]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007b56:	f7fd f9cb 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d001      	beq.n	8007b64 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8007b60:	f000 f96a 	bl	8007e38 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8007b64:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007b6a:	1d3b      	adds	r3, r7, #4
 8007b6c:	2204      	movs	r2, #4
 8007b6e:	4619      	mov	r1, r3
 8007b70:	4807      	ldr	r0, [pc, #28]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007b72:	f7fd f9bd 	bl	8004ef0 <HAL_TIM_PWM_ConfigChannel>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 8007b7c:	f000 f95c 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8007b80:	4803      	ldr	r0, [pc, #12]	; (8007b90 <MX_TIM9_Init+0xdc>)
 8007b82:	f000 fc65 	bl	8008450 <HAL_TIM_MspPostInit>

}
 8007b86:	bf00      	nop
 8007b88:	3730      	adds	r7, #48	; 0x30
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000330 	.word	0x20000330
 8007b94:	40014000 	.word	0x40014000

08007b98 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	601a      	str	r2, [r3, #0]
 8007ba4:	605a      	str	r2, [r3, #4]
 8007ba6:	609a      	str	r2, [r3, #8]
 8007ba8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8007baa:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007bac:	4a1c      	ldr	r2, [pc, #112]	; (8007c20 <MX_TIM13_Init+0x88>)
 8007bae:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8007bb0:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007bb6:	4b19      	ldr	r3, [pc, #100]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8007bbc:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007bc2:	4b16      	ldr	r3, [pc, #88]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bc8:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007bca:	2200      	movs	r2, #0
 8007bcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007bce:	4813      	ldr	r0, [pc, #76]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007bd0:	f7fc fdee 	bl	80047b0 <HAL_TIM_Base_Init>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 8007bda:	f000 f92d 	bl	8007e38 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8007bde:	480f      	ldr	r0, [pc, #60]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007be0:	f7fc fec4 	bl	800496c <HAL_TIM_IC_Init>
 8007be4:	4603      	mov	r3, r0
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d001      	beq.n	8007bee <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 8007bea:	f000 f925 	bl	8007e38 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007bfe:	463b      	mov	r3, r7
 8007c00:	2200      	movs	r2, #0
 8007c02:	4619      	mov	r1, r3
 8007c04:	4805      	ldr	r0, [pc, #20]	; (8007c1c <MX_TIM13_Init+0x84>)
 8007c06:	f7fd f8d7 	bl	8004db8 <HAL_TIM_IC_ConfigChannel>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d001      	beq.n	8007c14 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 8007c10:	f000 f912 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8007c14:	bf00      	nop
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	200002ac 	.word	0x200002ac
 8007c20:	40001c00 	.word	0x40001c00

08007c24 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007c28:	4b11      	ldr	r3, [pc, #68]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c2a:	4a12      	ldr	r2, [pc, #72]	; (8007c74 <MX_USART3_UART_Init+0x50>)
 8007c2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007c2e:	4b10      	ldr	r3, [pc, #64]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007c34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007c36:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007c3c:	4b0c      	ldr	r3, [pc, #48]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007c42:	4b0b      	ldr	r3, [pc, #44]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007c48:	4b09      	ldr	r3, [pc, #36]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c4a:	220c      	movs	r2, #12
 8007c4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007c4e:	4b08      	ldr	r3, [pc, #32]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007c54:	4b06      	ldr	r3, [pc, #24]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c56:	2200      	movs	r2, #0
 8007c58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007c5a:	4805      	ldr	r0, [pc, #20]	; (8007c70 <MX_USART3_UART_Init+0x4c>)
 8007c5c:	f7fe f863 	bl	8005d26 <HAL_UART_Init>
 8007c60:	4603      	mov	r3, r0
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d001      	beq.n	8007c6a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007c66:	f000 f8e7 	bl	8007e38 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007c6a:	bf00      	nop
 8007c6c:	bd80      	pop	{r7, pc}
 8007c6e:	bf00      	nop
 8007c70:	20000134 	.word	0x20000134
 8007c74:	40004800 	.word	0x40004800

08007c78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b08c      	sub	sp, #48	; 0x30
 8007c7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c7e:	f107 031c 	add.w	r3, r7, #28
 8007c82:	2200      	movs	r2, #0
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	605a      	str	r2, [r3, #4]
 8007c88:	609a      	str	r2, [r3, #8]
 8007c8a:	60da      	str	r2, [r3, #12]
 8007c8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c8e:	2300      	movs	r3, #0
 8007c90:	61bb      	str	r3, [r7, #24]
 8007c92:	4b57      	ldr	r3, [pc, #348]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c96:	4a56      	ldr	r2, [pc, #344]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007c98:	f043 0310 	orr.w	r3, r3, #16
 8007c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c9e:	4b54      	ldr	r3, [pc, #336]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	61bb      	str	r3, [r7, #24]
 8007ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007caa:	2300      	movs	r3, #0
 8007cac:	617b      	str	r3, [r7, #20]
 8007cae:	4b50      	ldr	r3, [pc, #320]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	4a4f      	ldr	r2, [pc, #316]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8007cba:	4b4d      	ldr	r3, [pc, #308]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc2:	617b      	str	r3, [r7, #20]
 8007cc4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	4b49      	ldr	r3, [pc, #292]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cce:	4a48      	ldr	r2, [pc, #288]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007cd0:	f043 0304 	orr.w	r3, r3, #4
 8007cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8007cd6:	4b46      	ldr	r3, [pc, #280]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	613b      	str	r3, [r7, #16]
 8007ce0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	4b42      	ldr	r3, [pc, #264]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cea:	4a41      	ldr	r2, [pc, #260]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007cec:	f043 0301 	orr.w	r3, r3, #1
 8007cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cf2:	4b3f      	ldr	r3, [pc, #252]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	60fb      	str	r3, [r7, #12]
 8007cfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cfe:	2300      	movs	r3, #0
 8007d00:	60bb      	str	r3, [r7, #8]
 8007d02:	4b3b      	ldr	r3, [pc, #236]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d06:	4a3a      	ldr	r2, [pc, #232]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007d08:	f043 0302 	orr.w	r3, r3, #2
 8007d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d0e:	4b38      	ldr	r3, [pc, #224]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	f003 0302 	and.w	r3, r3, #2
 8007d16:	60bb      	str	r3, [r7, #8]
 8007d18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	607b      	str	r3, [r7, #4]
 8007d1e:	4b34      	ldr	r3, [pc, #208]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d22:	4a33      	ldr	r2, [pc, #204]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007d24:	f043 0308 	orr.w	r3, r3, #8
 8007d28:	6313      	str	r3, [r2, #48]	; 0x30
 8007d2a:	4b31      	ldr	r3, [pc, #196]	; (8007df0 <MX_GPIO_Init+0x178>)
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	607b      	str	r3, [r7, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 8007d36:	2200      	movs	r2, #0
 8007d38:	f24c 0118 	movw	r1, #49176	; 0xc018
 8007d3c:	482d      	ldr	r0, [pc, #180]	; (8007df4 <MX_GPIO_Init+0x17c>)
 8007d3e:	f7fa fa8d 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin|nSCS_Pin, GPIO_PIN_RESET);
 8007d42:	2200      	movs	r2, #0
 8007d44:	f24b 0180 	movw	r1, #45184	; 0xb080
 8007d48:	482b      	ldr	r0, [pc, #172]	; (8007df8 <MX_GPIO_Init+0x180>)
 8007d4a:	f7fa fa87 	bl	800225c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 8007d4e:	f24c 0318 	movw	r3, #49176	; 0xc018
 8007d52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d54:	2301      	movs	r3, #1
 8007d56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d60:	f107 031c 	add.w	r3, r7, #28
 8007d64:	4619      	mov	r1, r3
 8007d66:	4823      	ldr	r0, [pc, #140]	; (8007df4 <MX_GPIO_Init+0x17c>)
 8007d68:	f7fa f8de 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin nSCS_Pin */
  GPIO_InitStruct.Pin = debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin|nSCS_Pin;
 8007d6c:	f24b 0380 	movw	r3, #45184	; 0xb080
 8007d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d72:	2301      	movs	r3, #1
 8007d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d76:	2300      	movs	r3, #0
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007d7e:	f107 031c 	add.w	r3, r7, #28
 8007d82:	4619      	mov	r1, r3
 8007d84:	481c      	ldr	r0, [pc, #112]	; (8007df8 <MX_GPIO_Init+0x180>)
 8007d86:	f7fa f8cf 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 8007d8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007d90:	2300      	movs	r3, #0
 8007d92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d94:	2300      	movs	r3, #0
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 8007d98:	f107 031c 	add.w	r3, r7, #28
 8007d9c:	4619      	mov	r1, r3
 8007d9e:	4816      	ldr	r0, [pc, #88]	; (8007df8 <MX_GPIO_Init+0x180>)
 8007da0:	f7fa f8c2 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 8007da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007da8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007daa:	4b14      	ldr	r3, [pc, #80]	; (8007dfc <MX_GPIO_Init+0x184>)
 8007dac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dae:	2300      	movs	r3, #0
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 8007db2:	f107 031c 	add.w	r3, r7, #28
 8007db6:	4619      	mov	r1, r3
 8007db8:	4811      	ldr	r0, [pc, #68]	; (8007e00 <MX_GPIO_Init+0x188>)
 8007dba:	f7fa f8b5 	bl	8001f28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 8007dbe:	2370      	movs	r3, #112	; 0x70
 8007dc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007dca:	f107 031c 	add.w	r3, r7, #28
 8007dce:	4619      	mov	r1, r3
 8007dd0:	4809      	ldr	r0, [pc, #36]	; (8007df8 <MX_GPIO_Init+0x180>)
 8007dd2:	f7fa f8a9 	bl	8001f28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	2100      	movs	r1, #0
 8007dda:	2017      	movs	r0, #23
 8007ddc:	f7fa f84b 	bl	8001e76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007de0:	2017      	movs	r0, #23
 8007de2:	f7fa f864 	bl	8001eae <HAL_NVIC_EnableIRQ>

}
 8007de6:	bf00      	nop
 8007de8:	3730      	adds	r7, #48	; 0x30
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40023800 	.word	0x40023800
 8007df4:	40021000 	.word	0x40021000
 8007df8:	40020c00 	.word	0x40020c00
 8007dfc:	10110000 	.word	0x10110000
 8007e00:	40020800 	.word	0x40020800

08007e04 <HAL_GPIO_EXTI_Callback>:
//	else{
//		__NOP();
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 8007e0e:	88fb      	ldrh	r3, [r7, #6]
 8007e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e14:	d107      	bne.n	8007e26 <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8007e16:	2108      	movs	r1, #8
 8007e18:	4805      	ldr	r0, [pc, #20]	; (8007e30 <HAL_GPIO_EXTI_Callback+0x2c>)
 8007e1a:	f7fa fa38 	bl	800228e <HAL_GPIO_TogglePin>
		TIM8->CNT = 0;     //TODO: there is acually some stepping happening under the I pulse so we have to distinguish between step from right and step from left
 8007e1e:	4b05      	ldr	r3, [pc, #20]	; (8007e34 <HAL_GPIO_EXTI_Callback+0x30>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		__NOP();
	}
}
 8007e24:	e000      	b.n	8007e28 <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 8007e26:	bf00      	nop
}
 8007e28:	bf00      	nop
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	40021000 	.word	0x40021000
 8007e34:	40010400 	.word	0x40010400

08007e38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007e3c:	bf00      	nop
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e44:	4770      	bx	lr
	...

08007e48 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e4e:	2300      	movs	r3, #0
 8007e50:	607b      	str	r3, [r7, #4]
 8007e52:	4b10      	ldr	r3, [pc, #64]	; (8007e94 <HAL_MspInit+0x4c>)
 8007e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e56:	4a0f      	ldr	r2, [pc, #60]	; (8007e94 <HAL_MspInit+0x4c>)
 8007e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8007e5e:	4b0d      	ldr	r3, [pc, #52]	; (8007e94 <HAL_MspInit+0x4c>)
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e66:	607b      	str	r3, [r7, #4]
 8007e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	603b      	str	r3, [r7, #0]
 8007e6e:	4b09      	ldr	r3, [pc, #36]	; (8007e94 <HAL_MspInit+0x4c>)
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	4a08      	ldr	r2, [pc, #32]	; (8007e94 <HAL_MspInit+0x4c>)
 8007e74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e78:	6413      	str	r3, [r2, #64]	; 0x40
 8007e7a:	4b06      	ldr	r3, [pc, #24]	; (8007e94 <HAL_MspInit+0x4c>)
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr
 8007e92:	bf00      	nop
 8007e94:	40023800 	.word	0x40023800

08007e98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08e      	sub	sp, #56	; 0x38
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	609a      	str	r2, [r3, #8]
 8007eac:	60da      	str	r2, [r3, #12]
 8007eae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a50      	ldr	r2, [pc, #320]	; (8007ff8 <HAL_ADC_MspInit+0x160>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d14a      	bne.n	8007f50 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	623b      	str	r3, [r7, #32]
 8007ebe:	4b4f      	ldr	r3, [pc, #316]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec2:	4a4e      	ldr	r2, [pc, #312]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007ec4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8007eca:	4b4c      	ldr	r3, [pc, #304]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ed2:	623b      	str	r3, [r7, #32]
 8007ed4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	61fb      	str	r3, [r7, #28]
 8007eda:	4b48      	ldr	r3, [pc, #288]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	4a47      	ldr	r2, [pc, #284]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007ee0:	f043 0304 	orr.w	r3, r3, #4
 8007ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ee6:	4b45      	ldr	r3, [pc, #276]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	f003 0304 	and.w	r3, r3, #4
 8007eee:	61fb      	str	r3, [r7, #28]
 8007ef0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	4b41      	ldr	r3, [pc, #260]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efa:	4a40      	ldr	r2, [pc, #256]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007efc:	f043 0301 	orr.w	r3, r3, #1
 8007f00:	6313      	str	r3, [r2, #48]	; 0x30
 8007f02:	4b3e      	ldr	r3, [pc, #248]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f06:	f003 0301 	and.w	r3, r3, #1
 8007f0a:	61bb      	str	r3, [r7, #24]
 8007f0c:	69bb      	ldr	r3, [r7, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = ASENSE_Pin|BSENSE_Pin|CSENSE_Pin;
 8007f0e:	230e      	movs	r3, #14
 8007f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f12:	2303      	movs	r3, #3
 8007f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f16:	2300      	movs	r3, #0
 8007f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f1e:	4619      	mov	r1, r3
 8007f20:	4837      	ldr	r0, [pc, #220]	; (8008000 <HAL_ADC_MspInit+0x168>)
 8007f22:	f7fa f801 	bl	8001f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_Pin|M0_SO1_Pin|M0_SO2_Pin|TEMP_Pin 
 8007f26:	233e      	movs	r3, #62	; 0x3e
 8007f28:	627b      	str	r3, [r7, #36]	; 0x24
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007f2a:	2303      	movs	r3, #3
 8007f2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f36:	4619      	mov	r1, r3
 8007f38:	4832      	ldr	r0, [pc, #200]	; (8008004 <HAL_ADC_MspInit+0x16c>)
 8007f3a:	f7f9 fff5 	bl	8001f28 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007f3e:	2200      	movs	r2, #0
 8007f40:	2100      	movs	r1, #0
 8007f42:	2012      	movs	r0, #18
 8007f44:	f7f9 ff97 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007f48:	2012      	movs	r0, #18
 8007f4a:	f7f9 ffb0 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007f4e:	e04e      	b.n	8007fee <HAL_ADC_MspInit+0x156>
  else if(hadc->Instance==ADC2)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a2c      	ldr	r2, [pc, #176]	; (8008008 <HAL_ADC_MspInit+0x170>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d149      	bne.n	8007fee <HAL_ADC_MspInit+0x156>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	617b      	str	r3, [r7, #20]
 8007f5e:	4b27      	ldr	r3, [pc, #156]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f62:	4a26      	ldr	r2, [pc, #152]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f68:	6453      	str	r3, [r2, #68]	; 0x44
 8007f6a:	4b24      	ldr	r3, [pc, #144]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f72:	617b      	str	r3, [r7, #20]
 8007f74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f76:	2300      	movs	r3, #0
 8007f78:	613b      	str	r3, [r7, #16]
 8007f7a:	4b20      	ldr	r3, [pc, #128]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f7e:	4a1f      	ldr	r2, [pc, #124]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f80:	f043 0304 	orr.w	r3, r3, #4
 8007f84:	6313      	str	r3, [r2, #48]	; 0x30
 8007f86:	4b1d      	ldr	r3, [pc, #116]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8a:	f003 0304 	and.w	r3, r3, #4
 8007f8e:	613b      	str	r3, [r7, #16]
 8007f90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
 8007f96:	4b19      	ldr	r3, [pc, #100]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	4a18      	ldr	r2, [pc, #96]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007f9c:	f043 0302 	orr.w	r3, r3, #2
 8007fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8007fa2:	4b16      	ldr	r3, [pc, #88]	; (8007ffc <HAL_ADC_MspInit+0x164>)
 8007fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fa6:	f003 0302 	and.w	r3, r3, #2
 8007faa:	60fb      	str	r3, [r7, #12]
 8007fac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STRAIN0_Pin|STRAIN1_Pin;
 8007fae:	2330      	movs	r3, #48	; 0x30
 8007fb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fb2:	2303      	movs	r3, #3
 8007fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fbe:	4619      	mov	r1, r3
 8007fc0:	480f      	ldr	r0, [pc, #60]	; (8008000 <HAL_ADC_MspInit+0x168>)
 8007fc2:	f7f9 ffb1 	bl	8001f28 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_S_Pin;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_S_GPIO_Port, &GPIO_InitStruct);
 8007fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	480c      	ldr	r0, [pc, #48]	; (800800c <HAL_ADC_MspInit+0x174>)
 8007fda:	f7f9 ffa5 	bl	8001f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007fde:	2200      	movs	r2, #0
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	2012      	movs	r0, #18
 8007fe4:	f7f9 ff47 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007fe8:	2012      	movs	r0, #18
 8007fea:	f7f9 ff60 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 8007fee:	bf00      	nop
 8007ff0:	3738      	adds	r7, #56	; 0x38
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}
 8007ff6:	bf00      	nop
 8007ff8:	40012000 	.word	0x40012000
 8007ffc:	40023800 	.word	0x40023800
 8008000:	40020800 	.word	0x40020800
 8008004:	40020000 	.word	0x40020000
 8008008:	40012100 	.word	0x40012100
 800800c:	40020400 	.word	0x40020400

08008010 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b08a      	sub	sp, #40	; 0x28
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008018:	f107 0314 	add.w	r3, r7, #20
 800801c:	2200      	movs	r2, #0
 800801e:	601a      	str	r2, [r3, #0]
 8008020:	605a      	str	r2, [r3, #4]
 8008022:	609a      	str	r2, [r3, #8]
 8008024:	60da      	str	r2, [r3, #12]
 8008026:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a19      	ldr	r2, [pc, #100]	; (8008094 <HAL_CAN_MspInit+0x84>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d12b      	bne.n	800808a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008032:	2300      	movs	r3, #0
 8008034:	613b      	str	r3, [r7, #16]
 8008036:	4b18      	ldr	r3, [pc, #96]	; (8008098 <HAL_CAN_MspInit+0x88>)
 8008038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800803a:	4a17      	ldr	r2, [pc, #92]	; (8008098 <HAL_CAN_MspInit+0x88>)
 800803c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008040:	6413      	str	r3, [r2, #64]	; 0x40
 8008042:	4b15      	ldr	r3, [pc, #84]	; (8008098 <HAL_CAN_MspInit+0x88>)
 8008044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800804a:	613b      	str	r3, [r7, #16]
 800804c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
 8008052:	4b11      	ldr	r3, [pc, #68]	; (8008098 <HAL_CAN_MspInit+0x88>)
 8008054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008056:	4a10      	ldr	r2, [pc, #64]	; (8008098 <HAL_CAN_MspInit+0x88>)
 8008058:	f043 0308 	orr.w	r3, r3, #8
 800805c:	6313      	str	r3, [r2, #48]	; 0x30
 800805e:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <HAL_CAN_MspInit+0x88>)
 8008060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008062:	f003 0308 	and.w	r3, r3, #8
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800806a:	2303      	movs	r3, #3
 800806c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800806e:	2302      	movs	r3, #2
 8008070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008072:	2300      	movs	r3, #0
 8008074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008076:	2303      	movs	r3, #3
 8008078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800807a:	2309      	movs	r3, #9
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800807e:	f107 0314 	add.w	r3, r7, #20
 8008082:	4619      	mov	r1, r3
 8008084:	4805      	ldr	r0, [pc, #20]	; (800809c <HAL_CAN_MspInit+0x8c>)
 8008086:	f7f9 ff4f 	bl	8001f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800808a:	bf00      	nop
 800808c:	3728      	adds	r7, #40	; 0x28
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	40006400 	.word	0x40006400
 8008098:	40023800 	.word	0x40023800
 800809c:	40020c00 	.word	0x40020c00

080080a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b08c      	sub	sp, #48	; 0x30
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080a8:	f107 031c 	add.w	r3, r7, #28
 80080ac:	2200      	movs	r2, #0
 80080ae:	601a      	str	r2, [r3, #0]
 80080b0:	605a      	str	r2, [r3, #4]
 80080b2:	609a      	str	r2, [r3, #8]
 80080b4:	60da      	str	r2, [r3, #12]
 80080b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a32      	ldr	r2, [pc, #200]	; (8008188 <HAL_I2C_MspInit+0xe8>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d12c      	bne.n	800811c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080c2:	2300      	movs	r3, #0
 80080c4:	61bb      	str	r3, [r7, #24]
 80080c6:	4b31      	ldr	r3, [pc, #196]	; (800818c <HAL_I2C_MspInit+0xec>)
 80080c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ca:	4a30      	ldr	r2, [pc, #192]	; (800818c <HAL_I2C_MspInit+0xec>)
 80080cc:	f043 0302 	orr.w	r3, r3, #2
 80080d0:	6313      	str	r3, [r2, #48]	; 0x30
 80080d2:	4b2e      	ldr	r3, [pc, #184]	; (800818c <HAL_I2C_MspInit+0xec>)
 80080d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d6:	f003 0302 	and.w	r3, r3, #2
 80080da:	61bb      	str	r3, [r7, #24]
 80080dc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80080de:	23c0      	movs	r3, #192	; 0xc0
 80080e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80080e2:	2312      	movs	r3, #18
 80080e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80080e6:	2301      	movs	r3, #1
 80080e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080ea:	2303      	movs	r3, #3
 80080ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80080ee:	2304      	movs	r3, #4
 80080f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80080f2:	f107 031c 	add.w	r3, r7, #28
 80080f6:	4619      	mov	r1, r3
 80080f8:	4825      	ldr	r0, [pc, #148]	; (8008190 <HAL_I2C_MspInit+0xf0>)
 80080fa:	f7f9 ff15 	bl	8001f28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80080fe:	2300      	movs	r3, #0
 8008100:	617b      	str	r3, [r7, #20]
 8008102:	4b22      	ldr	r3, [pc, #136]	; (800818c <HAL_I2C_MspInit+0xec>)
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	4a21      	ldr	r2, [pc, #132]	; (800818c <HAL_I2C_MspInit+0xec>)
 8008108:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800810c:	6413      	str	r3, [r2, #64]	; 0x40
 800810e:	4b1f      	ldr	r3, [pc, #124]	; (800818c <HAL_I2C_MspInit+0xec>)
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008116:	617b      	str	r3, [r7, #20]
 8008118:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800811a:	e031      	b.n	8008180 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a1c      	ldr	r2, [pc, #112]	; (8008194 <HAL_I2C_MspInit+0xf4>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d12c      	bne.n	8008180 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008126:	2300      	movs	r3, #0
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	4b18      	ldr	r3, [pc, #96]	; (800818c <HAL_I2C_MspInit+0xec>)
 800812c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800812e:	4a17      	ldr	r2, [pc, #92]	; (800818c <HAL_I2C_MspInit+0xec>)
 8008130:	f043 0302 	orr.w	r3, r3, #2
 8008134:	6313      	str	r3, [r2, #48]	; 0x30
 8008136:	4b15      	ldr	r3, [pc, #84]	; (800818c <HAL_I2C_MspInit+0xec>)
 8008138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800813a:	f003 0302 	and.w	r3, r3, #2
 800813e:	613b      	str	r3, [r7, #16]
 8008140:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008142:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008148:	2312      	movs	r3, #18
 800814a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800814c:	2301      	movs	r3, #1
 800814e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008150:	2303      	movs	r3, #3
 8008152:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008154:	2304      	movs	r3, #4
 8008156:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008158:	f107 031c 	add.w	r3, r7, #28
 800815c:	4619      	mov	r1, r3
 800815e:	480c      	ldr	r0, [pc, #48]	; (8008190 <HAL_I2C_MspInit+0xf0>)
 8008160:	f7f9 fee2 	bl	8001f28 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	4b08      	ldr	r3, [pc, #32]	; (800818c <HAL_I2C_MspInit+0xec>)
 800816a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816c:	4a07      	ldr	r2, [pc, #28]	; (800818c <HAL_I2C_MspInit+0xec>)
 800816e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008172:	6413      	str	r3, [r2, #64]	; 0x40
 8008174:	4b05      	ldr	r3, [pc, #20]	; (800818c <HAL_I2C_MspInit+0xec>)
 8008176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008178:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	68fb      	ldr	r3, [r7, #12]
}
 8008180:	bf00      	nop
 8008182:	3730      	adds	r7, #48	; 0x30
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	40005400 	.word	0x40005400
 800818c:	40023800 	.word	0x40023800
 8008190:	40020400 	.word	0x40020400
 8008194:	40005800 	.word	0x40005800

08008198 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b08a      	sub	sp, #40	; 0x28
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081a0:	f107 0314 	add.w	r3, r7, #20
 80081a4:	2200      	movs	r2, #0
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	605a      	str	r2, [r3, #4]
 80081aa:	609a      	str	r2, [r3, #8]
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a1d      	ldr	r2, [pc, #116]	; (800822c <HAL_SPI_MspInit+0x94>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d134      	bne.n	8008224 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80081ba:	2300      	movs	r3, #0
 80081bc:	613b      	str	r3, [r7, #16]
 80081be:	4b1c      	ldr	r3, [pc, #112]	; (8008230 <HAL_SPI_MspInit+0x98>)
 80081c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c2:	4a1b      	ldr	r2, [pc, #108]	; (8008230 <HAL_SPI_MspInit+0x98>)
 80081c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081c8:	6413      	str	r3, [r2, #64]	; 0x40
 80081ca:	4b19      	ldr	r3, [pc, #100]	; (8008230 <HAL_SPI_MspInit+0x98>)
 80081cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081d6:	2300      	movs	r3, #0
 80081d8:	60fb      	str	r3, [r7, #12]
 80081da:	4b15      	ldr	r3, [pc, #84]	; (8008230 <HAL_SPI_MspInit+0x98>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081de:	4a14      	ldr	r2, [pc, #80]	; (8008230 <HAL_SPI_MspInit+0x98>)
 80081e0:	f043 0302 	orr.w	r3, r3, #2
 80081e4:	6313      	str	r3, [r2, #48]	; 0x30
 80081e6:	4b12      	ldr	r3, [pc, #72]	; (8008230 <HAL_SPI_MspInit+0x98>)
 80081e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80081f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80081f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081f8:	2302      	movs	r3, #2
 80081fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081fc:	2300      	movs	r3, #0
 80081fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008200:	2303      	movs	r3, #3
 8008202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008204:	2305      	movs	r3, #5
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008208:	f107 0314 	add.w	r3, r7, #20
 800820c:	4619      	mov	r1, r3
 800820e:	4809      	ldr	r0, [pc, #36]	; (8008234 <HAL_SPI_MspInit+0x9c>)
 8008210:	f7f9 fe8a 	bl	8001f28 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8008214:	2200      	movs	r2, #0
 8008216:	2100      	movs	r1, #0
 8008218:	2024      	movs	r0, #36	; 0x24
 800821a:	f7f9 fe2c 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800821e:	2024      	movs	r0, #36	; 0x24
 8008220:	f7f9 fe45 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8008224:	bf00      	nop
 8008226:	3728      	adds	r7, #40	; 0x28
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40003800 	.word	0x40003800
 8008230:	40023800 	.word	0x40023800
 8008234:	40020400 	.word	0x40020400

08008238 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08c      	sub	sp, #48	; 0x30
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008240:	f107 031c 	add.w	r3, r7, #28
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	605a      	str	r2, [r3, #4]
 800824a:	609a      	str	r2, [r3, #8]
 800824c:	60da      	str	r2, [r3, #12]
 800824e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a45      	ldr	r2, [pc, #276]	; (800836c <HAL_TIM_Base_MspInit+0x134>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d12e      	bne.n	80082b8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800825a:	2300      	movs	r3, #0
 800825c:	61bb      	str	r3, [r7, #24]
 800825e:	4b44      	ldr	r3, [pc, #272]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 8008260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008262:	4a43      	ldr	r2, [pc, #268]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 8008264:	f043 0301 	orr.w	r3, r3, #1
 8008268:	6453      	str	r3, [r2, #68]	; 0x44
 800826a:	4b41      	ldr	r3, [pc, #260]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 800826c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800826e:	f003 0301 	and.w	r3, r3, #1
 8008272:	61bb      	str	r3, [r7, #24]
 8008274:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8008276:	2200      	movs	r2, #0
 8008278:	2100      	movs	r1, #0
 800827a:	2018      	movs	r0, #24
 800827c:	f7f9 fdfb 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008280:	2018      	movs	r0, #24
 8008282:	f7f9 fe14 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8008286:	2200      	movs	r2, #0
 8008288:	2100      	movs	r1, #0
 800828a:	2019      	movs	r0, #25
 800828c:	f7f9 fdf3 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008290:	2019      	movs	r0, #25
 8008292:	f7f9 fe0c 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8008296:	2200      	movs	r2, #0
 8008298:	2100      	movs	r1, #0
 800829a:	201a      	movs	r0, #26
 800829c:	f7f9 fdeb 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80082a0:	201a      	movs	r0, #26
 80082a2:	f7f9 fe04 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80082a6:	2200      	movs	r2, #0
 80082a8:	2100      	movs	r1, #0
 80082aa:	201b      	movs	r0, #27
 80082ac:	f7f9 fde3 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80082b0:	201b      	movs	r0, #27
 80082b2:	f7f9 fdfc 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 80082b6:	e054      	b.n	8008362 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM9)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a2d      	ldr	r2, [pc, #180]	; (8008374 <HAL_TIM_Base_MspInit+0x13c>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d116      	bne.n	80082f0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80082c2:	2300      	movs	r3, #0
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	4b2a      	ldr	r3, [pc, #168]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 80082c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082ca:	4a29      	ldr	r2, [pc, #164]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 80082cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082d0:	6453      	str	r3, [r2, #68]	; 0x44
 80082d2:	4b27      	ldr	r3, [pc, #156]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80082de:	2200      	movs	r2, #0
 80082e0:	2100      	movs	r1, #0
 80082e2:	2018      	movs	r0, #24
 80082e4:	f7f9 fdc7 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80082e8:	2018      	movs	r0, #24
 80082ea:	f7f9 fde0 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 80082ee:	e038      	b.n	8008362 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM13)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a20      	ldr	r2, [pc, #128]	; (8008378 <HAL_TIM_Base_MspInit+0x140>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d133      	bne.n	8008362 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80082fa:	2300      	movs	r3, #0
 80082fc:	613b      	str	r3, [r7, #16]
 80082fe:	4b1c      	ldr	r3, [pc, #112]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008302:	4a1b      	ldr	r2, [pc, #108]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 8008304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008308:	6413      	str	r3, [r2, #64]	; 0x40
 800830a:	4b19      	ldr	r3, [pc, #100]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 800830c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800830e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008312:	613b      	str	r3, [r7, #16]
 8008314:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008316:	2300      	movs	r3, #0
 8008318:	60fb      	str	r3, [r7, #12]
 800831a:	4b15      	ldr	r3, [pc, #84]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 800831c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800831e:	4a14      	ldr	r2, [pc, #80]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 8008320:	f043 0301 	orr.w	r3, r3, #1
 8008324:	6313      	str	r3, [r2, #48]	; 0x30
 8008326:	4b12      	ldr	r3, [pc, #72]	; (8008370 <HAL_TIM_Base_MspInit+0x138>)
 8008328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832a:	f003 0301 	and.w	r3, r3, #1
 800832e:	60fb      	str	r3, [r7, #12]
 8008330:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8008332:	2340      	movs	r3, #64	; 0x40
 8008334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008336:	2302      	movs	r3, #2
 8008338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800833a:	2300      	movs	r3, #0
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800833e:	2300      	movs	r3, #0
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8008342:	2309      	movs	r3, #9
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008346:	f107 031c 	add.w	r3, r7, #28
 800834a:	4619      	mov	r1, r3
 800834c:	480b      	ldr	r0, [pc, #44]	; (800837c <HAL_TIM_Base_MspInit+0x144>)
 800834e:	f7f9 fdeb 	bl	8001f28 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8008352:	2200      	movs	r2, #0
 8008354:	2100      	movs	r1, #0
 8008356:	202c      	movs	r0, #44	; 0x2c
 8008358:	f7f9 fd8d 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800835c:	202c      	movs	r0, #44	; 0x2c
 800835e:	f7f9 fda6 	bl	8001eae <HAL_NVIC_EnableIRQ>
}
 8008362:	bf00      	nop
 8008364:	3730      	adds	r7, #48	; 0x30
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	40010000 	.word	0x40010000
 8008370:	40023800 	.word	0x40023800
 8008374:	40014000 	.word	0x40014000
 8008378:	40001c00 	.word	0x40001c00
 800837c:	40020000 	.word	0x40020000

08008380 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008388:	f107 0314 	add.w	r3, r7, #20
 800838c:	2200      	movs	r2, #0
 800838e:	601a      	str	r2, [r3, #0]
 8008390:	605a      	str	r2, [r3, #4]
 8008392:	609a      	str	r2, [r3, #8]
 8008394:	60da      	str	r2, [r3, #12]
 8008396:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a29      	ldr	r2, [pc, #164]	; (8008444 <HAL_TIM_Encoder_MspInit+0xc4>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d14b      	bne.n	800843a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 80083a2:	2300      	movs	r3, #0
 80083a4:	613b      	str	r3, [r7, #16]
 80083a6:	4b28      	ldr	r3, [pc, #160]	; (8008448 <HAL_TIM_Encoder_MspInit+0xc8>)
 80083a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083aa:	4a27      	ldr	r2, [pc, #156]	; (8008448 <HAL_TIM_Encoder_MspInit+0xc8>)
 80083ac:	f043 0302 	orr.w	r3, r3, #2
 80083b0:	6453      	str	r3, [r2, #68]	; 0x44
 80083b2:	4b25      	ldr	r3, [pc, #148]	; (8008448 <HAL_TIM_Encoder_MspInit+0xc8>)
 80083b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	613b      	str	r3, [r7, #16]
 80083bc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80083be:	2300      	movs	r3, #0
 80083c0:	60fb      	str	r3, [r7, #12]
 80083c2:	4b21      	ldr	r3, [pc, #132]	; (8008448 <HAL_TIM_Encoder_MspInit+0xc8>)
 80083c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083c6:	4a20      	ldr	r2, [pc, #128]	; (8008448 <HAL_TIM_Encoder_MspInit+0xc8>)
 80083c8:	f043 0304 	orr.w	r3, r3, #4
 80083cc:	6313      	str	r3, [r2, #48]	; 0x30
 80083ce:	4b1e      	ldr	r3, [pc, #120]	; (8008448 <HAL_TIM_Encoder_MspInit+0xc8>)
 80083d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d2:	f003 0304 	and.w	r3, r3, #4
 80083d6:	60fb      	str	r3, [r7, #12]
 80083d8:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80083da:	23c0      	movs	r3, #192	; 0xc0
 80083dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083de:	2302      	movs	r3, #2
 80083e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083e6:	2300      	movs	r3, #0
 80083e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80083ea:	2303      	movs	r3, #3
 80083ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083ee:	f107 0314 	add.w	r3, r7, #20
 80083f2:	4619      	mov	r1, r3
 80083f4:	4815      	ldr	r0, [pc, #84]	; (800844c <HAL_TIM_Encoder_MspInit+0xcc>)
 80083f6:	f7f9 fd97 	bl	8001f28 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80083fa:	2200      	movs	r2, #0
 80083fc:	2100      	movs	r1, #0
 80083fe:	202b      	movs	r0, #43	; 0x2b
 8008400:	f7f9 fd39 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8008404:	202b      	movs	r0, #43	; 0x2b
 8008406:	f7f9 fd52 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800840a:	2200      	movs	r2, #0
 800840c:	2100      	movs	r1, #0
 800840e:	202c      	movs	r0, #44	; 0x2c
 8008410:	f7f9 fd31 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8008414:	202c      	movs	r0, #44	; 0x2c
 8008416:	f7f9 fd4a 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800841a:	2200      	movs	r2, #0
 800841c:	2100      	movs	r1, #0
 800841e:	202d      	movs	r0, #45	; 0x2d
 8008420:	f7f9 fd29 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8008424:	202d      	movs	r0, #45	; 0x2d
 8008426:	f7f9 fd42 	bl	8001eae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800842a:	2200      	movs	r2, #0
 800842c:	2100      	movs	r1, #0
 800842e:	202e      	movs	r0, #46	; 0x2e
 8008430:	f7f9 fd21 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8008434:	202e      	movs	r0, #46	; 0x2e
 8008436:	f7f9 fd3a 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800843a:	bf00      	nop
 800843c:	3728      	adds	r7, #40	; 0x28
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
 8008442:	bf00      	nop
 8008444:	40010400 	.word	0x40010400
 8008448:	40023800 	.word	0x40023800
 800844c:	40020800 	.word	0x40020800

08008450 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008458:	f107 0314 	add.w	r3, r7, #20
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	605a      	str	r2, [r3, #4]
 8008462:	609a      	str	r2, [r3, #8]
 8008464:	60da      	str	r2, [r3, #12]
 8008466:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a24      	ldr	r2, [pc, #144]	; (8008500 <HAL_TIM_MspPostInit+0xb0>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d11f      	bne.n	80084b2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008472:	2300      	movs	r3, #0
 8008474:	613b      	str	r3, [r7, #16]
 8008476:	4b23      	ldr	r3, [pc, #140]	; (8008504 <HAL_TIM_MspPostInit+0xb4>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	4a22      	ldr	r2, [pc, #136]	; (8008504 <HAL_TIM_MspPostInit+0xb4>)
 800847c:	f043 0310 	orr.w	r3, r3, #16
 8008480:	6313      	str	r3, [r2, #48]	; 0x30
 8008482:	4b20      	ldr	r3, [pc, #128]	; (8008504 <HAL_TIM_MspPostInit+0xb4>)
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	f003 0310 	and.w	r3, r3, #16
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800848e:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8008492:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008494:	2302      	movs	r3, #2
 8008496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008498:	2300      	movs	r3, #0
 800849a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800849c:	2300      	movs	r3, #0
 800849e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80084a0:	2301      	movs	r3, #1
 80084a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084a4:	f107 0314 	add.w	r3, r7, #20
 80084a8:	4619      	mov	r1, r3
 80084aa:	4817      	ldr	r0, [pc, #92]	; (8008508 <HAL_TIM_MspPostInit+0xb8>)
 80084ac:	f7f9 fd3c 	bl	8001f28 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80084b0:	e022      	b.n	80084f8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a15      	ldr	r2, [pc, #84]	; (800850c <HAL_TIM_MspPostInit+0xbc>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d11d      	bne.n	80084f8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80084bc:	2300      	movs	r3, #0
 80084be:	60fb      	str	r3, [r7, #12]
 80084c0:	4b10      	ldr	r3, [pc, #64]	; (8008504 <HAL_TIM_MspPostInit+0xb4>)
 80084c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c4:	4a0f      	ldr	r2, [pc, #60]	; (8008504 <HAL_TIM_MspPostInit+0xb4>)
 80084c6:	f043 0310 	orr.w	r3, r3, #16
 80084ca:	6313      	str	r3, [r2, #48]	; 0x30
 80084cc:	4b0d      	ldr	r3, [pc, #52]	; (8008504 <HAL_TIM_MspPostInit+0xb4>)
 80084ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d0:	f003 0310 	and.w	r3, r3, #16
 80084d4:	60fb      	str	r3, [r7, #12]
 80084d6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80084d8:	2360      	movs	r3, #96	; 0x60
 80084da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084dc:	2302      	movs	r3, #2
 80084de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084e4:	2300      	movs	r3, #0
 80084e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80084e8:	2303      	movs	r3, #3
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084ec:	f107 0314 	add.w	r3, r7, #20
 80084f0:	4619      	mov	r1, r3
 80084f2:	4805      	ldr	r0, [pc, #20]	; (8008508 <HAL_TIM_MspPostInit+0xb8>)
 80084f4:	f7f9 fd18 	bl	8001f28 <HAL_GPIO_Init>
}
 80084f8:	bf00      	nop
 80084fa:	3728      	adds	r7, #40	; 0x28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}
 8008500:	40010000 	.word	0x40010000
 8008504:	40023800 	.word	0x40023800
 8008508:	40021000 	.word	0x40021000
 800850c:	40014000 	.word	0x40014000

08008510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b08a      	sub	sp, #40	; 0x28
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008518:	f107 0314 	add.w	r3, r7, #20
 800851c:	2200      	movs	r2, #0
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	605a      	str	r2, [r3, #4]
 8008522:	609a      	str	r2, [r3, #8]
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1d      	ldr	r2, [pc, #116]	; (80085a4 <HAL_UART_MspInit+0x94>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d134      	bne.n	800859c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8008532:	2300      	movs	r3, #0
 8008534:	613b      	str	r3, [r7, #16]
 8008536:	4b1c      	ldr	r3, [pc, #112]	; (80085a8 <HAL_UART_MspInit+0x98>)
 8008538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853a:	4a1b      	ldr	r2, [pc, #108]	; (80085a8 <HAL_UART_MspInit+0x98>)
 800853c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008540:	6413      	str	r3, [r2, #64]	; 0x40
 8008542:	4b19      	ldr	r3, [pc, #100]	; (80085a8 <HAL_UART_MspInit+0x98>)
 8008544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008546:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800854a:	613b      	str	r3, [r7, #16]
 800854c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
 8008552:	4b15      	ldr	r3, [pc, #84]	; (80085a8 <HAL_UART_MspInit+0x98>)
 8008554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008556:	4a14      	ldr	r2, [pc, #80]	; (80085a8 <HAL_UART_MspInit+0x98>)
 8008558:	f043 0308 	orr.w	r3, r3, #8
 800855c:	6313      	str	r3, [r2, #48]	; 0x30
 800855e:	4b12      	ldr	r3, [pc, #72]	; (80085a8 <HAL_UART_MspInit+0x98>)
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	f003 0308 	and.w	r3, r3, #8
 8008566:	60fb      	str	r3, [r7, #12]
 8008568:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800856a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800856e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008570:	2302      	movs	r3, #2
 8008572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008574:	2301      	movs	r3, #1
 8008576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008578:	2303      	movs	r3, #3
 800857a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800857c:	2307      	movs	r3, #7
 800857e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008580:	f107 0314 	add.w	r3, r7, #20
 8008584:	4619      	mov	r1, r3
 8008586:	4809      	ldr	r0, [pc, #36]	; (80085ac <HAL_UART_MspInit+0x9c>)
 8008588:	f7f9 fcce 	bl	8001f28 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800858c:	2200      	movs	r2, #0
 800858e:	2100      	movs	r1, #0
 8008590:	2027      	movs	r0, #39	; 0x27
 8008592:	f7f9 fc70 	bl	8001e76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008596:	2027      	movs	r0, #39	; 0x27
 8008598:	f7f9 fc89 	bl	8001eae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800859c:	bf00      	nop
 800859e:	3728      	adds	r7, #40	; 0x28
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	40004800 	.word	0x40004800
 80085a8:	40023800 	.word	0x40023800
 80085ac:	40020c00 	.word	0x40020c00

080085b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80085b0:	b480      	push	{r7}
 80085b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80085b4:	bf00      	nop
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80085be:	b480      	push	{r7}
 80085c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80085c2:	e7fe      	b.n	80085c2 <HardFault_Handler+0x4>

080085c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80085c4:	b480      	push	{r7}
 80085c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80085c8:	e7fe      	b.n	80085c8 <MemManage_Handler+0x4>

080085ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80085ca:	b480      	push	{r7}
 80085cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80085ce:	e7fe      	b.n	80085ce <BusFault_Handler+0x4>

080085d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80085d0:	b480      	push	{r7}
 80085d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80085d4:	e7fe      	b.n	80085d4 <UsageFault_Handler+0x4>

080085d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80085d6:	b480      	push	{r7}
 80085d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80085da:	bf00      	nop
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80085e4:	b480      	push	{r7}
 80085e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80085e8:	bf00      	nop
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr

080085f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80085f2:	b480      	push	{r7}
 80085f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80085f6:	bf00      	nop
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008604:	f7f8 fcfc 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008608:	bf00      	nop
 800860a:	bd80      	pop	{r7, pc}

0800860c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800860c:	b580      	push	{r7, lr}
 800860e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8008610:	4803      	ldr	r0, [pc, #12]	; (8008620 <ADC_IRQHandler+0x14>)
 8008612:	f7f8 fec5 	bl	80013a0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8008616:	4803      	ldr	r0, [pc, #12]	; (8008624 <ADC_IRQHandler+0x18>)
 8008618:	f7f8 fec2 	bl	80013a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800861c:	bf00      	nop
 800861e:	bd80      	pop	{r7, pc}
 8008620:	20000264 	.word	0x20000264
 8008624:	20000174 	.word	0x20000174

08008628 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800862c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8008630:	f7f9 fe48 	bl	80022c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8008634:	bf00      	nop
 8008636:	bd80      	pop	{r7, pc}

08008638 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800863c:	4803      	ldr	r0, [pc, #12]	; (800864c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800863e:	f7fc fab3 	bl	8004ba8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8008642:	4803      	ldr	r0, [pc, #12]	; (8008650 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8008644:	f7fc fab0 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8008648:	bf00      	nop
 800864a:	bd80      	pop	{r7, pc}
 800864c:	200002f0 	.word	0x200002f0
 8008650:	20000330 	.word	0x20000330

08008654 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008658:	4802      	ldr	r0, [pc, #8]	; (8008664 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800865a:	f7fc faa5 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800865e:	bf00      	nop
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	200002f0 	.word	0x200002f0

08008668 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800866c:	4802      	ldr	r0, [pc, #8]	; (8008678 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800866e:	f7fc fa9b 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8008672:	bf00      	nop
 8008674:	bd80      	pop	{r7, pc}
 8008676:	bf00      	nop
 8008678:	200002f0 	.word	0x200002f0

0800867c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800867c:	b580      	push	{r7, lr}
 800867e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008680:	4802      	ldr	r0, [pc, #8]	; (800868c <TIM1_CC_IRQHandler+0x10>)
 8008682:	f7fc fa91 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8008686:	bf00      	nop
 8008688:	bd80      	pop	{r7, pc}
 800868a:	bf00      	nop
 800868c:	200002f0 	.word	0x200002f0

08008690 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008694:	4802      	ldr	r0, [pc, #8]	; (80086a0 <SPI2_IRQHandler+0x10>)
 8008696:	f7fb fe5b 	bl	8004350 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800869a:	bf00      	nop
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	2000009c 	.word	0x2000009c

080086a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80086a8:	4802      	ldr	r0, [pc, #8]	; (80086b4 <USART3_IRQHandler+0x10>)
 80086aa:	f7fd fc23 	bl	8005ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80086ae:	bf00      	nop
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	20000134 	.word	0x20000134

080086b8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80086bc:	4802      	ldr	r0, [pc, #8]	; (80086c8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80086be:	f7fc fa73 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80086c2:	bf00      	nop
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	200000f4 	.word	0x200000f4

080086cc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80086d0:	4803      	ldr	r0, [pc, #12]	; (80086e0 <TIM8_UP_TIM13_IRQHandler+0x14>)
 80086d2:	f7fc fa69 	bl	8004ba8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 80086d6:	4803      	ldr	r0, [pc, #12]	; (80086e4 <TIM8_UP_TIM13_IRQHandler+0x18>)
 80086d8:	f7fc fa66 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80086dc:	bf00      	nop
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	200000f4 	.word	0x200000f4
 80086e4:	200002ac 	.word	0x200002ac

080086e8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80086ec:	4802      	ldr	r0, [pc, #8]	; (80086f8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80086ee:	f7fc fa5b 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80086f2:	bf00      	nop
 80086f4:	bd80      	pop	{r7, pc}
 80086f6:	bf00      	nop
 80086f8:	200000f4 	.word	0x200000f4

080086fc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008700:	4802      	ldr	r0, [pc, #8]	; (800870c <TIM8_CC_IRQHandler+0x10>)
 8008702:	f7fc fa51 	bl	8004ba8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 8008706:	bf00      	nop
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	200000f4 	.word	0x200000f4

08008710 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b084      	sub	sp, #16
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008718:	4b11      	ldr	r3, [pc, #68]	; (8008760 <_sbrk+0x50>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d102      	bne.n	8008726 <_sbrk+0x16>
		heap_end = &end;
 8008720:	4b0f      	ldr	r3, [pc, #60]	; (8008760 <_sbrk+0x50>)
 8008722:	4a10      	ldr	r2, [pc, #64]	; (8008764 <_sbrk+0x54>)
 8008724:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008726:	4b0e      	ldr	r3, [pc, #56]	; (8008760 <_sbrk+0x50>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800872c:	4b0c      	ldr	r3, [pc, #48]	; (8008760 <_sbrk+0x50>)
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	466a      	mov	r2, sp
 8008736:	4293      	cmp	r3, r2
 8008738:	d907      	bls.n	800874a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800873a:	f000 f855 	bl	80087e8 <__errno>
 800873e:	4602      	mov	r2, r0
 8008740:	230c      	movs	r3, #12
 8008742:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008744:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008748:	e006      	b.n	8008758 <_sbrk+0x48>
	}

	heap_end += incr;
 800874a:	4b05      	ldr	r3, [pc, #20]	; (8008760 <_sbrk+0x50>)
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	4413      	add	r3, r2
 8008752:	4a03      	ldr	r2, [pc, #12]	; (8008760 <_sbrk+0x50>)
 8008754:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008756:	68fb      	ldr	r3, [r7, #12]
}
 8008758:	4618      	mov	r0, r3
 800875a:	3710      	adds	r7, #16
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}
 8008760:	2000008c 	.word	0x2000008c
 8008764:	200003a0 	.word	0x200003a0

08008768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008768:	b480      	push	{r7}
 800876a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800876c:	4b08      	ldr	r3, [pc, #32]	; (8008790 <SystemInit+0x28>)
 800876e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008772:	4a07      	ldr	r2, [pc, #28]	; (8008790 <SystemInit+0x28>)
 8008774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800877c:	4b04      	ldr	r3, [pc, #16]	; (8008790 <SystemInit+0x28>)
 800877e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008782:	609a      	str	r2, [r3, #8]
#endif
}
 8008784:	bf00      	nop
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
 800878e:	bf00      	nop
 8008790:	e000ed00 	.word	0xe000ed00

08008794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80087cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008798:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800879a:	e003      	b.n	80087a4 <LoopCopyDataInit>

0800879c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800879c:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800879e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80087a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80087a2:	3104      	adds	r1, #4

080087a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80087a4:	480b      	ldr	r0, [pc, #44]	; (80087d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80087a6:	4b0c      	ldr	r3, [pc, #48]	; (80087d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80087a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80087aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80087ac:	d3f6      	bcc.n	800879c <CopyDataInit>
  ldr  r2, =_sbss
 80087ae:	4a0b      	ldr	r2, [pc, #44]	; (80087dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80087b0:	e002      	b.n	80087b8 <LoopFillZerobss>

080087b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80087b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80087b4:	f842 3b04 	str.w	r3, [r2], #4

080087b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80087b8:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80087ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80087bc:	d3f9      	bcc.n	80087b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80087be:	f7ff ffd3 	bl	8008768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80087c2:	f000 f817 	bl	80087f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80087c6:	f7fe f953 	bl	8006a70 <main>
  bx  lr    
 80087ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80087cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80087d0:	0800a3f8 	.word	0x0800a3f8
  ldr  r0, =_sdata
 80087d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80087d8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80087dc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80087e0:	2000039c 	.word	0x2000039c

080087e4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80087e4:	e7fe      	b.n	80087e4 <CAN1_RX0_IRQHandler>
	...

080087e8 <__errno>:
 80087e8:	4b01      	ldr	r3, [pc, #4]	; (80087f0 <__errno+0x8>)
 80087ea:	6818      	ldr	r0, [r3, #0]
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	2000000c 	.word	0x2000000c

080087f4 <__libc_init_array>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	4e0d      	ldr	r6, [pc, #52]	; (800882c <__libc_init_array+0x38>)
 80087f8:	4c0d      	ldr	r4, [pc, #52]	; (8008830 <__libc_init_array+0x3c>)
 80087fa:	1ba4      	subs	r4, r4, r6
 80087fc:	10a4      	asrs	r4, r4, #2
 80087fe:	2500      	movs	r5, #0
 8008800:	42a5      	cmp	r5, r4
 8008802:	d109      	bne.n	8008818 <__libc_init_array+0x24>
 8008804:	4e0b      	ldr	r6, [pc, #44]	; (8008834 <__libc_init_array+0x40>)
 8008806:	4c0c      	ldr	r4, [pc, #48]	; (8008838 <__libc_init_array+0x44>)
 8008808:	f001 fc9c 	bl	800a144 <_init>
 800880c:	1ba4      	subs	r4, r4, r6
 800880e:	10a4      	asrs	r4, r4, #2
 8008810:	2500      	movs	r5, #0
 8008812:	42a5      	cmp	r5, r4
 8008814:	d105      	bne.n	8008822 <__libc_init_array+0x2e>
 8008816:	bd70      	pop	{r4, r5, r6, pc}
 8008818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800881c:	4798      	blx	r3
 800881e:	3501      	adds	r5, #1
 8008820:	e7ee      	b.n	8008800 <__libc_init_array+0xc>
 8008822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008826:	4798      	blx	r3
 8008828:	3501      	adds	r5, #1
 800882a:	e7f2      	b.n	8008812 <__libc_init_array+0x1e>
 800882c:	0800a3f0 	.word	0x0800a3f0
 8008830:	0800a3f0 	.word	0x0800a3f0
 8008834:	0800a3f0 	.word	0x0800a3f0
 8008838:	0800a3f4 	.word	0x0800a3f4

0800883c <__itoa>:
 800883c:	1e93      	subs	r3, r2, #2
 800883e:	2b22      	cmp	r3, #34	; 0x22
 8008840:	b510      	push	{r4, lr}
 8008842:	460c      	mov	r4, r1
 8008844:	d904      	bls.n	8008850 <__itoa+0x14>
 8008846:	2300      	movs	r3, #0
 8008848:	700b      	strb	r3, [r1, #0]
 800884a:	461c      	mov	r4, r3
 800884c:	4620      	mov	r0, r4
 800884e:	bd10      	pop	{r4, pc}
 8008850:	2a0a      	cmp	r2, #10
 8008852:	d109      	bne.n	8008868 <__itoa+0x2c>
 8008854:	2800      	cmp	r0, #0
 8008856:	da07      	bge.n	8008868 <__itoa+0x2c>
 8008858:	232d      	movs	r3, #45	; 0x2d
 800885a:	700b      	strb	r3, [r1, #0]
 800885c:	4240      	negs	r0, r0
 800885e:	2101      	movs	r1, #1
 8008860:	4421      	add	r1, r4
 8008862:	f000 f83d 	bl	80088e0 <__utoa>
 8008866:	e7f1      	b.n	800884c <__itoa+0x10>
 8008868:	2100      	movs	r1, #0
 800886a:	e7f9      	b.n	8008860 <__itoa+0x24>

0800886c <itoa>:
 800886c:	f7ff bfe6 	b.w	800883c <__itoa>

08008870 <memset>:
 8008870:	4402      	add	r2, r0
 8008872:	4603      	mov	r3, r0
 8008874:	4293      	cmp	r3, r2
 8008876:	d100      	bne.n	800887a <memset+0xa>
 8008878:	4770      	bx	lr
 800887a:	f803 1b01 	strb.w	r1, [r3], #1
 800887e:	e7f9      	b.n	8008874 <memset+0x4>

08008880 <siprintf>:
 8008880:	b40e      	push	{r1, r2, r3}
 8008882:	b500      	push	{lr}
 8008884:	b09c      	sub	sp, #112	; 0x70
 8008886:	ab1d      	add	r3, sp, #116	; 0x74
 8008888:	9002      	str	r0, [sp, #8]
 800888a:	9006      	str	r0, [sp, #24]
 800888c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008890:	4809      	ldr	r0, [pc, #36]	; (80088b8 <siprintf+0x38>)
 8008892:	9107      	str	r1, [sp, #28]
 8008894:	9104      	str	r1, [sp, #16]
 8008896:	4909      	ldr	r1, [pc, #36]	; (80088bc <siprintf+0x3c>)
 8008898:	f853 2b04 	ldr.w	r2, [r3], #4
 800889c:	9105      	str	r1, [sp, #20]
 800889e:	6800      	ldr	r0, [r0, #0]
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	a902      	add	r1, sp, #8
 80088a4:	f000 f8b4 	bl	8008a10 <_svfiprintf_r>
 80088a8:	9b02      	ldr	r3, [sp, #8]
 80088aa:	2200      	movs	r2, #0
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	b01c      	add	sp, #112	; 0x70
 80088b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b4:	b003      	add	sp, #12
 80088b6:	4770      	bx	lr
 80088b8:	2000000c 	.word	0x2000000c
 80088bc:	ffff0208 	.word	0xffff0208

080088c0 <strcat>:
 80088c0:	b510      	push	{r4, lr}
 80088c2:	4603      	mov	r3, r0
 80088c4:	781a      	ldrb	r2, [r3, #0]
 80088c6:	1c5c      	adds	r4, r3, #1
 80088c8:	b93a      	cbnz	r2, 80088da <strcat+0x1a>
 80088ca:	3b01      	subs	r3, #1
 80088cc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088d0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80088d4:	2a00      	cmp	r2, #0
 80088d6:	d1f9      	bne.n	80088cc <strcat+0xc>
 80088d8:	bd10      	pop	{r4, pc}
 80088da:	4623      	mov	r3, r4
 80088dc:	e7f2      	b.n	80088c4 <strcat+0x4>
	...

080088e0 <__utoa>:
 80088e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80088e2:	4b1d      	ldr	r3, [pc, #116]	; (8008958 <__utoa+0x78>)
 80088e4:	b08b      	sub	sp, #44	; 0x2c
 80088e6:	4605      	mov	r5, r0
 80088e8:	460c      	mov	r4, r1
 80088ea:	466e      	mov	r6, sp
 80088ec:	f103 0c20 	add.w	ip, r3, #32
 80088f0:	6818      	ldr	r0, [r3, #0]
 80088f2:	6859      	ldr	r1, [r3, #4]
 80088f4:	4637      	mov	r7, r6
 80088f6:	c703      	stmia	r7!, {r0, r1}
 80088f8:	3308      	adds	r3, #8
 80088fa:	4563      	cmp	r3, ip
 80088fc:	463e      	mov	r6, r7
 80088fe:	d1f7      	bne.n	80088f0 <__utoa+0x10>
 8008900:	6818      	ldr	r0, [r3, #0]
 8008902:	791b      	ldrb	r3, [r3, #4]
 8008904:	713b      	strb	r3, [r7, #4]
 8008906:	1e93      	subs	r3, r2, #2
 8008908:	2b22      	cmp	r3, #34	; 0x22
 800890a:	6038      	str	r0, [r7, #0]
 800890c:	f04f 0300 	mov.w	r3, #0
 8008910:	d904      	bls.n	800891c <__utoa+0x3c>
 8008912:	7023      	strb	r3, [r4, #0]
 8008914:	461c      	mov	r4, r3
 8008916:	4620      	mov	r0, r4
 8008918:	b00b      	add	sp, #44	; 0x2c
 800891a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800891c:	1e66      	subs	r6, r4, #1
 800891e:	fbb5 f0f2 	udiv	r0, r5, r2
 8008922:	af0a      	add	r7, sp, #40	; 0x28
 8008924:	fb02 5510 	mls	r5, r2, r0, r5
 8008928:	443d      	add	r5, r7
 800892a:	1c59      	adds	r1, r3, #1
 800892c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8008930:	f806 5f01 	strb.w	r5, [r6, #1]!
 8008934:	4605      	mov	r5, r0
 8008936:	b968      	cbnz	r0, 8008954 <__utoa+0x74>
 8008938:	5460      	strb	r0, [r4, r1]
 800893a:	4423      	add	r3, r4
 800893c:	4622      	mov	r2, r4
 800893e:	1b19      	subs	r1, r3, r4
 8008940:	1b10      	subs	r0, r2, r4
 8008942:	4281      	cmp	r1, r0
 8008944:	dde7      	ble.n	8008916 <__utoa+0x36>
 8008946:	7811      	ldrb	r1, [r2, #0]
 8008948:	7818      	ldrb	r0, [r3, #0]
 800894a:	f802 0b01 	strb.w	r0, [r2], #1
 800894e:	f803 1901 	strb.w	r1, [r3], #-1
 8008952:	e7f4      	b.n	800893e <__utoa+0x5e>
 8008954:	460b      	mov	r3, r1
 8008956:	e7e2      	b.n	800891e <__utoa+0x3e>
 8008958:	0800a1b4 	.word	0x0800a1b4

0800895c <__ssputs_r>:
 800895c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008960:	688e      	ldr	r6, [r1, #8]
 8008962:	429e      	cmp	r6, r3
 8008964:	4682      	mov	sl, r0
 8008966:	460c      	mov	r4, r1
 8008968:	4690      	mov	r8, r2
 800896a:	4699      	mov	r9, r3
 800896c:	d837      	bhi.n	80089de <__ssputs_r+0x82>
 800896e:	898a      	ldrh	r2, [r1, #12]
 8008970:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008974:	d031      	beq.n	80089da <__ssputs_r+0x7e>
 8008976:	6825      	ldr	r5, [r4, #0]
 8008978:	6909      	ldr	r1, [r1, #16]
 800897a:	1a6f      	subs	r7, r5, r1
 800897c:	6965      	ldr	r5, [r4, #20]
 800897e:	2302      	movs	r3, #2
 8008980:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008984:	fb95 f5f3 	sdiv	r5, r5, r3
 8008988:	f109 0301 	add.w	r3, r9, #1
 800898c:	443b      	add	r3, r7
 800898e:	429d      	cmp	r5, r3
 8008990:	bf38      	it	cc
 8008992:	461d      	movcc	r5, r3
 8008994:	0553      	lsls	r3, r2, #21
 8008996:	d530      	bpl.n	80089fa <__ssputs_r+0x9e>
 8008998:	4629      	mov	r1, r5
 800899a:	f000 fb2b 	bl	8008ff4 <_malloc_r>
 800899e:	4606      	mov	r6, r0
 80089a0:	b950      	cbnz	r0, 80089b8 <__ssputs_r+0x5c>
 80089a2:	230c      	movs	r3, #12
 80089a4:	f8ca 3000 	str.w	r3, [sl]
 80089a8:	89a3      	ldrh	r3, [r4, #12]
 80089aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	463a      	mov	r2, r7
 80089ba:	6921      	ldr	r1, [r4, #16]
 80089bc:	f000 faa8 	bl	8008f10 <memcpy>
 80089c0:	89a3      	ldrh	r3, [r4, #12]
 80089c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80089c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	6126      	str	r6, [r4, #16]
 80089ce:	6165      	str	r5, [r4, #20]
 80089d0:	443e      	add	r6, r7
 80089d2:	1bed      	subs	r5, r5, r7
 80089d4:	6026      	str	r6, [r4, #0]
 80089d6:	60a5      	str	r5, [r4, #8]
 80089d8:	464e      	mov	r6, r9
 80089da:	454e      	cmp	r6, r9
 80089dc:	d900      	bls.n	80089e0 <__ssputs_r+0x84>
 80089de:	464e      	mov	r6, r9
 80089e0:	4632      	mov	r2, r6
 80089e2:	4641      	mov	r1, r8
 80089e4:	6820      	ldr	r0, [r4, #0]
 80089e6:	f000 fa9e 	bl	8008f26 <memmove>
 80089ea:	68a3      	ldr	r3, [r4, #8]
 80089ec:	1b9b      	subs	r3, r3, r6
 80089ee:	60a3      	str	r3, [r4, #8]
 80089f0:	6823      	ldr	r3, [r4, #0]
 80089f2:	441e      	add	r6, r3
 80089f4:	6026      	str	r6, [r4, #0]
 80089f6:	2000      	movs	r0, #0
 80089f8:	e7dc      	b.n	80089b4 <__ssputs_r+0x58>
 80089fa:	462a      	mov	r2, r5
 80089fc:	f000 fb54 	bl	80090a8 <_realloc_r>
 8008a00:	4606      	mov	r6, r0
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d1e2      	bne.n	80089cc <__ssputs_r+0x70>
 8008a06:	6921      	ldr	r1, [r4, #16]
 8008a08:	4650      	mov	r0, sl
 8008a0a:	f000 faa5 	bl	8008f58 <_free_r>
 8008a0e:	e7c8      	b.n	80089a2 <__ssputs_r+0x46>

08008a10 <_svfiprintf_r>:
 8008a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a14:	461d      	mov	r5, r3
 8008a16:	898b      	ldrh	r3, [r1, #12]
 8008a18:	061f      	lsls	r7, r3, #24
 8008a1a:	b09d      	sub	sp, #116	; 0x74
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	460c      	mov	r4, r1
 8008a20:	4616      	mov	r6, r2
 8008a22:	d50f      	bpl.n	8008a44 <_svfiprintf_r+0x34>
 8008a24:	690b      	ldr	r3, [r1, #16]
 8008a26:	b96b      	cbnz	r3, 8008a44 <_svfiprintf_r+0x34>
 8008a28:	2140      	movs	r1, #64	; 0x40
 8008a2a:	f000 fae3 	bl	8008ff4 <_malloc_r>
 8008a2e:	6020      	str	r0, [r4, #0]
 8008a30:	6120      	str	r0, [r4, #16]
 8008a32:	b928      	cbnz	r0, 8008a40 <_svfiprintf_r+0x30>
 8008a34:	230c      	movs	r3, #12
 8008a36:	f8c8 3000 	str.w	r3, [r8]
 8008a3a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a3e:	e0c8      	b.n	8008bd2 <_svfiprintf_r+0x1c2>
 8008a40:	2340      	movs	r3, #64	; 0x40
 8008a42:	6163      	str	r3, [r4, #20]
 8008a44:	2300      	movs	r3, #0
 8008a46:	9309      	str	r3, [sp, #36]	; 0x24
 8008a48:	2320      	movs	r3, #32
 8008a4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a4e:	2330      	movs	r3, #48	; 0x30
 8008a50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a54:	9503      	str	r5, [sp, #12]
 8008a56:	f04f 0b01 	mov.w	fp, #1
 8008a5a:	4637      	mov	r7, r6
 8008a5c:	463d      	mov	r5, r7
 8008a5e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008a62:	b10b      	cbz	r3, 8008a68 <_svfiprintf_r+0x58>
 8008a64:	2b25      	cmp	r3, #37	; 0x25
 8008a66:	d13e      	bne.n	8008ae6 <_svfiprintf_r+0xd6>
 8008a68:	ebb7 0a06 	subs.w	sl, r7, r6
 8008a6c:	d00b      	beq.n	8008a86 <_svfiprintf_r+0x76>
 8008a6e:	4653      	mov	r3, sl
 8008a70:	4632      	mov	r2, r6
 8008a72:	4621      	mov	r1, r4
 8008a74:	4640      	mov	r0, r8
 8008a76:	f7ff ff71 	bl	800895c <__ssputs_r>
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f000 80a4 	beq.w	8008bc8 <_svfiprintf_r+0x1b8>
 8008a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a82:	4453      	add	r3, sl
 8008a84:	9309      	str	r3, [sp, #36]	; 0x24
 8008a86:	783b      	ldrb	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	f000 809d 	beq.w	8008bc8 <_svfiprintf_r+0x1b8>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a98:	9304      	str	r3, [sp, #16]
 8008a9a:	9307      	str	r3, [sp, #28]
 8008a9c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008aa0:	931a      	str	r3, [sp, #104]	; 0x68
 8008aa2:	462f      	mov	r7, r5
 8008aa4:	2205      	movs	r2, #5
 8008aa6:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008aaa:	4850      	ldr	r0, [pc, #320]	; (8008bec <_svfiprintf_r+0x1dc>)
 8008aac:	f7f7 fb98 	bl	80001e0 <memchr>
 8008ab0:	9b04      	ldr	r3, [sp, #16]
 8008ab2:	b9d0      	cbnz	r0, 8008aea <_svfiprintf_r+0xda>
 8008ab4:	06d9      	lsls	r1, r3, #27
 8008ab6:	bf44      	itt	mi
 8008ab8:	2220      	movmi	r2, #32
 8008aba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008abe:	071a      	lsls	r2, r3, #28
 8008ac0:	bf44      	itt	mi
 8008ac2:	222b      	movmi	r2, #43	; 0x2b
 8008ac4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008ac8:	782a      	ldrb	r2, [r5, #0]
 8008aca:	2a2a      	cmp	r2, #42	; 0x2a
 8008acc:	d015      	beq.n	8008afa <_svfiprintf_r+0xea>
 8008ace:	9a07      	ldr	r2, [sp, #28]
 8008ad0:	462f      	mov	r7, r5
 8008ad2:	2000      	movs	r0, #0
 8008ad4:	250a      	movs	r5, #10
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008adc:	3b30      	subs	r3, #48	; 0x30
 8008ade:	2b09      	cmp	r3, #9
 8008ae0:	d94d      	bls.n	8008b7e <_svfiprintf_r+0x16e>
 8008ae2:	b1b8      	cbz	r0, 8008b14 <_svfiprintf_r+0x104>
 8008ae4:	e00f      	b.n	8008b06 <_svfiprintf_r+0xf6>
 8008ae6:	462f      	mov	r7, r5
 8008ae8:	e7b8      	b.n	8008a5c <_svfiprintf_r+0x4c>
 8008aea:	4a40      	ldr	r2, [pc, #256]	; (8008bec <_svfiprintf_r+0x1dc>)
 8008aec:	1a80      	subs	r0, r0, r2
 8008aee:	fa0b f000 	lsl.w	r0, fp, r0
 8008af2:	4318      	orrs	r0, r3
 8008af4:	9004      	str	r0, [sp, #16]
 8008af6:	463d      	mov	r5, r7
 8008af8:	e7d3      	b.n	8008aa2 <_svfiprintf_r+0x92>
 8008afa:	9a03      	ldr	r2, [sp, #12]
 8008afc:	1d11      	adds	r1, r2, #4
 8008afe:	6812      	ldr	r2, [r2, #0]
 8008b00:	9103      	str	r1, [sp, #12]
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	db01      	blt.n	8008b0a <_svfiprintf_r+0xfa>
 8008b06:	9207      	str	r2, [sp, #28]
 8008b08:	e004      	b.n	8008b14 <_svfiprintf_r+0x104>
 8008b0a:	4252      	negs	r2, r2
 8008b0c:	f043 0302 	orr.w	r3, r3, #2
 8008b10:	9207      	str	r2, [sp, #28]
 8008b12:	9304      	str	r3, [sp, #16]
 8008b14:	783b      	ldrb	r3, [r7, #0]
 8008b16:	2b2e      	cmp	r3, #46	; 0x2e
 8008b18:	d10c      	bne.n	8008b34 <_svfiprintf_r+0x124>
 8008b1a:	787b      	ldrb	r3, [r7, #1]
 8008b1c:	2b2a      	cmp	r3, #42	; 0x2a
 8008b1e:	d133      	bne.n	8008b88 <_svfiprintf_r+0x178>
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	1d1a      	adds	r2, r3, #4
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	9203      	str	r2, [sp, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	bfb8      	it	lt
 8008b2c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b30:	3702      	adds	r7, #2
 8008b32:	9305      	str	r3, [sp, #20]
 8008b34:	4d2e      	ldr	r5, [pc, #184]	; (8008bf0 <_svfiprintf_r+0x1e0>)
 8008b36:	7839      	ldrb	r1, [r7, #0]
 8008b38:	2203      	movs	r2, #3
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7f7 fb50 	bl	80001e0 <memchr>
 8008b40:	b138      	cbz	r0, 8008b52 <_svfiprintf_r+0x142>
 8008b42:	2340      	movs	r3, #64	; 0x40
 8008b44:	1b40      	subs	r0, r0, r5
 8008b46:	fa03 f000 	lsl.w	r0, r3, r0
 8008b4a:	9b04      	ldr	r3, [sp, #16]
 8008b4c:	4303      	orrs	r3, r0
 8008b4e:	3701      	adds	r7, #1
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	7839      	ldrb	r1, [r7, #0]
 8008b54:	4827      	ldr	r0, [pc, #156]	; (8008bf4 <_svfiprintf_r+0x1e4>)
 8008b56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b5a:	2206      	movs	r2, #6
 8008b5c:	1c7e      	adds	r6, r7, #1
 8008b5e:	f7f7 fb3f 	bl	80001e0 <memchr>
 8008b62:	2800      	cmp	r0, #0
 8008b64:	d038      	beq.n	8008bd8 <_svfiprintf_r+0x1c8>
 8008b66:	4b24      	ldr	r3, [pc, #144]	; (8008bf8 <_svfiprintf_r+0x1e8>)
 8008b68:	bb13      	cbnz	r3, 8008bb0 <_svfiprintf_r+0x1a0>
 8008b6a:	9b03      	ldr	r3, [sp, #12]
 8008b6c:	3307      	adds	r3, #7
 8008b6e:	f023 0307 	bic.w	r3, r3, #7
 8008b72:	3308      	adds	r3, #8
 8008b74:	9303      	str	r3, [sp, #12]
 8008b76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b78:	444b      	add	r3, r9
 8008b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b7c:	e76d      	b.n	8008a5a <_svfiprintf_r+0x4a>
 8008b7e:	fb05 3202 	mla	r2, r5, r2, r3
 8008b82:	2001      	movs	r0, #1
 8008b84:	460f      	mov	r7, r1
 8008b86:	e7a6      	b.n	8008ad6 <_svfiprintf_r+0xc6>
 8008b88:	2300      	movs	r3, #0
 8008b8a:	3701      	adds	r7, #1
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	250a      	movs	r5, #10
 8008b92:	4638      	mov	r0, r7
 8008b94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b98:	3a30      	subs	r2, #48	; 0x30
 8008b9a:	2a09      	cmp	r2, #9
 8008b9c:	d903      	bls.n	8008ba6 <_svfiprintf_r+0x196>
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d0c8      	beq.n	8008b34 <_svfiprintf_r+0x124>
 8008ba2:	9105      	str	r1, [sp, #20]
 8008ba4:	e7c6      	b.n	8008b34 <_svfiprintf_r+0x124>
 8008ba6:	fb05 2101 	mla	r1, r5, r1, r2
 8008baa:	2301      	movs	r3, #1
 8008bac:	4607      	mov	r7, r0
 8008bae:	e7f0      	b.n	8008b92 <_svfiprintf_r+0x182>
 8008bb0:	ab03      	add	r3, sp, #12
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	4622      	mov	r2, r4
 8008bb6:	4b11      	ldr	r3, [pc, #68]	; (8008bfc <_svfiprintf_r+0x1ec>)
 8008bb8:	a904      	add	r1, sp, #16
 8008bba:	4640      	mov	r0, r8
 8008bbc:	f3af 8000 	nop.w
 8008bc0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008bc4:	4681      	mov	r9, r0
 8008bc6:	d1d6      	bne.n	8008b76 <_svfiprintf_r+0x166>
 8008bc8:	89a3      	ldrh	r3, [r4, #12]
 8008bca:	065b      	lsls	r3, r3, #25
 8008bcc:	f53f af35 	bmi.w	8008a3a <_svfiprintf_r+0x2a>
 8008bd0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bd2:	b01d      	add	sp, #116	; 0x74
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd8:	ab03      	add	r3, sp, #12
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	4622      	mov	r2, r4
 8008bde:	4b07      	ldr	r3, [pc, #28]	; (8008bfc <_svfiprintf_r+0x1ec>)
 8008be0:	a904      	add	r1, sp, #16
 8008be2:	4640      	mov	r0, r8
 8008be4:	f000 f882 	bl	8008cec <_printf_i>
 8008be8:	e7ea      	b.n	8008bc0 <_svfiprintf_r+0x1b0>
 8008bea:	bf00      	nop
 8008bec:	0800a1d9 	.word	0x0800a1d9
 8008bf0:	0800a1df 	.word	0x0800a1df
 8008bf4:	0800a1e3 	.word	0x0800a1e3
 8008bf8:	00000000 	.word	0x00000000
 8008bfc:	0800895d 	.word	0x0800895d

08008c00 <_printf_common>:
 8008c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c04:	4691      	mov	r9, r2
 8008c06:	461f      	mov	r7, r3
 8008c08:	688a      	ldr	r2, [r1, #8]
 8008c0a:	690b      	ldr	r3, [r1, #16]
 8008c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c10:	4293      	cmp	r3, r2
 8008c12:	bfb8      	it	lt
 8008c14:	4613      	movlt	r3, r2
 8008c16:	f8c9 3000 	str.w	r3, [r9]
 8008c1a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008c1e:	4606      	mov	r6, r0
 8008c20:	460c      	mov	r4, r1
 8008c22:	b112      	cbz	r2, 8008c2a <_printf_common+0x2a>
 8008c24:	3301      	adds	r3, #1
 8008c26:	f8c9 3000 	str.w	r3, [r9]
 8008c2a:	6823      	ldr	r3, [r4, #0]
 8008c2c:	0699      	lsls	r1, r3, #26
 8008c2e:	bf42      	ittt	mi
 8008c30:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008c34:	3302      	addmi	r3, #2
 8008c36:	f8c9 3000 	strmi.w	r3, [r9]
 8008c3a:	6825      	ldr	r5, [r4, #0]
 8008c3c:	f015 0506 	ands.w	r5, r5, #6
 8008c40:	d107      	bne.n	8008c52 <_printf_common+0x52>
 8008c42:	f104 0a19 	add.w	sl, r4, #25
 8008c46:	68e3      	ldr	r3, [r4, #12]
 8008c48:	f8d9 2000 	ldr.w	r2, [r9]
 8008c4c:	1a9b      	subs	r3, r3, r2
 8008c4e:	42ab      	cmp	r3, r5
 8008c50:	dc28      	bgt.n	8008ca4 <_printf_common+0xa4>
 8008c52:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008c56:	6822      	ldr	r2, [r4, #0]
 8008c58:	3300      	adds	r3, #0
 8008c5a:	bf18      	it	ne
 8008c5c:	2301      	movne	r3, #1
 8008c5e:	0692      	lsls	r2, r2, #26
 8008c60:	d42d      	bmi.n	8008cbe <_printf_common+0xbe>
 8008c62:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008c66:	4639      	mov	r1, r7
 8008c68:	4630      	mov	r0, r6
 8008c6a:	47c0      	blx	r8
 8008c6c:	3001      	adds	r0, #1
 8008c6e:	d020      	beq.n	8008cb2 <_printf_common+0xb2>
 8008c70:	6823      	ldr	r3, [r4, #0]
 8008c72:	68e5      	ldr	r5, [r4, #12]
 8008c74:	f8d9 2000 	ldr.w	r2, [r9]
 8008c78:	f003 0306 	and.w	r3, r3, #6
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	bf08      	it	eq
 8008c80:	1aad      	subeq	r5, r5, r2
 8008c82:	68a3      	ldr	r3, [r4, #8]
 8008c84:	6922      	ldr	r2, [r4, #16]
 8008c86:	bf0c      	ite	eq
 8008c88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c8c:	2500      	movne	r5, #0
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	bfc4      	itt	gt
 8008c92:	1a9b      	subgt	r3, r3, r2
 8008c94:	18ed      	addgt	r5, r5, r3
 8008c96:	f04f 0900 	mov.w	r9, #0
 8008c9a:	341a      	adds	r4, #26
 8008c9c:	454d      	cmp	r5, r9
 8008c9e:	d11a      	bne.n	8008cd6 <_printf_common+0xd6>
 8008ca0:	2000      	movs	r0, #0
 8008ca2:	e008      	b.n	8008cb6 <_printf_common+0xb6>
 8008ca4:	2301      	movs	r3, #1
 8008ca6:	4652      	mov	r2, sl
 8008ca8:	4639      	mov	r1, r7
 8008caa:	4630      	mov	r0, r6
 8008cac:	47c0      	blx	r8
 8008cae:	3001      	adds	r0, #1
 8008cb0:	d103      	bne.n	8008cba <_printf_common+0xba>
 8008cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cba:	3501      	adds	r5, #1
 8008cbc:	e7c3      	b.n	8008c46 <_printf_common+0x46>
 8008cbe:	18e1      	adds	r1, r4, r3
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	2030      	movs	r0, #48	; 0x30
 8008cc4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008cc8:	4422      	add	r2, r4
 8008cca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008cce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008cd2:	3302      	adds	r3, #2
 8008cd4:	e7c5      	b.n	8008c62 <_printf_common+0x62>
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	4622      	mov	r2, r4
 8008cda:	4639      	mov	r1, r7
 8008cdc:	4630      	mov	r0, r6
 8008cde:	47c0      	blx	r8
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	d0e6      	beq.n	8008cb2 <_printf_common+0xb2>
 8008ce4:	f109 0901 	add.w	r9, r9, #1
 8008ce8:	e7d8      	b.n	8008c9c <_printf_common+0x9c>
	...

08008cec <_printf_i>:
 8008cec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cf0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008cf4:	460c      	mov	r4, r1
 8008cf6:	7e09      	ldrb	r1, [r1, #24]
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	296e      	cmp	r1, #110	; 0x6e
 8008cfc:	4617      	mov	r7, r2
 8008cfe:	4606      	mov	r6, r0
 8008d00:	4698      	mov	r8, r3
 8008d02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008d04:	f000 80b3 	beq.w	8008e6e <_printf_i+0x182>
 8008d08:	d822      	bhi.n	8008d50 <_printf_i+0x64>
 8008d0a:	2963      	cmp	r1, #99	; 0x63
 8008d0c:	d036      	beq.n	8008d7c <_printf_i+0x90>
 8008d0e:	d80a      	bhi.n	8008d26 <_printf_i+0x3a>
 8008d10:	2900      	cmp	r1, #0
 8008d12:	f000 80b9 	beq.w	8008e88 <_printf_i+0x19c>
 8008d16:	2958      	cmp	r1, #88	; 0x58
 8008d18:	f000 8083 	beq.w	8008e22 <_printf_i+0x136>
 8008d1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d20:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008d24:	e032      	b.n	8008d8c <_printf_i+0xa0>
 8008d26:	2964      	cmp	r1, #100	; 0x64
 8008d28:	d001      	beq.n	8008d2e <_printf_i+0x42>
 8008d2a:	2969      	cmp	r1, #105	; 0x69
 8008d2c:	d1f6      	bne.n	8008d1c <_printf_i+0x30>
 8008d2e:	6820      	ldr	r0, [r4, #0]
 8008d30:	6813      	ldr	r3, [r2, #0]
 8008d32:	0605      	lsls	r5, r0, #24
 8008d34:	f103 0104 	add.w	r1, r3, #4
 8008d38:	d52a      	bpl.n	8008d90 <_printf_i+0xa4>
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6011      	str	r1, [r2, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	da03      	bge.n	8008d4a <_printf_i+0x5e>
 8008d42:	222d      	movs	r2, #45	; 0x2d
 8008d44:	425b      	negs	r3, r3
 8008d46:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008d4a:	486f      	ldr	r0, [pc, #444]	; (8008f08 <_printf_i+0x21c>)
 8008d4c:	220a      	movs	r2, #10
 8008d4e:	e039      	b.n	8008dc4 <_printf_i+0xd8>
 8008d50:	2973      	cmp	r1, #115	; 0x73
 8008d52:	f000 809d 	beq.w	8008e90 <_printf_i+0x1a4>
 8008d56:	d808      	bhi.n	8008d6a <_printf_i+0x7e>
 8008d58:	296f      	cmp	r1, #111	; 0x6f
 8008d5a:	d020      	beq.n	8008d9e <_printf_i+0xb2>
 8008d5c:	2970      	cmp	r1, #112	; 0x70
 8008d5e:	d1dd      	bne.n	8008d1c <_printf_i+0x30>
 8008d60:	6823      	ldr	r3, [r4, #0]
 8008d62:	f043 0320 	orr.w	r3, r3, #32
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	e003      	b.n	8008d72 <_printf_i+0x86>
 8008d6a:	2975      	cmp	r1, #117	; 0x75
 8008d6c:	d017      	beq.n	8008d9e <_printf_i+0xb2>
 8008d6e:	2978      	cmp	r1, #120	; 0x78
 8008d70:	d1d4      	bne.n	8008d1c <_printf_i+0x30>
 8008d72:	2378      	movs	r3, #120	; 0x78
 8008d74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d78:	4864      	ldr	r0, [pc, #400]	; (8008f0c <_printf_i+0x220>)
 8008d7a:	e055      	b.n	8008e28 <_printf_i+0x13c>
 8008d7c:	6813      	ldr	r3, [r2, #0]
 8008d7e:	1d19      	adds	r1, r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6011      	str	r1, [r2, #0]
 8008d84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e08c      	b.n	8008eaa <_printf_i+0x1be>
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	6011      	str	r1, [r2, #0]
 8008d94:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d98:	bf18      	it	ne
 8008d9a:	b21b      	sxthne	r3, r3
 8008d9c:	e7cf      	b.n	8008d3e <_printf_i+0x52>
 8008d9e:	6813      	ldr	r3, [r2, #0]
 8008da0:	6825      	ldr	r5, [r4, #0]
 8008da2:	1d18      	adds	r0, r3, #4
 8008da4:	6010      	str	r0, [r2, #0]
 8008da6:	0628      	lsls	r0, r5, #24
 8008da8:	d501      	bpl.n	8008dae <_printf_i+0xc2>
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	e002      	b.n	8008db4 <_printf_i+0xc8>
 8008dae:	0668      	lsls	r0, r5, #25
 8008db0:	d5fb      	bpl.n	8008daa <_printf_i+0xbe>
 8008db2:	881b      	ldrh	r3, [r3, #0]
 8008db4:	4854      	ldr	r0, [pc, #336]	; (8008f08 <_printf_i+0x21c>)
 8008db6:	296f      	cmp	r1, #111	; 0x6f
 8008db8:	bf14      	ite	ne
 8008dba:	220a      	movne	r2, #10
 8008dbc:	2208      	moveq	r2, #8
 8008dbe:	2100      	movs	r1, #0
 8008dc0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008dc4:	6865      	ldr	r5, [r4, #4]
 8008dc6:	60a5      	str	r5, [r4, #8]
 8008dc8:	2d00      	cmp	r5, #0
 8008dca:	f2c0 8095 	blt.w	8008ef8 <_printf_i+0x20c>
 8008dce:	6821      	ldr	r1, [r4, #0]
 8008dd0:	f021 0104 	bic.w	r1, r1, #4
 8008dd4:	6021      	str	r1, [r4, #0]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d13d      	bne.n	8008e56 <_printf_i+0x16a>
 8008dda:	2d00      	cmp	r5, #0
 8008ddc:	f040 808e 	bne.w	8008efc <_printf_i+0x210>
 8008de0:	4665      	mov	r5, ip
 8008de2:	2a08      	cmp	r2, #8
 8008de4:	d10b      	bne.n	8008dfe <_printf_i+0x112>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	07db      	lsls	r3, r3, #31
 8008dea:	d508      	bpl.n	8008dfe <_printf_i+0x112>
 8008dec:	6923      	ldr	r3, [r4, #16]
 8008dee:	6862      	ldr	r2, [r4, #4]
 8008df0:	429a      	cmp	r2, r3
 8008df2:	bfde      	ittt	le
 8008df4:	2330      	movle	r3, #48	; 0x30
 8008df6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008dfa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008dfe:	ebac 0305 	sub.w	r3, ip, r5
 8008e02:	6123      	str	r3, [r4, #16]
 8008e04:	f8cd 8000 	str.w	r8, [sp]
 8008e08:	463b      	mov	r3, r7
 8008e0a:	aa03      	add	r2, sp, #12
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f7ff fef6 	bl	8008c00 <_printf_common>
 8008e14:	3001      	adds	r0, #1
 8008e16:	d14d      	bne.n	8008eb4 <_printf_i+0x1c8>
 8008e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e1c:	b005      	add	sp, #20
 8008e1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e22:	4839      	ldr	r0, [pc, #228]	; (8008f08 <_printf_i+0x21c>)
 8008e24:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008e28:	6813      	ldr	r3, [r2, #0]
 8008e2a:	6821      	ldr	r1, [r4, #0]
 8008e2c:	1d1d      	adds	r5, r3, #4
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6015      	str	r5, [r2, #0]
 8008e32:	060a      	lsls	r2, r1, #24
 8008e34:	d50b      	bpl.n	8008e4e <_printf_i+0x162>
 8008e36:	07ca      	lsls	r2, r1, #31
 8008e38:	bf44      	itt	mi
 8008e3a:	f041 0120 	orrmi.w	r1, r1, #32
 8008e3e:	6021      	strmi	r1, [r4, #0]
 8008e40:	b91b      	cbnz	r3, 8008e4a <_printf_i+0x15e>
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	f022 0220 	bic.w	r2, r2, #32
 8008e48:	6022      	str	r2, [r4, #0]
 8008e4a:	2210      	movs	r2, #16
 8008e4c:	e7b7      	b.n	8008dbe <_printf_i+0xd2>
 8008e4e:	064d      	lsls	r5, r1, #25
 8008e50:	bf48      	it	mi
 8008e52:	b29b      	uxthmi	r3, r3
 8008e54:	e7ef      	b.n	8008e36 <_printf_i+0x14a>
 8008e56:	4665      	mov	r5, ip
 8008e58:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e5c:	fb02 3311 	mls	r3, r2, r1, r3
 8008e60:	5cc3      	ldrb	r3, [r0, r3]
 8008e62:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008e66:	460b      	mov	r3, r1
 8008e68:	2900      	cmp	r1, #0
 8008e6a:	d1f5      	bne.n	8008e58 <_printf_i+0x16c>
 8008e6c:	e7b9      	b.n	8008de2 <_printf_i+0xf6>
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	6825      	ldr	r5, [r4, #0]
 8008e72:	6961      	ldr	r1, [r4, #20]
 8008e74:	1d18      	adds	r0, r3, #4
 8008e76:	6010      	str	r0, [r2, #0]
 8008e78:	0628      	lsls	r0, r5, #24
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	d501      	bpl.n	8008e82 <_printf_i+0x196>
 8008e7e:	6019      	str	r1, [r3, #0]
 8008e80:	e002      	b.n	8008e88 <_printf_i+0x19c>
 8008e82:	066a      	lsls	r2, r5, #25
 8008e84:	d5fb      	bpl.n	8008e7e <_printf_i+0x192>
 8008e86:	8019      	strh	r1, [r3, #0]
 8008e88:	2300      	movs	r3, #0
 8008e8a:	6123      	str	r3, [r4, #16]
 8008e8c:	4665      	mov	r5, ip
 8008e8e:	e7b9      	b.n	8008e04 <_printf_i+0x118>
 8008e90:	6813      	ldr	r3, [r2, #0]
 8008e92:	1d19      	adds	r1, r3, #4
 8008e94:	6011      	str	r1, [r2, #0]
 8008e96:	681d      	ldr	r5, [r3, #0]
 8008e98:	6862      	ldr	r2, [r4, #4]
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4628      	mov	r0, r5
 8008e9e:	f7f7 f99f 	bl	80001e0 <memchr>
 8008ea2:	b108      	cbz	r0, 8008ea8 <_printf_i+0x1bc>
 8008ea4:	1b40      	subs	r0, r0, r5
 8008ea6:	6060      	str	r0, [r4, #4]
 8008ea8:	6863      	ldr	r3, [r4, #4]
 8008eaa:	6123      	str	r3, [r4, #16]
 8008eac:	2300      	movs	r3, #0
 8008eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008eb2:	e7a7      	b.n	8008e04 <_printf_i+0x118>
 8008eb4:	6923      	ldr	r3, [r4, #16]
 8008eb6:	462a      	mov	r2, r5
 8008eb8:	4639      	mov	r1, r7
 8008eba:	4630      	mov	r0, r6
 8008ebc:	47c0      	blx	r8
 8008ebe:	3001      	adds	r0, #1
 8008ec0:	d0aa      	beq.n	8008e18 <_printf_i+0x12c>
 8008ec2:	6823      	ldr	r3, [r4, #0]
 8008ec4:	079b      	lsls	r3, r3, #30
 8008ec6:	d413      	bmi.n	8008ef0 <_printf_i+0x204>
 8008ec8:	68e0      	ldr	r0, [r4, #12]
 8008eca:	9b03      	ldr	r3, [sp, #12]
 8008ecc:	4298      	cmp	r0, r3
 8008ece:	bfb8      	it	lt
 8008ed0:	4618      	movlt	r0, r3
 8008ed2:	e7a3      	b.n	8008e1c <_printf_i+0x130>
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	464a      	mov	r2, r9
 8008ed8:	4639      	mov	r1, r7
 8008eda:	4630      	mov	r0, r6
 8008edc:	47c0      	blx	r8
 8008ede:	3001      	adds	r0, #1
 8008ee0:	d09a      	beq.n	8008e18 <_printf_i+0x12c>
 8008ee2:	3501      	adds	r5, #1
 8008ee4:	68e3      	ldr	r3, [r4, #12]
 8008ee6:	9a03      	ldr	r2, [sp, #12]
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	42ab      	cmp	r3, r5
 8008eec:	dcf2      	bgt.n	8008ed4 <_printf_i+0x1e8>
 8008eee:	e7eb      	b.n	8008ec8 <_printf_i+0x1dc>
 8008ef0:	2500      	movs	r5, #0
 8008ef2:	f104 0919 	add.w	r9, r4, #25
 8008ef6:	e7f5      	b.n	8008ee4 <_printf_i+0x1f8>
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1ac      	bne.n	8008e56 <_printf_i+0x16a>
 8008efc:	7803      	ldrb	r3, [r0, #0]
 8008efe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f06:	e76c      	b.n	8008de2 <_printf_i+0xf6>
 8008f08:	0800a1ea 	.word	0x0800a1ea
 8008f0c:	0800a1fb 	.word	0x0800a1fb

08008f10 <memcpy>:
 8008f10:	b510      	push	{r4, lr}
 8008f12:	1e43      	subs	r3, r0, #1
 8008f14:	440a      	add	r2, r1
 8008f16:	4291      	cmp	r1, r2
 8008f18:	d100      	bne.n	8008f1c <memcpy+0xc>
 8008f1a:	bd10      	pop	{r4, pc}
 8008f1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f20:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f24:	e7f7      	b.n	8008f16 <memcpy+0x6>

08008f26 <memmove>:
 8008f26:	4288      	cmp	r0, r1
 8008f28:	b510      	push	{r4, lr}
 8008f2a:	eb01 0302 	add.w	r3, r1, r2
 8008f2e:	d807      	bhi.n	8008f40 <memmove+0x1a>
 8008f30:	1e42      	subs	r2, r0, #1
 8008f32:	4299      	cmp	r1, r3
 8008f34:	d00a      	beq.n	8008f4c <memmove+0x26>
 8008f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008f3e:	e7f8      	b.n	8008f32 <memmove+0xc>
 8008f40:	4283      	cmp	r3, r0
 8008f42:	d9f5      	bls.n	8008f30 <memmove+0xa>
 8008f44:	1881      	adds	r1, r0, r2
 8008f46:	1ad2      	subs	r2, r2, r3
 8008f48:	42d3      	cmn	r3, r2
 8008f4a:	d100      	bne.n	8008f4e <memmove+0x28>
 8008f4c:	bd10      	pop	{r4, pc}
 8008f4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008f56:	e7f7      	b.n	8008f48 <memmove+0x22>

08008f58 <_free_r>:
 8008f58:	b538      	push	{r3, r4, r5, lr}
 8008f5a:	4605      	mov	r5, r0
 8008f5c:	2900      	cmp	r1, #0
 8008f5e:	d045      	beq.n	8008fec <_free_r+0x94>
 8008f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f64:	1f0c      	subs	r4, r1, #4
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	bfb8      	it	lt
 8008f6a:	18e4      	addlt	r4, r4, r3
 8008f6c:	f000 f8d2 	bl	8009114 <__malloc_lock>
 8008f70:	4a1f      	ldr	r2, [pc, #124]	; (8008ff0 <_free_r+0x98>)
 8008f72:	6813      	ldr	r3, [r2, #0]
 8008f74:	4610      	mov	r0, r2
 8008f76:	b933      	cbnz	r3, 8008f86 <_free_r+0x2e>
 8008f78:	6063      	str	r3, [r4, #4]
 8008f7a:	6014      	str	r4, [r2, #0]
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f82:	f000 b8c8 	b.w	8009116 <__malloc_unlock>
 8008f86:	42a3      	cmp	r3, r4
 8008f88:	d90c      	bls.n	8008fa4 <_free_r+0x4c>
 8008f8a:	6821      	ldr	r1, [r4, #0]
 8008f8c:	1862      	adds	r2, r4, r1
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	bf04      	itt	eq
 8008f92:	681a      	ldreq	r2, [r3, #0]
 8008f94:	685b      	ldreq	r3, [r3, #4]
 8008f96:	6063      	str	r3, [r4, #4]
 8008f98:	bf04      	itt	eq
 8008f9a:	1852      	addeq	r2, r2, r1
 8008f9c:	6022      	streq	r2, [r4, #0]
 8008f9e:	6004      	str	r4, [r0, #0]
 8008fa0:	e7ec      	b.n	8008f7c <_free_r+0x24>
 8008fa2:	4613      	mov	r3, r2
 8008fa4:	685a      	ldr	r2, [r3, #4]
 8008fa6:	b10a      	cbz	r2, 8008fac <_free_r+0x54>
 8008fa8:	42a2      	cmp	r2, r4
 8008faa:	d9fa      	bls.n	8008fa2 <_free_r+0x4a>
 8008fac:	6819      	ldr	r1, [r3, #0]
 8008fae:	1858      	adds	r0, r3, r1
 8008fb0:	42a0      	cmp	r0, r4
 8008fb2:	d10b      	bne.n	8008fcc <_free_r+0x74>
 8008fb4:	6820      	ldr	r0, [r4, #0]
 8008fb6:	4401      	add	r1, r0
 8008fb8:	1858      	adds	r0, r3, r1
 8008fba:	4282      	cmp	r2, r0
 8008fbc:	6019      	str	r1, [r3, #0]
 8008fbe:	d1dd      	bne.n	8008f7c <_free_r+0x24>
 8008fc0:	6810      	ldr	r0, [r2, #0]
 8008fc2:	6852      	ldr	r2, [r2, #4]
 8008fc4:	605a      	str	r2, [r3, #4]
 8008fc6:	4401      	add	r1, r0
 8008fc8:	6019      	str	r1, [r3, #0]
 8008fca:	e7d7      	b.n	8008f7c <_free_r+0x24>
 8008fcc:	d902      	bls.n	8008fd4 <_free_r+0x7c>
 8008fce:	230c      	movs	r3, #12
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	e7d3      	b.n	8008f7c <_free_r+0x24>
 8008fd4:	6820      	ldr	r0, [r4, #0]
 8008fd6:	1821      	adds	r1, r4, r0
 8008fd8:	428a      	cmp	r2, r1
 8008fda:	bf04      	itt	eq
 8008fdc:	6811      	ldreq	r1, [r2, #0]
 8008fde:	6852      	ldreq	r2, [r2, #4]
 8008fe0:	6062      	str	r2, [r4, #4]
 8008fe2:	bf04      	itt	eq
 8008fe4:	1809      	addeq	r1, r1, r0
 8008fe6:	6021      	streq	r1, [r4, #0]
 8008fe8:	605c      	str	r4, [r3, #4]
 8008fea:	e7c7      	b.n	8008f7c <_free_r+0x24>
 8008fec:	bd38      	pop	{r3, r4, r5, pc}
 8008fee:	bf00      	nop
 8008ff0:	20000090 	.word	0x20000090

08008ff4 <_malloc_r>:
 8008ff4:	b570      	push	{r4, r5, r6, lr}
 8008ff6:	1ccd      	adds	r5, r1, #3
 8008ff8:	f025 0503 	bic.w	r5, r5, #3
 8008ffc:	3508      	adds	r5, #8
 8008ffe:	2d0c      	cmp	r5, #12
 8009000:	bf38      	it	cc
 8009002:	250c      	movcc	r5, #12
 8009004:	2d00      	cmp	r5, #0
 8009006:	4606      	mov	r6, r0
 8009008:	db01      	blt.n	800900e <_malloc_r+0x1a>
 800900a:	42a9      	cmp	r1, r5
 800900c:	d903      	bls.n	8009016 <_malloc_r+0x22>
 800900e:	230c      	movs	r3, #12
 8009010:	6033      	str	r3, [r6, #0]
 8009012:	2000      	movs	r0, #0
 8009014:	bd70      	pop	{r4, r5, r6, pc}
 8009016:	f000 f87d 	bl	8009114 <__malloc_lock>
 800901a:	4a21      	ldr	r2, [pc, #132]	; (80090a0 <_malloc_r+0xac>)
 800901c:	6814      	ldr	r4, [r2, #0]
 800901e:	4621      	mov	r1, r4
 8009020:	b991      	cbnz	r1, 8009048 <_malloc_r+0x54>
 8009022:	4c20      	ldr	r4, [pc, #128]	; (80090a4 <_malloc_r+0xb0>)
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	b91b      	cbnz	r3, 8009030 <_malloc_r+0x3c>
 8009028:	4630      	mov	r0, r6
 800902a:	f000 f863 	bl	80090f4 <_sbrk_r>
 800902e:	6020      	str	r0, [r4, #0]
 8009030:	4629      	mov	r1, r5
 8009032:	4630      	mov	r0, r6
 8009034:	f000 f85e 	bl	80090f4 <_sbrk_r>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d124      	bne.n	8009086 <_malloc_r+0x92>
 800903c:	230c      	movs	r3, #12
 800903e:	6033      	str	r3, [r6, #0]
 8009040:	4630      	mov	r0, r6
 8009042:	f000 f868 	bl	8009116 <__malloc_unlock>
 8009046:	e7e4      	b.n	8009012 <_malloc_r+0x1e>
 8009048:	680b      	ldr	r3, [r1, #0]
 800904a:	1b5b      	subs	r3, r3, r5
 800904c:	d418      	bmi.n	8009080 <_malloc_r+0x8c>
 800904e:	2b0b      	cmp	r3, #11
 8009050:	d90f      	bls.n	8009072 <_malloc_r+0x7e>
 8009052:	600b      	str	r3, [r1, #0]
 8009054:	50cd      	str	r5, [r1, r3]
 8009056:	18cc      	adds	r4, r1, r3
 8009058:	4630      	mov	r0, r6
 800905a:	f000 f85c 	bl	8009116 <__malloc_unlock>
 800905e:	f104 000b 	add.w	r0, r4, #11
 8009062:	1d23      	adds	r3, r4, #4
 8009064:	f020 0007 	bic.w	r0, r0, #7
 8009068:	1ac3      	subs	r3, r0, r3
 800906a:	d0d3      	beq.n	8009014 <_malloc_r+0x20>
 800906c:	425a      	negs	r2, r3
 800906e:	50e2      	str	r2, [r4, r3]
 8009070:	e7d0      	b.n	8009014 <_malloc_r+0x20>
 8009072:	428c      	cmp	r4, r1
 8009074:	684b      	ldr	r3, [r1, #4]
 8009076:	bf16      	itet	ne
 8009078:	6063      	strne	r3, [r4, #4]
 800907a:	6013      	streq	r3, [r2, #0]
 800907c:	460c      	movne	r4, r1
 800907e:	e7eb      	b.n	8009058 <_malloc_r+0x64>
 8009080:	460c      	mov	r4, r1
 8009082:	6849      	ldr	r1, [r1, #4]
 8009084:	e7cc      	b.n	8009020 <_malloc_r+0x2c>
 8009086:	1cc4      	adds	r4, r0, #3
 8009088:	f024 0403 	bic.w	r4, r4, #3
 800908c:	42a0      	cmp	r0, r4
 800908e:	d005      	beq.n	800909c <_malloc_r+0xa8>
 8009090:	1a21      	subs	r1, r4, r0
 8009092:	4630      	mov	r0, r6
 8009094:	f000 f82e 	bl	80090f4 <_sbrk_r>
 8009098:	3001      	adds	r0, #1
 800909a:	d0cf      	beq.n	800903c <_malloc_r+0x48>
 800909c:	6025      	str	r5, [r4, #0]
 800909e:	e7db      	b.n	8009058 <_malloc_r+0x64>
 80090a0:	20000090 	.word	0x20000090
 80090a4:	20000094 	.word	0x20000094

080090a8 <_realloc_r>:
 80090a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090aa:	4607      	mov	r7, r0
 80090ac:	4614      	mov	r4, r2
 80090ae:	460e      	mov	r6, r1
 80090b0:	b921      	cbnz	r1, 80090bc <_realloc_r+0x14>
 80090b2:	4611      	mov	r1, r2
 80090b4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80090b8:	f7ff bf9c 	b.w	8008ff4 <_malloc_r>
 80090bc:	b922      	cbnz	r2, 80090c8 <_realloc_r+0x20>
 80090be:	f7ff ff4b 	bl	8008f58 <_free_r>
 80090c2:	4625      	mov	r5, r4
 80090c4:	4628      	mov	r0, r5
 80090c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c8:	f000 f826 	bl	8009118 <_malloc_usable_size_r>
 80090cc:	42a0      	cmp	r0, r4
 80090ce:	d20f      	bcs.n	80090f0 <_realloc_r+0x48>
 80090d0:	4621      	mov	r1, r4
 80090d2:	4638      	mov	r0, r7
 80090d4:	f7ff ff8e 	bl	8008ff4 <_malloc_r>
 80090d8:	4605      	mov	r5, r0
 80090da:	2800      	cmp	r0, #0
 80090dc:	d0f2      	beq.n	80090c4 <_realloc_r+0x1c>
 80090de:	4631      	mov	r1, r6
 80090e0:	4622      	mov	r2, r4
 80090e2:	f7ff ff15 	bl	8008f10 <memcpy>
 80090e6:	4631      	mov	r1, r6
 80090e8:	4638      	mov	r0, r7
 80090ea:	f7ff ff35 	bl	8008f58 <_free_r>
 80090ee:	e7e9      	b.n	80090c4 <_realloc_r+0x1c>
 80090f0:	4635      	mov	r5, r6
 80090f2:	e7e7      	b.n	80090c4 <_realloc_r+0x1c>

080090f4 <_sbrk_r>:
 80090f4:	b538      	push	{r3, r4, r5, lr}
 80090f6:	4c06      	ldr	r4, [pc, #24]	; (8009110 <_sbrk_r+0x1c>)
 80090f8:	2300      	movs	r3, #0
 80090fa:	4605      	mov	r5, r0
 80090fc:	4608      	mov	r0, r1
 80090fe:	6023      	str	r3, [r4, #0]
 8009100:	f7ff fb06 	bl	8008710 <_sbrk>
 8009104:	1c43      	adds	r3, r0, #1
 8009106:	d102      	bne.n	800910e <_sbrk_r+0x1a>
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	b103      	cbz	r3, 800910e <_sbrk_r+0x1a>
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	bd38      	pop	{r3, r4, r5, pc}
 8009110:	20000398 	.word	0x20000398

08009114 <__malloc_lock>:
 8009114:	4770      	bx	lr

08009116 <__malloc_unlock>:
 8009116:	4770      	bx	lr

08009118 <_malloc_usable_size_r>:
 8009118:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800911c:	1f18      	subs	r0, r3, #4
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfbc      	itt	lt
 8009122:	580b      	ldrlt	r3, [r1, r0]
 8009124:	18c0      	addlt	r0, r0, r3
 8009126:	4770      	bx	lr

08009128 <cos>:
 8009128:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800912a:	ec51 0b10 	vmov	r0, r1, d0
 800912e:	4a1e      	ldr	r2, [pc, #120]	; (80091a8 <cos+0x80>)
 8009130:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009134:	4293      	cmp	r3, r2
 8009136:	dc06      	bgt.n	8009146 <cos+0x1e>
 8009138:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80091a0 <cos+0x78>
 800913c:	f000 fa2c 	bl	8009598 <__kernel_cos>
 8009140:	ec51 0b10 	vmov	r0, r1, d0
 8009144:	e007      	b.n	8009156 <cos+0x2e>
 8009146:	4a19      	ldr	r2, [pc, #100]	; (80091ac <cos+0x84>)
 8009148:	4293      	cmp	r3, r2
 800914a:	dd09      	ble.n	8009160 <cos+0x38>
 800914c:	ee10 2a10 	vmov	r2, s0
 8009150:	460b      	mov	r3, r1
 8009152:	f7f7 f899 	bl	8000288 <__aeabi_dsub>
 8009156:	ec41 0b10 	vmov	d0, r0, r1
 800915a:	b005      	add	sp, #20
 800915c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009160:	4668      	mov	r0, sp
 8009162:	f000 f825 	bl	80091b0 <__ieee754_rem_pio2>
 8009166:	f000 0003 	and.w	r0, r0, #3
 800916a:	2801      	cmp	r0, #1
 800916c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009170:	ed9d 0b00 	vldr	d0, [sp]
 8009174:	d007      	beq.n	8009186 <cos+0x5e>
 8009176:	2802      	cmp	r0, #2
 8009178:	d00e      	beq.n	8009198 <cos+0x70>
 800917a:	2800      	cmp	r0, #0
 800917c:	d0de      	beq.n	800913c <cos+0x14>
 800917e:	2001      	movs	r0, #1
 8009180:	f000 fe12 	bl	8009da8 <__kernel_sin>
 8009184:	e7dc      	b.n	8009140 <cos+0x18>
 8009186:	f000 fe0f 	bl	8009da8 <__kernel_sin>
 800918a:	ec53 2b10 	vmov	r2, r3, d0
 800918e:	ee10 0a10 	vmov	r0, s0
 8009192:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8009196:	e7de      	b.n	8009156 <cos+0x2e>
 8009198:	f000 f9fe 	bl	8009598 <__kernel_cos>
 800919c:	e7f5      	b.n	800918a <cos+0x62>
 800919e:	bf00      	nop
	...
 80091a8:	3fe921fb 	.word	0x3fe921fb
 80091ac:	7fefffff 	.word	0x7fefffff

080091b0 <__ieee754_rem_pio2>:
 80091b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b4:	ec57 6b10 	vmov	r6, r7, d0
 80091b8:	4bc3      	ldr	r3, [pc, #780]	; (80094c8 <__ieee754_rem_pio2+0x318>)
 80091ba:	b08d      	sub	sp, #52	; 0x34
 80091bc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80091c0:	4598      	cmp	r8, r3
 80091c2:	4604      	mov	r4, r0
 80091c4:	9704      	str	r7, [sp, #16]
 80091c6:	dc07      	bgt.n	80091d8 <__ieee754_rem_pio2+0x28>
 80091c8:	2200      	movs	r2, #0
 80091ca:	2300      	movs	r3, #0
 80091cc:	ed84 0b00 	vstr	d0, [r4]
 80091d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80091d4:	2500      	movs	r5, #0
 80091d6:	e027      	b.n	8009228 <__ieee754_rem_pio2+0x78>
 80091d8:	4bbc      	ldr	r3, [pc, #752]	; (80094cc <__ieee754_rem_pio2+0x31c>)
 80091da:	4598      	cmp	r8, r3
 80091dc:	dc75      	bgt.n	80092ca <__ieee754_rem_pio2+0x11a>
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	4dbb      	ldr	r5, [pc, #748]	; (80094d0 <__ieee754_rem_pio2+0x320>)
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	ee10 0a10 	vmov	r0, s0
 80091e8:	a3a9      	add	r3, pc, #676	; (adr r3, 8009490 <__ieee754_rem_pio2+0x2e0>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	4639      	mov	r1, r7
 80091f0:	dd36      	ble.n	8009260 <__ieee754_rem_pio2+0xb0>
 80091f2:	f7f7 f849 	bl	8000288 <__aeabi_dsub>
 80091f6:	45a8      	cmp	r8, r5
 80091f8:	4606      	mov	r6, r0
 80091fa:	460f      	mov	r7, r1
 80091fc:	d018      	beq.n	8009230 <__ieee754_rem_pio2+0x80>
 80091fe:	a3a6      	add	r3, pc, #664	; (adr r3, 8009498 <__ieee754_rem_pio2+0x2e8>)
 8009200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009204:	f7f7 f840 	bl	8000288 <__aeabi_dsub>
 8009208:	4602      	mov	r2, r0
 800920a:	460b      	mov	r3, r1
 800920c:	e9c4 2300 	strd	r2, r3, [r4]
 8009210:	4630      	mov	r0, r6
 8009212:	4639      	mov	r1, r7
 8009214:	f7f7 f838 	bl	8000288 <__aeabi_dsub>
 8009218:	a39f      	add	r3, pc, #636	; (adr r3, 8009498 <__ieee754_rem_pio2+0x2e8>)
 800921a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800921e:	f7f7 f833 	bl	8000288 <__aeabi_dsub>
 8009222:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009226:	2501      	movs	r5, #1
 8009228:	4628      	mov	r0, r5
 800922a:	b00d      	add	sp, #52	; 0x34
 800922c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009230:	a39b      	add	r3, pc, #620	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x2f0>)
 8009232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009236:	f7f7 f827 	bl	8000288 <__aeabi_dsub>
 800923a:	a39b      	add	r3, pc, #620	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2f8>)
 800923c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009240:	4606      	mov	r6, r0
 8009242:	460f      	mov	r7, r1
 8009244:	f7f7 f820 	bl	8000288 <__aeabi_dsub>
 8009248:	4602      	mov	r2, r0
 800924a:	460b      	mov	r3, r1
 800924c:	e9c4 2300 	strd	r2, r3, [r4]
 8009250:	4630      	mov	r0, r6
 8009252:	4639      	mov	r1, r7
 8009254:	f7f7 f818 	bl	8000288 <__aeabi_dsub>
 8009258:	a393      	add	r3, pc, #588	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2f8>)
 800925a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925e:	e7de      	b.n	800921e <__ieee754_rem_pio2+0x6e>
 8009260:	f7f7 f814 	bl	800028c <__adddf3>
 8009264:	45a8      	cmp	r8, r5
 8009266:	4606      	mov	r6, r0
 8009268:	460f      	mov	r7, r1
 800926a:	d016      	beq.n	800929a <__ieee754_rem_pio2+0xea>
 800926c:	a38a      	add	r3, pc, #552	; (adr r3, 8009498 <__ieee754_rem_pio2+0x2e8>)
 800926e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009272:	f7f7 f80b 	bl	800028c <__adddf3>
 8009276:	4602      	mov	r2, r0
 8009278:	460b      	mov	r3, r1
 800927a:	e9c4 2300 	strd	r2, r3, [r4]
 800927e:	4630      	mov	r0, r6
 8009280:	4639      	mov	r1, r7
 8009282:	f7f7 f801 	bl	8000288 <__aeabi_dsub>
 8009286:	a384      	add	r3, pc, #528	; (adr r3, 8009498 <__ieee754_rem_pio2+0x2e8>)
 8009288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928c:	f7f6 fffe 	bl	800028c <__adddf3>
 8009290:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009294:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009298:	e7c6      	b.n	8009228 <__ieee754_rem_pio2+0x78>
 800929a:	a381      	add	r3, pc, #516	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x2f0>)
 800929c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a0:	f7f6 fff4 	bl	800028c <__adddf3>
 80092a4:	a380      	add	r3, pc, #512	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2f8>)
 80092a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092aa:	4606      	mov	r6, r0
 80092ac:	460f      	mov	r7, r1
 80092ae:	f7f6 ffed 	bl	800028c <__adddf3>
 80092b2:	4602      	mov	r2, r0
 80092b4:	460b      	mov	r3, r1
 80092b6:	e9c4 2300 	strd	r2, r3, [r4]
 80092ba:	4630      	mov	r0, r6
 80092bc:	4639      	mov	r1, r7
 80092be:	f7f6 ffe3 	bl	8000288 <__aeabi_dsub>
 80092c2:	a379      	add	r3, pc, #484	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2f8>)
 80092c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c8:	e7e0      	b.n	800928c <__ieee754_rem_pio2+0xdc>
 80092ca:	4b82      	ldr	r3, [pc, #520]	; (80094d4 <__ieee754_rem_pio2+0x324>)
 80092cc:	4598      	cmp	r8, r3
 80092ce:	f300 80d0 	bgt.w	8009472 <__ieee754_rem_pio2+0x2c2>
 80092d2:	f000 fe23 	bl	8009f1c <fabs>
 80092d6:	ec57 6b10 	vmov	r6, r7, d0
 80092da:	ee10 0a10 	vmov	r0, s0
 80092de:	a374      	add	r3, pc, #464	; (adr r3, 80094b0 <__ieee754_rem_pio2+0x300>)
 80092e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e4:	4639      	mov	r1, r7
 80092e6:	f7f7 f987 	bl	80005f8 <__aeabi_dmul>
 80092ea:	2200      	movs	r2, #0
 80092ec:	4b7a      	ldr	r3, [pc, #488]	; (80094d8 <__ieee754_rem_pio2+0x328>)
 80092ee:	f7f6 ffcd 	bl	800028c <__adddf3>
 80092f2:	f7f7 fc1b 	bl	8000b2c <__aeabi_d2iz>
 80092f6:	4605      	mov	r5, r0
 80092f8:	f7f7 f914 	bl	8000524 <__aeabi_i2d>
 80092fc:	a364      	add	r3, pc, #400	; (adr r3, 8009490 <__ieee754_rem_pio2+0x2e0>)
 80092fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009302:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009306:	f7f7 f977 	bl	80005f8 <__aeabi_dmul>
 800930a:	4602      	mov	r2, r0
 800930c:	460b      	mov	r3, r1
 800930e:	4630      	mov	r0, r6
 8009310:	4639      	mov	r1, r7
 8009312:	f7f6 ffb9 	bl	8000288 <__aeabi_dsub>
 8009316:	a360      	add	r3, pc, #384	; (adr r3, 8009498 <__ieee754_rem_pio2+0x2e8>)
 8009318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800931c:	4682      	mov	sl, r0
 800931e:	468b      	mov	fp, r1
 8009320:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009324:	f7f7 f968 	bl	80005f8 <__aeabi_dmul>
 8009328:	2d1f      	cmp	r5, #31
 800932a:	4606      	mov	r6, r0
 800932c:	460f      	mov	r7, r1
 800932e:	dc0c      	bgt.n	800934a <__ieee754_rem_pio2+0x19a>
 8009330:	1e6a      	subs	r2, r5, #1
 8009332:	4b6a      	ldr	r3, [pc, #424]	; (80094dc <__ieee754_rem_pio2+0x32c>)
 8009334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009338:	4543      	cmp	r3, r8
 800933a:	d006      	beq.n	800934a <__ieee754_rem_pio2+0x19a>
 800933c:	4632      	mov	r2, r6
 800933e:	463b      	mov	r3, r7
 8009340:	4650      	mov	r0, sl
 8009342:	4659      	mov	r1, fp
 8009344:	f7f6 ffa0 	bl	8000288 <__aeabi_dsub>
 8009348:	e00e      	b.n	8009368 <__ieee754_rem_pio2+0x1b8>
 800934a:	4632      	mov	r2, r6
 800934c:	463b      	mov	r3, r7
 800934e:	4650      	mov	r0, sl
 8009350:	4659      	mov	r1, fp
 8009352:	f7f6 ff99 	bl	8000288 <__aeabi_dsub>
 8009356:	ea4f 5328 	mov.w	r3, r8, asr #20
 800935a:	9305      	str	r3, [sp, #20]
 800935c:	9a05      	ldr	r2, [sp, #20]
 800935e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	2b10      	cmp	r3, #16
 8009366:	dc02      	bgt.n	800936e <__ieee754_rem_pio2+0x1be>
 8009368:	e9c4 0100 	strd	r0, r1, [r4]
 800936c:	e039      	b.n	80093e2 <__ieee754_rem_pio2+0x232>
 800936e:	a34c      	add	r3, pc, #304	; (adr r3, 80094a0 <__ieee754_rem_pio2+0x2f0>)
 8009370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009374:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	4606      	mov	r6, r0
 800937e:	460f      	mov	r7, r1
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4650      	mov	r0, sl
 8009386:	4659      	mov	r1, fp
 8009388:	f7f6 ff7e 	bl	8000288 <__aeabi_dsub>
 800938c:	4602      	mov	r2, r0
 800938e:	460b      	mov	r3, r1
 8009390:	4680      	mov	r8, r0
 8009392:	4689      	mov	r9, r1
 8009394:	4650      	mov	r0, sl
 8009396:	4659      	mov	r1, fp
 8009398:	f7f6 ff76 	bl	8000288 <__aeabi_dsub>
 800939c:	4632      	mov	r2, r6
 800939e:	463b      	mov	r3, r7
 80093a0:	f7f6 ff72 	bl	8000288 <__aeabi_dsub>
 80093a4:	a340      	add	r3, pc, #256	; (adr r3, 80094a8 <__ieee754_rem_pio2+0x2f8>)
 80093a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093aa:	4606      	mov	r6, r0
 80093ac:	460f      	mov	r7, r1
 80093ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093b2:	f7f7 f921 	bl	80005f8 <__aeabi_dmul>
 80093b6:	4632      	mov	r2, r6
 80093b8:	463b      	mov	r3, r7
 80093ba:	f7f6 ff65 	bl	8000288 <__aeabi_dsub>
 80093be:	4602      	mov	r2, r0
 80093c0:	460b      	mov	r3, r1
 80093c2:	4606      	mov	r6, r0
 80093c4:	460f      	mov	r7, r1
 80093c6:	4640      	mov	r0, r8
 80093c8:	4649      	mov	r1, r9
 80093ca:	f7f6 ff5d 	bl	8000288 <__aeabi_dsub>
 80093ce:	9a05      	ldr	r2, [sp, #20]
 80093d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80093d4:	1ad3      	subs	r3, r2, r3
 80093d6:	2b31      	cmp	r3, #49	; 0x31
 80093d8:	dc20      	bgt.n	800941c <__ieee754_rem_pio2+0x26c>
 80093da:	e9c4 0100 	strd	r0, r1, [r4]
 80093de:	46c2      	mov	sl, r8
 80093e0:	46cb      	mov	fp, r9
 80093e2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80093e6:	4650      	mov	r0, sl
 80093e8:	4642      	mov	r2, r8
 80093ea:	464b      	mov	r3, r9
 80093ec:	4659      	mov	r1, fp
 80093ee:	f7f6 ff4b 	bl	8000288 <__aeabi_dsub>
 80093f2:	463b      	mov	r3, r7
 80093f4:	4632      	mov	r2, r6
 80093f6:	f7f6 ff47 	bl	8000288 <__aeabi_dsub>
 80093fa:	9b04      	ldr	r3, [sp, #16]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009402:	f6bf af11 	bge.w	8009228 <__ieee754_rem_pio2+0x78>
 8009406:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800940a:	6063      	str	r3, [r4, #4]
 800940c:	f8c4 8000 	str.w	r8, [r4]
 8009410:	60a0      	str	r0, [r4, #8]
 8009412:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009416:	60e3      	str	r3, [r4, #12]
 8009418:	426d      	negs	r5, r5
 800941a:	e705      	b.n	8009228 <__ieee754_rem_pio2+0x78>
 800941c:	a326      	add	r3, pc, #152	; (adr r3, 80094b8 <__ieee754_rem_pio2+0x308>)
 800941e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009422:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009426:	f7f7 f8e7 	bl	80005f8 <__aeabi_dmul>
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	4602      	mov	r2, r0
 8009430:	460b      	mov	r3, r1
 8009432:	4640      	mov	r0, r8
 8009434:	4649      	mov	r1, r9
 8009436:	f7f6 ff27 	bl	8000288 <__aeabi_dsub>
 800943a:	4602      	mov	r2, r0
 800943c:	460b      	mov	r3, r1
 800943e:	4682      	mov	sl, r0
 8009440:	468b      	mov	fp, r1
 8009442:	4640      	mov	r0, r8
 8009444:	4649      	mov	r1, r9
 8009446:	f7f6 ff1f 	bl	8000288 <__aeabi_dsub>
 800944a:	4632      	mov	r2, r6
 800944c:	463b      	mov	r3, r7
 800944e:	f7f6 ff1b 	bl	8000288 <__aeabi_dsub>
 8009452:	a31b      	add	r3, pc, #108	; (adr r3, 80094c0 <__ieee754_rem_pio2+0x310>)
 8009454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009458:	4606      	mov	r6, r0
 800945a:	460f      	mov	r7, r1
 800945c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009460:	f7f7 f8ca 	bl	80005f8 <__aeabi_dmul>
 8009464:	4632      	mov	r2, r6
 8009466:	463b      	mov	r3, r7
 8009468:	f7f6 ff0e 	bl	8000288 <__aeabi_dsub>
 800946c:	4606      	mov	r6, r0
 800946e:	460f      	mov	r7, r1
 8009470:	e764      	b.n	800933c <__ieee754_rem_pio2+0x18c>
 8009472:	4b1b      	ldr	r3, [pc, #108]	; (80094e0 <__ieee754_rem_pio2+0x330>)
 8009474:	4598      	cmp	r8, r3
 8009476:	dd35      	ble.n	80094e4 <__ieee754_rem_pio2+0x334>
 8009478:	ee10 2a10 	vmov	r2, s0
 800947c:	463b      	mov	r3, r7
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f6 ff01 	bl	8000288 <__aeabi_dsub>
 8009486:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800948a:	e9c4 0100 	strd	r0, r1, [r4]
 800948e:	e6a1      	b.n	80091d4 <__ieee754_rem_pio2+0x24>
 8009490:	54400000 	.word	0x54400000
 8009494:	3ff921fb 	.word	0x3ff921fb
 8009498:	1a626331 	.word	0x1a626331
 800949c:	3dd0b461 	.word	0x3dd0b461
 80094a0:	1a600000 	.word	0x1a600000
 80094a4:	3dd0b461 	.word	0x3dd0b461
 80094a8:	2e037073 	.word	0x2e037073
 80094ac:	3ba3198a 	.word	0x3ba3198a
 80094b0:	6dc9c883 	.word	0x6dc9c883
 80094b4:	3fe45f30 	.word	0x3fe45f30
 80094b8:	2e000000 	.word	0x2e000000
 80094bc:	3ba3198a 	.word	0x3ba3198a
 80094c0:	252049c1 	.word	0x252049c1
 80094c4:	397b839a 	.word	0x397b839a
 80094c8:	3fe921fb 	.word	0x3fe921fb
 80094cc:	4002d97b 	.word	0x4002d97b
 80094d0:	3ff921fb 	.word	0x3ff921fb
 80094d4:	413921fb 	.word	0x413921fb
 80094d8:	3fe00000 	.word	0x3fe00000
 80094dc:	0800a20c 	.word	0x0800a20c
 80094e0:	7fefffff 	.word	0x7fefffff
 80094e4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80094e8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80094ec:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80094f0:	4630      	mov	r0, r6
 80094f2:	460f      	mov	r7, r1
 80094f4:	f7f7 fb1a 	bl	8000b2c <__aeabi_d2iz>
 80094f8:	f7f7 f814 	bl	8000524 <__aeabi_i2d>
 80094fc:	4602      	mov	r2, r0
 80094fe:	460b      	mov	r3, r1
 8009500:	4630      	mov	r0, r6
 8009502:	4639      	mov	r1, r7
 8009504:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009508:	f7f6 febe 	bl	8000288 <__aeabi_dsub>
 800950c:	2200      	movs	r2, #0
 800950e:	4b1f      	ldr	r3, [pc, #124]	; (800958c <__ieee754_rem_pio2+0x3dc>)
 8009510:	f7f7 f872 	bl	80005f8 <__aeabi_dmul>
 8009514:	460f      	mov	r7, r1
 8009516:	4606      	mov	r6, r0
 8009518:	f7f7 fb08 	bl	8000b2c <__aeabi_d2iz>
 800951c:	f7f7 f802 	bl	8000524 <__aeabi_i2d>
 8009520:	4602      	mov	r2, r0
 8009522:	460b      	mov	r3, r1
 8009524:	4630      	mov	r0, r6
 8009526:	4639      	mov	r1, r7
 8009528:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800952c:	f7f6 feac 	bl	8000288 <__aeabi_dsub>
 8009530:	2200      	movs	r2, #0
 8009532:	4b16      	ldr	r3, [pc, #88]	; (800958c <__ieee754_rem_pio2+0x3dc>)
 8009534:	f7f7 f860 	bl	80005f8 <__aeabi_dmul>
 8009538:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800953c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009540:	f04f 0803 	mov.w	r8, #3
 8009544:	2600      	movs	r6, #0
 8009546:	2700      	movs	r7, #0
 8009548:	4632      	mov	r2, r6
 800954a:	463b      	mov	r3, r7
 800954c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009550:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8009554:	f7f7 fab8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009558:	b9b0      	cbnz	r0, 8009588 <__ieee754_rem_pio2+0x3d8>
 800955a:	4b0d      	ldr	r3, [pc, #52]	; (8009590 <__ieee754_rem_pio2+0x3e0>)
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	2302      	movs	r3, #2
 8009560:	9300      	str	r3, [sp, #0]
 8009562:	462a      	mov	r2, r5
 8009564:	4643      	mov	r3, r8
 8009566:	4621      	mov	r1, r4
 8009568:	a806      	add	r0, sp, #24
 800956a:	f000 f8dd 	bl	8009728 <__kernel_rem_pio2>
 800956e:	9b04      	ldr	r3, [sp, #16]
 8009570:	2b00      	cmp	r3, #0
 8009572:	4605      	mov	r5, r0
 8009574:	f6bf ae58 	bge.w	8009228 <__ieee754_rem_pio2+0x78>
 8009578:	6863      	ldr	r3, [r4, #4]
 800957a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800957e:	6063      	str	r3, [r4, #4]
 8009580:	68e3      	ldr	r3, [r4, #12]
 8009582:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009586:	e746      	b.n	8009416 <__ieee754_rem_pio2+0x266>
 8009588:	46d0      	mov	r8, sl
 800958a:	e7dd      	b.n	8009548 <__ieee754_rem_pio2+0x398>
 800958c:	41700000 	.word	0x41700000
 8009590:	0800a28c 	.word	0x0800a28c
 8009594:	00000000 	.word	0x00000000

08009598 <__kernel_cos>:
 8009598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800959c:	ec59 8b10 	vmov	r8, r9, d0
 80095a0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80095a4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80095a8:	ed2d 8b02 	vpush	{d8}
 80095ac:	eeb0 8a41 	vmov.f32	s16, s2
 80095b0:	eef0 8a61 	vmov.f32	s17, s3
 80095b4:	da07      	bge.n	80095c6 <__kernel_cos+0x2e>
 80095b6:	ee10 0a10 	vmov	r0, s0
 80095ba:	4649      	mov	r1, r9
 80095bc:	f7f7 fab6 	bl	8000b2c <__aeabi_d2iz>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	f000 8089 	beq.w	80096d8 <__kernel_cos+0x140>
 80095c6:	4642      	mov	r2, r8
 80095c8:	464b      	mov	r3, r9
 80095ca:	4640      	mov	r0, r8
 80095cc:	4649      	mov	r1, r9
 80095ce:	f7f7 f813 	bl	80005f8 <__aeabi_dmul>
 80095d2:	2200      	movs	r2, #0
 80095d4:	4b4e      	ldr	r3, [pc, #312]	; (8009710 <__kernel_cos+0x178>)
 80095d6:	4604      	mov	r4, r0
 80095d8:	460d      	mov	r5, r1
 80095da:	f7f7 f80d 	bl	80005f8 <__aeabi_dmul>
 80095de:	a340      	add	r3, pc, #256	; (adr r3, 80096e0 <__kernel_cos+0x148>)
 80095e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e4:	4682      	mov	sl, r0
 80095e6:	468b      	mov	fp, r1
 80095e8:	4620      	mov	r0, r4
 80095ea:	4629      	mov	r1, r5
 80095ec:	f7f7 f804 	bl	80005f8 <__aeabi_dmul>
 80095f0:	a33d      	add	r3, pc, #244	; (adr r3, 80096e8 <__kernel_cos+0x150>)
 80095f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095f6:	f7f6 fe49 	bl	800028c <__adddf3>
 80095fa:	4622      	mov	r2, r4
 80095fc:	462b      	mov	r3, r5
 80095fe:	f7f6 fffb 	bl	80005f8 <__aeabi_dmul>
 8009602:	a33b      	add	r3, pc, #236	; (adr r3, 80096f0 <__kernel_cos+0x158>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	f7f6 fe3e 	bl	8000288 <__aeabi_dsub>
 800960c:	4622      	mov	r2, r4
 800960e:	462b      	mov	r3, r5
 8009610:	f7f6 fff2 	bl	80005f8 <__aeabi_dmul>
 8009614:	a338      	add	r3, pc, #224	; (adr r3, 80096f8 <__kernel_cos+0x160>)
 8009616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800961a:	f7f6 fe37 	bl	800028c <__adddf3>
 800961e:	4622      	mov	r2, r4
 8009620:	462b      	mov	r3, r5
 8009622:	f7f6 ffe9 	bl	80005f8 <__aeabi_dmul>
 8009626:	a336      	add	r3, pc, #216	; (adr r3, 8009700 <__kernel_cos+0x168>)
 8009628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800962c:	f7f6 fe2c 	bl	8000288 <__aeabi_dsub>
 8009630:	4622      	mov	r2, r4
 8009632:	462b      	mov	r3, r5
 8009634:	f7f6 ffe0 	bl	80005f8 <__aeabi_dmul>
 8009638:	a333      	add	r3, pc, #204	; (adr r3, 8009708 <__kernel_cos+0x170>)
 800963a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963e:	f7f6 fe25 	bl	800028c <__adddf3>
 8009642:	4622      	mov	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	f7f6 ffd7 	bl	80005f8 <__aeabi_dmul>
 800964a:	4622      	mov	r2, r4
 800964c:	462b      	mov	r3, r5
 800964e:	f7f6 ffd3 	bl	80005f8 <__aeabi_dmul>
 8009652:	ec53 2b18 	vmov	r2, r3, d8
 8009656:	4604      	mov	r4, r0
 8009658:	460d      	mov	r5, r1
 800965a:	4640      	mov	r0, r8
 800965c:	4649      	mov	r1, r9
 800965e:	f7f6 ffcb 	bl	80005f8 <__aeabi_dmul>
 8009662:	460b      	mov	r3, r1
 8009664:	4602      	mov	r2, r0
 8009666:	4629      	mov	r1, r5
 8009668:	4620      	mov	r0, r4
 800966a:	f7f6 fe0d 	bl	8000288 <__aeabi_dsub>
 800966e:	4b29      	ldr	r3, [pc, #164]	; (8009714 <__kernel_cos+0x17c>)
 8009670:	429e      	cmp	r6, r3
 8009672:	4680      	mov	r8, r0
 8009674:	4689      	mov	r9, r1
 8009676:	dc11      	bgt.n	800969c <__kernel_cos+0x104>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4650      	mov	r0, sl
 800967e:	4659      	mov	r1, fp
 8009680:	f7f6 fe02 	bl	8000288 <__aeabi_dsub>
 8009684:	460b      	mov	r3, r1
 8009686:	4924      	ldr	r1, [pc, #144]	; (8009718 <__kernel_cos+0x180>)
 8009688:	4602      	mov	r2, r0
 800968a:	2000      	movs	r0, #0
 800968c:	f7f6 fdfc 	bl	8000288 <__aeabi_dsub>
 8009690:	ecbd 8b02 	vpop	{d8}
 8009694:	ec41 0b10 	vmov	d0, r0, r1
 8009698:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800969c:	4b1f      	ldr	r3, [pc, #124]	; (800971c <__kernel_cos+0x184>)
 800969e:	491e      	ldr	r1, [pc, #120]	; (8009718 <__kernel_cos+0x180>)
 80096a0:	429e      	cmp	r6, r3
 80096a2:	bfcc      	ite	gt
 80096a4:	4d1e      	ldrgt	r5, [pc, #120]	; (8009720 <__kernel_cos+0x188>)
 80096a6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80096aa:	2400      	movs	r4, #0
 80096ac:	4622      	mov	r2, r4
 80096ae:	462b      	mov	r3, r5
 80096b0:	2000      	movs	r0, #0
 80096b2:	f7f6 fde9 	bl	8000288 <__aeabi_dsub>
 80096b6:	4622      	mov	r2, r4
 80096b8:	4606      	mov	r6, r0
 80096ba:	460f      	mov	r7, r1
 80096bc:	462b      	mov	r3, r5
 80096be:	4650      	mov	r0, sl
 80096c0:	4659      	mov	r1, fp
 80096c2:	f7f6 fde1 	bl	8000288 <__aeabi_dsub>
 80096c6:	4642      	mov	r2, r8
 80096c8:	464b      	mov	r3, r9
 80096ca:	f7f6 fddd 	bl	8000288 <__aeabi_dsub>
 80096ce:	4602      	mov	r2, r0
 80096d0:	460b      	mov	r3, r1
 80096d2:	4630      	mov	r0, r6
 80096d4:	4639      	mov	r1, r7
 80096d6:	e7d9      	b.n	800968c <__kernel_cos+0xf4>
 80096d8:	2000      	movs	r0, #0
 80096da:	490f      	ldr	r1, [pc, #60]	; (8009718 <__kernel_cos+0x180>)
 80096dc:	e7d8      	b.n	8009690 <__kernel_cos+0xf8>
 80096de:	bf00      	nop
 80096e0:	be8838d4 	.word	0xbe8838d4
 80096e4:	bda8fae9 	.word	0xbda8fae9
 80096e8:	bdb4b1c4 	.word	0xbdb4b1c4
 80096ec:	3e21ee9e 	.word	0x3e21ee9e
 80096f0:	809c52ad 	.word	0x809c52ad
 80096f4:	3e927e4f 	.word	0x3e927e4f
 80096f8:	19cb1590 	.word	0x19cb1590
 80096fc:	3efa01a0 	.word	0x3efa01a0
 8009700:	16c15177 	.word	0x16c15177
 8009704:	3f56c16c 	.word	0x3f56c16c
 8009708:	5555554c 	.word	0x5555554c
 800970c:	3fa55555 	.word	0x3fa55555
 8009710:	3fe00000 	.word	0x3fe00000
 8009714:	3fd33332 	.word	0x3fd33332
 8009718:	3ff00000 	.word	0x3ff00000
 800971c:	3fe90000 	.word	0x3fe90000
 8009720:	3fd20000 	.word	0x3fd20000
 8009724:	00000000 	.word	0x00000000

08009728 <__kernel_rem_pio2>:
 8009728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800972c:	ed2d 8b02 	vpush	{d8}
 8009730:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009734:	1ed4      	subs	r4, r2, #3
 8009736:	9308      	str	r3, [sp, #32]
 8009738:	9101      	str	r1, [sp, #4]
 800973a:	4bc5      	ldr	r3, [pc, #788]	; (8009a50 <__kernel_rem_pio2+0x328>)
 800973c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800973e:	9009      	str	r0, [sp, #36]	; 0x24
 8009740:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009744:	9304      	str	r3, [sp, #16]
 8009746:	9b08      	ldr	r3, [sp, #32]
 8009748:	3b01      	subs	r3, #1
 800974a:	9307      	str	r3, [sp, #28]
 800974c:	2318      	movs	r3, #24
 800974e:	fb94 f4f3 	sdiv	r4, r4, r3
 8009752:	f06f 0317 	mvn.w	r3, #23
 8009756:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800975a:	fb04 3303 	mla	r3, r4, r3, r3
 800975e:	eb03 0a02 	add.w	sl, r3, r2
 8009762:	9b04      	ldr	r3, [sp, #16]
 8009764:	9a07      	ldr	r2, [sp, #28]
 8009766:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009a40 <__kernel_rem_pio2+0x318>
 800976a:	eb03 0802 	add.w	r8, r3, r2
 800976e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009770:	1aa7      	subs	r7, r4, r2
 8009772:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009776:	ae22      	add	r6, sp, #136	; 0x88
 8009778:	2500      	movs	r5, #0
 800977a:	4545      	cmp	r5, r8
 800977c:	dd13      	ble.n	80097a6 <__kernel_rem_pio2+0x7e>
 800977e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009a40 <__kernel_rem_pio2+0x318>
 8009782:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009786:	2600      	movs	r6, #0
 8009788:	9b04      	ldr	r3, [sp, #16]
 800978a:	429e      	cmp	r6, r3
 800978c:	dc32      	bgt.n	80097f4 <__kernel_rem_pio2+0xcc>
 800978e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009790:	9302      	str	r3, [sp, #8]
 8009792:	9b08      	ldr	r3, [sp, #32]
 8009794:	199d      	adds	r5, r3, r6
 8009796:	ab22      	add	r3, sp, #136	; 0x88
 8009798:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800979c:	9306      	str	r3, [sp, #24]
 800979e:	ec59 8b18 	vmov	r8, r9, d8
 80097a2:	2700      	movs	r7, #0
 80097a4:	e01f      	b.n	80097e6 <__kernel_rem_pio2+0xbe>
 80097a6:	42ef      	cmn	r7, r5
 80097a8:	d407      	bmi.n	80097ba <__kernel_rem_pio2+0x92>
 80097aa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80097ae:	f7f6 feb9 	bl	8000524 <__aeabi_i2d>
 80097b2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80097b6:	3501      	adds	r5, #1
 80097b8:	e7df      	b.n	800977a <__kernel_rem_pio2+0x52>
 80097ba:	ec51 0b18 	vmov	r0, r1, d8
 80097be:	e7f8      	b.n	80097b2 <__kernel_rem_pio2+0x8a>
 80097c0:	9906      	ldr	r1, [sp, #24]
 80097c2:	9d02      	ldr	r5, [sp, #8]
 80097c4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80097c8:	9106      	str	r1, [sp, #24]
 80097ca:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80097ce:	9502      	str	r5, [sp, #8]
 80097d0:	f7f6 ff12 	bl	80005f8 <__aeabi_dmul>
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	4640      	mov	r0, r8
 80097da:	4649      	mov	r1, r9
 80097dc:	f7f6 fd56 	bl	800028c <__adddf3>
 80097e0:	3701      	adds	r7, #1
 80097e2:	4680      	mov	r8, r0
 80097e4:	4689      	mov	r9, r1
 80097e6:	9b07      	ldr	r3, [sp, #28]
 80097e8:	429f      	cmp	r7, r3
 80097ea:	dde9      	ble.n	80097c0 <__kernel_rem_pio2+0x98>
 80097ec:	e8eb 8902 	strd	r8, r9, [fp], #8
 80097f0:	3601      	adds	r6, #1
 80097f2:	e7c9      	b.n	8009788 <__kernel_rem_pio2+0x60>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	aa0e      	add	r2, sp, #56	; 0x38
 80097f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097fc:	930c      	str	r3, [sp, #48]	; 0x30
 80097fe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009800:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009804:	9c04      	ldr	r4, [sp, #16]
 8009806:	930b      	str	r3, [sp, #44]	; 0x2c
 8009808:	ab9a      	add	r3, sp, #616	; 0x268
 800980a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800980e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009812:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009816:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800981a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800981e:	ab9a      	add	r3, sp, #616	; 0x268
 8009820:	445b      	add	r3, fp
 8009822:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009826:	2500      	movs	r5, #0
 8009828:	1b63      	subs	r3, r4, r5
 800982a:	2b00      	cmp	r3, #0
 800982c:	dc78      	bgt.n	8009920 <__kernel_rem_pio2+0x1f8>
 800982e:	4650      	mov	r0, sl
 8009830:	ec49 8b10 	vmov	d0, r8, r9
 8009834:	f000 fc00 	bl	800a038 <scalbn>
 8009838:	ec57 6b10 	vmov	r6, r7, d0
 800983c:	2200      	movs	r2, #0
 800983e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009842:	ee10 0a10 	vmov	r0, s0
 8009846:	4639      	mov	r1, r7
 8009848:	f7f6 fed6 	bl	80005f8 <__aeabi_dmul>
 800984c:	ec41 0b10 	vmov	d0, r0, r1
 8009850:	f000 fb6e 	bl	8009f30 <floor>
 8009854:	2200      	movs	r2, #0
 8009856:	ec51 0b10 	vmov	r0, r1, d0
 800985a:	4b7e      	ldr	r3, [pc, #504]	; (8009a54 <__kernel_rem_pio2+0x32c>)
 800985c:	f7f6 fecc 	bl	80005f8 <__aeabi_dmul>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4630      	mov	r0, r6
 8009866:	4639      	mov	r1, r7
 8009868:	f7f6 fd0e 	bl	8000288 <__aeabi_dsub>
 800986c:	460f      	mov	r7, r1
 800986e:	4606      	mov	r6, r0
 8009870:	f7f7 f95c 	bl	8000b2c <__aeabi_d2iz>
 8009874:	9006      	str	r0, [sp, #24]
 8009876:	f7f6 fe55 	bl	8000524 <__aeabi_i2d>
 800987a:	4602      	mov	r2, r0
 800987c:	460b      	mov	r3, r1
 800987e:	4630      	mov	r0, r6
 8009880:	4639      	mov	r1, r7
 8009882:	f7f6 fd01 	bl	8000288 <__aeabi_dsub>
 8009886:	f1ba 0f00 	cmp.w	sl, #0
 800988a:	4606      	mov	r6, r0
 800988c:	460f      	mov	r7, r1
 800988e:	dd6c      	ble.n	800996a <__kernel_rem_pio2+0x242>
 8009890:	1e62      	subs	r2, r4, #1
 8009892:	ab0e      	add	r3, sp, #56	; 0x38
 8009894:	f1ca 0118 	rsb	r1, sl, #24
 8009898:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800989c:	9d06      	ldr	r5, [sp, #24]
 800989e:	fa40 f301 	asr.w	r3, r0, r1
 80098a2:	441d      	add	r5, r3
 80098a4:	408b      	lsls	r3, r1
 80098a6:	1ac0      	subs	r0, r0, r3
 80098a8:	ab0e      	add	r3, sp, #56	; 0x38
 80098aa:	9506      	str	r5, [sp, #24]
 80098ac:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80098b0:	f1ca 0317 	rsb	r3, sl, #23
 80098b4:	fa40 f303 	asr.w	r3, r0, r3
 80098b8:	9302      	str	r3, [sp, #8]
 80098ba:	9b02      	ldr	r3, [sp, #8]
 80098bc:	2b00      	cmp	r3, #0
 80098be:	dd62      	ble.n	8009986 <__kernel_rem_pio2+0x25e>
 80098c0:	9b06      	ldr	r3, [sp, #24]
 80098c2:	2200      	movs	r2, #0
 80098c4:	3301      	adds	r3, #1
 80098c6:	9306      	str	r3, [sp, #24]
 80098c8:	4615      	mov	r5, r2
 80098ca:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80098ce:	4294      	cmp	r4, r2
 80098d0:	f300 8095 	bgt.w	80099fe <__kernel_rem_pio2+0x2d6>
 80098d4:	f1ba 0f00 	cmp.w	sl, #0
 80098d8:	dd07      	ble.n	80098ea <__kernel_rem_pio2+0x1c2>
 80098da:	f1ba 0f01 	cmp.w	sl, #1
 80098de:	f000 80a2 	beq.w	8009a26 <__kernel_rem_pio2+0x2fe>
 80098e2:	f1ba 0f02 	cmp.w	sl, #2
 80098e6:	f000 80c1 	beq.w	8009a6c <__kernel_rem_pio2+0x344>
 80098ea:	9b02      	ldr	r3, [sp, #8]
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d14a      	bne.n	8009986 <__kernel_rem_pio2+0x25e>
 80098f0:	4632      	mov	r2, r6
 80098f2:	463b      	mov	r3, r7
 80098f4:	2000      	movs	r0, #0
 80098f6:	4958      	ldr	r1, [pc, #352]	; (8009a58 <__kernel_rem_pio2+0x330>)
 80098f8:	f7f6 fcc6 	bl	8000288 <__aeabi_dsub>
 80098fc:	4606      	mov	r6, r0
 80098fe:	460f      	mov	r7, r1
 8009900:	2d00      	cmp	r5, #0
 8009902:	d040      	beq.n	8009986 <__kernel_rem_pio2+0x25e>
 8009904:	4650      	mov	r0, sl
 8009906:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009a48 <__kernel_rem_pio2+0x320>
 800990a:	f000 fb95 	bl	800a038 <scalbn>
 800990e:	4630      	mov	r0, r6
 8009910:	4639      	mov	r1, r7
 8009912:	ec53 2b10 	vmov	r2, r3, d0
 8009916:	f7f6 fcb7 	bl	8000288 <__aeabi_dsub>
 800991a:	4606      	mov	r6, r0
 800991c:	460f      	mov	r7, r1
 800991e:	e032      	b.n	8009986 <__kernel_rem_pio2+0x25e>
 8009920:	2200      	movs	r2, #0
 8009922:	4b4e      	ldr	r3, [pc, #312]	; (8009a5c <__kernel_rem_pio2+0x334>)
 8009924:	4640      	mov	r0, r8
 8009926:	4649      	mov	r1, r9
 8009928:	f7f6 fe66 	bl	80005f8 <__aeabi_dmul>
 800992c:	f7f7 f8fe 	bl	8000b2c <__aeabi_d2iz>
 8009930:	f7f6 fdf8 	bl	8000524 <__aeabi_i2d>
 8009934:	2200      	movs	r2, #0
 8009936:	4b4a      	ldr	r3, [pc, #296]	; (8009a60 <__kernel_rem_pio2+0x338>)
 8009938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800993c:	f7f6 fe5c 	bl	80005f8 <__aeabi_dmul>
 8009940:	4602      	mov	r2, r0
 8009942:	460b      	mov	r3, r1
 8009944:	4640      	mov	r0, r8
 8009946:	4649      	mov	r1, r9
 8009948:	f7f6 fc9e 	bl	8000288 <__aeabi_dsub>
 800994c:	f7f7 f8ee 	bl	8000b2c <__aeabi_d2iz>
 8009950:	ab0e      	add	r3, sp, #56	; 0x38
 8009952:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009956:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800995a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800995e:	f7f6 fc95 	bl	800028c <__adddf3>
 8009962:	3501      	adds	r5, #1
 8009964:	4680      	mov	r8, r0
 8009966:	4689      	mov	r9, r1
 8009968:	e75e      	b.n	8009828 <__kernel_rem_pio2+0x100>
 800996a:	d105      	bne.n	8009978 <__kernel_rem_pio2+0x250>
 800996c:	1e63      	subs	r3, r4, #1
 800996e:	aa0e      	add	r2, sp, #56	; 0x38
 8009970:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009974:	15c3      	asrs	r3, r0, #23
 8009976:	e79f      	b.n	80098b8 <__kernel_rem_pio2+0x190>
 8009978:	2200      	movs	r2, #0
 800997a:	4b3a      	ldr	r3, [pc, #232]	; (8009a64 <__kernel_rem_pio2+0x33c>)
 800997c:	f7f7 f8c2 	bl	8000b04 <__aeabi_dcmpge>
 8009980:	2800      	cmp	r0, #0
 8009982:	d139      	bne.n	80099f8 <__kernel_rem_pio2+0x2d0>
 8009984:	9002      	str	r0, [sp, #8]
 8009986:	2200      	movs	r2, #0
 8009988:	2300      	movs	r3, #0
 800998a:	4630      	mov	r0, r6
 800998c:	4639      	mov	r1, r7
 800998e:	f7f7 f89b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009992:	2800      	cmp	r0, #0
 8009994:	f000 80c7 	beq.w	8009b26 <__kernel_rem_pio2+0x3fe>
 8009998:	1e65      	subs	r5, r4, #1
 800999a:	462b      	mov	r3, r5
 800999c:	2200      	movs	r2, #0
 800999e:	9904      	ldr	r1, [sp, #16]
 80099a0:	428b      	cmp	r3, r1
 80099a2:	da6a      	bge.n	8009a7a <__kernel_rem_pio2+0x352>
 80099a4:	2a00      	cmp	r2, #0
 80099a6:	f000 8088 	beq.w	8009aba <__kernel_rem_pio2+0x392>
 80099aa:	ab0e      	add	r3, sp, #56	; 0x38
 80099ac:	f1aa 0a18 	sub.w	sl, sl, #24
 80099b0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 80b4 	beq.w	8009b22 <__kernel_rem_pio2+0x3fa>
 80099ba:	4650      	mov	r0, sl
 80099bc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009a48 <__kernel_rem_pio2+0x320>
 80099c0:	f000 fb3a 	bl	800a038 <scalbn>
 80099c4:	00ec      	lsls	r4, r5, #3
 80099c6:	ab72      	add	r3, sp, #456	; 0x1c8
 80099c8:	191e      	adds	r6, r3, r4
 80099ca:	ec59 8b10 	vmov	r8, r9, d0
 80099ce:	f106 0a08 	add.w	sl, r6, #8
 80099d2:	462f      	mov	r7, r5
 80099d4:	2f00      	cmp	r7, #0
 80099d6:	f280 80df 	bge.w	8009b98 <__kernel_rem_pio2+0x470>
 80099da:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009a40 <__kernel_rem_pio2+0x318>
 80099de:	f04f 0a00 	mov.w	sl, #0
 80099e2:	eba5 030a 	sub.w	r3, r5, sl
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	f2c0 810a 	blt.w	8009c00 <__kernel_rem_pio2+0x4d8>
 80099ec:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009a68 <__kernel_rem_pio2+0x340>
 80099f0:	ec59 8b18 	vmov	r8, r9, d8
 80099f4:	2700      	movs	r7, #0
 80099f6:	e0f5      	b.n	8009be4 <__kernel_rem_pio2+0x4bc>
 80099f8:	2302      	movs	r3, #2
 80099fa:	9302      	str	r3, [sp, #8]
 80099fc:	e760      	b.n	80098c0 <__kernel_rem_pio2+0x198>
 80099fe:	ab0e      	add	r3, sp, #56	; 0x38
 8009a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a04:	b94d      	cbnz	r5, 8009a1a <__kernel_rem_pio2+0x2f2>
 8009a06:	b12b      	cbz	r3, 8009a14 <__kernel_rem_pio2+0x2ec>
 8009a08:	a80e      	add	r0, sp, #56	; 0x38
 8009a0a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009a0e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009a12:	2301      	movs	r3, #1
 8009a14:	3201      	adds	r2, #1
 8009a16:	461d      	mov	r5, r3
 8009a18:	e759      	b.n	80098ce <__kernel_rem_pio2+0x1a6>
 8009a1a:	a80e      	add	r0, sp, #56	; 0x38
 8009a1c:	1acb      	subs	r3, r1, r3
 8009a1e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009a22:	462b      	mov	r3, r5
 8009a24:	e7f6      	b.n	8009a14 <__kernel_rem_pio2+0x2ec>
 8009a26:	1e62      	subs	r2, r4, #1
 8009a28:	ab0e      	add	r3, sp, #56	; 0x38
 8009a2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a2e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009a32:	a90e      	add	r1, sp, #56	; 0x38
 8009a34:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009a38:	e757      	b.n	80098ea <__kernel_rem_pio2+0x1c2>
 8009a3a:	bf00      	nop
 8009a3c:	f3af 8000 	nop.w
	...
 8009a4c:	3ff00000 	.word	0x3ff00000
 8009a50:	0800a3d8 	.word	0x0800a3d8
 8009a54:	40200000 	.word	0x40200000
 8009a58:	3ff00000 	.word	0x3ff00000
 8009a5c:	3e700000 	.word	0x3e700000
 8009a60:	41700000 	.word	0x41700000
 8009a64:	3fe00000 	.word	0x3fe00000
 8009a68:	0800a398 	.word	0x0800a398
 8009a6c:	1e62      	subs	r2, r4, #1
 8009a6e:	ab0e      	add	r3, sp, #56	; 0x38
 8009a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a74:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009a78:	e7db      	b.n	8009a32 <__kernel_rem_pio2+0x30a>
 8009a7a:	a90e      	add	r1, sp, #56	; 0x38
 8009a7c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009a80:	3b01      	subs	r3, #1
 8009a82:	430a      	orrs	r2, r1
 8009a84:	e78b      	b.n	800999e <__kernel_rem_pio2+0x276>
 8009a86:	3301      	adds	r3, #1
 8009a88:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009a8c:	2900      	cmp	r1, #0
 8009a8e:	d0fa      	beq.n	8009a86 <__kernel_rem_pio2+0x35e>
 8009a90:	9a08      	ldr	r2, [sp, #32]
 8009a92:	4422      	add	r2, r4
 8009a94:	00d2      	lsls	r2, r2, #3
 8009a96:	a922      	add	r1, sp, #136	; 0x88
 8009a98:	18e3      	adds	r3, r4, r3
 8009a9a:	9206      	str	r2, [sp, #24]
 8009a9c:	440a      	add	r2, r1
 8009a9e:	9302      	str	r3, [sp, #8]
 8009aa0:	f10b 0108 	add.w	r1, fp, #8
 8009aa4:	f102 0308 	add.w	r3, r2, #8
 8009aa8:	1c66      	adds	r6, r4, #1
 8009aaa:	910a      	str	r1, [sp, #40]	; 0x28
 8009aac:	2500      	movs	r5, #0
 8009aae:	930d      	str	r3, [sp, #52]	; 0x34
 8009ab0:	9b02      	ldr	r3, [sp, #8]
 8009ab2:	42b3      	cmp	r3, r6
 8009ab4:	da04      	bge.n	8009ac0 <__kernel_rem_pio2+0x398>
 8009ab6:	461c      	mov	r4, r3
 8009ab8:	e6a6      	b.n	8009808 <__kernel_rem_pio2+0xe0>
 8009aba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009abc:	2301      	movs	r3, #1
 8009abe:	e7e3      	b.n	8009a88 <__kernel_rem_pio2+0x360>
 8009ac0:	9b06      	ldr	r3, [sp, #24]
 8009ac2:	18ef      	adds	r7, r5, r3
 8009ac4:	ab22      	add	r3, sp, #136	; 0x88
 8009ac6:	441f      	add	r7, r3
 8009ac8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aca:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009ace:	f7f6 fd29 	bl	8000524 <__aeabi_i2d>
 8009ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ad4:	461c      	mov	r4, r3
 8009ad6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ad8:	e9c7 0100 	strd	r0, r1, [r7]
 8009adc:	eb03 0b05 	add.w	fp, r3, r5
 8009ae0:	2700      	movs	r7, #0
 8009ae2:	f04f 0800 	mov.w	r8, #0
 8009ae6:	f04f 0900 	mov.w	r9, #0
 8009aea:	9b07      	ldr	r3, [sp, #28]
 8009aec:	429f      	cmp	r7, r3
 8009aee:	dd08      	ble.n	8009b02 <__kernel_rem_pio2+0x3da>
 8009af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009af2:	aa72      	add	r2, sp, #456	; 0x1c8
 8009af4:	18eb      	adds	r3, r5, r3
 8009af6:	4413      	add	r3, r2
 8009af8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8009afc:	3601      	adds	r6, #1
 8009afe:	3508      	adds	r5, #8
 8009b00:	e7d6      	b.n	8009ab0 <__kernel_rem_pio2+0x388>
 8009b02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009b06:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009b0a:	f7f6 fd75 	bl	80005f8 <__aeabi_dmul>
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	4640      	mov	r0, r8
 8009b14:	4649      	mov	r1, r9
 8009b16:	f7f6 fbb9 	bl	800028c <__adddf3>
 8009b1a:	3701      	adds	r7, #1
 8009b1c:	4680      	mov	r8, r0
 8009b1e:	4689      	mov	r9, r1
 8009b20:	e7e3      	b.n	8009aea <__kernel_rem_pio2+0x3c2>
 8009b22:	3d01      	subs	r5, #1
 8009b24:	e741      	b.n	80099aa <__kernel_rem_pio2+0x282>
 8009b26:	f1ca 0000 	rsb	r0, sl, #0
 8009b2a:	ec47 6b10 	vmov	d0, r6, r7
 8009b2e:	f000 fa83 	bl	800a038 <scalbn>
 8009b32:	ec57 6b10 	vmov	r6, r7, d0
 8009b36:	2200      	movs	r2, #0
 8009b38:	4b99      	ldr	r3, [pc, #612]	; (8009da0 <__kernel_rem_pio2+0x678>)
 8009b3a:	ee10 0a10 	vmov	r0, s0
 8009b3e:	4639      	mov	r1, r7
 8009b40:	f7f6 ffe0 	bl	8000b04 <__aeabi_dcmpge>
 8009b44:	b1f8      	cbz	r0, 8009b86 <__kernel_rem_pio2+0x45e>
 8009b46:	2200      	movs	r2, #0
 8009b48:	4b96      	ldr	r3, [pc, #600]	; (8009da4 <__kernel_rem_pio2+0x67c>)
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	4639      	mov	r1, r7
 8009b4e:	f7f6 fd53 	bl	80005f8 <__aeabi_dmul>
 8009b52:	f7f6 ffeb 	bl	8000b2c <__aeabi_d2iz>
 8009b56:	4680      	mov	r8, r0
 8009b58:	f7f6 fce4 	bl	8000524 <__aeabi_i2d>
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	4b90      	ldr	r3, [pc, #576]	; (8009da0 <__kernel_rem_pio2+0x678>)
 8009b60:	f7f6 fd4a 	bl	80005f8 <__aeabi_dmul>
 8009b64:	460b      	mov	r3, r1
 8009b66:	4602      	mov	r2, r0
 8009b68:	4639      	mov	r1, r7
 8009b6a:	4630      	mov	r0, r6
 8009b6c:	f7f6 fb8c 	bl	8000288 <__aeabi_dsub>
 8009b70:	f7f6 ffdc 	bl	8000b2c <__aeabi_d2iz>
 8009b74:	1c65      	adds	r5, r4, #1
 8009b76:	ab0e      	add	r3, sp, #56	; 0x38
 8009b78:	f10a 0a18 	add.w	sl, sl, #24
 8009b7c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b80:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009b84:	e719      	b.n	80099ba <__kernel_rem_pio2+0x292>
 8009b86:	4630      	mov	r0, r6
 8009b88:	4639      	mov	r1, r7
 8009b8a:	f7f6 ffcf 	bl	8000b2c <__aeabi_d2iz>
 8009b8e:	ab0e      	add	r3, sp, #56	; 0x38
 8009b90:	4625      	mov	r5, r4
 8009b92:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009b96:	e710      	b.n	80099ba <__kernel_rem_pio2+0x292>
 8009b98:	ab0e      	add	r3, sp, #56	; 0x38
 8009b9a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009b9e:	f7f6 fcc1 	bl	8000524 <__aeabi_i2d>
 8009ba2:	4642      	mov	r2, r8
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	f7f6 fd27 	bl	80005f8 <__aeabi_dmul>
 8009baa:	2200      	movs	r2, #0
 8009bac:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009bb0:	4b7c      	ldr	r3, [pc, #496]	; (8009da4 <__kernel_rem_pio2+0x67c>)
 8009bb2:	4640      	mov	r0, r8
 8009bb4:	4649      	mov	r1, r9
 8009bb6:	f7f6 fd1f 	bl	80005f8 <__aeabi_dmul>
 8009bba:	3f01      	subs	r7, #1
 8009bbc:	4680      	mov	r8, r0
 8009bbe:	4689      	mov	r9, r1
 8009bc0:	e708      	b.n	80099d4 <__kernel_rem_pio2+0x2ac>
 8009bc2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bca:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8009bce:	f7f6 fd13 	bl	80005f8 <__aeabi_dmul>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	4649      	mov	r1, r9
 8009bda:	f7f6 fb57 	bl	800028c <__adddf3>
 8009bde:	3701      	adds	r7, #1
 8009be0:	4680      	mov	r8, r0
 8009be2:	4689      	mov	r9, r1
 8009be4:	9b04      	ldr	r3, [sp, #16]
 8009be6:	429f      	cmp	r7, r3
 8009be8:	dc01      	bgt.n	8009bee <__kernel_rem_pio2+0x4c6>
 8009bea:	45ba      	cmp	sl, r7
 8009bec:	dae9      	bge.n	8009bc2 <__kernel_rem_pio2+0x49a>
 8009bee:	ab4a      	add	r3, sp, #296	; 0x128
 8009bf0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009bf4:	e9c3 8900 	strd	r8, r9, [r3]
 8009bf8:	f10a 0a01 	add.w	sl, sl, #1
 8009bfc:	3e08      	subs	r6, #8
 8009bfe:	e6f0      	b.n	80099e2 <__kernel_rem_pio2+0x2ba>
 8009c00:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009c02:	2b03      	cmp	r3, #3
 8009c04:	d85b      	bhi.n	8009cbe <__kernel_rem_pio2+0x596>
 8009c06:	e8df f003 	tbb	[pc, r3]
 8009c0a:	264a      	.short	0x264a
 8009c0c:	0226      	.short	0x0226
 8009c0e:	ab9a      	add	r3, sp, #616	; 0x268
 8009c10:	441c      	add	r4, r3
 8009c12:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009c16:	46a2      	mov	sl, r4
 8009c18:	46ab      	mov	fp, r5
 8009c1a:	f1bb 0f00 	cmp.w	fp, #0
 8009c1e:	dc6c      	bgt.n	8009cfa <__kernel_rem_pio2+0x5d2>
 8009c20:	46a2      	mov	sl, r4
 8009c22:	46ab      	mov	fp, r5
 8009c24:	f1bb 0f01 	cmp.w	fp, #1
 8009c28:	f300 8086 	bgt.w	8009d38 <__kernel_rem_pio2+0x610>
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	2100      	movs	r1, #0
 8009c30:	2d01      	cmp	r5, #1
 8009c32:	f300 80a0 	bgt.w	8009d76 <__kernel_rem_pio2+0x64e>
 8009c36:	9b02      	ldr	r3, [sp, #8]
 8009c38:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009c3c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	f040 809e 	bne.w	8009d82 <__kernel_rem_pio2+0x65a>
 8009c46:	9b01      	ldr	r3, [sp, #4]
 8009c48:	e9c3 7800 	strd	r7, r8, [r3]
 8009c4c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009c50:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009c54:	e033      	b.n	8009cbe <__kernel_rem_pio2+0x596>
 8009c56:	3408      	adds	r4, #8
 8009c58:	ab4a      	add	r3, sp, #296	; 0x128
 8009c5a:	441c      	add	r4, r3
 8009c5c:	462e      	mov	r6, r5
 8009c5e:	2000      	movs	r0, #0
 8009c60:	2100      	movs	r1, #0
 8009c62:	2e00      	cmp	r6, #0
 8009c64:	da3a      	bge.n	8009cdc <__kernel_rem_pio2+0x5b4>
 8009c66:	9b02      	ldr	r3, [sp, #8]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d03d      	beq.n	8009ce8 <__kernel_rem_pio2+0x5c0>
 8009c6c:	4602      	mov	r2, r0
 8009c6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c72:	9c01      	ldr	r4, [sp, #4]
 8009c74:	e9c4 2300 	strd	r2, r3, [r4]
 8009c78:	4602      	mov	r2, r0
 8009c7a:	460b      	mov	r3, r1
 8009c7c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009c80:	f7f6 fb02 	bl	8000288 <__aeabi_dsub>
 8009c84:	ae4c      	add	r6, sp, #304	; 0x130
 8009c86:	2401      	movs	r4, #1
 8009c88:	42a5      	cmp	r5, r4
 8009c8a:	da30      	bge.n	8009cee <__kernel_rem_pio2+0x5c6>
 8009c8c:	9b02      	ldr	r3, [sp, #8]
 8009c8e:	b113      	cbz	r3, 8009c96 <__kernel_rem_pio2+0x56e>
 8009c90:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009c94:	4619      	mov	r1, r3
 8009c96:	9b01      	ldr	r3, [sp, #4]
 8009c98:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009c9c:	e00f      	b.n	8009cbe <__kernel_rem_pio2+0x596>
 8009c9e:	ab9a      	add	r3, sp, #616	; 0x268
 8009ca0:	441c      	add	r4, r3
 8009ca2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009ca6:	2000      	movs	r0, #0
 8009ca8:	2100      	movs	r1, #0
 8009caa:	2d00      	cmp	r5, #0
 8009cac:	da10      	bge.n	8009cd0 <__kernel_rem_pio2+0x5a8>
 8009cae:	9b02      	ldr	r3, [sp, #8]
 8009cb0:	b113      	cbz	r3, 8009cb8 <__kernel_rem_pio2+0x590>
 8009cb2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	9b01      	ldr	r3, [sp, #4]
 8009cba:	e9c3 0100 	strd	r0, r1, [r3]
 8009cbe:	9b06      	ldr	r3, [sp, #24]
 8009cc0:	f003 0007 	and.w	r0, r3, #7
 8009cc4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009cc8:	ecbd 8b02 	vpop	{d8}
 8009ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cd0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009cd4:	f7f6 fada 	bl	800028c <__adddf3>
 8009cd8:	3d01      	subs	r5, #1
 8009cda:	e7e6      	b.n	8009caa <__kernel_rem_pio2+0x582>
 8009cdc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009ce0:	f7f6 fad4 	bl	800028c <__adddf3>
 8009ce4:	3e01      	subs	r6, #1
 8009ce6:	e7bc      	b.n	8009c62 <__kernel_rem_pio2+0x53a>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	e7c1      	b.n	8009c72 <__kernel_rem_pio2+0x54a>
 8009cee:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009cf2:	f7f6 facb 	bl	800028c <__adddf3>
 8009cf6:	3401      	adds	r4, #1
 8009cf8:	e7c6      	b.n	8009c88 <__kernel_rem_pio2+0x560>
 8009cfa:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8009cfe:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009d02:	4640      	mov	r0, r8
 8009d04:	ec53 2b17 	vmov	r2, r3, d7
 8009d08:	4649      	mov	r1, r9
 8009d0a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d0e:	f7f6 fabd 	bl	800028c <__adddf3>
 8009d12:	4602      	mov	r2, r0
 8009d14:	460b      	mov	r3, r1
 8009d16:	4606      	mov	r6, r0
 8009d18:	460f      	mov	r7, r1
 8009d1a:	4640      	mov	r0, r8
 8009d1c:	4649      	mov	r1, r9
 8009d1e:	f7f6 fab3 	bl	8000288 <__aeabi_dsub>
 8009d22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d26:	f7f6 fab1 	bl	800028c <__adddf3>
 8009d2a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009d2e:	e9ca 0100 	strd	r0, r1, [sl]
 8009d32:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8009d36:	e770      	b.n	8009c1a <__kernel_rem_pio2+0x4f2>
 8009d38:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8009d3c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009d40:	4630      	mov	r0, r6
 8009d42:	ec53 2b17 	vmov	r2, r3, d7
 8009d46:	4639      	mov	r1, r7
 8009d48:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009d4c:	f7f6 fa9e 	bl	800028c <__adddf3>
 8009d50:	4602      	mov	r2, r0
 8009d52:	460b      	mov	r3, r1
 8009d54:	4680      	mov	r8, r0
 8009d56:	4689      	mov	r9, r1
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	f7f6 fa94 	bl	8000288 <__aeabi_dsub>
 8009d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d64:	f7f6 fa92 	bl	800028c <__adddf3>
 8009d68:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009d6c:	e9ca 0100 	strd	r0, r1, [sl]
 8009d70:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8009d74:	e756      	b.n	8009c24 <__kernel_rem_pio2+0x4fc>
 8009d76:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d7a:	f7f6 fa87 	bl	800028c <__adddf3>
 8009d7e:	3d01      	subs	r5, #1
 8009d80:	e756      	b.n	8009c30 <__kernel_rem_pio2+0x508>
 8009d82:	9b01      	ldr	r3, [sp, #4]
 8009d84:	9a01      	ldr	r2, [sp, #4]
 8009d86:	601f      	str	r7, [r3, #0]
 8009d88:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009d8c:	605c      	str	r4, [r3, #4]
 8009d8e:	609d      	str	r5, [r3, #8]
 8009d90:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009d94:	60d3      	str	r3, [r2, #12]
 8009d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d9a:	6110      	str	r0, [r2, #16]
 8009d9c:	6153      	str	r3, [r2, #20]
 8009d9e:	e78e      	b.n	8009cbe <__kernel_rem_pio2+0x596>
 8009da0:	41700000 	.word	0x41700000
 8009da4:	3e700000 	.word	0x3e700000

08009da8 <__kernel_sin>:
 8009da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dac:	ec55 4b10 	vmov	r4, r5, d0
 8009db0:	b085      	sub	sp, #20
 8009db2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009db6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009dba:	ed8d 1b00 	vstr	d1, [sp]
 8009dbe:	9002      	str	r0, [sp, #8]
 8009dc0:	da06      	bge.n	8009dd0 <__kernel_sin+0x28>
 8009dc2:	ee10 0a10 	vmov	r0, s0
 8009dc6:	4629      	mov	r1, r5
 8009dc8:	f7f6 feb0 	bl	8000b2c <__aeabi_d2iz>
 8009dcc:	2800      	cmp	r0, #0
 8009dce:	d051      	beq.n	8009e74 <__kernel_sin+0xcc>
 8009dd0:	4622      	mov	r2, r4
 8009dd2:	462b      	mov	r3, r5
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fc0e 	bl	80005f8 <__aeabi_dmul>
 8009ddc:	4682      	mov	sl, r0
 8009dde:	468b      	mov	fp, r1
 8009de0:	4602      	mov	r2, r0
 8009de2:	460b      	mov	r3, r1
 8009de4:	4620      	mov	r0, r4
 8009de6:	4629      	mov	r1, r5
 8009de8:	f7f6 fc06 	bl	80005f8 <__aeabi_dmul>
 8009dec:	a341      	add	r3, pc, #260	; (adr r3, 8009ef4 <__kernel_sin+0x14c>)
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	4680      	mov	r8, r0
 8009df4:	4689      	mov	r9, r1
 8009df6:	4650      	mov	r0, sl
 8009df8:	4659      	mov	r1, fp
 8009dfa:	f7f6 fbfd 	bl	80005f8 <__aeabi_dmul>
 8009dfe:	a33f      	add	r3, pc, #252	; (adr r3, 8009efc <__kernel_sin+0x154>)
 8009e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e04:	f7f6 fa40 	bl	8000288 <__aeabi_dsub>
 8009e08:	4652      	mov	r2, sl
 8009e0a:	465b      	mov	r3, fp
 8009e0c:	f7f6 fbf4 	bl	80005f8 <__aeabi_dmul>
 8009e10:	a33c      	add	r3, pc, #240	; (adr r3, 8009f04 <__kernel_sin+0x15c>)
 8009e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e16:	f7f6 fa39 	bl	800028c <__adddf3>
 8009e1a:	4652      	mov	r2, sl
 8009e1c:	465b      	mov	r3, fp
 8009e1e:	f7f6 fbeb 	bl	80005f8 <__aeabi_dmul>
 8009e22:	a33a      	add	r3, pc, #232	; (adr r3, 8009f0c <__kernel_sin+0x164>)
 8009e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e28:	f7f6 fa2e 	bl	8000288 <__aeabi_dsub>
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	465b      	mov	r3, fp
 8009e30:	f7f6 fbe2 	bl	80005f8 <__aeabi_dmul>
 8009e34:	a337      	add	r3, pc, #220	; (adr r3, 8009f14 <__kernel_sin+0x16c>)
 8009e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e3a:	f7f6 fa27 	bl	800028c <__adddf3>
 8009e3e:	9b02      	ldr	r3, [sp, #8]
 8009e40:	4606      	mov	r6, r0
 8009e42:	460f      	mov	r7, r1
 8009e44:	b9db      	cbnz	r3, 8009e7e <__kernel_sin+0xd6>
 8009e46:	4602      	mov	r2, r0
 8009e48:	460b      	mov	r3, r1
 8009e4a:	4650      	mov	r0, sl
 8009e4c:	4659      	mov	r1, fp
 8009e4e:	f7f6 fbd3 	bl	80005f8 <__aeabi_dmul>
 8009e52:	a325      	add	r3, pc, #148	; (adr r3, 8009ee8 <__kernel_sin+0x140>)
 8009e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e58:	f7f6 fa16 	bl	8000288 <__aeabi_dsub>
 8009e5c:	4642      	mov	r2, r8
 8009e5e:	464b      	mov	r3, r9
 8009e60:	f7f6 fbca 	bl	80005f8 <__aeabi_dmul>
 8009e64:	4602      	mov	r2, r0
 8009e66:	460b      	mov	r3, r1
 8009e68:	4620      	mov	r0, r4
 8009e6a:	4629      	mov	r1, r5
 8009e6c:	f7f6 fa0e 	bl	800028c <__adddf3>
 8009e70:	4604      	mov	r4, r0
 8009e72:	460d      	mov	r5, r1
 8009e74:	ec45 4b10 	vmov	d0, r4, r5
 8009e78:	b005      	add	sp, #20
 8009e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e7e:	2200      	movs	r2, #0
 8009e80:	4b1b      	ldr	r3, [pc, #108]	; (8009ef0 <__kernel_sin+0x148>)
 8009e82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e86:	f7f6 fbb7 	bl	80005f8 <__aeabi_dmul>
 8009e8a:	4632      	mov	r2, r6
 8009e8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e90:	463b      	mov	r3, r7
 8009e92:	4640      	mov	r0, r8
 8009e94:	4649      	mov	r1, r9
 8009e96:	f7f6 fbaf 	bl	80005f8 <__aeabi_dmul>
 8009e9a:	4602      	mov	r2, r0
 8009e9c:	460b      	mov	r3, r1
 8009e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009ea2:	f7f6 f9f1 	bl	8000288 <__aeabi_dsub>
 8009ea6:	4652      	mov	r2, sl
 8009ea8:	465b      	mov	r3, fp
 8009eaa:	f7f6 fba5 	bl	80005f8 <__aeabi_dmul>
 8009eae:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eb2:	f7f6 f9e9 	bl	8000288 <__aeabi_dsub>
 8009eb6:	a30c      	add	r3, pc, #48	; (adr r3, 8009ee8 <__kernel_sin+0x140>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	4606      	mov	r6, r0
 8009ebe:	460f      	mov	r7, r1
 8009ec0:	4640      	mov	r0, r8
 8009ec2:	4649      	mov	r1, r9
 8009ec4:	f7f6 fb98 	bl	80005f8 <__aeabi_dmul>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4630      	mov	r0, r6
 8009ece:	4639      	mov	r1, r7
 8009ed0:	f7f6 f9dc 	bl	800028c <__adddf3>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	4620      	mov	r0, r4
 8009eda:	4629      	mov	r1, r5
 8009edc:	f7f6 f9d4 	bl	8000288 <__aeabi_dsub>
 8009ee0:	e7c6      	b.n	8009e70 <__kernel_sin+0xc8>
 8009ee2:	bf00      	nop
 8009ee4:	f3af 8000 	nop.w
 8009ee8:	55555549 	.word	0x55555549
 8009eec:	3fc55555 	.word	0x3fc55555
 8009ef0:	3fe00000 	.word	0x3fe00000
 8009ef4:	5acfd57c 	.word	0x5acfd57c
 8009ef8:	3de5d93a 	.word	0x3de5d93a
 8009efc:	8a2b9ceb 	.word	0x8a2b9ceb
 8009f00:	3e5ae5e6 	.word	0x3e5ae5e6
 8009f04:	57b1fe7d 	.word	0x57b1fe7d
 8009f08:	3ec71de3 	.word	0x3ec71de3
 8009f0c:	19c161d5 	.word	0x19c161d5
 8009f10:	3f2a01a0 	.word	0x3f2a01a0
 8009f14:	1110f8a6 	.word	0x1110f8a6
 8009f18:	3f811111 	.word	0x3f811111

08009f1c <fabs>:
 8009f1c:	ec51 0b10 	vmov	r0, r1, d0
 8009f20:	ee10 2a10 	vmov	r2, s0
 8009f24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f28:	ec43 2b10 	vmov	d0, r2, r3
 8009f2c:	4770      	bx	lr
	...

08009f30 <floor>:
 8009f30:	ec51 0b10 	vmov	r0, r1, d0
 8009f34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f38:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009f3c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009f40:	2e13      	cmp	r6, #19
 8009f42:	460c      	mov	r4, r1
 8009f44:	ee10 5a10 	vmov	r5, s0
 8009f48:	4680      	mov	r8, r0
 8009f4a:	dc34      	bgt.n	8009fb6 <floor+0x86>
 8009f4c:	2e00      	cmp	r6, #0
 8009f4e:	da16      	bge.n	8009f7e <floor+0x4e>
 8009f50:	a335      	add	r3, pc, #212	; (adr r3, 800a028 <floor+0xf8>)
 8009f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f56:	f7f6 f999 	bl	800028c <__adddf3>
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	f7f6 fddb 	bl	8000b18 <__aeabi_dcmpgt>
 8009f62:	b148      	cbz	r0, 8009f78 <floor+0x48>
 8009f64:	2c00      	cmp	r4, #0
 8009f66:	da59      	bge.n	800a01c <floor+0xec>
 8009f68:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009f6c:	4a30      	ldr	r2, [pc, #192]	; (800a030 <floor+0x100>)
 8009f6e:	432b      	orrs	r3, r5
 8009f70:	2500      	movs	r5, #0
 8009f72:	42ab      	cmp	r3, r5
 8009f74:	bf18      	it	ne
 8009f76:	4614      	movne	r4, r2
 8009f78:	4621      	mov	r1, r4
 8009f7a:	4628      	mov	r0, r5
 8009f7c:	e025      	b.n	8009fca <floor+0x9a>
 8009f7e:	4f2d      	ldr	r7, [pc, #180]	; (800a034 <floor+0x104>)
 8009f80:	4137      	asrs	r7, r6
 8009f82:	ea01 0307 	and.w	r3, r1, r7
 8009f86:	4303      	orrs	r3, r0
 8009f88:	d01f      	beq.n	8009fca <floor+0x9a>
 8009f8a:	a327      	add	r3, pc, #156	; (adr r3, 800a028 <floor+0xf8>)
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f7f6 f97c 	bl	800028c <__adddf3>
 8009f94:	2200      	movs	r2, #0
 8009f96:	2300      	movs	r3, #0
 8009f98:	f7f6 fdbe 	bl	8000b18 <__aeabi_dcmpgt>
 8009f9c:	2800      	cmp	r0, #0
 8009f9e:	d0eb      	beq.n	8009f78 <floor+0x48>
 8009fa0:	2c00      	cmp	r4, #0
 8009fa2:	bfbe      	ittt	lt
 8009fa4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009fa8:	fa43 f606 	asrlt.w	r6, r3, r6
 8009fac:	19a4      	addlt	r4, r4, r6
 8009fae:	ea24 0407 	bic.w	r4, r4, r7
 8009fb2:	2500      	movs	r5, #0
 8009fb4:	e7e0      	b.n	8009f78 <floor+0x48>
 8009fb6:	2e33      	cmp	r6, #51	; 0x33
 8009fb8:	dd0b      	ble.n	8009fd2 <floor+0xa2>
 8009fba:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009fbe:	d104      	bne.n	8009fca <floor+0x9a>
 8009fc0:	ee10 2a10 	vmov	r2, s0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	f7f6 f961 	bl	800028c <__adddf3>
 8009fca:	ec41 0b10 	vmov	d0, r0, r1
 8009fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009fd2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009fd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009fda:	fa23 f707 	lsr.w	r7, r3, r7
 8009fde:	4207      	tst	r7, r0
 8009fe0:	d0f3      	beq.n	8009fca <floor+0x9a>
 8009fe2:	a311      	add	r3, pc, #68	; (adr r3, 800a028 <floor+0xf8>)
 8009fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe8:	f7f6 f950 	bl	800028c <__adddf3>
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f7f6 fd92 	bl	8000b18 <__aeabi_dcmpgt>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d0bf      	beq.n	8009f78 <floor+0x48>
 8009ff8:	2c00      	cmp	r4, #0
 8009ffa:	da02      	bge.n	800a002 <floor+0xd2>
 8009ffc:	2e14      	cmp	r6, #20
 8009ffe:	d103      	bne.n	800a008 <floor+0xd8>
 800a000:	3401      	adds	r4, #1
 800a002:	ea25 0507 	bic.w	r5, r5, r7
 800a006:	e7b7      	b.n	8009f78 <floor+0x48>
 800a008:	2301      	movs	r3, #1
 800a00a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a00e:	fa03 f606 	lsl.w	r6, r3, r6
 800a012:	4435      	add	r5, r6
 800a014:	4545      	cmp	r5, r8
 800a016:	bf38      	it	cc
 800a018:	18e4      	addcc	r4, r4, r3
 800a01a:	e7f2      	b.n	800a002 <floor+0xd2>
 800a01c:	2500      	movs	r5, #0
 800a01e:	462c      	mov	r4, r5
 800a020:	e7aa      	b.n	8009f78 <floor+0x48>
 800a022:	bf00      	nop
 800a024:	f3af 8000 	nop.w
 800a028:	8800759c 	.word	0x8800759c
 800a02c:	7e37e43c 	.word	0x7e37e43c
 800a030:	bff00000 	.word	0xbff00000
 800a034:	000fffff 	.word	0x000fffff

0800a038 <scalbn>:
 800a038:	b570      	push	{r4, r5, r6, lr}
 800a03a:	ec55 4b10 	vmov	r4, r5, d0
 800a03e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a042:	4606      	mov	r6, r0
 800a044:	462b      	mov	r3, r5
 800a046:	b9aa      	cbnz	r2, 800a074 <scalbn+0x3c>
 800a048:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a04c:	4323      	orrs	r3, r4
 800a04e:	d03b      	beq.n	800a0c8 <scalbn+0x90>
 800a050:	4b31      	ldr	r3, [pc, #196]	; (800a118 <scalbn+0xe0>)
 800a052:	4629      	mov	r1, r5
 800a054:	2200      	movs	r2, #0
 800a056:	ee10 0a10 	vmov	r0, s0
 800a05a:	f7f6 facd 	bl	80005f8 <__aeabi_dmul>
 800a05e:	4b2f      	ldr	r3, [pc, #188]	; (800a11c <scalbn+0xe4>)
 800a060:	429e      	cmp	r6, r3
 800a062:	4604      	mov	r4, r0
 800a064:	460d      	mov	r5, r1
 800a066:	da12      	bge.n	800a08e <scalbn+0x56>
 800a068:	a327      	add	r3, pc, #156	; (adr r3, 800a108 <scalbn+0xd0>)
 800a06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a06e:	f7f6 fac3 	bl	80005f8 <__aeabi_dmul>
 800a072:	e009      	b.n	800a088 <scalbn+0x50>
 800a074:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a078:	428a      	cmp	r2, r1
 800a07a:	d10c      	bne.n	800a096 <scalbn+0x5e>
 800a07c:	ee10 2a10 	vmov	r2, s0
 800a080:	4620      	mov	r0, r4
 800a082:	4629      	mov	r1, r5
 800a084:	f7f6 f902 	bl	800028c <__adddf3>
 800a088:	4604      	mov	r4, r0
 800a08a:	460d      	mov	r5, r1
 800a08c:	e01c      	b.n	800a0c8 <scalbn+0x90>
 800a08e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a092:	460b      	mov	r3, r1
 800a094:	3a36      	subs	r2, #54	; 0x36
 800a096:	4432      	add	r2, r6
 800a098:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a09c:	428a      	cmp	r2, r1
 800a09e:	dd0b      	ble.n	800a0b8 <scalbn+0x80>
 800a0a0:	ec45 4b11 	vmov	d1, r4, r5
 800a0a4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a110 <scalbn+0xd8>
 800a0a8:	f000 f83c 	bl	800a124 <copysign>
 800a0ac:	a318      	add	r3, pc, #96	; (adr r3, 800a110 <scalbn+0xd8>)
 800a0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b2:	ec51 0b10 	vmov	r0, r1, d0
 800a0b6:	e7da      	b.n	800a06e <scalbn+0x36>
 800a0b8:	2a00      	cmp	r2, #0
 800a0ba:	dd08      	ble.n	800a0ce <scalbn+0x96>
 800a0bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0c8:	ec45 4b10 	vmov	d0, r4, r5
 800a0cc:	bd70      	pop	{r4, r5, r6, pc}
 800a0ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a0d2:	da0d      	bge.n	800a0f0 <scalbn+0xb8>
 800a0d4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a0d8:	429e      	cmp	r6, r3
 800a0da:	ec45 4b11 	vmov	d1, r4, r5
 800a0de:	dce1      	bgt.n	800a0a4 <scalbn+0x6c>
 800a0e0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a108 <scalbn+0xd0>
 800a0e4:	f000 f81e 	bl	800a124 <copysign>
 800a0e8:	a307      	add	r3, pc, #28	; (adr r3, 800a108 <scalbn+0xd0>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	e7e0      	b.n	800a0b2 <scalbn+0x7a>
 800a0f0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a0f4:	3236      	adds	r2, #54	; 0x36
 800a0f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a0fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a0fe:	4620      	mov	r0, r4
 800a100:	4629      	mov	r1, r5
 800a102:	2200      	movs	r2, #0
 800a104:	4b06      	ldr	r3, [pc, #24]	; (800a120 <scalbn+0xe8>)
 800a106:	e7b2      	b.n	800a06e <scalbn+0x36>
 800a108:	c2f8f359 	.word	0xc2f8f359
 800a10c:	01a56e1f 	.word	0x01a56e1f
 800a110:	8800759c 	.word	0x8800759c
 800a114:	7e37e43c 	.word	0x7e37e43c
 800a118:	43500000 	.word	0x43500000
 800a11c:	ffff3cb0 	.word	0xffff3cb0
 800a120:	3c900000 	.word	0x3c900000

0800a124 <copysign>:
 800a124:	ec51 0b10 	vmov	r0, r1, d0
 800a128:	ee11 0a90 	vmov	r0, s3
 800a12c:	ee10 2a10 	vmov	r2, s0
 800a130:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a134:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a138:	ea41 0300 	orr.w	r3, r1, r0
 800a13c:	ec43 2b10 	vmov	d0, r2, r3
 800a140:	4770      	bx	lr
	...

0800a144 <_init>:
 800a144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a146:	bf00      	nop
 800a148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a14a:	bc08      	pop	{r3}
 800a14c:	469e      	mov	lr, r3
 800a14e:	4770      	bx	lr

0800a150 <_fini>:
 800a150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a152:	bf00      	nop
 800a154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a156:	bc08      	pop	{r3}
 800a158:	469e      	mov	lr, r3
 800a15a:	4770      	bx	lr
