
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b0  08008ef0  08008ef0  00018ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080097a0  080097a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097a8  080097a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097a8  080097a8  000197a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097ac  080097ac  000197ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080097b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000070  08009820  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  08009820  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016606  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002949  00000000  00000000  000366a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  00038ff0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001fdd6  00000000  00000000  0003a3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000f243  00000000  00000000  0005a1be  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000cc591  00000000  00000000  00069401  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00135992  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 000012c8  00000000  00000000  00135a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00005a74  00000000  00000000  00136cd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008ed8 	.word	0x08008ed8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008ed8 	.word	0x08008ed8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b10:	f000 b972 	b.w	8000df8 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	4604      	mov	r4, r0
 8000b34:	4688      	mov	r8, r1
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d14b      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3a:	428a      	cmp	r2, r1
 8000b3c:	4615      	mov	r5, r2
 8000b3e:	d967      	bls.n	8000c10 <__udivmoddi4+0xe4>
 8000b40:	fab2 f282 	clz	r2, r2
 8000b44:	b14a      	cbz	r2, 8000b5a <__udivmoddi4+0x2e>
 8000b46:	f1c2 0720 	rsb	r7, r2, #32
 8000b4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b52:	4095      	lsls	r5, r2
 8000b54:	ea47 0803 	orr.w	r8, r7, r3
 8000b58:	4094      	lsls	r4, r2
 8000b5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b64:	fa1f fc85 	uxth.w	ip, r5
 8000b68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b70:	fb07 f10c 	mul.w	r1, r7, ip
 8000b74:	4299      	cmp	r1, r3
 8000b76:	d909      	bls.n	8000b8c <__udivmoddi4+0x60>
 8000b78:	18eb      	adds	r3, r5, r3
 8000b7a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b7e:	f080 811b 	bcs.w	8000db8 <__udivmoddi4+0x28c>
 8000b82:	4299      	cmp	r1, r3
 8000b84:	f240 8118 	bls.w	8000db8 <__udivmoddi4+0x28c>
 8000b88:	3f02      	subs	r7, #2
 8000b8a:	442b      	add	r3, r5
 8000b8c:	1a5b      	subs	r3, r3, r1
 8000b8e:	b2a4      	uxth	r4, r4
 8000b90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ba0:	45a4      	cmp	ip, r4
 8000ba2:	d909      	bls.n	8000bb8 <__udivmoddi4+0x8c>
 8000ba4:	192c      	adds	r4, r5, r4
 8000ba6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000baa:	f080 8107 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000bae:	45a4      	cmp	ip, r4
 8000bb0:	f240 8104 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000bb4:	3802      	subs	r0, #2
 8000bb6:	442c      	add	r4, r5
 8000bb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bbc:	eba4 040c 	sub.w	r4, r4, ip
 8000bc0:	2700      	movs	r7, #0
 8000bc2:	b11e      	cbz	r6, 8000bcc <__udivmoddi4+0xa0>
 8000bc4:	40d4      	lsrs	r4, r2
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bcc:	4639      	mov	r1, r7
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d909      	bls.n	8000bea <__udivmoddi4+0xbe>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80eb 	beq.w	8000db2 <__udivmoddi4+0x286>
 8000bdc:	2700      	movs	r7, #0
 8000bde:	e9c6 0100 	strd	r0, r1, [r6]
 8000be2:	4638      	mov	r0, r7
 8000be4:	4639      	mov	r1, r7
 8000be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bea:	fab3 f783 	clz	r7, r3
 8000bee:	2f00      	cmp	r7, #0
 8000bf0:	d147      	bne.n	8000c82 <__udivmoddi4+0x156>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xd0>
 8000bf6:	4282      	cmp	r2, r0
 8000bf8:	f200 80fa 	bhi.w	8000df0 <__udivmoddi4+0x2c4>
 8000bfc:	1a84      	subs	r4, r0, r2
 8000bfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	4698      	mov	r8, r3
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	d0e0      	beq.n	8000bcc <__udivmoddi4+0xa0>
 8000c0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c0e:	e7dd      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000c10:	b902      	cbnz	r2, 8000c14 <__udivmoddi4+0xe8>
 8000c12:	deff      	udf	#255	; 0xff
 8000c14:	fab2 f282 	clz	r2, r2
 8000c18:	2a00      	cmp	r2, #0
 8000c1a:	f040 808f 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1e:	1b49      	subs	r1, r1, r5
 8000c20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c24:	fa1f f885 	uxth.w	r8, r5
 8000c28:	2701      	movs	r7, #1
 8000c2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c38:	fb08 f10c 	mul.w	r1, r8, ip
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c40:	18eb      	adds	r3, r5, r3
 8000c42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4299      	cmp	r1, r3
 8000c4a:	f200 80cd 	bhi.w	8000de8 <__udivmoddi4+0x2bc>
 8000c4e:	4684      	mov	ip, r0
 8000c50:	1a59      	subs	r1, r3, r1
 8000c52:	b2a3      	uxth	r3, r4
 8000c54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c60:	fb08 f800 	mul.w	r8, r8, r0
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	d907      	bls.n	8000c78 <__udivmoddi4+0x14c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x14a>
 8000c70:	45a0      	cmp	r8, r4
 8000c72:	f200 80b6 	bhi.w	8000de2 <__udivmoddi4+0x2b6>
 8000c76:	4618      	mov	r0, r3
 8000c78:	eba4 0408 	sub.w	r4, r4, r8
 8000c7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c80:	e79f      	b.n	8000bc2 <__udivmoddi4+0x96>
 8000c82:	f1c7 0c20 	rsb	ip, r7, #32
 8000c86:	40bb      	lsls	r3, r7
 8000c88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c90:	fa01 f407 	lsl.w	r4, r1, r7
 8000c94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000ca0:	4325      	orrs	r5, r4
 8000ca2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ca6:	0c2c      	lsrs	r4, r5, #16
 8000ca8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cac:	fa1f fa8e 	uxth.w	sl, lr
 8000cb0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cb4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cb8:	429c      	cmp	r4, r3
 8000cba:	fa02 f207 	lsl.w	r2, r2, r7
 8000cbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cc8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ccc:	f080 8087 	bcs.w	8000dde <__udivmoddi4+0x2b2>
 8000cd0:	429c      	cmp	r4, r3
 8000cd2:	f240 8084 	bls.w	8000dde <__udivmoddi4+0x2b2>
 8000cd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cda:	4473      	add	r3, lr
 8000cdc:	1b1b      	subs	r3, r3, r4
 8000cde:	b2ad      	uxth	r5, r5
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000cec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000cf0:	45a2      	cmp	sl, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1e 0404 	adds.w	r4, lr, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cfc:	d26b      	bcs.n	8000dd6 <__udivmoddi4+0x2aa>
 8000cfe:	45a2      	cmp	sl, r4
 8000d00:	d969      	bls.n	8000dd6 <__udivmoddi4+0x2aa>
 8000d02:	3802      	subs	r0, #2
 8000d04:	4474      	add	r4, lr
 8000d06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d0e:	eba4 040a 	sub.w	r4, r4, sl
 8000d12:	454c      	cmp	r4, r9
 8000d14:	46c2      	mov	sl, r8
 8000d16:	464b      	mov	r3, r9
 8000d18:	d354      	bcc.n	8000dc4 <__udivmoddi4+0x298>
 8000d1a:	d051      	beq.n	8000dc0 <__udivmoddi4+0x294>
 8000d1c:	2e00      	cmp	r6, #0
 8000d1e:	d069      	beq.n	8000df4 <__udivmoddi4+0x2c8>
 8000d20:	ebb1 050a 	subs.w	r5, r1, sl
 8000d24:	eb64 0403 	sbc.w	r4, r4, r3
 8000d28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d2c:	40fd      	lsrs	r5, r7
 8000d2e:	40fc      	lsrs	r4, r7
 8000d30:	ea4c 0505 	orr.w	r5, ip, r5
 8000d34:	e9c6 5400 	strd	r5, r4, [r6]
 8000d38:	2700      	movs	r7, #0
 8000d3a:	e747      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000d3c:	f1c2 0320 	rsb	r3, r2, #32
 8000d40:	fa20 f703 	lsr.w	r7, r0, r3
 8000d44:	4095      	lsls	r5, r2
 8000d46:	fa01 f002 	lsl.w	r0, r1, r2
 8000d4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d52:	4338      	orrs	r0, r7
 8000d54:	0c01      	lsrs	r1, r0, #16
 8000d56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d5a:	fa1f f885 	uxth.w	r8, r5
 8000d5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d66:	fb07 f308 	mul.w	r3, r7, r8
 8000d6a:	428b      	cmp	r3, r1
 8000d6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d70:	d907      	bls.n	8000d82 <__udivmoddi4+0x256>
 8000d72:	1869      	adds	r1, r5, r1
 8000d74:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d78:	d22f      	bcs.n	8000dda <__udivmoddi4+0x2ae>
 8000d7a:	428b      	cmp	r3, r1
 8000d7c:	d92d      	bls.n	8000dda <__udivmoddi4+0x2ae>
 8000d7e:	3f02      	subs	r7, #2
 8000d80:	4429      	add	r1, r5
 8000d82:	1acb      	subs	r3, r1, r3
 8000d84:	b281      	uxth	r1, r0
 8000d86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d92:	fb00 f308 	mul.w	r3, r0, r8
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x27e>
 8000d9a:	1869      	adds	r1, r5, r1
 8000d9c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000da0:	d217      	bcs.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d915      	bls.n	8000dd2 <__udivmoddi4+0x2a6>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4429      	add	r1, r5
 8000daa:	1ac9      	subs	r1, r1, r3
 8000dac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000db0:	e73b      	b.n	8000c2a <__udivmoddi4+0xfe>
 8000db2:	4637      	mov	r7, r6
 8000db4:	4630      	mov	r0, r6
 8000db6:	e709      	b.n	8000bcc <__udivmoddi4+0xa0>
 8000db8:	4607      	mov	r7, r0
 8000dba:	e6e7      	b.n	8000b8c <__udivmoddi4+0x60>
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	e6fb      	b.n	8000bb8 <__udivmoddi4+0x8c>
 8000dc0:	4541      	cmp	r1, r8
 8000dc2:	d2ab      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dc8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dcc:	3801      	subs	r0, #1
 8000dce:	4613      	mov	r3, r2
 8000dd0:	e7a4      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd2:	4660      	mov	r0, ip
 8000dd4:	e7e9      	b.n	8000daa <__udivmoddi4+0x27e>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	e795      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000dda:	4667      	mov	r7, ip
 8000ddc:	e7d1      	b.n	8000d82 <__udivmoddi4+0x256>
 8000dde:	4681      	mov	r9, r0
 8000de0:	e77c      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de2:	3802      	subs	r0, #2
 8000de4:	442c      	add	r4, r5
 8000de6:	e747      	b.n	8000c78 <__udivmoddi4+0x14c>
 8000de8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000dec:	442b      	add	r3, r5
 8000dee:	e72f      	b.n	8000c50 <__udivmoddi4+0x124>
 8000df0:	4638      	mov	r0, r7
 8000df2:	e708      	b.n	8000c06 <__udivmoddi4+0xda>
 8000df4:	4637      	mov	r7, r6
 8000df6:	e6e9      	b.n	8000bcc <__udivmoddi4+0xa0>

08000df8 <__aeabi_idiv0>:
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop

08000dfc <arm_cos_f32>:
 * @return cos(x).
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b08b      	sub	sp, #44	; 0x2c
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale the input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8000e06:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e0a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8000ee8 <arm_cos_f32+0xec>
 8000e0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e12:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8000e16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e1a:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 8000e1e:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e26:	ee17 3a90 	vmov	r3, s15
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000e2c:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e38:	d502      	bpl.n	8000e40 <arm_cos_f32+0x44>
  {
    n--;
 8000e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4a:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e52:	edc7 7a08 	vstr	s15, [r7, #32]

  /* Calculation of index of the table */
  findex = (float32_t) FAST_MATH_TABLE_SIZE * in;
 8000e56:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e5a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000eec <arm_cos_f32+0xf0>
 8000e5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e62:	edc7 7a07 	vstr	s15, [r7, #28]
  index = ((uint16_t)findex) & 0x1ff;
 8000e66:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e6e:	ee17 3a90 	vmov	r3, s15
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e78:	837b      	strh	r3, [r7, #26]

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000e7a:	8b7b      	ldrh	r3, [r7, #26]
 8000e7c:	ee07 3a90 	vmov	s15, r3
 8000e80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e84:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e8c:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 8000e90:	8b7b      	ldrh	r3, [r7, #26]
 8000e92:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <arm_cos_f32+0xf4>)
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	4413      	add	r3, r2
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 8000e9c:	8b7b      	ldrh	r3, [r7, #26]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	4a13      	ldr	r2, [pc, #76]	; (8000ef0 <arm_cos_f32+0xf4>)
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	4413      	add	r3, r2
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f-fract)*a + fract*b;
 8000eaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000eae:	edd7 7a05 	vldr	s15, [r7, #20]
 8000eb2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000eb6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000eba:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ebe:	edd7 6a05 	vldr	s13, [r7, #20]
 8000ec2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ec6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ece:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return the output value */
  return (cosVal);
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	ee07 3a90 	vmov	s15, r3
}
 8000ed8:	eeb0 0a67 	vmov.f32	s0, s15
 8000edc:	372c      	adds	r7, #44	; 0x2c
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	3e22f983 	.word	0x3e22f983
 8000eec:	44000000 	.word	0x44000000
 8000ef0:	08008f2c 	.word	0x08008f2c

08000ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_Init+0x40>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <HAL_Init+0x40>)
 8000efe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <HAL_Init+0x40>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a0a      	ldr	r2, [pc, #40]	; (8000f34 <HAL_Init+0x40>)
 8000f0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a07      	ldr	r2, [pc, #28]	; (8000f34 <HAL_Init+0x40>)
 8000f16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 ff49 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	2000      	movs	r0, #0
 8000f24:	f000 f808 	bl	8000f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f28:	f006 fe66 	bl	8007bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023c00 	.word	0x40023c00

08000f38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f40:	4b12      	ldr	r3, [pc, #72]	; (8000f8c <HAL_InitTick+0x54>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x58>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 ff61 	bl	8001e1e <HAL_SYSTICK_Config>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f62:	2301      	movs	r3, #1
 8000f64:	e00e      	b.n	8000f84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	2b0f      	cmp	r3, #15
 8000f6a:	d80a      	bhi.n	8000f82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f74:	f000 ff29 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f78:	4a06      	ldr	r2, [pc, #24]	; (8000f94 <HAL_InitTick+0x5c>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	e000      	b.n	8000f84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f82:	2301      	movs	r3, #1
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20000008 	.word	0x20000008
 8000f90:	20000004 	.word	0x20000004
 8000f94:	20000000 	.word	0x20000000

08000f98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f9c:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_IncTick+0x20>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x24>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	4a04      	ldr	r2, [pc, #16]	; (8000fbc <HAL_IncTick+0x24>)
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	20000098 	.word	0x20000098

08000fc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc4:	4b03      	ldr	r3, [pc, #12]	; (8000fd4 <HAL_GetTick+0x14>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	20000098 	.word	0x20000098

08000fd8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d101      	bne.n	8000fee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e033      	b.n	8001056 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d109      	bne.n	800100a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f006 fe26 	bl	8007c48 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2200      	movs	r2, #0
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100e:	f003 0310 	and.w	r3, r3, #16
 8001012:	2b00      	cmp	r3, #0
 8001014:	d118      	bne.n	8001048 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800101e:	f023 0302 	bic.w	r3, r3, #2
 8001022:	f043 0202 	orr.w	r2, r3, #2
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f000 fbf0 	bl	8001810 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103a:	f023 0303 	bic.w	r3, r3, #3
 800103e:	f043 0201 	orr.w	r2, r3, #1
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	641a      	str	r2, [r3, #64]	; 0x40
 8001046:	e001      	b.n	800104c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2200      	movs	r2, #0
 8001050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001054:	7bfb      	ldrb	r3, [r7, #15]
}
 8001056:	4618      	mov	r0, r3
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001068:	2300      	movs	r3, #0
 800106a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001072:	2b01      	cmp	r3, #1
 8001074:	d101      	bne.n	800107a <HAL_ADC_Start+0x1a>
 8001076:	2302      	movs	r3, #2
 8001078:	e0a5      	b.n	80011c6 <HAL_ADC_Start+0x166>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	f003 0301 	and.w	r3, r3, #1
 800108c:	2b01      	cmp	r3, #1
 800108e:	d018      	beq.n	80010c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f042 0201 	orr.w	r2, r2, #1
 800109e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80010a0:	4b4c      	ldr	r3, [pc, #304]	; (80011d4 <HAL_ADC_Start+0x174>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a4c      	ldr	r2, [pc, #304]	; (80011d8 <HAL_ADC_Start+0x178>)
 80010a6:	fba2 2303 	umull	r2, r3, r2, r3
 80010aa:	0c9a      	lsrs	r2, r3, #18
 80010ac:	4613      	mov	r3, r2
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	4413      	add	r3, r2
 80010b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010b4:	e002      	b.n	80010bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	3b01      	subs	r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d1f9      	bne.n	80010b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d179      	bne.n	80011c4 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d007      	beq.n	8001102 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800110a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800110e:	d106      	bne.n	800111e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001114:	f023 0206 	bic.w	r2, r3, #6
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	645a      	str	r2, [r3, #68]	; 0x44
 800111c:	e002      	b.n	8001124 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <HAL_ADC_Start+0x17c>)
 800112e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001138:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 031f 	and.w	r3, r3, #31
 8001142:	2b00      	cmp	r3, #0
 8001144:	d12a      	bne.n	800119c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a25      	ldr	r2, [pc, #148]	; (80011e0 <HAL_ADC_Start+0x180>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d015      	beq.n	800117c <HAL_ADC_Start+0x11c>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a23      	ldr	r2, [pc, #140]	; (80011e4 <HAL_ADC_Start+0x184>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d105      	bne.n	8001166 <HAL_ADC_Start+0x106>
 800115a:	4b20      	ldr	r3, [pc, #128]	; (80011dc <HAL_ADC_Start+0x17c>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	f003 031f 	and.w	r3, r3, #31
 8001162:	2b00      	cmp	r3, #0
 8001164:	d00a      	beq.n	800117c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <HAL_ADC_Start+0x188>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d129      	bne.n	80011c4 <HAL_ADC_Start+0x164>
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <HAL_ADC_Start+0x17c>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	2b0f      	cmp	r3, #15
 800117a:	d823      	bhi.n	80011c4 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d11c      	bne.n	80011c4 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	e013      	b.n	80011c4 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0f      	ldr	r2, [pc, #60]	; (80011e0 <HAL_ADC_Start+0x180>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10e      	bne.n	80011c4 <HAL_ADC_Start+0x164>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d107      	bne.n	80011c4 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011c2:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	20000008 	.word	0x20000008
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	40012300 	.word	0x40012300
 80011e0:	40012000 	.word	0x40012000
 80011e4:	40012100 	.word	0x40012100
 80011e8:	40012200 	.word	0x40012200

080011ec <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001204:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001208:	d113      	bne.n	8001232 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	689b      	ldr	r3, [r3, #8]
 8001210:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001214:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001218:	d10b      	bne.n	8001232 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f043 0220 	orr.w	r2, r3, #32
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e05c      	b.n	80012ec <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001232:	f7ff fec5 	bl	8000fc0 <HAL_GetTick>
 8001236:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001238:	e01a      	b.n	8001270 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001240:	d016      	beq.n	8001270 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <HAL_ADC_PollForConversion+0x6c>
 8001248:	f7ff feba 	bl	8000fc0 <HAL_GetTick>
 800124c:	4602      	mov	r2, r0
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	1ad3      	subs	r3, r2, r3
 8001252:	683a      	ldr	r2, [r7, #0]
 8001254:	429a      	cmp	r2, r3
 8001256:	d20b      	bcs.n	8001270 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125c:	f043 0204 	orr.w	r2, r3, #4
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e03d      	b.n	80012ec <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b02      	cmp	r3, #2
 800127c:	d1dd      	bne.n	800123a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f06f 0212 	mvn.w	r2, #18
 8001286:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d123      	bne.n	80012ea <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d11f      	bne.n	80012ea <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d006      	beq.n	80012c6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d111      	bne.n	80012ea <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d105      	bne.n	80012ea <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e2:	f043 0201 	orr.w	r2, r3, #1
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b02      	cmp	r3, #2
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 0320 	and.w	r3, r3, #32
 8001324:	2b20      	cmp	r3, #32
 8001326:	bf0c      	ite	eq
 8001328:	2301      	moveq	r3, #1
 800132a:	2300      	movne	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d049      	beq.n	80013ca <HAL_ADC_IRQHandler+0xd6>
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d046      	beq.n	80013ca <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	f003 0310 	and.w	r3, r3, #16
 8001344:	2b00      	cmp	r3, #0
 8001346:	d105      	bne.n	8001354 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d12b      	bne.n	80013ba <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001366:	2b00      	cmp	r3, #0
 8001368:	d127      	bne.n	80013ba <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001374:	2b00      	cmp	r3, #0
 8001376:	d006      	beq.n	8001386 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001382:	2b00      	cmp	r3, #0
 8001384:	d119      	bne.n	80013ba <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0220 	bic.w	r2, r2, #32
 8001394:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f043 0201 	orr.w	r2, r3, #1
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 f8e8 	bl	8001590 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f06f 0212 	mvn.w	r2, #18
 80013c8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f003 0304 	and.w	r3, r3, #4
 80013d4:	2b04      	cmp	r3, #4
 80013d6:	bf0c      	ite	eq
 80013d8:	2301      	moveq	r3, #1
 80013da:	2300      	movne	r3, #0
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ea:	2b80      	cmp	r3, #128	; 0x80
 80013ec:	bf0c      	ite	eq
 80013ee:	2301      	moveq	r3, #1
 80013f0:	2300      	movne	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d057      	beq.n	80014ac <HAL_ADC_IRQHandler+0x1b8>
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d054      	beq.n	80014ac <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 0310 	and.w	r3, r3, #16
 800140a:	2b00      	cmp	r3, #0
 800140c:	d105      	bne.n	800141a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001424:	2b00      	cmp	r3, #0
 8001426:	d139      	bne.n	800149c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800142e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001432:	2b00      	cmp	r3, #0
 8001434:	d006      	beq.n	8001444 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001440:	2b00      	cmp	r3, #0
 8001442:	d12b      	bne.n	800149c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800144e:	2b00      	cmp	r3, #0
 8001450:	d124      	bne.n	800149c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800145c:	2b00      	cmp	r3, #0
 800145e:	d11d      	bne.n	800149c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001464:	2b00      	cmp	r3, #0
 8001466:	d119      	bne.n	800149c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001476:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800148c:	2b00      	cmp	r3, #0
 800148e:	d105      	bne.n	800149c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	f043 0201 	orr.w	r2, r3, #1
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f000 fab3 	bl	8001a08 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f06f 020c 	mvn.w	r2, #12
 80014aa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	bf0c      	ite	eq
 80014ba:	2301      	moveq	r3, #1
 80014bc:	2300      	movne	r3, #0
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014cc:	2b40      	cmp	r3, #64	; 0x40
 80014ce:	bf0c      	ite	eq
 80014d0:	2301      	moveq	r3, #1
 80014d2:	2300      	movne	r3, #0
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d017      	beq.n	800150e <HAL_ADC_IRQHandler+0x21a>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d014      	beq.n	800150e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d10d      	bne.n	800150e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014fe:	6878      	ldr	r0, [r7, #4]
 8001500:	f000 f850 	bl	80015a4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f06f 0201 	mvn.w	r2, #1
 800150c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b20      	cmp	r3, #32
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800152e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001532:	bf0c      	ite	eq
 8001534:	2301      	moveq	r3, #1
 8001536:	2300      	movne	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d015      	beq.n	800156e <HAL_ADC_IRQHandler+0x27a>
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d012      	beq.n	800156e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800154c:	f043 0202 	orr.w	r2, r3, #2
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 0220 	mvn.w	r2, #32
 800155c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 f82a 	bl	80015b8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f06f 0220 	mvn.w	r2, #32
 800156c:	601a      	str	r2, [r3, #0]
  }
}
 800156e:	bf00      	nop
 8001570:	3710      	adds	r7, #16
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr

080015a4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015ac:	bf00      	nop
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d101      	bne.n	80015e8 <HAL_ADC_ConfigChannel+0x1c>
 80015e4:	2302      	movs	r3, #2
 80015e6:	e105      	b.n	80017f4 <HAL_ADC_ConfigChannel+0x228>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	d925      	bls.n	8001644 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	68d9      	ldr	r1, [r3, #12]
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	461a      	mov	r2, r3
 8001606:	4613      	mov	r3, r2
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	4413      	add	r3, r2
 800160c:	3b1e      	subs	r3, #30
 800160e:	2207      	movs	r2, #7
 8001610:	fa02 f303 	lsl.w	r3, r2, r3
 8001614:	43da      	mvns	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	400a      	ands	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	68d9      	ldr	r1, [r3, #12]
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689a      	ldr	r2, [r3, #8]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	b29b      	uxth	r3, r3
 800162e:	4618      	mov	r0, r3
 8001630:	4603      	mov	r3, r0
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	4403      	add	r3, r0
 8001636:	3b1e      	subs	r3, #30
 8001638:	409a      	lsls	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	430a      	orrs	r2, r1
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	e022      	b.n	800168a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6919      	ldr	r1, [r3, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	b29b      	uxth	r3, r3
 8001650:	461a      	mov	r2, r3
 8001652:	4613      	mov	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	4413      	add	r3, r2
 8001658:	2207      	movs	r2, #7
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	400a      	ands	r2, r1
 8001666:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6919      	ldr	r1, [r3, #16]
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	b29b      	uxth	r3, r3
 8001678:	4618      	mov	r0, r3
 800167a:	4603      	mov	r3, r0
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4403      	add	r3, r0
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	2b06      	cmp	r3, #6
 8001690:	d824      	bhi.n	80016dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	4613      	mov	r3, r2
 800169e:	009b      	lsls	r3, r3, #2
 80016a0:	4413      	add	r3, r2
 80016a2:	3b05      	subs	r3, #5
 80016a4:	221f      	movs	r2, #31
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	400a      	ands	r2, r1
 80016b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685a      	ldr	r2, [r3, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3b05      	subs	r3, #5
 80016ce:	fa00 f203 	lsl.w	r2, r0, r3
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	430a      	orrs	r2, r1
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
 80016da:	e04c      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d824      	bhi.n	800172e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	3b23      	subs	r3, #35	; 0x23
 80016f6:	221f      	movs	r2, #31
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43da      	mvns	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	400a      	ands	r2, r1
 8001704:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b23      	subs	r3, #35	; 0x23
 8001720:	fa00 f203 	lsl.w	r2, r0, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	631a      	str	r2, [r3, #48]	; 0x30
 800172c:	e023      	b.n	8001776 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b41      	subs	r3, #65	; 0x41
 8001740:	221f      	movs	r2, #31
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43da      	mvns	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	400a      	ands	r2, r1
 800174e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	b29b      	uxth	r3, r3
 800175c:	4618      	mov	r0, r3
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685a      	ldr	r2, [r3, #4]
 8001762:	4613      	mov	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	4413      	add	r3, r2
 8001768:	3b41      	subs	r3, #65	; 0x41
 800176a:	fa00 f203 	lsl.w	r2, r0, r3
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001776:	4b22      	ldr	r3, [pc, #136]	; (8001800 <HAL_ADC_ConfigChannel+0x234>)
 8001778:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a21      	ldr	r2, [pc, #132]	; (8001804 <HAL_ADC_ConfigChannel+0x238>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d109      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1cc>
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b12      	cmp	r3, #18
 800178a:	d105      	bne.n	8001798 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a19      	ldr	r2, [pc, #100]	; (8001804 <HAL_ADC_ConfigChannel+0x238>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d123      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x21e>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b10      	cmp	r3, #16
 80017a8:	d003      	beq.n	80017b2 <HAL_ADC_ConfigChannel+0x1e6>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b11      	cmp	r3, #17
 80017b0:	d11b      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2b10      	cmp	r3, #16
 80017c4:	d111      	bne.n	80017ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017c6:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_ADC_ConfigChannel+0x23c>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_ADC_ConfigChannel+0x240>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9a      	lsrs	r2, r3, #18
 80017d2:	4613      	mov	r3, r2
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	4413      	add	r3, r2
 80017d8:	005b      	lsls	r3, r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017dc:	e002      	b.n	80017e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	3b01      	subs	r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d1f9      	bne.n	80017de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3714      	adds	r7, #20
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	40012300 	.word	0x40012300
 8001804:	40012000 	.word	0x40012000
 8001808:	20000008 	.word	0x20000008
 800180c:	431bde83 	.word	0x431bde83

08001810 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001810:	b480      	push	{r7}
 8001812:	b085      	sub	sp, #20
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001818:	4b79      	ldr	r3, [pc, #484]	; (8001a00 <ADC_Init+0x1f0>)
 800181a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	431a      	orrs	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001844:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6859      	ldr	r1, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	021a      	lsls	r2, r3, #8
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	430a      	orrs	r2, r1
 8001858:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001868:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	6859      	ldr	r1, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	430a      	orrs	r2, r1
 800187a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800188a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	6899      	ldr	r1, [r3, #8]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	68da      	ldr	r2, [r3, #12]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a2:	4a58      	ldr	r2, [pc, #352]	; (8001a04 <ADC_Init+0x1f4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d022      	beq.n	80018ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6899      	ldr	r1, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	430a      	orrs	r2, r1
 80018c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	689a      	ldr	r2, [r3, #8]
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	6899      	ldr	r1, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	e00f      	b.n	800190e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	689a      	ldr	r2, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800190c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0202 	bic.w	r2, r2, #2
 800191c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7e1b      	ldrb	r3, [r3, #24]
 8001928:	005a      	lsls	r2, r3, #1
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d01b      	beq.n	8001974 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	685a      	ldr	r2, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800194a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800195a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	6859      	ldr	r1, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001966:	3b01      	subs	r3, #1
 8001968:	035a      	lsls	r2, r3, #13
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	430a      	orrs	r2, r1
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	e007      	b.n	8001984 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001982:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	3b01      	subs	r3, #1
 80019a0:	051a      	lsls	r2, r3, #20
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	430a      	orrs	r2, r1
 80019a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	6899      	ldr	r1, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019c6:	025a      	lsls	r2, r3, #9
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	689a      	ldr	r2, [r3, #8]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	6899      	ldr	r1, [r3, #8]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	029a      	lsls	r2, r3, #10
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	40012300 	.word	0x40012300
 8001a04:	0f000001 	.word	0x0f000001

08001a08 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a10:	bf00      	nop
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0ed      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d102      	bne.n	8001a40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f006 f9c0 	bl	8007dc0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0202 	bic.w	r2, r2, #2
 8001a4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a50:	f7ff fab6 	bl	8000fc0 <HAL_GetTick>
 8001a54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a56:	e012      	b.n	8001a7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a58:	f7ff fab2 	bl	8000fc0 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b0a      	cmp	r3, #10
 8001a64:	d90b      	bls.n	8001a7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2205      	movs	r2, #5
 8001a76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e0c5      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1e5      	bne.n	8001a58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 0201 	orr.w	r2, r2, #1
 8001a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a9c:	f7ff fa90 	bl	8000fc0 <HAL_GetTick>
 8001aa0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aa2:	e012      	b.n	8001aca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001aa4:	f7ff fa8c 	bl	8000fc0 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b0a      	cmp	r3, #10
 8001ab0:	d90b      	bls.n	8001aca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2205      	movs	r2, #5
 8001ac2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e09f      	b.n	8001c0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d0e5      	beq.n	8001aa4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	7e1b      	ldrb	r3, [r3, #24]
 8001adc:	2b01      	cmp	r3, #1
 8001ade:	d108      	bne.n	8001af2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e007      	b.n	8001b02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	7e5b      	ldrb	r3, [r3, #25]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d108      	bne.n	8001b1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b18:	601a      	str	r2, [r3, #0]
 8001b1a:	e007      	b.n	8001b2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	7e9b      	ldrb	r3, [r3, #26]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d108      	bne.n	8001b46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0220 	orr.w	r2, r2, #32
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	e007      	b.n	8001b56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 0220 	bic.w	r2, r2, #32
 8001b54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	7edb      	ldrb	r3, [r3, #27]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d108      	bne.n	8001b70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f022 0210 	bic.w	r2, r2, #16
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	e007      	b.n	8001b80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0210 	orr.w	r2, r2, #16
 8001b7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	7f1b      	ldrb	r3, [r3, #28]
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d108      	bne.n	8001b9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0208 	orr.w	r2, r2, #8
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	e007      	b.n	8001baa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 0208 	bic.w	r2, r2, #8
 8001ba8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	7f5b      	ldrb	r3, [r3, #29]
 8001bae:	2b01      	cmp	r3, #1
 8001bb0:	d108      	bne.n	8001bc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0204 	orr.w	r2, r2, #4
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	e007      	b.n	8001bd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0204 	bic.w	r2, r2, #4
 8001bd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	431a      	orrs	r2, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	ea42 0103 	orr.w	r1, r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	1e5a      	subs	r2, r3, #1
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	430a      	orrs	r2, r1
 8001bf8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <__NVIC_EnableIRQ+0x38>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff29 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff3e 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff31 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa2 	bl	8001d70 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d004      	beq.n	8001e54 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2280      	movs	r2, #128	; 0x80
 8001e4e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e00c      	b.n	8001e6e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2205      	movs	r2, #5
 8001e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0201 	bic.w	r2, r2, #1
 8001e6a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
}
 8001e6e:	4618      	mov	r0, r3
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b089      	sub	sp, #36	; 0x24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	61fb      	str	r3, [r7, #28]
 8001e96:	e16b      	b.n	8002170 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e98:	2201      	movs	r2, #1
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	697a      	ldr	r2, [r7, #20]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	f040 815a 	bne.w	800216a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d00b      	beq.n	8001ed6 <HAL_GPIO_Init+0x5a>
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d007      	beq.n	8001ed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eca:	2b11      	cmp	r3, #17
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2b12      	cmp	r3, #18
 8001ed4:	d130      	bne.n	8001f38 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001edc:	69fb      	ldr	r3, [r7, #28]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	2203      	movs	r2, #3
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4013      	ands	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	68da      	ldr	r2, [r3, #12]
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	091b      	lsrs	r3, r3, #4
 8001f22:	f003 0201 	and.w	r2, r3, #1
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	69ba      	ldr	r2, [r7, #24]
 8001f36:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	2203      	movs	r2, #3
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	689a      	ldr	r2, [r3, #8]
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0xfc>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	2b12      	cmp	r3, #18
 8001f76:	d123      	bne.n	8001fc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	08da      	lsrs	r2, r3, #3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3208      	adds	r2, #8
 8001f80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	220f      	movs	r2, #15
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	691a      	ldr	r2, [r3, #16]
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	08da      	lsrs	r2, r3, #3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	3208      	adds	r2, #8
 8001fba:	69b9      	ldr	r1, [r7, #24]
 8001fbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	2203      	movs	r2, #3
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 0203 	and.w	r2, r3, #3
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80b4 	beq.w	800216a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002002:	2300      	movs	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	4b5f      	ldr	r3, [pc, #380]	; (8002184 <HAL_GPIO_Init+0x308>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	4a5e      	ldr	r2, [pc, #376]	; (8002184 <HAL_GPIO_Init+0x308>)
 800200c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002010:	6453      	str	r3, [r2, #68]	; 0x44
 8002012:	4b5c      	ldr	r3, [pc, #368]	; (8002184 <HAL_GPIO_Init+0x308>)
 8002014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800201a:	60fb      	str	r3, [r7, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800201e:	4a5a      	ldr	r2, [pc, #360]	; (8002188 <HAL_GPIO_Init+0x30c>)
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	220f      	movs	r2, #15
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a51      	ldr	r2, [pc, #324]	; (800218c <HAL_GPIO_Init+0x310>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d02b      	beq.n	80020a2 <HAL_GPIO_Init+0x226>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a50      	ldr	r2, [pc, #320]	; (8002190 <HAL_GPIO_Init+0x314>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d025      	beq.n	800209e <HAL_GPIO_Init+0x222>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a4f      	ldr	r2, [pc, #316]	; (8002194 <HAL_GPIO_Init+0x318>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d01f      	beq.n	800209a <HAL_GPIO_Init+0x21e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a4e      	ldr	r2, [pc, #312]	; (8002198 <HAL_GPIO_Init+0x31c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d019      	beq.n	8002096 <HAL_GPIO_Init+0x21a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a4d      	ldr	r2, [pc, #308]	; (800219c <HAL_GPIO_Init+0x320>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0x216>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a4c      	ldr	r2, [pc, #304]	; (80021a0 <HAL_GPIO_Init+0x324>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d00d      	beq.n	800208e <HAL_GPIO_Init+0x212>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	4a4b      	ldr	r2, [pc, #300]	; (80021a4 <HAL_GPIO_Init+0x328>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d007      	beq.n	800208a <HAL_GPIO_Init+0x20e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a4a      	ldr	r2, [pc, #296]	; (80021a8 <HAL_GPIO_Init+0x32c>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_GPIO_Init+0x20a>
 8002082:	2307      	movs	r3, #7
 8002084:	e00e      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 8002086:	2308      	movs	r3, #8
 8002088:	e00c      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 800208a:	2306      	movs	r3, #6
 800208c:	e00a      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 800208e:	2305      	movs	r3, #5
 8002090:	e008      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 8002092:	2304      	movs	r3, #4
 8002094:	e006      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 8002096:	2303      	movs	r3, #3
 8002098:	e004      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 800209a:	2302      	movs	r3, #2
 800209c:	e002      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_GPIO_Init+0x228>
 80020a2:	2300      	movs	r3, #0
 80020a4:	69fa      	ldr	r2, [r7, #28]
 80020a6:	f002 0203 	and.w	r2, r2, #3
 80020aa:	0092      	lsls	r2, r2, #2
 80020ac:	4093      	lsls	r3, r2
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020b4:	4934      	ldr	r1, [pc, #208]	; (8002188 <HAL_GPIO_Init+0x30c>)
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	089b      	lsrs	r3, r3, #2
 80020ba:	3302      	adds	r3, #2
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c2:	4b3a      	ldr	r3, [pc, #232]	; (80021ac <HAL_GPIO_Init+0x330>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	43db      	mvns	r3, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4013      	ands	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d003      	beq.n	80020e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e6:	4a31      	ldr	r2, [pc, #196]	; (80021ac <HAL_GPIO_Init+0x330>)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020ec:	4b2f      	ldr	r3, [pc, #188]	; (80021ac <HAL_GPIO_Init+0x330>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d003      	beq.n	8002110 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002110:	4a26      	ldr	r2, [pc, #152]	; (80021ac <HAL_GPIO_Init+0x330>)
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002116:	4b25      	ldr	r3, [pc, #148]	; (80021ac <HAL_GPIO_Init+0x330>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	43db      	mvns	r3, r3
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4013      	ands	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d003      	beq.n	800213a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	4313      	orrs	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <HAL_GPIO_Init+0x330>)
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002140:	4b1a      	ldr	r3, [pc, #104]	; (80021ac <HAL_GPIO_Init+0x330>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	4313      	orrs	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002164:	4a11      	ldr	r2, [pc, #68]	; (80021ac <HAL_GPIO_Init+0x330>)
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	3301      	adds	r3, #1
 800216e:	61fb      	str	r3, [r7, #28]
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	2b0f      	cmp	r3, #15
 8002174:	f67f ae90 	bls.w	8001e98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002178:	bf00      	nop
 800217a:	3724      	adds	r7, #36	; 0x24
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40021c00 	.word	0x40021c00
 80021ac:	40013c00 	.word	0x40013c00

080021b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	807b      	strh	r3, [r7, #2]
 80021bc:	4613      	mov	r3, r2
 80021be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021c6:	887a      	ldrh	r2, [r7, #2]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021cc:	e003      	b.n	80021d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	619a      	str	r2, [r3, #24]
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	695a      	ldr	r2, [r3, #20]
 80021f2:	887b      	ldrh	r3, [r7, #2]
 80021f4:	401a      	ands	r2, r3
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d104      	bne.n	8002206 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021fc:	887b      	ldrh	r3, [r7, #2]
 80021fe:	041a      	lsls	r2, r3, #16
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002204:	e002      	b.n	800220c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002206:	887a      	ldrh	r2, [r7, #2]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	619a      	str	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	4603      	mov	r3, r0
 8002220:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002224:	695a      	ldr	r2, [r3, #20]
 8002226:	88fb      	ldrh	r3, [r7, #6]
 8002228:	4013      	ands	r3, r2
 800222a:	2b00      	cmp	r3, #0
 800222c:	d006      	beq.n	800223c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800222e:	4a05      	ldr	r2, [pc, #20]	; (8002244 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002230:	88fb      	ldrh	r3, [r7, #6]
 8002232:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002234:	88fb      	ldrh	r3, [r7, #6]
 8002236:	4618      	mov	r0, r3
 8002238:	f005 fcbc 	bl	8007bb4 <HAL_GPIO_EXTI_Callback>
  }
}
 800223c:	bf00      	nop
 800223e:	3708      	adds	r7, #8
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40013c00 	.word	0x40013c00

08002248 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e11f      	b.n	800249a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002260:	b2db      	uxtb	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d106      	bne.n	8002274 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800226e:	6878      	ldr	r0, [r7, #4]
 8002270:	f005 fdee 	bl	8007e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2224      	movs	r2, #36	; 0x24
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800229a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022ac:	f001 fb8e 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 80022b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a7b      	ldr	r2, [pc, #492]	; (80024a4 <HAL_I2C_Init+0x25c>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d807      	bhi.n	80022cc <HAL_I2C_Init+0x84>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	4a7a      	ldr	r2, [pc, #488]	; (80024a8 <HAL_I2C_Init+0x260>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	bf94      	ite	ls
 80022c4:	2301      	movls	r3, #1
 80022c6:	2300      	movhi	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	e006      	b.n	80022da <HAL_I2C_Init+0x92>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	4a77      	ldr	r2, [pc, #476]	; (80024ac <HAL_I2C_Init+0x264>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bf94      	ite	ls
 80022d4:	2301      	movls	r3, #1
 80022d6:	2300      	movhi	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e0db      	b.n	800249a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	4a72      	ldr	r2, [pc, #456]	; (80024b0 <HAL_I2C_Init+0x268>)
 80022e6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ea:	0c9b      	lsrs	r3, r3, #18
 80022ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	430a      	orrs	r2, r1
 8002300:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6a1b      	ldr	r3, [r3, #32]
 8002308:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	4a64      	ldr	r2, [pc, #400]	; (80024a4 <HAL_I2C_Init+0x25c>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d802      	bhi.n	800231c <HAL_I2C_Init+0xd4>
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3301      	adds	r3, #1
 800231a:	e009      	b.n	8002330 <HAL_I2C_Init+0xe8>
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002322:	fb02 f303 	mul.w	r3, r2, r3
 8002326:	4a63      	ldr	r2, [pc, #396]	; (80024b4 <HAL_I2C_Init+0x26c>)
 8002328:	fba2 2303 	umull	r2, r3, r2, r3
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	3301      	adds	r3, #1
 8002330:	687a      	ldr	r2, [r7, #4]
 8002332:	6812      	ldr	r2, [r2, #0]
 8002334:	430b      	orrs	r3, r1
 8002336:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002342:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4956      	ldr	r1, [pc, #344]	; (80024a4 <HAL_I2C_Init+0x25c>)
 800234c:	428b      	cmp	r3, r1
 800234e:	d80d      	bhi.n	800236c <HAL_I2C_Init+0x124>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1e59      	subs	r1, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	fbb1 f3f3 	udiv	r3, r1, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	2b04      	cmp	r3, #4
 8002366:	bf38      	it	cc
 8002368:	2304      	movcc	r3, #4
 800236a:	e04f      	b.n	800240c <HAL_I2C_Init+0x1c4>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d111      	bne.n	8002398 <HAL_I2C_Init+0x150>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	440b      	add	r3, r1
 8002382:	fbb0 f3f3 	udiv	r3, r0, r3
 8002386:	3301      	adds	r3, #1
 8002388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800238c:	2b00      	cmp	r3, #0
 800238e:	bf0c      	ite	eq
 8002390:	2301      	moveq	r3, #1
 8002392:	2300      	movne	r3, #0
 8002394:	b2db      	uxtb	r3, r3
 8002396:	e012      	b.n	80023be <HAL_I2C_Init+0x176>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1e58      	subs	r0, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6859      	ldr	r1, [r3, #4]
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	0099      	lsls	r1, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <HAL_I2C_Init+0x17e>
 80023c2:	2301      	movs	r3, #1
 80023c4:	e022      	b.n	800240c <HAL_I2C_Init+0x1c4>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10e      	bne.n	80023ec <HAL_I2C_Init+0x1a4>
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1e58      	subs	r0, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	440b      	add	r3, r1
 80023dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80023e0:	3301      	adds	r3, #1
 80023e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ea:	e00f      	b.n	800240c <HAL_I2C_Init+0x1c4>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	1e58      	subs	r0, r3, #1
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	0099      	lsls	r1, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002402:	3301      	adds	r3, #1
 8002404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002408:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800240c:	6879      	ldr	r1, [r7, #4]
 800240e:	6809      	ldr	r1, [r1, #0]
 8002410:	4313      	orrs	r3, r2
 8002412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	69da      	ldr	r2, [r3, #28]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a1b      	ldr	r3, [r3, #32]
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800243a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6911      	ldr	r1, [r2, #16]
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68d2      	ldr	r2, [r2, #12]
 8002446:	4311      	orrs	r1, r2
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6812      	ldr	r2, [r2, #0]
 800244c:	430b      	orrs	r3, r1
 800244e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695a      	ldr	r2, [r3, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2200      	movs	r2, #0
 8002480:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	000186a0 	.word	0x000186a0
 80024a8:	001e847f 	.word	0x001e847f
 80024ac:	003d08ff 	.word	0x003d08ff
 80024b0:	431bde83 	.word	0x431bde83
 80024b4:	10624dd3 	.word	0x10624dd3

080024b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b088      	sub	sp, #32
 80024bc:	af02      	add	r7, sp, #8
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	460b      	mov	r3, r1
 80024c6:	817b      	strh	r3, [r7, #10]
 80024c8:	4613      	mov	r3, r2
 80024ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7fe fd78 	bl	8000fc0 <HAL_GetTick>
 80024d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b20      	cmp	r3, #32
 80024dc:	f040 80e0 	bne.w	80026a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	2319      	movs	r3, #25
 80024e6:	2201      	movs	r2, #1
 80024e8:	4970      	ldr	r1, [pc, #448]	; (80026ac <HAL_I2C_Master_Transmit+0x1f4>)
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 fc56 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024f6:	2302      	movs	r3, #2
 80024f8:	e0d3      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_I2C_Master_Transmit+0x50>
 8002504:	2302      	movs	r3, #2
 8002506:	e0cc      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	2b01      	cmp	r3, #1
 800251c:	d007      	beq.n	800252e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 0201 	orr.w	r2, r2, #1
 800252c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2221      	movs	r2, #33	; 0x21
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2210      	movs	r2, #16
 800254a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2200      	movs	r2, #0
 8002552:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	893a      	ldrh	r2, [r7, #8]
 800255e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29a      	uxth	r2, r3
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	4a50      	ldr	r2, [pc, #320]	; (80026b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800256e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002570:	8979      	ldrh	r1, [r7, #10]
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	6a3a      	ldr	r2, [r7, #32]
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f000 fac2 	bl	8002b00 <I2C_MasterRequestWrite>
 800257c:	4603      	mov	r3, r0
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e08d      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	695b      	ldr	r3, [r3, #20]
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800259c:	e066      	b.n	800266c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	6a39      	ldr	r1, [r7, #32]
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f000 fcd0 	bl	8002f48 <I2C_WaitOnTXEFlagUntilTimeout>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00d      	beq.n	80025ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	d107      	bne.n	80025c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e06b      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ce:	781a      	ldrb	r2, [r3, #0]
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	1c5a      	adds	r2, r3, #1
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	3b01      	subs	r3, #1
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f2:	3b01      	subs	r3, #1
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695b      	ldr	r3, [r3, #20]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b04      	cmp	r3, #4
 8002606:	d11b      	bne.n	8002640 <HAL_I2C_Master_Transmit+0x188>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800260c:	2b00      	cmp	r3, #0
 800260e:	d017      	beq.n	8002640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	781a      	ldrb	r2, [r3, #0]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800262a:	b29b      	uxth	r3, r3
 800262c:	3b01      	subs	r3, #1
 800262e:	b29a      	uxth	r2, r3
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002638:	3b01      	subs	r3, #1
 800263a:	b29a      	uxth	r2, r3
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002640:	697a      	ldr	r2, [r7, #20]
 8002642:	6a39      	ldr	r1, [r7, #32]
 8002644:	68f8      	ldr	r0, [r7, #12]
 8002646:	f000 fcc0 	bl	8002fca <I2C_WaitOnBTFFlagUntilTimeout>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00d      	beq.n	800266c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002654:	2b04      	cmp	r3, #4
 8002656:	d107      	bne.n	8002668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681a      	ldr	r2, [r3, #0]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e01a      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d194      	bne.n	800259e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2220      	movs	r2, #32
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800269c:	2300      	movs	r3, #0
 800269e:	e000      	b.n	80026a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026a0:	2302      	movs	r3, #2
  }
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3718      	adds	r7, #24
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	bf00      	nop
 80026ac:	00100002 	.word	0x00100002
 80026b0:	ffff0000 	.word	0xffff0000

080026b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08c      	sub	sp, #48	; 0x30
 80026b8:	af02      	add	r7, sp, #8
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	461a      	mov	r2, r3
 80026c0:	460b      	mov	r3, r1
 80026c2:	817b      	strh	r3, [r7, #10]
 80026c4:	4613      	mov	r3, r2
 80026c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026c8:	f7fe fc7a 	bl	8000fc0 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b20      	cmp	r3, #32
 80026d8:	f040 820b 	bne.w	8002af2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	2319      	movs	r3, #25
 80026e2:	2201      	movs	r2, #1
 80026e4:	497c      	ldr	r1, [pc, #496]	; (80028d8 <HAL_I2C_Master_Receive+0x224>)
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 fb58 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026f2:	2302      	movs	r3, #2
 80026f4:	e1fe      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <HAL_I2C_Master_Receive+0x50>
 8002700:	2302      	movs	r3, #2
 8002702:	e1f7      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0301 	and.w	r3, r3, #1
 8002716:	2b01      	cmp	r3, #1
 8002718:	d007      	beq.n	800272a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 0201 	orr.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	681a      	ldr	r2, [r3, #0]
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002738:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2222      	movs	r2, #34	; 0x22
 800273e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2210      	movs	r2, #16
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2200      	movs	r2, #0
 800274e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	893a      	ldrh	r2, [r7, #8]
 800275a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4a5c      	ldr	r2, [pc, #368]	; (80028dc <HAL_I2C_Master_Receive+0x228>)
 800276a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800276c:	8979      	ldrh	r1, [r7, #10]
 800276e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 fa46 	bl	8002c04 <I2C_MasterRequestRead>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e1b8      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d113      	bne.n	80027b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	623b      	str	r3, [r7, #32]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699b      	ldr	r3, [r3, #24]
 800279c:	623b      	str	r3, [r7, #32]
 800279e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]
 80027b0:	e18c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d11b      	bne.n	80027f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	61fb      	str	r3, [r7, #28]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	61fb      	str	r3, [r7, #28]
 80027de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	e16c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d11b      	bne.n	8002832 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002808:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002818:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800281a:	2300      	movs	r3, #0
 800281c:	61bb      	str	r3, [r7, #24]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	695b      	ldr	r3, [r3, #20]
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	61bb      	str	r3, [r7, #24]
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	e14c      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002840:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	617b      	str	r3, [r7, #20]
 8002856:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002858:	e138      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	2b03      	cmp	r3, #3
 8002860:	f200 80f1 	bhi.w	8002a46 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	2b01      	cmp	r3, #1
 800286a:	d123      	bne.n	80028b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800286c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800286e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	f000 fbeb 	bl	800304c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	e139      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	691a      	ldr	r2, [r3, #16]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	b2d2      	uxtb	r2, r2
 800288c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002892:	1c5a      	adds	r2, r3, #1
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289c:	3b01      	subs	r3, #1
 800289e:	b29a      	uxth	r2, r3
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028b2:	e10b      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d14e      	bne.n	800295a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	2200      	movs	r2, #0
 80028c4:	4906      	ldr	r1, [pc, #24]	; (80028e0 <HAL_I2C_Master_Receive+0x22c>)
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f000 fa68 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 80028cc:	4603      	mov	r3, r0
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d008      	beq.n	80028e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e10e      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
 80028d6:	bf00      	nop
 80028d8:	00100002 	.word	0x00100002
 80028dc:	ffff0000 	.word	0xffff0000
 80028e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	691a      	ldr	r2, [r3, #16]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	b2d2      	uxtb	r2, r2
 8002900:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	1c5a      	adds	r2, r3, #1
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	3b01      	subs	r3, #1
 8002912:	b29a      	uxth	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800291c:	b29b      	uxth	r3, r3
 800291e:	3b01      	subs	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002942:	3b01      	subs	r3, #1
 8002944:	b29a      	uxth	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294e:	b29b      	uxth	r3, r3
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002958:	e0b8      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002960:	2200      	movs	r2, #0
 8002962:	4966      	ldr	r1, [pc, #408]	; (8002afc <HAL_I2C_Master_Receive+0x448>)
 8002964:	68f8      	ldr	r0, [r7, #12]
 8002966:	f000 fa19 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e0bf      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002982:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	3b01      	subs	r3, #1
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029bc:	2200      	movs	r2, #0
 80029be:	494f      	ldr	r1, [pc, #316]	; (8002afc <HAL_I2C_Master_Receive+0x448>)
 80029c0:	68f8      	ldr	r0, [r7, #12]
 80029c2:	f000 f9eb 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 80029c6:	4603      	mov	r3, r0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e091      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	691a      	ldr	r2, [r3, #16]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	b2d2      	uxtb	r2, r2
 80029ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029fc:	3b01      	subs	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	1c5a      	adds	r2, r3, #1
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a44:	e042      	b.n	8002acc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f000 fafe 	bl	800304c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a50:	4603      	mov	r3, r0
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e04c      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d118      	bne.n	8002acc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	691a      	ldr	r2, [r3, #16]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	b2d2      	uxtb	r2, r2
 8002aa6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	f47f aec2 	bne.w	800285a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2220      	movs	r2, #32
 8002ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002aee:	2300      	movs	r3, #0
 8002af0:	e000      	b.n	8002af4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
  }
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3728      	adds	r7, #40	; 0x28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	00010004 	.word	0x00010004

08002b00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af02      	add	r7, sp, #8
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d006      	beq.n	8002b2a <I2C_MasterRequestWrite+0x2a>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d003      	beq.n	8002b2a <I2C_MasterRequestWrite+0x2a>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b28:	d108      	bne.n	8002b3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b38:	601a      	str	r2, [r3, #0]
 8002b3a:	e00b      	b.n	8002b54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b40:	2b12      	cmp	r3, #18
 8002b42:	d107      	bne.n	8002b54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 f91b 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00c      	beq.n	8002b86 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	e035      	b.n	8002bf2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b8e:	d108      	bne.n	8002ba2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b90:	897b      	ldrh	r3, [r7, #10]
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	461a      	mov	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b9e:	611a      	str	r2, [r3, #16]
 8002ba0:	e01b      	b.n	8002bda <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ba2:	897b      	ldrh	r3, [r7, #10]
 8002ba4:	11db      	asrs	r3, r3, #7
 8002ba6:	b2db      	uxtb	r3, r3
 8002ba8:	f003 0306 	and.w	r3, r3, #6
 8002bac:	b2db      	uxtb	r3, r3
 8002bae:	f063 030f 	orn	r3, r3, #15
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	490f      	ldr	r1, [pc, #60]	; (8002bfc <I2C_MasterRequestWrite+0xfc>)
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f942 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e010      	b.n	8002bf2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002bd0:	897b      	ldrh	r3, [r7, #10]
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	4908      	ldr	r1, [pc, #32]	; (8002c00 <I2C_MasterRequestWrite+0x100>)
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	f000 f932 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d001      	beq.n	8002bf0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e000      	b.n	8002bf2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3718      	adds	r7, #24
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	00010008 	.word	0x00010008
 8002c00:	00010002 	.word	0x00010002

08002c04 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af02      	add	r7, sp, #8
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	607a      	str	r2, [r7, #4]
 8002c0e:	603b      	str	r3, [r7, #0]
 8002c10:	460b      	mov	r3, r1
 8002c12:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c18:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c28:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d006      	beq.n	8002c3e <I2C_MasterRequestRead+0x3a>
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d003      	beq.n	8002c3e <I2C_MasterRequestRead+0x3a>
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c3c:	d108      	bne.n	8002c50 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	e00b      	b.n	8002c68 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	2b11      	cmp	r3, #17
 8002c56:	d107      	bne.n	8002c68 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c66:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c74:	68f8      	ldr	r0, [r7, #12]
 8002c76:	f000 f891 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00c      	beq.n	8002c9a <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e078      	b.n	8002d8c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ca2:	d108      	bne.n	8002cb6 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ca4:	897b      	ldrh	r3, [r7, #10]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	b2da      	uxtb	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	611a      	str	r2, [r3, #16]
 8002cb4:	e05e      	b.n	8002d74 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cb6:	897b      	ldrh	r3, [r7, #10]
 8002cb8:	11db      	asrs	r3, r3, #7
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f003 0306 	and.w	r3, r3, #6
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	f063 030f 	orn	r3, r3, #15
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	4930      	ldr	r1, [pc, #192]	; (8002d94 <I2C_MasterRequestRead+0x190>)
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f8b8 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e053      	b.n	8002d8c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ce4:	897b      	ldrh	r3, [r7, #10]
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	4929      	ldr	r1, [pc, #164]	; (8002d98 <I2C_MasterRequestRead+0x194>)
 8002cf4:	68f8      	ldr	r0, [r7, #12]
 8002cf6:	f000 f8a8 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e043      	b.n	8002d8c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	613b      	str	r3, [r7, #16]
 8002d18:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d28:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	9300      	str	r3, [sp, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 f830 	bl	8002d9c <I2C_WaitOnFlagUntilTimeout>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00c      	beq.n	8002d5c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e017      	b.n	8002d8c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d5c:	897b      	ldrh	r3, [r7, #10]
 8002d5e:	11db      	asrs	r3, r3, #7
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 0306 	and.w	r3, r3, #6
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	f063 030e 	orn	r3, r3, #14
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <I2C_MasterRequestRead+0x194>)
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f865 	bl	8002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e000      	b.n	8002d8c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	00010008 	.word	0x00010008
 8002d98:	00010002 	.word	0x00010002

08002d9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dac:	e025      	b.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002db4:	d021      	beq.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002db6:	f7fe f903 	bl	8000fc0 <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	1ad3      	subs	r3, r2, r3
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d116      	bne.n	8002dfa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	f043 0220 	orr.w	r2, r3, #32
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e023      	b.n	8002e42 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d10d      	bne.n	8002e20 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	43da      	mvns	r2, r3
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4013      	ands	r3, r2
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	bf0c      	ite	eq
 8002e16:	2301      	moveq	r3, #1
 8002e18:	2300      	movne	r3, #0
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	e00c      	b.n	8002e3a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	699b      	ldr	r3, [r3, #24]
 8002e26:	43da      	mvns	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	4013      	ands	r3, r2
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bf0c      	ite	eq
 8002e32:	2301      	moveq	r3, #1
 8002e34:	2300      	movne	r3, #0
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	461a      	mov	r2, r3
 8002e3a:	79fb      	ldrb	r3, [r7, #7]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d0b6      	beq.n	8002dae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b084      	sub	sp, #16
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	60f8      	str	r0, [r7, #12]
 8002e52:	60b9      	str	r1, [r7, #8]
 8002e54:	607a      	str	r2, [r7, #4]
 8002e56:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e58:	e051      	b.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e68:	d123      	bne.n	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e78:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e82:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	f043 0204 	orr.w	r2, r3, #4
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e046      	b.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002eb8:	d021      	beq.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eba:	f7fe f881 	bl	8000fc0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d302      	bcc.n	8002ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d116      	bne.n	8002efe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2220      	movs	r2, #32
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e020      	b.n	8002f40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	0c1b      	lsrs	r3, r3, #16
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d10c      	bne.n	8002f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	43da      	mvns	r2, r3
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4013      	ands	r3, r2
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bf14      	ite	ne
 8002f1a:	2301      	movne	r3, #1
 8002f1c:	2300      	moveq	r3, #0
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	e00b      	b.n	8002f3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	699b      	ldr	r3, [r3, #24]
 8002f28:	43da      	mvns	r2, r3
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	bf14      	ite	ne
 8002f34:	2301      	movne	r3, #1
 8002f36:	2300      	moveq	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d18d      	bne.n	8002e5a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f54:	e02d      	b.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f000 f8ce 	bl	80030f8 <I2C_IsAcknowledgeFailed>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d001      	beq.n	8002f66 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e02d      	b.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f6c:	d021      	beq.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f6e:	f7fe f827 	bl	8000fc0 <HAL_GetTick>
 8002f72:	4602      	mov	r2, r0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	68ba      	ldr	r2, [r7, #8]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d302      	bcc.n	8002f84 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d116      	bne.n	8002fb2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2200      	movs	r2, #0
 8002f88:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9e:	f043 0220 	orr.w	r2, r3, #32
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e007      	b.n	8002fc2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d1ca      	bne.n	8002f56 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fd6:	e02d      	b.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fd8:	68f8      	ldr	r0, [r7, #12]
 8002fda:	f000 f88d 	bl	80030f8 <I2C_IsAcknowledgeFailed>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e02d      	b.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fee:	d021      	beq.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ff0:	f7fd ffe6 	bl	8000fc0 <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	68ba      	ldr	r2, [r7, #8]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d302      	bcc.n	8003006 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d116      	bne.n	8003034 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003020:	f043 0220 	orr.w	r2, r3, #32
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e007      	b.n	8003044 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	2b04      	cmp	r3, #4
 8003040:	d1ca      	bne.n	8002fd8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3710      	adds	r7, #16
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003058:	e042      	b.n	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0310 	and.w	r3, r3, #16
 8003064:	2b10      	cmp	r3, #16
 8003066:	d119      	bne.n	800309c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0210 	mvn.w	r2, #16
 8003070:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e029      	b.n	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800309c:	f7fd ff90 	bl	8000fc0 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d302      	bcc.n	80030b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d116      	bne.n	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e007      	b.n	80030f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ea:	2b40      	cmp	r3, #64	; 0x40
 80030ec:	d1b5      	bne.n	800305a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800310a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800310e:	d11b      	bne.n	8003148 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003118:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0204 	orr.w	r2, r3, #4
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e000      	b.n	800314a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e25b      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d075      	beq.n	8003262 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003176:	4ba3      	ldr	r3, [pc, #652]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f003 030c 	and.w	r3, r3, #12
 800317e:	2b04      	cmp	r3, #4
 8003180:	d00c      	beq.n	800319c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003182:	4ba0      	ldr	r3, [pc, #640]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800318a:	2b08      	cmp	r3, #8
 800318c:	d112      	bne.n	80031b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800318e:	4b9d      	ldr	r3, [pc, #628]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003196:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800319a:	d10b      	bne.n	80031b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800319c:	4b99      	ldr	r3, [pc, #612]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d05b      	beq.n	8003260 <HAL_RCC_OscConfig+0x108>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d157      	bne.n	8003260 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e236      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031bc:	d106      	bne.n	80031cc <HAL_RCC_OscConfig+0x74>
 80031be:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a90      	ldr	r2, [pc, #576]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	e01d      	b.n	8003208 <HAL_RCC_OscConfig+0xb0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x98>
 80031d6:	4b8b      	ldr	r3, [pc, #556]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a8a      	ldr	r2, [pc, #552]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031e0:	6013      	str	r3, [r2, #0]
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a87      	ldr	r2, [pc, #540]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ec:	6013      	str	r3, [r2, #0]
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0xb0>
 80031f0:	4b84      	ldr	r3, [pc, #528]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a83      	ldr	r2, [pc, #524]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	4b81      	ldr	r3, [pc, #516]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a80      	ldr	r2, [pc, #512]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003202:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003206:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d013      	beq.n	8003238 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fd fed6 	bl	8000fc0 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003218:	f7fd fed2 	bl	8000fc0 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	; 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1fb      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d0f0      	beq.n	8003218 <HAL_RCC_OscConfig+0xc0>
 8003236:	e014      	b.n	8003262 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003238:	f7fd fec2 	bl	8000fc0 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800323e:	e008      	b.n	8003252 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003240:	f7fd febe 	bl	8000fc0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	2b64      	cmp	r3, #100	; 0x64
 800324c:	d901      	bls.n	8003252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e1e7      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003252:	4b6c      	ldr	r3, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d1f0      	bne.n	8003240 <HAL_RCC_OscConfig+0xe8>
 800325e:	e000      	b.n	8003262 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003260:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d063      	beq.n	8003336 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800326e:	4b65      	ldr	r3, [pc, #404]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	f003 030c 	and.w	r3, r3, #12
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800327a:	4b62      	ldr	r3, [pc, #392]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003282:	2b08      	cmp	r3, #8
 8003284:	d11c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003286:	4b5f      	ldr	r3, [pc, #380]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d116      	bne.n	80032c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003292:	4b5c      	ldr	r3, [pc, #368]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0302 	and.w	r3, r3, #2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_RCC_OscConfig+0x152>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d001      	beq.n	80032aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e1bb      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032aa:	4b56      	ldr	r3, [pc, #344]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4952      	ldr	r1, [pc, #328]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032be:	e03a      	b.n	8003336 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d020      	beq.n	800330a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032c8:	4b4f      	ldr	r3, [pc, #316]	; (8003408 <HAL_RCC_OscConfig+0x2b0>)
 80032ca:	2201      	movs	r2, #1
 80032cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ce:	f7fd fe77 	bl	8000fc0 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032d4:	e008      	b.n	80032e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032d6:	f7fd fe73 	bl	8000fc0 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	2b02      	cmp	r3, #2
 80032e2:	d901      	bls.n	80032e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e19c      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032e8:	4b46      	ldr	r3, [pc, #280]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d0f0      	beq.n	80032d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032f4:	4b43      	ldr	r3, [pc, #268]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	4940      	ldr	r1, [pc, #256]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	4313      	orrs	r3, r2
 8003306:	600b      	str	r3, [r1, #0]
 8003308:	e015      	b.n	8003336 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HAL_RCC_OscConfig+0x2b0>)
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003310:	f7fd fe56 	bl	8000fc0 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003318:	f7fd fe52 	bl	8000fc0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b02      	cmp	r3, #2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e17b      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1f0      	bne.n	8003318 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d030      	beq.n	80033a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	695b      	ldr	r3, [r3, #20]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d016      	beq.n	8003378 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800334a:	4b30      	ldr	r3, [pc, #192]	; (800340c <HAL_RCC_OscConfig+0x2b4>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003350:	f7fd fe36 	bl	8000fc0 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003358:	f7fd fe32 	bl	8000fc0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e15b      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800336a:	4b26      	ldr	r3, [pc, #152]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 800336c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d0f0      	beq.n	8003358 <HAL_RCC_OscConfig+0x200>
 8003376:	e015      	b.n	80033a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003378:	4b24      	ldr	r3, [pc, #144]	; (800340c <HAL_RCC_OscConfig+0x2b4>)
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800337e:	f7fd fe1f 	bl	8000fc0 <HAL_GetTick>
 8003382:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	e008      	b.n	8003398 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003386:	f7fd fe1b 	bl	8000fc0 <HAL_GetTick>
 800338a:	4602      	mov	r2, r0
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	2b02      	cmp	r3, #2
 8003392:	d901      	bls.n	8003398 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	e144      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 800339a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800339c:	f003 0302 	and.w	r3, r3, #2
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f0      	bne.n	8003386 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f003 0304 	and.w	r3, r3, #4
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80a0 	beq.w	80034f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033b2:	2300      	movs	r3, #0
 80033b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033b6:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033c2:	2300      	movs	r3, #0
 80033c4:	60bb      	str	r3, [r7, #8]
 80033c6:	4b0f      	ldr	r3, [pc, #60]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ca:	4a0e      	ldr	r2, [pc, #56]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d0:	6413      	str	r3, [r2, #64]	; 0x40
 80033d2:	4b0c      	ldr	r3, [pc, #48]	; (8003404 <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033da:	60bb      	str	r3, [r7, #8]
 80033dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033de:	2301      	movs	r3, #1
 80033e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e2:	4b0b      	ldr	r3, [pc, #44]	; (8003410 <HAL_RCC_OscConfig+0x2b8>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d121      	bne.n	8003432 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ee:	4b08      	ldr	r3, [pc, #32]	; (8003410 <HAL_RCC_OscConfig+0x2b8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a07      	ldr	r2, [pc, #28]	; (8003410 <HAL_RCC_OscConfig+0x2b8>)
 80033f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033fa:	f7fd fde1 	bl	8000fc0 <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003400:	e011      	b.n	8003426 <HAL_RCC_OscConfig+0x2ce>
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	42470000 	.word	0x42470000
 800340c:	42470e80 	.word	0x42470e80
 8003410:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003414:	f7fd fdd4 	bl	8000fc0 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b02      	cmp	r3, #2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0fd      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003426:	4b81      	ldr	r3, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x4d4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x2f0>
 800343a:	4b7d      	ldr	r3, [pc, #500]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a7c      	ldr	r2, [pc, #496]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003440:	f043 0301 	orr.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	e01c      	b.n	8003482 <HAL_RCC_OscConfig+0x32a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	2b05      	cmp	r3, #5
 800344e:	d10c      	bne.n	800346a <HAL_RCC_OscConfig+0x312>
 8003450:	4b77      	ldr	r3, [pc, #476]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003454:	4a76      	ldr	r2, [pc, #472]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003456:	f043 0304 	orr.w	r3, r3, #4
 800345a:	6713      	str	r3, [r2, #112]	; 0x70
 800345c:	4b74      	ldr	r3, [pc, #464]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 800345e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003460:	4a73      	ldr	r2, [pc, #460]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003462:	f043 0301 	orr.w	r3, r3, #1
 8003466:	6713      	str	r3, [r2, #112]	; 0x70
 8003468:	e00b      	b.n	8003482 <HAL_RCC_OscConfig+0x32a>
 800346a:	4b71      	ldr	r3, [pc, #452]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 800346c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346e:	4a70      	ldr	r2, [pc, #448]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003470:	f023 0301 	bic.w	r3, r3, #1
 8003474:	6713      	str	r3, [r2, #112]	; 0x70
 8003476:	4b6e      	ldr	r3, [pc, #440]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347a:	4a6d      	ldr	r2, [pc, #436]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 800347c:	f023 0304 	bic.w	r3, r3, #4
 8003480:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d015      	beq.n	80034b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348a:	f7fd fd99 	bl	8000fc0 <HAL_GetTick>
 800348e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003490:	e00a      	b.n	80034a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003492:	f7fd fd95 	bl	8000fc0 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d901      	bls.n	80034a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80034a4:	2303      	movs	r3, #3
 80034a6:	e0bc      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a8:	4b61      	ldr	r3, [pc, #388]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 80034aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ee      	beq.n	8003492 <HAL_RCC_OscConfig+0x33a>
 80034b4:	e014      	b.n	80034e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034b6:	f7fd fd83 	bl	8000fc0 <HAL_GetTick>
 80034ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034bc:	e00a      	b.n	80034d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034be:	f7fd fd7f 	bl	8000fc0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d901      	bls.n	80034d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80034d0:	2303      	movs	r3, #3
 80034d2:	e0a6      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034d4:	4b56      	ldr	r3, [pc, #344]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1ee      	bne.n	80034be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034e0:	7dfb      	ldrb	r3, [r7, #23]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d105      	bne.n	80034f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034e6:	4b52      	ldr	r3, [pc, #328]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	4a51      	ldr	r2, [pc, #324]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 80034ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	699b      	ldr	r3, [r3, #24]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	f000 8092 	beq.w	8003620 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034fc:	4b4c      	ldr	r3, [pc, #304]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b08      	cmp	r3, #8
 8003506:	d05c      	beq.n	80035c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
 800350c:	2b02      	cmp	r3, #2
 800350e:	d141      	bne.n	8003594 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003510:	4b48      	ldr	r3, [pc, #288]	; (8003634 <HAL_RCC_OscConfig+0x4dc>)
 8003512:	2200      	movs	r2, #0
 8003514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003516:	f7fd fd53 	bl	8000fc0 <HAL_GetTick>
 800351a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800351c:	e008      	b.n	8003530 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800351e:	f7fd fd4f 	bl	8000fc0 <HAL_GetTick>
 8003522:	4602      	mov	r2, r0
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	1ad3      	subs	r3, r2, r3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d901      	bls.n	8003530 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e078      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003530:	4b3f      	ldr	r3, [pc, #252]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d1f0      	bne.n	800351e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	431a      	orrs	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	019b      	lsls	r3, r3, #6
 800354c:	431a      	orrs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	3b01      	subs	r3, #1
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	431a      	orrs	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355e:	061b      	lsls	r3, r3, #24
 8003560:	4933      	ldr	r1, [pc, #204]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003562:	4313      	orrs	r3, r2
 8003564:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003566:	4b33      	ldr	r3, [pc, #204]	; (8003634 <HAL_RCC_OscConfig+0x4dc>)
 8003568:	2201      	movs	r2, #1
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fd28 	bl	8000fc0 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003574:	f7fd fd24 	bl	8000fc0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e04d      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003586:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d0f0      	beq.n	8003574 <HAL_RCC_OscConfig+0x41c>
 8003592:	e045      	b.n	8003620 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003594:	4b27      	ldr	r3, [pc, #156]	; (8003634 <HAL_RCC_OscConfig+0x4dc>)
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359a:	f7fd fd11 	bl	8000fc0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035a2:	f7fd fd0d 	bl	8000fc0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e036      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035b4:	4b1e      	ldr	r3, [pc, #120]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1f0      	bne.n	80035a2 <HAL_RCC_OscConfig+0x44a>
 80035c0:	e02e      	b.n	8003620 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e029      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035ce:	4b18      	ldr	r3, [pc, #96]	; (8003630 <HAL_RCC_OscConfig+0x4d8>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d11c      	bne.n	800361c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d115      	bne.n	800361c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035f6:	4013      	ands	r3, r2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d10d      	bne.n	800361c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e000      	b.n	8003622 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3718      	adds	r7, #24
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40007000 	.word	0x40007000
 8003630:	40023800 	.word	0x40023800
 8003634:	42470060 	.word	0x42470060

08003638 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d101      	bne.n	800364c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e0cc      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800364c:	4b68      	ldr	r3, [pc, #416]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	683a      	ldr	r2, [r7, #0]
 8003656:	429a      	cmp	r2, r3
 8003658:	d90c      	bls.n	8003674 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800365a:	4b65      	ldr	r3, [pc, #404]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	b2d2      	uxtb	r2, r2
 8003660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003662:	4b63      	ldr	r3, [pc, #396]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d001      	beq.n	8003674 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0b8      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d020      	beq.n	80036c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	4a58      	ldr	r2, [pc, #352]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003692:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003696:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0308 	and.w	r3, r3, #8
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d005      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036a4:	4b53      	ldr	r3, [pc, #332]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	4a52      	ldr	r2, [pc, #328]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b50      	ldr	r3, [pc, #320]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	494d      	ldr	r1, [pc, #308]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d044      	beq.n	8003758 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d107      	bne.n	80036e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036d6:	4b47      	ldr	r3, [pc, #284]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d119      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e07f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d003      	beq.n	80036f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d107      	bne.n	8003706 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b3f      	ldr	r3, [pc, #252]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d109      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003706:	4b3b      	ldr	r3, [pc, #236]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e067      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003716:	4b37      	ldr	r3, [pc, #220]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f023 0203 	bic.w	r2, r3, #3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	4934      	ldr	r1, [pc, #208]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	4313      	orrs	r3, r2
 8003726:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003728:	f7fd fc4a 	bl	8000fc0 <HAL_GetTick>
 800372c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800372e:	e00a      	b.n	8003746 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003730:	f7fd fc46 	bl	8000fc0 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e04f      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003746:	4b2b      	ldr	r3, [pc, #172]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f003 020c 	and.w	r2, r3, #12
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	429a      	cmp	r2, r3
 8003756:	d1eb      	bne.n	8003730 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003758:	4b25      	ldr	r3, [pc, #148]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 030f 	and.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	429a      	cmp	r2, r3
 8003764:	d20c      	bcs.n	8003780 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003766:	4b22      	ldr	r3, [pc, #136]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800376e:	4b20      	ldr	r3, [pc, #128]	; (80037f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 030f 	and.w	r3, r3, #15
 8003776:	683a      	ldr	r2, [r7, #0]
 8003778:	429a      	cmp	r2, r3
 800377a:	d001      	beq.n	8003780 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e032      	b.n	80037e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0304 	and.w	r3, r3, #4
 8003788:	2b00      	cmp	r3, #0
 800378a:	d008      	beq.n	800379e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800378c:	4b19      	ldr	r3, [pc, #100]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	68db      	ldr	r3, [r3, #12]
 8003798:	4916      	ldr	r1, [pc, #88]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 800379a:	4313      	orrs	r3, r2
 800379c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d009      	beq.n	80037be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	691b      	ldr	r3, [r3, #16]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	490e      	ldr	r1, [pc, #56]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037be:	f000 f821 	bl	8003804 <HAL_RCC_GetSysClockFreq>
 80037c2:	4601      	mov	r1, r0
 80037c4:	4b0b      	ldr	r3, [pc, #44]	; (80037f4 <HAL_RCC_ClockConfig+0x1bc>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	091b      	lsrs	r3, r3, #4
 80037ca:	f003 030f 	and.w	r3, r3, #15
 80037ce:	4a0a      	ldr	r2, [pc, #40]	; (80037f8 <HAL_RCC_ClockConfig+0x1c0>)
 80037d0:	5cd3      	ldrb	r3, [r2, r3]
 80037d2:	fa21 f303 	lsr.w	r3, r1, r3
 80037d6:	4a09      	ldr	r2, [pc, #36]	; (80037fc <HAL_RCC_ClockConfig+0x1c4>)
 80037d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <HAL_RCC_ClockConfig+0x1c8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f7fd fbaa 	bl	8000f38 <HAL_InitTick>

  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	40023c00 	.word	0x40023c00
 80037f4:	40023800 	.word	0x40023800
 80037f8:	08009730 	.word	0x08009730
 80037fc:	20000008 	.word	0x20000008
 8003800:	20000000 	.word	0x20000000

08003804 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003804:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003806:	b085      	sub	sp, #20
 8003808:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800380a:	2300      	movs	r3, #0
 800380c:	607b      	str	r3, [r7, #4]
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	2300      	movs	r3, #0
 8003814:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800381a:	4b63      	ldr	r3, [pc, #396]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b04      	cmp	r3, #4
 8003824:	d007      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x32>
 8003826:	2b08      	cmp	r3, #8
 8003828:	d008      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x38>
 800382a:	2b00      	cmp	r3, #0
 800382c:	f040 80b4 	bne.w	8003998 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b5e      	ldr	r3, [pc, #376]	; (80039ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003832:	60bb      	str	r3, [r7, #8]
       break;
 8003834:	e0b3      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003836:	4b5e      	ldr	r3, [pc, #376]	; (80039b0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003838:	60bb      	str	r3, [r7, #8]
      break;
 800383a:	e0b0      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383c:	4b5a      	ldr	r3, [pc, #360]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003844:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003846:	4b58      	ldr	r3, [pc, #352]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d04a      	beq.n	80038e8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b55      	ldr	r3, [pc, #340]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	f04f 0400 	mov.w	r4, #0
 800385c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003860:	f04f 0200 	mov.w	r2, #0
 8003864:	ea03 0501 	and.w	r5, r3, r1
 8003868:	ea04 0602 	and.w	r6, r4, r2
 800386c:	4629      	mov	r1, r5
 800386e:	4632      	mov	r2, r6
 8003870:	f04f 0300 	mov.w	r3, #0
 8003874:	f04f 0400 	mov.w	r4, #0
 8003878:	0154      	lsls	r4, r2, #5
 800387a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800387e:	014b      	lsls	r3, r1, #5
 8003880:	4619      	mov	r1, r3
 8003882:	4622      	mov	r2, r4
 8003884:	1b49      	subs	r1, r1, r5
 8003886:	eb62 0206 	sbc.w	r2, r2, r6
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	f04f 0400 	mov.w	r4, #0
 8003892:	0194      	lsls	r4, r2, #6
 8003894:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003898:	018b      	lsls	r3, r1, #6
 800389a:	1a5b      	subs	r3, r3, r1
 800389c:	eb64 0402 	sbc.w	r4, r4, r2
 80038a0:	f04f 0100 	mov.w	r1, #0
 80038a4:	f04f 0200 	mov.w	r2, #0
 80038a8:	00e2      	lsls	r2, r4, #3
 80038aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038ae:	00d9      	lsls	r1, r3, #3
 80038b0:	460b      	mov	r3, r1
 80038b2:	4614      	mov	r4, r2
 80038b4:	195b      	adds	r3, r3, r5
 80038b6:	eb44 0406 	adc.w	r4, r4, r6
 80038ba:	f04f 0100 	mov.w	r1, #0
 80038be:	f04f 0200 	mov.w	r2, #0
 80038c2:	0262      	lsls	r2, r4, #9
 80038c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80038c8:	0259      	lsls	r1, r3, #9
 80038ca:	460b      	mov	r3, r1
 80038cc:	4614      	mov	r4, r2
 80038ce:	4618      	mov	r0, r3
 80038d0:	4621      	mov	r1, r4
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f04f 0400 	mov.w	r4, #0
 80038d8:	461a      	mov	r2, r3
 80038da:	4623      	mov	r3, r4
 80038dc:	f7fd f90e 	bl	8000afc <__aeabi_uldivmod>
 80038e0:	4603      	mov	r3, r0
 80038e2:	460c      	mov	r4, r1
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	e049      	b.n	800397c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e8:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	f04f 0400 	mov.w	r4, #0
 80038f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	ea03 0501 	and.w	r5, r3, r1
 80038fe:	ea04 0602 	and.w	r6, r4, r2
 8003902:	4629      	mov	r1, r5
 8003904:	4632      	mov	r2, r6
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	f04f 0400 	mov.w	r4, #0
 800390e:	0154      	lsls	r4, r2, #5
 8003910:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003914:	014b      	lsls	r3, r1, #5
 8003916:	4619      	mov	r1, r3
 8003918:	4622      	mov	r2, r4
 800391a:	1b49      	subs	r1, r1, r5
 800391c:	eb62 0206 	sbc.w	r2, r2, r6
 8003920:	f04f 0300 	mov.w	r3, #0
 8003924:	f04f 0400 	mov.w	r4, #0
 8003928:	0194      	lsls	r4, r2, #6
 800392a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800392e:	018b      	lsls	r3, r1, #6
 8003930:	1a5b      	subs	r3, r3, r1
 8003932:	eb64 0402 	sbc.w	r4, r4, r2
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	00e2      	lsls	r2, r4, #3
 8003940:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003944:	00d9      	lsls	r1, r3, #3
 8003946:	460b      	mov	r3, r1
 8003948:	4614      	mov	r4, r2
 800394a:	195b      	adds	r3, r3, r5
 800394c:	eb44 0406 	adc.w	r4, r4, r6
 8003950:	f04f 0100 	mov.w	r1, #0
 8003954:	f04f 0200 	mov.w	r2, #0
 8003958:	02a2      	lsls	r2, r4, #10
 800395a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800395e:	0299      	lsls	r1, r3, #10
 8003960:	460b      	mov	r3, r1
 8003962:	4614      	mov	r4, r2
 8003964:	4618      	mov	r0, r3
 8003966:	4621      	mov	r1, r4
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f04f 0400 	mov.w	r4, #0
 800396e:	461a      	mov	r2, r3
 8003970:	4623      	mov	r3, r4
 8003972:	f7fd f8c3 	bl	8000afc <__aeabi_uldivmod>
 8003976:	4603      	mov	r3, r0
 8003978:	460c      	mov	r4, r1
 800397a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	3301      	adds	r3, #1
 8003988:	005b      	lsls	r3, r3, #1
 800398a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	fbb2 f3f3 	udiv	r3, r2, r3
 8003994:	60bb      	str	r3, [r7, #8]
      break;
 8003996:	e002      	b.n	800399e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003998:	4b04      	ldr	r3, [pc, #16]	; (80039ac <HAL_RCC_GetSysClockFreq+0x1a8>)
 800399a:	60bb      	str	r3, [r7, #8]
      break;
 800399c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800399e:	68bb      	ldr	r3, [r7, #8]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3714      	adds	r7, #20
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039a8:	40023800 	.word	0x40023800
 80039ac:	00f42400 	.word	0x00f42400
 80039b0:	007a1200 	.word	0x007a1200

080039b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80039b8:	4b03      	ldr	r3, [pc, #12]	; (80039c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80039ba:	681b      	ldr	r3, [r3, #0]
}
 80039bc:	4618      	mov	r0, r3
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	20000008 	.word	0x20000008

080039cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80039d0:	f7ff fff0 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039d4:	4601      	mov	r1, r0
 80039d6:	4b05      	ldr	r3, [pc, #20]	; (80039ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	0a9b      	lsrs	r3, r3, #10
 80039dc:	f003 0307 	and.w	r3, r3, #7
 80039e0:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039e2:	5cd3      	ldrb	r3, [r2, r3]
 80039e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40023800 	.word	0x40023800
 80039f0:	08009740 	.word	0x08009740

080039f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039f8:	f7ff ffdc 	bl	80039b4 <HAL_RCC_GetHCLKFreq>
 80039fc:	4601      	mov	r1, r0
 80039fe:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	0b5b      	lsrs	r3, r3, #13
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	4a03      	ldr	r2, [pc, #12]	; (8003a18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a0a:	5cd3      	ldrb	r3, [r2, r3]
 8003a0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	40023800 	.word	0x40023800
 8003a18:	08009740 	.word	0x08009740

08003a1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e056      	b.n	8003adc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3a:	b2db      	uxtb	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d106      	bne.n	8003a4e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f004 fa7d 	bl	8007f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2202      	movs	r2, #2
 8003a52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a64:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	431a      	orrs	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69db      	ldr	r3, [r3, #28]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	ea42 0103 	orr.w	r1, r2, r3
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	0c1b      	lsrs	r3, r3, #16
 8003aac:	f003 0104 	and.w	r1, r3, #4
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69da      	ldr	r2, [r3, #28]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003aca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d101      	bne.n	8003b06 <HAL_SPI_Transmit+0x22>
 8003b02:	2302      	movs	r3, #2
 8003b04:	e11e      	b.n	8003d44 <HAL_SPI_Transmit+0x260>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b0e:	f7fd fa57 	bl	8000fc0 <HAL_GetTick>
 8003b12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d002      	beq.n	8003b2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b24:	2302      	movs	r3, #2
 8003b26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b28:	e103      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_SPI_Transmit+0x52>
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d102      	bne.n	8003b3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b3a:	e0fa      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2203      	movs	r2, #3
 8003b40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	88fa      	ldrh	r2, [r7, #6]
 8003b5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d107      	bne.n	8003b94 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9e:	2b40      	cmp	r3, #64	; 0x40
 8003ba0:	d007      	beq.n	8003bb2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bb0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bba:	d14b      	bne.n	8003c54 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d002      	beq.n	8003bca <HAL_SPI_Transmit+0xe6>
 8003bc4:	8afb      	ldrh	r3, [r7, #22]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d13e      	bne.n	8003c48 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	881a      	ldrh	r2, [r3, #0]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003bee:	e02b      	b.n	8003c48 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d112      	bne.n	8003c24 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c02:	881a      	ldrh	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	1c9a      	adds	r2, r3, #2
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c22:	e011      	b.n	8003c48 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c24:	f7fd f9cc 	bl	8000fc0 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	69bb      	ldr	r3, [r7, #24]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	683a      	ldr	r2, [r7, #0]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d803      	bhi.n	8003c3c <HAL_SPI_Transmit+0x158>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c3a:	d102      	bne.n	8003c42 <HAL_SPI_Transmit+0x15e>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d102      	bne.n	8003c48 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003c46:	e074      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ce      	bne.n	8003bf0 <HAL_SPI_Transmit+0x10c>
 8003c52:	e04c      	b.n	8003cee <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_SPI_Transmit+0x17e>
 8003c5c:	8afb      	ldrh	r3, [r7, #22]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d140      	bne.n	8003ce4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	330c      	adds	r3, #12
 8003c6c:	7812      	ldrb	r2, [r2, #0]
 8003c6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c74:	1c5a      	adds	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c7e:	b29b      	uxth	r3, r3
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003c88:	e02c      	b.n	8003ce4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d113      	bne.n	8003cc0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	330c      	adds	r3, #12
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	86da      	strh	r2, [r3, #54]	; 0x36
 8003cbe:	e011      	b.n	8003ce4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003cc0:	f7fd f97e 	bl	8000fc0 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	683a      	ldr	r2, [r7, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d803      	bhi.n	8003cd8 <HAL_SPI_Transmit+0x1f4>
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd6:	d102      	bne.n	8003cde <HAL_SPI_Transmit+0x1fa>
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d102      	bne.n	8003ce4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ce2:	e026      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d1cd      	bne.n	8003c8a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cee:	69ba      	ldr	r2, [r7, #24]
 8003cf0:	6839      	ldr	r1, [r7, #0]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 fcc4 	bl	8004680 <SPI_EndRxTxTransaction>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d002      	beq.n	8003d04 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2220      	movs	r2, #32
 8003d02:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d10a      	bne.n	8003d22 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	613b      	str	r3, [r7, #16]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	613b      	str	r3, [r7, #16]
 8003d20:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d002      	beq.n	8003d30 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	77fb      	strb	r3, [r7, #31]
 8003d2e:	e000      	b.n	8003d32 <HAL_SPI_Transmit+0x24e>
  }

error:
 8003d30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3720      	adds	r7, #32
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b088      	sub	sp, #32
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	60b9      	str	r1, [r7, #8]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d68:	d112      	bne.n	8003d90 <HAL_SPI_Receive+0x44>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10e      	bne.n	8003d90 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2204      	movs	r2, #4
 8003d76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	4613      	mov	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	68b9      	ldr	r1, [r7, #8]
 8003d86:	68f8      	ldr	r0, [r7, #12]
 8003d88:	f000 f8e9 	bl	8003f5e <HAL_SPI_TransmitReceive>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	e0e2      	b.n	8003f56 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_SPI_Receive+0x52>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e0db      	b.n	8003f56 <HAL_SPI_Receive+0x20a>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003da6:	f7fd f90b 	bl	8000fc0 <HAL_GetTick>
 8003daa:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
 8003dba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dbc:	e0c2      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SPI_Receive+0x7e>
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dce:	e0b9      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2204      	movs	r2, #4
 8003dd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e16:	d107      	bne.n	8003e28 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e26:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d007      	beq.n	8003e46 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d162      	bne.n	8003f14 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003e4e:	e02e      	b.n	8003eae <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0301 	and.w	r3, r3, #1
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d115      	bne.n	8003e8a <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f103 020c 	add.w	r2, r3, #12
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e6a:	7812      	ldrb	r2, [r2, #0]
 8003e6c:	b2d2      	uxtb	r2, r2
 8003e6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	3b01      	subs	r3, #1
 8003e82:	b29a      	uxth	r2, r3
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e88:	e011      	b.n	8003eae <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e8a:	f7fd f899 	bl	8000fc0 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d803      	bhi.n	8003ea2 <HAL_SPI_Receive+0x156>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea0:	d102      	bne.n	8003ea8 <HAL_SPI_Receive+0x15c>
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d102      	bne.n	8003eae <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003eac:	e04a      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1cb      	bne.n	8003e50 <HAL_SPI_Receive+0x104>
 8003eb8:	e031      	b.n	8003f1e <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d113      	bne.n	8003ef0 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	b292      	uxth	r2, r2
 8003ed4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eda:	1c9a      	adds	r2, r3, #2
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	b29a      	uxth	r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eee:	e011      	b.n	8003f14 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ef0:	f7fd f866 	bl	8000fc0 <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d803      	bhi.n	8003f08 <HAL_SPI_Receive+0x1bc>
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f06:	d102      	bne.n	8003f0e <HAL_SPI_Receive+0x1c2>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d102      	bne.n	8003f14 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f12:	e017      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1cd      	bne.n	8003eba <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	6839      	ldr	r1, [r7, #0]
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f000 fb46 	bl	80045b4 <SPI_EndRxTransaction>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d002      	beq.n	8003f34 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2220      	movs	r2, #32
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d002      	beq.n	8003f42 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	75fb      	strb	r3, [r7, #23]
 8003f40:	e000      	b.n	8003f44 <HAL_SPI_Receive+0x1f8>
  }

error :
 8003f42:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}

08003f5e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b08c      	sub	sp, #48	; 0x30
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]
 8003f6a:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f70:	2300      	movs	r3, #0
 8003f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d101      	bne.n	8003f84 <HAL_SPI_TransmitReceive+0x26>
 8003f80:	2302      	movs	r3, #2
 8003f82:	e18a      	b.n	800429a <HAL_SPI_TransmitReceive+0x33c>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f8c:	f7fd f818 	bl	8000fc0 <HAL_GetTick>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003fa2:	887b      	ldrh	r3, [r7, #2]
 8003fa4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d00f      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x70>
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fb4:	d107      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d103      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x68>
 8003fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d003      	beq.n	8003fce <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fcc:	e15b      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x82>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <HAL_SPI_TransmitReceive+0x82>
 8003fda:	887b      	ldrh	r3, [r7, #2]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d103      	bne.n	8003fe8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fe6:	e14e      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d003      	beq.n	8003ffc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2205      	movs	r2, #5
 8003ff8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	887a      	ldrh	r2, [r7, #2]
 8004012:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	68ba      	ldr	r2, [r7, #8]
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	887a      	ldrh	r2, [r7, #2]
 800401e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	887a      	ldrh	r2, [r7, #2]
 8004024:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800403c:	2b40      	cmp	r3, #64	; 0x40
 800403e:	d007      	beq.n	8004050 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800404e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004058:	d178      	bne.n	800414c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d002      	beq.n	8004068 <HAL_SPI_TransmitReceive+0x10a>
 8004062:	8b7b      	ldrh	r3, [r7, #26]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d166      	bne.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406c:	881a      	ldrh	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004078:	1c9a      	adds	r2, r3, #2
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800408c:	e053      	b.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b02      	cmp	r3, #2
 800409a:	d11b      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d016      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d113      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	881a      	ldrh	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	1c9a      	adds	r2, r3, #2
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d119      	bne.n	8004116 <HAL_SPI_TransmitReceive+0x1b8>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d014      	beq.n	8004116 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68da      	ldr	r2, [r3, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f6:	b292      	uxth	r2, r2
 80040f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040fe:	1c9a      	adds	r2, r3, #2
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004108:	b29b      	uxth	r3, r3
 800410a:	3b01      	subs	r3, #1
 800410c:	b29a      	uxth	r2, r3
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004112:	2301      	movs	r3, #1
 8004114:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004116:	f7fc ff53 	bl	8000fc0 <HAL_GetTick>
 800411a:	4602      	mov	r2, r0
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	1ad3      	subs	r3, r2, r3
 8004120:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004122:	429a      	cmp	r2, r3
 8004124:	d807      	bhi.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
 8004126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800412c:	d003      	beq.n	8004136 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004134:	e0a7      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1a6      	bne.n	800408e <HAL_SPI_TransmitReceive+0x130>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004144:	b29b      	uxth	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1a1      	bne.n	800408e <HAL_SPI_TransmitReceive+0x130>
 800414a:	e07c      	b.n	8004246 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d002      	beq.n	800415a <HAL_SPI_TransmitReceive+0x1fc>
 8004154:	8b7b      	ldrh	r3, [r7, #26]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d16b      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	330c      	adds	r3, #12
 8004164:	7812      	ldrb	r2, [r2, #0]
 8004166:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800416c:	1c5a      	adds	r2, r3, #1
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004176:	b29b      	uxth	r3, r3
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004180:	e057      	b.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b02      	cmp	r3, #2
 800418e:	d11c      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004194:	b29b      	uxth	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d017      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d114      	bne.n	80041ca <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	330c      	adds	r3, #12
 80041aa:	7812      	ldrb	r2, [r2, #0]
 80041ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041b2:	1c5a      	adds	r2, r3, #1
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041c6:	2300      	movs	r3, #0
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	689b      	ldr	r3, [r3, #8]
 80041d0:	f003 0301 	and.w	r3, r3, #1
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d119      	bne.n	800420c <HAL_SPI_TransmitReceive+0x2ae>
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d014      	beq.n	800420c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68da      	ldr	r2, [r3, #12]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041f4:	1c5a      	adds	r2, r3, #1
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041fe:	b29b      	uxth	r3, r3
 8004200:	3b01      	subs	r3, #1
 8004202:	b29a      	uxth	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004208:	2301      	movs	r3, #1
 800420a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800420c:	f7fc fed8 	bl	8000fc0 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004218:	429a      	cmp	r2, r3
 800421a:	d803      	bhi.n	8004224 <HAL_SPI_TransmitReceive+0x2c6>
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004222:	d102      	bne.n	800422a <HAL_SPI_TransmitReceive+0x2cc>
 8004224:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004226:	2b00      	cmp	r3, #0
 8004228:	d103      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004230:	e029      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1a2      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x224>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004240:	b29b      	uxth	r3, r3
 8004242:	2b00      	cmp	r3, #0
 8004244:	d19d      	bne.n	8004182 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004248:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 fa18 	bl	8004680 <SPI_EndRxTxTransaction>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d006      	beq.n	8004264 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2220      	movs	r2, #32
 8004260:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004262:	e010      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10b      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68db      	ldr	r3, [r3, #12]
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	617b      	str	r3, [r7, #20]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	e000      	b.n	8004286 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004284:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004296:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800429a:	4618      	mov	r0, r3
 800429c:	3730      	adds	r7, #48	; 0x30
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b088      	sub	sp, #32
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	099b      	lsrs	r3, r3, #6
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10f      	bne.n	80042e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	f003 0301 	and.w	r3, r3, #1
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	4798      	blx	r3
    return;
 80042e6:	e0d8      	b.n	800449a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	085b      	lsrs	r3, r3, #1
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d00a      	beq.n	800430a <HAL_SPI_IRQHandler+0x66>
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	09db      	lsrs	r3, r3, #7
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d004      	beq.n	800430a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
    return;
 8004308:	e0c7      	b.n	800449a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d10c      	bne.n	8004330 <HAL_SPI_IRQHandler+0x8c>
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	099b      	lsrs	r3, r3, #6
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	2b00      	cmp	r3, #0
 8004320:	d106      	bne.n	8004330 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	f000 80b5 	beq.w	800449a <HAL_SPI_IRQHandler+0x1f6>
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	095b      	lsrs	r3, r3, #5
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	f000 80ae 	beq.w	800449a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800433e:	69bb      	ldr	r3, [r7, #24]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b00      	cmp	r3, #0
 8004348:	d023      	beq.n	8004392 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b03      	cmp	r3, #3
 8004354:	d011      	beq.n	800437a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f043 0204 	orr.w	r2, r3, #4
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	617b      	str	r3, [r7, #20]
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	e00b      	b.n	8004392 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800437a:	2300      	movs	r3, #0
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	613b      	str	r3, [r7, #16]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	689b      	ldr	r3, [r3, #8]
 800438c:	613b      	str	r3, [r7, #16]
 800438e:	693b      	ldr	r3, [r7, #16]
        return;
 8004390:	e083      	b.n	800449a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	095b      	lsrs	r3, r3, #5
 8004396:	f003 0301 	and.w	r3, r3, #1
 800439a:	2b00      	cmp	r3, #0
 800439c:	d014      	beq.n	80043c8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f043 0201 	orr.w	r2, r3, #1
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043aa:	2300      	movs	r3, #0
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	60fb      	str	r3, [r7, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043c4:	601a      	str	r2, [r3, #0]
 80043c6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00c      	beq.n	80043ee <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d8:	f043 0208 	orr.w	r2, r3, #8
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043e0:	2300      	movs	r3, #0
 80043e2:	60bb      	str	r3, [r7, #8]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d050      	beq.n	8004498 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	685a      	ldr	r2, [r3, #4]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004404:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d104      	bne.n	8004422 <HAL_SPI_IRQHandler+0x17e>
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d034      	beq.n	800448c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685a      	ldr	r2, [r3, #4]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 0203 	bic.w	r2, r2, #3
 8004430:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004436:	2b00      	cmp	r3, #0
 8004438:	d011      	beq.n	800445e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800443e:	4a18      	ldr	r2, [pc, #96]	; (80044a0 <HAL_SPI_IRQHandler+0x1fc>)
 8004440:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004446:	4618      	mov	r0, r3
 8004448:	f7fd fcf5 	bl	8001e36 <HAL_DMA_Abort_IT>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d005      	beq.n	800445e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004456:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004462:	2b00      	cmp	r3, #0
 8004464:	d016      	beq.n	8004494 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446a:	4a0d      	ldr	r2, [pc, #52]	; (80044a0 <HAL_SPI_IRQHandler+0x1fc>)
 800446c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd fcdf 	bl	8001e36 <HAL_DMA_Abort_IT>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800448a:	e003      	b.n	8004494 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f809 	bl	80044a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004492:	e000      	b.n	8004496 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004494:	bf00      	nop
    return;
 8004496:	bf00      	nop
 8004498:	bf00      	nop
  }
}
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	080044b9 	.word	0x080044b9

080044a4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80044ac:	bf00      	nop
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr

080044b8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f7ff ffe6 	bl	80044a4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80044d8:	bf00      	nop
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044f0:	e04c      	b.n	800458c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f8:	d048      	beq.n	800458c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80044fa:	f7fc fd61 	bl	8000fc0 <HAL_GetTick>
 80044fe:	4602      	mov	r2, r0
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	1ad3      	subs	r3, r2, r3
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	429a      	cmp	r2, r3
 8004508:	d902      	bls.n	8004510 <SPI_WaitFlagStateUntilTimeout+0x30>
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d13d      	bne.n	800458c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800451e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004528:	d111      	bne.n	800454e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004532:	d004      	beq.n	800453e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453c:	d107      	bne.n	800454e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004556:	d10f      	bne.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004576:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e00f      	b.n	80045ac <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4013      	ands	r3, r2
 8004596:	68ba      	ldr	r2, [r7, #8]
 8004598:	429a      	cmp	r2, r3
 800459a:	bf0c      	ite	eq
 800459c:	2301      	moveq	r3, #1
 800459e:	2300      	movne	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	461a      	mov	r2, r3
 80045a4:	79fb      	ldrb	r3, [r7, #7]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d1a3      	bne.n	80044f2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3710      	adds	r7, #16
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045c8:	d111      	bne.n	80045ee <SPI_EndRxTransaction+0x3a>
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045d2:	d004      	beq.n	80045de <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045dc:	d107      	bne.n	80045ee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80045f6:	d12a      	bne.n	800464e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004600:	d012      	beq.n	8004628 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	9300      	str	r3, [sp, #0]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2200      	movs	r2, #0
 800460a:	2180      	movs	r1, #128	; 0x80
 800460c:	68f8      	ldr	r0, [r7, #12]
 800460e:	f7ff ff67 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 8004612:	4603      	mov	r3, r0
 8004614:	2b00      	cmp	r3, #0
 8004616:	d02d      	beq.n	8004674 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461c:	f043 0220 	orr.w	r2, r3, #32
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e026      	b.n	8004676 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	9300      	str	r3, [sp, #0]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2200      	movs	r2, #0
 8004630:	2101      	movs	r1, #1
 8004632:	68f8      	ldr	r0, [r7, #12]
 8004634:	f7ff ff54 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d01a      	beq.n	8004674 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	f043 0220 	orr.w	r2, r3, #32
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e013      	b.n	8004676 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2200      	movs	r2, #0
 8004656:	2101      	movs	r1, #1
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff ff41 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d007      	beq.n	8004674 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004668:	f043 0220 	orr.w	r2, r3, #32
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e000      	b.n	8004676 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b088      	sub	sp, #32
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <SPI_EndRxTxTransaction+0x7c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1b      	ldr	r2, [pc, #108]	; (8004700 <SPI_EndRxTxTransaction+0x80>)
 8004692:	fba2 2303 	umull	r2, r3, r2, r3
 8004696:	0d5b      	lsrs	r3, r3, #21
 8004698:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046aa:	d112      	bne.n	80046d2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	2200      	movs	r2, #0
 80046b4:	2180      	movs	r1, #128	; 0x80
 80046b6:	68f8      	ldr	r0, [r7, #12]
 80046b8:	f7ff ff12 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 80046bc:	4603      	mov	r3, r0
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d016      	beq.n	80046f0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c6:	f043 0220 	orr.w	r2, r3, #32
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e00f      	b.n	80046f2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	3b01      	subs	r3, #1
 80046dc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d0f2      	beq.n	80046d2 <SPI_EndRxTxTransaction+0x52>
 80046ec:	e000      	b.n	80046f0 <SPI_EndRxTxTransaction+0x70>
        break;
 80046ee:	bf00      	nop
  }

  return HAL_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3718      	adds	r7, #24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	20000008 	.word	0x20000008
 8004700:	165e9f81 	.word	0x165e9f81

08004704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e01d      	b.n	8004752 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f003 fc5c 	bl	8007fe8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3304      	adds	r3, #4
 8004740:	4619      	mov	r1, r3
 8004742:	4610      	mov	r0, r2
 8004744:	f000 fd2e 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2201      	movs	r2, #1
 800474c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3708      	adds	r7, #8
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
	...

0800475c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2201      	movs	r2, #1
 800476c:	6839      	ldr	r1, [r7, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f001 f92c 	bl	80059cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a15      	ldr	r2, [pc, #84]	; (80047d0 <HAL_TIM_OC_Start+0x74>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d004      	beq.n	8004788 <HAL_TIM_OC_Start+0x2c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a14      	ldr	r2, [pc, #80]	; (80047d4 <HAL_TIM_OC_Start+0x78>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d101      	bne.n	800478c <HAL_TIM_OC_Start+0x30>
 8004788:	2301      	movs	r3, #1
 800478a:	e000      	b.n	800478e <HAL_TIM_OC_Start+0x32>
 800478c:	2300      	movs	r3, #0
 800478e:	2b00      	cmp	r3, #0
 8004790:	d007      	beq.n	80047a2 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b06      	cmp	r3, #6
 80047b2:	d007      	beq.n	80047c4 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f042 0201 	orr.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047c4:	2300      	movs	r3, #0
}
 80047c6:	4618      	mov	r0, r3
 80047c8:	3710      	adds	r7, #16
 80047ca:	46bd      	mov	sp, r7
 80047cc:	bd80      	pop	{r7, pc}
 80047ce:	bf00      	nop
 80047d0:	40010000 	.word	0x40010000
 80047d4:	40010400 	.word	0x40010400

080047d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e01d      	b.n	8004826 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f815 	bl	800482e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f000 fcc4 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004824:	2300      	movs	r3, #0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr
	...

08004844 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2201      	movs	r2, #1
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f001 f8b8 	bl	80059cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_TIM_PWM_Start+0x74>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_TIM_PWM_Start+0x2c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a14      	ldr	r2, [pc, #80]	; (80048bc <HAL_TIM_PWM_Start+0x78>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_TIM_PWM_Start+0x30>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_TIM_PWM_Start+0x32>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 0307 	and.w	r3, r3, #7
 8004894:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	2b06      	cmp	r3, #6
 800489a:	d007      	beq.n	80048ac <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	40010000 	.word	0x40010000
 80048bc:	40010400 	.word	0x40010400

080048c0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e01d      	b.n	800490e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d106      	bne.n	80048ec <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f815 	bl	8004916 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	3304      	adds	r3, #4
 80048fc:	4619      	mov	r1, r3
 80048fe:	4610      	mov	r0, r2
 8004900:	f000 fc50 	bl	80051a4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b086      	sub	sp, #24
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d101      	bne.n	800493e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e083      	b.n	8004a46 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f003 fbec 	bl	8008130 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	687a      	ldr	r2, [r7, #4]
 8004968:	6812      	ldr	r2, [r2, #0]
 800496a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800496e:	f023 0307 	bic.w	r3, r3, #7
 8004972:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	3304      	adds	r3, #4
 800497c:	4619      	mov	r1, r3
 800497e:	4610      	mov	r0, r2
 8004980:	f000 fc10 	bl	80051a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049ac:	f023 0303 	bic.w	r3, r3, #3
 80049b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	021b      	lsls	r3, r3, #8
 80049bc:	4313      	orrs	r3, r2
 80049be:	693a      	ldr	r2, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80049ca:	f023 030c 	bic.w	r3, r3, #12
 80049ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	4313      	orrs	r3, r2
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	011a      	lsls	r2, r3, #4
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	4313      	orrs	r3, r2
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a08:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a10:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3718      	adds	r7, #24
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
 8004a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_TIM_Encoder_Start_IT+0x16>
 8004a5e:	2b04      	cmp	r3, #4
 8004a60:	d010      	beq.n	8004a84 <HAL_TIM_Encoder_Start_IT+0x36>
 8004a62:	e01f      	b.n	8004aa4 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 ffad 	bl	80059cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68da      	ldr	r2, [r3, #12]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f042 0202 	orr.w	r2, r2, #2
 8004a80:	60da      	str	r2, [r3, #12]
      break;
 8004a82:	e02e      	b.n	8004ae2 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	2104      	movs	r1, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f000 ff9d 	bl	80059cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68da      	ldr	r2, [r3, #12]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f042 0204 	orr.w	r2, r2, #4
 8004aa0:	60da      	str	r2, [r3, #12]
      break;
 8004aa2:	e01e      	b.n	8004ae2 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	2100      	movs	r1, #0
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 ff8d 	bl	80059cc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	2104      	movs	r1, #4
 8004aba:	4618      	mov	r0, r3
 8004abc:	f000 ff86 	bl	80059cc <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f042 0202 	orr.w	r2, r2, #2
 8004ace:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0204 	orr.w	r2, r2, #4
 8004ade:	60da      	str	r2, [r3, #12]
      break;
 8004ae0:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004af2:	2300      	movs	r3, #0
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3708      	adds	r7, #8
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d122      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d11b      	bne.n	8004b58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f06f 0202 	mvn.w	r2, #2
 8004b28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 fb11 	bl	8005166 <HAL_TIM_IC_CaptureCallback>
 8004b44:	e005      	b.n	8004b52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 fb03 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f000 fb14 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	f003 0304 	and.w	r3, r3, #4
 8004b62:	2b04      	cmp	r3, #4
 8004b64:	d122      	bne.n	8004bac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	f003 0304 	and.w	r3, r3, #4
 8004b70:	2b04      	cmp	r3, #4
 8004b72:	d11b      	bne.n	8004bac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f06f 0204 	mvn.w	r2, #4
 8004b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2202      	movs	r2, #2
 8004b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 fae7 	bl	8005166 <HAL_TIM_IC_CaptureCallback>
 8004b98:	e005      	b.n	8004ba6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 fad9 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 faea 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	f003 0308 	and.w	r3, r3, #8
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	d122      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b08      	cmp	r3, #8
 8004bc6:	d11b      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0208 	mvn.w	r2, #8
 8004bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2204      	movs	r2, #4
 8004bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	f003 0303 	and.w	r3, r3, #3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d003      	beq.n	8004bee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fabd 	bl	8005166 <HAL_TIM_IC_CaptureCallback>
 8004bec:	e005      	b.n	8004bfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 faaf 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 fac0 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	2b10      	cmp	r3, #16
 8004c0c:	d122      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0310 	and.w	r3, r3, #16
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d11b      	bne.n	8004c54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0210 	mvn.w	r2, #16
 8004c24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2208      	movs	r2, #8
 8004c2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	69db      	ldr	r3, [r3, #28]
 8004c32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa93 	bl	8005166 <HAL_TIM_IC_CaptureCallback>
 8004c40:	e005      	b.n	8004c4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f000 fa85 	bl	8005152 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f000 fa96 	bl	800517a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	691b      	ldr	r3, [r3, #16]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	d10e      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d107      	bne.n	8004c80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f06f 0201 	mvn.w	r2, #1
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fa5f 	bl	800513e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b80      	cmp	r3, #128	; 0x80
 8004c8c:	d10e      	bne.n	8004cac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c98:	2b80      	cmp	r3, #128	; 0x80
 8004c9a:	d107      	bne.n	8004cac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 ffb8 	bl	8005c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	691b      	ldr	r3, [r3, #16]
 8004cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb6:	2b40      	cmp	r3, #64	; 0x40
 8004cb8:	d10e      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cc4:	2b40      	cmp	r3, #64	; 0x40
 8004cc6:	d107      	bne.n	8004cd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fa5b 	bl	800518e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	691b      	ldr	r3, [r3, #16]
 8004cde:	f003 0320 	and.w	r3, r3, #32
 8004ce2:	2b20      	cmp	r3, #32
 8004ce4:	d10e      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f003 0320 	and.w	r3, r3, #32
 8004cf0:	2b20      	cmp	r3, #32
 8004cf2:	d107      	bne.n	8004d04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f06f 0220 	mvn.w	r2, #32
 8004cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 ff82 	bl	8005c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b084      	sub	sp, #16
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	60f8      	str	r0, [r7, #12]
 8004d14:	60b9      	str	r1, [r7, #8]
 8004d16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004d22:	2302      	movs	r3, #2
 8004d24:	e08a      	b.n	8004e3c <HAL_TIM_IC_ConfigChannel+0x130>
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2202      	movs	r2, #2
 8004d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d11b      	bne.n	8004d74 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f000 fc7a 	bl	8005644 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 020c 	bic.w	r2, r2, #12
 8004d5e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6999      	ldr	r1, [r3, #24]
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	689a      	ldr	r2, [r3, #8]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	430a      	orrs	r2, r1
 8004d70:	619a      	str	r2, [r3, #24]
 8004d72:	e05a      	b.n	8004e2a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2b04      	cmp	r3, #4
 8004d78:	d11c      	bne.n	8004db4 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6818      	ldr	r0, [r3, #0]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	6819      	ldr	r1, [r3, #0]
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f000 fcfe 	bl	800578a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	699a      	ldr	r2, [r3, #24]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d9c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6999      	ldr	r1, [r3, #24]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	021a      	lsls	r2, r3, #8
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	619a      	str	r2, [r3, #24]
 8004db2:	e03a      	b.n	8004e2a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d11b      	bne.n	8004df2 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f000 fd4b 	bl	8005864 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 020c 	bic.w	r2, r2, #12
 8004ddc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69d9      	ldr	r1, [r3, #28]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	61da      	str	r2, [r3, #28]
 8004df0:	e01b      	b.n	8004e2a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	6818      	ldr	r0, [r3, #0]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	6819      	ldr	r1, [r3, #0]
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f000 fd6b 	bl	80058dc <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e14:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	69d9      	ldr	r1, [r3, #28]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	021a      	lsls	r2, r3, #8
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3710      	adds	r7, #16
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}

08004e44 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e0b4      	b.n	8004fc8 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2202      	movs	r2, #2
 8004e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b0c      	cmp	r3, #12
 8004e72:	f200 809f 	bhi.w	8004fb4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8004e76:	a201      	add	r2, pc, #4	; (adr r2, 8004e7c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004eb1 	.word	0x08004eb1
 8004e80:	08004fb5 	.word	0x08004fb5
 8004e84:	08004fb5 	.word	0x08004fb5
 8004e88:	08004fb5 	.word	0x08004fb5
 8004e8c:	08004ef1 	.word	0x08004ef1
 8004e90:	08004fb5 	.word	0x08004fb5
 8004e94:	08004fb5 	.word	0x08004fb5
 8004e98:	08004fb5 	.word	0x08004fb5
 8004e9c:	08004f33 	.word	0x08004f33
 8004ea0:	08004fb5 	.word	0x08004fb5
 8004ea4:	08004fb5 	.word	0x08004fb5
 8004ea8:	08004fb5 	.word	0x08004fb5
 8004eac:	08004f73 	.word	0x08004f73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fa14 	bl	80052e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	699a      	ldr	r2, [r3, #24]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f042 0208 	orr.w	r2, r2, #8
 8004eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0204 	bic.w	r2, r2, #4
 8004eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	6999      	ldr	r1, [r3, #24]
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	619a      	str	r2, [r3, #24]
      break;
 8004eee:	e062      	b.n	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68b9      	ldr	r1, [r7, #8]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fa64 	bl	80053c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	699a      	ldr	r2, [r3, #24]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6999      	ldr	r1, [r3, #24]
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	021a      	lsls	r2, r3, #8
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	619a      	str	r2, [r3, #24]
      break;
 8004f30:	e041      	b.n	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	68b9      	ldr	r1, [r7, #8]
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fab9 	bl	80054b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69da      	ldr	r2, [r3, #28]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 0208 	orr.w	r2, r2, #8
 8004f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69da      	ldr	r2, [r3, #28]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0204 	bic.w	r2, r2, #4
 8004f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	69d9      	ldr	r1, [r3, #28]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	430a      	orrs	r2, r1
 8004f6e:	61da      	str	r2, [r3, #28]
      break;
 8004f70:	e021      	b.n	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	68b9      	ldr	r1, [r7, #8]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f000 fb0d 	bl	8005598 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	69da      	ldr	r2, [r3, #28]
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	69da      	ldr	r2, [r3, #28]
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	69d9      	ldr	r1, [r3, #28]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	021a      	lsls	r2, r3, #8
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	61da      	str	r2, [r3, #28]
      break;
 8004fb2:	e000      	b.n	8004fb6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004fb4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3710      	adds	r7, #16
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d101      	bne.n	8004fe8 <HAL_TIM_ConfigClockSource+0x18>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	e0a6      	b.n	8005136 <HAL_TIM_ConfigClockSource+0x166>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005006:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800500e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d067      	beq.n	80050f0 <HAL_TIM_ConfigClockSource+0x120>
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d80b      	bhi.n	800503c <HAL_TIM_ConfigClockSource+0x6c>
 8005024:	2b10      	cmp	r3, #16
 8005026:	d073      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x140>
 8005028:	2b10      	cmp	r3, #16
 800502a:	d802      	bhi.n	8005032 <HAL_TIM_ConfigClockSource+0x62>
 800502c:	2b00      	cmp	r3, #0
 800502e:	d06f      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005030:	e078      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005032:	2b20      	cmp	r3, #32
 8005034:	d06c      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x140>
 8005036:	2b30      	cmp	r3, #48	; 0x30
 8005038:	d06a      	beq.n	8005110 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800503a:	e073      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800503c:	2b70      	cmp	r3, #112	; 0x70
 800503e:	d00d      	beq.n	800505c <HAL_TIM_ConfigClockSource+0x8c>
 8005040:	2b70      	cmp	r3, #112	; 0x70
 8005042:	d804      	bhi.n	800504e <HAL_TIM_ConfigClockSource+0x7e>
 8005044:	2b50      	cmp	r3, #80	; 0x50
 8005046:	d033      	beq.n	80050b0 <HAL_TIM_ConfigClockSource+0xe0>
 8005048:	2b60      	cmp	r3, #96	; 0x60
 800504a:	d041      	beq.n	80050d0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800504c:	e06a      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d066      	beq.n	8005122 <HAL_TIM_ConfigClockSource+0x152>
 8005054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005058:	d017      	beq.n	800508a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800505a:	e063      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	6899      	ldr	r1, [r3, #8]
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	685a      	ldr	r2, [r3, #4]
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	68db      	ldr	r3, [r3, #12]
 800506c:	f000 fc8e 	bl	800598c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800507e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	609a      	str	r2, [r3, #8]
      break;
 8005088:	e04c      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	6899      	ldr	r1, [r3, #8]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f000 fc77 	bl	800598c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	689a      	ldr	r2, [r3, #8]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050ac:	609a      	str	r2, [r3, #8]
      break;
 80050ae:	e039      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6818      	ldr	r0, [r3, #0]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6859      	ldr	r1, [r3, #4]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	68db      	ldr	r3, [r3, #12]
 80050bc:	461a      	mov	r2, r3
 80050be:	f000 fb35 	bl	800572c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	2150      	movs	r1, #80	; 0x50
 80050c8:	4618      	mov	r0, r3
 80050ca:	f000 fc44 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 80050ce:	e029      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6818      	ldr	r0, [r3, #0]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	6859      	ldr	r1, [r3, #4]
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	461a      	mov	r2, r3
 80050de:	f000 fb91 	bl	8005804 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2160      	movs	r1, #96	; 0x60
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 fc34 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 80050ee:	e019      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6818      	ldr	r0, [r3, #0]
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	6859      	ldr	r1, [r3, #4]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	461a      	mov	r2, r3
 80050fe:	f000 fb15 	bl	800572c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	2140      	movs	r1, #64	; 0x40
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fc24 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 800510e:	e009      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 fc1b 	bl	8005956 <TIM_ITRx_SetConfig>
      break;
 8005120:	e000      	b.n	8005124 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3710      	adds	r7, #16
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}

0800513e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005146:	bf00      	nop
 8005148:	370c      	adds	r7, #12
 800514a:	46bd      	mov	sp, r7
 800514c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005150:	4770      	bx	lr

08005152 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005152:	b480      	push	{r7}
 8005154:	b083      	sub	sp, #12
 8005156:	af00      	add	r7, sp, #0
 8005158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800515a:	bf00      	nop
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005166:	b480      	push	{r7}
 8005168:	b083      	sub	sp, #12
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800516e:	bf00      	nop
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005182:	bf00      	nop
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800518e:	b480      	push	{r7}
 8005190:	b083      	sub	sp, #12
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005196:	bf00      	nop
 8005198:	370c      	adds	r7, #12
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
	...

080051a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a40      	ldr	r2, [pc, #256]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d013      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c2:	d00f      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a3d      	ldr	r2, [pc, #244]	; (80052bc <TIM_Base_SetConfig+0x118>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a3c      	ldr	r2, [pc, #240]	; (80052c0 <TIM_Base_SetConfig+0x11c>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a3b      	ldr	r2, [pc, #236]	; (80052c4 <TIM_Base_SetConfig+0x120>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_Base_SetConfig+0x40>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a3a      	ldr	r2, [pc, #232]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d108      	bne.n	80051f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4a2f      	ldr	r2, [pc, #188]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d02b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005204:	d027      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4a2c      	ldr	r2, [pc, #176]	; (80052bc <TIM_Base_SetConfig+0x118>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d023      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a2b      	ldr	r2, [pc, #172]	; (80052c0 <TIM_Base_SetConfig+0x11c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d01f      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a2a      	ldr	r2, [pc, #168]	; (80052c4 <TIM_Base_SetConfig+0x120>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d01b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a29      	ldr	r2, [pc, #164]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d017      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a28      	ldr	r2, [pc, #160]	; (80052cc <TIM_Base_SetConfig+0x128>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d013      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a27      	ldr	r2, [pc, #156]	; (80052d0 <TIM_Base_SetConfig+0x12c>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d00f      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a26      	ldr	r2, [pc, #152]	; (80052d4 <TIM_Base_SetConfig+0x130>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00b      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a25      	ldr	r2, [pc, #148]	; (80052d8 <TIM_Base_SetConfig+0x134>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d007      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a24      	ldr	r2, [pc, #144]	; (80052dc <TIM_Base_SetConfig+0x138>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d003      	beq.n	8005256 <TIM_Base_SetConfig+0xb2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a23      	ldr	r2, [pc, #140]	; (80052e0 <TIM_Base_SetConfig+0x13c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d108      	bne.n	8005268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800525c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	68fa      	ldr	r2, [r7, #12]
 8005264:	4313      	orrs	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a0a      	ldr	r2, [pc, #40]	; (80052b8 <TIM_Base_SetConfig+0x114>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d003      	beq.n	800529c <TIM_Base_SetConfig+0xf8>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a0c      	ldr	r2, [pc, #48]	; (80052c8 <TIM_Base_SetConfig+0x124>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d103      	bne.n	80052a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	691a      	ldr	r2, [r3, #16]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2201      	movs	r2, #1
 80052a8:	615a      	str	r2, [r3, #20]
}
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	40010000 	.word	0x40010000
 80052bc:	40000400 	.word	0x40000400
 80052c0:	40000800 	.word	0x40000800
 80052c4:	40000c00 	.word	0x40000c00
 80052c8:	40010400 	.word	0x40010400
 80052cc:	40014000 	.word	0x40014000
 80052d0:	40014400 	.word	0x40014400
 80052d4:	40014800 	.word	0x40014800
 80052d8:	40001800 	.word	0x40001800
 80052dc:	40001c00 	.word	0x40001c00
 80052e0:	40002000 	.word	0x40002000

080052e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e4:	b480      	push	{r7}
 80052e6:	b087      	sub	sp, #28
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	f023 0201 	bic.w	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0303 	bic.w	r3, r3, #3
 800531a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 0302 	bic.w	r3, r3, #2
 800532c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	689b      	ldr	r3, [r3, #8]
 8005332:	697a      	ldr	r2, [r7, #20]
 8005334:	4313      	orrs	r3, r2
 8005336:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a20      	ldr	r2, [pc, #128]	; (80053bc <TIM_OC1_SetConfig+0xd8>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_OC1_SetConfig+0x64>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <TIM_OC1_SetConfig+0xdc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d10c      	bne.n	8005362 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f023 0308 	bic.w	r3, r3, #8
 800534e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	f023 0304 	bic.w	r3, r3, #4
 8005360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a15      	ldr	r2, [pc, #84]	; (80053bc <TIM_OC1_SetConfig+0xd8>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <TIM_OC1_SetConfig+0x8e>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <TIM_OC1_SetConfig+0xdc>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d111      	bne.n	8005396 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	621a      	str	r2, [r3, #32]
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40010400 	.word	0x40010400

080053c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
 80053cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	f023 0210 	bic.w	r2, r3, #16
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	021b      	lsls	r3, r3, #8
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4313      	orrs	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	f023 0320 	bic.w	r3, r3, #32
 800540e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	011b      	lsls	r3, r3, #4
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <TIM_OC2_SetConfig+0xe4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d003      	beq.n	800542c <TIM_OC2_SetConfig+0x68>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a21      	ldr	r2, [pc, #132]	; (80054ac <TIM_OC2_SetConfig+0xe8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d10d      	bne.n	8005448 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005432:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	4313      	orrs	r3, r2
 800543e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005446:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <TIM_OC2_SetConfig+0xe4>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d003      	beq.n	8005458 <TIM_OC2_SetConfig+0x94>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a16      	ldr	r2, [pc, #88]	; (80054ac <TIM_OC2_SetConfig+0xe8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d113      	bne.n	8005480 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005458:	693b      	ldr	r3, [r7, #16]
 800545a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800545e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005466:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	695b      	ldr	r3, [r3, #20]
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	4313      	orrs	r3, r2
 8005472:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	68fa      	ldr	r2, [r7, #12]
 800548a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685a      	ldr	r2, [r3, #4]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	621a      	str	r2, [r3, #32]
}
 800549a:	bf00      	nop
 800549c:	371c      	adds	r7, #28
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40010000 	.word	0x40010000
 80054ac:	40010400 	.word	0x40010400

080054b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68fa      	ldr	r2, [r7, #12]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	021b      	lsls	r3, r3, #8
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a21      	ldr	r2, [pc, #132]	; (8005590 <TIM_OC3_SetConfig+0xe0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d003      	beq.n	8005516 <TIM_OC3_SetConfig+0x66>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a20      	ldr	r2, [pc, #128]	; (8005594 <TIM_OC3_SetConfig+0xe4>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d10d      	bne.n	8005532 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800551c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	021b      	lsls	r3, r3, #8
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a16      	ldr	r2, [pc, #88]	; (8005590 <TIM_OC3_SetConfig+0xe0>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d003      	beq.n	8005542 <TIM_OC3_SetConfig+0x92>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a15      	ldr	r2, [pc, #84]	; (8005594 <TIM_OC3_SetConfig+0xe4>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d113      	bne.n	800556a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	695b      	ldr	r3, [r3, #20]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	699b      	ldr	r3, [r3, #24]
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	693a      	ldr	r2, [r7, #16]
 800556e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	68fa      	ldr	r2, [r7, #12]
 8005574:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	621a      	str	r2, [r3, #32]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	40010000 	.word	0x40010000
 8005594:	40010400 	.word	0x40010400

08005598 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005598:	b480      	push	{r7}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a1b      	ldr	r3, [r3, #32]
 80055b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	021b      	lsls	r3, r3, #8
 80055d6:	68fa      	ldr	r2, [r7, #12]
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	031b      	lsls	r3, r3, #12
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	4313      	orrs	r3, r2
 80055ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a12      	ldr	r2, [pc, #72]	; (800563c <TIM_OC4_SetConfig+0xa4>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_OC4_SetConfig+0x68>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a11      	ldr	r2, [pc, #68]	; (8005640 <TIM_OC4_SetConfig+0xa8>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d109      	bne.n	8005614 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005606:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	695b      	ldr	r3, [r3, #20]
 800560c:	019b      	lsls	r3, r3, #6
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	4313      	orrs	r3, r2
 8005612:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	40010000 	.word	0x40010000
 8005640:	40010400 	.word	0x40010400

08005644 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6a1b      	ldr	r3, [r3, #32]
 8005668:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4a28      	ldr	r2, [pc, #160]	; (8005710 <TIM_TI1_SetConfig+0xcc>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_TI1_SetConfig+0x66>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005678:	d017      	beq.n	80056aa <TIM_TI1_SetConfig+0x66>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	4a25      	ldr	r2, [pc, #148]	; (8005714 <TIM_TI1_SetConfig+0xd0>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_TI1_SetConfig+0x66>
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4a24      	ldr	r2, [pc, #144]	; (8005718 <TIM_TI1_SetConfig+0xd4>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_TI1_SetConfig+0x66>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	4a23      	ldr	r2, [pc, #140]	; (800571c <TIM_TI1_SetConfig+0xd8>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_TI1_SetConfig+0x66>
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	4a22      	ldr	r2, [pc, #136]	; (8005720 <TIM_TI1_SetConfig+0xdc>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_TI1_SetConfig+0x66>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	4a21      	ldr	r2, [pc, #132]	; (8005724 <TIM_TI1_SetConfig+0xe0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_TI1_SetConfig+0x66>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	4a20      	ldr	r2, [pc, #128]	; (8005728 <TIM_TI1_SetConfig+0xe4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d101      	bne.n	80056ae <TIM_TI1_SetConfig+0x6a>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <TIM_TI1_SetConfig+0x6c>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	617b      	str	r3, [r7, #20]
 80056c4:	e003      	b.n	80056ce <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	f023 030a 	bic.w	r3, r3, #10
 80056e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f003 030a 	and.w	r3, r3, #10
 80056f0:	693a      	ldr	r2, [r7, #16]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	693a      	ldr	r2, [r7, #16]
 8005700:	621a      	str	r2, [r3, #32]
}
 8005702:	bf00      	nop
 8005704:	371c      	adds	r7, #28
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	40010000 	.word	0x40010000
 8005714:	40000400 	.word	0x40000400
 8005718:	40000800 	.word	0x40000800
 800571c:	40000c00 	.word	0x40000c00
 8005720:	40010400 	.word	0x40010400
 8005724:	40014000 	.word	0x40014000
 8005728:	40001800 	.word	0x40001800

0800572c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800572c:	b480      	push	{r7}
 800572e:	b087      	sub	sp, #28
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	6a1b      	ldr	r3, [r3, #32]
 800573c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	6a1b      	ldr	r3, [r3, #32]
 8005742:	f023 0201 	bic.w	r2, r3, #1
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005756:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4313      	orrs	r3, r2
 8005760:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f023 030a 	bic.w	r3, r3, #10
 8005768:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800578a:	b480      	push	{r7}
 800578c:	b087      	sub	sp, #28
 800578e:	af00      	add	r7, sp, #0
 8005790:	60f8      	str	r0, [r7, #12]
 8005792:	60b9      	str	r1, [r7, #8]
 8005794:	607a      	str	r2, [r7, #4]
 8005796:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6a1b      	ldr	r3, [r3, #32]
 800579c:	f023 0210 	bic.w	r2, r3, #16
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6a1b      	ldr	r3, [r3, #32]
 80057ae:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	021b      	lsls	r3, r3, #8
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	031b      	lsls	r3, r3, #12
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	011b      	lsls	r3, r3, #4
 80057e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80057e6:	693a      	ldr	r2, [r7, #16]
 80057e8:	4313      	orrs	r3, r2
 80057ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	621a      	str	r2, [r3, #32]
}
 80057f8:	bf00      	nop
 80057fa:	371c      	adds	r7, #28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b087      	sub	sp, #28
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a1b      	ldr	r3, [r3, #32]
 8005814:	f023 0210 	bic.w	r2, r3, #16
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	699b      	ldr	r3, [r3, #24]
 8005820:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800582e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	031b      	lsls	r3, r3, #12
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	4313      	orrs	r3, r2
 8005838:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005840:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	011b      	lsls	r3, r3, #4
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4313      	orrs	r3, r2
 800584a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	621a      	str	r2, [r3, #32]
}
 8005858:	bf00      	nop
 800585a:	371c      	adds	r7, #28
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005864:	b480      	push	{r7}
 8005866:	b087      	sub	sp, #28
 8005868:	af00      	add	r7, sp, #0
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	6a1b      	ldr	r3, [r3, #32]
 8005876:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	69db      	ldr	r3, [r3, #28]
 8005882:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	6a1b      	ldr	r3, [r3, #32]
 8005888:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	f023 0303 	bic.w	r3, r3, #3
 8005890:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4313      	orrs	r3, r2
 8005898:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	011b      	lsls	r3, r3, #4
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80058b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	697a      	ldr	r2, [r7, #20]
 80058c8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	693a      	ldr	r2, [r7, #16]
 80058ce:	621a      	str	r2, [r3, #32]
}
 80058d0:	bf00      	nop
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6a1b      	ldr	r3, [r3, #32]
 80058ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6a1b      	ldr	r3, [r3, #32]
 8005900:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005908:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	021b      	lsls	r3, r3, #8
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800591a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	031b      	lsls	r3, r3, #12
 8005920:	b29b      	uxth	r3, r3
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	4313      	orrs	r3, r2
 8005926:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800592e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	031b      	lsls	r3, r3, #12
 8005934:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	4313      	orrs	r3, r2
 800593c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	697a      	ldr	r2, [r7, #20]
 8005942:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	621a      	str	r2, [r3, #32]
}
 800594a:	bf00      	nop
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005956:	b480      	push	{r7}
 8005958:	b085      	sub	sp, #20
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	f043 0307 	orr.w	r3, r3, #7
 8005978:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	609a      	str	r2, [r3, #8]
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	021a      	lsls	r2, r3, #8
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	431a      	orrs	r2, r3
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4313      	orrs	r3, r2
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
 80059b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	609a      	str	r2, [r3, #8]
}
 80059c0:	bf00      	nop
 80059c2:	371c      	adds	r7, #28
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr

080059cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	60f8      	str	r0, [r7, #12]
 80059d4:	60b9      	str	r1, [r7, #8]
 80059d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	f003 031f 	and.w	r3, r3, #31
 80059de:	2201      	movs	r2, #1
 80059e0:	fa02 f303 	lsl.w	r3, r2, r3
 80059e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6a1a      	ldr	r2, [r3, #32]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	43db      	mvns	r3, r3
 80059ee:	401a      	ands	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	f003 031f 	and.w	r3, r3, #31
 80059fe:	6879      	ldr	r1, [r7, #4]
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	431a      	orrs	r2, r3
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	621a      	str	r2, [r3, #32]
}
 8005a0a:	bf00      	nop
 8005a0c:	371c      	adds	r7, #28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
 8005a1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	2204      	movs	r2, #4
 8005a26:	6839      	ldr	r1, [r7, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f000 f901 	bl	8005c30 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a3c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2b06      	cmp	r3, #6
 8005a4e:	d007      	beq.n	8005a60 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f042 0201 	orr.w	r2, r2, #1
 8005a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
	...

08005a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e05a      	b.n	8005b3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a21      	ldr	r2, [pc, #132]	; (8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d022      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ad0:	d01d      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a1d      	ldr	r2, [pc, #116]	; (8005b4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d018      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d013      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1a      	ldr	r2, [pc, #104]	; (8005b54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00e      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a18      	ldr	r2, [pc, #96]	; (8005b58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d009      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a17      	ldr	r2, [pc, #92]	; (8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d004      	beq.n	8005b0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a15      	ldr	r2, [pc, #84]	; (8005b60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d10c      	bne.n	8005b28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	68ba      	ldr	r2, [r7, #8]
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3714      	adds	r7, #20
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	40010000 	.word	0x40010000
 8005b4c:	40000400 	.word	0x40000400
 8005b50:	40000800 	.word	0x40000800
 8005b54:	40000c00 	.word	0x40000c00
 8005b58:	40010400 	.word	0x40010400
 8005b5c:	40014000 	.word	0x40014000
 8005b60:	40001800 	.word	0x40001800

08005b64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
 8005b6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d101      	bne.n	8005b80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	e03d      	b.n	8005bfc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	4313      	orrs	r3, r2
 8005bb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	695b      	ldr	r3, [r3, #20]
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005bfa:	2300      	movs	r3, #0
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b083      	sub	sp, #12
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr

08005c30 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b087      	sub	sp, #28
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	60b9      	str	r1, [r7, #8]
 8005c3a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	f003 031f 	and.w	r3, r3, #31
 8005c42:	2204      	movs	r2, #4
 8005c44:	fa02 f303 	lsl.w	r3, r2, r3
 8005c48:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6a1a      	ldr	r2, [r3, #32]
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	43db      	mvns	r3, r3
 8005c52:	401a      	ands	r2, r3
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a1a      	ldr	r2, [r3, #32]
 8005c5c:	68bb      	ldr	r3, [r7, #8]
 8005c5e:	f003 031f 	and.w	r3, r3, #31
 8005c62:	6879      	ldr	r1, [r7, #4]
 8005c64:	fa01 f303 	lsl.w	r3, r1, r3
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	621a      	str	r2, [r3, #32]
}
 8005c6e:	bf00      	nop
 8005c70:	371c      	adds	r7, #28
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e03f      	b.n	8005d0c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d106      	bne.n	8005ca6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f002 fb0d 	bl	80082c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2224      	movs	r2, #36	; 0x24
 8005caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	68da      	ldr	r2, [r3, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cbc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fb02 	bl	80062c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691a      	ldr	r2, [r3, #16]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005cd2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	695a      	ldr	r2, [r3, #20]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ce2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2220      	movs	r2, #32
 8005cfe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2220      	movs	r2, #32
 8005d06:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}

08005d14 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	60f8      	str	r0, [r7, #12]
 8005d1c:	60b9      	str	r1, [r7, #8]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d130      	bne.n	8005d90 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <HAL_UART_Transmit_IT+0x26>
 8005d34:	88fb      	ldrh	r3, [r7, #6]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e029      	b.n	8005d92 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_UART_Transmit_IT+0x38>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e022      	b.n	8005d92 <HAL_UART_Transmit_IT+0x7e>
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	88fa      	ldrh	r2, [r7, #6]
 8005d64:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2221      	movs	r2, #33	; 0x21
 8005d70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d8a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3714      	adds	r7, #20
 8005d96:	46bd      	mov	sp, r7
 8005d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9c:	4770      	bx	lr

08005d9e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	4613      	mov	r3, r2
 8005daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d140      	bne.n	8005e3a <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_UART_Receive_IT+0x26>
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e039      	b.n	8005e3c <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Receive_IT+0x38>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e032      	b.n	8005e3c <HAL_UART_Receive_IT+0x9e>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2222      	movs	r2, #34	; 0x22
 8005dfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e14:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f042 0201 	orr.w	r2, r2, #1
 8005e24:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68da      	ldr	r2, [r3, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f042 0220 	orr.w	r2, r2, #32
 8005e34:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e36:	2300      	movs	r3, #0
 8005e38:	e000      	b.n	8005e3c <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005e3a:	2302      	movs	r3, #2
  }
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3714      	adds	r7, #20
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10d      	bne.n	8005e9a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e7e:	69fb      	ldr	r3, [r7, #28]
 8005e80:	f003 0320 	and.w	r3, r3, #32
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d008      	beq.n	8005e9a <HAL_UART_IRQHandler+0x52>
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	f003 0320 	and.w	r3, r3, #32
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d003      	beq.n	8005e9a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f000 f996 	bl	80061c4 <UART_Receive_IT>
      return;
 8005e98:	e0d1      	b.n	800603e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80b0 	beq.w	8006002 <HAL_UART_IRQHandler+0x1ba>
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d105      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x70>
 8005eac:	69bb      	ldr	r3, [r7, #24]
 8005eae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f000 80a5 	beq.w	8006002 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005eb8:	69fb      	ldr	r3, [r7, #28]
 8005eba:	f003 0301 	and.w	r3, r3, #1
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x90>
 8005ec2:	69bb      	ldr	r3, [r7, #24]
 8005ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed0:	f043 0201 	orr.w	r2, r3, #1
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 0304 	and.w	r3, r3, #4
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xb0>
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ef0:	f043 0202 	orr.w	r2, r3, #2
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_UART_IRQHandler+0xd0>
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d005      	beq.n	8005f18 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f10:	f043 0204 	orr.w	r2, r3, #4
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	f003 0308 	and.w	r3, r3, #8
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00f      	beq.n	8005f42 <HAL_UART_IRQHandler+0xfa>
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f003 0320 	and.w	r3, r3, #32
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d104      	bne.n	8005f36 <HAL_UART_IRQHandler+0xee>
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d005      	beq.n	8005f42 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f3a:	f043 0208 	orr.w	r2, r3, #8
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d078      	beq.n	800603c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	f003 0320 	and.w	r3, r3, #32
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d007      	beq.n	8005f64 <HAL_UART_IRQHandler+0x11c>
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	f003 0320 	and.w	r3, r3, #32
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f930 	bl	80061c4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6e:	2b40      	cmp	r3, #64	; 0x40
 8005f70:	bf0c      	ite	eq
 8005f72:	2301      	moveq	r3, #1
 8005f74:	2300      	movne	r3, #0
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d102      	bne.n	8005f8c <HAL_UART_IRQHandler+0x144>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d031      	beq.n	8005ff0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 f879 	bl	8006084 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b40      	cmp	r3, #64	; 0x40
 8005f9e:	d123      	bne.n	8005fe8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	695a      	ldr	r2, [r3, #20]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fae:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d013      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fbc:	4a21      	ldr	r2, [pc, #132]	; (8006044 <HAL_UART_IRQHandler+0x1fc>)
 8005fbe:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fb ff36 	bl	8001e36 <HAL_DMA_Abort_IT>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d016      	beq.n	8005ffe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fde:	e00e      	b.n	8005ffe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 f845 	bl	8006070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe6:	e00a      	b.n	8005ffe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f841 	bl	8006070 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fee:	e006      	b.n	8005ffe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f83d 	bl	8006070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005ffc:	e01e      	b.n	800603c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffe:	bf00      	nop
    return;
 8006000:	e01c      	b.n	800603c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006008:	2b00      	cmp	r3, #0
 800600a:	d008      	beq.n	800601e <HAL_UART_IRQHandler+0x1d6>
 800600c:	69bb      	ldr	r3, [r7, #24]
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f866 	bl	80060e8 <UART_Transmit_IT>
    return;
 800601c:	e00f      	b.n	800603e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00a      	beq.n	800603e <HAL_UART_IRQHandler+0x1f6>
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800602e:	2b00      	cmp	r3, #0
 8006030:	d005      	beq.n	800603e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f8ae 	bl	8006194 <UART_EndTransmit_IT>
    return;
 8006038:	bf00      	nop
 800603a:	e000      	b.n	800603e <HAL_UART_IRQHandler+0x1f6>
    return;
 800603c:	bf00      	nop
  }
}
 800603e:	3720      	adds	r7, #32
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	080060c1 	.word	0x080060c1

08006048 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006064:	bf00      	nop
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006078:	bf00      	nop
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006082:	4770      	bx	lr

08006084 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006084:	b480      	push	{r7}
 8006086:	b083      	sub	sp, #12
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68da      	ldr	r2, [r3, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800609a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695a      	ldr	r2, [r3, #20]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f022 0201 	bic.w	r2, r2, #1
 80060aa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2220      	movs	r2, #32
 80060b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060cc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	2200      	movs	r2, #0
 80060d2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f7ff ffc8 	bl	8006070 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e0:	bf00      	nop
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	2b21      	cmp	r3, #33	; 0x21
 80060fa:	d144      	bne.n	8006186 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006104:	d11a      	bne.n	800613c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6a1b      	ldr	r3, [r3, #32]
 800610a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	881b      	ldrh	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800611a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	1c9a      	adds	r2, r3, #2
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	621a      	str	r2, [r3, #32]
 800612e:	e00e      	b.n	800614e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	1c5a      	adds	r2, r3, #1
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	621a      	str	r2, [r3, #32]
 800613a:	e008      	b.n	800614e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a1b      	ldr	r3, [r3, #32]
 8006140:	1c59      	adds	r1, r3, #1
 8006142:	687a      	ldr	r2, [r7, #4]
 8006144:	6211      	str	r1, [r2, #32]
 8006146:	781a      	ldrb	r2, [r3, #0]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006152:	b29b      	uxth	r3, r3
 8006154:	3b01      	subs	r3, #1
 8006156:	b29b      	uxth	r3, r3
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4619      	mov	r1, r3
 800615c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800615e:	2b00      	cmp	r3, #0
 8006160:	d10f      	bne.n	8006182 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	68da      	ldr	r2, [r3, #12]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006170:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68da      	ldr	r2, [r3, #12]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006180:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006182:	2300      	movs	r3, #0
 8006184:	e000      	b.n	8006188 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006186:	2302      	movs	r3, #2
  }
}
 8006188:	4618      	mov	r0, r3
 800618a:	3714      	adds	r7, #20
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68da      	ldr	r2, [r3, #12]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061aa:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2220      	movs	r2, #32
 80061b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f7ff ff47 	bl	8006048 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	3708      	adds	r7, #8
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}

080061c4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b084      	sub	sp, #16
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b22      	cmp	r3, #34	; 0x22
 80061d6:	d171      	bne.n	80062bc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e0:	d123      	bne.n	800622a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10e      	bne.n	800620e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fc:	b29a      	uxth	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	1c9a      	adds	r2, r3, #2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	629a      	str	r2, [r3, #40]	; 0x28
 800620c:	e029      	b.n	8006262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	b29b      	uxth	r3, r3
 8006216:	b2db      	uxtb	r3, r3
 8006218:	b29a      	uxth	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	629a      	str	r2, [r3, #40]	; 0x28
 8006228:	e01b      	b.n	8006262 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d10a      	bne.n	8006248 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	6858      	ldr	r0, [r3, #4]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623c:	1c59      	adds	r1, r3, #1
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	6291      	str	r1, [r2, #40]	; 0x28
 8006242:	b2c2      	uxtb	r2, r0
 8006244:	701a      	strb	r2, [r3, #0]
 8006246:	e00c      	b.n	8006262 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	1c58      	adds	r0, r3, #1
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	6288      	str	r0, [r1, #40]	; 0x28
 800625a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006266:	b29b      	uxth	r3, r3
 8006268:	3b01      	subs	r3, #1
 800626a:	b29b      	uxth	r3, r3
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4619      	mov	r1, r3
 8006270:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006272:	2b00      	cmp	r3, #0
 8006274:	d120      	bne.n	80062b8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	68da      	ldr	r2, [r3, #12]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f022 0220 	bic.w	r2, r2, #32
 8006284:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006294:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	695a      	ldr	r2, [r3, #20]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f022 0201 	bic.w	r2, r2, #1
 80062a4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2220      	movs	r2, #32
 80062aa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f7ff fed4 	bl	800605c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80062b4:	2300      	movs	r3, #0
 80062b6:	e002      	b.n	80062be <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
	...

080062c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800630a:	f023 030c 	bic.w	r3, r3, #12
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	430b      	orrs	r3, r1
 8006316:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006336:	f040 818b 	bne.w	8006650 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4ac1      	ldr	r2, [pc, #772]	; (8006644 <UART_SetConfig+0x37c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d005      	beq.n	8006350 <UART_SetConfig+0x88>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4abf      	ldr	r2, [pc, #764]	; (8006648 <UART_SetConfig+0x380>)
 800634a:	4293      	cmp	r3, r2
 800634c:	f040 80bd 	bne.w	80064ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006350:	f7fd fb50 	bl	80039f4 <HAL_RCC_GetPCLK2Freq>
 8006354:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	461d      	mov	r5, r3
 800635a:	f04f 0600 	mov.w	r6, #0
 800635e:	46a8      	mov	r8, r5
 8006360:	46b1      	mov	r9, r6
 8006362:	eb18 0308 	adds.w	r3, r8, r8
 8006366:	eb49 0409 	adc.w	r4, r9, r9
 800636a:	4698      	mov	r8, r3
 800636c:	46a1      	mov	r9, r4
 800636e:	eb18 0805 	adds.w	r8, r8, r5
 8006372:	eb49 0906 	adc.w	r9, r9, r6
 8006376:	f04f 0100 	mov.w	r1, #0
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006382:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006386:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800638a:	4688      	mov	r8, r1
 800638c:	4691      	mov	r9, r2
 800638e:	eb18 0005 	adds.w	r0, r8, r5
 8006392:	eb49 0106 	adc.w	r1, r9, r6
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	461d      	mov	r5, r3
 800639c:	f04f 0600 	mov.w	r6, #0
 80063a0:	196b      	adds	r3, r5, r5
 80063a2:	eb46 0406 	adc.w	r4, r6, r6
 80063a6:	461a      	mov	r2, r3
 80063a8:	4623      	mov	r3, r4
 80063aa:	f7fa fba7 	bl	8000afc <__aeabi_uldivmod>
 80063ae:	4603      	mov	r3, r0
 80063b0:	460c      	mov	r4, r1
 80063b2:	461a      	mov	r2, r3
 80063b4:	4ba5      	ldr	r3, [pc, #660]	; (800664c <UART_SetConfig+0x384>)
 80063b6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	461d      	mov	r5, r3
 80063c4:	f04f 0600 	mov.w	r6, #0
 80063c8:	46a9      	mov	r9, r5
 80063ca:	46b2      	mov	sl, r6
 80063cc:	eb19 0309 	adds.w	r3, r9, r9
 80063d0:	eb4a 040a 	adc.w	r4, sl, sl
 80063d4:	4699      	mov	r9, r3
 80063d6:	46a2      	mov	sl, r4
 80063d8:	eb19 0905 	adds.w	r9, r9, r5
 80063dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80063e0:	f04f 0100 	mov.w	r1, #0
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063f4:	4689      	mov	r9, r1
 80063f6:	4692      	mov	sl, r2
 80063f8:	eb19 0005 	adds.w	r0, r9, r5
 80063fc:	eb4a 0106 	adc.w	r1, sl, r6
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	461d      	mov	r5, r3
 8006406:	f04f 0600 	mov.w	r6, #0
 800640a:	196b      	adds	r3, r5, r5
 800640c:	eb46 0406 	adc.w	r4, r6, r6
 8006410:	461a      	mov	r2, r3
 8006412:	4623      	mov	r3, r4
 8006414:	f7fa fb72 	bl	8000afc <__aeabi_uldivmod>
 8006418:	4603      	mov	r3, r0
 800641a:	460c      	mov	r4, r1
 800641c:	461a      	mov	r2, r3
 800641e:	4b8b      	ldr	r3, [pc, #556]	; (800664c <UART_SetConfig+0x384>)
 8006420:	fba3 1302 	umull	r1, r3, r3, r2
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	2164      	movs	r1, #100	; 0x64
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	3332      	adds	r3, #50	; 0x32
 8006432:	4a86      	ldr	r2, [pc, #536]	; (800664c <UART_SetConfig+0x384>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006440:	4498      	add	r8, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	461d      	mov	r5, r3
 8006446:	f04f 0600 	mov.w	r6, #0
 800644a:	46a9      	mov	r9, r5
 800644c:	46b2      	mov	sl, r6
 800644e:	eb19 0309 	adds.w	r3, r9, r9
 8006452:	eb4a 040a 	adc.w	r4, sl, sl
 8006456:	4699      	mov	r9, r3
 8006458:	46a2      	mov	sl, r4
 800645a:	eb19 0905 	adds.w	r9, r9, r5
 800645e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006462:	f04f 0100 	mov.w	r1, #0
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800646e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006476:	4689      	mov	r9, r1
 8006478:	4692      	mov	sl, r2
 800647a:	eb19 0005 	adds.w	r0, r9, r5
 800647e:	eb4a 0106 	adc.w	r1, sl, r6
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	461d      	mov	r5, r3
 8006488:	f04f 0600 	mov.w	r6, #0
 800648c:	196b      	adds	r3, r5, r5
 800648e:	eb46 0406 	adc.w	r4, r6, r6
 8006492:	461a      	mov	r2, r3
 8006494:	4623      	mov	r3, r4
 8006496:	f7fa fb31 	bl	8000afc <__aeabi_uldivmod>
 800649a:	4603      	mov	r3, r0
 800649c:	460c      	mov	r4, r1
 800649e:	461a      	mov	r2, r3
 80064a0:	4b6a      	ldr	r3, [pc, #424]	; (800664c <UART_SetConfig+0x384>)
 80064a2:	fba3 1302 	umull	r1, r3, r3, r2
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	2164      	movs	r1, #100	; 0x64
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	3332      	adds	r3, #50	; 0x32
 80064b4:	4a65      	ldr	r2, [pc, #404]	; (800664c <UART_SetConfig+0x384>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	f003 0207 	and.w	r2, r3, #7
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4442      	add	r2, r8
 80064c6:	609a      	str	r2, [r3, #8]
 80064c8:	e26f      	b.n	80069aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ca:	f7fd fa7f 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 80064ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	461d      	mov	r5, r3
 80064d4:	f04f 0600 	mov.w	r6, #0
 80064d8:	46a8      	mov	r8, r5
 80064da:	46b1      	mov	r9, r6
 80064dc:	eb18 0308 	adds.w	r3, r8, r8
 80064e0:	eb49 0409 	adc.w	r4, r9, r9
 80064e4:	4698      	mov	r8, r3
 80064e6:	46a1      	mov	r9, r4
 80064e8:	eb18 0805 	adds.w	r8, r8, r5
 80064ec:	eb49 0906 	adc.w	r9, r9, r6
 80064f0:	f04f 0100 	mov.w	r1, #0
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006500:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006504:	4688      	mov	r8, r1
 8006506:	4691      	mov	r9, r2
 8006508:	eb18 0005 	adds.w	r0, r8, r5
 800650c:	eb49 0106 	adc.w	r1, r9, r6
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	461d      	mov	r5, r3
 8006516:	f04f 0600 	mov.w	r6, #0
 800651a:	196b      	adds	r3, r5, r5
 800651c:	eb46 0406 	adc.w	r4, r6, r6
 8006520:	461a      	mov	r2, r3
 8006522:	4623      	mov	r3, r4
 8006524:	f7fa faea 	bl	8000afc <__aeabi_uldivmod>
 8006528:	4603      	mov	r3, r0
 800652a:	460c      	mov	r4, r1
 800652c:	461a      	mov	r2, r3
 800652e:	4b47      	ldr	r3, [pc, #284]	; (800664c <UART_SetConfig+0x384>)
 8006530:	fba3 2302 	umull	r2, r3, r3, r2
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	461d      	mov	r5, r3
 800653e:	f04f 0600 	mov.w	r6, #0
 8006542:	46a9      	mov	r9, r5
 8006544:	46b2      	mov	sl, r6
 8006546:	eb19 0309 	adds.w	r3, r9, r9
 800654a:	eb4a 040a 	adc.w	r4, sl, sl
 800654e:	4699      	mov	r9, r3
 8006550:	46a2      	mov	sl, r4
 8006552:	eb19 0905 	adds.w	r9, r9, r5
 8006556:	eb4a 0a06 	adc.w	sl, sl, r6
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800656a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800656e:	4689      	mov	r9, r1
 8006570:	4692      	mov	sl, r2
 8006572:	eb19 0005 	adds.w	r0, r9, r5
 8006576:	eb4a 0106 	adc.w	r1, sl, r6
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	461d      	mov	r5, r3
 8006580:	f04f 0600 	mov.w	r6, #0
 8006584:	196b      	adds	r3, r5, r5
 8006586:	eb46 0406 	adc.w	r4, r6, r6
 800658a:	461a      	mov	r2, r3
 800658c:	4623      	mov	r3, r4
 800658e:	f7fa fab5 	bl	8000afc <__aeabi_uldivmod>
 8006592:	4603      	mov	r3, r0
 8006594:	460c      	mov	r4, r1
 8006596:	461a      	mov	r2, r3
 8006598:	4b2c      	ldr	r3, [pc, #176]	; (800664c <UART_SetConfig+0x384>)
 800659a:	fba3 1302 	umull	r1, r3, r3, r2
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	2164      	movs	r1, #100	; 0x64
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	3332      	adds	r3, #50	; 0x32
 80065ac:	4a27      	ldr	r2, [pc, #156]	; (800664c <UART_SetConfig+0x384>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065ba:	4498      	add	r8, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	461d      	mov	r5, r3
 80065c0:	f04f 0600 	mov.w	r6, #0
 80065c4:	46a9      	mov	r9, r5
 80065c6:	46b2      	mov	sl, r6
 80065c8:	eb19 0309 	adds.w	r3, r9, r9
 80065cc:	eb4a 040a 	adc.w	r4, sl, sl
 80065d0:	4699      	mov	r9, r3
 80065d2:	46a2      	mov	sl, r4
 80065d4:	eb19 0905 	adds.w	r9, r9, r5
 80065d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80065dc:	f04f 0100 	mov.w	r1, #0
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065f0:	4689      	mov	r9, r1
 80065f2:	4692      	mov	sl, r2
 80065f4:	eb19 0005 	adds.w	r0, r9, r5
 80065f8:	eb4a 0106 	adc.w	r1, sl, r6
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	461d      	mov	r5, r3
 8006602:	f04f 0600 	mov.w	r6, #0
 8006606:	196b      	adds	r3, r5, r5
 8006608:	eb46 0406 	adc.w	r4, r6, r6
 800660c:	461a      	mov	r2, r3
 800660e:	4623      	mov	r3, r4
 8006610:	f7fa fa74 	bl	8000afc <__aeabi_uldivmod>
 8006614:	4603      	mov	r3, r0
 8006616:	460c      	mov	r4, r1
 8006618:	461a      	mov	r2, r3
 800661a:	4b0c      	ldr	r3, [pc, #48]	; (800664c <UART_SetConfig+0x384>)
 800661c:	fba3 1302 	umull	r1, r3, r3, r2
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	2164      	movs	r1, #100	; 0x64
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	3332      	adds	r3, #50	; 0x32
 800662e:	4a07      	ldr	r2, [pc, #28]	; (800664c <UART_SetConfig+0x384>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	f003 0207 	and.w	r2, r3, #7
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4442      	add	r2, r8
 8006640:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006642:	e1b2      	b.n	80069aa <UART_SetConfig+0x6e2>
 8006644:	40011000 	.word	0x40011000
 8006648:	40011400 	.word	0x40011400
 800664c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4ad7      	ldr	r2, [pc, #860]	; (80069b4 <UART_SetConfig+0x6ec>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d005      	beq.n	8006666 <UART_SetConfig+0x39e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4ad6      	ldr	r2, [pc, #856]	; (80069b8 <UART_SetConfig+0x6f0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	f040 80d1 	bne.w	8006808 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006666:	f7fd f9c5 	bl	80039f4 <HAL_RCC_GetPCLK2Freq>
 800666a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	469a      	mov	sl, r3
 8006670:	f04f 0b00 	mov.w	fp, #0
 8006674:	46d0      	mov	r8, sl
 8006676:	46d9      	mov	r9, fp
 8006678:	eb18 0308 	adds.w	r3, r8, r8
 800667c:	eb49 0409 	adc.w	r4, r9, r9
 8006680:	4698      	mov	r8, r3
 8006682:	46a1      	mov	r9, r4
 8006684:	eb18 080a 	adds.w	r8, r8, sl
 8006688:	eb49 090b 	adc.w	r9, r9, fp
 800668c:	f04f 0100 	mov.w	r1, #0
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006698:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800669c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066a0:	4688      	mov	r8, r1
 80066a2:	4691      	mov	r9, r2
 80066a4:	eb1a 0508 	adds.w	r5, sl, r8
 80066a8:	eb4b 0609 	adc.w	r6, fp, r9
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4619      	mov	r1, r3
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	f04f 0400 	mov.w	r4, #0
 80066be:	0094      	lsls	r4, r2, #2
 80066c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066c4:	008b      	lsls	r3, r1, #2
 80066c6:	461a      	mov	r2, r3
 80066c8:	4623      	mov	r3, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	4631      	mov	r1, r6
 80066ce:	f7fa fa15 	bl	8000afc <__aeabi_uldivmod>
 80066d2:	4603      	mov	r3, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	461a      	mov	r2, r3
 80066d8:	4bb8      	ldr	r3, [pc, #736]	; (80069bc <UART_SetConfig+0x6f4>)
 80066da:	fba3 2302 	umull	r2, r3, r3, r2
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	469b      	mov	fp, r3
 80066e8:	f04f 0c00 	mov.w	ip, #0
 80066ec:	46d9      	mov	r9, fp
 80066ee:	46e2      	mov	sl, ip
 80066f0:	eb19 0309 	adds.w	r3, r9, r9
 80066f4:	eb4a 040a 	adc.w	r4, sl, sl
 80066f8:	4699      	mov	r9, r3
 80066fa:	46a2      	mov	sl, r4
 80066fc:	eb19 090b 	adds.w	r9, r9, fp
 8006700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006718:	4689      	mov	r9, r1
 800671a:	4692      	mov	sl, r2
 800671c:	eb1b 0509 	adds.w	r5, fp, r9
 8006720:	eb4c 060a 	adc.w	r6, ip, sl
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	f04f 0400 	mov.w	r4, #0
 8006736:	0094      	lsls	r4, r2, #2
 8006738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800673c:	008b      	lsls	r3, r1, #2
 800673e:	461a      	mov	r2, r3
 8006740:	4623      	mov	r3, r4
 8006742:	4628      	mov	r0, r5
 8006744:	4631      	mov	r1, r6
 8006746:	f7fa f9d9 	bl	8000afc <__aeabi_uldivmod>
 800674a:	4603      	mov	r3, r0
 800674c:	460c      	mov	r4, r1
 800674e:	461a      	mov	r2, r3
 8006750:	4b9a      	ldr	r3, [pc, #616]	; (80069bc <UART_SetConfig+0x6f4>)
 8006752:	fba3 1302 	umull	r1, r3, r3, r2
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	2164      	movs	r1, #100	; 0x64
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	3332      	adds	r3, #50	; 0x32
 8006764:	4a95      	ldr	r2, [pc, #596]	; (80069bc <UART_SetConfig+0x6f4>)
 8006766:	fba2 2303 	umull	r2, r3, r2, r3
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006770:	4498      	add	r8, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	469b      	mov	fp, r3
 8006776:	f04f 0c00 	mov.w	ip, #0
 800677a:	46d9      	mov	r9, fp
 800677c:	46e2      	mov	sl, ip
 800677e:	eb19 0309 	adds.w	r3, r9, r9
 8006782:	eb4a 040a 	adc.w	r4, sl, sl
 8006786:	4699      	mov	r9, r3
 8006788:	46a2      	mov	sl, r4
 800678a:	eb19 090b 	adds.w	r9, r9, fp
 800678e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a6:	4689      	mov	r9, r1
 80067a8:	4692      	mov	sl, r2
 80067aa:	eb1b 0509 	adds.w	r5, fp, r9
 80067ae:	eb4c 060a 	adc.w	r6, ip, sl
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4619      	mov	r1, r3
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	0094      	lsls	r4, r2, #2
 80067c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067ca:	008b      	lsls	r3, r1, #2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	4628      	mov	r0, r5
 80067d2:	4631      	mov	r1, r6
 80067d4:	f7fa f992 	bl	8000afc <__aeabi_uldivmod>
 80067d8:	4603      	mov	r3, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	461a      	mov	r2, r3
 80067de:	4b77      	ldr	r3, [pc, #476]	; (80069bc <UART_SetConfig+0x6f4>)
 80067e0:	fba3 1302 	umull	r1, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	2164      	movs	r1, #100	; 0x64
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	3332      	adds	r3, #50	; 0x32
 80067f2:	4a72      	ldr	r2, [pc, #456]	; (80069bc <UART_SetConfig+0x6f4>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f003 020f 	and.w	r2, r3, #15
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4442      	add	r2, r8
 8006804:	609a      	str	r2, [r3, #8]
 8006806:	e0d0      	b.n	80069aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006808:	f7fd f8e0 	bl	80039cc <HAL_RCC_GetPCLK1Freq>
 800680c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	469a      	mov	sl, r3
 8006812:	f04f 0b00 	mov.w	fp, #0
 8006816:	46d0      	mov	r8, sl
 8006818:	46d9      	mov	r9, fp
 800681a:	eb18 0308 	adds.w	r3, r8, r8
 800681e:	eb49 0409 	adc.w	r4, r9, r9
 8006822:	4698      	mov	r8, r3
 8006824:	46a1      	mov	r9, r4
 8006826:	eb18 080a 	adds.w	r8, r8, sl
 800682a:	eb49 090b 	adc.w	r9, r9, fp
 800682e:	f04f 0100 	mov.w	r1, #0
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800683a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800683e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006842:	4688      	mov	r8, r1
 8006844:	4691      	mov	r9, r2
 8006846:	eb1a 0508 	adds.w	r5, sl, r8
 800684a:	eb4b 0609 	adc.w	r6, fp, r9
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4619      	mov	r1, r3
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	f04f 0400 	mov.w	r4, #0
 8006860:	0094      	lsls	r4, r2, #2
 8006862:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006866:	008b      	lsls	r3, r1, #2
 8006868:	461a      	mov	r2, r3
 800686a:	4623      	mov	r3, r4
 800686c:	4628      	mov	r0, r5
 800686e:	4631      	mov	r1, r6
 8006870:	f7fa f944 	bl	8000afc <__aeabi_uldivmod>
 8006874:	4603      	mov	r3, r0
 8006876:	460c      	mov	r4, r1
 8006878:	461a      	mov	r2, r3
 800687a:	4b50      	ldr	r3, [pc, #320]	; (80069bc <UART_SetConfig+0x6f4>)
 800687c:	fba3 2302 	umull	r2, r3, r3, r2
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	469b      	mov	fp, r3
 800688a:	f04f 0c00 	mov.w	ip, #0
 800688e:	46d9      	mov	r9, fp
 8006890:	46e2      	mov	sl, ip
 8006892:	eb19 0309 	adds.w	r3, r9, r9
 8006896:	eb4a 040a 	adc.w	r4, sl, sl
 800689a:	4699      	mov	r9, r3
 800689c:	46a2      	mov	sl, r4
 800689e:	eb19 090b 	adds.w	r9, r9, fp
 80068a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068a6:	f04f 0100 	mov.w	r1, #0
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ba:	4689      	mov	r9, r1
 80068bc:	4692      	mov	sl, r2
 80068be:	eb1b 0509 	adds.w	r5, fp, r9
 80068c2:	eb4c 060a 	adc.w	r6, ip, sl
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4619      	mov	r1, r3
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	f04f 0400 	mov.w	r4, #0
 80068d8:	0094      	lsls	r4, r2, #2
 80068da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068de:	008b      	lsls	r3, r1, #2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4623      	mov	r3, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	4631      	mov	r1, r6
 80068e8:	f7fa f908 	bl	8000afc <__aeabi_uldivmod>
 80068ec:	4603      	mov	r3, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	461a      	mov	r2, r3
 80068f2:	4b32      	ldr	r3, [pc, #200]	; (80069bc <UART_SetConfig+0x6f4>)
 80068f4:	fba3 1302 	umull	r1, r3, r3, r2
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	2164      	movs	r1, #100	; 0x64
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	3332      	adds	r3, #50	; 0x32
 8006906:	4a2d      	ldr	r2, [pc, #180]	; (80069bc <UART_SetConfig+0x6f4>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006912:	4498      	add	r8, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	469b      	mov	fp, r3
 8006918:	f04f 0c00 	mov.w	ip, #0
 800691c:	46d9      	mov	r9, fp
 800691e:	46e2      	mov	sl, ip
 8006920:	eb19 0309 	adds.w	r3, r9, r9
 8006924:	eb4a 040a 	adc.w	r4, sl, sl
 8006928:	4699      	mov	r9, r3
 800692a:	46a2      	mov	sl, r4
 800692c:	eb19 090b 	adds.w	r9, r9, fp
 8006930:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006934:	f04f 0100 	mov.w	r1, #0
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006940:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006948:	4689      	mov	r9, r1
 800694a:	4692      	mov	sl, r2
 800694c:	eb1b 0509 	adds.w	r5, fp, r9
 8006950:	eb4c 060a 	adc.w	r6, ip, sl
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4619      	mov	r1, r3
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	f04f 0400 	mov.w	r4, #0
 8006966:	0094      	lsls	r4, r2, #2
 8006968:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800696c:	008b      	lsls	r3, r1, #2
 800696e:	461a      	mov	r2, r3
 8006970:	4623      	mov	r3, r4
 8006972:	4628      	mov	r0, r5
 8006974:	4631      	mov	r1, r6
 8006976:	f7fa f8c1 	bl	8000afc <__aeabi_uldivmod>
 800697a:	4603      	mov	r3, r0
 800697c:	460c      	mov	r4, r1
 800697e:	461a      	mov	r2, r3
 8006980:	4b0e      	ldr	r3, [pc, #56]	; (80069bc <UART_SetConfig+0x6f4>)
 8006982:	fba3 1302 	umull	r1, r3, r3, r2
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	2164      	movs	r1, #100	; 0x64
 800698a:	fb01 f303 	mul.w	r3, r1, r3
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	3332      	adds	r3, #50	; 0x32
 8006994:	4a09      	ldr	r2, [pc, #36]	; (80069bc <UART_SetConfig+0x6f4>)
 8006996:	fba2 2303 	umull	r2, r3, r2, r3
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4442      	add	r2, r8
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	e7ff      	b.n	80069aa <UART_SetConfig+0x6e2>
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	40011000 	.word	0x40011000
 80069b8:	40011400 	.word	0x40011400
 80069bc:	51eb851f 	.word	0x51eb851f

080069c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069c2:	b0c5      	sub	sp, #276	; 0x114
 80069c4:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069c6:	f7fa fa95 	bl	8000ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069ca:	f000 fc67 	bl	800729c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069ce:	f001 f82b 	bl	8007a28 <MX_GPIO_Init>
  MX_TIM9_Init();
 80069d2:	f000 ff47 	bl	8007864 <MX_TIM9_Init>
  MX_SPI2_Init();
 80069d6:	f000 fdfd 	bl	80075d4 <MX_SPI2_Init>
  MX_ADC1_Init();
 80069da:	f000 fcc7 	bl	800736c <MX_ADC1_Init>
  MX_ADC2_Init();
 80069de:	f000 fd17 	bl	8007410 <MX_ADC2_Init>
  MX_CAN1_Init();
 80069e2:	f000 fd67 	bl	80074b4 <MX_CAN1_Init>
  MX_I2C1_Init();
 80069e6:	f000 fd99 	bl	800751c <MX_I2C1_Init>
  MX_I2C2_Init();
 80069ea:	f000 fdc5 	bl	8007578 <MX_I2C2_Init>
  MX_TIM1_Init();
 80069ee:	f000 fe29 	bl	8007644 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80069f2:	f000 ffef 	bl	80079d4 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80069f6:	f000 fedd 	bl	80077b4 <MX_TIM8_Init>
  MX_TIM13_Init();
 80069fa:	f000 ffa5 	bl	8007948 <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80069fe:	2100      	movs	r1, #0
 8006a00:	4873      	ldr	r0, [pc, #460]	; (8006bd0 <main+0x210>)
 8006a02:	f7fd ff1f 	bl	8004844 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8006a06:	2104      	movs	r1, #4
 8006a08:	4871      	ldr	r0, [pc, #452]	; (8006bd0 <main+0x210>)
 8006a0a:	f7fd fea7 	bl	800475c <HAL_TIM_OC_Start>



  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a14:	486f      	ldr	r0, [pc, #444]	; (8006bd4 <main+0x214>)
 8006a16:	f7fb fbcb 	bl	80021b0 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a20:	486c      	ldr	r0, [pc, #432]	; (8006bd4 <main+0x214>)
 8006a22:	f7fb fbc5 	bl	80021b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8006a26:	2200      	movs	r2, #0
 8006a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a2c:	4869      	ldr	r0, [pc, #420]	; (8006bd4 <main+0x214>)
 8006a2e:	f7fb fbbf 	bl	80021b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8006a32:	2201      	movs	r2, #1
 8006a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a38:	4866      	ldr	r0, [pc, #408]	; (8006bd4 <main+0x214>)
 8006a3a:	f7fb fbb9 	bl	80021b0 <HAL_GPIO_WritePin>

  SCB->CPACR |= 0xf00000;
 8006a3e:	4b66      	ldr	r3, [pc, #408]	; (8006bd8 <main+0x218>)
 8006a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a44:	4a64      	ldr	r2, [pc, #400]	; (8006bd8 <main+0x218>)
 8006a46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a4a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
//  for(;;)
//   {
//   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
//   HAL_Delay(600);
//   }
  int i=0;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  uint32_t i_fast = 0;
 8006a54:	2300      	movs	r3, #0
 8006a56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  uint32_t i_slow = 0;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  uint32_t fast2slow = 10000;
 8006a60:	f242 7310 	movw	r3, #10000	; 0x2710
 8006a64:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

  //strcpy((char*)buf, "YUUP");
  sprintf((char*)buf, "START");
 8006a68:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a6c:	4a5b      	ldr	r2, [pc, #364]	; (8006bdc <main+0x21c>)
 8006a6e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a72:	6018      	str	r0, [r3, #0]
 8006a74:	3304      	adds	r3, #4
 8006a76:	8019      	strh	r1, [r3, #0]
  ch='t';
 8006a78:	2374      	movs	r3, #116	; 0x74
 8006a7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  int blink_duration = 100;
 8006a7e:	2364      	movs	r3, #100	; 0x64
 8006a80:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 8006a84:	213c      	movs	r1, #60	; 0x3c
 8006a86:	4856      	ldr	r0, [pc, #344]	; (8006be0 <main+0x220>)
 8006a88:	f7fd ffe1 	bl	8004a4e <HAL_TIM_Encoder_Start_IT>
//  HAL_Delay(2);


  // --- MOTOR DRIVER ----------------------------------------------------
  //EN_GATE
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4855      	ldr	r0, [pc, #340]	; (8006be4 <main+0x224>)
 8006a90:	f7fd fed8 	bl	8004844 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8006a94:	2100      	movs	r1, #0
 8006a96:	4853      	ldr	r0, [pc, #332]	; (8006be4 <main+0x224>)
 8006a98:	f7fe ffbd 	bl	8005a16 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8006a9c:	2104      	movs	r1, #4
 8006a9e:	4851      	ldr	r0, [pc, #324]	; (8006be4 <main+0x224>)
 8006aa0:	f7fd fed0 	bl	8004844 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8006aa4:	2104      	movs	r1, #4
 8006aa6:	484f      	ldr	r0, [pc, #316]	; (8006be4 <main+0x224>)
 8006aa8:	f7fe ffb5 	bl	8005a16 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8006aac:	2108      	movs	r1, #8
 8006aae:	484d      	ldr	r0, [pc, #308]	; (8006be4 <main+0x224>)
 8006ab0:	f7fd fec8 	bl	8004844 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8006ab4:	2108      	movs	r1, #8
 8006ab6:	484b      	ldr	r0, [pc, #300]	; (8006be4 <main+0x224>)
 8006ab8:	f7fe ffad 	bl	8005a16 <HAL_TIMEx_PWMN_Start>

  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8006abc:	2201      	movs	r2, #1
 8006abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ac2:	4844      	ldr	r0, [pc, #272]	; (8006bd4 <main+0x214>)
 8006ac4:	f7fb fb74 	bl	80021b0 <HAL_GPIO_WritePin>

  // --- ADC --------------------------------------
  ADC_ChannelConfTypeDef adcChannel;
  adcChannel.Channel = ADC_CHANNEL_14;
 8006ac8:	230e      	movs	r3, #14
 8006aca:	66fb      	str	r3, [r7, #108]	; 0x6c
	adcChannel.Rank = 1;
 8006acc:	2301      	movs	r3, #1
 8006ace:	673b      	str	r3, [r7, #112]	; 0x70
	adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006ad0:	2307      	movs	r3, #7
 8006ad2:	677b      	str	r3, [r7, #116]	; 0x74
	adcChannel.Offset = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	67bb      	str	r3, [r7, #120]	; 0x78

	HAL_ADC_ConfigChannel(&hadc2, &adcChannel);
 8006ad8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006adc:	4619      	mov	r1, r3
 8006ade:	4842      	ldr	r0, [pc, #264]	; (8006be8 <main+0x228>)
 8006ae0:	f7fa fd74 	bl	80015cc <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc2);
 8006ae4:	4840      	ldr	r0, [pc, #256]	; (8006be8 <main+0x228>)
 8006ae6:	f7fa fabb 	bl	8001060 <HAL_ADC_Start>

  // --- ADC ----------------------------------------------------
	//see https://visualgdb.com/tutorials/arm/stm32/adc/
	//uint32_t a_val;
	//a_val = HAL_ADC_GetValue(&hadc2)
	HAL_ADC_Start(&hadc2);
 8006aea:	483f      	ldr	r0, [pc, #252]	; (8006be8 <main+0x228>)
 8006aec:	f7fa fab8 	bl	8001060 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc2, 2000) == HAL_OK)
 8006af0:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006af4:	483c      	ldr	r0, [pc, #240]	; (8006be8 <main+0x228>)
 8006af6:	f7fa fb79 	bl	80011ec <HAL_ADC_PollForConversion>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d109      	bne.n	8006b14 <main+0x154>
	{
			g_ADCValue = HAL_ADC_GetValue(&hadc2);
 8006b00:	4839      	ldr	r0, [pc, #228]	; (8006be8 <main+0x228>)
 8006b02:	f7fa fd38 	bl	8001576 <HAL_ADC_GetValue>
 8006b06:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
			g_MeasurementNumber++;
 8006b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b0e:	3301      	adds	r3, #1
 8006b10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	// ---I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 8006b14:	236b      	movs	r3, #107	; 0x6b
 8006b16:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	buf[1] = 0x00; //switch on
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8006b20:	23d0      	movs	r3, #208	; 0xd0
 8006b22:	b299      	uxth	r1, r3
 8006b24:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	2302      	movs	r3, #2
 8006b30:	482e      	ldr	r0, [pc, #184]	; (8006bec <main+0x22c>)
 8006b32:	f7fb fcc1 	bl	80024b8 <HAL_I2C_Master_Transmit>
 8006b36:	4603      	mov	r3, r0
 8006b38:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
	if (ret != HAL_OK){
 8006b3c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d008      	beq.n	8006b56 <main+0x196>
		strcpy((char*)buf, "Error IMU T\r\n");
 8006b44:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b48:	4a29      	ldr	r2, [pc, #164]	; (8006bf0 <main+0x230>)
 8006b4a:	461c      	mov	r4, r3
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b50:	c407      	stmia	r4!, {r0, r1, r2}
 8006b52:	8023      	strh	r3, [r4, #0]
 8006b54:	e002      	b.n	8006b5c <main+0x19c>
	} else {
		buf[0] = 0x00;
 8006b56:	2300      	movs	r3, #0
 8006b58:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	}

	buf[0] = 0x3B;
 8006b5c:	233b      	movs	r3, #59	; 0x3b
 8006b5e:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006b62:	23d0      	movs	r3, #208	; 0xd0
 8006b64:	b299      	uxth	r1, r3
 8006b66:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006b6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006b6e:	9300      	str	r3, [sp, #0]
 8006b70:	2301      	movs	r3, #1
 8006b72:	481e      	ldr	r0, [pc, #120]	; (8006bec <main+0x22c>)
 8006b74:	f7fb fca0 	bl	80024b8 <HAL_I2C_Master_Transmit>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
	if (ret != HAL_OK){
 8006b7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d008      	beq.n	8006b98 <main+0x1d8>
		strcpy((char*)buf, "Error IMU T\r\n");
 8006b86:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b8a:	4a19      	ldr	r2, [pc, #100]	; (8006bf0 <main+0x230>)
 8006b8c:	461c      	mov	r4, r3
 8006b8e:	4613      	mov	r3, r2
 8006b90:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b92:	c407      	stmia	r4!, {r0, r1, r2}
 8006b94:	8023      	strh	r3, [r4, #0]
 8006b96:	e03b      	b.n	8006c10 <main+0x250>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006b98:	23d0      	movs	r3, #208	; 0xd0
 8006b9a:	b299      	uxth	r1, r3
 8006b9c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8006ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ba4:	9300      	str	r3, [sp, #0]
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	4810      	ldr	r0, [pc, #64]	; (8006bec <main+0x22c>)
 8006baa:	f7fb fd83 	bl	80026b4 <HAL_I2C_Master_Receive>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
		if (ret != HAL_OK){
 8006bb4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d01d      	beq.n	8006bf8 <main+0x238>
			strcpy((char*)buf, "Error IMU R\r\n");
 8006bbc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006bc0:	4a0c      	ldr	r2, [pc, #48]	; (8006bf4 <main+0x234>)
 8006bc2:	461c      	mov	r4, r3
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bc8:	c407      	stmia	r4!, {r0, r1, r2}
 8006bca:	8023      	strh	r3, [r4, #0]
 8006bcc:	e020      	b.n	8006c10 <main+0x250>
 8006bce:	bf00      	nop
 8006bd0:	20000330 	.word	0x20000330
 8006bd4:	40021000 	.word	0x40021000
 8006bd8:	e000ed00 	.word	0xe000ed00
 8006bdc:	08008ef0 	.word	0x08008ef0
 8006be0:	200000f4 	.word	0x200000f4
 8006be4:	200002f0 	.word	0x200002f0
 8006be8:	20000174 	.word	0x20000174
 8006bec:	20000210 	.word	0x20000210
 8006bf0:	08008ef8 	.word	0x08008ef8
 8006bf4:	08008f08 	.word	0x08008f08
		} else {
			accel8l = (int8_t)buf[0];
 8006bf8:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8006bfc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8006c00:	f897 20e2 	ldrb.w	r2, [r7, #226]	; 0xe2
 8006c04:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006c08:	49c7      	ldr	r1, [pc, #796]	; (8006f28 <main+0x568>)
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f001 fd10 	bl	8008630 <siprintf>
//					}
//
//				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 8006c10:	4ac6      	ldr	r2, [pc, #792]	; (8006f2c <main+0x56c>)
 8006c12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c16:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 8006c18:	4ac4      	ldr	r2, [pc, #784]	; (8006f2c <main+0x56c>)
 8006c1a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006c1e:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

  GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8006c20:	4bc3      	ldr	r3, [pc, #780]	; (8006f30 <main+0x570>)
 8006c22:	2210      	movs	r2, #16
 8006c24:	619a      	str	r2, [r3, #24]


  // --- SPI ----------------------------------------------------
	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

	uint16_t address = 0x0000;
 8006c26:	2300      	movs	r3, #0
 8006c28:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t value = 0x0000;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54

	// --- set ABI and enable PWM
	//TODO: Error handling
	address = AS_ADDR_SETTINGS1 | AS_WRITE ;
 8006c32:	2318      	movs	r3, #24
 8006c34:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	value = 0x0080 | AS_ODD;
 8006c38:	f248 0380 	movw	r3, #32896	; 0x8080
 8006c3c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006c40:	2200      	movs	r2, #0
 8006c42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c46:	48bb      	ldr	r0, [pc, #748]	; (8006f34 <main+0x574>)
 8006c48:	f7fb fab2 	bl	80021b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006c4c:	f107 0156 	add.w	r1, r7, #86	; 0x56
 8006c50:	2301      	movs	r3, #1
 8006c52:	2201      	movs	r2, #1
 8006c54:	48b8      	ldr	r0, [pc, #736]	; (8006f38 <main+0x578>)
 8006c56:	f7fc ff45 	bl	8003ae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c60:	48b4      	ldr	r0, [pc, #720]	; (8006f34 <main+0x574>)
 8006c62:	f7fb faa5 	bl	80021b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006c66:	2200      	movs	r2, #0
 8006c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c6c:	48b1      	ldr	r0, [pc, #708]	; (8006f34 <main+0x574>)
 8006c6e:	f7fb fa9f 	bl	80021b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8006c72:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8006c76:	2301      	movs	r3, #1
 8006c78:	2201      	movs	r2, #1
 8006c7a:	48af      	ldr	r0, [pc, #700]	; (8006f38 <main+0x578>)
 8006c7c:	f7fc ff32 	bl	8003ae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006c80:	2201      	movs	r2, #1
 8006c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c86:	48ab      	ldr	r0, [pc, #684]	; (8006f34 <main+0x574>)
 8006c88:	f7fb fa92 	bl	80021b0 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses
	address = AS_ADDR_SETTINGS2 | AS_WRITE ;
 8006c8c:	f248 0319 	movw	r3, #32793	; 0x8019
 8006c90:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	value = 0x0020 | AS_ODD;
 8006c94:	f248 0320 	movw	r3, #32800	; 0x8020
 8006c98:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ca2:	48a4      	ldr	r0, [pc, #656]	; (8006f34 <main+0x574>)
 8006ca4:	f7fb fa84 	bl	80021b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006ca8:	f107 0156 	add.w	r1, r7, #86	; 0x56
 8006cac:	2301      	movs	r3, #1
 8006cae:	2201      	movs	r2, #1
 8006cb0:	48a1      	ldr	r0, [pc, #644]	; (8006f38 <main+0x578>)
 8006cb2:	f7fc ff17 	bl	8003ae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cbc:	489d      	ldr	r0, [pc, #628]	; (8006f34 <main+0x574>)
 8006cbe:	f7fb fa77 	bl	80021b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cc8:	489a      	ldr	r0, [pc, #616]	; (8006f34 <main+0x574>)
 8006cca:	f7fb fa71 	bl	80021b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8006cce:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	4898      	ldr	r0, [pc, #608]	; (8006f38 <main+0x578>)
 8006cd8:	f7fc ff04 	bl	8003ae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ce2:	4894      	ldr	r0, [pc, #592]	; (8006f34 <main+0x574>)
 8006ce4:	f7fb fa64 	bl	80021b0 <HAL_GPIO_WritePin>

	// --- read angle
	address = 0x3FFE | AS_READ ;
 8006ce8:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8006cec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint16_t angle = 0x0000;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006cf6:	2200      	movs	r2, #0
 8006cf8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cfc:	488d      	ldr	r0, [pc, #564]	; (8006f34 <main+0x574>)
 8006cfe:	f7fb fa57 	bl	80021b0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);//this is the value
 8006d02:	f107 0156 	add.w	r1, r7, #86	; 0x56
 8006d06:	2301      	movs	r3, #1
 8006d08:	2201      	movs	r2, #1
 8006d0a:	488b      	ldr	r0, [pc, #556]	; (8006f38 <main+0x578>)
 8006d0c:	f7fc feea 	bl	8003ae4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006d10:	2201      	movs	r2, #1
 8006d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d16:	4887      	ldr	r0, [pc, #540]	; (8006f34 <main+0x574>)
 8006d18:	f7fb fa4a 	bl	80021b0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d22:	4884      	ldr	r0, [pc, #528]	; (8006f34 <main+0x574>)
 8006d24:	f7fb fa44 	bl	80021b0 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint16_t *)&angle, 1, 1);
 8006d28:	f107 0152 	add.w	r1, r7, #82	; 0x52
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	2201      	movs	r2, #1
 8006d30:	4881      	ldr	r0, [pc, #516]	; (8006f38 <main+0x578>)
 8006d32:	f7fd f80b 	bl	8003d4c <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006d36:	2201      	movs	r2, #1
 8006d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d3c:	487d      	ldr	r0, [pc, #500]	; (8006f34 <main+0x574>)
 8006d3e:	f7fb fa37 	bl	80021b0 <HAL_GPIO_WritePin>

	// --- Calibrate counter_angle -----------------------------------
	angle &= AS_DATA_MASK;
 8006d42:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006d46:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	TIM8->CNT = (uint16_t) ((float)angle /16384.0 * 2000.0);
 8006d50:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5c:	ee17 0a90 	vmov	r0, s15
 8006d60:	f7f9 fbf2 	bl	8000548 <__aeabi_f2d>
 8006d64:	f04f 0200 	mov.w	r2, #0
 8006d68:	4b74      	ldr	r3, [pc, #464]	; (8006f3c <main+0x57c>)
 8006d6a:	f7f9 fd6f 	bl	800084c <__aeabi_ddiv>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	460c      	mov	r4, r1
 8006d72:	4618      	mov	r0, r3
 8006d74:	4621      	mov	r1, r4
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	4b71      	ldr	r3, [pc, #452]	; (8006f40 <main+0x580>)
 8006d7c:	f7f9 fc3c 	bl	80005f8 <__aeabi_dmul>
 8006d80:	4603      	mov	r3, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	4618      	mov	r0, r3
 8006d86:	4621      	mov	r1, r4
 8006d88:	f7f9 fe48 	bl	8000a1c <__aeabi_d2uiz>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	4b6c      	ldr	r3, [pc, #432]	; (8006f44 <main+0x584>)
 8006d92:	625a      	str	r2, [r3, #36]	; 0x24



	float amp = 0.05;  // amp
 8006d94:	4b6c      	ldr	r3, [pc, #432]	; (8006f48 <main+0x588>)
 8006d96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	float phase_shift = PI/2;
 8006d9a:	4b6c      	ldr	r3, [pc, #432]	; (8006f4c <main+0x58c>)
 8006d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	int pwm = 2048;
 8006da0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006da4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  {
  	// -------------------------------------------------------------
		// --- FAST PROCESS ----------------------------------------------------
		// -------------------------------------------------------------
  	//HAL_Delay(1);
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006da8:	4b62      	ldr	r3, [pc, #392]	; (8006f34 <main+0x574>)
 8006daa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006dae:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006db0:	4b60      	ldr	r3, [pc, #384]	; (8006f34 <main+0x574>)
 8006db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db6:	619a      	str	r2, [r3, #24]


  	//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);

  	// --- get angle
  	EncVal = TIM8->CNT;//takes 200ns
 8006db8:	4b62      	ldr	r3, [pc, #392]	; (8006f44 <main+0x584>)
 8006dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dbc:	b21a      	sxth	r2, r3
 8006dbe:	4b64      	ldr	r3, [pc, #400]	; (8006f50 <main+0x590>)
 8006dc0:	801a      	strh	r2, [r3, #0]


  	// --- MOTOR DRIVER ----------------------------------------------------
  	// --- PWM pulses

  	float phase = (float) EncVal * 0.0219905 ; //(float) EncVal / 2000.0 * 2*PI * 7 ; //takes 1500ns
 8006dc2:	4b63      	ldr	r3, [pc, #396]	; (8006f50 <main+0x590>)
 8006dc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dd0:	ee17 0a90 	vmov	r0, s15
 8006dd4:	f7f9 fbb8 	bl	8000548 <__aeabi_f2d>
 8006dd8:	a34d      	add	r3, pc, #308	; (adr r3, 8006f10 <main+0x550>)
 8006dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dde:	f7f9 fc0b 	bl	80005f8 <__aeabi_dmul>
 8006de2:	4603      	mov	r3, r0
 8006de4:	460c      	mov	r4, r1
 8006de6:	4618      	mov	r0, r3
 8006de8:	4621      	mov	r1, r4
 8006dea:	f7f9 fe37 	bl	8000a5c <__aeabi_d2f>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    //float phase = ((float)i_fast)/20.0 * 2.0 * PI;



    float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel //takes<200ns
 8006df4:	4b57      	ldr	r3, [pc, #348]	; (8006f54 <main+0x594>)
 8006df6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    u0 *= amp;  //takes<200ns
 8006dfa:	ed97 7a35 	vldr	s14, [r7, #212]	; 0xd4
 8006dfe:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 8006e02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e06:	edc7 7a35 	vstr	s15, [r7, #212]	; 0xd4

    phase += phase_shift;  //takes<200ns
 8006e0a:	ed97 7a36 	vldr	s14, [r7, #216]	; 0xd8
 8006e0e:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 8006e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e16:	edc7 7a36 	vstr	s15, [r7, #216]	; 0xd8


    //HAL_GPIO_TogglePin(debug1_out_GPIO_Port, debug1_out_Pin);//11mus since last --> reduced it to 2 mus=200 clock cycles, by taking out divisions

    float uA = u0 * arm_cos_f32(-phase); //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 8006e1a:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8006e1e:	eef1 7a67 	vneg.f32	s15, s15
 8006e22:	eeb0 0a67 	vmov.f32	s0, s15
 8006e26:	f7f9 ffe9 	bl	8000dfc <arm_cos_f32>
 8006e2a:	eeb0 7a40 	vmov.f32	s14, s0
 8006e2e:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8006e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e36:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
    float uB = u0 * arm_cos_f32(-phase + 2.0943 ); // takes 3mus
 8006e3a:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8006e3e:	eef1 7a67 	vneg.f32	s15, s15
 8006e42:	ee17 3a90 	vmov	r3, s15
 8006e46:	4618      	mov	r0, r3
 8006e48:	f7f9 fb7e 	bl	8000548 <__aeabi_f2d>
 8006e4c:	a332      	add	r3, pc, #200	; (adr r3, 8006f18 <main+0x558>)
 8006e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e52:	f7f9 fa1b 	bl	800028c <__adddf3>
 8006e56:	4603      	mov	r3, r0
 8006e58:	460c      	mov	r4, r1
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	4621      	mov	r1, r4
 8006e5e:	f7f9 fdfd 	bl	8000a5c <__aeabi_d2f>
 8006e62:	4603      	mov	r3, r0
 8006e64:	ee00 3a10 	vmov	s0, r3
 8006e68:	f7f9 ffc8 	bl	8000dfc <arm_cos_f32>
 8006e6c:	eeb0 7a40 	vmov.f32	s14, s0
 8006e70:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8006e74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e78:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
    float uC = u0 * arm_cos_f32(-phase + 4.1886);
 8006e7c:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8006e80:	eef1 7a67 	vneg.f32	s15, s15
 8006e84:	ee17 3a90 	vmov	r3, s15
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7f9 fb5d 	bl	8000548 <__aeabi_f2d>
 8006e8e:	a324      	add	r3, pc, #144	; (adr r3, 8006f20 <main+0x560>)
 8006e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e94:	f7f9 f9fa 	bl	800028c <__adddf3>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	4621      	mov	r1, r4
 8006ea0:	f7f9 fddc 	bl	8000a5c <__aeabi_d2f>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	ee00 3a10 	vmov	s0, r3
 8006eaa:	f7f9 ffa7 	bl	8000dfc <arm_cos_f32>
 8006eae:	eeb0 7a40 	vmov.f32	s14, s0
 8006eb2:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 8006eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006eba:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8

    //HAL_GPIO_TogglePin(debug1_out_GPIO_Port, debug1_out_Pin);//100mus since last == 10000 clock cycles

    float uMin = min(min(uA, uB), uC); //this and all below is 700ns
 8006ebe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006ec2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ec6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006eca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006ece:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8006ed2:	edd7 7a30 	vldr	s15, [r7, #192]	; 0xc0
 8006ed6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ede:	d502      	bpl.n	8006ee6 <main+0x526>
 8006ee0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006ee4:	e001      	b.n	8006eea <main+0x52a>
 8006ee6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006eea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006ef2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ef6:	ed97 7a2f 	vldr	s14, [r7, #188]	; 0xbc
 8006efa:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8006efe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f06:	d527      	bpl.n	8006f58 <main+0x598>
 8006f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006f0c:	e026      	b.n	8006f5c <main+0x59c>
 8006f0e:	bf00      	nop
 8006f10:	794a6eb9 	.word	0x794a6eb9
 8006f14:	3f9684ad 	.word	0x3f9684ad
 8006f18:	5bc01a37 	.word	0x5bc01a37
 8006f1c:	4000c120 	.word	0x4000c120
 8006f20:	5bc01a37 	.word	0x5bc01a37
 8006f24:	4010c120 	.word	0x4010c120
 8006f28:	08008f18 	.word	0x08008f18
 8006f2c:	40014000 	.word	0x40014000
 8006f30:	40021000 	.word	0x40021000
 8006f34:	40020c00 	.word	0x40020c00
 8006f38:	2000009c 	.word	0x2000009c
 8006f3c:	40d00000 	.word	0x40d00000
 8006f40:	409f4000 	.word	0x409f4000
 8006f44:	40010400 	.word	0x40010400
 8006f48:	3d4ccccd 	.word	0x3d4ccccd
 8006f4c:	3fc90fd8 	.word	0x3fc90fd8
 8006f50:	200002ec 	.word	0x200002ec
 8006f54:	3f13c9ef 	.word	0x3f13c9ef
 8006f58:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    uA -= uMin;
 8006f60:	ed97 7a34 	vldr	s14, [r7, #208]	; 0xd0
 8006f64:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f6c:	edc7 7a34 	vstr	s15, [r7, #208]	; 0xd0
    uB -= uMin;
 8006f70:	ed97 7a33 	vldr	s14, [r7, #204]	; 0xcc
 8006f74:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f7c:	edc7 7a33 	vstr	s15, [r7, #204]	; 0xcc
    uC -= uMin;
 8006f80:	ed97 7a32 	vldr	s14, [r7, #200]	; 0xc8
 8006f84:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8006f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f8c:	edc7 7a32 	vstr	s15, [r7, #200]	; 0xc8


    int pwmA = (uint16_t) (pwm * uA); //takes<200ns
 8006f90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f94:	ee07 3a90 	vmov	s15, r3
 8006f98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006f9c:	edd7 7a34 	vldr	s15, [r7, #208]	; 0xd0
 8006fa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fa8:	ee17 3a90 	vmov	r3, s15
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    int pwmB = (uint16_t) (pwm * uB); //takes<200ns
 8006fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fb6:	ee07 3a90 	vmov	s15, r3
 8006fba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fbe:	edd7 7a33 	vldr	s15, [r7, #204]	; 0xcc
 8006fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fca:	ee17 3a90 	vmov	r3, s15
 8006fce:	b29b      	uxth	r3, r3
 8006fd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    int pwmC = (uint16_t) (pwm * uC); //takes<200ns
 8006fd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fd8:	ee07 3a90 	vmov	s15, r3
 8006fdc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006fe0:	edd7 7a32 	vldr	s15, [r7, #200]	; 0xc8
 8006fe4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fec:	ee17 3a90 	vmov	r3, s15
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8


  	TIM1->CCR1 = pwmA; //takes<150ns
 8006ff6:	4aa2      	ldr	r2, [pc, #648]	; (8007280 <main+0x8c0>)
 8006ff8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ffc:	6353      	str	r3, [r2, #52]	; 0x34
  	TIM1->CCR2 = pwmB; //takes<150ns
 8006ffe:	4aa0      	ldr	r2, [pc, #640]	; (8007280 <main+0x8c0>)
 8007000:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007004:	6393      	str	r3, [r2, #56]	; 0x38
  	TIM1->CCR3 = pwmC; //takes<150ns
 8007006:	4a9e      	ldr	r2, [pc, #632]	; (8007280 <main+0x8c0>)
 8007008:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800700c:	63d3      	str	r3, [r2, #60]	; 0x3c

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 800700e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007012:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007016:	fbb3 f2f2 	udiv	r2, r3, r2
 800701a:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 800701e:	fb01 f202 	mul.w	r2, r1, r2
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	f040 811f 	bne.w	8007268 <main+0x8a8>

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800702a:	2110      	movs	r1, #16
 800702c:	4895      	ldr	r0, [pc, #596]	; (8007284 <main+0x8c4>)
 800702e:	f7fb f8d8 	bl	80021e2 <HAL_GPIO_TogglePin>
			char buffer3[20];




			itoa((int)phase, buffer0, 10);
 8007032:	edd7 7a36 	vldr	s15, [r7, #216]	; 0xd8
 8007036:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800703a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800703e:	220a      	movs	r2, #10
 8007040:	4619      	mov	r1, r3
 8007042:	ee17 0a90 	vmov	r0, s15
 8007046:	f001 fae9 	bl	800861c <itoa>
			itoa(amp*1000, buffer1, 10);
 800704a:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 800704e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8007288 <main+0x8c8>
 8007052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007056:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800705a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800705e:	220a      	movs	r2, #10
 8007060:	4619      	mov	r1, r3
 8007062:	ee17 0a90 	vmov	r0, s15
 8007066:	f001 fad9 	bl	800861c <itoa>
			itoa(phase_shift*1000, buffer2, 10);
 800706a:	edd7 7a3e 	vldr	s15, [r7, #248]	; 0xf8
 800706e:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8007288 <main+0x8c8>
 8007072:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007076:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800707a:	f107 0314 	add.w	r3, r7, #20
 800707e:	220a      	movs	r2, #10
 8007080:	4619      	mov	r1, r3
 8007082:	ee17 0a90 	vmov	r0, s15
 8007086:	f001 fac9 	bl	800861c <itoa>
			itoa(pwmA, buffer3, 10);
 800708a:	463b      	mov	r3, r7
 800708c:	220a      	movs	r2, #10
 800708e:	4619      	mov	r1, r3
 8007090:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8007094:	f001 fac2 	bl	800861c <itoa>


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 8007098:	f107 037f 	add.w	r3, r7, #127	; 0x7f
 800709c:	2201      	movs	r2, #1
 800709e:	4619      	mov	r1, r3
 80070a0:	487a      	ldr	r0, [pc, #488]	; (800728c <main+0x8cc>)
 80070a2:	f7fe fe7c 	bl	8005d9e <HAL_UART_Receive_IT>

			sprintf((char*)buf, strcat(strcat(buffer0, "_"),strcat(strcat(buffer1, "_"), strcat(strcat(buffer2, "#"), strcat(buffer3, "_\r\n")))));
 80070a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7f9 f890 	bl	80001d0 <strlen>
 80070b0:	4603      	mov	r3, r0
 80070b2:	461a      	mov	r2, r3
 80070b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80070b8:	4413      	add	r3, r2
 80070ba:	4975      	ldr	r1, [pc, #468]	; (8007290 <main+0x8d0>)
 80070bc:	461a      	mov	r2, r3
 80070be:	460b      	mov	r3, r1
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	8013      	strh	r3, [r2, #0]
 80070c4:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80070c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7f9 f87f 	bl	80001d0 <strlen>
 80070d2:	4603      	mov	r3, r0
 80070d4:	461a      	mov	r2, r3
 80070d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80070da:	4413      	add	r3, r2
 80070dc:	496c      	ldr	r1, [pc, #432]	; (8007290 <main+0x8d0>)
 80070de:	461a      	mov	r2, r3
 80070e0:	460b      	mov	r3, r1
 80070e2:	881b      	ldrh	r3, [r3, #0]
 80070e4:	8013      	strh	r3, [r2, #0]
 80070e6:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80070ea:	f107 0314 	add.w	r3, r7, #20
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7f9 f86e 	bl	80001d0 <strlen>
 80070f4:	4603      	mov	r3, r0
 80070f6:	461a      	mov	r2, r3
 80070f8:	f107 0314 	add.w	r3, r7, #20
 80070fc:	4413      	add	r3, r2
 80070fe:	4965      	ldr	r1, [pc, #404]	; (8007294 <main+0x8d4>)
 8007100:	461a      	mov	r2, r3
 8007102:	460b      	mov	r3, r1
 8007104:	881b      	ldrh	r3, [r3, #0]
 8007106:	8013      	strh	r3, [r2, #0]
 8007108:	f107 0614 	add.w	r6, r7, #20
 800710c:	463b      	mov	r3, r7
 800710e:	4618      	mov	r0, r3
 8007110:	f7f9 f85e 	bl	80001d0 <strlen>
 8007114:	4603      	mov	r3, r0
 8007116:	461a      	mov	r2, r3
 8007118:	463b      	mov	r3, r7
 800711a:	4413      	add	r3, r2
 800711c:	4a5e      	ldr	r2, [pc, #376]	; (8007298 <main+0x8d8>)
 800711e:	6810      	ldr	r0, [r2, #0]
 8007120:	6018      	str	r0, [r3, #0]
 8007122:	463b      	mov	r3, r7
 8007124:	4619      	mov	r1, r3
 8007126:	4630      	mov	r0, r6
 8007128:	f001 faa2 	bl	8008670 <strcat>
 800712c:	4603      	mov	r3, r0
 800712e:	4619      	mov	r1, r3
 8007130:	4628      	mov	r0, r5
 8007132:	f001 fa9d 	bl	8008670 <strcat>
 8007136:	4603      	mov	r3, r0
 8007138:	4619      	mov	r1, r3
 800713a:	4620      	mov	r0, r4
 800713c:	f001 fa98 	bl	8008670 <strcat>
 8007140:	4602      	mov	r2, r0
 8007142:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007146:	4611      	mov	r1, r2
 8007148:	4618      	mov	r0, r3
 800714a:	f001 fa71 	bl	8008630 <siprintf>
			HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf));
 800714e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007152:	4618      	mov	r0, r3
 8007154:	f7f9 f83c 	bl	80001d0 <strlen>
 8007158:	4603      	mov	r3, r0
 800715a:	b29a      	uxth	r2, r3
 800715c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8007160:	4619      	mov	r1, r3
 8007162:	484a      	ldr	r0, [pc, #296]	; (800728c <main+0x8cc>)
 8007164:	f7fe fdd6 	bl	8005d14 <HAL_UART_Transmit_IT>

			switch(ch){
 8007168:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800716c:	3b61      	subs	r3, #97	; 0x61
 800716e:	2b16      	cmp	r3, #22
 8007170:	d872      	bhi.n	8007258 <main+0x898>
 8007172:	a201      	add	r2, pc, #4	; (adr r2, 8007178 <main+0x7b8>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	08007201 	.word	0x08007201
 800717c:	08007259 	.word	0x08007259
 8007180:	08007259 	.word	0x08007259
 8007184:	0800722d 	.word	0x0800722d
 8007188:	08007259 	.word	0x08007259
 800718c:	08007259 	.word	0x08007259
 8007190:	08007259 	.word	0x08007259
 8007194:	08007259 	.word	0x08007259
 8007198:	08007259 	.word	0x08007259
 800719c:	08007259 	.word	0x08007259
 80071a0:	08007259 	.word	0x08007259
 80071a4:	08007259 	.word	0x08007259
 80071a8:	08007259 	.word	0x08007259
 80071ac:	08007259 	.word	0x08007259
 80071b0:	08007259 	.word	0x08007259
 80071b4:	08007259 	.word	0x08007259
 80071b8:	08007259 	.word	0x08007259
 80071bc:	08007259 	.word	0x08007259
 80071c0:	080071e9 	.word	0x080071e9
 80071c4:	08007259 	.word	0x08007259
 80071c8:	08007259 	.word	0x08007259
 80071cc:	08007259 	.word	0x08007259
 80071d0:	080071d5 	.word	0x080071d5
				case 'w':
					ch='t';
 80071d4:	2374      	movs	r3, #116	; 0x74
 80071d6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					amp *= 2;
 80071da:	edd7 7a3f 	vldr	s15, [r7, #252]	; 0xfc
 80071de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80071e2:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
					break;
 80071e6:	e03a      	b.n	800725e <main+0x89e>
				case 's':
					ch='t';
 80071e8:	2374      	movs	r3, #116	; 0x74
 80071ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					amp /= 2;
 80071ee:	ed97 7a3f 	vldr	s14, [r7, #252]	; 0xfc
 80071f2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80071f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80071fa:	edc7 7a3f 	vstr	s15, [r7, #252]	; 0xfc
					break;
 80071fe:	e02e      	b.n	800725e <main+0x89e>
				case 'a':
					ch='t';
 8007200:	2374      	movs	r3, #116	; 0x74
 8007202:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					phase_shift += 0.1;
 8007206:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 800720a:	f7f9 f99d 	bl	8000548 <__aeabi_f2d>
 800720e:	a31a      	add	r3, pc, #104	; (adr r3, 8007278 <main+0x8b8>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	f7f9 f83a 	bl	800028c <__adddf3>
 8007218:	4603      	mov	r3, r0
 800721a:	460c      	mov	r4, r1
 800721c:	4618      	mov	r0, r3
 800721e:	4621      	mov	r1, r4
 8007220:	f7f9 fc1c 	bl	8000a5c <__aeabi_d2f>
 8007224:	4603      	mov	r3, r0
 8007226:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
					break;
 800722a:	e018      	b.n	800725e <main+0x89e>
				case 'd':
					ch='t';
 800722c:	2374      	movs	r3, #116	; 0x74
 800722e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
					phase_shift -= 0.1;
 8007232:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8007236:	f7f9 f987 	bl	8000548 <__aeabi_f2d>
 800723a:	a30f      	add	r3, pc, #60	; (adr r3, 8007278 <main+0x8b8>)
 800723c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007240:	f7f9 f822 	bl	8000288 <__aeabi_dsub>
 8007244:	4603      	mov	r3, r0
 8007246:	460c      	mov	r4, r1
 8007248:	4618      	mov	r0, r3
 800724a:	4621      	mov	r1, r4
 800724c:	f7f9 fc06 	bl	8000a5c <__aeabi_d2f>
 8007250:	4603      	mov	r3, r0
 8007252:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
					break;
 8007256:	e002      	b.n	800725e <main+0x89e>
				default:
					ch='t';
 8007258:	2374      	movs	r3, #116	; 0x74
 800725a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f

			}
			i_slow++;
 800725e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007262:	3301      	adds	r3, #1
 8007264:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
	  }

	  i_fast++;
 8007268:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800726c:	3301      	adds	r3, #1
 800726e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  {
 8007272:	e599      	b.n	8006da8 <main+0x3e8>
 8007274:	f3af 8000 	nop.w
 8007278:	9999999a 	.word	0x9999999a
 800727c:	3fb99999 	.word	0x3fb99999
 8007280:	40010000 	.word	0x40010000
 8007284:	40021000 	.word	0x40021000
 8007288:	447a0000 	.word	0x447a0000
 800728c:	20000134 	.word	0x20000134
 8007290:	08008f20 	.word	0x08008f20
 8007294:	08008f24 	.word	0x08008f24
 8007298:	08008f28 	.word	0x08008f28

0800729c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b094      	sub	sp, #80	; 0x50
 80072a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80072a2:	f107 0320 	add.w	r3, r7, #32
 80072a6:	2230      	movs	r2, #48	; 0x30
 80072a8:	2100      	movs	r1, #0
 80072aa:	4618      	mov	r0, r3
 80072ac:	f001 f9b8 	bl	8008620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80072b0:	f107 030c 	add.w	r3, r7, #12
 80072b4:	2200      	movs	r2, #0
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	605a      	str	r2, [r3, #4]
 80072ba:	609a      	str	r2, [r3, #8]
 80072bc:	60da      	str	r2, [r3, #12]
 80072be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80072c0:	2300      	movs	r3, #0
 80072c2:	60bb      	str	r3, [r7, #8]
 80072c4:	4b27      	ldr	r3, [pc, #156]	; (8007364 <SystemClock_Config+0xc8>)
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	4a26      	ldr	r2, [pc, #152]	; (8007364 <SystemClock_Config+0xc8>)
 80072ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072ce:	6413      	str	r3, [r2, #64]	; 0x40
 80072d0:	4b24      	ldr	r3, [pc, #144]	; (8007364 <SystemClock_Config+0xc8>)
 80072d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072d8:	60bb      	str	r3, [r7, #8]
 80072da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80072dc:	2300      	movs	r3, #0
 80072de:	607b      	str	r3, [r7, #4]
 80072e0:	4b21      	ldr	r3, [pc, #132]	; (8007368 <SystemClock_Config+0xcc>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	4a20      	ldr	r2, [pc, #128]	; (8007368 <SystemClock_Config+0xcc>)
 80072e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80072ea:	6013      	str	r3, [r2, #0]
 80072ec:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <SystemClock_Config+0xcc>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072f4:	607b      	str	r3, [r7, #4]
 80072f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80072f8:	2302      	movs	r3, #2
 80072fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80072fc:	2301      	movs	r3, #1
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007300:	2310      	movs	r3, #16
 8007302:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007304:	2302      	movs	r3, #2
 8007306:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007308:	2300      	movs	r3, #0
 800730a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800730c:	2308      	movs	r3, #8
 800730e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8007310:	2354      	movs	r3, #84	; 0x54
 8007312:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007314:	2302      	movs	r3, #2
 8007316:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8007318:	2303      	movs	r3, #3
 800731a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800731c:	f107 0320 	add.w	r3, r7, #32
 8007320:	4618      	mov	r0, r3
 8007322:	f7fb ff19 	bl	8003158 <HAL_RCC_OscConfig>
 8007326:	4603      	mov	r3, r0
 8007328:	2b00      	cmp	r3, #0
 800732a:	d001      	beq.n	8007330 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800732c:	f000 fc5c 	bl	8007be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007330:	230f      	movs	r3, #15
 8007332:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007334:	2302      	movs	r3, #2
 8007336:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007338:	2300      	movs	r3, #0
 800733a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800733c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007340:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007342:	2300      	movs	r3, #0
 8007344:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007346:	f107 030c 	add.w	r3, r7, #12
 800734a:	2102      	movs	r1, #2
 800734c:	4618      	mov	r0, r3
 800734e:	f7fc f973 	bl	8003638 <HAL_RCC_ClockConfig>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8007358:	f000 fc46 	bl	8007be8 <Error_Handler>
  }
}
 800735c:	bf00      	nop
 800735e:	3750      	adds	r7, #80	; 0x50
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}
 8007364:	40023800 	.word	0x40023800
 8007368:	40007000 	.word	0x40007000

0800736c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007372:	463b      	mov	r3, r7
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800737e:	4b21      	ldr	r3, [pc, #132]	; (8007404 <MX_ADC1_Init+0x98>)
 8007380:	4a21      	ldr	r2, [pc, #132]	; (8007408 <MX_ADC1_Init+0x9c>)
 8007382:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007384:	4b1f      	ldr	r3, [pc, #124]	; (8007404 <MX_ADC1_Init+0x98>)
 8007386:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800738a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800738c:	4b1d      	ldr	r3, [pc, #116]	; (8007404 <MX_ADC1_Init+0x98>)
 800738e:	2200      	movs	r2, #0
 8007390:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007392:	4b1c      	ldr	r3, [pc, #112]	; (8007404 <MX_ADC1_Init+0x98>)
 8007394:	2200      	movs	r2, #0
 8007396:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8007398:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <MX_ADC1_Init+0x98>)
 800739a:	2200      	movs	r2, #0
 800739c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800739e:	4b19      	ldr	r3, [pc, #100]	; (8007404 <MX_ADC1_Init+0x98>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80073a6:	4b17      	ldr	r3, [pc, #92]	; (8007404 <MX_ADC1_Init+0x98>)
 80073a8:	2200      	movs	r2, #0
 80073aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80073ac:	4b15      	ldr	r3, [pc, #84]	; (8007404 <MX_ADC1_Init+0x98>)
 80073ae:	4a17      	ldr	r2, [pc, #92]	; (800740c <MX_ADC1_Init+0xa0>)
 80073b0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80073b2:	4b14      	ldr	r3, [pc, #80]	; (8007404 <MX_ADC1_Init+0x98>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80073b8:	4b12      	ldr	r3, [pc, #72]	; (8007404 <MX_ADC1_Init+0x98>)
 80073ba:	2201      	movs	r2, #1
 80073bc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80073be:	4b11      	ldr	r3, [pc, #68]	; (8007404 <MX_ADC1_Init+0x98>)
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80073c6:	4b0f      	ldr	r3, [pc, #60]	; (8007404 <MX_ADC1_Init+0x98>)
 80073c8:	2201      	movs	r2, #1
 80073ca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80073cc:	480d      	ldr	r0, [pc, #52]	; (8007404 <MX_ADC1_Init+0x98>)
 80073ce:	f7f9 fe03 	bl	8000fd8 <HAL_ADC_Init>
 80073d2:	4603      	mov	r3, r0
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d001      	beq.n	80073dc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80073d8:	f000 fc06 	bl	8007be8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80073dc:	2302      	movs	r3, #2
 80073de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80073e0:	2301      	movs	r3, #1
 80073e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80073e4:	2300      	movs	r3, #0
 80073e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80073e8:	463b      	mov	r3, r7
 80073ea:	4619      	mov	r1, r3
 80073ec:	4805      	ldr	r0, [pc, #20]	; (8007404 <MX_ADC1_Init+0x98>)
 80073ee:	f7fa f8ed 	bl	80015cc <HAL_ADC_ConfigChannel>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80073f8:	f000 fbf6 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80073fc:	bf00      	nop
 80073fe:	3710      	adds	r7, #16
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	20000264 	.word	0x20000264
 8007408:	40012000 	.word	0x40012000
 800740c:	0f000001 	.word	0x0f000001

08007410 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b084      	sub	sp, #16
 8007414:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007416:	463b      	mov	r3, r7
 8007418:	2200      	movs	r2, #0
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	605a      	str	r2, [r3, #4]
 800741e:	609a      	str	r2, [r3, #8]
 8007420:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8007422:	4b21      	ldr	r3, [pc, #132]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007424:	4a21      	ldr	r2, [pc, #132]	; (80074ac <MX_ADC2_Init+0x9c>)
 8007426:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007428:	4b1f      	ldr	r3, [pc, #124]	; (80074a8 <MX_ADC2_Init+0x98>)
 800742a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800742e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007430:	4b1d      	ldr	r3, [pc, #116]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007432:	2200      	movs	r2, #0
 8007434:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8007436:	4b1c      	ldr	r3, [pc, #112]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007438:	2200      	movs	r2, #0
 800743a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800743c:	4b1a      	ldr	r3, [pc, #104]	; (80074a8 <MX_ADC2_Init+0x98>)
 800743e:	2201      	movs	r2, #1
 8007440:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007442:	4b19      	ldr	r3, [pc, #100]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007444:	2200      	movs	r2, #0
 8007446:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800744a:	4b17      	ldr	r3, [pc, #92]	; (80074a8 <MX_ADC2_Init+0x98>)
 800744c:	2200      	movs	r2, #0
 800744e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007450:	4b15      	ldr	r3, [pc, #84]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007452:	4a17      	ldr	r2, [pc, #92]	; (80074b0 <MX_ADC2_Init+0xa0>)
 8007454:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007456:	4b14      	ldr	r3, [pc, #80]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007458:	2200      	movs	r2, #0
 800745a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800745c:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <MX_ADC2_Init+0x98>)
 800745e:	2201      	movs	r2, #1
 8007460:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007462:	4b11      	ldr	r3, [pc, #68]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800746a:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <MX_ADC2_Init+0x98>)
 800746c:	2201      	movs	r2, #1
 800746e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007470:	480d      	ldr	r0, [pc, #52]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007472:	f7f9 fdb1 	bl	8000fd8 <HAL_ADC_Init>
 8007476:	4603      	mov	r3, r0
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800747c:	f000 fbb4 	bl	8007be8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007480:	2308      	movs	r3, #8
 8007482:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007484:	2301      	movs	r3, #1
 8007486:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8007488:	2300      	movs	r3, #0
 800748a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800748c:	463b      	mov	r3, r7
 800748e:	4619      	mov	r1, r3
 8007490:	4805      	ldr	r0, [pc, #20]	; (80074a8 <MX_ADC2_Init+0x98>)
 8007492:	f7fa f89b 	bl	80015cc <HAL_ADC_ConfigChannel>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800749c:	f000 fba4 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80074a0:	bf00      	nop
 80074a2:	3710      	adds	r7, #16
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}
 80074a8:	20000174 	.word	0x20000174
 80074ac:	40012100 	.word	0x40012100
 80074b0:	0f000001 	.word	0x0f000001

080074b4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80074b8:	4b16      	ldr	r3, [pc, #88]	; (8007514 <MX_CAN1_Init+0x60>)
 80074ba:	4a17      	ldr	r2, [pc, #92]	; (8007518 <MX_CAN1_Init+0x64>)
 80074bc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80074be:	4b15      	ldr	r3, [pc, #84]	; (8007514 <MX_CAN1_Init+0x60>)
 80074c0:	2210      	movs	r2, #16
 80074c2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80074c4:	4b13      	ldr	r3, [pc, #76]	; (8007514 <MX_CAN1_Init+0x60>)
 80074c6:	2200      	movs	r2, #0
 80074c8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80074ca:	4b12      	ldr	r3, [pc, #72]	; (8007514 <MX_CAN1_Init+0x60>)
 80074cc:	2200      	movs	r2, #0
 80074ce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80074d0:	4b10      	ldr	r3, [pc, #64]	; (8007514 <MX_CAN1_Init+0x60>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80074d6:	4b0f      	ldr	r3, [pc, #60]	; (8007514 <MX_CAN1_Init+0x60>)
 80074d8:	2200      	movs	r2, #0
 80074da:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80074dc:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <MX_CAN1_Init+0x60>)
 80074de:	2200      	movs	r2, #0
 80074e0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80074e2:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <MX_CAN1_Init+0x60>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80074e8:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <MX_CAN1_Init+0x60>)
 80074ea:	2200      	movs	r2, #0
 80074ec:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <MX_CAN1_Init+0x60>)
 80074f0:	2200      	movs	r2, #0
 80074f2:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80074f4:	4b07      	ldr	r3, [pc, #28]	; (8007514 <MX_CAN1_Init+0x60>)
 80074f6:	2200      	movs	r2, #0
 80074f8:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80074fa:	4b06      	ldr	r3, [pc, #24]	; (8007514 <MX_CAN1_Init+0x60>)
 80074fc:	2200      	movs	r2, #0
 80074fe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007500:	4804      	ldr	r0, [pc, #16]	; (8007514 <MX_CAN1_Init+0x60>)
 8007502:	f7fa fa8b 	bl	8001a1c <HAL_CAN_Init>
 8007506:	4603      	mov	r3, r0
 8007508:	2b00      	cmp	r3, #0
 800750a:	d001      	beq.n	8007510 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800750c:	f000 fb6c 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007510:	bf00      	nop
 8007512:	bd80      	pop	{r7, pc}
 8007514:	20000370 	.word	0x20000370
 8007518:	40006400 	.word	0x40006400

0800751c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007520:	4b12      	ldr	r3, [pc, #72]	; (800756c <MX_I2C1_Init+0x50>)
 8007522:	4a13      	ldr	r2, [pc, #76]	; (8007570 <MX_I2C1_Init+0x54>)
 8007524:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8007526:	4b11      	ldr	r3, [pc, #68]	; (800756c <MX_I2C1_Init+0x50>)
 8007528:	4a12      	ldr	r2, [pc, #72]	; (8007574 <MX_I2C1_Init+0x58>)
 800752a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800752c:	4b0f      	ldr	r3, [pc, #60]	; (800756c <MX_I2C1_Init+0x50>)
 800752e:	2200      	movs	r2, #0
 8007530:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007532:	4b0e      	ldr	r3, [pc, #56]	; (800756c <MX_I2C1_Init+0x50>)
 8007534:	2200      	movs	r2, #0
 8007536:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <MX_I2C1_Init+0x50>)
 800753a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800753e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007540:	4b0a      	ldr	r3, [pc, #40]	; (800756c <MX_I2C1_Init+0x50>)
 8007542:	2200      	movs	r2, #0
 8007544:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8007546:	4b09      	ldr	r3, [pc, #36]	; (800756c <MX_I2C1_Init+0x50>)
 8007548:	2200      	movs	r2, #0
 800754a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800754c:	4b07      	ldr	r3, [pc, #28]	; (800756c <MX_I2C1_Init+0x50>)
 800754e:	2200      	movs	r2, #0
 8007550:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <MX_I2C1_Init+0x50>)
 8007554:	2200      	movs	r2, #0
 8007556:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007558:	4804      	ldr	r0, [pc, #16]	; (800756c <MX_I2C1_Init+0x50>)
 800755a:	f7fa fe75 	bl	8002248 <HAL_I2C_Init>
 800755e:	4603      	mov	r3, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d001      	beq.n	8007568 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007564:	f000 fb40 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8007568:	bf00      	nop
 800756a:	bd80      	pop	{r7, pc}
 800756c:	200001bc 	.word	0x200001bc
 8007570:	40005400 	.word	0x40005400
 8007574:	000186a0 	.word	0x000186a0

08007578 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800757c:	4b12      	ldr	r3, [pc, #72]	; (80075c8 <MX_I2C2_Init+0x50>)
 800757e:	4a13      	ldr	r2, [pc, #76]	; (80075cc <MX_I2C2_Init+0x54>)
 8007580:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8007582:	4b11      	ldr	r3, [pc, #68]	; (80075c8 <MX_I2C2_Init+0x50>)
 8007584:	4a12      	ldr	r2, [pc, #72]	; (80075d0 <MX_I2C2_Init+0x58>)
 8007586:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007588:	4b0f      	ldr	r3, [pc, #60]	; (80075c8 <MX_I2C2_Init+0x50>)
 800758a:	2200      	movs	r2, #0
 800758c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800758e:	4b0e      	ldr	r3, [pc, #56]	; (80075c8 <MX_I2C2_Init+0x50>)
 8007590:	2200      	movs	r2, #0
 8007592:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007594:	4b0c      	ldr	r3, [pc, #48]	; (80075c8 <MX_I2C2_Init+0x50>)
 8007596:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800759a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800759c:	4b0a      	ldr	r3, [pc, #40]	; (80075c8 <MX_I2C2_Init+0x50>)
 800759e:	2200      	movs	r2, #0
 80075a0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80075a2:	4b09      	ldr	r3, [pc, #36]	; (80075c8 <MX_I2C2_Init+0x50>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80075a8:	4b07      	ldr	r3, [pc, #28]	; (80075c8 <MX_I2C2_Init+0x50>)
 80075aa:	2200      	movs	r2, #0
 80075ac:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80075ae:	4b06      	ldr	r3, [pc, #24]	; (80075c8 <MX_I2C2_Init+0x50>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80075b4:	4804      	ldr	r0, [pc, #16]	; (80075c8 <MX_I2C2_Init+0x50>)
 80075b6:	f7fa fe47 	bl	8002248 <HAL_I2C_Init>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80075c0:	f000 fb12 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80075c4:	bf00      	nop
 80075c6:	bd80      	pop	{r7, pc}
 80075c8:	20000210 	.word	0x20000210
 80075cc:	40005800 	.word	0x40005800
 80075d0:	000186a0 	.word	0x000186a0

080075d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80075d8:	4b18      	ldr	r3, [pc, #96]	; (800763c <MX_SPI2_Init+0x68>)
 80075da:	4a19      	ldr	r2, [pc, #100]	; (8007640 <MX_SPI2_Init+0x6c>)
 80075dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80075de:	4b17      	ldr	r3, [pc, #92]	; (800763c <MX_SPI2_Init+0x68>)
 80075e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80075e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <MX_SPI2_Init+0x68>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80075ec:	4b13      	ldr	r3, [pc, #76]	; (800763c <MX_SPI2_Init+0x68>)
 80075ee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075f2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80075f4:	4b11      	ldr	r3, [pc, #68]	; (800763c <MX_SPI2_Init+0x68>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80075fa:	4b10      	ldr	r3, [pc, #64]	; (800763c <MX_SPI2_Init+0x68>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007600:	4b0e      	ldr	r3, [pc, #56]	; (800763c <MX_SPI2_Init+0x68>)
 8007602:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007606:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8007608:	4b0c      	ldr	r3, [pc, #48]	; (800763c <MX_SPI2_Init+0x68>)
 800760a:	2218      	movs	r2, #24
 800760c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800760e:	4b0b      	ldr	r3, [pc, #44]	; (800763c <MX_SPI2_Init+0x68>)
 8007610:	2200      	movs	r2, #0
 8007612:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007614:	4b09      	ldr	r3, [pc, #36]	; (800763c <MX_SPI2_Init+0x68>)
 8007616:	2200      	movs	r2, #0
 8007618:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800761a:	4b08      	ldr	r3, [pc, #32]	; (800763c <MX_SPI2_Init+0x68>)
 800761c:	2200      	movs	r2, #0
 800761e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <MX_SPI2_Init+0x68>)
 8007622:	220a      	movs	r2, #10
 8007624:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8007626:	4805      	ldr	r0, [pc, #20]	; (800763c <MX_SPI2_Init+0x68>)
 8007628:	f7fc f9f8 	bl	8003a1c <HAL_SPI_Init>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d001      	beq.n	8007636 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8007632:	f000 fad9 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8007636:	bf00      	nop
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	2000009c 	.word	0x2000009c
 8007640:	40003800 	.word	0x40003800

08007644 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b096      	sub	sp, #88	; 0x58
 8007648:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800764a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	605a      	str	r2, [r3, #4]
 8007654:	609a      	str	r2, [r3, #8]
 8007656:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007658:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800765c:	2200      	movs	r2, #0
 800765e:	601a      	str	r2, [r3, #0]
 8007660:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007666:	2200      	movs	r2, #0
 8007668:	601a      	str	r2, [r3, #0]
 800766a:	605a      	str	r2, [r3, #4]
 800766c:	609a      	str	r2, [r3, #8]
 800766e:	60da      	str	r2, [r3, #12]
 8007670:	611a      	str	r2, [r3, #16]
 8007672:	615a      	str	r2, [r3, #20]
 8007674:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007676:	1d3b      	adds	r3, r7, #4
 8007678:	2220      	movs	r2, #32
 800767a:	2100      	movs	r1, #0
 800767c:	4618      	mov	r0, r3
 800767e:	f000 ffcf 	bl	8008620 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007682:	4b4a      	ldr	r3, [pc, #296]	; (80077ac <MX_TIM1_Init+0x168>)
 8007684:	4a4a      	ldr	r2, [pc, #296]	; (80077b0 <MX_TIM1_Init+0x16c>)
 8007686:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8007688:	4b48      	ldr	r3, [pc, #288]	; (80077ac <MX_TIM1_Init+0x168>)
 800768a:	2201      	movs	r2, #1
 800768c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800768e:	4b47      	ldr	r3, [pc, #284]	; (80077ac <MX_TIM1_Init+0x168>)
 8007690:	2200      	movs	r2, #0
 8007692:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048;
 8007694:	4b45      	ldr	r3, [pc, #276]	; (80077ac <MX_TIM1_Init+0x168>)
 8007696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800769a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800769c:	4b43      	ldr	r3, [pc, #268]	; (80077ac <MX_TIM1_Init+0x168>)
 800769e:	2200      	movs	r2, #0
 80076a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80076a2:	4b42      	ldr	r3, [pc, #264]	; (80077ac <MX_TIM1_Init+0x168>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80076a8:	4b40      	ldr	r3, [pc, #256]	; (80077ac <MX_TIM1_Init+0x168>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80076ae:	483f      	ldr	r0, [pc, #252]	; (80077ac <MX_TIM1_Init+0x168>)
 80076b0:	f7fd f828 	bl	8004704 <HAL_TIM_Base_Init>
 80076b4:	4603      	mov	r3, r0
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d001      	beq.n	80076be <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80076ba:	f000 fa95 	bl	8007be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80076be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80076c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80076c4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80076c8:	4619      	mov	r1, r3
 80076ca:	4838      	ldr	r0, [pc, #224]	; (80077ac <MX_TIM1_Init+0x168>)
 80076cc:	f7fd fc80 	bl	8004fd0 <HAL_TIM_ConfigClockSource>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80076d6:	f000 fa87 	bl	8007be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80076da:	4834      	ldr	r0, [pc, #208]	; (80077ac <MX_TIM1_Init+0x168>)
 80076dc:	f7fd f87c 	bl	80047d8 <HAL_TIM_PWM_Init>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80076e6:	f000 fa7f 	bl	8007be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80076ea:	2300      	movs	r3, #0
 80076ec:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80076ee:	2300      	movs	r3, #0
 80076f0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80076f2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80076f6:	4619      	mov	r1, r3
 80076f8:	482c      	ldr	r0, [pc, #176]	; (80077ac <MX_TIM1_Init+0x168>)
 80076fa:	f7fe f9b7 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007704:	f000 fa70 	bl	8007be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007708:	2360      	movs	r3, #96	; 0x60
 800770a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800770c:	2300      	movs	r3, #0
 800770e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007710:	2300      	movs	r3, #0
 8007712:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007714:	2300      	movs	r3, #0
 8007716:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007718:	2300      	movs	r3, #0
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800771c:	2300      	movs	r3, #0
 800771e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007720:	2300      	movs	r3, #0
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007728:	2200      	movs	r2, #0
 800772a:	4619      	mov	r1, r3
 800772c:	481f      	ldr	r0, [pc, #124]	; (80077ac <MX_TIM1_Init+0x168>)
 800772e:	f7fd fb89 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d001      	beq.n	800773c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8007738:	f000 fa56 	bl	8007be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800773c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007740:	2204      	movs	r2, #4
 8007742:	4619      	mov	r1, r3
 8007744:	4819      	ldr	r0, [pc, #100]	; (80077ac <MX_TIM1_Init+0x168>)
 8007746:	f7fd fb7d 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d001      	beq.n	8007754 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8007750:	f000 fa4a 	bl	8007be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007754:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007758:	2208      	movs	r2, #8
 800775a:	4619      	mov	r1, r3
 800775c:	4813      	ldr	r0, [pc, #76]	; (80077ac <MX_TIM1_Init+0x168>)
 800775e:	f7fd fb71 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 8007762:	4603      	mov	r3, r0
 8007764:	2b00      	cmp	r3, #0
 8007766:	d001      	beq.n	800776c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8007768:	f000 fa3e 	bl	8007be8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800776c:	2300      	movs	r3, #0
 800776e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007770:	2300      	movs	r3, #0
 8007772:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007774:	2300      	movs	r3, #0
 8007776:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007780:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007784:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007786:	2300      	movs	r3, #0
 8007788:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800778a:	1d3b      	adds	r3, r7, #4
 800778c:	4619      	mov	r1, r3
 800778e:	4807      	ldr	r0, [pc, #28]	; (80077ac <MX_TIM1_Init+0x168>)
 8007790:	f7fe f9e8 	bl	8005b64 <HAL_TIMEx_ConfigBreakDeadTime>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800779a:	f000 fa25 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800779e:	4803      	ldr	r0, [pc, #12]	; (80077ac <MX_TIM1_Init+0x168>)
 80077a0:	f000 fd2e 	bl	8008200 <HAL_TIM_MspPostInit>

}
 80077a4:	bf00      	nop
 80077a6:	3758      	adds	r7, #88	; 0x58
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	200002f0 	.word	0x200002f0
 80077b0:	40010000 	.word	0x40010000

080077b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b08c      	sub	sp, #48	; 0x30
 80077b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80077ba:	f107 030c 	add.w	r3, r7, #12
 80077be:	2224      	movs	r2, #36	; 0x24
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 ff2c 	bl	8008620 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077c8:	1d3b      	adds	r3, r7, #4
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80077d0:	4b22      	ldr	r3, [pc, #136]	; (800785c <MX_TIM8_Init+0xa8>)
 80077d2:	4a23      	ldr	r2, [pc, #140]	; (8007860 <MX_TIM8_Init+0xac>)
 80077d4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80077d6:	4b21      	ldr	r3, [pc, #132]	; (800785c <MX_TIM8_Init+0xa8>)
 80077d8:	2200      	movs	r2, #0
 80077da:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077dc:	4b1f      	ldr	r3, [pc, #124]	; (800785c <MX_TIM8_Init+0xa8>)
 80077de:	2200      	movs	r2, #0
 80077e0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80077e2:	4b1e      	ldr	r3, [pc, #120]	; (800785c <MX_TIM8_Init+0xa8>)
 80077e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80077e8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077ea:	4b1c      	ldr	r3, [pc, #112]	; (800785c <MX_TIM8_Init+0xa8>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80077f0:	4b1a      	ldr	r3, [pc, #104]	; (800785c <MX_TIM8_Init+0xa8>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077f6:	4b19      	ldr	r3, [pc, #100]	; (800785c <MX_TIM8_Init+0xa8>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80077fc:	2303      	movs	r3, #3
 80077fe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007804:	2301      	movs	r3, #1
 8007806:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007808:	2300      	movs	r3, #0
 800780a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800780c:	2300      	movs	r3, #0
 800780e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007810:	2300      	movs	r3, #0
 8007812:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007814:	2301      	movs	r3, #1
 8007816:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007818:	2300      	movs	r3, #0
 800781a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800781c:	2300      	movs	r3, #0
 800781e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8007820:	f107 030c 	add.w	r3, r7, #12
 8007824:	4619      	mov	r1, r3
 8007826:	480d      	ldr	r0, [pc, #52]	; (800785c <MX_TIM8_Init+0xa8>)
 8007828:	f7fd f87f 	bl	800492a <HAL_TIM_Encoder_Init>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d001      	beq.n	8007836 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007832:	f000 f9d9 	bl	8007be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007836:	2300      	movs	r3, #0
 8007838:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800783e:	1d3b      	adds	r3, r7, #4
 8007840:	4619      	mov	r1, r3
 8007842:	4806      	ldr	r0, [pc, #24]	; (800785c <MX_TIM8_Init+0xa8>)
 8007844:	f7fe f912 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800784e:	f000 f9cb 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007852:	bf00      	nop
 8007854:	3730      	adds	r7, #48	; 0x30
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	200000f4 	.word	0x200000f4
 8007860:	40010400 	.word	0x40010400

08007864 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08c      	sub	sp, #48	; 0x30
 8007868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800786a:	f107 0320 	add.w	r3, r7, #32
 800786e:	2200      	movs	r2, #0
 8007870:	601a      	str	r2, [r3, #0]
 8007872:	605a      	str	r2, [r3, #4]
 8007874:	609a      	str	r2, [r3, #8]
 8007876:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007878:	1d3b      	adds	r3, r7, #4
 800787a:	2200      	movs	r2, #0
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	605a      	str	r2, [r3, #4]
 8007880:	609a      	str	r2, [r3, #8]
 8007882:	60da      	str	r2, [r3, #12]
 8007884:	611a      	str	r2, [r3, #16]
 8007886:	615a      	str	r2, [r3, #20]
 8007888:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800788a:	4b2d      	ldr	r3, [pc, #180]	; (8007940 <MX_TIM9_Init+0xdc>)
 800788c:	4a2d      	ldr	r2, [pc, #180]	; (8007944 <MX_TIM9_Init+0xe0>)
 800788e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2;
 8007890:	4b2b      	ldr	r3, [pc, #172]	; (8007940 <MX_TIM9_Init+0xdc>)
 8007892:	2202      	movs	r2, #2
 8007894:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007896:	4b2a      	ldr	r3, [pc, #168]	; (8007940 <MX_TIM9_Init+0xdc>)
 8007898:	2200      	movs	r2, #0
 800789a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096;
 800789c:	4b28      	ldr	r3, [pc, #160]	; (8007940 <MX_TIM9_Init+0xdc>)
 800789e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80078a2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078a4:	4b26      	ldr	r3, [pc, #152]	; (8007940 <MX_TIM9_Init+0xdc>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078aa:	4b25      	ldr	r3, [pc, #148]	; (8007940 <MX_TIM9_Init+0xdc>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80078b0:	4823      	ldr	r0, [pc, #140]	; (8007940 <MX_TIM9_Init+0xdc>)
 80078b2:	f7fc ff27 	bl	8004704 <HAL_TIM_Base_Init>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80078bc:	f000 f994 	bl	8007be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078c4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80078c6:	f107 0320 	add.w	r3, r7, #32
 80078ca:	4619      	mov	r1, r3
 80078cc:	481c      	ldr	r0, [pc, #112]	; (8007940 <MX_TIM9_Init+0xdc>)
 80078ce:	f7fd fb7f 	bl	8004fd0 <HAL_TIM_ConfigClockSource>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80078d8:	f000 f986 	bl	8007be8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80078dc:	4818      	ldr	r0, [pc, #96]	; (8007940 <MX_TIM9_Init+0xdc>)
 80078de:	f7fc ff7b 	bl	80047d8 <HAL_TIM_PWM_Init>
 80078e2:	4603      	mov	r3, r0
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d001      	beq.n	80078ec <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80078e8:	f000 f97e 	bl	8007be8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80078ec:	2360      	movs	r3, #96	; 0x60
 80078ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 80078f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80078f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80078f6:	2300      	movs	r3, #0
 80078f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80078fa:	2300      	movs	r3, #0
 80078fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80078fe:	1d3b      	adds	r3, r7, #4
 8007900:	2200      	movs	r2, #0
 8007902:	4619      	mov	r1, r3
 8007904:	480e      	ldr	r0, [pc, #56]	; (8007940 <MX_TIM9_Init+0xdc>)
 8007906:	f7fd fa9d 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8007910:	f000 f96a 	bl	8007be8 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8007914:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007918:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800791a:	1d3b      	adds	r3, r7, #4
 800791c:	2204      	movs	r2, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4807      	ldr	r0, [pc, #28]	; (8007940 <MX_TIM9_Init+0xdc>)
 8007922:	f7fd fa8f 	bl	8004e44 <HAL_TIM_PWM_ConfigChannel>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 800792c:	f000 f95c 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8007930:	4803      	ldr	r0, [pc, #12]	; (8007940 <MX_TIM9_Init+0xdc>)
 8007932:	f000 fc65 	bl	8008200 <HAL_TIM_MspPostInit>

}
 8007936:	bf00      	nop
 8007938:	3730      	adds	r7, #48	; 0x30
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000330 	.word	0x20000330
 8007944:	40014000 	.word	0x40014000

08007948 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800794e:	463b      	mov	r3, r7
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800795a:	4b1c      	ldr	r3, [pc, #112]	; (80079cc <MX_TIM13_Init+0x84>)
 800795c:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <MX_TIM13_Init+0x88>)
 800795e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8007960:	4b1a      	ldr	r3, [pc, #104]	; (80079cc <MX_TIM13_Init+0x84>)
 8007962:	2200      	movs	r2, #0
 8007964:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007966:	4b19      	ldr	r3, [pc, #100]	; (80079cc <MX_TIM13_Init+0x84>)
 8007968:	2200      	movs	r2, #0
 800796a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 800796c:	4b17      	ldr	r3, [pc, #92]	; (80079cc <MX_TIM13_Init+0x84>)
 800796e:	2200      	movs	r2, #0
 8007970:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007972:	4b16      	ldr	r3, [pc, #88]	; (80079cc <MX_TIM13_Init+0x84>)
 8007974:	2200      	movs	r2, #0
 8007976:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007978:	4b14      	ldr	r3, [pc, #80]	; (80079cc <MX_TIM13_Init+0x84>)
 800797a:	2200      	movs	r2, #0
 800797c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800797e:	4813      	ldr	r0, [pc, #76]	; (80079cc <MX_TIM13_Init+0x84>)
 8007980:	f7fc fec0 	bl	8004704 <HAL_TIM_Base_Init>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 800798a:	f000 f92d 	bl	8007be8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800798e:	480f      	ldr	r0, [pc, #60]	; (80079cc <MX_TIM13_Init+0x84>)
 8007990:	f7fc ff96 	bl	80048c0 <HAL_TIM_IC_Init>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d001      	beq.n	800799e <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 800799a:	f000 f925 	bl	8007be8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800799e:	2300      	movs	r3, #0
 80079a0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80079a2:	2301      	movs	r3, #1
 80079a4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80079a6:	2300      	movs	r3, #0
 80079a8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80079aa:	2300      	movs	r3, #0
 80079ac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80079ae:	463b      	mov	r3, r7
 80079b0:	2200      	movs	r2, #0
 80079b2:	4619      	mov	r1, r3
 80079b4:	4805      	ldr	r0, [pc, #20]	; (80079cc <MX_TIM13_Init+0x84>)
 80079b6:	f7fd f9a9 	bl	8004d0c <HAL_TIM_IC_ConfigChannel>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 80079c0:	f000 f912 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80079c4:	bf00      	nop
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}
 80079cc:	200002ac 	.word	0x200002ac
 80079d0:	40001c00 	.word	0x40001c00

080079d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 80079da:	4a12      	ldr	r2, [pc, #72]	; (8007a24 <MX_USART3_UART_Init+0x50>)
 80079dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80079de:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 80079e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80079e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80079e6:	4b0e      	ldr	r3, [pc, #56]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80079ec:	4b0c      	ldr	r3, [pc, #48]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80079f2:	4b0b      	ldr	r3, [pc, #44]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80079f8:	4b09      	ldr	r3, [pc, #36]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 80079fa:	220c      	movs	r2, #12
 80079fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079fe:	4b08      	ldr	r3, [pc, #32]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 8007a00:	2200      	movs	r2, #0
 8007a02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 8007a06:	2200      	movs	r2, #0
 8007a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007a0a:	4805      	ldr	r0, [pc, #20]	; (8007a20 <MX_USART3_UART_Init+0x4c>)
 8007a0c:	f7fe f935 	bl	8005c7a <HAL_UART_Init>
 8007a10:	4603      	mov	r3, r0
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d001      	beq.n	8007a1a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007a16:	f000 f8e7 	bl	8007be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007a1a:	bf00      	nop
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000134 	.word	0x20000134
 8007a24:	40004800 	.word	0x40004800

08007a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08c      	sub	sp, #48	; 0x30
 8007a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a2e:	f107 031c 	add.w	r3, r7, #28
 8007a32:	2200      	movs	r2, #0
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	605a      	str	r2, [r3, #4]
 8007a38:	609a      	str	r2, [r3, #8]
 8007a3a:	60da      	str	r2, [r3, #12]
 8007a3c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	4b57      	ldr	r3, [pc, #348]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	4a56      	ldr	r2, [pc, #344]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a48:	f043 0310 	orr.w	r3, r3, #16
 8007a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a4e:	4b54      	ldr	r3, [pc, #336]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	617b      	str	r3, [r7, #20]
 8007a5e:	4b50      	ldr	r3, [pc, #320]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a62:	4a4f      	ldr	r2, [pc, #316]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a68:	6313      	str	r3, [r2, #48]	; 0x30
 8007a6a:	4b4d      	ldr	r3, [pc, #308]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a72:	617b      	str	r3, [r7, #20]
 8007a74:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a76:	2300      	movs	r3, #0
 8007a78:	613b      	str	r3, [r7, #16]
 8007a7a:	4b49      	ldr	r3, [pc, #292]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a7e:	4a48      	ldr	r2, [pc, #288]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a80:	f043 0304 	orr.w	r3, r3, #4
 8007a84:	6313      	str	r3, [r2, #48]	; 0x30
 8007a86:	4b46      	ldr	r3, [pc, #280]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a8a:	f003 0304 	and.w	r3, r3, #4
 8007a8e:	613b      	str	r3, [r7, #16]
 8007a90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
 8007a96:	4b42      	ldr	r3, [pc, #264]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9a:	4a41      	ldr	r2, [pc, #260]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007a9c:	f043 0301 	orr.w	r3, r3, #1
 8007aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8007aa2:	4b3f      	ldr	r3, [pc, #252]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60bb      	str	r3, [r7, #8]
 8007ab2:	4b3b      	ldr	r3, [pc, #236]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab6:	4a3a      	ldr	r2, [pc, #232]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007ab8:	f043 0302 	orr.w	r3, r3, #2
 8007abc:	6313      	str	r3, [r2, #48]	; 0x30
 8007abe:	4b38      	ldr	r3, [pc, #224]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	60bb      	str	r3, [r7, #8]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007aca:	2300      	movs	r3, #0
 8007acc:	607b      	str	r3, [r7, #4]
 8007ace:	4b34      	ldr	r3, [pc, #208]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	4a33      	ldr	r2, [pc, #204]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007ad4:	f043 0308 	orr.w	r3, r3, #8
 8007ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8007ada:	4b31      	ldr	r3, [pc, #196]	; (8007ba0 <MX_GPIO_Init+0x178>)
 8007adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ade:	f003 0308 	and.w	r3, r3, #8
 8007ae2:	607b      	str	r3, [r7, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f24c 0118 	movw	r1, #49176	; 0xc018
 8007aec:	482d      	ldr	r0, [pc, #180]	; (8007ba4 <MX_GPIO_Init+0x17c>)
 8007aee:	f7fa fb5f 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin|nSCS_Pin, GPIO_PIN_RESET);
 8007af2:	2200      	movs	r2, #0
 8007af4:	f24b 0180 	movw	r1, #45184	; 0xb080
 8007af8:	482b      	ldr	r0, [pc, #172]	; (8007ba8 <MX_GPIO_Init+0x180>)
 8007afa:	f7fa fb59 	bl	80021b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 8007afe:	f24c 0318 	movw	r3, #49176	; 0xc018
 8007b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b04:	2301      	movs	r3, #1
 8007b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007b10:	f107 031c 	add.w	r3, r7, #28
 8007b14:	4619      	mov	r1, r3
 8007b16:	4823      	ldr	r0, [pc, #140]	; (8007ba4 <MX_GPIO_Init+0x17c>)
 8007b18:	f7fa f9b0 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin nSCS_Pin */
  GPIO_InitStruct.Pin = debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin|nSCS_Pin;
 8007b1c:	f24b 0380 	movw	r3, #45184	; 0xb080
 8007b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b22:	2301      	movs	r3, #1
 8007b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b26:	2300      	movs	r3, #0
 8007b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b2e:	f107 031c 	add.w	r3, r7, #28
 8007b32:	4619      	mov	r1, r3
 8007b34:	481c      	ldr	r0, [pc, #112]	; (8007ba8 <MX_GPIO_Init+0x180>)
 8007b36:	f7fa f9a1 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 8007b3a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b40:	2300      	movs	r3, #0
 8007b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b44:	2300      	movs	r3, #0
 8007b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 8007b48:	f107 031c 	add.w	r3, r7, #28
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4816      	ldr	r0, [pc, #88]	; (8007ba8 <MX_GPIO_Init+0x180>)
 8007b50:	f7fa f994 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 8007b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007b5a:	4b14      	ldr	r3, [pc, #80]	; (8007bac <MX_GPIO_Init+0x184>)
 8007b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b5e:	2300      	movs	r3, #0
 8007b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 8007b62:	f107 031c 	add.w	r3, r7, #28
 8007b66:	4619      	mov	r1, r3
 8007b68:	4811      	ldr	r0, [pc, #68]	; (8007bb0 <MX_GPIO_Init+0x188>)
 8007b6a:	f7fa f987 	bl	8001e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 8007b6e:	2370      	movs	r3, #112	; 0x70
 8007b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007b72:	2300      	movs	r3, #0
 8007b74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007b76:	2301      	movs	r3, #1
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b7a:	f107 031c 	add.w	r3, r7, #28
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4809      	ldr	r0, [pc, #36]	; (8007ba8 <MX_GPIO_Init+0x180>)
 8007b82:	f7fa f97b 	bl	8001e7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007b86:	2200      	movs	r2, #0
 8007b88:	2100      	movs	r1, #0
 8007b8a:	2017      	movs	r0, #23
 8007b8c:	f7fa f91d 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007b90:	2017      	movs	r0, #23
 8007b92:	f7fa f936 	bl	8001e02 <HAL_NVIC_EnableIRQ>

}
 8007b96:	bf00      	nop
 8007b98:	3730      	adds	r7, #48	; 0x30
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop
 8007ba0:	40023800 	.word	0x40023800
 8007ba4:	40021000 	.word	0x40021000
 8007ba8:	40020c00 	.word	0x40020c00
 8007bac:	10110000 	.word	0x10110000
 8007bb0:	40020800 	.word	0x40020800

08007bb4 <HAL_GPIO_EXTI_Callback>:
//	else{
//		__NOP();
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b082      	sub	sp, #8
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	4603      	mov	r3, r0
 8007bbc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 8007bbe:	88fb      	ldrh	r3, [r7, #6]
 8007bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bc4:	d107      	bne.n	8007bd6 <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8007bc6:	2108      	movs	r1, #8
 8007bc8:	4805      	ldr	r0, [pc, #20]	; (8007be0 <HAL_GPIO_EXTI_Callback+0x2c>)
 8007bca:	f7fa fb0a 	bl	80021e2 <HAL_GPIO_TogglePin>
		TIM8->CNT = 0;     //TODO: there is acually some stepping happening under the I pulse so we have to distinguish between step from right and step from left
 8007bce:	4b05      	ldr	r3, [pc, #20]	; (8007be4 <HAL_GPIO_EXTI_Callback+0x30>)
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		__NOP();
	}
}
 8007bd4:	e000      	b.n	8007bd8 <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 8007bd6:	bf00      	nop
}
 8007bd8:	bf00      	nop
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40021000 	.word	0x40021000
 8007be4:	40010400 	.word	0x40010400

08007be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007bec:	bf00      	nop
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf4:	4770      	bx	lr
	...

08007bf8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007bfe:	2300      	movs	r3, #0
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	4b10      	ldr	r3, [pc, #64]	; (8007c44 <HAL_MspInit+0x4c>)
 8007c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c06:	4a0f      	ldr	r2, [pc, #60]	; (8007c44 <HAL_MspInit+0x4c>)
 8007c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	; (8007c44 <HAL_MspInit+0x4c>)
 8007c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c16:	607b      	str	r3, [r7, #4]
 8007c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	4b09      	ldr	r3, [pc, #36]	; (8007c44 <HAL_MspInit+0x4c>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	4a08      	ldr	r2, [pc, #32]	; (8007c44 <HAL_MspInit+0x4c>)
 8007c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c28:	6413      	str	r3, [r2, #64]	; 0x40
 8007c2a:	4b06      	ldr	r3, [pc, #24]	; (8007c44 <HAL_MspInit+0x4c>)
 8007c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c36:	bf00      	nop
 8007c38:	370c      	adds	r7, #12
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c40:	4770      	bx	lr
 8007c42:	bf00      	nop
 8007c44:	40023800 	.word	0x40023800

08007c48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b08e      	sub	sp, #56	; 0x38
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
 8007c5c:	60da      	str	r2, [r3, #12]
 8007c5e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a50      	ldr	r2, [pc, #320]	; (8007da8 <HAL_ADC_MspInit+0x160>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d14a      	bne.n	8007d00 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	623b      	str	r3, [r7, #32]
 8007c6e:	4b4f      	ldr	r3, [pc, #316]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c72:	4a4e      	ldr	r2, [pc, #312]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c78:	6453      	str	r3, [r2, #68]	; 0x44
 8007c7a:	4b4c      	ldr	r3, [pc, #304]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c86:	2300      	movs	r3, #0
 8007c88:	61fb      	str	r3, [r7, #28]
 8007c8a:	4b48      	ldr	r3, [pc, #288]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	4a47      	ldr	r2, [pc, #284]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007c90:	f043 0304 	orr.w	r3, r3, #4
 8007c94:	6313      	str	r3, [r2, #48]	; 0x30
 8007c96:	4b45      	ldr	r3, [pc, #276]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	f003 0304 	and.w	r3, r3, #4
 8007c9e:	61fb      	str	r3, [r7, #28]
 8007ca0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61bb      	str	r3, [r7, #24]
 8007ca6:	4b41      	ldr	r3, [pc, #260]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	4a40      	ldr	r2, [pc, #256]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007cac:	f043 0301 	orr.w	r3, r3, #1
 8007cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cb2:	4b3e      	ldr	r3, [pc, #248]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb6:	f003 0301 	and.w	r3, r3, #1
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	69bb      	ldr	r3, [r7, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = ASENSE_Pin|BSENSE_Pin|CSENSE_Pin;
 8007cbe:	230e      	movs	r3, #14
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cc2:	2303      	movs	r3, #3
 8007cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007cca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007cce:	4619      	mov	r1, r3
 8007cd0:	4837      	ldr	r0, [pc, #220]	; (8007db0 <HAL_ADC_MspInit+0x168>)
 8007cd2:	f7fa f8d3 	bl	8001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_Pin|M0_SO1_Pin|M0_SO2_Pin|TEMP_Pin 
 8007cd6:	233e      	movs	r3, #62	; 0x3e
 8007cd8:	627b      	str	r3, [r7, #36]	; 0x24
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ce2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ce6:	4619      	mov	r1, r3
 8007ce8:	4832      	ldr	r0, [pc, #200]	; (8007db4 <HAL_ADC_MspInit+0x16c>)
 8007cea:	f7fa f8c7 	bl	8001e7c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007cee:	2200      	movs	r2, #0
 8007cf0:	2100      	movs	r1, #0
 8007cf2:	2012      	movs	r0, #18
 8007cf4:	f7fa f869 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007cf8:	2012      	movs	r0, #18
 8007cfa:	f7fa f882 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8007cfe:	e04e      	b.n	8007d9e <HAL_ADC_MspInit+0x156>
  else if(hadc->Instance==ADC2)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a2c      	ldr	r2, [pc, #176]	; (8007db8 <HAL_ADC_MspInit+0x170>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d149      	bne.n	8007d9e <HAL_ADC_MspInit+0x156>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
 8007d0e:	4b27      	ldr	r3, [pc, #156]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d12:	4a26      	ldr	r2, [pc, #152]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d18:	6453      	str	r3, [r2, #68]	; 0x44
 8007d1a:	4b24      	ldr	r3, [pc, #144]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d22:	617b      	str	r3, [r7, #20]
 8007d24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d26:	2300      	movs	r3, #0
 8007d28:	613b      	str	r3, [r7, #16]
 8007d2a:	4b20      	ldr	r3, [pc, #128]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	4a1f      	ldr	r2, [pc, #124]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d30:	f043 0304 	orr.w	r3, r3, #4
 8007d34:	6313      	str	r3, [r2, #48]	; 0x30
 8007d36:	4b1d      	ldr	r3, [pc, #116]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	613b      	str	r3, [r7, #16]
 8007d40:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007d42:	2300      	movs	r3, #0
 8007d44:	60fb      	str	r3, [r7, #12]
 8007d46:	4b19      	ldr	r3, [pc, #100]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	4a18      	ldr	r2, [pc, #96]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d4c:	f043 0302 	orr.w	r3, r3, #2
 8007d50:	6313      	str	r3, [r2, #48]	; 0x30
 8007d52:	4b16      	ldr	r3, [pc, #88]	; (8007dac <HAL_ADC_MspInit+0x164>)
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STRAIN0_Pin|STRAIN1_Pin;
 8007d5e:	2330      	movs	r3, #48	; 0x30
 8007d60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d62:	2303      	movs	r3, #3
 8007d64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d6e:	4619      	mov	r1, r3
 8007d70:	480f      	ldr	r0, [pc, #60]	; (8007db0 <HAL_ADC_MspInit+0x168>)
 8007d72:	f7fa f883 	bl	8001e7c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_S_Pin;
 8007d76:	2301      	movs	r3, #1
 8007d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d7e:	2300      	movs	r3, #0
 8007d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_S_GPIO_Port, &GPIO_InitStruct);
 8007d82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d86:	4619      	mov	r1, r3
 8007d88:	480c      	ldr	r0, [pc, #48]	; (8007dbc <HAL_ADC_MspInit+0x174>)
 8007d8a:	f7fa f877 	bl	8001e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	2012      	movs	r0, #18
 8007d94:	f7fa f819 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007d98:	2012      	movs	r0, #18
 8007d9a:	f7fa f832 	bl	8001e02 <HAL_NVIC_EnableIRQ>
}
 8007d9e:	bf00      	nop
 8007da0:	3738      	adds	r7, #56	; 0x38
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40012000 	.word	0x40012000
 8007dac:	40023800 	.word	0x40023800
 8007db0:	40020800 	.word	0x40020800
 8007db4:	40020000 	.word	0x40020000
 8007db8:	40012100 	.word	0x40012100
 8007dbc:	40020400 	.word	0x40020400

08007dc0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b08a      	sub	sp, #40	; 0x28
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007dc8:	f107 0314 	add.w	r3, r7, #20
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]
 8007dd0:	605a      	str	r2, [r3, #4]
 8007dd2:	609a      	str	r2, [r3, #8]
 8007dd4:	60da      	str	r2, [r3, #12]
 8007dd6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a19      	ldr	r2, [pc, #100]	; (8007e44 <HAL_CAN_MspInit+0x84>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d12b      	bne.n	8007e3a <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007de2:	2300      	movs	r3, #0
 8007de4:	613b      	str	r3, [r7, #16]
 8007de6:	4b18      	ldr	r3, [pc, #96]	; (8007e48 <HAL_CAN_MspInit+0x88>)
 8007de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dea:	4a17      	ldr	r2, [pc, #92]	; (8007e48 <HAL_CAN_MspInit+0x88>)
 8007dec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007df0:	6413      	str	r3, [r2, #64]	; 0x40
 8007df2:	4b15      	ldr	r3, [pc, #84]	; (8007e48 <HAL_CAN_MspInit+0x88>)
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfa:	613b      	str	r3, [r7, #16]
 8007dfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007dfe:	2300      	movs	r3, #0
 8007e00:	60fb      	str	r3, [r7, #12]
 8007e02:	4b11      	ldr	r3, [pc, #68]	; (8007e48 <HAL_CAN_MspInit+0x88>)
 8007e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e06:	4a10      	ldr	r2, [pc, #64]	; (8007e48 <HAL_CAN_MspInit+0x88>)
 8007e08:	f043 0308 	orr.w	r3, r3, #8
 8007e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	; (8007e48 <HAL_CAN_MspInit+0x88>)
 8007e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	60fb      	str	r3, [r7, #12]
 8007e18:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007e1a:	2303      	movs	r3, #3
 8007e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e1e:	2302      	movs	r3, #2
 8007e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e22:	2300      	movs	r3, #0
 8007e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e26:	2303      	movs	r3, #3
 8007e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007e2a:	2309      	movs	r3, #9
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e2e:	f107 0314 	add.w	r3, r7, #20
 8007e32:	4619      	mov	r1, r3
 8007e34:	4805      	ldr	r0, [pc, #20]	; (8007e4c <HAL_CAN_MspInit+0x8c>)
 8007e36:	f7fa f821 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007e3a:	bf00      	nop
 8007e3c:	3728      	adds	r7, #40	; 0x28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	40006400 	.word	0x40006400
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	40020c00 	.word	0x40020c00

08007e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b08c      	sub	sp, #48	; 0x30
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e58:	f107 031c 	add.w	r3, r7, #28
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	601a      	str	r2, [r3, #0]
 8007e60:	605a      	str	r2, [r3, #4]
 8007e62:	609a      	str	r2, [r3, #8]
 8007e64:	60da      	str	r2, [r3, #12]
 8007e66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a32      	ldr	r2, [pc, #200]	; (8007f38 <HAL_I2C_MspInit+0xe8>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d12c      	bne.n	8007ecc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007e72:	2300      	movs	r3, #0
 8007e74:	61bb      	str	r3, [r7, #24]
 8007e76:	4b31      	ldr	r3, [pc, #196]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7a:	4a30      	ldr	r2, [pc, #192]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007e7c:	f043 0302 	orr.w	r3, r3, #2
 8007e80:	6313      	str	r3, [r2, #48]	; 0x30
 8007e82:	4b2e      	ldr	r3, [pc, #184]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	61bb      	str	r3, [r7, #24]
 8007e8c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007e8e:	23c0      	movs	r3, #192	; 0xc0
 8007e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007e92:	2312      	movs	r3, #18
 8007e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e96:	2301      	movs	r3, #1
 8007e98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007e9e:	2304      	movs	r3, #4
 8007ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ea2:	f107 031c 	add.w	r3, r7, #28
 8007ea6:	4619      	mov	r1, r3
 8007ea8:	4825      	ldr	r0, [pc, #148]	; (8007f40 <HAL_I2C_MspInit+0xf0>)
 8007eaa:	f7f9 ffe7 	bl	8001e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	617b      	str	r3, [r7, #20]
 8007eb2:	4b22      	ldr	r3, [pc, #136]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	4a21      	ldr	r2, [pc, #132]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8007ebe:	4b1f      	ldr	r3, [pc, #124]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ec6:	617b      	str	r3, [r7, #20]
 8007ec8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8007eca:	e031      	b.n	8007f30 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a1c      	ldr	r2, [pc, #112]	; (8007f44 <HAL_I2C_MspInit+0xf4>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d12c      	bne.n	8007f30 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	4b18      	ldr	r3, [pc, #96]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ede:	4a17      	ldr	r2, [pc, #92]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007ee0:	f043 0302 	orr.w	r3, r3, #2
 8007ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ee6:	4b15      	ldr	r3, [pc, #84]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	f003 0302 	and.w	r3, r3, #2
 8007eee:	613b      	str	r3, [r7, #16]
 8007ef0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007ef2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ef8:	2312      	movs	r3, #18
 8007efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007efc:	2301      	movs	r3, #1
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f00:	2303      	movs	r3, #3
 8007f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8007f04:	2304      	movs	r3, #4
 8007f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007f08:	f107 031c 	add.w	r3, r7, #28
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	480c      	ldr	r0, [pc, #48]	; (8007f40 <HAL_I2C_MspInit+0xf0>)
 8007f10:	f7f9 ffb4 	bl	8001e7c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	4b08      	ldr	r3, [pc, #32]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1c:	4a07      	ldr	r2, [pc, #28]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007f1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f22:	6413      	str	r3, [r2, #64]	; 0x40
 8007f24:	4b05      	ldr	r3, [pc, #20]	; (8007f3c <HAL_I2C_MspInit+0xec>)
 8007f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
}
 8007f30:	bf00      	nop
 8007f32:	3730      	adds	r7, #48	; 0x30
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40005400 	.word	0x40005400
 8007f3c:	40023800 	.word	0x40023800
 8007f40:	40020400 	.word	0x40020400
 8007f44:	40005800 	.word	0x40005800

08007f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b08a      	sub	sp, #40	; 0x28
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f50:	f107 0314 	add.w	r3, r7, #20
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
 8007f58:	605a      	str	r2, [r3, #4]
 8007f5a:	609a      	str	r2, [r3, #8]
 8007f5c:	60da      	str	r2, [r3, #12]
 8007f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a1d      	ldr	r2, [pc, #116]	; (8007fdc <HAL_SPI_MspInit+0x94>)
 8007f66:	4293      	cmp	r3, r2
 8007f68:	d134      	bne.n	8007fd4 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	613b      	str	r3, [r7, #16]
 8007f6e:	4b1c      	ldr	r3, [pc, #112]	; (8007fe0 <HAL_SPI_MspInit+0x98>)
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	4a1b      	ldr	r2, [pc, #108]	; (8007fe0 <HAL_SPI_MspInit+0x98>)
 8007f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f78:	6413      	str	r3, [r2, #64]	; 0x40
 8007f7a:	4b19      	ldr	r3, [pc, #100]	; (8007fe0 <HAL_SPI_MspInit+0x98>)
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f82:	613b      	str	r3, [r7, #16]
 8007f84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007f86:	2300      	movs	r3, #0
 8007f88:	60fb      	str	r3, [r7, #12]
 8007f8a:	4b15      	ldr	r3, [pc, #84]	; (8007fe0 <HAL_SPI_MspInit+0x98>)
 8007f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f8e:	4a14      	ldr	r2, [pc, #80]	; (8007fe0 <HAL_SPI_MspInit+0x98>)
 8007f90:	f043 0302 	orr.w	r3, r3, #2
 8007f94:	6313      	str	r3, [r2, #48]	; 0x30
 8007f96:	4b12      	ldr	r3, [pc, #72]	; (8007fe0 <HAL_SPI_MspInit+0x98>)
 8007f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8007fa2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007fa8:	2302      	movs	r3, #2
 8007faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fac:	2300      	movs	r3, #0
 8007fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007fb0:	2303      	movs	r3, #3
 8007fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007fb4:	2305      	movs	r3, #5
 8007fb6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007fb8:	f107 0314 	add.w	r3, r7, #20
 8007fbc:	4619      	mov	r1, r3
 8007fbe:	4809      	ldr	r0, [pc, #36]	; (8007fe4 <HAL_SPI_MspInit+0x9c>)
 8007fc0:	f7f9 ff5c 	bl	8001e7c <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	2100      	movs	r1, #0
 8007fc8:	2024      	movs	r0, #36	; 0x24
 8007fca:	f7f9 fefe 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8007fce:	2024      	movs	r0, #36	; 0x24
 8007fd0:	f7f9 ff17 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8007fd4:	bf00      	nop
 8007fd6:	3728      	adds	r7, #40	; 0x28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	40003800 	.word	0x40003800
 8007fe0:	40023800 	.word	0x40023800
 8007fe4:	40020400 	.word	0x40020400

08007fe8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08c      	sub	sp, #48	; 0x30
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff0:	f107 031c 	add.w	r3, r7, #28
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a45      	ldr	r2, [pc, #276]	; (800811c <HAL_TIM_Base_MspInit+0x134>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d12e      	bne.n	8008068 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800800a:	2300      	movs	r3, #0
 800800c:	61bb      	str	r3, [r7, #24]
 800800e:	4b44      	ldr	r3, [pc, #272]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 8008010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008012:	4a43      	ldr	r2, [pc, #268]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 8008014:	f043 0301 	orr.w	r3, r3, #1
 8008018:	6453      	str	r3, [r2, #68]	; 0x44
 800801a:	4b41      	ldr	r3, [pc, #260]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 800801c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801e:	f003 0301 	and.w	r3, r3, #1
 8008022:	61bb      	str	r3, [r7, #24]
 8008024:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8008026:	2200      	movs	r2, #0
 8008028:	2100      	movs	r1, #0
 800802a:	2018      	movs	r0, #24
 800802c:	f7f9 fecd 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008030:	2018      	movs	r0, #24
 8008032:	f7f9 fee6 	bl	8001e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8008036:	2200      	movs	r2, #0
 8008038:	2100      	movs	r1, #0
 800803a:	2019      	movs	r0, #25
 800803c:	f7f9 fec5 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008040:	2019      	movs	r0, #25
 8008042:	f7f9 fede 	bl	8001e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8008046:	2200      	movs	r2, #0
 8008048:	2100      	movs	r1, #0
 800804a:	201a      	movs	r0, #26
 800804c:	f7f9 febd 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008050:	201a      	movs	r0, #26
 8008052:	f7f9 fed6 	bl	8001e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8008056:	2200      	movs	r2, #0
 8008058:	2100      	movs	r1, #0
 800805a:	201b      	movs	r0, #27
 800805c:	f7f9 feb5 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8008060:	201b      	movs	r0, #27
 8008062:	f7f9 fece 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8008066:	e054      	b.n	8008112 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM9)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a2d      	ldr	r2, [pc, #180]	; (8008124 <HAL_TIM_Base_MspInit+0x13c>)
 800806e:	4293      	cmp	r3, r2
 8008070:	d116      	bne.n	80080a0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	4b2a      	ldr	r3, [pc, #168]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 8008078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807a:	4a29      	ldr	r2, [pc, #164]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 800807c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008080:	6453      	str	r3, [r2, #68]	; 0x44
 8008082:	4b27      	ldr	r3, [pc, #156]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 8008084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800808a:	617b      	str	r3, [r7, #20]
 800808c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800808e:	2200      	movs	r2, #0
 8008090:	2100      	movs	r1, #0
 8008092:	2018      	movs	r0, #24
 8008094:	f7f9 fe99 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008098:	2018      	movs	r0, #24
 800809a:	f7f9 feb2 	bl	8001e02 <HAL_NVIC_EnableIRQ>
}
 800809e:	e038      	b.n	8008112 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM13)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a20      	ldr	r2, [pc, #128]	; (8008128 <HAL_TIM_Base_MspInit+0x140>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d133      	bne.n	8008112 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80080aa:	2300      	movs	r3, #0
 80080ac:	613b      	str	r3, [r7, #16]
 80080ae:	4b1c      	ldr	r3, [pc, #112]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 80080b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b2:	4a1b      	ldr	r2, [pc, #108]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 80080b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b8:	6413      	str	r3, [r2, #64]	; 0x40
 80080ba:	4b19      	ldr	r3, [pc, #100]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 80080bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c2:	613b      	str	r3, [r7, #16]
 80080c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080c6:	2300      	movs	r3, #0
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	4b15      	ldr	r3, [pc, #84]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 80080cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080ce:	4a14      	ldr	r2, [pc, #80]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 80080d0:	f043 0301 	orr.w	r3, r3, #1
 80080d4:	6313      	str	r3, [r2, #48]	; 0x30
 80080d6:	4b12      	ldr	r3, [pc, #72]	; (8008120 <HAL_TIM_Base_MspInit+0x138>)
 80080d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080da:	f003 0301 	and.w	r3, r3, #1
 80080de:	60fb      	str	r3, [r7, #12]
 80080e0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80080e2:	2340      	movs	r3, #64	; 0x40
 80080e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e6:	2302      	movs	r3, #2
 80080e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80080ee:	2300      	movs	r3, #0
 80080f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80080f2:	2309      	movs	r3, #9
 80080f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80080f6:	f107 031c 	add.w	r3, r7, #28
 80080fa:	4619      	mov	r1, r3
 80080fc:	480b      	ldr	r0, [pc, #44]	; (800812c <HAL_TIM_Base_MspInit+0x144>)
 80080fe:	f7f9 febd 	bl	8001e7c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8008102:	2200      	movs	r2, #0
 8008104:	2100      	movs	r1, #0
 8008106:	202c      	movs	r0, #44	; 0x2c
 8008108:	f7f9 fe5f 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800810c:	202c      	movs	r0, #44	; 0x2c
 800810e:	f7f9 fe78 	bl	8001e02 <HAL_NVIC_EnableIRQ>
}
 8008112:	bf00      	nop
 8008114:	3730      	adds	r7, #48	; 0x30
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}
 800811a:	bf00      	nop
 800811c:	40010000 	.word	0x40010000
 8008120:	40023800 	.word	0x40023800
 8008124:	40014000 	.word	0x40014000
 8008128:	40001c00 	.word	0x40001c00
 800812c:	40020000 	.word	0x40020000

08008130 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b08a      	sub	sp, #40	; 0x28
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008138:	f107 0314 	add.w	r3, r7, #20
 800813c:	2200      	movs	r2, #0
 800813e:	601a      	str	r2, [r3, #0]
 8008140:	605a      	str	r2, [r3, #4]
 8008142:	609a      	str	r2, [r3, #8]
 8008144:	60da      	str	r2, [r3, #12]
 8008146:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a29      	ldr	r2, [pc, #164]	; (80081f4 <HAL_TIM_Encoder_MspInit+0xc4>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d14b      	bne.n	80081ea <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008152:	2300      	movs	r3, #0
 8008154:	613b      	str	r3, [r7, #16]
 8008156:	4b28      	ldr	r3, [pc, #160]	; (80081f8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800815a:	4a27      	ldr	r2, [pc, #156]	; (80081f8 <HAL_TIM_Encoder_MspInit+0xc8>)
 800815c:	f043 0302 	orr.w	r3, r3, #2
 8008160:	6453      	str	r3, [r2, #68]	; 0x44
 8008162:	4b25      	ldr	r3, [pc, #148]	; (80081f8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	613b      	str	r3, [r7, #16]
 800816c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800816e:	2300      	movs	r3, #0
 8008170:	60fb      	str	r3, [r7, #12]
 8008172:	4b21      	ldr	r3, [pc, #132]	; (80081f8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008176:	4a20      	ldr	r2, [pc, #128]	; (80081f8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008178:	f043 0304 	orr.w	r3, r3, #4
 800817c:	6313      	str	r3, [r2, #48]	; 0x30
 800817e:	4b1e      	ldr	r3, [pc, #120]	; (80081f8 <HAL_TIM_Encoder_MspInit+0xc8>)
 8008180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008182:	f003 0304 	and.w	r3, r3, #4
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800818a:	23c0      	movs	r3, #192	; 0xc0
 800818c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800818e:	2302      	movs	r3, #2
 8008190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008192:	2300      	movs	r3, #0
 8008194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008196:	2300      	movs	r3, #0
 8008198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800819a:	2303      	movs	r3, #3
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800819e:	f107 0314 	add.w	r3, r7, #20
 80081a2:	4619      	mov	r1, r3
 80081a4:	4815      	ldr	r0, [pc, #84]	; (80081fc <HAL_TIM_Encoder_MspInit+0xcc>)
 80081a6:	f7f9 fe69 	bl	8001e7c <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80081aa:	2200      	movs	r2, #0
 80081ac:	2100      	movs	r1, #0
 80081ae:	202b      	movs	r0, #43	; 0x2b
 80081b0:	f7f9 fe0b 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80081b4:	202b      	movs	r0, #43	; 0x2b
 80081b6:	f7f9 fe24 	bl	8001e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80081ba:	2200      	movs	r2, #0
 80081bc:	2100      	movs	r1, #0
 80081be:	202c      	movs	r0, #44	; 0x2c
 80081c0:	f7f9 fe03 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80081c4:	202c      	movs	r0, #44	; 0x2c
 80081c6:	f7f9 fe1c 	bl	8001e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80081ca:	2200      	movs	r2, #0
 80081cc:	2100      	movs	r1, #0
 80081ce:	202d      	movs	r0, #45	; 0x2d
 80081d0:	f7f9 fdfb 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80081d4:	202d      	movs	r0, #45	; 0x2d
 80081d6:	f7f9 fe14 	bl	8001e02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80081da:	2200      	movs	r2, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	202e      	movs	r0, #46	; 0x2e
 80081e0:	f7f9 fdf3 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80081e4:	202e      	movs	r0, #46	; 0x2e
 80081e6:	f7f9 fe0c 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80081ea:	bf00      	nop
 80081ec:	3728      	adds	r7, #40	; 0x28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40010400 	.word	0x40010400
 80081f8:	40023800 	.word	0x40023800
 80081fc:	40020800 	.word	0x40020800

08008200 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08a      	sub	sp, #40	; 0x28
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008208:	f107 0314 	add.w	r3, r7, #20
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	609a      	str	r2, [r3, #8]
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a24      	ldr	r2, [pc, #144]	; (80082b0 <HAL_TIM_MspPostInit+0xb0>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d11f      	bne.n	8008262 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008222:	2300      	movs	r3, #0
 8008224:	613b      	str	r3, [r7, #16]
 8008226:	4b23      	ldr	r3, [pc, #140]	; (80082b4 <HAL_TIM_MspPostInit+0xb4>)
 8008228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800822a:	4a22      	ldr	r2, [pc, #136]	; (80082b4 <HAL_TIM_MspPostInit+0xb4>)
 800822c:	f043 0310 	orr.w	r3, r3, #16
 8008230:	6313      	str	r3, [r2, #48]	; 0x30
 8008232:	4b20      	ldr	r3, [pc, #128]	; (80082b4 <HAL_TIM_MspPostInit+0xb4>)
 8008234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008236:	f003 0310 	and.w	r3, r3, #16
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800823e:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8008242:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008244:	2302      	movs	r3, #2
 8008246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008248:	2300      	movs	r3, #0
 800824a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800824c:	2300      	movs	r3, #0
 800824e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008250:	2301      	movs	r3, #1
 8008252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008254:	f107 0314 	add.w	r3, r7, #20
 8008258:	4619      	mov	r1, r3
 800825a:	4817      	ldr	r0, [pc, #92]	; (80082b8 <HAL_TIM_MspPostInit+0xb8>)
 800825c:	f7f9 fe0e 	bl	8001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8008260:	e022      	b.n	80082a8 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	4a15      	ldr	r2, [pc, #84]	; (80082bc <HAL_TIM_MspPostInit+0xbc>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d11d      	bne.n	80082a8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800826c:	2300      	movs	r3, #0
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	4b10      	ldr	r3, [pc, #64]	; (80082b4 <HAL_TIM_MspPostInit+0xb4>)
 8008272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008274:	4a0f      	ldr	r2, [pc, #60]	; (80082b4 <HAL_TIM_MspPostInit+0xb4>)
 8008276:	f043 0310 	orr.w	r3, r3, #16
 800827a:	6313      	str	r3, [r2, #48]	; 0x30
 800827c:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <HAL_TIM_MspPostInit+0xb4>)
 800827e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008280:	f003 0310 	and.w	r3, r3, #16
 8008284:	60fb      	str	r3, [r7, #12]
 8008286:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8008288:	2360      	movs	r3, #96	; 0x60
 800828a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800828c:	2302      	movs	r3, #2
 800828e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008290:	2300      	movs	r3, #0
 8008292:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008294:	2300      	movs	r3, #0
 8008296:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8008298:	2303      	movs	r3, #3
 800829a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800829c:	f107 0314 	add.w	r3, r7, #20
 80082a0:	4619      	mov	r1, r3
 80082a2:	4805      	ldr	r0, [pc, #20]	; (80082b8 <HAL_TIM_MspPostInit+0xb8>)
 80082a4:	f7f9 fdea 	bl	8001e7c <HAL_GPIO_Init>
}
 80082a8:	bf00      	nop
 80082aa:	3728      	adds	r7, #40	; 0x28
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	40010000 	.word	0x40010000
 80082b4:	40023800 	.word	0x40023800
 80082b8:	40021000 	.word	0x40021000
 80082bc:	40014000 	.word	0x40014000

080082c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b08a      	sub	sp, #40	; 0x28
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082c8:	f107 0314 	add.w	r3, r7, #20
 80082cc:	2200      	movs	r2, #0
 80082ce:	601a      	str	r2, [r3, #0]
 80082d0:	605a      	str	r2, [r3, #4]
 80082d2:	609a      	str	r2, [r3, #8]
 80082d4:	60da      	str	r2, [r3, #12]
 80082d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a1d      	ldr	r2, [pc, #116]	; (8008354 <HAL_UART_MspInit+0x94>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d134      	bne.n	800834c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80082e2:	2300      	movs	r3, #0
 80082e4:	613b      	str	r3, [r7, #16]
 80082e6:	4b1c      	ldr	r3, [pc, #112]	; (8008358 <HAL_UART_MspInit+0x98>)
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	4a1b      	ldr	r2, [pc, #108]	; (8008358 <HAL_UART_MspInit+0x98>)
 80082ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082f0:	6413      	str	r3, [r2, #64]	; 0x40
 80082f2:	4b19      	ldr	r3, [pc, #100]	; (8008358 <HAL_UART_MspInit+0x98>)
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082fa:	613b      	str	r3, [r7, #16]
 80082fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80082fe:	2300      	movs	r3, #0
 8008300:	60fb      	str	r3, [r7, #12]
 8008302:	4b15      	ldr	r3, [pc, #84]	; (8008358 <HAL_UART_MspInit+0x98>)
 8008304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008306:	4a14      	ldr	r2, [pc, #80]	; (8008358 <HAL_UART_MspInit+0x98>)
 8008308:	f043 0308 	orr.w	r3, r3, #8
 800830c:	6313      	str	r3, [r2, #48]	; 0x30
 800830e:	4b12      	ldr	r3, [pc, #72]	; (8008358 <HAL_UART_MspInit+0x98>)
 8008310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800831a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800831e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008320:	2302      	movs	r3, #2
 8008322:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008324:	2301      	movs	r3, #1
 8008326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008328:	2303      	movs	r3, #3
 800832a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800832c:	2307      	movs	r3, #7
 800832e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008330:	f107 0314 	add.w	r3, r7, #20
 8008334:	4619      	mov	r1, r3
 8008336:	4809      	ldr	r0, [pc, #36]	; (800835c <HAL_UART_MspInit+0x9c>)
 8008338:	f7f9 fda0 	bl	8001e7c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800833c:	2200      	movs	r2, #0
 800833e:	2100      	movs	r1, #0
 8008340:	2027      	movs	r0, #39	; 0x27
 8008342:	f7f9 fd42 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8008346:	2027      	movs	r0, #39	; 0x27
 8008348:	f7f9 fd5b 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800834c:	bf00      	nop
 800834e:	3728      	adds	r7, #40	; 0x28
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	40004800 	.word	0x40004800
 8008358:	40023800 	.word	0x40023800
 800835c:	40020c00 	.word	0x40020c00

08008360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008360:	b480      	push	{r7}
 8008362:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008364:	bf00      	nop
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr

0800836e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800836e:	b480      	push	{r7}
 8008370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008372:	e7fe      	b.n	8008372 <HardFault_Handler+0x4>

08008374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008374:	b480      	push	{r7}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008378:	e7fe      	b.n	8008378 <MemManage_Handler+0x4>

0800837a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800837a:	b480      	push	{r7}
 800837c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800837e:	e7fe      	b.n	800837e <BusFault_Handler+0x4>

08008380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008380:	b480      	push	{r7}
 8008382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008384:	e7fe      	b.n	8008384 <UsageFault_Handler+0x4>

08008386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008386:	b480      	push	{r7}
 8008388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800838a:	bf00      	nop
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008398:	bf00      	nop
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr

080083a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083a2:	b480      	push	{r7}
 80083a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083a6:	bf00      	nop
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083b4:	f7f8 fdf0 	bl	8000f98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083b8:	bf00      	nop
 80083ba:	bd80      	pop	{r7, pc}

080083bc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80083c0:	4803      	ldr	r0, [pc, #12]	; (80083d0 <ADC_IRQHandler+0x14>)
 80083c2:	f7f8 ff97 	bl	80012f4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80083c6:	4803      	ldr	r0, [pc, #12]	; (80083d4 <ADC_IRQHandler+0x18>)
 80083c8:	f7f8 ff94 	bl	80012f4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80083cc:	bf00      	nop
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	20000264 	.word	0x20000264
 80083d4:	20000174 	.word	0x20000174

080083d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80083dc:	f44f 7080 	mov.w	r0, #256	; 0x100
 80083e0:	f7f9 ff1a 	bl	8002218 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80083e4:	bf00      	nop
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80083ec:	4803      	ldr	r0, [pc, #12]	; (80083fc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80083ee:	f7fc fb85 	bl	8004afc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80083f2:	4803      	ldr	r0, [pc, #12]	; (8008400 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80083f4:	f7fc fb82 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80083f8:	bf00      	nop
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	200002f0 	.word	0x200002f0
 8008400:	20000330 	.word	0x20000330

08008404 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008408:	4802      	ldr	r0, [pc, #8]	; (8008414 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800840a:	f7fc fb77 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800840e:	bf00      	nop
 8008410:	bd80      	pop	{r7, pc}
 8008412:	bf00      	nop
 8008414:	200002f0 	.word	0x200002f0

08008418 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800841c:	4802      	ldr	r0, [pc, #8]	; (8008428 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800841e:	f7fc fb6d 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8008422:	bf00      	nop
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	200002f0 	.word	0x200002f0

0800842c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008430:	4802      	ldr	r0, [pc, #8]	; (800843c <TIM1_CC_IRQHandler+0x10>)
 8008432:	f7fc fb63 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8008436:	bf00      	nop
 8008438:	bd80      	pop	{r7, pc}
 800843a:	bf00      	nop
 800843c:	200002f0 	.word	0x200002f0

08008440 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008440:	b580      	push	{r7, lr}
 8008442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008444:	4802      	ldr	r0, [pc, #8]	; (8008450 <SPI2_IRQHandler+0x10>)
 8008446:	f7fb ff2d 	bl	80042a4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800844a:	bf00      	nop
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	2000009c 	.word	0x2000009c

08008454 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8008458:	4802      	ldr	r0, [pc, #8]	; (8008464 <USART3_IRQHandler+0x10>)
 800845a:	f7fd fcf5 	bl	8005e48 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800845e:	bf00      	nop
 8008460:	bd80      	pop	{r7, pc}
 8008462:	bf00      	nop
 8008464:	20000134 	.word	0x20000134

08008468 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800846c:	4802      	ldr	r0, [pc, #8]	; (8008478 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800846e:	f7fc fb45 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8008472:	bf00      	nop
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	200000f4 	.word	0x200000f4

0800847c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008480:	4803      	ldr	r0, [pc, #12]	; (8008490 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8008482:	f7fc fb3b 	bl	8004afc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 8008486:	4803      	ldr	r0, [pc, #12]	; (8008494 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8008488:	f7fc fb38 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800848c:	bf00      	nop
 800848e:	bd80      	pop	{r7, pc}
 8008490:	200000f4 	.word	0x200000f4
 8008494:	200002ac 	.word	0x200002ac

08008498 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800849c:	4802      	ldr	r0, [pc, #8]	; (80084a8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800849e:	f7fc fb2d 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	200000f4 	.word	0x200000f4

080084ac <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80084b0:	4802      	ldr	r0, [pc, #8]	; (80084bc <TIM8_CC_IRQHandler+0x10>)
 80084b2:	f7fc fb23 	bl	8004afc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80084b6:	bf00      	nop
 80084b8:	bd80      	pop	{r7, pc}
 80084ba:	bf00      	nop
 80084bc:	200000f4 	.word	0x200000f4

080084c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80084c8:	4b11      	ldr	r3, [pc, #68]	; (8008510 <_sbrk+0x50>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <_sbrk+0x16>
		heap_end = &end;
 80084d0:	4b0f      	ldr	r3, [pc, #60]	; (8008510 <_sbrk+0x50>)
 80084d2:	4a10      	ldr	r2, [pc, #64]	; (8008514 <_sbrk+0x54>)
 80084d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80084d6:	4b0e      	ldr	r3, [pc, #56]	; (8008510 <_sbrk+0x50>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80084dc:	4b0c      	ldr	r3, [pc, #48]	; (8008510 <_sbrk+0x50>)
 80084de:	681a      	ldr	r2, [r3, #0]
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	4413      	add	r3, r2
 80084e4:	466a      	mov	r2, sp
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d907      	bls.n	80084fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80084ea:	f000 f855 	bl	8008598 <__errno>
 80084ee:	4602      	mov	r2, r0
 80084f0:	230c      	movs	r3, #12
 80084f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80084f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80084f8:	e006      	b.n	8008508 <_sbrk+0x48>
	}

	heap_end += incr;
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <_sbrk+0x50>)
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	4413      	add	r3, r2
 8008502:	4a03      	ldr	r2, [pc, #12]	; (8008510 <_sbrk+0x50>)
 8008504:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008506:	68fb      	ldr	r3, [r7, #12]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}
 8008510:	2000008c 	.word	0x2000008c
 8008514:	200003a0 	.word	0x200003a0

08008518 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008518:	b480      	push	{r7}
 800851a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800851c:	4b08      	ldr	r3, [pc, #32]	; (8008540 <SystemInit+0x28>)
 800851e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008522:	4a07      	ldr	r2, [pc, #28]	; (8008540 <SystemInit+0x28>)
 8008524:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008528:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800852c:	4b04      	ldr	r3, [pc, #16]	; (8008540 <SystemInit+0x28>)
 800852e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008532:	609a      	str	r2, [r3, #8]
#endif
}
 8008534:	bf00      	nop
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
 800853e:	bf00      	nop
 8008540:	e000ed00 	.word	0xe000ed00

08008544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800857c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008548:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800854a:	e003      	b.n	8008554 <LoopCopyDataInit>

0800854c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800854c:	4b0c      	ldr	r3, [pc, #48]	; (8008580 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800854e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008550:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008552:	3104      	adds	r1, #4

08008554 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008554:	480b      	ldr	r0, [pc, #44]	; (8008584 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008556:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008558:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800855a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800855c:	d3f6      	bcc.n	800854c <CopyDataInit>
  ldr  r2, =_sbss
 800855e:	4a0b      	ldr	r2, [pc, #44]	; (800858c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008560:	e002      	b.n	8008568 <LoopFillZerobss>

08008562 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008562:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008564:	f842 3b04 	str.w	r3, [r2], #4

08008568 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008568:	4b09      	ldr	r3, [pc, #36]	; (8008590 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800856a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800856c:	d3f9      	bcc.n	8008562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800856e:	f7ff ffd3 	bl	8008518 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008572:	f000 f817 	bl	80085a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008576:	f7fe fa23 	bl	80069c0 <main>
  bx  lr    
 800857a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800857c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008580:	080097b0 	.word	0x080097b0
  ldr  r0, =_sdata
 8008584:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008588:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 800858c:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8008590:	2000039c 	.word	0x2000039c

08008594 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008594:	e7fe      	b.n	8008594 <CAN1_RX0_IRQHandler>
	...

08008598 <__errno>:
 8008598:	4b01      	ldr	r3, [pc, #4]	; (80085a0 <__errno+0x8>)
 800859a:	6818      	ldr	r0, [r3, #0]
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	2000000c 	.word	0x2000000c

080085a4 <__libc_init_array>:
 80085a4:	b570      	push	{r4, r5, r6, lr}
 80085a6:	4e0d      	ldr	r6, [pc, #52]	; (80085dc <__libc_init_array+0x38>)
 80085a8:	4c0d      	ldr	r4, [pc, #52]	; (80085e0 <__libc_init_array+0x3c>)
 80085aa:	1ba4      	subs	r4, r4, r6
 80085ac:	10a4      	asrs	r4, r4, #2
 80085ae:	2500      	movs	r5, #0
 80085b0:	42a5      	cmp	r5, r4
 80085b2:	d109      	bne.n	80085c8 <__libc_init_array+0x24>
 80085b4:	4e0b      	ldr	r6, [pc, #44]	; (80085e4 <__libc_init_array+0x40>)
 80085b6:	4c0c      	ldr	r4, [pc, #48]	; (80085e8 <__libc_init_array+0x44>)
 80085b8:	f000 fc8e 	bl	8008ed8 <_init>
 80085bc:	1ba4      	subs	r4, r4, r6
 80085be:	10a4      	asrs	r4, r4, #2
 80085c0:	2500      	movs	r5, #0
 80085c2:	42a5      	cmp	r5, r4
 80085c4:	d105      	bne.n	80085d2 <__libc_init_array+0x2e>
 80085c6:	bd70      	pop	{r4, r5, r6, pc}
 80085c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085cc:	4798      	blx	r3
 80085ce:	3501      	adds	r5, #1
 80085d0:	e7ee      	b.n	80085b0 <__libc_init_array+0xc>
 80085d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80085d6:	4798      	blx	r3
 80085d8:	3501      	adds	r5, #1
 80085da:	e7f2      	b.n	80085c2 <__libc_init_array+0x1e>
 80085dc:	080097a8 	.word	0x080097a8
 80085e0:	080097a8 	.word	0x080097a8
 80085e4:	080097a8 	.word	0x080097a8
 80085e8:	080097ac 	.word	0x080097ac

080085ec <__itoa>:
 80085ec:	1e93      	subs	r3, r2, #2
 80085ee:	2b22      	cmp	r3, #34	; 0x22
 80085f0:	b510      	push	{r4, lr}
 80085f2:	460c      	mov	r4, r1
 80085f4:	d904      	bls.n	8008600 <__itoa+0x14>
 80085f6:	2300      	movs	r3, #0
 80085f8:	700b      	strb	r3, [r1, #0]
 80085fa:	461c      	mov	r4, r3
 80085fc:	4620      	mov	r0, r4
 80085fe:	bd10      	pop	{r4, pc}
 8008600:	2a0a      	cmp	r2, #10
 8008602:	d109      	bne.n	8008618 <__itoa+0x2c>
 8008604:	2800      	cmp	r0, #0
 8008606:	da07      	bge.n	8008618 <__itoa+0x2c>
 8008608:	232d      	movs	r3, #45	; 0x2d
 800860a:	700b      	strb	r3, [r1, #0]
 800860c:	4240      	negs	r0, r0
 800860e:	2101      	movs	r1, #1
 8008610:	4421      	add	r1, r4
 8008612:	f000 f83d 	bl	8008690 <__utoa>
 8008616:	e7f1      	b.n	80085fc <__itoa+0x10>
 8008618:	2100      	movs	r1, #0
 800861a:	e7f9      	b.n	8008610 <__itoa+0x24>

0800861c <itoa>:
 800861c:	f7ff bfe6 	b.w	80085ec <__itoa>

08008620 <memset>:
 8008620:	4402      	add	r2, r0
 8008622:	4603      	mov	r3, r0
 8008624:	4293      	cmp	r3, r2
 8008626:	d100      	bne.n	800862a <memset+0xa>
 8008628:	4770      	bx	lr
 800862a:	f803 1b01 	strb.w	r1, [r3], #1
 800862e:	e7f9      	b.n	8008624 <memset+0x4>

08008630 <siprintf>:
 8008630:	b40e      	push	{r1, r2, r3}
 8008632:	b500      	push	{lr}
 8008634:	b09c      	sub	sp, #112	; 0x70
 8008636:	ab1d      	add	r3, sp, #116	; 0x74
 8008638:	9002      	str	r0, [sp, #8]
 800863a:	9006      	str	r0, [sp, #24]
 800863c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008640:	4809      	ldr	r0, [pc, #36]	; (8008668 <siprintf+0x38>)
 8008642:	9107      	str	r1, [sp, #28]
 8008644:	9104      	str	r1, [sp, #16]
 8008646:	4909      	ldr	r1, [pc, #36]	; (800866c <siprintf+0x3c>)
 8008648:	f853 2b04 	ldr.w	r2, [r3], #4
 800864c:	9105      	str	r1, [sp, #20]
 800864e:	6800      	ldr	r0, [r0, #0]
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	a902      	add	r1, sp, #8
 8008654:	f000 f8b4 	bl	80087c0 <_svfiprintf_r>
 8008658:	9b02      	ldr	r3, [sp, #8]
 800865a:	2200      	movs	r2, #0
 800865c:	701a      	strb	r2, [r3, #0]
 800865e:	b01c      	add	sp, #112	; 0x70
 8008660:	f85d eb04 	ldr.w	lr, [sp], #4
 8008664:	b003      	add	sp, #12
 8008666:	4770      	bx	lr
 8008668:	2000000c 	.word	0x2000000c
 800866c:	ffff0208 	.word	0xffff0208

08008670 <strcat>:
 8008670:	b510      	push	{r4, lr}
 8008672:	4603      	mov	r3, r0
 8008674:	781a      	ldrb	r2, [r3, #0]
 8008676:	1c5c      	adds	r4, r3, #1
 8008678:	b93a      	cbnz	r2, 800868a <strcat+0x1a>
 800867a:	3b01      	subs	r3, #1
 800867c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008680:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008684:	2a00      	cmp	r2, #0
 8008686:	d1f9      	bne.n	800867c <strcat+0xc>
 8008688:	bd10      	pop	{r4, pc}
 800868a:	4623      	mov	r3, r4
 800868c:	e7f2      	b.n	8008674 <strcat+0x4>
	...

08008690 <__utoa>:
 8008690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008692:	4b1d      	ldr	r3, [pc, #116]	; (8008708 <__utoa+0x78>)
 8008694:	b08b      	sub	sp, #44	; 0x2c
 8008696:	4605      	mov	r5, r0
 8008698:	460c      	mov	r4, r1
 800869a:	466e      	mov	r6, sp
 800869c:	f103 0c20 	add.w	ip, r3, #32
 80086a0:	6818      	ldr	r0, [r3, #0]
 80086a2:	6859      	ldr	r1, [r3, #4]
 80086a4:	4637      	mov	r7, r6
 80086a6:	c703      	stmia	r7!, {r0, r1}
 80086a8:	3308      	adds	r3, #8
 80086aa:	4563      	cmp	r3, ip
 80086ac:	463e      	mov	r6, r7
 80086ae:	d1f7      	bne.n	80086a0 <__utoa+0x10>
 80086b0:	6818      	ldr	r0, [r3, #0]
 80086b2:	791b      	ldrb	r3, [r3, #4]
 80086b4:	713b      	strb	r3, [r7, #4]
 80086b6:	1e93      	subs	r3, r2, #2
 80086b8:	2b22      	cmp	r3, #34	; 0x22
 80086ba:	6038      	str	r0, [r7, #0]
 80086bc:	f04f 0300 	mov.w	r3, #0
 80086c0:	d904      	bls.n	80086cc <__utoa+0x3c>
 80086c2:	7023      	strb	r3, [r4, #0]
 80086c4:	461c      	mov	r4, r3
 80086c6:	4620      	mov	r0, r4
 80086c8:	b00b      	add	sp, #44	; 0x2c
 80086ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80086cc:	1e66      	subs	r6, r4, #1
 80086ce:	fbb5 f0f2 	udiv	r0, r5, r2
 80086d2:	af0a      	add	r7, sp, #40	; 0x28
 80086d4:	fb02 5510 	mls	r5, r2, r0, r5
 80086d8:	443d      	add	r5, r7
 80086da:	1c59      	adds	r1, r3, #1
 80086dc:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80086e0:	f806 5f01 	strb.w	r5, [r6, #1]!
 80086e4:	4605      	mov	r5, r0
 80086e6:	b968      	cbnz	r0, 8008704 <__utoa+0x74>
 80086e8:	5460      	strb	r0, [r4, r1]
 80086ea:	4423      	add	r3, r4
 80086ec:	4622      	mov	r2, r4
 80086ee:	1b19      	subs	r1, r3, r4
 80086f0:	1b10      	subs	r0, r2, r4
 80086f2:	4281      	cmp	r1, r0
 80086f4:	dde7      	ble.n	80086c6 <__utoa+0x36>
 80086f6:	7811      	ldrb	r1, [r2, #0]
 80086f8:	7818      	ldrb	r0, [r3, #0]
 80086fa:	f802 0b01 	strb.w	r0, [r2], #1
 80086fe:	f803 1901 	strb.w	r1, [r3], #-1
 8008702:	e7f4      	b.n	80086ee <__utoa+0x5e>
 8008704:	460b      	mov	r3, r1
 8008706:	e7e2      	b.n	80086ce <__utoa+0x3e>
 8008708:	08009748 	.word	0x08009748

0800870c <__ssputs_r>:
 800870c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	688e      	ldr	r6, [r1, #8]
 8008712:	429e      	cmp	r6, r3
 8008714:	4682      	mov	sl, r0
 8008716:	460c      	mov	r4, r1
 8008718:	4690      	mov	r8, r2
 800871a:	4699      	mov	r9, r3
 800871c:	d837      	bhi.n	800878e <__ssputs_r+0x82>
 800871e:	898a      	ldrh	r2, [r1, #12]
 8008720:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008724:	d031      	beq.n	800878a <__ssputs_r+0x7e>
 8008726:	6825      	ldr	r5, [r4, #0]
 8008728:	6909      	ldr	r1, [r1, #16]
 800872a:	1a6f      	subs	r7, r5, r1
 800872c:	6965      	ldr	r5, [r4, #20]
 800872e:	2302      	movs	r3, #2
 8008730:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008734:	fb95 f5f3 	sdiv	r5, r5, r3
 8008738:	f109 0301 	add.w	r3, r9, #1
 800873c:	443b      	add	r3, r7
 800873e:	429d      	cmp	r5, r3
 8008740:	bf38      	it	cc
 8008742:	461d      	movcc	r5, r3
 8008744:	0553      	lsls	r3, r2, #21
 8008746:	d530      	bpl.n	80087aa <__ssputs_r+0x9e>
 8008748:	4629      	mov	r1, r5
 800874a:	f000 fb2b 	bl	8008da4 <_malloc_r>
 800874e:	4606      	mov	r6, r0
 8008750:	b950      	cbnz	r0, 8008768 <__ssputs_r+0x5c>
 8008752:	230c      	movs	r3, #12
 8008754:	f8ca 3000 	str.w	r3, [sl]
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800875e:	81a3      	strh	r3, [r4, #12]
 8008760:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008768:	463a      	mov	r2, r7
 800876a:	6921      	ldr	r1, [r4, #16]
 800876c:	f000 faa8 	bl	8008cc0 <memcpy>
 8008770:	89a3      	ldrh	r3, [r4, #12]
 8008772:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800877a:	81a3      	strh	r3, [r4, #12]
 800877c:	6126      	str	r6, [r4, #16]
 800877e:	6165      	str	r5, [r4, #20]
 8008780:	443e      	add	r6, r7
 8008782:	1bed      	subs	r5, r5, r7
 8008784:	6026      	str	r6, [r4, #0]
 8008786:	60a5      	str	r5, [r4, #8]
 8008788:	464e      	mov	r6, r9
 800878a:	454e      	cmp	r6, r9
 800878c:	d900      	bls.n	8008790 <__ssputs_r+0x84>
 800878e:	464e      	mov	r6, r9
 8008790:	4632      	mov	r2, r6
 8008792:	4641      	mov	r1, r8
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	f000 fa9e 	bl	8008cd6 <memmove>
 800879a:	68a3      	ldr	r3, [r4, #8]
 800879c:	1b9b      	subs	r3, r3, r6
 800879e:	60a3      	str	r3, [r4, #8]
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	441e      	add	r6, r3
 80087a4:	6026      	str	r6, [r4, #0]
 80087a6:	2000      	movs	r0, #0
 80087a8:	e7dc      	b.n	8008764 <__ssputs_r+0x58>
 80087aa:	462a      	mov	r2, r5
 80087ac:	f000 fb54 	bl	8008e58 <_realloc_r>
 80087b0:	4606      	mov	r6, r0
 80087b2:	2800      	cmp	r0, #0
 80087b4:	d1e2      	bne.n	800877c <__ssputs_r+0x70>
 80087b6:	6921      	ldr	r1, [r4, #16]
 80087b8:	4650      	mov	r0, sl
 80087ba:	f000 faa5 	bl	8008d08 <_free_r>
 80087be:	e7c8      	b.n	8008752 <__ssputs_r+0x46>

080087c0 <_svfiprintf_r>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	461d      	mov	r5, r3
 80087c6:	898b      	ldrh	r3, [r1, #12]
 80087c8:	061f      	lsls	r7, r3, #24
 80087ca:	b09d      	sub	sp, #116	; 0x74
 80087cc:	4680      	mov	r8, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	4616      	mov	r6, r2
 80087d2:	d50f      	bpl.n	80087f4 <_svfiprintf_r+0x34>
 80087d4:	690b      	ldr	r3, [r1, #16]
 80087d6:	b96b      	cbnz	r3, 80087f4 <_svfiprintf_r+0x34>
 80087d8:	2140      	movs	r1, #64	; 0x40
 80087da:	f000 fae3 	bl	8008da4 <_malloc_r>
 80087de:	6020      	str	r0, [r4, #0]
 80087e0:	6120      	str	r0, [r4, #16]
 80087e2:	b928      	cbnz	r0, 80087f0 <_svfiprintf_r+0x30>
 80087e4:	230c      	movs	r3, #12
 80087e6:	f8c8 3000 	str.w	r3, [r8]
 80087ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087ee:	e0c8      	b.n	8008982 <_svfiprintf_r+0x1c2>
 80087f0:	2340      	movs	r3, #64	; 0x40
 80087f2:	6163      	str	r3, [r4, #20]
 80087f4:	2300      	movs	r3, #0
 80087f6:	9309      	str	r3, [sp, #36]	; 0x24
 80087f8:	2320      	movs	r3, #32
 80087fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087fe:	2330      	movs	r3, #48	; 0x30
 8008800:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008804:	9503      	str	r5, [sp, #12]
 8008806:	f04f 0b01 	mov.w	fp, #1
 800880a:	4637      	mov	r7, r6
 800880c:	463d      	mov	r5, r7
 800880e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008812:	b10b      	cbz	r3, 8008818 <_svfiprintf_r+0x58>
 8008814:	2b25      	cmp	r3, #37	; 0x25
 8008816:	d13e      	bne.n	8008896 <_svfiprintf_r+0xd6>
 8008818:	ebb7 0a06 	subs.w	sl, r7, r6
 800881c:	d00b      	beq.n	8008836 <_svfiprintf_r+0x76>
 800881e:	4653      	mov	r3, sl
 8008820:	4632      	mov	r2, r6
 8008822:	4621      	mov	r1, r4
 8008824:	4640      	mov	r0, r8
 8008826:	f7ff ff71 	bl	800870c <__ssputs_r>
 800882a:	3001      	adds	r0, #1
 800882c:	f000 80a4 	beq.w	8008978 <_svfiprintf_r+0x1b8>
 8008830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008832:	4453      	add	r3, sl
 8008834:	9309      	str	r3, [sp, #36]	; 0x24
 8008836:	783b      	ldrb	r3, [r7, #0]
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 809d 	beq.w	8008978 <_svfiprintf_r+0x1b8>
 800883e:	2300      	movs	r3, #0
 8008840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008844:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008848:	9304      	str	r3, [sp, #16]
 800884a:	9307      	str	r3, [sp, #28]
 800884c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008850:	931a      	str	r3, [sp, #104]	; 0x68
 8008852:	462f      	mov	r7, r5
 8008854:	2205      	movs	r2, #5
 8008856:	f817 1b01 	ldrb.w	r1, [r7], #1
 800885a:	4850      	ldr	r0, [pc, #320]	; (800899c <_svfiprintf_r+0x1dc>)
 800885c:	f7f7 fcc0 	bl	80001e0 <memchr>
 8008860:	9b04      	ldr	r3, [sp, #16]
 8008862:	b9d0      	cbnz	r0, 800889a <_svfiprintf_r+0xda>
 8008864:	06d9      	lsls	r1, r3, #27
 8008866:	bf44      	itt	mi
 8008868:	2220      	movmi	r2, #32
 800886a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800886e:	071a      	lsls	r2, r3, #28
 8008870:	bf44      	itt	mi
 8008872:	222b      	movmi	r2, #43	; 0x2b
 8008874:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008878:	782a      	ldrb	r2, [r5, #0]
 800887a:	2a2a      	cmp	r2, #42	; 0x2a
 800887c:	d015      	beq.n	80088aa <_svfiprintf_r+0xea>
 800887e:	9a07      	ldr	r2, [sp, #28]
 8008880:	462f      	mov	r7, r5
 8008882:	2000      	movs	r0, #0
 8008884:	250a      	movs	r5, #10
 8008886:	4639      	mov	r1, r7
 8008888:	f811 3b01 	ldrb.w	r3, [r1], #1
 800888c:	3b30      	subs	r3, #48	; 0x30
 800888e:	2b09      	cmp	r3, #9
 8008890:	d94d      	bls.n	800892e <_svfiprintf_r+0x16e>
 8008892:	b1b8      	cbz	r0, 80088c4 <_svfiprintf_r+0x104>
 8008894:	e00f      	b.n	80088b6 <_svfiprintf_r+0xf6>
 8008896:	462f      	mov	r7, r5
 8008898:	e7b8      	b.n	800880c <_svfiprintf_r+0x4c>
 800889a:	4a40      	ldr	r2, [pc, #256]	; (800899c <_svfiprintf_r+0x1dc>)
 800889c:	1a80      	subs	r0, r0, r2
 800889e:	fa0b f000 	lsl.w	r0, fp, r0
 80088a2:	4318      	orrs	r0, r3
 80088a4:	9004      	str	r0, [sp, #16]
 80088a6:	463d      	mov	r5, r7
 80088a8:	e7d3      	b.n	8008852 <_svfiprintf_r+0x92>
 80088aa:	9a03      	ldr	r2, [sp, #12]
 80088ac:	1d11      	adds	r1, r2, #4
 80088ae:	6812      	ldr	r2, [r2, #0]
 80088b0:	9103      	str	r1, [sp, #12]
 80088b2:	2a00      	cmp	r2, #0
 80088b4:	db01      	blt.n	80088ba <_svfiprintf_r+0xfa>
 80088b6:	9207      	str	r2, [sp, #28]
 80088b8:	e004      	b.n	80088c4 <_svfiprintf_r+0x104>
 80088ba:	4252      	negs	r2, r2
 80088bc:	f043 0302 	orr.w	r3, r3, #2
 80088c0:	9207      	str	r2, [sp, #28]
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	783b      	ldrb	r3, [r7, #0]
 80088c6:	2b2e      	cmp	r3, #46	; 0x2e
 80088c8:	d10c      	bne.n	80088e4 <_svfiprintf_r+0x124>
 80088ca:	787b      	ldrb	r3, [r7, #1]
 80088cc:	2b2a      	cmp	r3, #42	; 0x2a
 80088ce:	d133      	bne.n	8008938 <_svfiprintf_r+0x178>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	1d1a      	adds	r2, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	9203      	str	r2, [sp, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	bfb8      	it	lt
 80088dc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088e0:	3702      	adds	r7, #2
 80088e2:	9305      	str	r3, [sp, #20]
 80088e4:	4d2e      	ldr	r5, [pc, #184]	; (80089a0 <_svfiprintf_r+0x1e0>)
 80088e6:	7839      	ldrb	r1, [r7, #0]
 80088e8:	2203      	movs	r2, #3
 80088ea:	4628      	mov	r0, r5
 80088ec:	f7f7 fc78 	bl	80001e0 <memchr>
 80088f0:	b138      	cbz	r0, 8008902 <_svfiprintf_r+0x142>
 80088f2:	2340      	movs	r3, #64	; 0x40
 80088f4:	1b40      	subs	r0, r0, r5
 80088f6:	fa03 f000 	lsl.w	r0, r3, r0
 80088fa:	9b04      	ldr	r3, [sp, #16]
 80088fc:	4303      	orrs	r3, r0
 80088fe:	3701      	adds	r7, #1
 8008900:	9304      	str	r3, [sp, #16]
 8008902:	7839      	ldrb	r1, [r7, #0]
 8008904:	4827      	ldr	r0, [pc, #156]	; (80089a4 <_svfiprintf_r+0x1e4>)
 8008906:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800890a:	2206      	movs	r2, #6
 800890c:	1c7e      	adds	r6, r7, #1
 800890e:	f7f7 fc67 	bl	80001e0 <memchr>
 8008912:	2800      	cmp	r0, #0
 8008914:	d038      	beq.n	8008988 <_svfiprintf_r+0x1c8>
 8008916:	4b24      	ldr	r3, [pc, #144]	; (80089a8 <_svfiprintf_r+0x1e8>)
 8008918:	bb13      	cbnz	r3, 8008960 <_svfiprintf_r+0x1a0>
 800891a:	9b03      	ldr	r3, [sp, #12]
 800891c:	3307      	adds	r3, #7
 800891e:	f023 0307 	bic.w	r3, r3, #7
 8008922:	3308      	adds	r3, #8
 8008924:	9303      	str	r3, [sp, #12]
 8008926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008928:	444b      	add	r3, r9
 800892a:	9309      	str	r3, [sp, #36]	; 0x24
 800892c:	e76d      	b.n	800880a <_svfiprintf_r+0x4a>
 800892e:	fb05 3202 	mla	r2, r5, r2, r3
 8008932:	2001      	movs	r0, #1
 8008934:	460f      	mov	r7, r1
 8008936:	e7a6      	b.n	8008886 <_svfiprintf_r+0xc6>
 8008938:	2300      	movs	r3, #0
 800893a:	3701      	adds	r7, #1
 800893c:	9305      	str	r3, [sp, #20]
 800893e:	4619      	mov	r1, r3
 8008940:	250a      	movs	r5, #10
 8008942:	4638      	mov	r0, r7
 8008944:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008948:	3a30      	subs	r2, #48	; 0x30
 800894a:	2a09      	cmp	r2, #9
 800894c:	d903      	bls.n	8008956 <_svfiprintf_r+0x196>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0c8      	beq.n	80088e4 <_svfiprintf_r+0x124>
 8008952:	9105      	str	r1, [sp, #20]
 8008954:	e7c6      	b.n	80088e4 <_svfiprintf_r+0x124>
 8008956:	fb05 2101 	mla	r1, r5, r1, r2
 800895a:	2301      	movs	r3, #1
 800895c:	4607      	mov	r7, r0
 800895e:	e7f0      	b.n	8008942 <_svfiprintf_r+0x182>
 8008960:	ab03      	add	r3, sp, #12
 8008962:	9300      	str	r3, [sp, #0]
 8008964:	4622      	mov	r2, r4
 8008966:	4b11      	ldr	r3, [pc, #68]	; (80089ac <_svfiprintf_r+0x1ec>)
 8008968:	a904      	add	r1, sp, #16
 800896a:	4640      	mov	r0, r8
 800896c:	f3af 8000 	nop.w
 8008970:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008974:	4681      	mov	r9, r0
 8008976:	d1d6      	bne.n	8008926 <_svfiprintf_r+0x166>
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	065b      	lsls	r3, r3, #25
 800897c:	f53f af35 	bmi.w	80087ea <_svfiprintf_r+0x2a>
 8008980:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008982:	b01d      	add	sp, #116	; 0x74
 8008984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008988:	ab03      	add	r3, sp, #12
 800898a:	9300      	str	r3, [sp, #0]
 800898c:	4622      	mov	r2, r4
 800898e:	4b07      	ldr	r3, [pc, #28]	; (80089ac <_svfiprintf_r+0x1ec>)
 8008990:	a904      	add	r1, sp, #16
 8008992:	4640      	mov	r0, r8
 8008994:	f000 f882 	bl	8008a9c <_printf_i>
 8008998:	e7ea      	b.n	8008970 <_svfiprintf_r+0x1b0>
 800899a:	bf00      	nop
 800899c:	0800976d 	.word	0x0800976d
 80089a0:	08009773 	.word	0x08009773
 80089a4:	08009777 	.word	0x08009777
 80089a8:	00000000 	.word	0x00000000
 80089ac:	0800870d 	.word	0x0800870d

080089b0 <_printf_common>:
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	4691      	mov	r9, r2
 80089b6:	461f      	mov	r7, r3
 80089b8:	688a      	ldr	r2, [r1, #8]
 80089ba:	690b      	ldr	r3, [r1, #16]
 80089bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	bfb8      	it	lt
 80089c4:	4613      	movlt	r3, r2
 80089c6:	f8c9 3000 	str.w	r3, [r9]
 80089ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80089ce:	4606      	mov	r6, r0
 80089d0:	460c      	mov	r4, r1
 80089d2:	b112      	cbz	r2, 80089da <_printf_common+0x2a>
 80089d4:	3301      	adds	r3, #1
 80089d6:	f8c9 3000 	str.w	r3, [r9]
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	0699      	lsls	r1, r3, #26
 80089de:	bf42      	ittt	mi
 80089e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80089e4:	3302      	addmi	r3, #2
 80089e6:	f8c9 3000 	strmi.w	r3, [r9]
 80089ea:	6825      	ldr	r5, [r4, #0]
 80089ec:	f015 0506 	ands.w	r5, r5, #6
 80089f0:	d107      	bne.n	8008a02 <_printf_common+0x52>
 80089f2:	f104 0a19 	add.w	sl, r4, #25
 80089f6:	68e3      	ldr	r3, [r4, #12]
 80089f8:	f8d9 2000 	ldr.w	r2, [r9]
 80089fc:	1a9b      	subs	r3, r3, r2
 80089fe:	42ab      	cmp	r3, r5
 8008a00:	dc28      	bgt.n	8008a54 <_printf_common+0xa4>
 8008a02:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008a06:	6822      	ldr	r2, [r4, #0]
 8008a08:	3300      	adds	r3, #0
 8008a0a:	bf18      	it	ne
 8008a0c:	2301      	movne	r3, #1
 8008a0e:	0692      	lsls	r2, r2, #26
 8008a10:	d42d      	bmi.n	8008a6e <_printf_common+0xbe>
 8008a12:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008a16:	4639      	mov	r1, r7
 8008a18:	4630      	mov	r0, r6
 8008a1a:	47c0      	blx	r8
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d020      	beq.n	8008a62 <_printf_common+0xb2>
 8008a20:	6823      	ldr	r3, [r4, #0]
 8008a22:	68e5      	ldr	r5, [r4, #12]
 8008a24:	f8d9 2000 	ldr.w	r2, [r9]
 8008a28:	f003 0306 	and.w	r3, r3, #6
 8008a2c:	2b04      	cmp	r3, #4
 8008a2e:	bf08      	it	eq
 8008a30:	1aad      	subeq	r5, r5, r2
 8008a32:	68a3      	ldr	r3, [r4, #8]
 8008a34:	6922      	ldr	r2, [r4, #16]
 8008a36:	bf0c      	ite	eq
 8008a38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a3c:	2500      	movne	r5, #0
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	bfc4      	itt	gt
 8008a42:	1a9b      	subgt	r3, r3, r2
 8008a44:	18ed      	addgt	r5, r5, r3
 8008a46:	f04f 0900 	mov.w	r9, #0
 8008a4a:	341a      	adds	r4, #26
 8008a4c:	454d      	cmp	r5, r9
 8008a4e:	d11a      	bne.n	8008a86 <_printf_common+0xd6>
 8008a50:	2000      	movs	r0, #0
 8008a52:	e008      	b.n	8008a66 <_printf_common+0xb6>
 8008a54:	2301      	movs	r3, #1
 8008a56:	4652      	mov	r2, sl
 8008a58:	4639      	mov	r1, r7
 8008a5a:	4630      	mov	r0, r6
 8008a5c:	47c0      	blx	r8
 8008a5e:	3001      	adds	r0, #1
 8008a60:	d103      	bne.n	8008a6a <_printf_common+0xba>
 8008a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6a:	3501      	adds	r5, #1
 8008a6c:	e7c3      	b.n	80089f6 <_printf_common+0x46>
 8008a6e:	18e1      	adds	r1, r4, r3
 8008a70:	1c5a      	adds	r2, r3, #1
 8008a72:	2030      	movs	r0, #48	; 0x30
 8008a74:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008a78:	4422      	add	r2, r4
 8008a7a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008a7e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008a82:	3302      	adds	r3, #2
 8008a84:	e7c5      	b.n	8008a12 <_printf_common+0x62>
 8008a86:	2301      	movs	r3, #1
 8008a88:	4622      	mov	r2, r4
 8008a8a:	4639      	mov	r1, r7
 8008a8c:	4630      	mov	r0, r6
 8008a8e:	47c0      	blx	r8
 8008a90:	3001      	adds	r0, #1
 8008a92:	d0e6      	beq.n	8008a62 <_printf_common+0xb2>
 8008a94:	f109 0901 	add.w	r9, r9, #1
 8008a98:	e7d8      	b.n	8008a4c <_printf_common+0x9c>
	...

08008a9c <_printf_i>:
 8008a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008aa0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008aa4:	460c      	mov	r4, r1
 8008aa6:	7e09      	ldrb	r1, [r1, #24]
 8008aa8:	b085      	sub	sp, #20
 8008aaa:	296e      	cmp	r1, #110	; 0x6e
 8008aac:	4617      	mov	r7, r2
 8008aae:	4606      	mov	r6, r0
 8008ab0:	4698      	mov	r8, r3
 8008ab2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ab4:	f000 80b3 	beq.w	8008c1e <_printf_i+0x182>
 8008ab8:	d822      	bhi.n	8008b00 <_printf_i+0x64>
 8008aba:	2963      	cmp	r1, #99	; 0x63
 8008abc:	d036      	beq.n	8008b2c <_printf_i+0x90>
 8008abe:	d80a      	bhi.n	8008ad6 <_printf_i+0x3a>
 8008ac0:	2900      	cmp	r1, #0
 8008ac2:	f000 80b9 	beq.w	8008c38 <_printf_i+0x19c>
 8008ac6:	2958      	cmp	r1, #88	; 0x58
 8008ac8:	f000 8083 	beq.w	8008bd2 <_printf_i+0x136>
 8008acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ad0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008ad4:	e032      	b.n	8008b3c <_printf_i+0xa0>
 8008ad6:	2964      	cmp	r1, #100	; 0x64
 8008ad8:	d001      	beq.n	8008ade <_printf_i+0x42>
 8008ada:	2969      	cmp	r1, #105	; 0x69
 8008adc:	d1f6      	bne.n	8008acc <_printf_i+0x30>
 8008ade:	6820      	ldr	r0, [r4, #0]
 8008ae0:	6813      	ldr	r3, [r2, #0]
 8008ae2:	0605      	lsls	r5, r0, #24
 8008ae4:	f103 0104 	add.w	r1, r3, #4
 8008ae8:	d52a      	bpl.n	8008b40 <_printf_i+0xa4>
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	6011      	str	r1, [r2, #0]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	da03      	bge.n	8008afa <_printf_i+0x5e>
 8008af2:	222d      	movs	r2, #45	; 0x2d
 8008af4:	425b      	negs	r3, r3
 8008af6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008afa:	486f      	ldr	r0, [pc, #444]	; (8008cb8 <_printf_i+0x21c>)
 8008afc:	220a      	movs	r2, #10
 8008afe:	e039      	b.n	8008b74 <_printf_i+0xd8>
 8008b00:	2973      	cmp	r1, #115	; 0x73
 8008b02:	f000 809d 	beq.w	8008c40 <_printf_i+0x1a4>
 8008b06:	d808      	bhi.n	8008b1a <_printf_i+0x7e>
 8008b08:	296f      	cmp	r1, #111	; 0x6f
 8008b0a:	d020      	beq.n	8008b4e <_printf_i+0xb2>
 8008b0c:	2970      	cmp	r1, #112	; 0x70
 8008b0e:	d1dd      	bne.n	8008acc <_printf_i+0x30>
 8008b10:	6823      	ldr	r3, [r4, #0]
 8008b12:	f043 0320 	orr.w	r3, r3, #32
 8008b16:	6023      	str	r3, [r4, #0]
 8008b18:	e003      	b.n	8008b22 <_printf_i+0x86>
 8008b1a:	2975      	cmp	r1, #117	; 0x75
 8008b1c:	d017      	beq.n	8008b4e <_printf_i+0xb2>
 8008b1e:	2978      	cmp	r1, #120	; 0x78
 8008b20:	d1d4      	bne.n	8008acc <_printf_i+0x30>
 8008b22:	2378      	movs	r3, #120	; 0x78
 8008b24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008b28:	4864      	ldr	r0, [pc, #400]	; (8008cbc <_printf_i+0x220>)
 8008b2a:	e055      	b.n	8008bd8 <_printf_i+0x13c>
 8008b2c:	6813      	ldr	r3, [r2, #0]
 8008b2e:	1d19      	adds	r1, r3, #4
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	6011      	str	r1, [r2, #0]
 8008b34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e08c      	b.n	8008c5a <_printf_i+0x1be>
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	6011      	str	r1, [r2, #0]
 8008b44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008b48:	bf18      	it	ne
 8008b4a:	b21b      	sxthne	r3, r3
 8008b4c:	e7cf      	b.n	8008aee <_printf_i+0x52>
 8008b4e:	6813      	ldr	r3, [r2, #0]
 8008b50:	6825      	ldr	r5, [r4, #0]
 8008b52:	1d18      	adds	r0, r3, #4
 8008b54:	6010      	str	r0, [r2, #0]
 8008b56:	0628      	lsls	r0, r5, #24
 8008b58:	d501      	bpl.n	8008b5e <_printf_i+0xc2>
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	e002      	b.n	8008b64 <_printf_i+0xc8>
 8008b5e:	0668      	lsls	r0, r5, #25
 8008b60:	d5fb      	bpl.n	8008b5a <_printf_i+0xbe>
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	4854      	ldr	r0, [pc, #336]	; (8008cb8 <_printf_i+0x21c>)
 8008b66:	296f      	cmp	r1, #111	; 0x6f
 8008b68:	bf14      	ite	ne
 8008b6a:	220a      	movne	r2, #10
 8008b6c:	2208      	moveq	r2, #8
 8008b6e:	2100      	movs	r1, #0
 8008b70:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008b74:	6865      	ldr	r5, [r4, #4]
 8008b76:	60a5      	str	r5, [r4, #8]
 8008b78:	2d00      	cmp	r5, #0
 8008b7a:	f2c0 8095 	blt.w	8008ca8 <_printf_i+0x20c>
 8008b7e:	6821      	ldr	r1, [r4, #0]
 8008b80:	f021 0104 	bic.w	r1, r1, #4
 8008b84:	6021      	str	r1, [r4, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d13d      	bne.n	8008c06 <_printf_i+0x16a>
 8008b8a:	2d00      	cmp	r5, #0
 8008b8c:	f040 808e 	bne.w	8008cac <_printf_i+0x210>
 8008b90:	4665      	mov	r5, ip
 8008b92:	2a08      	cmp	r2, #8
 8008b94:	d10b      	bne.n	8008bae <_printf_i+0x112>
 8008b96:	6823      	ldr	r3, [r4, #0]
 8008b98:	07db      	lsls	r3, r3, #31
 8008b9a:	d508      	bpl.n	8008bae <_printf_i+0x112>
 8008b9c:	6923      	ldr	r3, [r4, #16]
 8008b9e:	6862      	ldr	r2, [r4, #4]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	bfde      	ittt	le
 8008ba4:	2330      	movle	r3, #48	; 0x30
 8008ba6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008baa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008bae:	ebac 0305 	sub.w	r3, ip, r5
 8008bb2:	6123      	str	r3, [r4, #16]
 8008bb4:	f8cd 8000 	str.w	r8, [sp]
 8008bb8:	463b      	mov	r3, r7
 8008bba:	aa03      	add	r2, sp, #12
 8008bbc:	4621      	mov	r1, r4
 8008bbe:	4630      	mov	r0, r6
 8008bc0:	f7ff fef6 	bl	80089b0 <_printf_common>
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d14d      	bne.n	8008c64 <_printf_i+0x1c8>
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bcc:	b005      	add	sp, #20
 8008bce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008bd2:	4839      	ldr	r0, [pc, #228]	; (8008cb8 <_printf_i+0x21c>)
 8008bd4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008bd8:	6813      	ldr	r3, [r2, #0]
 8008bda:	6821      	ldr	r1, [r4, #0]
 8008bdc:	1d1d      	adds	r5, r3, #4
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6015      	str	r5, [r2, #0]
 8008be2:	060a      	lsls	r2, r1, #24
 8008be4:	d50b      	bpl.n	8008bfe <_printf_i+0x162>
 8008be6:	07ca      	lsls	r2, r1, #31
 8008be8:	bf44      	itt	mi
 8008bea:	f041 0120 	orrmi.w	r1, r1, #32
 8008bee:	6021      	strmi	r1, [r4, #0]
 8008bf0:	b91b      	cbnz	r3, 8008bfa <_printf_i+0x15e>
 8008bf2:	6822      	ldr	r2, [r4, #0]
 8008bf4:	f022 0220 	bic.w	r2, r2, #32
 8008bf8:	6022      	str	r2, [r4, #0]
 8008bfa:	2210      	movs	r2, #16
 8008bfc:	e7b7      	b.n	8008b6e <_printf_i+0xd2>
 8008bfe:	064d      	lsls	r5, r1, #25
 8008c00:	bf48      	it	mi
 8008c02:	b29b      	uxthmi	r3, r3
 8008c04:	e7ef      	b.n	8008be6 <_printf_i+0x14a>
 8008c06:	4665      	mov	r5, ip
 8008c08:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c0c:	fb02 3311 	mls	r3, r2, r1, r3
 8008c10:	5cc3      	ldrb	r3, [r0, r3]
 8008c12:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008c16:	460b      	mov	r3, r1
 8008c18:	2900      	cmp	r1, #0
 8008c1a:	d1f5      	bne.n	8008c08 <_printf_i+0x16c>
 8008c1c:	e7b9      	b.n	8008b92 <_printf_i+0xf6>
 8008c1e:	6813      	ldr	r3, [r2, #0]
 8008c20:	6825      	ldr	r5, [r4, #0]
 8008c22:	6961      	ldr	r1, [r4, #20]
 8008c24:	1d18      	adds	r0, r3, #4
 8008c26:	6010      	str	r0, [r2, #0]
 8008c28:	0628      	lsls	r0, r5, #24
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	d501      	bpl.n	8008c32 <_printf_i+0x196>
 8008c2e:	6019      	str	r1, [r3, #0]
 8008c30:	e002      	b.n	8008c38 <_printf_i+0x19c>
 8008c32:	066a      	lsls	r2, r5, #25
 8008c34:	d5fb      	bpl.n	8008c2e <_printf_i+0x192>
 8008c36:	8019      	strh	r1, [r3, #0]
 8008c38:	2300      	movs	r3, #0
 8008c3a:	6123      	str	r3, [r4, #16]
 8008c3c:	4665      	mov	r5, ip
 8008c3e:	e7b9      	b.n	8008bb4 <_printf_i+0x118>
 8008c40:	6813      	ldr	r3, [r2, #0]
 8008c42:	1d19      	adds	r1, r3, #4
 8008c44:	6011      	str	r1, [r2, #0]
 8008c46:	681d      	ldr	r5, [r3, #0]
 8008c48:	6862      	ldr	r2, [r4, #4]
 8008c4a:	2100      	movs	r1, #0
 8008c4c:	4628      	mov	r0, r5
 8008c4e:	f7f7 fac7 	bl	80001e0 <memchr>
 8008c52:	b108      	cbz	r0, 8008c58 <_printf_i+0x1bc>
 8008c54:	1b40      	subs	r0, r0, r5
 8008c56:	6060      	str	r0, [r4, #4]
 8008c58:	6863      	ldr	r3, [r4, #4]
 8008c5a:	6123      	str	r3, [r4, #16]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c62:	e7a7      	b.n	8008bb4 <_printf_i+0x118>
 8008c64:	6923      	ldr	r3, [r4, #16]
 8008c66:	462a      	mov	r2, r5
 8008c68:	4639      	mov	r1, r7
 8008c6a:	4630      	mov	r0, r6
 8008c6c:	47c0      	blx	r8
 8008c6e:	3001      	adds	r0, #1
 8008c70:	d0aa      	beq.n	8008bc8 <_printf_i+0x12c>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	079b      	lsls	r3, r3, #30
 8008c76:	d413      	bmi.n	8008ca0 <_printf_i+0x204>
 8008c78:	68e0      	ldr	r0, [r4, #12]
 8008c7a:	9b03      	ldr	r3, [sp, #12]
 8008c7c:	4298      	cmp	r0, r3
 8008c7e:	bfb8      	it	lt
 8008c80:	4618      	movlt	r0, r3
 8008c82:	e7a3      	b.n	8008bcc <_printf_i+0x130>
 8008c84:	2301      	movs	r3, #1
 8008c86:	464a      	mov	r2, r9
 8008c88:	4639      	mov	r1, r7
 8008c8a:	4630      	mov	r0, r6
 8008c8c:	47c0      	blx	r8
 8008c8e:	3001      	adds	r0, #1
 8008c90:	d09a      	beq.n	8008bc8 <_printf_i+0x12c>
 8008c92:	3501      	adds	r5, #1
 8008c94:	68e3      	ldr	r3, [r4, #12]
 8008c96:	9a03      	ldr	r2, [sp, #12]
 8008c98:	1a9b      	subs	r3, r3, r2
 8008c9a:	42ab      	cmp	r3, r5
 8008c9c:	dcf2      	bgt.n	8008c84 <_printf_i+0x1e8>
 8008c9e:	e7eb      	b.n	8008c78 <_printf_i+0x1dc>
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	f104 0919 	add.w	r9, r4, #25
 8008ca6:	e7f5      	b.n	8008c94 <_printf_i+0x1f8>
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1ac      	bne.n	8008c06 <_printf_i+0x16a>
 8008cac:	7803      	ldrb	r3, [r0, #0]
 8008cae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008cb2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008cb6:	e76c      	b.n	8008b92 <_printf_i+0xf6>
 8008cb8:	0800977e 	.word	0x0800977e
 8008cbc:	0800978f 	.word	0x0800978f

08008cc0 <memcpy>:
 8008cc0:	b510      	push	{r4, lr}
 8008cc2:	1e43      	subs	r3, r0, #1
 8008cc4:	440a      	add	r2, r1
 8008cc6:	4291      	cmp	r1, r2
 8008cc8:	d100      	bne.n	8008ccc <memcpy+0xc>
 8008cca:	bd10      	pop	{r4, pc}
 8008ccc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cd4:	e7f7      	b.n	8008cc6 <memcpy+0x6>

08008cd6 <memmove>:
 8008cd6:	4288      	cmp	r0, r1
 8008cd8:	b510      	push	{r4, lr}
 8008cda:	eb01 0302 	add.w	r3, r1, r2
 8008cde:	d807      	bhi.n	8008cf0 <memmove+0x1a>
 8008ce0:	1e42      	subs	r2, r0, #1
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	d00a      	beq.n	8008cfc <memmove+0x26>
 8008ce6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cea:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008cee:	e7f8      	b.n	8008ce2 <memmove+0xc>
 8008cf0:	4283      	cmp	r3, r0
 8008cf2:	d9f5      	bls.n	8008ce0 <memmove+0xa>
 8008cf4:	1881      	adds	r1, r0, r2
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	42d3      	cmn	r3, r2
 8008cfa:	d100      	bne.n	8008cfe <memmove+0x28>
 8008cfc:	bd10      	pop	{r4, pc}
 8008cfe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d02:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8008d06:	e7f7      	b.n	8008cf8 <memmove+0x22>

08008d08 <_free_r>:
 8008d08:	b538      	push	{r3, r4, r5, lr}
 8008d0a:	4605      	mov	r5, r0
 8008d0c:	2900      	cmp	r1, #0
 8008d0e:	d045      	beq.n	8008d9c <_free_r+0x94>
 8008d10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d14:	1f0c      	subs	r4, r1, #4
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	bfb8      	it	lt
 8008d1a:	18e4      	addlt	r4, r4, r3
 8008d1c:	f000 f8d2 	bl	8008ec4 <__malloc_lock>
 8008d20:	4a1f      	ldr	r2, [pc, #124]	; (8008da0 <_free_r+0x98>)
 8008d22:	6813      	ldr	r3, [r2, #0]
 8008d24:	4610      	mov	r0, r2
 8008d26:	b933      	cbnz	r3, 8008d36 <_free_r+0x2e>
 8008d28:	6063      	str	r3, [r4, #4]
 8008d2a:	6014      	str	r4, [r2, #0]
 8008d2c:	4628      	mov	r0, r5
 8008d2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d32:	f000 b8c8 	b.w	8008ec6 <__malloc_unlock>
 8008d36:	42a3      	cmp	r3, r4
 8008d38:	d90c      	bls.n	8008d54 <_free_r+0x4c>
 8008d3a:	6821      	ldr	r1, [r4, #0]
 8008d3c:	1862      	adds	r2, r4, r1
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	bf04      	itt	eq
 8008d42:	681a      	ldreq	r2, [r3, #0]
 8008d44:	685b      	ldreq	r3, [r3, #4]
 8008d46:	6063      	str	r3, [r4, #4]
 8008d48:	bf04      	itt	eq
 8008d4a:	1852      	addeq	r2, r2, r1
 8008d4c:	6022      	streq	r2, [r4, #0]
 8008d4e:	6004      	str	r4, [r0, #0]
 8008d50:	e7ec      	b.n	8008d2c <_free_r+0x24>
 8008d52:	4613      	mov	r3, r2
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	b10a      	cbz	r2, 8008d5c <_free_r+0x54>
 8008d58:	42a2      	cmp	r2, r4
 8008d5a:	d9fa      	bls.n	8008d52 <_free_r+0x4a>
 8008d5c:	6819      	ldr	r1, [r3, #0]
 8008d5e:	1858      	adds	r0, r3, r1
 8008d60:	42a0      	cmp	r0, r4
 8008d62:	d10b      	bne.n	8008d7c <_free_r+0x74>
 8008d64:	6820      	ldr	r0, [r4, #0]
 8008d66:	4401      	add	r1, r0
 8008d68:	1858      	adds	r0, r3, r1
 8008d6a:	4282      	cmp	r2, r0
 8008d6c:	6019      	str	r1, [r3, #0]
 8008d6e:	d1dd      	bne.n	8008d2c <_free_r+0x24>
 8008d70:	6810      	ldr	r0, [r2, #0]
 8008d72:	6852      	ldr	r2, [r2, #4]
 8008d74:	605a      	str	r2, [r3, #4]
 8008d76:	4401      	add	r1, r0
 8008d78:	6019      	str	r1, [r3, #0]
 8008d7a:	e7d7      	b.n	8008d2c <_free_r+0x24>
 8008d7c:	d902      	bls.n	8008d84 <_free_r+0x7c>
 8008d7e:	230c      	movs	r3, #12
 8008d80:	602b      	str	r3, [r5, #0]
 8008d82:	e7d3      	b.n	8008d2c <_free_r+0x24>
 8008d84:	6820      	ldr	r0, [r4, #0]
 8008d86:	1821      	adds	r1, r4, r0
 8008d88:	428a      	cmp	r2, r1
 8008d8a:	bf04      	itt	eq
 8008d8c:	6811      	ldreq	r1, [r2, #0]
 8008d8e:	6852      	ldreq	r2, [r2, #4]
 8008d90:	6062      	str	r2, [r4, #4]
 8008d92:	bf04      	itt	eq
 8008d94:	1809      	addeq	r1, r1, r0
 8008d96:	6021      	streq	r1, [r4, #0]
 8008d98:	605c      	str	r4, [r3, #4]
 8008d9a:	e7c7      	b.n	8008d2c <_free_r+0x24>
 8008d9c:	bd38      	pop	{r3, r4, r5, pc}
 8008d9e:	bf00      	nop
 8008da0:	20000090 	.word	0x20000090

08008da4 <_malloc_r>:
 8008da4:	b570      	push	{r4, r5, r6, lr}
 8008da6:	1ccd      	adds	r5, r1, #3
 8008da8:	f025 0503 	bic.w	r5, r5, #3
 8008dac:	3508      	adds	r5, #8
 8008dae:	2d0c      	cmp	r5, #12
 8008db0:	bf38      	it	cc
 8008db2:	250c      	movcc	r5, #12
 8008db4:	2d00      	cmp	r5, #0
 8008db6:	4606      	mov	r6, r0
 8008db8:	db01      	blt.n	8008dbe <_malloc_r+0x1a>
 8008dba:	42a9      	cmp	r1, r5
 8008dbc:	d903      	bls.n	8008dc6 <_malloc_r+0x22>
 8008dbe:	230c      	movs	r3, #12
 8008dc0:	6033      	str	r3, [r6, #0]
 8008dc2:	2000      	movs	r0, #0
 8008dc4:	bd70      	pop	{r4, r5, r6, pc}
 8008dc6:	f000 f87d 	bl	8008ec4 <__malloc_lock>
 8008dca:	4a21      	ldr	r2, [pc, #132]	; (8008e50 <_malloc_r+0xac>)
 8008dcc:	6814      	ldr	r4, [r2, #0]
 8008dce:	4621      	mov	r1, r4
 8008dd0:	b991      	cbnz	r1, 8008df8 <_malloc_r+0x54>
 8008dd2:	4c20      	ldr	r4, [pc, #128]	; (8008e54 <_malloc_r+0xb0>)
 8008dd4:	6823      	ldr	r3, [r4, #0]
 8008dd6:	b91b      	cbnz	r3, 8008de0 <_malloc_r+0x3c>
 8008dd8:	4630      	mov	r0, r6
 8008dda:	f000 f863 	bl	8008ea4 <_sbrk_r>
 8008dde:	6020      	str	r0, [r4, #0]
 8008de0:	4629      	mov	r1, r5
 8008de2:	4630      	mov	r0, r6
 8008de4:	f000 f85e 	bl	8008ea4 <_sbrk_r>
 8008de8:	1c43      	adds	r3, r0, #1
 8008dea:	d124      	bne.n	8008e36 <_malloc_r+0x92>
 8008dec:	230c      	movs	r3, #12
 8008dee:	6033      	str	r3, [r6, #0]
 8008df0:	4630      	mov	r0, r6
 8008df2:	f000 f868 	bl	8008ec6 <__malloc_unlock>
 8008df6:	e7e4      	b.n	8008dc2 <_malloc_r+0x1e>
 8008df8:	680b      	ldr	r3, [r1, #0]
 8008dfa:	1b5b      	subs	r3, r3, r5
 8008dfc:	d418      	bmi.n	8008e30 <_malloc_r+0x8c>
 8008dfe:	2b0b      	cmp	r3, #11
 8008e00:	d90f      	bls.n	8008e22 <_malloc_r+0x7e>
 8008e02:	600b      	str	r3, [r1, #0]
 8008e04:	50cd      	str	r5, [r1, r3]
 8008e06:	18cc      	adds	r4, r1, r3
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f000 f85c 	bl	8008ec6 <__malloc_unlock>
 8008e0e:	f104 000b 	add.w	r0, r4, #11
 8008e12:	1d23      	adds	r3, r4, #4
 8008e14:	f020 0007 	bic.w	r0, r0, #7
 8008e18:	1ac3      	subs	r3, r0, r3
 8008e1a:	d0d3      	beq.n	8008dc4 <_malloc_r+0x20>
 8008e1c:	425a      	negs	r2, r3
 8008e1e:	50e2      	str	r2, [r4, r3]
 8008e20:	e7d0      	b.n	8008dc4 <_malloc_r+0x20>
 8008e22:	428c      	cmp	r4, r1
 8008e24:	684b      	ldr	r3, [r1, #4]
 8008e26:	bf16      	itet	ne
 8008e28:	6063      	strne	r3, [r4, #4]
 8008e2a:	6013      	streq	r3, [r2, #0]
 8008e2c:	460c      	movne	r4, r1
 8008e2e:	e7eb      	b.n	8008e08 <_malloc_r+0x64>
 8008e30:	460c      	mov	r4, r1
 8008e32:	6849      	ldr	r1, [r1, #4]
 8008e34:	e7cc      	b.n	8008dd0 <_malloc_r+0x2c>
 8008e36:	1cc4      	adds	r4, r0, #3
 8008e38:	f024 0403 	bic.w	r4, r4, #3
 8008e3c:	42a0      	cmp	r0, r4
 8008e3e:	d005      	beq.n	8008e4c <_malloc_r+0xa8>
 8008e40:	1a21      	subs	r1, r4, r0
 8008e42:	4630      	mov	r0, r6
 8008e44:	f000 f82e 	bl	8008ea4 <_sbrk_r>
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d0cf      	beq.n	8008dec <_malloc_r+0x48>
 8008e4c:	6025      	str	r5, [r4, #0]
 8008e4e:	e7db      	b.n	8008e08 <_malloc_r+0x64>
 8008e50:	20000090 	.word	0x20000090
 8008e54:	20000094 	.word	0x20000094

08008e58 <_realloc_r>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	4614      	mov	r4, r2
 8008e5e:	460e      	mov	r6, r1
 8008e60:	b921      	cbnz	r1, 8008e6c <_realloc_r+0x14>
 8008e62:	4611      	mov	r1, r2
 8008e64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008e68:	f7ff bf9c 	b.w	8008da4 <_malloc_r>
 8008e6c:	b922      	cbnz	r2, 8008e78 <_realloc_r+0x20>
 8008e6e:	f7ff ff4b 	bl	8008d08 <_free_r>
 8008e72:	4625      	mov	r5, r4
 8008e74:	4628      	mov	r0, r5
 8008e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e78:	f000 f826 	bl	8008ec8 <_malloc_usable_size_r>
 8008e7c:	42a0      	cmp	r0, r4
 8008e7e:	d20f      	bcs.n	8008ea0 <_realloc_r+0x48>
 8008e80:	4621      	mov	r1, r4
 8008e82:	4638      	mov	r0, r7
 8008e84:	f7ff ff8e 	bl	8008da4 <_malloc_r>
 8008e88:	4605      	mov	r5, r0
 8008e8a:	2800      	cmp	r0, #0
 8008e8c:	d0f2      	beq.n	8008e74 <_realloc_r+0x1c>
 8008e8e:	4631      	mov	r1, r6
 8008e90:	4622      	mov	r2, r4
 8008e92:	f7ff ff15 	bl	8008cc0 <memcpy>
 8008e96:	4631      	mov	r1, r6
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff ff35 	bl	8008d08 <_free_r>
 8008e9e:	e7e9      	b.n	8008e74 <_realloc_r+0x1c>
 8008ea0:	4635      	mov	r5, r6
 8008ea2:	e7e7      	b.n	8008e74 <_realloc_r+0x1c>

08008ea4 <_sbrk_r>:
 8008ea4:	b538      	push	{r3, r4, r5, lr}
 8008ea6:	4c06      	ldr	r4, [pc, #24]	; (8008ec0 <_sbrk_r+0x1c>)
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	4605      	mov	r5, r0
 8008eac:	4608      	mov	r0, r1
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	f7ff fb06 	bl	80084c0 <_sbrk>
 8008eb4:	1c43      	adds	r3, r0, #1
 8008eb6:	d102      	bne.n	8008ebe <_sbrk_r+0x1a>
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	b103      	cbz	r3, 8008ebe <_sbrk_r+0x1a>
 8008ebc:	602b      	str	r3, [r5, #0]
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	20000398 	.word	0x20000398

08008ec4 <__malloc_lock>:
 8008ec4:	4770      	bx	lr

08008ec6 <__malloc_unlock>:
 8008ec6:	4770      	bx	lr

08008ec8 <_malloc_usable_size_r>:
 8008ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ecc:	1f18      	subs	r0, r3, #4
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	bfbc      	itt	lt
 8008ed2:	580b      	ldrlt	r3, [r1, r0]
 8008ed4:	18c0      	addlt	r0, r0, r3
 8008ed6:	4770      	bx	lr

08008ed8 <_init>:
 8008ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eda:	bf00      	nop
 8008edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ede:	bc08      	pop	{r3}
 8008ee0:	469e      	mov	lr, r3
 8008ee2:	4770      	bx	lr

08008ee4 <_fini>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	bf00      	nop
 8008ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008eea:	bc08      	pop	{r3}
 8008eec:	469e      	mov	lr, r3
 8008eee:	4770      	bx	lr
