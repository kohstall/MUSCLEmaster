
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010afc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08010c90  08010c90  00020c90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113b0  080113b0  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  080113b0  080113b0  000213b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113b8  080113b8  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113b8  080113b8  000213b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080113bc  080113bc  000213bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  080113c0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001338  20000210  080115d0  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001548  080115d0  00031548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a279  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e85  00000000  00000000  0004a4b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a0  00000000  00000000  0004d340  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001770  00000000  00000000  0004ebe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235fc  00000000  00000000  00050350  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000126d4  00000000  00000000  0007394c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3894  00000000  00000000  00086020  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001598b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000077fc  00000000  00000000  00159930  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010c74 	.word	0x08010c74

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	08010c74 	.word	0x08010c74

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f001 ff71 	bl	8002e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f00b fcfe 	bl	800c9bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 ff89 	bl	8002f02 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f001 ff51 	bl	8002eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000038 	.word	0x20000038
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	20000294 	.word	0x20000294

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	20000294 	.word	0x20000294

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f00b fc9c 	bl	800ca0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fb80 	bl	8001808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b02      	cmp	r3, #2
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b20      	cmp	r3, #32
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d049      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d046      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d12b      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d127      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d119      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0220 	bic.w	r2, r2, #32
 80011d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f00a fd05 	bl	800bc0c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f06f 0212 	mvn.w	r2, #18
 800120a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122c:	2b80      	cmp	r3, #128	; 0x80
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d057      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d054      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d139      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001270:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001282:	2b00      	cmp	r3, #0
 8001284:	d12b      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d124      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11d      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d119      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fd06 	bl	8001cf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f06f 020c 	mvn.w	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d017      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d014      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f92b 	bl	800159c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0201 	mvn.w	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	2b20      	cmp	r3, #32
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 0220 	mvn.w	r2, #32
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f905 	bl	80015b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f06f 0220 	mvn.w	r2, #32
 80013ae:	601a      	str	r2, [r3, #0]
  }
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Start_DMA+0x1e>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e0cc      	b.n	8001570 <HAL_ADC_Start_DMA+0x1b8>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d018      	beq.n	800141e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013fc:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_ADC_Start_DMA+0x1c0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HAL_ADC_Start_DMA+0x1c4>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9a      	lsrs	r2, r3, #18
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3b01      	subs	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 80a0 	bne.w	800156e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001458:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146c:	d106      	bne.n	800147c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f023 0206 	bic.w	r2, r3, #6
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
 800147a:	e002      	b.n	8001482 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 800148c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	4a3c      	ldr	r2, [pc, #240]	; (8001584 <HAL_ADC_Start_DMA+0x1cc>)
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_ADC_Start_DMA+0x1d0>)
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_ADC_Start_DMA+0x1d4>)
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	334c      	adds	r3, #76	; 0x4c
 80014da:	4619      	mov	r1, r3
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f001 fdca 	bl	8003078 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12a      	bne.n	8001546 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_ADC_Start_DMA+0x1d8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d015      	beq.n	8001526 <HAL_ADC_Start_DMA+0x16e>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_ADC_Start_DMA+0x1dc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d105      	bne.n	8001510 <HAL_ADC_Start_DMA+0x158>
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_ADC_Start_DMA+0x1e0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d129      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d823      	bhi.n	800156e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d11c      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e013      	b.n	800156e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_ADC_Start_DMA+0x1d8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d10e      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d107      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800156c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000038 	.word	0x20000038
 800157c:	431bde83 	.word	0x431bde83
 8001580:	40012300 	.word	0x40012300
 8001584:	08001a01 	.word	0x08001a01
 8001588:	08001abb 	.word	0x08001abb
 800158c:	08001ad7 	.word	0x08001ad7
 8001590:	40012000 	.word	0x40012000
 8001594:	40012100 	.word	0x40012100
 8001598:	40012200 	.word	0x40012200

0800159c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1c>
 80015dc:	2302      	movs	r3, #2
 80015de:	e105      	b.n	80017ec <HAL_ADC_ConfigChannel+0x228>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	d925      	bls.n	800163c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68d9      	ldr	r1, [r3, #12]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	3b1e      	subs	r3, #30
 8001606:	2207      	movs	r2, #7
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68d9      	ldr	r1, [r3, #12]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	4603      	mov	r3, r0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4403      	add	r3, r0
 800162e:	3b1e      	subs	r3, #30
 8001630:	409a      	lsls	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	e022      	b.n	8001682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6919      	ldr	r1, [r3, #16]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	2207      	movs	r2, #7
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	400a      	ands	r2, r1
 800165e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6919      	ldr	r1, [r3, #16]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	4603      	mov	r3, r0
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4403      	add	r3, r0
 8001678:	409a      	lsls	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b06      	cmp	r3, #6
 8001688:	d824      	bhi.n	80016d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3b05      	subs	r3, #5
 800169c:	221f      	movs	r2, #31
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b05      	subs	r3, #5
 80016c6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
 80016d2:	e04c      	b.n	800176e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d824      	bhi.n	8001726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b23      	subs	r3, #35	; 0x23
 80016ee:	221f      	movs	r2, #31
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b23      	subs	r3, #35	; 0x23
 8001718:	fa00 f203 	lsl.w	r2, r0, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
 8001724:	e023      	b.n	800176e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3b41      	subs	r3, #65	; 0x41
 8001738:	221f      	movs	r2, #31
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b41      	subs	r3, #65	; 0x41
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_ADC_ConfigChannel+0x234>)
 8001770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_ADC_ConfigChannel+0x238>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d109      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1cc>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b12      	cmp	r3, #18
 8001782:	d105      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_ADC_ConfigChannel+0x238>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d123      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d003      	beq.n	80017aa <HAL_ADC_ConfigChannel+0x1e6>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b11      	cmp	r3, #17
 80017a8:	d11b      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d111      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_ADC_ConfigChannel+0x23c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_ADC_ConfigChannel+0x240>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9a      	lsrs	r2, r3, #18
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40012300 	.word	0x40012300
 80017fc:	40012000 	.word	0x40012000
 8001800:	20000038 	.word	0x20000038
 8001804:	431bde83 	.word	0x431bde83

08001808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <ADC_Init+0x1f0>)
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <ADC_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00f      	b.n	8001906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	035a      	lsls	r2, r3, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e007      	b.n	800197c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	051a      	lsls	r2, r3, #20
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019be:	025a      	lsls	r2, r3, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	029a      	lsls	r2, r3, #10
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13c      	bne.n	8001a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12b      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d127      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d119      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0220 	bic.w	r2, r2, #32
 8001a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f00a f8bd 	bl	800bc0c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a92:	e00e      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7ff fd85 	bl	80015b0 <HAL_ADC_ErrorCallback>
}
 8001aa6:	e004      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f00a f88f 	bl	800bbec <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff fd5a 	bl	80015b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADCEx_InjectedStart+0x22>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e09d      	b.n	8001c62 <HAL_ADCEx_InjectedStart+0x15e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d018      	beq.n	8001b6e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_ADCEx_InjectedStart+0x170>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0c9a      	lsrs	r2, r3, #18
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b60:	e002      	b.n	8001b68 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f9      	bne.n	8001b62 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d171      	bne.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f06f 0204 	mvn.w	r2, #4
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_ADCEx_InjectedStart+0x174>)
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d124      	bne.n	8001c0e <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d034      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d031      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e028      	b.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <HAL_ADCEx_InjectedStart+0x178>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d10d      	bne.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c5e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000038 	.word	0x20000038
 8001c74:	431bde83 	.word	0x431bde83
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	40012000 	.word	0x40012000

08001c80 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0204 	mvn.w	r2, #4
 8001c96:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d81f      	bhi.n	8001ce0 <HAL_ADCEx_InjectedGetValue+0x60>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cd7 	.word	0x08001cd7
 8001cac:	08001ccd 	.word	0x08001ccd
 8001cb0:	08001cc3 	.word	0x08001cc3
 8001cb4:	08001cb9 	.word	0x08001cb9
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cc0:	e00f      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cca:	e00a      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cd4:	e005      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cde:	e000      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001ce0:	bf00      	nop
  }
  return tmp;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e17a      	b.n	8002012 <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d925      	bls.n	8001d78 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68d9      	ldr	r1, [r3, #12]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4403      	add	r3, r0
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	e022      	b.n	8001dbe <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6919      	ldr	r1, [r3, #16]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4403      	add	r3, r0
 8001db4:	409a      	lsls	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	051a      	lsls	r2, r3, #20
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3303      	adds	r3, #3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	221f      	movs	r2, #31
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	400a      	ands	r2, r1
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3303      	adds	r3, #3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a73      	ldr	r2, [pc, #460]	; (8002020 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d022      	beq.n	8001e9c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	e00f      	b.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001eaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001eba:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	7d5b      	ldrb	r3, [r3, #21]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	e007      	b.n	8001ee6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7d1b      	ldrb	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e007      	b.n	8001f10 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f0e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d017      	beq.n	8001f48 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d029      	beq.n	8001f70 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d13b      	bne.n	8001f98 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f2e:	f023 030f 	bic.w	r3, r3, #15
 8001f32:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6959      	ldr	r1, [r3, #20]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	615a      	str	r2, [r3, #20]
      break;
 8001f46:	e03b      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f56:	f023 030f 	bic.w	r3, r3, #15
 8001f5a:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6999      	ldr	r1, [r3, #24]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	619a      	str	r2, [r3, #24]
      break;
 8001f6e:	e027      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f7e:	f023 030f 	bic.w	r3, r3, #15
 8001f82:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69d9      	ldr	r1, [r3, #28]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	61da      	str	r2, [r3, #28]
      break;
 8001f96:	e013      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001fa6:	f023 030f 	bic.w	r3, r3, #15
 8001faa:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a19      	ldr	r1, [r3, #32]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	621a      	str	r2, [r3, #32]
      break;
 8001fbe:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d105      	bne.n	8001fe2 <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10d      	bne.n	8002008 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d003      	beq.n	8001ffc <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d105      	bne.n	8002008 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	000f0001 	.word	0x000f0001
 8002024:	40012300 	.word	0x40012300
 8002028:	40012000 	.word	0x40012000

0800202c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e0ed      	b.n	800221a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d102      	bne.n	8002050 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f00a fec8 	bl	800cde0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0202 	bic.w	r2, r2, #2
 800205e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002060:	f7fe fff8 	bl	8001054 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002066:	e012      	b.n	800208e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002068:	f7fe fff4 	bl	8001054 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b0a      	cmp	r3, #10
 8002074:	d90b      	bls.n	800208e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2205      	movs	r2, #5
 8002086:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0c5      	b.n	800221a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d1e5      	bne.n	8002068 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ac:	f7fe ffd2 	bl	8001054 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020b2:	e012      	b.n	80020da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020b4:	f7fe ffce 	bl	8001054 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b0a      	cmp	r3, #10
 80020c0:	d90b      	bls.n	80020da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2205      	movs	r2, #5
 80020d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e09f      	b.n	800221a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 0301 	and.w	r3, r3, #1
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d0e5      	beq.n	80020b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	7e1b      	ldrb	r3, [r3, #24]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d108      	bne.n	8002102 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	e007      	b.n	8002112 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681a      	ldr	r2, [r3, #0]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002110:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	7e5b      	ldrb	r3, [r3, #25]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d108      	bne.n	800212c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	e007      	b.n	800213c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800213a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	7e9b      	ldrb	r3, [r3, #26]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d108      	bne.n	8002156 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0220 	orr.w	r2, r2, #32
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e007      	b.n	8002166 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	681a      	ldr	r2, [r3, #0]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 0220 	bic.w	r2, r2, #32
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	7edb      	ldrb	r3, [r3, #27]
 800216a:	2b01      	cmp	r3, #1
 800216c:	d108      	bne.n	8002180 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0210 	bic.w	r2, r2, #16
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e007      	b.n	8002190 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0210 	orr.w	r2, r2, #16
 800218e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	7f1b      	ldrb	r3, [r3, #28]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d108      	bne.n	80021aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681a      	ldr	r2, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f042 0208 	orr.w	r2, r2, #8
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	e007      	b.n	80021ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0208 	bic.w	r2, r2, #8
 80021b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	7f5b      	ldrb	r3, [r3, #29]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d108      	bne.n	80021d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f042 0204 	orr.w	r2, r2, #4
 80021d0:	601a      	str	r2, [r3, #0]
 80021d2:	e007      	b.n	80021e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	ea42 0103 	orr.w	r1, r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	1e5a      	subs	r2, r3, #1
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2201      	movs	r2, #1
 8002214:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
	...

08002224 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800223a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d003      	beq.n	800224a <HAL_CAN_ConfigFilter+0x26>
 8002242:	7cfb      	ldrb	r3, [r7, #19]
 8002244:	2b02      	cmp	r3, #2
 8002246:	f040 80be 	bne.w	80023c6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800224a:	4b65      	ldr	r3, [pc, #404]	; (80023e0 <HAL_CAN_ConfigFilter+0x1bc>)
 800224c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002254:	f043 0201 	orr.w	r2, r3, #1
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002264:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	431a      	orrs	r2, r3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	695b      	ldr	r3, [r3, #20]
 8002286:	f003 031f 	and.w	r3, r3, #31
 800228a:	2201      	movs	r2, #1
 800228c:	fa02 f303 	lsl.w	r3, r2, r3
 8002290:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	43db      	mvns	r3, r3
 800229c:	401a      	ands	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d123      	bne.n	80022f4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80022ac:	697b      	ldr	r3, [r7, #20]
 80022ae:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	43db      	mvns	r3, r3
 80022b6:	401a      	ands	r2, r3
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80022ce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	3248      	adds	r2, #72	; 0x48
 80022d4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80022e8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80022ea:	6979      	ldr	r1, [r7, #20]
 80022ec:	3348      	adds	r3, #72	; 0x48
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	440b      	add	r3, r1
 80022f2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	69db      	ldr	r3, [r3, #28]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d122      	bne.n	8002342 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	431a      	orrs	r2, r3
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800231c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3248      	adds	r2, #72	; 0x48
 8002322:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002336:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002338:	6979      	ldr	r1, [r7, #20]
 800233a:	3348      	adds	r3, #72	; 0x48
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	440b      	add	r3, r1
 8002340:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d109      	bne.n	800235e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	43db      	mvns	r3, r3
 8002354:	401a      	ands	r2, r3
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800235c:	e007      	b.n	800236e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	431a      	orrs	r2, r3
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d109      	bne.n	800238a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	43db      	mvns	r3, r3
 8002380:	401a      	ands	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002388:	e007      	b.n	800239a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	431a      	orrs	r2, r3
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d107      	bne.n	80023b2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	431a      	orrs	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80023b8:	f023 0201 	bic.w	r2, r3, #1
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80023c2:	2300      	movs	r3, #0
 80023c4:	e006      	b.n	80023d4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
  }
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr
 80023e0:	40006400 	.word	0x40006400

080023e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d12e      	bne.n	8002456 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0201 	bic.w	r2, r2, #1
 800240e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002410:	f7fe fe20 	bl	8001054 <HAL_GetTick>
 8002414:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002416:	e012      	b.n	800243e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002418:	f7fe fe1c 	bl	8001054 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b0a      	cmp	r3, #10
 8002424:	d90b      	bls.n	800243e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2205      	movs	r2, #5
 8002436:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e012      	b.n	8002464 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1e5      	bne.n	8002418 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002452:	2300      	movs	r3, #0
 8002454:	e006      	b.n	8002464 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
  }
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
 8002478:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002480:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800248a:	7ffb      	ldrb	r3, [r7, #31]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d003      	beq.n	8002498 <HAL_CAN_AddTxMessage+0x2c>
 8002490:	7ffb      	ldrb	r3, [r7, #31]
 8002492:	2b02      	cmp	r3, #2
 8002494:	f040 80b8 	bne.w	8002608 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d105      	bne.n	80024b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f000 80a0 	beq.w	80025f8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	0e1b      	lsrs	r3, r3, #24
 80024bc:	f003 0303 	and.w	r3, r3, #3
 80024c0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d907      	bls.n	80024d8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e09e      	b.n	8002616 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80024d8:	2201      	movs	r2, #1
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	409a      	lsls	r2, r3
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d10d      	bne.n	8002506 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	6809      	ldr	r1, [r1, #0]
 80024f8:	431a      	orrs	r2, r3
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	3318      	adds	r3, #24
 80024fe:	011b      	lsls	r3, r3, #4
 8002500:	440b      	add	r3, r1
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	e00f      	b.n	8002526 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002510:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002516:	68f9      	ldr	r1, [r7, #12]
 8002518:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800251a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	3318      	adds	r3, #24
 8002520:	011b      	lsls	r3, r3, #4
 8002522:	440b      	add	r3, r1
 8002524:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	691a      	ldr	r2, [r3, #16]
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3318      	adds	r3, #24
 8002532:	011b      	lsls	r3, r3, #4
 8002534:	440b      	add	r3, r1
 8002536:	3304      	adds	r3, #4
 8002538:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	7d1b      	ldrb	r3, [r3, #20]
 800253e:	2b01      	cmp	r3, #1
 8002540:	d111      	bne.n	8002566 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	3318      	adds	r3, #24
 800254a:	011b      	lsls	r3, r3, #4
 800254c:	4413      	add	r3, r2
 800254e:	3304      	adds	r3, #4
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68fa      	ldr	r2, [r7, #12]
 8002554:	6811      	ldr	r1, [r2, #0]
 8002556:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3318      	adds	r3, #24
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	440b      	add	r3, r1
 8002562:	3304      	adds	r3, #4
 8002564:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	3307      	adds	r3, #7
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	061a      	lsls	r2, r3, #24
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3306      	adds	r3, #6
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	041b      	lsls	r3, r3, #16
 8002576:	431a      	orrs	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3305      	adds	r3, #5
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	4313      	orrs	r3, r2
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	3204      	adds	r2, #4
 8002586:	7812      	ldrb	r2, [r2, #0]
 8002588:	4610      	mov	r0, r2
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	6811      	ldr	r1, [r2, #0]
 800258e:	ea43 0200 	orr.w	r2, r3, r0
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	440b      	add	r3, r1
 8002598:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800259c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3303      	adds	r3, #3
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	061a      	lsls	r2, r3, #24
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	3302      	adds	r3, #2
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	041b      	lsls	r3, r3, #16
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	3301      	adds	r3, #1
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	4313      	orrs	r3, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	7812      	ldrb	r2, [r2, #0]
 80025be:	4610      	mov	r0, r2
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	6811      	ldr	r1, [r2, #0]
 80025c4:	ea43 0200 	orr.w	r2, r3, r0
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	011b      	lsls	r3, r3, #4
 80025cc:	440b      	add	r3, r1
 80025ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80025d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	3318      	adds	r3, #24
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	4413      	add	r3, r2
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	6811      	ldr	r1, [r2, #0]
 80025e6:	f043 0201 	orr.w	r2, r3, #1
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3318      	adds	r3, #24
 80025ee:	011b      	lsls	r3, r3, #4
 80025f0:	440b      	add	r3, r1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80025f4:	2300      	movs	r3, #0
 80025f6:	e00e      	b.n	8002616 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e006      	b.n	8002616 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
  }
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002622:	b480      	push	{r7}
 8002624:	b087      	sub	sp, #28
 8002626:	af00      	add	r7, sp, #0
 8002628:	60f8      	str	r0, [r7, #12]
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002636:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d003      	beq.n	8002646 <HAL_CAN_GetRxMessage+0x24>
 800263e:	7dfb      	ldrb	r3, [r7, #23]
 8002640:	2b02      	cmp	r3, #2
 8002642:	f040 80f3 	bne.w	800282c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10e      	bne.n	800266a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e0e7      	b.n	800283a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0d8      	b.n	800283a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	331b      	adds	r3, #27
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	4413      	add	r3, r2
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0204 	and.w	r2, r3, #4
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d10c      	bne.n	80026c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	331b      	adds	r3, #27
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	4413      	add	r3, r2
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	0d5b      	lsrs	r3, r3, #21
 80026b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	331b      	adds	r3, #27
 80026c8:	011b      	lsls	r3, r3, #4
 80026ca:	4413      	add	r3, r2
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	331b      	adds	r3, #27
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	4413      	add	r3, r2
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0202 	and.w	r2, r3, #2
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	331b      	adds	r3, #27
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	4413      	add	r3, r2
 80026fa:	3304      	adds	r3, #4
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 020f 	and.w	r2, r3, #15
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	331b      	adds	r3, #27
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	4413      	add	r3, r2
 8002712:	3304      	adds	r3, #4
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	0a1b      	lsrs	r3, r3, #8
 8002718:	b2da      	uxtb	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	331b      	adds	r3, #27
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	4413      	add	r3, r2
 800272a:	3304      	adds	r3, #4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	0c1b      	lsrs	r3, r3, #16
 8002730:	b29a      	uxth	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681a      	ldr	r2, [r3, #0]
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b2da      	uxtb	r2, r3
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4413      	add	r3, r2
 8002756:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0a1a      	lsrs	r2, r3, #8
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	3301      	adds	r3, #1
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	011b      	lsls	r3, r3, #4
 800276e:	4413      	add	r3, r2
 8002770:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	0c1a      	lsrs	r2, r3, #16
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	3302      	adds	r3, #2
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	4413      	add	r3, r2
 800278a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	0e1a      	lsrs	r2, r3, #24
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	3303      	adds	r3, #3
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	011b      	lsls	r3, r3, #4
 80027a2:	4413      	add	r3, r2
 80027a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	3304      	adds	r3, #4
 80027ae:	b2d2      	uxtb	r2, r2
 80027b0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	011b      	lsls	r3, r3, #4
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	0a1a      	lsrs	r2, r3, #8
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	3305      	adds	r3, #5
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	0c1a      	lsrs	r2, r3, #16
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	3306      	adds	r3, #6
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	4413      	add	r3, r2
 80027f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	0e1a      	lsrs	r2, r3, #24
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	3307      	adds	r3, #7
 80027fc:	b2d2      	uxtb	r2, r2
 80027fe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0220 	orr.w	r2, r2, #32
 8002814:	60da      	str	r2, [r3, #12]
 8002816:	e007      	b.n	8002828 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691a      	ldr	r2, [r3, #16]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0220 	orr.w	r2, r2, #32
 8002826:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002828:	2300      	movs	r3, #0
 800282a:	e006      	b.n	800283a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	371c      	adds	r7, #28
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr

08002846 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002846:	b480      	push	{r7}
 8002848:	b085      	sub	sp, #20
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
 800284e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002856:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002858:	7bfb      	ldrb	r3, [r7, #15]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d002      	beq.n	8002864 <HAL_CAN_ActivateNotification+0x1e>
 800285e:	7bfb      	ldrb	r3, [r7, #15]
 8002860:	2b02      	cmp	r3, #2
 8002862:	d109      	bne.n	8002878 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6959      	ldr	r1, [r3, #20]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002874:	2300      	movs	r3, #0
 8002876:	e006      	b.n	8002886 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
  }
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b08a      	sub	sp, #40	; 0x28
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800289a:	2300      	movs	r3, #0
 800289c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	691b      	ldr	r3, [r3, #16]
 80028c4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d07c      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	f003 0301 	and.w	r3, r3, #1
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d023      	beq.n	800292a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2201      	movs	r2, #1
 80028e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d003      	beq.n	80028fc <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f97d 	bl	8002bf4 <HAL_CAN_TxMailbox0CompleteCallback>
 80028fa:	e016      	b.n	800292a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80028fc:	69bb      	ldr	r3, [r7, #24]
 80028fe:	f003 0304 	and.w	r3, r3, #4
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800290c:	627b      	str	r3, [r7, #36]	; 0x24
 800290e:	e00c      	b.n	800292a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002910:	69bb      	ldr	r3, [r7, #24]
 8002912:	f003 0308 	and.w	r3, r3, #8
 8002916:	2b00      	cmp	r3, #0
 8002918:	d004      	beq.n	8002924 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
 8002922:	e002      	b.n	800292a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f000 f983 	bl	8002c30 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002930:	2b00      	cmp	r3, #0
 8002932:	d024      	beq.n	800297e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f44f 7280 	mov.w	r2, #256	; 0x100
 800293c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f95d 	bl	8002c08 <HAL_CAN_TxMailbox1CompleteCallback>
 800294e:	e016      	b.n	800297e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002956:	2b00      	cmp	r3, #0
 8002958:	d004      	beq.n	8002964 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002960:	627b      	str	r3, [r7, #36]	; 0x24
 8002962:	e00c      	b.n	800297e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002964:	69bb      	ldr	r3, [r7, #24]
 8002966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800296a:	2b00      	cmp	r3, #0
 800296c:	d004      	beq.n	8002978 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800296e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
 8002976:	e002      	b.n	800297e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f963 	bl	8002c44 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800297e:	69bb      	ldr	r3, [r7, #24]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d024      	beq.n	80029d2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002990:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f93d 	bl	8002c1c <HAL_CAN_TxMailbox2CompleteCallback>
 80029a2:	e016      	b.n	80029d2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d004      	beq.n	80029b8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029b4:	627b      	str	r3, [r7, #36]	; 0x24
 80029b6:	e00c      	b.n	80029d2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d004      	beq.n	80029cc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
 80029ca:	e002      	b.n	80029d2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f943 	bl	8002c58 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	f003 0308 	and.w	r3, r3, #8
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d00c      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0310 	and.w	r3, r3, #16
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ec:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2210      	movs	r2, #16
 80029f4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00b      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d006      	beq.n	8002a18 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2208      	movs	r2, #8
 8002a10:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f934 	bl	8002c80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	f003 0302 	and.w	r3, r3, #2
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d009      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	f003 0303 	and.w	r3, r3, #3
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d002      	beq.n	8002a36 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f91b 	bl	8002c6c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a36:	6a3b      	ldr	r3, [r7, #32]
 8002a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d00c      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f003 0310 	and.w	r3, r3, #16
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d007      	beq.n	8002a5a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2210      	movs	r2, #16
 8002a58:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a5a:	6a3b      	ldr	r3, [r7, #32]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d006      	beq.n	8002a7c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2208      	movs	r2, #8
 8002a74:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f916 	bl	8002ca8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a7c:	6a3b      	ldr	r3, [r7, #32]
 8002a7e:	f003 0310 	and.w	r3, r3, #16
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d009      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d002      	beq.n	8002a9a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f8fd 	bl	8002c94 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00b      	beq.n	8002abc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d006      	beq.n	8002abc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2210      	movs	r2, #16
 8002ab4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 f900 	bl	8002cbc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002abc:	6a3b      	ldr	r3, [r7, #32]
 8002abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d00b      	beq.n	8002ade <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f003 0308 	and.w	r3, r3, #8
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d006      	beq.n	8002ade <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	2208      	movs	r2, #8
 8002ad6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8f9 	bl	8002cd0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d075      	beq.n	8002bd4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d06c      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002af2:	6a3b      	ldr	r3, [r7, #32]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d003      	beq.n	8002b2a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b46:	6a3b      	ldr	r3, [r7, #32]
 8002b48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d03d      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d038      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b60:	2b30      	cmp	r3, #48	; 0x30
 8002b62:	d017      	beq.n	8002b94 <HAL_CAN_IRQHandler+0x302>
 8002b64:	2b30      	cmp	r3, #48	; 0x30
 8002b66:	d804      	bhi.n	8002b72 <HAL_CAN_IRQHandler+0x2e0>
 8002b68:	2b10      	cmp	r3, #16
 8002b6a:	d009      	beq.n	8002b80 <HAL_CAN_IRQHandler+0x2ee>
 8002b6c:	2b20      	cmp	r3, #32
 8002b6e:	d00c      	beq.n	8002b8a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b70:	e024      	b.n	8002bbc <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002b72:	2b50      	cmp	r3, #80	; 0x50
 8002b74:	d018      	beq.n	8002ba8 <HAL_CAN_IRQHandler+0x316>
 8002b76:	2b60      	cmp	r3, #96	; 0x60
 8002b78:	d01b      	beq.n	8002bb2 <HAL_CAN_IRQHandler+0x320>
 8002b7a:	2b40      	cmp	r3, #64	; 0x40
 8002b7c:	d00f      	beq.n	8002b9e <HAL_CAN_IRQHandler+0x30c>
            break;
 8002b7e:	e01d      	b.n	8002bbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b82:	f043 0308 	orr.w	r3, r3, #8
 8002b86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b88:	e018      	b.n	8002bbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	f043 0310 	orr.w	r3, r3, #16
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b92:	e013      	b.n	8002bbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b96:	f043 0320 	orr.w	r3, r3, #32
 8002b9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002b9c:	e00e      	b.n	8002bbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ba4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ba6:	e009      	b.n	8002bbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bb0:	e004      	b.n	8002bbc <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bba:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	699a      	ldr	r2, [r3, #24]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002bca:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	2204      	movs	r2, #4
 8002bd2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d008      	beq.n	8002bec <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f87c 	bl	8002ce4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002bec:	bf00      	nop
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr

08002c30 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c4c:	bf00      	nop
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c74:	bf00      	nop
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr

08002c80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c88:	bf00      	nop
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cec:	bf00      	nop
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	60d3      	str	r3, [r2, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4907      	ldr	r1, [pc, #28]	; (8002d94 <__NVIC_EnableIRQ+0x38>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e64:	d301      	bcc.n	8002e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <SysTick_Config+0x40>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e72:	210f      	movs	r1, #15
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e78:	f7ff ff8e 	bl	8002d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <SysTick_Config+0x40>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SysTick_Config+0x40>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010

08002e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff29 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec0:	f7ff ff3e 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff8e 	bl	8002dec <NVIC_EncodePriority>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff5d 	bl	8002d98 <__NVIC_SetPriority>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff31 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffa2 	bl	8002e54 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f28:	f7fe f894 	bl	8001054 <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e099      	b.n	800306c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2202      	movs	r2, #2
 8002f44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f022 0201 	bic.w	r2, r2, #1
 8002f56:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f58:	e00f      	b.n	8002f7a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f5a:	f7fe f87b 	bl	8001054 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b05      	cmp	r3, #5
 8002f66:	d908      	bls.n	8002f7a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2203      	movs	r2, #3
 8002f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e078      	b.n	800306c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d1e8      	bne.n	8002f5a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f90:	697a      	ldr	r2, [r7, #20]
 8002f92:	4b38      	ldr	r3, [pc, #224]	; (8003074 <HAL_DMA_Init+0x158>)
 8002f94:	4013      	ands	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685a      	ldr	r2, [r3, #4]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a1b      	ldr	r3, [r3, #32]
 8002fc4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	2b04      	cmp	r3, #4
 8002fd2:	d107      	bne.n	8002fe4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	f023 0307 	bic.w	r3, r3, #7
 8002ffa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	2b04      	cmp	r3, #4
 800300c:	d117      	bne.n	800303e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	4313      	orrs	r3, r2
 8003016:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00e      	beq.n	800303e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fae5 	bl	80035f0 <DMA_CheckFifoParam>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2240      	movs	r2, #64	; 0x40
 8003030:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800303a:	2301      	movs	r3, #1
 800303c:	e016      	b.n	800306c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fa9c 	bl	8003584 <DMA_CalcBaseAndBitshift>
 800304c:	4603      	mov	r3, r0
 800304e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003054:	223f      	movs	r2, #63	; 0x3f
 8003056:	409a      	lsls	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2200      	movs	r2, #0
 8003060:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3718      	adds	r7, #24
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	f010803f 	.word	0xf010803f

08003078 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800308e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003096:	2b01      	cmp	r3, #1
 8003098:	d101      	bne.n	800309e <HAL_DMA_Start_IT+0x26>
 800309a:	2302      	movs	r3, #2
 800309c:	e040      	b.n	8003120 <HAL_DMA_Start_IT+0xa8>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2201      	movs	r2, #1
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d12f      	bne.n	8003112 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	68b9      	ldr	r1, [r7, #8]
 80030c6:	68f8      	ldr	r0, [r7, #12]
 80030c8:	f000 fa2e 	bl	8003528 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d0:	223f      	movs	r2, #63	; 0x3f
 80030d2:	409a      	lsls	r2, r3
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0216 	orr.w	r2, r2, #22
 80030e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d007      	beq.n	8003100 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0208 	orr.w	r2, r2, #8
 80030fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	e005      	b.n	800311e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800311a:	2302      	movs	r3, #2
 800311c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800311e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b02      	cmp	r3, #2
 800313a:	d004      	beq.n	8003146 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2280      	movs	r2, #128	; 0x80
 8003140:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e00c      	b.n	8003160 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2205      	movs	r2, #5
 800314a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0201 	bic.w	r2, r2, #1
 800315c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003174:	2300      	movs	r3, #0
 8003176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003178:	4b92      	ldr	r3, [pc, #584]	; (80033c4 <HAL_DMA_IRQHandler+0x258>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a92      	ldr	r2, [pc, #584]	; (80033c8 <HAL_DMA_IRQHandler+0x25c>)
 800317e:	fba2 2303 	umull	r2, r3, r2, r3
 8003182:	0a9b      	lsrs	r3, r3, #10
 8003184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003196:	2208      	movs	r2, #8
 8003198:	409a      	lsls	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	4013      	ands	r3, r2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01a      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d013      	beq.n	80031d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0204 	bic.w	r2, r2, #4
 80031be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	2208      	movs	r2, #8
 80031c6:	409a      	lsls	r2, r3
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d0:	f043 0201 	orr.w	r2, r3, #1
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031dc:	2201      	movs	r2, #1
 80031de:	409a      	lsls	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d012      	beq.n	800320e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00b      	beq.n	800320e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	2201      	movs	r2, #1
 80031fc:	409a      	lsls	r2, r3
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f043 0202 	orr.w	r2, r3, #2
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	2204      	movs	r2, #4
 8003214:	409a      	lsls	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d012      	beq.n	8003244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00b      	beq.n	8003244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	2204      	movs	r2, #4
 8003232:	409a      	lsls	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323c:	f043 0204 	orr.w	r2, r3, #4
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003248:	2210      	movs	r2, #16
 800324a:	409a      	lsls	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	4013      	ands	r3, r2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d043      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0308 	and.w	r3, r3, #8
 800325e:	2b00      	cmp	r3, #0
 8003260:	d03c      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	2210      	movs	r2, #16
 8003268:	409a      	lsls	r2, r3
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d018      	beq.n	80032ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d108      	bne.n	800329c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	2b00      	cmp	r3, #0
 8003290:	d024      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	4798      	blx	r3
 800329a:	e01f      	b.n	80032dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01b      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	4798      	blx	r3
 80032ac:	e016      	b.n	80032dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d107      	bne.n	80032cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0208 	bic.w	r2, r2, #8
 80032ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	2220      	movs	r2, #32
 80032e2:	409a      	lsls	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4013      	ands	r3, r2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f000 808e 	beq.w	800340a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0310 	and.w	r3, r3, #16
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f000 8086 	beq.w	800340a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003302:	2220      	movs	r2, #32
 8003304:	409a      	lsls	r2, r3
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003310:	b2db      	uxtb	r3, r3
 8003312:	2b05      	cmp	r3, #5
 8003314:	d136      	bne.n	8003384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0216 	bic.w	r2, r2, #22
 8003324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695a      	ldr	r2, [r3, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d103      	bne.n	8003346 <HAL_DMA_IRQHandler+0x1da>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003342:	2b00      	cmp	r3, #0
 8003344:	d007      	beq.n	8003356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0208 	bic.w	r2, r2, #8
 8003354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800335a:	223f      	movs	r2, #63	; 0x3f
 800335c:	409a      	lsls	r2, r3
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003376:	2b00      	cmp	r3, #0
 8003378:	d07d      	beq.n	8003476 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	4798      	blx	r3
        }
        return;
 8003382:	e078      	b.n	8003476 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01c      	beq.n	80033cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800339c:	2b00      	cmp	r3, #0
 800339e:	d108      	bne.n	80033b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d030      	beq.n	800340a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	4798      	blx	r3
 80033b0:	e02b      	b.n	800340a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d027      	beq.n	800340a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	4798      	blx	r3
 80033c2:	e022      	b.n	800340a <HAL_DMA_IRQHandler+0x29e>
 80033c4:	20000038 	.word	0x20000038
 80033c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d10f      	bne.n	80033fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0210 	bic.w	r2, r2, #16
 80033e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2201      	movs	r2, #1
 80033f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	2b00      	cmp	r3, #0
 8003410:	d032      	beq.n	8003478 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d022      	beq.n	8003464 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2205      	movs	r2, #5
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	3301      	adds	r3, #1
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	697a      	ldr	r2, [r7, #20]
 800343e:	429a      	cmp	r2, r3
 8003440:	d307      	bcc.n	8003452 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1f2      	bne.n	8003436 <HAL_DMA_IRQHandler+0x2ca>
 8003450:	e000      	b.n	8003454 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003452:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
 8003474:	e000      	b.n	8003478 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003476:	bf00      	nop
    }
  }
}
 8003478:	3718      	adds	r7, #24
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop

08003480 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003480:	b480      	push	{r7}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	460b      	mov	r3, r1
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800348e:	2300      	movs	r3, #0
 8003490:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003498:	2b01      	cmp	r3, #1
 800349a:	d101      	bne.n	80034a0 <HAL_DMA_RegisterCallback+0x20>
 800349c:	2302      	movs	r3, #2
 800349e:	e03c      	b.n	800351a <HAL_DMA_RegisterCallback+0x9a>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d129      	bne.n	8003508 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 80034b4:	7afb      	ldrb	r3, [r7, #11]
 80034b6:	2b05      	cmp	r3, #5
 80034b8:	d829      	bhi.n	800350e <HAL_DMA_RegisterCallback+0x8e>
 80034ba:	a201      	add	r2, pc, #4	; (adr r2, 80034c0 <HAL_DMA_RegisterCallback+0x40>)
 80034bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c0:	080034d9 	.word	0x080034d9
 80034c4:	080034e1 	.word	0x080034e1
 80034c8:	080034e9 	.word	0x080034e9
 80034cc:	080034f1 	.word	0x080034f1
 80034d0:	080034f9 	.word	0x080034f9
 80034d4:	08003501 	.word	0x08003501
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80034de:	e017      	b.n	8003510 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034e6:	e013      	b.n	8003510 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80034ee:	e00f      	b.n	8003510 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80034f6:	e00b      	b.n	8003510 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80034fe:	e007      	b.n	8003510 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	687a      	ldr	r2, [r7, #4]
 8003504:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003506:	e003      	b.n	8003510 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75fb      	strb	r3, [r7, #23]
 800350c:	e000      	b.n	8003510 <HAL_DMA_RegisterCallback+0x90>
      break;
 800350e:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 8003518:	7dfb      	ldrb	r3, [r7, #23]
}
 800351a:	4618      	mov	r0, r3
 800351c:	371c      	adds	r7, #28
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop

08003528 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003544:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b40      	cmp	r3, #64	; 0x40
 8003554:	d108      	bne.n	8003568 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003566:	e007      	b.n	8003578 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	60da      	str	r2, [r3, #12]
}
 8003578:	bf00      	nop
 800357a:	3714      	adds	r7, #20
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	b2db      	uxtb	r3, r3
 8003592:	3b10      	subs	r3, #16
 8003594:	4a14      	ldr	r2, [pc, #80]	; (80035e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	091b      	lsrs	r3, r3, #4
 800359c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800359e:	4a13      	ldr	r2, [pc, #76]	; (80035ec <DMA_CalcBaseAndBitshift+0x68>)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2b03      	cmp	r3, #3
 80035b0:	d909      	bls.n	80035c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ba:	f023 0303 	bic.w	r3, r3, #3
 80035be:	1d1a      	adds	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	659a      	str	r2, [r3, #88]	; 0x58
 80035c4:	e007      	b.n	80035d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
 80035e6:	bf00      	nop
 80035e8:	aaaaaaab 	.word	0xaaaaaaab
 80035ec:	08010f50 	.word	0x08010f50

080035f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003600:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11f      	bne.n	800364a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2b03      	cmp	r3, #3
 800360e:	d855      	bhi.n	80036bc <DMA_CheckFifoParam+0xcc>
 8003610:	a201      	add	r2, pc, #4	; (adr r2, 8003618 <DMA_CheckFifoParam+0x28>)
 8003612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003616:	bf00      	nop
 8003618:	08003629 	.word	0x08003629
 800361c:	0800363b 	.word	0x0800363b
 8003620:	08003629 	.word	0x08003629
 8003624:	080036bd 	.word	0x080036bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800362c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d045      	beq.n	80036c0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003638:	e042      	b.n	80036c0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800363e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003642:	d13f      	bne.n	80036c4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003648:	e03c      	b.n	80036c4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003652:	d121      	bne.n	8003698 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2b03      	cmp	r3, #3
 8003658:	d836      	bhi.n	80036c8 <DMA_CheckFifoParam+0xd8>
 800365a:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <DMA_CheckFifoParam+0x70>)
 800365c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003660:	08003671 	.word	0x08003671
 8003664:	08003677 	.word	0x08003677
 8003668:	08003671 	.word	0x08003671
 800366c:	08003689 	.word	0x08003689
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	73fb      	strb	r3, [r7, #15]
      break;
 8003674:	e02f      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800367a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d024      	beq.n	80036cc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003686:	e021      	b.n	80036cc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003690:	d11e      	bne.n	80036d0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003696:	e01b      	b.n	80036d0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	2b02      	cmp	r3, #2
 800369c:	d902      	bls.n	80036a4 <DMA_CheckFifoParam+0xb4>
 800369e:	2b03      	cmp	r3, #3
 80036a0:	d003      	beq.n	80036aa <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036a2:	e018      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	73fb      	strb	r3, [r7, #15]
      break;
 80036a8:	e015      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
      break;
 80036ba:	e00b      	b.n	80036d4 <DMA_CheckFifoParam+0xe4>
      break;
 80036bc:	bf00      	nop
 80036be:	e00a      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;
 80036c0:	bf00      	nop
 80036c2:	e008      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;
 80036c4:	bf00      	nop
 80036c6:	e006      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;
 80036c8:	bf00      	nop
 80036ca:	e004      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;
 80036cc:	bf00      	nop
 80036ce:	e002      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;   
 80036d0:	bf00      	nop
 80036d2:	e000      	b.n	80036d6 <DMA_CheckFifoParam+0xe6>
      break;
 80036d4:	bf00      	nop
    }
  } 
  
  return status; 
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b089      	sub	sp, #36	; 0x24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036fa:	2300      	movs	r3, #0
 80036fc:	61fb      	str	r3, [r7, #28]
 80036fe:	e16b      	b.n	80039d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003700:	2201      	movs	r2, #1
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	fa02 f303 	lsl.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	697a      	ldr	r2, [r7, #20]
 8003710:	4013      	ands	r3, r2
 8003712:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003714:	693a      	ldr	r2, [r7, #16]
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	429a      	cmp	r2, r3
 800371a:	f040 815a 	bne.w	80039d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d00b      	beq.n	800373e <HAL_GPIO_Init+0x5a>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	2b02      	cmp	r3, #2
 800372c:	d007      	beq.n	800373e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003732:	2b11      	cmp	r3, #17
 8003734:	d003      	beq.n	800373e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b12      	cmp	r3, #18
 800373c:	d130      	bne.n	80037a0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	005b      	lsls	r3, r3, #1
 8003748:	2203      	movs	r2, #3
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	68da      	ldr	r2, [r3, #12]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	005b      	lsls	r3, r3, #1
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4313      	orrs	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003774:	2201      	movs	r2, #1
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	fa02 f303 	lsl.w	r3, r2, r3
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	091b      	lsrs	r3, r3, #4
 800378a:	f003 0201 	and.w	r2, r3, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	4313      	orrs	r3, r2
 8003798:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	69ba      	ldr	r2, [r7, #24]
 800379e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	2203      	movs	r2, #3
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	69ba      	ldr	r2, [r7, #24]
 80037b4:	4013      	ands	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d003      	beq.n	80037e0 <HAL_GPIO_Init+0xfc>
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	2b12      	cmp	r3, #18
 80037de:	d123      	bne.n	8003828 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	08da      	lsrs	r2, r3, #3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3208      	adds	r2, #8
 80037e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	220f      	movs	r2, #15
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	43db      	mvns	r3, r3
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	4013      	ands	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	4313      	orrs	r3, r2
 8003818:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	08da      	lsrs	r2, r3, #3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	3208      	adds	r2, #8
 8003822:	69b9      	ldr	r1, [r7, #24]
 8003824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	2203      	movs	r2, #3
 8003834:	fa02 f303 	lsl.w	r3, r2, r3
 8003838:	43db      	mvns	r3, r3
 800383a:	69ba      	ldr	r2, [r7, #24]
 800383c:	4013      	ands	r3, r2
 800383e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f003 0203 	and.w	r2, r3, #3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	4313      	orrs	r3, r2
 8003854:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80b4 	beq.w	80039d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b5f      	ldr	r3, [pc, #380]	; (80039ec <HAL_GPIO_Init+0x308>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	4a5e      	ldr	r2, [pc, #376]	; (80039ec <HAL_GPIO_Init+0x308>)
 8003874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003878:	6453      	str	r3, [r2, #68]	; 0x44
 800387a:	4b5c      	ldr	r3, [pc, #368]	; (80039ec <HAL_GPIO_Init+0x308>)
 800387c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003886:	4a5a      	ldr	r2, [pc, #360]	; (80039f0 <HAL_GPIO_Init+0x30c>)
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	089b      	lsrs	r3, r3, #2
 800388c:	3302      	adds	r3, #2
 800388e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003892:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 0303 	and.w	r3, r3, #3
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	220f      	movs	r2, #15
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a51      	ldr	r2, [pc, #324]	; (80039f4 <HAL_GPIO_Init+0x310>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d02b      	beq.n	800390a <HAL_GPIO_Init+0x226>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a50      	ldr	r2, [pc, #320]	; (80039f8 <HAL_GPIO_Init+0x314>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d025      	beq.n	8003906 <HAL_GPIO_Init+0x222>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a4f      	ldr	r2, [pc, #316]	; (80039fc <HAL_GPIO_Init+0x318>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <HAL_GPIO_Init+0x21e>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a4e      	ldr	r2, [pc, #312]	; (8003a00 <HAL_GPIO_Init+0x31c>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d019      	beq.n	80038fe <HAL_GPIO_Init+0x21a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a4d      	ldr	r2, [pc, #308]	; (8003a04 <HAL_GPIO_Init+0x320>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d013      	beq.n	80038fa <HAL_GPIO_Init+0x216>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4c      	ldr	r2, [pc, #304]	; (8003a08 <HAL_GPIO_Init+0x324>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d00d      	beq.n	80038f6 <HAL_GPIO_Init+0x212>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4b      	ldr	r2, [pc, #300]	; (8003a0c <HAL_GPIO_Init+0x328>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d007      	beq.n	80038f2 <HAL_GPIO_Init+0x20e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <HAL_GPIO_Init+0x32c>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d101      	bne.n	80038ee <HAL_GPIO_Init+0x20a>
 80038ea:	2307      	movs	r3, #7
 80038ec:	e00e      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038ee:	2308      	movs	r3, #8
 80038f0:	e00c      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038f2:	2306      	movs	r3, #6
 80038f4:	e00a      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038f6:	2305      	movs	r3, #5
 80038f8:	e008      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038fa:	2304      	movs	r3, #4
 80038fc:	e006      	b.n	800390c <HAL_GPIO_Init+0x228>
 80038fe:	2303      	movs	r3, #3
 8003900:	e004      	b.n	800390c <HAL_GPIO_Init+0x228>
 8003902:	2302      	movs	r3, #2
 8003904:	e002      	b.n	800390c <HAL_GPIO_Init+0x228>
 8003906:	2301      	movs	r3, #1
 8003908:	e000      	b.n	800390c <HAL_GPIO_Init+0x228>
 800390a:	2300      	movs	r3, #0
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f002 0203 	and.w	r2, r2, #3
 8003912:	0092      	lsls	r2, r2, #2
 8003914:	4093      	lsls	r3, r2
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	4313      	orrs	r3, r2
 800391a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800391c:	4934      	ldr	r1, [pc, #208]	; (80039f0 <HAL_GPIO_Init+0x30c>)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	089b      	lsrs	r3, r3, #2
 8003922:	3302      	adds	r3, #2
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800392a:	4b3a      	ldr	r3, [pc, #232]	; (8003a14 <HAL_GPIO_Init+0x330>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	43db      	mvns	r3, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4013      	ands	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	4313      	orrs	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800394e:	4a31      	ldr	r2, [pc, #196]	; (8003a14 <HAL_GPIO_Init+0x330>)
 8003950:	69bb      	ldr	r3, [r7, #24]
 8003952:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003954:	4b2f      	ldr	r3, [pc, #188]	; (8003a14 <HAL_GPIO_Init+0x330>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	43db      	mvns	r3, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4013      	ands	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d003      	beq.n	8003978 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003978:	4a26      	ldr	r2, [pc, #152]	; (8003a14 <HAL_GPIO_Init+0x330>)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800397e:	4b25      	ldr	r3, [pc, #148]	; (8003a14 <HAL_GPIO_Init+0x330>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	43db      	mvns	r3, r3
 8003988:	69ba      	ldr	r2, [r7, #24]
 800398a:	4013      	ands	r3, r2
 800398c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80039a2:	4a1c      	ldr	r2, [pc, #112]	; (8003a14 <HAL_GPIO_Init+0x330>)
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80039a8:	4b1a      	ldr	r3, [pc, #104]	; (8003a14 <HAL_GPIO_Init+0x330>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	43db      	mvns	r3, r3
 80039b2:	69ba      	ldr	r2, [r7, #24]
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d003      	beq.n	80039cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039cc:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <HAL_GPIO_Init+0x330>)
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3301      	adds	r3, #1
 80039d6:	61fb      	str	r3, [r7, #28]
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	2b0f      	cmp	r3, #15
 80039dc:	f67f ae90 	bls.w	8003700 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039e0:	bf00      	nop
 80039e2:	3724      	adds	r7, #36	; 0x24
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr
 80039ec:	40023800 	.word	0x40023800
 80039f0:	40013800 	.word	0x40013800
 80039f4:	40020000 	.word	0x40020000
 80039f8:	40020400 	.word	0x40020400
 80039fc:	40020800 	.word	0x40020800
 8003a00:	40020c00 	.word	0x40020c00
 8003a04:	40021000 	.word	0x40021000
 8003a08:	40021400 	.word	0x40021400
 8003a0c:	40021800 	.word	0x40021800
 8003a10:	40021c00 	.word	0x40021c00
 8003a14:	40013c00 	.word	0x40013c00

08003a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	460b      	mov	r3, r1
 8003a22:	807b      	strh	r3, [r7, #2]
 8003a24:	4613      	mov	r3, r2
 8003a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a28:	787b      	ldrb	r3, [r7, #1]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a2e:	887a      	ldrh	r2, [r7, #2]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a34:	e003      	b.n	8003a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a36:	887b      	ldrh	r3, [r7, #2]
 8003a38:	041a      	lsls	r2, r3, #16
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	619a      	str	r2, [r3, #24]
}
 8003a3e:	bf00      	nop
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr

08003a4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a4a:	b480      	push	{r7}
 8003a4c:	b083      	sub	sp, #12
 8003a4e:	af00      	add	r7, sp, #0
 8003a50:	6078      	str	r0, [r7, #4]
 8003a52:	460b      	mov	r3, r1
 8003a54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	887b      	ldrh	r3, [r7, #2]
 8003a5c:	401a      	ands	r2, r3
 8003a5e:	887b      	ldrh	r3, [r7, #2]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d104      	bne.n	8003a6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003a64:	887b      	ldrh	r3, [r7, #2]
 8003a66:	041a      	lsls	r2, r3, #16
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003a6c:	e002      	b.n	8003a74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b082      	sub	sp, #8
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	4603      	mov	r3, r0
 8003a88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a8a:	4b08      	ldr	r3, [pc, #32]	; (8003aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a8c:	695a      	ldr	r2, [r3, #20]
 8003a8e:	88fb      	ldrh	r3, [r7, #6]
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d006      	beq.n	8003aa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a96:	4a05      	ldr	r2, [pc, #20]	; (8003aac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a98:	88fb      	ldrh	r3, [r7, #6]
 8003a9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a9c:	88fb      	ldrh	r3, [r7, #6]
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f008 fa14 	bl	800becc <HAL_GPIO_EXTI_Callback>
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40013c00 	.word	0x40013c00

08003ab0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e11f      	b.n	8003d02 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f009 f9d2 	bl	800ce80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2224      	movs	r2, #36	; 0x24
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b14:	f001 fcb6 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 8003b18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	4a7b      	ldr	r2, [pc, #492]	; (8003d0c <HAL_I2C_Init+0x25c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d807      	bhi.n	8003b34 <HAL_I2C_Init+0x84>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a7a      	ldr	r2, [pc, #488]	; (8003d10 <HAL_I2C_Init+0x260>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bf94      	ite	ls
 8003b2c:	2301      	movls	r3, #1
 8003b2e:	2300      	movhi	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	e006      	b.n	8003b42 <HAL_I2C_Init+0x92>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4a77      	ldr	r2, [pc, #476]	; (8003d14 <HAL_I2C_Init+0x264>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	bf94      	ite	ls
 8003b3c:	2301      	movls	r3, #1
 8003b3e:	2300      	movhi	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e0db      	b.n	8003d02 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4a72      	ldr	r2, [pc, #456]	; (8003d18 <HAL_I2C_Init+0x268>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0c9b      	lsrs	r3, r3, #18
 8003b54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68ba      	ldr	r2, [r7, #8]
 8003b66:	430a      	orrs	r2, r1
 8003b68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	4a64      	ldr	r2, [pc, #400]	; (8003d0c <HAL_I2C_Init+0x25c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d802      	bhi.n	8003b84 <HAL_I2C_Init+0xd4>
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3301      	adds	r3, #1
 8003b82:	e009      	b.n	8003b98 <HAL_I2C_Init+0xe8>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b8a:	fb02 f303 	mul.w	r3, r2, r3
 8003b8e:	4a63      	ldr	r2, [pc, #396]	; (8003d1c <HAL_I2C_Init+0x26c>)
 8003b90:	fba2 2303 	umull	r2, r3, r2, r3
 8003b94:	099b      	lsrs	r3, r3, #6
 8003b96:	3301      	adds	r3, #1
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	430b      	orrs	r3, r1
 8003b9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003baa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4956      	ldr	r1, [pc, #344]	; (8003d0c <HAL_I2C_Init+0x25c>)
 8003bb4:	428b      	cmp	r3, r1
 8003bb6:	d80d      	bhi.n	8003bd4 <HAL_I2C_Init+0x124>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	1e59      	subs	r1, r3, #1
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bc6:	3301      	adds	r3, #1
 8003bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bcc:	2b04      	cmp	r3, #4
 8003bce:	bf38      	it	cc
 8003bd0:	2304      	movcc	r3, #4
 8003bd2:	e04f      	b.n	8003c74 <HAL_I2C_Init+0x1c4>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d111      	bne.n	8003c00 <HAL_I2C_Init+0x150>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	1e58      	subs	r0, r3, #1
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	440b      	add	r3, r1
 8003bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	bf0c      	ite	eq
 8003bf8:	2301      	moveq	r3, #1
 8003bfa:	2300      	movne	r3, #0
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	e012      	b.n	8003c26 <HAL_I2C_Init+0x176>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	1e58      	subs	r0, r3, #1
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	460b      	mov	r3, r1
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	0099      	lsls	r1, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c16:	3301      	adds	r3, #1
 8003c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	bf0c      	ite	eq
 8003c20:	2301      	moveq	r3, #1
 8003c22:	2300      	movne	r3, #0
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d001      	beq.n	8003c2e <HAL_I2C_Init+0x17e>
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e022      	b.n	8003c74 <HAL_I2C_Init+0x1c4>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10e      	bne.n	8003c54 <HAL_I2C_Init+0x1a4>
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1e58      	subs	r0, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6859      	ldr	r1, [r3, #4]
 8003c3e:	460b      	mov	r3, r1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	440b      	add	r3, r1
 8003c44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c52:	e00f      	b.n	8003c74 <HAL_I2C_Init+0x1c4>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	1e58      	subs	r0, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6859      	ldr	r1, [r3, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	0099      	lsls	r1, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	6809      	ldr	r1, [r1, #0]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003ca2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6911      	ldr	r1, [r2, #16]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	68d2      	ldr	r2, [r2, #12]
 8003cae:	4311      	orrs	r1, r2
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	430b      	orrs	r3, r1
 8003cb6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695a      	ldr	r2, [r3, #20]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	699b      	ldr	r3, [r3, #24]
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f042 0201 	orr.w	r2, r2, #1
 8003ce2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	000186a0 	.word	0x000186a0
 8003d10:	001e847f 	.word	0x001e847f
 8003d14:	003d08ff 	.word	0x003d08ff
 8003d18:	431bde83 	.word	0x431bde83
 8003d1c:	10624dd3 	.word	0x10624dd3

08003d20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b088      	sub	sp, #32
 8003d24:	af02      	add	r7, sp, #8
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	817b      	strh	r3, [r7, #10]
 8003d30:	4613      	mov	r3, r2
 8003d32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d34:	f7fd f98e 	bl	8001054 <HAL_GetTick>
 8003d38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	f040 80e0 	bne.w	8003f08 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2319      	movs	r3, #25
 8003d4e:	2201      	movs	r2, #1
 8003d50:	4970      	ldr	r1, [pc, #448]	; (8003f14 <HAL_I2C_Master_Transmit+0x1f4>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fc56 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
 8003d60:	e0d3      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d101      	bne.n	8003d70 <HAL_I2C_Master_Transmit+0x50>
 8003d6c:	2302      	movs	r3, #2
 8003d6e:	e0cc      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ea>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0301 	and.w	r3, r3, #1
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d007      	beq.n	8003d96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f042 0201 	orr.w	r2, r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003da4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2221      	movs	r2, #33	; 0x21
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2210      	movs	r2, #16
 8003db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	893a      	ldrh	r2, [r7, #8]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a50      	ldr	r2, [pc, #320]	; (8003f18 <HAL_I2C_Master_Transmit+0x1f8>)
 8003dd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003dd8:	8979      	ldrh	r1, [r7, #10]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fac2 	bl	8004368 <I2C_MasterRequestWrite>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d001      	beq.n	8003dee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e08d      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e04:	e066      	b.n	8003ed4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fcd0 	bl	80047b0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d107      	bne.n	8003e2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e06b      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	781a      	ldrb	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	1c5a      	adds	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0304 	and.w	r3, r3, #4
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d11b      	bne.n	8003ea8 <HAL_I2C_Master_Transmit+0x188>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d017      	beq.n	8003ea8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7c:	781a      	ldrb	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	3b01      	subs	r3, #1
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	b29a      	uxth	r2, r3
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	6a39      	ldr	r1, [r7, #32]
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 fcc0 	bl	8004832 <I2C_WaitOnBTFFlagUntilTimeout>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00d      	beq.n	8003ed4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	2b04      	cmp	r3, #4
 8003ebe:	d107      	bne.n	8003ed0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ece:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e01a      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d194      	bne.n	8003e06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f04:	2300      	movs	r3, #0
 8003f06:	e000      	b.n	8003f0a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f08:	2302      	movs	r3, #2
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	00100002 	.word	0x00100002
 8003f18:	ffff0000 	.word	0xffff0000

08003f1c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b08c      	sub	sp, #48	; 0x30
 8003f20:	af02      	add	r7, sp, #8
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	461a      	mov	r2, r3
 8003f28:	460b      	mov	r3, r1
 8003f2a:	817b      	strh	r3, [r7, #10]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f30:	f7fd f890 	bl	8001054 <HAL_GetTick>
 8003f34:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	2b20      	cmp	r3, #32
 8003f40:	f040 820b 	bne.w	800435a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2319      	movs	r3, #25
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	497c      	ldr	r1, [pc, #496]	; (8004140 <HAL_I2C_Master_Receive+0x224>)
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fb58 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f5a:	2302      	movs	r3, #2
 8003f5c:	e1fe      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d101      	bne.n	8003f6c <HAL_I2C_Master_Receive+0x50>
 8003f68:	2302      	movs	r3, #2
 8003f6a:	e1f7      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d007      	beq.n	8003f92 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0201 	orr.w	r2, r2, #1
 8003f90:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2222      	movs	r2, #34	; 0x22
 8003fa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2210      	movs	r2, #16
 8003fae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	893a      	ldrh	r2, [r7, #8]
 8003fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	4a5c      	ldr	r2, [pc, #368]	; (8004144 <HAL_I2C_Master_Receive+0x228>)
 8003fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fd4:	8979      	ldrh	r1, [r7, #10]
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa46 	bl	800446c <I2C_MasterRequestRead>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e1b8      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d113      	bne.n	800401a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	623b      	str	r3, [r7, #32]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	695b      	ldr	r3, [r3, #20]
 8003ffc:	623b      	str	r3, [r7, #32]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	699b      	ldr	r3, [r3, #24]
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004016:	601a      	str	r2, [r3, #0]
 8004018:	e18c      	b.n	8004334 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800401e:	2b01      	cmp	r3, #1
 8004020:	d11b      	bne.n	800405a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004030:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004032:	2300      	movs	r3, #0
 8004034:	61fb      	str	r3, [r7, #28]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	699b      	ldr	r3, [r3, #24]
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	e16c      	b.n	8004334 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800405e:	2b02      	cmp	r3, #2
 8004060:	d11b      	bne.n	800409a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004070:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004080:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004082:	2300      	movs	r3, #0
 8004084:	61bb      	str	r3, [r7, #24]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	e14c      	b.n	8004334 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040aa:	2300      	movs	r3, #0
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	695b      	ldr	r3, [r3, #20]
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699b      	ldr	r3, [r3, #24]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040c0:	e138      	b.n	8004334 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c6:	2b03      	cmp	r3, #3
 80040c8:	f200 80f1 	bhi.w	80042ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d123      	bne.n	800411c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 fbeb 	bl	80048b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e139      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	691a      	ldr	r2, [r3, #16]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	855a      	strh	r2, [r3, #42]	; 0x2a
 800411a:	e10b      	b.n	8004334 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004120:	2b02      	cmp	r3, #2
 8004122:	d14e      	bne.n	80041c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	9300      	str	r3, [sp, #0]
 8004128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800412a:	2200      	movs	r2, #0
 800412c:	4906      	ldr	r1, [pc, #24]	; (8004148 <HAL_I2C_Master_Receive+0x22c>)
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 fa68 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d008      	beq.n	800414c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e10e      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
 800413e:	bf00      	nop
 8004140:	00100002 	.word	0x00100002
 8004144:	ffff0000 	.word	0xffff0000
 8004148:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800415a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	691a      	ldr	r2, [r3, #16]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004198:	b2d2      	uxtb	r2, r2
 800419a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	3b01      	subs	r3, #1
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b29a      	uxth	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041c0:	e0b8      	b.n	8004334 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c8:	2200      	movs	r2, #0
 80041ca:	4966      	ldr	r1, [pc, #408]	; (8004364 <HAL_I2C_Master_Receive+0x448>)
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fa19 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e0bf      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	691a      	ldr	r2, [r3, #16]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	b2d2      	uxtb	r2, r2
 80041f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004208:	3b01      	subs	r3, #1
 800420a:	b29a      	uxth	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004214:	b29b      	uxth	r3, r3
 8004216:	3b01      	subs	r3, #1
 8004218:	b29a      	uxth	r2, r3
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800421e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004220:	9300      	str	r3, [sp, #0]
 8004222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004224:	2200      	movs	r2, #0
 8004226:	494f      	ldr	r1, [pc, #316]	; (8004364 <HAL_I2C_Master_Receive+0x448>)
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 f9eb 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 800422e:	4603      	mov	r3, r0
 8004230:	2b00      	cmp	r3, #0
 8004232:	d001      	beq.n	8004238 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e091      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004246:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	691a      	ldr	r2, [r3, #16]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004252:	b2d2      	uxtb	r2, r2
 8004254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	3b01      	subs	r3, #1
 8004266:	b29a      	uxth	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	b2d2      	uxtb	r2, r2
 8004286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	1c5a      	adds	r2, r3, #1
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	3b01      	subs	r3, #1
 8004298:	b29a      	uxth	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	3b01      	subs	r3, #1
 80042a6:	b29a      	uxth	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042ac:	e042      	b.n	8004334 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fafe 	bl	80048b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e04c      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691a      	ldr	r2, [r3, #16]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042de:	3b01      	subs	r3, #1
 80042e0:	b29a      	uxth	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	3b01      	subs	r3, #1
 80042ee:	b29a      	uxth	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d118      	bne.n	8004334 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691a      	ldr	r2, [r3, #16]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	b2d2      	uxtb	r2, r2
 800430e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431e:	3b01      	subs	r3, #1
 8004320:	b29a      	uxth	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800432a:	b29b      	uxth	r3, r3
 800432c:	3b01      	subs	r3, #1
 800432e:	b29a      	uxth	r2, r3
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004338:	2b00      	cmp	r3, #0
 800433a:	f47f aec2 	bne.w	80040c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004356:	2300      	movs	r3, #0
 8004358:	e000      	b.n	800435c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800435a:	2302      	movs	r3, #2
  }
}
 800435c:	4618      	mov	r0, r3
 800435e:	3728      	adds	r7, #40	; 0x28
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	00010004 	.word	0x00010004

08004368 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b088      	sub	sp, #32
 800436c:	af02      	add	r7, sp, #8
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	460b      	mov	r3, r1
 8004376:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d006      	beq.n	8004392 <I2C_MasterRequestWrite+0x2a>
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	2b01      	cmp	r3, #1
 8004388:	d003      	beq.n	8004392 <I2C_MasterRequestWrite+0x2a>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004390:	d108      	bne.n	80043a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e00b      	b.n	80043bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a8:	2b12      	cmp	r3, #18
 80043aa:	d107      	bne.n	80043bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 f91b 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00c      	beq.n	80043ee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d003      	beq.n	80043ea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e035      	b.n	800445a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043f6:	d108      	bne.n	800440a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043f8:	897b      	ldrh	r3, [r7, #10]
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	461a      	mov	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004406:	611a      	str	r2, [r3, #16]
 8004408:	e01b      	b.n	8004442 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800440a:	897b      	ldrh	r3, [r7, #10]
 800440c:	11db      	asrs	r3, r3, #7
 800440e:	b2db      	uxtb	r3, r3
 8004410:	f003 0306 	and.w	r3, r3, #6
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f063 030f 	orn	r3, r3, #15
 800441a:	b2da      	uxtb	r2, r3
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	490f      	ldr	r1, [pc, #60]	; (8004464 <I2C_MasterRequestWrite+0xfc>)
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f942 	bl	80046b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e010      	b.n	800445a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004438:	897b      	ldrh	r3, [r7, #10]
 800443a:	b2da      	uxtb	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	4908      	ldr	r1, [pc, #32]	; (8004468 <I2C_MasterRequestWrite+0x100>)
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f932 	bl	80046b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d001      	beq.n	8004458 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3718      	adds	r7, #24
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	00010008 	.word	0x00010008
 8004468:	00010002 	.word	0x00010002

0800446c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af02      	add	r7, sp, #8
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	607a      	str	r2, [r7, #4]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	460b      	mov	r3, r1
 800447a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004490:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b08      	cmp	r3, #8
 8004496:	d006      	beq.n	80044a6 <I2C_MasterRequestRead+0x3a>
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d003      	beq.n	80044a6 <I2C_MasterRequestRead+0x3a>
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a4:	d108      	bne.n	80044b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	e00b      	b.n	80044d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044bc:	2b11      	cmp	r3, #17
 80044be:	d107      	bne.n	80044d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f891 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d00c      	beq.n	8004502 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044fc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044fe:	2303      	movs	r3, #3
 8004500:	e078      	b.n	80045f4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800450a:	d108      	bne.n	800451e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800450c:	897b      	ldrh	r3, [r7, #10]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]
 800451c:	e05e      	b.n	80045dc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800451e:	897b      	ldrh	r3, [r7, #10]
 8004520:	11db      	asrs	r3, r3, #7
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f003 0306 	and.w	r3, r3, #6
 8004528:	b2db      	uxtb	r3, r3
 800452a:	f063 030f 	orn	r3, r3, #15
 800452e:	b2da      	uxtb	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	4930      	ldr	r1, [pc, #192]	; (80045fc <I2C_MasterRequestRead+0x190>)
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f8b8 	bl	80046b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d001      	beq.n	800454c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e053      	b.n	80045f4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800454c:	897b      	ldrh	r3, [r7, #10]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	687a      	ldr	r2, [r7, #4]
 800455a:	4929      	ldr	r1, [pc, #164]	; (8004600 <I2C_MasterRequestRead+0x194>)
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f000 f8a8 	bl	80046b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004562:	4603      	mov	r3, r0
 8004564:	2b00      	cmp	r3, #0
 8004566:	d001      	beq.n	800456c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e043      	b.n	80045f4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800456c:	2300      	movs	r3, #0
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	613b      	str	r3, [r7, #16]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	613b      	str	r3, [r7, #16]
 8004580:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f830 	bl	8004604 <I2C_WaitOnFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d00c      	beq.n	80045c4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045be:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e017      	b.n	80045f4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045c4:	897b      	ldrh	r3, [r7, #10]
 80045c6:	11db      	asrs	r3, r3, #7
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 0306 	and.w	r3, r3, #6
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	f063 030e 	orn	r3, r3, #14
 80045d4:	b2da      	uxtb	r2, r3
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4907      	ldr	r1, [pc, #28]	; (8004600 <I2C_MasterRequestRead+0x194>)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f865 	bl	80046b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e000      	b.n	80045f4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	00010008 	.word	0x00010008
 8004600:	00010002 	.word	0x00010002

08004604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004614:	e025      	b.n	8004662 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800461c:	d021      	beq.n	8004662 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800461e:	f7fc fd19 	bl	8001054 <HAL_GetTick>
 8004622:	4602      	mov	r2, r0
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	1ad3      	subs	r3, r2, r3
 8004628:	683a      	ldr	r2, [r7, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d302      	bcc.n	8004634 <I2C_WaitOnFlagUntilTimeout+0x30>
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d116      	bne.n	8004662 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0220 	orr.w	r2, r3, #32
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e023      	b.n	80046aa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	0c1b      	lsrs	r3, r3, #16
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b01      	cmp	r3, #1
 800466a:	d10d      	bne.n	8004688 <I2C_WaitOnFlagUntilTimeout+0x84>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	43da      	mvns	r2, r3
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4013      	ands	r3, r2
 8004678:	b29b      	uxth	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	bf0c      	ite	eq
 800467e:	2301      	moveq	r3, #1
 8004680:	2300      	movne	r3, #0
 8004682:	b2db      	uxtb	r3, r3
 8004684:	461a      	mov	r2, r3
 8004686:	e00c      	b.n	80046a2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	43da      	mvns	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4013      	ands	r3, r2
 8004694:	b29b      	uxth	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	bf0c      	ite	eq
 800469a:	2301      	moveq	r3, #1
 800469c:	2300      	movne	r3, #0
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	461a      	mov	r2, r3
 80046a2:	79fb      	ldrb	r3, [r7, #7]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d0b6      	beq.n	8004616 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b084      	sub	sp, #16
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	60f8      	str	r0, [r7, #12]
 80046ba:	60b9      	str	r1, [r7, #8]
 80046bc:	607a      	str	r2, [r7, #4]
 80046be:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046c0:	e051      	b.n	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	695b      	ldr	r3, [r3, #20]
 80046c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046d0:	d123      	bne.n	800471a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046e0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046ea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2200      	movs	r2, #0
 80046f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e046      	b.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004720:	d021      	beq.n	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fc fc97 	bl	8001054 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d116      	bne.n	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e020      	b.n	80047a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10c      	bne.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e00b      	b.n	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	43da      	mvns	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4013      	ands	r3, r2
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d18d      	bne.n	80046c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047bc:	e02d      	b.n	800481a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 f8ce 	bl	8004960 <I2C_IsAcknowledgeFailed>
 80047c4:	4603      	mov	r3, r0
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e02d      	b.n	800482a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047d4:	d021      	beq.n	800481a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047d6:	f7fc fc3d 	bl	8001054 <HAL_GetTick>
 80047da:	4602      	mov	r2, r0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	1ad3      	subs	r3, r2, r3
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d302      	bcc.n	80047ec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d116      	bne.n	800481a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2220      	movs	r2, #32
 80047f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004806:	f043 0220 	orr.w	r2, r3, #32
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e007      	b.n	800482a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004824:	2b80      	cmp	r3, #128	; 0x80
 8004826:	d1ca      	bne.n	80047be <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3710      	adds	r7, #16
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800483e:	e02d      	b.n	800489c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f88d 	bl	8004960 <I2C_IsAcknowledgeFailed>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e02d      	b.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004856:	d021      	beq.n	800489c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004858:	f7fc fbfc 	bl	8001054 <HAL_GetTick>
 800485c:	4602      	mov	r2, r0
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	429a      	cmp	r2, r3
 8004866:	d302      	bcc.n	800486e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d116      	bne.n	800489c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	2200      	movs	r2, #0
 8004872:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	2220      	movs	r2, #32
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004888:	f043 0220 	orr.w	r2, r3, #32
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e007      	b.n	80048ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0304 	and.w	r3, r3, #4
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d1ca      	bne.n	8004840 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048c0:	e042      	b.n	8004948 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	695b      	ldr	r3, [r3, #20]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	2b10      	cmp	r3, #16
 80048ce:	d119      	bne.n	8004904 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f06f 0210 	mvn.w	r2, #16
 80048d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	2200      	movs	r2, #0
 80048de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e029      	b.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004904:	f7fc fba6 	bl	8001054 <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	429a      	cmp	r2, r3
 8004912:	d302      	bcc.n	800491a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d116      	bne.n	8004948 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	2220      	movs	r2, #32
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2200      	movs	r2, #0
 800492c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004934:	f043 0220 	orr.w	r2, r3, #32
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e007      	b.n	8004958 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004952:	2b40      	cmp	r3, #64	; 0x40
 8004954:	d1b5      	bne.n	80048c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3710      	adds	r7, #16
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004972:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004976:	d11b      	bne.n	80049b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004980:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f043 0204 	orr.w	r2, r3, #4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e000      	b.n	80049b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049b0:	2300      	movs	r3, #0
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c0:	b08f      	sub	sp, #60	; 0x3c
 80049c2:	af0a      	add	r7, sp, #40	; 0x28
 80049c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e10f      	b.n	8004bf0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80049dc:	b2db      	uxtb	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f008 fda4 	bl	800d538 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2203      	movs	r2, #3
 80049f4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f003 ffdd 	bl	80089ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	603b      	str	r3, [r7, #0]
 8004a1a:	687e      	ldr	r6, [r7, #4]
 8004a1c:	466d      	mov	r5, sp
 8004a1e:	f106 0410 	add.w	r4, r6, #16
 8004a22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a2a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a2e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a32:	1d33      	adds	r3, r6, #4
 8004a34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a36:	6838      	ldr	r0, [r7, #0]
 8004a38:	f003 ff68 	bl	800890c <USB_CoreInit>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0d0      	b.n	8004bf0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2100      	movs	r1, #0
 8004a54:	4618      	mov	r0, r3
 8004a56:	f003 ffcb 	bl	80089f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
 8004a5e:	e04a      	b.n	8004af6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	6879      	ldr	r1, [r7, #4]
 8004a64:	4613      	mov	r3, r2
 8004a66:	00db      	lsls	r3, r3, #3
 8004a68:	1a9b      	subs	r3, r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	440b      	add	r3, r1
 8004a6e:	333d      	adds	r3, #61	; 0x3d
 8004a70:	2201      	movs	r2, #1
 8004a72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a74:	7bfa      	ldrb	r2, [r7, #15]
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	00db      	lsls	r3, r3, #3
 8004a7c:	1a9b      	subs	r3, r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	333c      	adds	r3, #60	; 0x3c
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a88:	7bfa      	ldrb	r2, [r7, #15]
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	b298      	uxth	r0, r3
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	00db      	lsls	r3, r3, #3
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	3342      	adds	r3, #66	; 0x42
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	00db      	lsls	r3, r3, #3
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	333f      	adds	r3, #63	; 0x3f
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ab4:	7bfa      	ldrb	r2, [r7, #15]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3344      	adds	r3, #68	; 0x44
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	1a9b      	subs	r3, r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	3348      	adds	r3, #72	; 0x48
 8004ad8:	2200      	movs	r2, #0
 8004ada:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004adc:	7bfa      	ldrb	r2, [r7, #15]
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	00db      	lsls	r3, r3, #3
 8004ae4:	1a9b      	subs	r3, r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	440b      	add	r3, r1
 8004aea:	3350      	adds	r3, #80	; 0x50
 8004aec:	2200      	movs	r2, #0
 8004aee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af0:	7bfb      	ldrb	r3, [r7, #15]
 8004af2:	3301      	adds	r3, #1
 8004af4:	73fb      	strb	r3, [r7, #15]
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d3af      	bcc.n	8004a60 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b00:	2300      	movs	r3, #0
 8004b02:	73fb      	strb	r3, [r7, #15]
 8004b04:	e044      	b.n	8004b90 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b06:	7bfa      	ldrb	r2, [r7, #15]
 8004b08:	6879      	ldr	r1, [r7, #4]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	1a9b      	subs	r3, r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	440b      	add	r3, r1
 8004b14:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004b18:	2200      	movs	r2, #0
 8004b1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b1c:	7bfa      	ldrb	r2, [r7, #15]
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	4613      	mov	r3, r2
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	1a9b      	subs	r3, r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004b2e:	7bfa      	ldrb	r2, [r7, #15]
 8004b30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b32:	7bfa      	ldrb	r2, [r7, #15]
 8004b34:	6879      	ldr	r1, [r7, #4]
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b48:	7bfa      	ldrb	r2, [r7, #15]
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	1a9b      	subs	r3, r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	440b      	add	r3, r1
 8004b56:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b5e:	7bfa      	ldrb	r2, [r7, #15]
 8004b60:	6879      	ldr	r1, [r7, #4]
 8004b62:	4613      	mov	r3, r2
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	1a9b      	subs	r3, r3, r2
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b70:	2200      	movs	r2, #0
 8004b72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b74:	7bfa      	ldrb	r2, [r7, #15]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	440b      	add	r3, r1
 8004b82:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004b86:	2200      	movs	r2, #0
 8004b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d3b5      	bcc.n	8004b06 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	603b      	str	r3, [r7, #0]
 8004ba0:	687e      	ldr	r6, [r7, #4]
 8004ba2:	466d      	mov	r5, sp
 8004ba4:	f106 0410 	add.w	r4, r6, #16
 8004ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bb8:	1d33      	adds	r3, r6, #4
 8004bba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bbc:	6838      	ldr	r0, [r7, #0]
 8004bbe:	f003 ff41 	bl	8008a44 <USB_DevInit>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e00d      	b.n	8004bf0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2201      	movs	r2, #1
 8004be0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4618      	mov	r0, r3
 8004bea:	f004 f8fe 	bl	8008dea <USB_DevDisconnect>

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3714      	adds	r7, #20
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004bf8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e25b      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d075      	beq.n	8004d02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c16:	4ba3      	ldr	r3, [pc, #652]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	f003 030c 	and.w	r3, r3, #12
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d00c      	beq.n	8004c3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c22:	4ba0      	ldr	r3, [pc, #640]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c2a:	2b08      	cmp	r3, #8
 8004c2c:	d112      	bne.n	8004c54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c2e:	4b9d      	ldr	r3, [pc, #628]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3a:	d10b      	bne.n	8004c54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c3c:	4b99      	ldr	r3, [pc, #612]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d05b      	beq.n	8004d00 <HAL_RCC_OscConfig+0x108>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d157      	bne.n	8004d00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e236      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c5c:	d106      	bne.n	8004c6c <HAL_RCC_OscConfig+0x74>
 8004c5e:	4b91      	ldr	r3, [pc, #580]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a90      	ldr	r2, [pc, #576]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c68:	6013      	str	r3, [r2, #0]
 8004c6a:	e01d      	b.n	8004ca8 <HAL_RCC_OscConfig+0xb0>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c74:	d10c      	bne.n	8004c90 <HAL_RCC_OscConfig+0x98>
 8004c76:	4b8b      	ldr	r3, [pc, #556]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a8a      	ldr	r2, [pc, #552]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a87      	ldr	r2, [pc, #540]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8c:	6013      	str	r3, [r2, #0]
 8004c8e:	e00b      	b.n	8004ca8 <HAL_RCC_OscConfig+0xb0>
 8004c90:	4b84      	ldr	r3, [pc, #528]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a83      	ldr	r2, [pc, #524]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9a:	6013      	str	r3, [r2, #0]
 8004c9c:	4b81      	ldr	r3, [pc, #516]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a80      	ldr	r2, [pc, #512]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004ca2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ca6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d013      	beq.n	8004cd8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb0:	f7fc f9d0 	bl	8001054 <HAL_GetTick>
 8004cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cb6:	e008      	b.n	8004cca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cb8:	f7fc f9cc 	bl	8001054 <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	1ad3      	subs	r3, r2, r3
 8004cc2:	2b64      	cmp	r3, #100	; 0x64
 8004cc4:	d901      	bls.n	8004cca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e1fb      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cca:	4b76      	ldr	r3, [pc, #472]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d0f0      	beq.n	8004cb8 <HAL_RCC_OscConfig+0xc0>
 8004cd6:	e014      	b.n	8004d02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd8:	f7fc f9bc 	bl	8001054 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ce0:	f7fc f9b8 	bl	8001054 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b64      	cmp	r3, #100	; 0x64
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e1e7      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cf2:	4b6c      	ldr	r3, [pc, #432]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1f0      	bne.n	8004ce0 <HAL_RCC_OscConfig+0xe8>
 8004cfe:	e000      	b.n	8004d02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d063      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d0e:	4b65      	ldr	r3, [pc, #404]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	f003 030c 	and.w	r3, r3, #12
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d1a:	4b62      	ldr	r3, [pc, #392]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d11c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d26:	4b5f      	ldr	r3, [pc, #380]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d116      	bne.n	8004d60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d32:	4b5c      	ldr	r3, [pc, #368]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 0302 	and.w	r3, r3, #2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_RCC_OscConfig+0x152>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d001      	beq.n	8004d4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e1bb      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d4a:	4b56      	ldr	r3, [pc, #344]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	4952      	ldr	r1, [pc, #328]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d5e:	e03a      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d020      	beq.n	8004daa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d68:	4b4f      	ldr	r3, [pc, #316]	; (8004ea8 <HAL_RCC_OscConfig+0x2b0>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6e:	f7fc f971 	bl	8001054 <HAL_GetTick>
 8004d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d76:	f7fc f96d 	bl	8001054 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b02      	cmp	r3, #2
 8004d82:	d901      	bls.n	8004d88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e19c      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d88:	4b46      	ldr	r3, [pc, #280]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0302 	and.w	r3, r3, #2
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d94:	4b43      	ldr	r3, [pc, #268]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	4940      	ldr	r1, [pc, #256]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	600b      	str	r3, [r1, #0]
 8004da8:	e015      	b.n	8004dd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004daa:	4b3f      	ldr	r3, [pc, #252]	; (8004ea8 <HAL_RCC_OscConfig+0x2b0>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db0:	f7fc f950 	bl	8001054 <HAL_GetTick>
 8004db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004db6:	e008      	b.n	8004dca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db8:	f7fc f94c 	bl	8001054 <HAL_GetTick>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	693b      	ldr	r3, [r7, #16]
 8004dc0:	1ad3      	subs	r3, r2, r3
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d901      	bls.n	8004dca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e17b      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dca:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1f0      	bne.n	8004db8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0308 	and.w	r3, r3, #8
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d030      	beq.n	8004e44 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d016      	beq.n	8004e18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dea:	4b30      	ldr	r3, [pc, #192]	; (8004eac <HAL_RCC_OscConfig+0x2b4>)
 8004dec:	2201      	movs	r2, #1
 8004dee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fc f930 	bl	8001054 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004df8:	f7fc f92c 	bl	8001054 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e15b      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e0a:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	f003 0302 	and.w	r3, r3, #2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <HAL_RCC_OscConfig+0x200>
 8004e16:	e015      	b.n	8004e44 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e18:	4b24      	ldr	r3, [pc, #144]	; (8004eac <HAL_RCC_OscConfig+0x2b4>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1e:	f7fc f919 	bl	8001054 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e24:	e008      	b.n	8004e38 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e26:	f7fc f915 	bl	8001054 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	2b02      	cmp	r3, #2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e144      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e38:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f0      	bne.n	8004e26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 80a0 	beq.w	8004f92 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e52:	2300      	movs	r3, #0
 8004e54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10f      	bne.n	8004e82 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e62:	2300      	movs	r3, #0
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6a:	4a0e      	ldr	r2, [pc, #56]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e70:	6413      	str	r3, [r2, #64]	; 0x40
 8004e72:	4b0c      	ldr	r3, [pc, #48]	; (8004ea4 <HAL_RCC_OscConfig+0x2ac>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e7a:	60bb      	str	r3, [r7, #8]
 8004e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_OscConfig+0x2b8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d121      	bne.n	8004ed2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e8e:	4b08      	ldr	r3, [pc, #32]	; (8004eb0 <HAL_RCC_OscConfig+0x2b8>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4a07      	ldr	r2, [pc, #28]	; (8004eb0 <HAL_RCC_OscConfig+0x2b8>)
 8004e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e9a:	f7fc f8db 	bl	8001054 <HAL_GetTick>
 8004e9e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ea0:	e011      	b.n	8004ec6 <HAL_RCC_OscConfig+0x2ce>
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	42470000 	.word	0x42470000
 8004eac:	42470e80 	.word	0x42470e80
 8004eb0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004eb4:	f7fc f8ce 	bl	8001054 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e0fd      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec6:	4b81      	ldr	r3, [pc, #516]	; (80050cc <HAL_RCC_OscConfig+0x4d4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d0f0      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d106      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x2f0>
 8004eda:	4b7d      	ldr	r3, [pc, #500]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ede:	4a7c      	ldr	r2, [pc, #496]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004ee0:	f043 0301 	orr.w	r3, r3, #1
 8004ee4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ee6:	e01c      	b.n	8004f22 <HAL_RCC_OscConfig+0x32a>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	2b05      	cmp	r3, #5
 8004eee:	d10c      	bne.n	8004f0a <HAL_RCC_OscConfig+0x312>
 8004ef0:	4b77      	ldr	r3, [pc, #476]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef4:	4a76      	ldr	r2, [pc, #472]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004ef6:	f043 0304 	orr.w	r3, r3, #4
 8004efa:	6713      	str	r3, [r2, #112]	; 0x70
 8004efc:	4b74      	ldr	r3, [pc, #464]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f00:	4a73      	ldr	r2, [pc, #460]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f02:	f043 0301 	orr.w	r3, r3, #1
 8004f06:	6713      	str	r3, [r2, #112]	; 0x70
 8004f08:	e00b      	b.n	8004f22 <HAL_RCC_OscConfig+0x32a>
 8004f0a:	4b71      	ldr	r3, [pc, #452]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	4a70      	ldr	r2, [pc, #448]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f10:	f023 0301 	bic.w	r3, r3, #1
 8004f14:	6713      	str	r3, [r2, #112]	; 0x70
 8004f16:	4b6e      	ldr	r3, [pc, #440]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f1a:	4a6d      	ldr	r2, [pc, #436]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f1c:	f023 0304 	bic.w	r3, r3, #4
 8004f20:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d015      	beq.n	8004f56 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f2a:	f7fc f893 	bl	8001054 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f30:	e00a      	b.n	8004f48 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f32:	f7fc f88f 	bl	8001054 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d901      	bls.n	8004f48 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f44:	2303      	movs	r3, #3
 8004f46:	e0bc      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f48:	4b61      	ldr	r3, [pc, #388]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4c:	f003 0302 	and.w	r3, r3, #2
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0ee      	beq.n	8004f32 <HAL_RCC_OscConfig+0x33a>
 8004f54:	e014      	b.n	8004f80 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f56:	f7fc f87d 	bl	8001054 <HAL_GetTick>
 8004f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f5c:	e00a      	b.n	8004f74 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f5e:	f7fc f879 	bl	8001054 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d901      	bls.n	8004f74 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f70:	2303      	movs	r3, #3
 8004f72:	e0a6      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f74:	4b56      	ldr	r3, [pc, #344]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f78:	f003 0302 	and.w	r3, r3, #2
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d1ee      	bne.n	8004f5e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f80:	7dfb      	ldrb	r3, [r7, #23]
 8004f82:	2b01      	cmp	r3, #1
 8004f84:	d105      	bne.n	8004f92 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f86:	4b52      	ldr	r3, [pc, #328]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	4a51      	ldr	r2, [pc, #324]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f90:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f000 8092 	beq.w	80050c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f9c:	4b4c      	ldr	r3, [pc, #304]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 030c 	and.w	r3, r3, #12
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d05c      	beq.n	8005062 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d141      	bne.n	8005034 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fb0:	4b48      	ldr	r3, [pc, #288]	; (80050d4 <HAL_RCC_OscConfig+0x4dc>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb6:	f7fc f84d 	bl	8001054 <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fbe:	f7fc f849 	bl	8001054 <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e078      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fd0:	4b3f      	ldr	r3, [pc, #252]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1f0      	bne.n	8004fbe <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	69da      	ldr	r2, [r3, #28]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	019b      	lsls	r3, r3, #6
 8004fec:	431a      	orrs	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ff2:	085b      	lsrs	r3, r3, #1
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	041b      	lsls	r3, r3, #16
 8004ff8:	431a      	orrs	r2, r3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ffe:	061b      	lsls	r3, r3, #24
 8005000:	4933      	ldr	r1, [pc, #204]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8005002:	4313      	orrs	r3, r2
 8005004:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005006:	4b33      	ldr	r3, [pc, #204]	; (80050d4 <HAL_RCC_OscConfig+0x4dc>)
 8005008:	2201      	movs	r2, #1
 800500a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500c:	f7fc f822 	bl	8001054 <HAL_GetTick>
 8005010:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005012:	e008      	b.n	8005026 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005014:	f7fc f81e 	bl	8001054 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	2b02      	cmp	r3, #2
 8005020:	d901      	bls.n	8005026 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e04d      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005026:	4b2a      	ldr	r3, [pc, #168]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0f0      	beq.n	8005014 <HAL_RCC_OscConfig+0x41c>
 8005032:	e045      	b.n	80050c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005034:	4b27      	ldr	r3, [pc, #156]	; (80050d4 <HAL_RCC_OscConfig+0x4dc>)
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800503a:	f7fc f80b 	bl	8001054 <HAL_GetTick>
 800503e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005040:	e008      	b.n	8005054 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005042:	f7fc f807 	bl	8001054 <HAL_GetTick>
 8005046:	4602      	mov	r2, r0
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	1ad3      	subs	r3, r2, r3
 800504c:	2b02      	cmp	r3, #2
 800504e:	d901      	bls.n	8005054 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005050:	2303      	movs	r3, #3
 8005052:	e036      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005054:	4b1e      	ldr	r3, [pc, #120]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f0      	bne.n	8005042 <HAL_RCC_OscConfig+0x44a>
 8005060:	e02e      	b.n	80050c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d101      	bne.n	800506e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e029      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800506e:	4b18      	ldr	r3, [pc, #96]	; (80050d0 <HAL_RCC_OscConfig+0x4d8>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	69db      	ldr	r3, [r3, #28]
 800507e:	429a      	cmp	r2, r3
 8005080:	d11c      	bne.n	80050bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d115      	bne.n	80050bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005096:	4013      	ands	r3, r2
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800509c:	4293      	cmp	r3, r2
 800509e:	d10d      	bne.n	80050bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d106      	bne.n	80050bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d001      	beq.n	80050c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3718      	adds	r7, #24
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40007000 	.word	0x40007000
 80050d0:	40023800 	.word	0x40023800
 80050d4:	42470060 	.word	0x42470060

080050d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0cc      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050ec:	4b68      	ldr	r3, [pc, #416]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d90c      	bls.n	8005114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b65      	ldr	r3, [pc, #404]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b63      	ldr	r3, [pc, #396]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e0b8      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d020      	beq.n	8005162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800512c:	4b59      	ldr	r3, [pc, #356]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a58      	ldr	r2, [pc, #352]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005144:	4b53      	ldr	r3, [pc, #332]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4a52      	ldr	r2, [pc, #328]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800514e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005150:	4b50      	ldr	r3, [pc, #320]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	494d      	ldr	r1, [pc, #308]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d044      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d107      	bne.n	8005186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005176:	4b47      	ldr	r3, [pc, #284]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d119      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e07f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d003      	beq.n	8005196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005192:	2b03      	cmp	r3, #3
 8005194:	d107      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005196:	4b3f      	ldr	r3, [pc, #252]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e06f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a6:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e067      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051b6:	4b37      	ldr	r3, [pc, #220]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f023 0203 	bic.w	r2, r3, #3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4934      	ldr	r1, [pc, #208]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051c8:	f7fb ff44 	bl	8001054 <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ce:	e00a      	b.n	80051e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d0:	f7fb ff40 	bl	8001054 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	; 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e04f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e6:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 020c 	and.w	r2, r3, #12
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d1eb      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d20c      	bcs.n	8005220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005206:	4b22      	ldr	r3, [pc, #136]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e032      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	4916      	ldr	r1, [pc, #88]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524a:	4b12      	ldr	r3, [pc, #72]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	490e      	ldr	r1, [pc, #56]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800525e:	f000 f82d 	bl	80052bc <HAL_RCC_GetSysClockFreq>
 8005262:	4601      	mov	r1, r0
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	4a0a      	ldr	r2, [pc, #40]	; (8005298 <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	5cd3      	ldrb	r3, [r2, r3]
 8005272:	fa21 f303 	lsr.w	r3, r1, r3
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 8005278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7fb fea4 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40023c00 	.word	0x40023c00
 8005294:	40023800 	.word	0x40023800
 8005298:	08010f58 	.word	0x08010f58
 800529c:	20000038 	.word	0x20000038
 80052a0:	20000000 	.word	0x20000000

080052a4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <HAL_RCC_EnableCSS+0x14>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	601a      	str	r2, [r3, #0]
}
 80052ae:	bf00      	nop
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	4247004c 	.word	0x4247004c

080052bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80052c2:	2300      	movs	r3, #0
 80052c4:	607b      	str	r3, [r7, #4]
 80052c6:	2300      	movs	r3, #0
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	2300      	movs	r3, #0
 80052cc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052ce:	2300      	movs	r3, #0
 80052d0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052d2:	4b63      	ldr	r3, [pc, #396]	; (8005460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 030c 	and.w	r3, r3, #12
 80052da:	2b04      	cmp	r3, #4
 80052dc:	d007      	beq.n	80052ee <HAL_RCC_GetSysClockFreq+0x32>
 80052de:	2b08      	cmp	r3, #8
 80052e0:	d008      	beq.n	80052f4 <HAL_RCC_GetSysClockFreq+0x38>
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 80b4 	bne.w	8005450 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052e8:	4b5e      	ldr	r3, [pc, #376]	; (8005464 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052ea:	60bb      	str	r3, [r7, #8]
       break;
 80052ec:	e0b3      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052ee:	4b5e      	ldr	r3, [pc, #376]	; (8005468 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052f0:	60bb      	str	r3, [r7, #8]
      break;
 80052f2:	e0b0      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052f4:	4b5a      	ldr	r3, [pc, #360]	; (8005460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052fc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052fe:	4b58      	ldr	r3, [pc, #352]	; (8005460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d04a      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800530a:	4b55      	ldr	r3, [pc, #340]	; (8005460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	099b      	lsrs	r3, r3, #6
 8005310:	f04f 0400 	mov.w	r4, #0
 8005314:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	ea03 0501 	and.w	r5, r3, r1
 8005320:	ea04 0602 	and.w	r6, r4, r2
 8005324:	4629      	mov	r1, r5
 8005326:	4632      	mov	r2, r6
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	f04f 0400 	mov.w	r4, #0
 8005330:	0154      	lsls	r4, r2, #5
 8005332:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005336:	014b      	lsls	r3, r1, #5
 8005338:	4619      	mov	r1, r3
 800533a:	4622      	mov	r2, r4
 800533c:	1b49      	subs	r1, r1, r5
 800533e:	eb62 0206 	sbc.w	r2, r2, r6
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	f04f 0400 	mov.w	r4, #0
 800534a:	0194      	lsls	r4, r2, #6
 800534c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005350:	018b      	lsls	r3, r1, #6
 8005352:	1a5b      	subs	r3, r3, r1
 8005354:	eb64 0402 	sbc.w	r4, r4, r2
 8005358:	f04f 0100 	mov.w	r1, #0
 800535c:	f04f 0200 	mov.w	r2, #0
 8005360:	00e2      	lsls	r2, r4, #3
 8005362:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005366:	00d9      	lsls	r1, r3, #3
 8005368:	460b      	mov	r3, r1
 800536a:	4614      	mov	r4, r2
 800536c:	195b      	adds	r3, r3, r5
 800536e:	eb44 0406 	adc.w	r4, r4, r6
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	0262      	lsls	r2, r4, #9
 800537c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005380:	0259      	lsls	r1, r3, #9
 8005382:	460b      	mov	r3, r1
 8005384:	4614      	mov	r4, r2
 8005386:	4618      	mov	r0, r3
 8005388:	4621      	mov	r1, r4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f04f 0400 	mov.w	r4, #0
 8005390:	461a      	mov	r2, r3
 8005392:	4623      	mov	r3, r4
 8005394:	f7fb fc78 	bl	8000c88 <__aeabi_uldivmod>
 8005398:	4603      	mov	r3, r0
 800539a:	460c      	mov	r4, r1
 800539c:	60fb      	str	r3, [r7, #12]
 800539e:	e049      	b.n	8005434 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80053a0:	4b2f      	ldr	r3, [pc, #188]	; (8005460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	099b      	lsrs	r3, r3, #6
 80053a6:	f04f 0400 	mov.w	r4, #0
 80053aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	ea03 0501 	and.w	r5, r3, r1
 80053b6:	ea04 0602 	and.w	r6, r4, r2
 80053ba:	4629      	mov	r1, r5
 80053bc:	4632      	mov	r2, r6
 80053be:	f04f 0300 	mov.w	r3, #0
 80053c2:	f04f 0400 	mov.w	r4, #0
 80053c6:	0154      	lsls	r4, r2, #5
 80053c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053cc:	014b      	lsls	r3, r1, #5
 80053ce:	4619      	mov	r1, r3
 80053d0:	4622      	mov	r2, r4
 80053d2:	1b49      	subs	r1, r1, r5
 80053d4:	eb62 0206 	sbc.w	r2, r2, r6
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	f04f 0400 	mov.w	r4, #0
 80053e0:	0194      	lsls	r4, r2, #6
 80053e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053e6:	018b      	lsls	r3, r1, #6
 80053e8:	1a5b      	subs	r3, r3, r1
 80053ea:	eb64 0402 	sbc.w	r4, r4, r2
 80053ee:	f04f 0100 	mov.w	r1, #0
 80053f2:	f04f 0200 	mov.w	r2, #0
 80053f6:	00e2      	lsls	r2, r4, #3
 80053f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053fc:	00d9      	lsls	r1, r3, #3
 80053fe:	460b      	mov	r3, r1
 8005400:	4614      	mov	r4, r2
 8005402:	195b      	adds	r3, r3, r5
 8005404:	eb44 0406 	adc.w	r4, r4, r6
 8005408:	f04f 0100 	mov.w	r1, #0
 800540c:	f04f 0200 	mov.w	r2, #0
 8005410:	02a2      	lsls	r2, r4, #10
 8005412:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005416:	0299      	lsls	r1, r3, #10
 8005418:	460b      	mov	r3, r1
 800541a:	4614      	mov	r4, r2
 800541c:	4618      	mov	r0, r3
 800541e:	4621      	mov	r1, r4
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	f04f 0400 	mov.w	r4, #0
 8005426:	461a      	mov	r2, r3
 8005428:	4623      	mov	r3, r4
 800542a:	f7fb fc2d 	bl	8000c88 <__aeabi_uldivmod>
 800542e:	4603      	mov	r3, r0
 8005430:	460c      	mov	r4, r1
 8005432:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005434:	4b0a      	ldr	r3, [pc, #40]	; (8005460 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	0c1b      	lsrs	r3, r3, #16
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	3301      	adds	r3, #1
 8005440:	005b      	lsls	r3, r3, #1
 8005442:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005444:	68fa      	ldr	r2, [r7, #12]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	fbb2 f3f3 	udiv	r3, r2, r3
 800544c:	60bb      	str	r3, [r7, #8]
      break;
 800544e:	e002      	b.n	8005456 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005450:	4b04      	ldr	r3, [pc, #16]	; (8005464 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005452:	60bb      	str	r3, [r7, #8]
      break;
 8005454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005456:	68bb      	ldr	r3, [r7, #8]
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005460:	40023800 	.word	0x40023800
 8005464:	00f42400 	.word	0x00f42400
 8005468:	007a1200 	.word	0x007a1200

0800546c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005470:	4b03      	ldr	r3, [pc, #12]	; (8005480 <HAL_RCC_GetHCLKFreq+0x14>)
 8005472:	681b      	ldr	r3, [r3, #0]
}
 8005474:	4618      	mov	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr
 800547e:	bf00      	nop
 8005480:	20000038 	.word	0x20000038

08005484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005488:	f7ff fff0 	bl	800546c <HAL_RCC_GetHCLKFreq>
 800548c:	4601      	mov	r1, r0
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0a9b      	lsrs	r3, r3, #10
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4a03      	ldr	r2, [pc, #12]	; (80054a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800549a:	5cd3      	ldrb	r3, [r2, r3]
 800549c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023800 	.word	0x40023800
 80054a8:	08010f68 	.word	0x08010f68

080054ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054b0:	f7ff ffdc 	bl	800546c <HAL_RCC_GetHCLKFreq>
 80054b4:	4601      	mov	r1, r0
 80054b6:	4b05      	ldr	r3, [pc, #20]	; (80054cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	0b5b      	lsrs	r3, r3, #13
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	4a03      	ldr	r2, [pc, #12]	; (80054d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054c2:	5cd3      	ldrb	r3, [r2, r3]
 80054c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40023800 	.word	0x40023800
 80054d0:	08010f68 	.word	0x08010f68

080054d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80054e0:	2300      	movs	r3, #0
 80054e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d105      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d035      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054fc:	4b62      	ldr	r3, [pc, #392]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005502:	f7fb fda7 	bl	8001054 <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005508:	e008      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800550a:	f7fb fda3 	bl	8001054 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e0b0      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800551c:	4b5b      	ldr	r3, [pc, #364]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d1f0      	bne.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	019a      	lsls	r2, r3, #6
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	071b      	lsls	r3, r3, #28
 8005534:	4955      	ldr	r1, [pc, #340]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800553c:	4b52      	ldr	r3, [pc, #328]	; (8005688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005542:	f7fb fd87 	bl	8001054 <HAL_GetTick>
 8005546:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005548:	e008      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800554a:	f7fb fd83 	bl	8001054 <HAL_GetTick>
 800554e:	4602      	mov	r2, r0
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	2b02      	cmp	r3, #2
 8005556:	d901      	bls.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005558:	2303      	movs	r3, #3
 800555a:	e090      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800555c:	4b4b      	ldr	r3, [pc, #300]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d0f0      	beq.n	800554a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 0302 	and.w	r3, r3, #2
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 8083 	beq.w	800567c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
 800557a:	4b44      	ldr	r3, [pc, #272]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800557c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557e:	4a43      	ldr	r2, [pc, #268]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005584:	6413      	str	r3, [r2, #64]	; 0x40
 8005586:	4b41      	ldr	r3, [pc, #260]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800558e:	60fb      	str	r3, [r7, #12]
 8005590:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a3e      	ldr	r2, [pc, #248]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800559e:	f7fb fd59 	bl	8001054 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055a4:	e008      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055a6:	f7fb fd55 	bl	8001054 <HAL_GetTick>
 80055aa:	4602      	mov	r2, r0
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	1ad3      	subs	r3, r2, r3
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d901      	bls.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80055b4:	2303      	movs	r3, #3
 80055b6:	e062      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80055b8:	4b35      	ldr	r3, [pc, #212]	; (8005690 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d0f0      	beq.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80055c4:	4b31      	ldr	r3, [pc, #196]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055cc:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d02f      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055dc:	693a      	ldr	r2, [r7, #16]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d028      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80055e2:	4b2a      	ldr	r3, [pc, #168]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055ea:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055ec:	4b29      	ldr	r3, [pc, #164]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055ee:	2201      	movs	r2, #1
 80055f0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055f2:	4b28      	ldr	r3, [pc, #160]	; (8005694 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055f4:	2200      	movs	r2, #0
 80055f6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055f8:	4a24      	ldr	r2, [pc, #144]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055fe:	4b23      	ldr	r3, [pc, #140]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d114      	bne.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800560a:	f7fb fd23 	bl	8001054 <HAL_GetTick>
 800560e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005610:	e00a      	b.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005612:	f7fb fd1f 	bl	8001054 <HAL_GetTick>
 8005616:	4602      	mov	r2, r0
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	1ad3      	subs	r3, r2, r3
 800561c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005620:	4293      	cmp	r3, r2
 8005622:	d901      	bls.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e02a      	b.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005628:	4b18      	ldr	r3, [pc, #96]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800562a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562c:	f003 0302 	and.w	r3, r3, #2
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0ee      	beq.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800563c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005640:	d10d      	bne.n	800565e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005642:	4b12      	ldr	r3, [pc, #72]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005656:	490d      	ldr	r1, [pc, #52]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005658:	4313      	orrs	r3, r2
 800565a:	608b      	str	r3, [r1, #8]
 800565c:	e005      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	4a0a      	ldr	r2, [pc, #40]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005664:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005668:	6093      	str	r3, [r2, #8]
 800566a:	4b08      	ldr	r3, [pc, #32]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800566c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005676:	4905      	ldr	r1, [pc, #20]	; (800568c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005678:	4313      	orrs	r3, r2
 800567a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	3718      	adds	r7, #24
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}
 8005686:	bf00      	nop
 8005688:	42470068 	.word	0x42470068
 800568c:	40023800 	.word	0x40023800
 8005690:	40007000 	.word	0x40007000
 8005694:	42470e40 	.word	0x42470e40

08005698 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e083      	b.n	80057b2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	7f5b      	ldrb	r3, [r3, #29]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d105      	bne.n	80056c0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f007 fc5c 	bl	800cf78 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2202      	movs	r2, #2
 80056c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	22ca      	movs	r2, #202	; 0xca
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2253      	movs	r2, #83	; 0x53
 80056d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 f897 	bl	800580a <RTC_EnterInitMode>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d008      	beq.n	80056f4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	22ff      	movs	r2, #255	; 0xff
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2204      	movs	r2, #4
 80056ee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e05e      	b.n	80057b2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	689b      	ldr	r3, [r3, #8]
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6812      	ldr	r2, [r2, #0]
 80056fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005706:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6899      	ldr	r1, [r3, #8]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685a      	ldr	r2, [r3, #4]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	431a      	orrs	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	431a      	orrs	r2, r3
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	430a      	orrs	r2, r1
 8005724:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	68d2      	ldr	r2, [r2, #12]
 800572e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6919      	ldr	r1, [r3, #16]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	689b      	ldr	r3, [r3, #8]
 800573a:	041a      	lsls	r2, r3, #16
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	430a      	orrs	r2, r1
 8005742:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	68da      	ldr	r2, [r3, #12]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005752:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f003 0320 	and.w	r3, r3, #32
 800575e:	2b00      	cmp	r3, #0
 8005760:	d10e      	bne.n	8005780 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f000 f829 	bl	80057ba <HAL_RTC_WaitForSynchro>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d008      	beq.n	8005780 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	22ff      	movs	r2, #255	; 0xff
 8005774:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2204      	movs	r2, #4
 800577a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e018      	b.n	80057b2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800578e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	699a      	ldr	r2, [r3, #24]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	22ff      	movs	r2, #255	; 0xff
 80057a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80057b0:	2300      	movs	r3, #0
  }
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}

080057ba <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80057ba:	b580      	push	{r7, lr}
 80057bc:	b084      	sub	sp, #16
 80057be:	af00      	add	r7, sp, #0
 80057c0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057c2:	2300      	movs	r3, #0
 80057c4:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80057d6:	f7fb fc3d 	bl	8001054 <HAL_GetTick>
 80057da:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80057dc:	e009      	b.n	80057f2 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80057de:	f7fb fc39 	bl	8001054 <HAL_GetTick>
 80057e2:	4602      	mov	r2, r0
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1ad3      	subs	r3, r2, r3
 80057e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057ec:	d901      	bls.n	80057f2 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e007      	b.n	8005802 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	f003 0320 	and.w	r3, r3, #32
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0ee      	beq.n	80057de <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	d119      	bne.n	8005858 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800582c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800582e:	f7fb fc11 	bl	8001054 <HAL_GetTick>
 8005832:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005834:	e009      	b.n	800584a <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005836:	f7fb fc0d 	bl	8001054 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	1ad3      	subs	r3, r2, r3
 8005840:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005844:	d901      	bls.n	800584a <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e007      	b.n	800585a <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0ee      	beq.n	8005836 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3710      	adds	r7, #16
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}

08005862 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005862:	b580      	push	{r7, lr}
 8005864:	b082      	sub	sp, #8
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005870:	2301      	movs	r3, #1
 8005872:	e056      	b.n	8005922 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005880:	b2db      	uxtb	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d106      	bne.n	8005894 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f007 fb88 	bl	800cfa4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058aa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	431a      	orrs	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	69db      	ldr	r3, [r3, #28]
 80058d6:	431a      	orrs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a1b      	ldr	r3, [r3, #32]
 80058dc:	ea42 0103 	orr.w	r1, r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	699b      	ldr	r3, [r3, #24]
 80058f0:	0c1b      	lsrs	r3, r3, #16
 80058f2:	f003 0104 	and.w	r1, r3, #4
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	69da      	ldr	r2, [r3, #28]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005910:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b088      	sub	sp, #32
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	603b      	str	r3, [r7, #0]
 8005936:	4613      	mov	r3, r2
 8005938:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005944:	2b01      	cmp	r3, #1
 8005946:	d101      	bne.n	800594c <HAL_SPI_Transmit+0x22>
 8005948:	2302      	movs	r3, #2
 800594a:	e11e      	b.n	8005b8a <HAL_SPI_Transmit+0x260>
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005954:	f7fb fb7e 	bl	8001054 <HAL_GetTick>
 8005958:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800595a:	88fb      	ldrh	r3, [r7, #6]
 800595c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b01      	cmp	r3, #1
 8005968:	d002      	beq.n	8005970 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800596a:	2302      	movs	r3, #2
 800596c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800596e:	e103      	b.n	8005b78 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d002      	beq.n	800597c <HAL_SPI_Transmit+0x52>
 8005976:	88fb      	ldrh	r3, [r7, #6]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d102      	bne.n	8005982 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005980:	e0fa      	b.n	8005b78 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2203      	movs	r2, #3
 8005986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	88fa      	ldrh	r2, [r7, #6]
 80059a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2200      	movs	r2, #0
 80059ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2200      	movs	r2, #0
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059c8:	d107      	bne.n	80059da <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e4:	2b40      	cmp	r3, #64	; 0x40
 80059e6:	d007      	beq.n	80059f8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a00:	d14b      	bne.n	8005a9a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d002      	beq.n	8005a10 <HAL_SPI_Transmit+0xe6>
 8005a0a:	8afb      	ldrh	r3, [r7, #22]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d13e      	bne.n	8005a8e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a14:	881a      	ldrh	r2, [r3, #0]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	1c9a      	adds	r2, r3, #2
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a34:	e02b      	b.n	8005a8e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d112      	bne.n	8005a6a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a48:	881a      	ldrh	r2, [r3, #0]
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a54:	1c9a      	adds	r2, r3, #2
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	86da      	strh	r2, [r3, #54]	; 0x36
 8005a68:	e011      	b.n	8005a8e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a6a:	f7fb faf3 	bl	8001054 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d803      	bhi.n	8005a82 <HAL_SPI_Transmit+0x158>
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a80:	d102      	bne.n	8005a88 <HAL_SPI_Transmit+0x15e>
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d102      	bne.n	8005a8e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a8c:	e074      	b.n	8005b78 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1ce      	bne.n	8005a36 <HAL_SPI_Transmit+0x10c>
 8005a98:	e04c      	b.n	8005b34 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	685b      	ldr	r3, [r3, #4]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_SPI_Transmit+0x17e>
 8005aa2:	8afb      	ldrh	r3, [r7, #22]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d140      	bne.n	8005b2a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	330c      	adds	r3, #12
 8005ab2:	7812      	ldrb	r2, [r2, #0]
 8005ab4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ace:	e02c      	b.n	8005b2a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d113      	bne.n	8005b06 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	330c      	adds	r3, #12
 8005ae8:	7812      	ldrb	r2, [r2, #0]
 8005aea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	1c5a      	adds	r2, r3, #1
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	3b01      	subs	r3, #1
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	86da      	strh	r2, [r3, #54]	; 0x36
 8005b04:	e011      	b.n	8005b2a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b06:	f7fb faa5 	bl	8001054 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	683a      	ldr	r2, [r7, #0]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d803      	bhi.n	8005b1e <HAL_SPI_Transmit+0x1f4>
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b1c:	d102      	bne.n	8005b24 <HAL_SPI_Transmit+0x1fa>
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d102      	bne.n	8005b2a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b28:	e026      	b.n	8005b78 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d1cd      	bne.n	8005ad0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 fcc3 	bl	80064c4 <SPI_EndRxTxTransaction>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2220      	movs	r2, #32
 8005b48:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10a      	bne.n	8005b68 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b52:	2300      	movs	r3, #0
 8005b54:	613b      	str	r3, [r7, #16]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	613b      	str	r3, [r7, #16]
 8005b66:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d002      	beq.n	8005b76 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	77fb      	strb	r3, [r7, #31]
 8005b74:	e000      	b.n	8005b78 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005b76:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	2200      	movs	r2, #0
 8005b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005b88:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3720      	adds	r7, #32
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b088      	sub	sp, #32
 8005b96:	af02      	add	r7, sp, #8
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	603b      	str	r3, [r7, #0]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bae:	d112      	bne.n	8005bd6 <HAL_SPI_Receive+0x44>
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10e      	bne.n	8005bd6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2204      	movs	r2, #4
 8005bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bc0:	88fa      	ldrh	r2, [r7, #6]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	68f8      	ldr	r0, [r7, #12]
 8005bce:	f000 f8e9 	bl	8005da4 <HAL_SPI_TransmitReceive>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	e0e2      	b.n	8005d9c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d101      	bne.n	8005be4 <HAL_SPI_Receive+0x52>
 8005be0:	2302      	movs	r3, #2
 8005be2:	e0db      	b.n	8005d9c <HAL_SPI_Receive+0x20a>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2201      	movs	r2, #1
 8005be8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bec:	f7fb fa32 	bl	8001054 <HAL_GetTick>
 8005bf0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d002      	beq.n	8005c04 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005bfe:	2302      	movs	r3, #2
 8005c00:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c02:	e0c2      	b.n	8005d8a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <HAL_SPI_Receive+0x7e>
 8005c0a:	88fb      	ldrh	r3, [r7, #6]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d102      	bne.n	8005c16 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c14:	e0b9      	b.n	8005d8a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2204      	movs	r2, #4
 8005c1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68ba      	ldr	r2, [r7, #8]
 8005c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	88fa      	ldrh	r2, [r7, #6]
 8005c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2200      	movs	r2, #0
 8005c40:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	2200      	movs	r2, #0
 8005c46:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2200      	movs	r2, #0
 8005c52:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c5c:	d107      	bne.n	8005c6e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005c6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c78:	2b40      	cmp	r3, #64	; 0x40
 8005c7a:	d007      	beq.n	8005c8c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d162      	bne.n	8005d5a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c94:	e02e      	b.n	8005cf4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d115      	bne.n	8005cd0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f103 020c 	add.w	r2, r3, #12
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cce:	e011      	b.n	8005cf4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd0:	f7fb f9c0 	bl	8001054 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d803      	bhi.n	8005ce8 <HAL_SPI_Receive+0x156>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ce6:	d102      	bne.n	8005cee <HAL_SPI_Receive+0x15c>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d102      	bne.n	8005cf4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005cf2:	e04a      	b.n	8005d8a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1cb      	bne.n	8005c96 <HAL_SPI_Receive+0x104>
 8005cfe:	e031      	b.n	8005d64 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d113      	bne.n	8005d36 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68da      	ldr	r2, [r3, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	b292      	uxth	r2, r2
 8005d1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d20:	1c9a      	adds	r2, r3, #2
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b29a      	uxth	r2, r3
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d34:	e011      	b.n	8005d5a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d36:	f7fb f98d 	bl	8001054 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d803      	bhi.n	8005d4e <HAL_SPI_Receive+0x1bc>
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d4c:	d102      	bne.n	8005d54 <HAL_SPI_Receive+0x1c2>
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d102      	bne.n	8005d5a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d58:	e017      	b.n	8005d8a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1cd      	bne.n	8005d00 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d64:	693a      	ldr	r2, [r7, #16]
 8005d66:	6839      	ldr	r1, [r7, #0]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 fb45 	bl	80063f8 <SPI_EndRxTransaction>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d002      	beq.n	8005d88 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	75fb      	strb	r3, [r7, #23]
 8005d86:	e000      	b.n	8005d8a <HAL_SPI_Receive+0x1f8>
  }

error :
 8005d88:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3718      	adds	r7, #24
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}

08005da4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08c      	sub	sp, #48	; 0x30
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005db2:	2301      	movs	r3, #1
 8005db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005db6:	2300      	movs	r3, #0
 8005db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d101      	bne.n	8005dca <HAL_SPI_TransmitReceive+0x26>
 8005dc6:	2302      	movs	r3, #2
 8005dc8:	e18a      	b.n	80060e0 <HAL_SPI_TransmitReceive+0x33c>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2201      	movs	r2, #1
 8005dce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dd2:	f7fb f93f 	bl	8001054 <HAL_GetTick>
 8005dd6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005de8:	887b      	ldrh	r3, [r7, #2]
 8005dea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005dec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d00f      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x70>
 8005df4:	69fb      	ldr	r3, [r7, #28]
 8005df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dfa:	d107      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d103      	bne.n	8005e0c <HAL_SPI_TransmitReceive+0x68>
 8005e04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d003      	beq.n	8005e14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e12:	e15b      	b.n	80060cc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d005      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x82>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <HAL_SPI_TransmitReceive+0x82>
 8005e20:	887b      	ldrh	r3, [r7, #2]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005e2c:	e14e      	b.n	80060cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	d003      	beq.n	8005e42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2200      	movs	r2, #0
 8005e46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	887a      	ldrh	r2, [r7, #2]
 8005e52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	887a      	ldrh	r2, [r7, #2]
 8005e58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	68ba      	ldr	r2, [r7, #8]
 8005e5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	887a      	ldrh	r2, [r7, #2]
 8005e64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	887a      	ldrh	r2, [r7, #2]
 8005e6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e82:	2b40      	cmp	r3, #64	; 0x40
 8005e84:	d007      	beq.n	8005e96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	681a      	ldr	r2, [r3, #0]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e9e:	d178      	bne.n	8005f92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_SPI_TransmitReceive+0x10a>
 8005ea8:	8b7b      	ldrh	r3, [r7, #26]
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d166      	bne.n	8005f7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eb2:	881a      	ldrh	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebe:	1c9a      	adds	r2, r3, #2
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	3b01      	subs	r3, #1
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed2:	e053      	b.n	8005f7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	689b      	ldr	r3, [r3, #8]
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b02      	cmp	r3, #2
 8005ee0:	d11b      	bne.n	8005f1a <HAL_SPI_TransmitReceive+0x176>
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d016      	beq.n	8005f1a <HAL_SPI_TransmitReceive+0x176>
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d113      	bne.n	8005f1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef6:	881a      	ldrh	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f02:	1c9a      	adds	r2, r3, #2
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	3b01      	subs	r3, #1
 8005f10:	b29a      	uxth	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f16:	2300      	movs	r3, #0
 8005f18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f003 0301 	and.w	r3, r3, #1
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d119      	bne.n	8005f5c <HAL_SPI_TransmitReceive+0x1b8>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d014      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3c:	b292      	uxth	r2, r2
 8005f3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	1c9a      	adds	r2, r3, #2
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f58:	2301      	movs	r3, #1
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f5c:	f7fb f87a 	bl	8001054 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d807      	bhi.n	8005f7c <HAL_SPI_TransmitReceive+0x1d8>
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f72:	d003      	beq.n	8005f7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005f7a:	e0a7      	b.n	80060cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1a6      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x130>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1a1      	bne.n	8005ed4 <HAL_SPI_TransmitReceive+0x130>
 8005f90:	e07c      	b.n	800608c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d002      	beq.n	8005fa0 <HAL_SPI_TransmitReceive+0x1fc>
 8005f9a:	8b7b      	ldrh	r3, [r7, #26]
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d16b      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	330c      	adds	r3, #12
 8005faa:	7812      	ldrb	r2, [r2, #0]
 8005fac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fc6:	e057      	b.n	8006078 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d11c      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x26c>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fda:	b29b      	uxth	r3, r3
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d017      	beq.n	8006010 <HAL_SPI_TransmitReceive+0x26c>
 8005fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d114      	bne.n	8006010 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	330c      	adds	r3, #12
 8005ff0:	7812      	ldrb	r2, [r2, #0]
 8005ff2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	1c5a      	adds	r2, r3, #1
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006002:	b29b      	uxth	r3, r3
 8006004:	3b01      	subs	r3, #1
 8006006:	b29a      	uxth	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 0301 	and.w	r3, r3, #1
 800601a:	2b01      	cmp	r3, #1
 800601c:	d119      	bne.n	8006052 <HAL_SPI_TransmitReceive+0x2ae>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006022:	b29b      	uxth	r3, r3
 8006024:	2b00      	cmp	r3, #0
 8006026:	d014      	beq.n	8006052 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68da      	ldr	r2, [r3, #12]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006044:	b29b      	uxth	r3, r3
 8006046:	3b01      	subs	r3, #1
 8006048:	b29a      	uxth	r2, r3
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800604e:	2301      	movs	r3, #1
 8006050:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006052:	f7fa ffff 	bl	8001054 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800605e:	429a      	cmp	r2, r3
 8006060:	d803      	bhi.n	800606a <HAL_SPI_TransmitReceive+0x2c6>
 8006062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006068:	d102      	bne.n	8006070 <HAL_SPI_TransmitReceive+0x2cc>
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d103      	bne.n	8006078 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8006070:	2303      	movs	r3, #3
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8006076:	e029      	b.n	80060cc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800607c:	b29b      	uxth	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1a2      	bne.n	8005fc8 <HAL_SPI_TransmitReceive+0x224>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006086:	b29b      	uxth	r3, r3
 8006088:	2b00      	cmp	r3, #0
 800608a:	d19d      	bne.n	8005fc8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800608c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f000 fa17 	bl	80064c4 <SPI_EndRxTxTransaction>
 8006096:	4603      	mov	r3, r0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d006      	beq.n	80060aa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2220      	movs	r2, #32
 80060a6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80060a8:	e010      	b.n	80060cc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d10b      	bne.n	80060ca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060b2:	2300      	movs	r3, #0
 80060b4:	617b      	str	r3, [r7, #20]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	617b      	str	r3, [r7, #20]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	e000      	b.n	80060cc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80060ca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80060dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3730      	adds	r7, #48	; 0x30
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b088      	sub	sp, #32
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	689b      	ldr	r3, [r3, #8]
 80060fe:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	099b      	lsrs	r3, r3, #6
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d10f      	bne.n	800612c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800610c:	69bb      	ldr	r3, [r7, #24]
 800610e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00a      	beq.n	800612c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	099b      	lsrs	r3, r3, #6
 800611a:	f003 0301 	and.w	r3, r3, #1
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	4798      	blx	r3
    return;
 800612a:	e0d8      	b.n	80062de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	085b      	lsrs	r3, r3, #1
 8006130:	f003 0301 	and.w	r3, r3, #1
 8006134:	2b00      	cmp	r3, #0
 8006136:	d00a      	beq.n	800614e <HAL_SPI_IRQHandler+0x66>
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	09db      	lsrs	r3, r3, #7
 800613c:	f003 0301 	and.w	r3, r3, #1
 8006140:	2b00      	cmp	r3, #0
 8006142:	d004      	beq.n	800614e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	4798      	blx	r3
    return;
 800614c:	e0c7      	b.n	80062de <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	095b      	lsrs	r3, r3, #5
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b00      	cmp	r3, #0
 8006158:	d10c      	bne.n	8006174 <HAL_SPI_IRQHandler+0x8c>
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	099b      	lsrs	r3, r3, #6
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	d106      	bne.n	8006174 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8006166:	69bb      	ldr	r3, [r7, #24]
 8006168:	0a1b      	lsrs	r3, r3, #8
 800616a:	f003 0301 	and.w	r3, r3, #1
 800616e:	2b00      	cmp	r3, #0
 8006170:	f000 80b5 	beq.w	80062de <HAL_SPI_IRQHandler+0x1f6>
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	f003 0301 	and.w	r3, r3, #1
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80ae 	beq.w	80062de <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	099b      	lsrs	r3, r3, #6
 8006186:	f003 0301 	and.w	r3, r3, #1
 800618a:	2b00      	cmp	r3, #0
 800618c:	d023      	beq.n	80061d6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b03      	cmp	r3, #3
 8006198:	d011      	beq.n	80061be <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800619e:	f043 0204 	orr.w	r2, r3, #4
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061a6:	2300      	movs	r3, #0
 80061a8:	617b      	str	r3, [r7, #20]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	617b      	str	r3, [r7, #20]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	617b      	str	r3, [r7, #20]
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	e00b      	b.n	80061d6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80061be:	2300      	movs	r3, #0
 80061c0:	613b      	str	r3, [r7, #16]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	613b      	str	r3, [r7, #16]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	613b      	str	r3, [r7, #16]
 80061d2:	693b      	ldr	r3, [r7, #16]
        return;
 80061d4:	e083      	b.n	80062de <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	095b      	lsrs	r3, r3, #5
 80061da:	f003 0301 	and.w	r3, r3, #1
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d014      	beq.n	800620c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e6:	f043 0201 	orr.w	r2, r3, #1
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80061ee:	2300      	movs	r3, #0
 80061f0:	60fb      	str	r3, [r7, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006208:	601a      	str	r2, [r3, #0]
 800620a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800620c:	69bb      	ldr	r3, [r7, #24]
 800620e:	0a1b      	lsrs	r3, r3, #8
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00c      	beq.n	8006232 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800621c:	f043 0208 	orr.w	r2, r3, #8
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006224:	2300      	movs	r3, #0
 8006226:	60bb      	str	r3, [r7, #8]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	689b      	ldr	r3, [r3, #8]
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	2b00      	cmp	r3, #0
 8006238:	d050      	beq.n	80062dc <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	685a      	ldr	r2, [r3, #4]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006248:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f003 0302 	and.w	r3, r3, #2
 8006258:	2b00      	cmp	r3, #0
 800625a:	d104      	bne.n	8006266 <HAL_SPI_IRQHandler+0x17e>
 800625c:	69fb      	ldr	r3, [r7, #28]
 800625e:	f003 0301 	and.w	r3, r3, #1
 8006262:	2b00      	cmp	r3, #0
 8006264:	d034      	beq.n	80062d0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0203 	bic.w	r2, r2, #3
 8006274:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627a:	2b00      	cmp	r3, #0
 800627c:	d011      	beq.n	80062a2 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006282:	4a18      	ldr	r2, [pc, #96]	; (80062e4 <HAL_SPI_IRQHandler+0x1fc>)
 8006284:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800628a:	4618      	mov	r0, r3
 800628c:	f7fc ff4c 	bl	8003128 <HAL_DMA_Abort_IT>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d016      	beq.n	80062d8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ae:	4a0d      	ldr	r2, [pc, #52]	; (80062e4 <HAL_SPI_IRQHandler+0x1fc>)
 80062b0:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b6:	4618      	mov	r0, r3
 80062b8:	f7fc ff36 	bl	8003128 <HAL_DMA_Abort_IT>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80062ce:	e003      	b.n	80062d8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 f809 	bl	80062e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80062d6:	e000      	b.n	80062da <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80062d8:	bf00      	nop
    return;
 80062da:	bf00      	nop
 80062dc:	bf00      	nop
  }
}
 80062de:	3720      	adds	r7, #32
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	080062fd 	.word	0x080062fd

080062e8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7ff ffe6 	bl	80062e8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	603b      	str	r3, [r7, #0]
 8006330:	4613      	mov	r3, r2
 8006332:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006334:	e04c      	b.n	80063d0 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633c:	d048      	beq.n	80063d0 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800633e:	f7fa fe89 	bl	8001054 <HAL_GetTick>
 8006342:	4602      	mov	r2, r0
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	1ad3      	subs	r3, r2, r3
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	429a      	cmp	r2, r3
 800634c:	d902      	bls.n	8006354 <SPI_WaitFlagStateUntilTimeout+0x30>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d13d      	bne.n	80063d0 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	685a      	ldr	r2, [r3, #4]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006362:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800636c:	d111      	bne.n	8006392 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	689b      	ldr	r3, [r3, #8]
 8006372:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006376:	d004      	beq.n	8006382 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006380:	d107      	bne.n	8006392 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	681a      	ldr	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006390:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800639a:	d10f      	bne.n	80063bc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063ba:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e00f      	b.n	80063f0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	4013      	ands	r3, r2
 80063da:	68ba      	ldr	r2, [r7, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	bf0c      	ite	eq
 80063e0:	2301      	moveq	r3, #1
 80063e2:	2300      	movne	r3, #0
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	461a      	mov	r2, r3
 80063e8:	79fb      	ldrb	r3, [r7, #7]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d1a3      	bne.n	8006336 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80063ee:	2300      	movs	r3, #0
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	60f8      	str	r0, [r7, #12]
 8006400:	60b9      	str	r1, [r7, #8]
 8006402:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800640c:	d111      	bne.n	8006432 <SPI_EndRxTransaction+0x3a>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006416:	d004      	beq.n	8006422 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	689b      	ldr	r3, [r3, #8]
 800641c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006420:	d107      	bne.n	8006432 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006430:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800643a:	d12a      	bne.n	8006492 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006444:	d012      	beq.n	800646c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	9300      	str	r3, [sp, #0]
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	2180      	movs	r1, #128	; 0x80
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff ff67 	bl	8006324 <SPI_WaitFlagStateUntilTimeout>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d02d      	beq.n	80064b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006460:	f043 0220 	orr.w	r2, r3, #32
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e026      	b.n	80064ba <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	9300      	str	r3, [sp, #0]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	2200      	movs	r2, #0
 8006474:	2101      	movs	r1, #1
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f7ff ff54 	bl	8006324 <SPI_WaitFlagStateUntilTimeout>
 800647c:	4603      	mov	r3, r0
 800647e:	2b00      	cmp	r3, #0
 8006480:	d01a      	beq.n	80064b8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006486:	f043 0220 	orr.w	r2, r3, #32
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e013      	b.n	80064ba <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	9300      	str	r3, [sp, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2200      	movs	r2, #0
 800649a:	2101      	movs	r1, #1
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f7ff ff41 	bl	8006324 <SPI_WaitFlagStateUntilTimeout>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d007      	beq.n	80064b8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ac:	f043 0220 	orr.w	r2, r3, #32
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e000      	b.n	80064ba <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80064d0:	4b1b      	ldr	r3, [pc, #108]	; (8006540 <SPI_EndRxTxTransaction+0x7c>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1b      	ldr	r2, [pc, #108]	; (8006544 <SPI_EndRxTxTransaction+0x80>)
 80064d6:	fba2 2303 	umull	r2, r3, r2, r3
 80064da:	0d5b      	lsrs	r3, r3, #21
 80064dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80064e0:	fb02 f303 	mul.w	r3, r2, r3
 80064e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064ee:	d112      	bne.n	8006516 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	9300      	str	r3, [sp, #0]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	2180      	movs	r1, #128	; 0x80
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff ff12 	bl	8006324 <SPI_WaitFlagStateUntilTimeout>
 8006500:	4603      	mov	r3, r0
 8006502:	2b00      	cmp	r3, #0
 8006504:	d016      	beq.n	8006534 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800650a:	f043 0220 	orr.w	r2, r3, #32
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006512:	2303      	movs	r3, #3
 8006514:	e00f      	b.n	8006536 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00a      	beq.n	8006532 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	3b01      	subs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652c:	2b80      	cmp	r3, #128	; 0x80
 800652e:	d0f2      	beq.n	8006516 <SPI_EndRxTxTransaction+0x52>
 8006530:	e000      	b.n	8006534 <SPI_EndRxTxTransaction+0x70>
        break;
 8006532:	bf00      	nop
  }

  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000038 	.word	0x20000038
 8006544:	165e9f81 	.word	0x165e9f81

08006548 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e01d      	b.n	8006596 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b00      	cmp	r3, #0
 8006564:	d106      	bne.n	8006574 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f006 fd68 	bl	800d044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681a      	ldr	r2, [r3, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f000 fdf6 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}

0800659e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	2202      	movs	r2, #2
 80065aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f003 0307 	and.w	r3, r3, #7
 80065b8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b06      	cmp	r3, #6
 80065be:	d007      	beq.n	80065d0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f042 0201 	orr.w	r2, r2, #1
 80065ce:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68da      	ldr	r2, [r3, #12]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2b06      	cmp	r3, #6
 800660e:	d007      	beq.n	8006620 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f042 0201 	orr.w	r2, r2, #1
 800661e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006620:	2300      	movs	r3, #0
}
 8006622:	4618      	mov	r0, r3
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr

0800662e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800662e:	b580      	push	{r7, lr}
 8006630:	b082      	sub	sp, #8
 8006632:	af00      	add	r7, sp, #0
 8006634:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d101      	bne.n	8006640 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e01d      	b.n	800667c <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b00      	cmp	r3, #0
 800664a:	d106      	bne.n	800665a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f815 	bl	8006684 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2202      	movs	r2, #2
 800665e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	3304      	adds	r3, #4
 800666a:	4619      	mov	r1, r3
 800666c:	4610      	mov	r0, r2
 800666e:	f000 fd83 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	4618      	mov	r0, r3
 800667e:	3708      	adds	r7, #8
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}

08006684 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800668c:	bf00      	nop
 800668e:	370c      	adds	r7, #12
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2201      	movs	r2, #1
 80066a8:	6839      	ldr	r1, [r7, #0]
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 f978 	bl	80079a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a15      	ldr	r2, [pc, #84]	; (800670c <HAL_TIM_OC_Start+0x74>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIM_OC_Start+0x2c>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a14      	ldr	r2, [pc, #80]	; (8006710 <HAL_TIM_OC_Start+0x78>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d101      	bne.n	80066c8 <HAL_TIM_OC_Start+0x30>
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <HAL_TIM_OC_Start+0x32>
 80066c8:	2300      	movs	r3, #0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f003 0307 	and.w	r3, r3, #7
 80066e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2b06      	cmp	r3, #6
 80066ee:	d007      	beq.n	8006700 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f042 0201 	orr.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	3710      	adds	r7, #16
 8006706:	46bd      	mov	sp, r7
 8006708:	bd80      	pop	{r7, pc}
 800670a:	bf00      	nop
 800670c:	40010000 	.word	0x40010000
 8006710:	40010400 	.word	0x40010400

08006714 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e01d      	b.n	8006762 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d106      	bne.n	8006740 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f815 	bl	800676a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3304      	adds	r3, #4
 8006750:	4619      	mov	r1, r3
 8006752:	4610      	mov	r0, r2
 8006754:	f000 fd10 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006760:	2300      	movs	r3, #0
}
 8006762:	4618      	mov	r0, r3
 8006764:	3708      	adds	r7, #8
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800676a:	b480      	push	{r7}
 800676c:	b083      	sub	sp, #12
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006772:	bf00      	nop
 8006774:	370c      	adds	r7, #12
 8006776:	46bd      	mov	sp, r7
 8006778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677c:	4770      	bx	lr
	...

08006780 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
 8006788:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2201      	movs	r2, #1
 8006790:	6839      	ldr	r1, [r7, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f001 f904 	bl	80079a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	4a15      	ldr	r2, [pc, #84]	; (80067f4 <HAL_TIM_PWM_Start+0x74>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d004      	beq.n	80067ac <HAL_TIM_PWM_Start+0x2c>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <HAL_TIM_PWM_Start+0x78>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d101      	bne.n	80067b0 <HAL_TIM_PWM_Start+0x30>
 80067ac:	2301      	movs	r3, #1
 80067ae:	e000      	b.n	80067b2 <HAL_TIM_PWM_Start+0x32>
 80067b0:	2300      	movs	r3, #0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80067c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	689b      	ldr	r3, [r3, #8]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2b06      	cmp	r3, #6
 80067d6:	d007      	beq.n	80067e8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f042 0201 	orr.w	r2, r2, #1
 80067e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}
 80067f2:	bf00      	nop
 80067f4:	40010000 	.word	0x40010000
 80067f8:	40010400 	.word	0x40010400

080067fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d101      	bne.n	800680e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e01d      	b.n	800684a <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006814:	b2db      	uxtb	r3, r3
 8006816:	2b00      	cmp	r3, #0
 8006818:	d106      	bne.n	8006828 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f815 	bl	8006852 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f000 fc9c 	bl	8007178 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006848:	2300      	movs	r3, #0
}
 800684a:	4618      	mov	r0, r3
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}

08006852 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006852:	b480      	push	{r7}
 8006854:	b083      	sub	sp, #12
 8006856:	af00      	add	r7, sp, #0
 8006858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800685a:	bf00      	nop
 800685c:	370c      	adds	r7, #12
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e083      	b.n	8006982 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f006 fd08 	bl	800d2a4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2202      	movs	r2, #2
 8006898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	6812      	ldr	r2, [r2, #0]
 80068a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068aa:	f023 0307 	bic.w	r3, r3, #7
 80068ae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	3304      	adds	r3, #4
 80068b8:	4619      	mov	r1, r3
 80068ba:	4610      	mov	r0, r2
 80068bc:	f000 fc5c 	bl	8007178 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	697a      	ldr	r2, [r7, #20]
 80068de:	4313      	orrs	r3, r2
 80068e0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068e8:	f023 0303 	bic.w	r3, r3, #3
 80068ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	689a      	ldr	r2, [r3, #8]
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	021b      	lsls	r3, r3, #8
 80068f8:	4313      	orrs	r3, r2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006906:	f023 030c 	bic.w	r3, r3, #12
 800690a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006912:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	69db      	ldr	r3, [r3, #28]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	4313      	orrs	r3, r2
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	4313      	orrs	r3, r2
 8006928:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	011a      	lsls	r2, r3, #4
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	6a1b      	ldr	r3, [r3, #32]
 8006934:	031b      	lsls	r3, r3, #12
 8006936:	4313      	orrs	r3, r2
 8006938:	693a      	ldr	r2, [r7, #16]
 800693a:	4313      	orrs	r3, r2
 800693c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006944:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800694c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	685a      	ldr	r2, [r3, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	011b      	lsls	r3, r3, #4
 8006958:	4313      	orrs	r3, r2
 800695a:	68fa      	ldr	r2, [r7, #12]
 800695c:	4313      	orrs	r3, r2
 800695e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	697a      	ldr	r2, [r7, #20]
 8006966:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	693a      	ldr	r2, [r7, #16]
 800696e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2201      	movs	r2, #1
 800697c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d002      	beq.n	80069a0 <HAL_TIM_Encoder_Start_IT+0x16>
 800699a:	2b04      	cmp	r3, #4
 800699c:	d010      	beq.n	80069c0 <HAL_TIM_Encoder_Start_IT+0x36>
 800699e:	e01f      	b.n	80069e0 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2201      	movs	r2, #1
 80069a6:	2100      	movs	r1, #0
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fff9 	bl	80079a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f042 0202 	orr.w	r2, r2, #2
 80069bc:	60da      	str	r2, [r3, #12]
      break;
 80069be:	e02e      	b.n	8006a1e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2201      	movs	r2, #1
 80069c6:	2104      	movs	r1, #4
 80069c8:	4618      	mov	r0, r3
 80069ca:	f000 ffe9 	bl	80079a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	68da      	ldr	r2, [r3, #12]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f042 0204 	orr.w	r2, r2, #4
 80069dc:	60da      	str	r2, [r3, #12]
      break;
 80069de:	e01e      	b.n	8006a1e <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2201      	movs	r2, #1
 80069e6:	2100      	movs	r1, #0
 80069e8:	4618      	mov	r0, r3
 80069ea:	f000 ffd9 	bl	80079a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2201      	movs	r2, #1
 80069f4:	2104      	movs	r1, #4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 ffd2 	bl	80079a0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68da      	ldr	r2, [r3, #12]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0202 	orr.w	r2, r2, #2
 8006a0a:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68da      	ldr	r2, [r3, #12]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f042 0204 	orr.w	r2, r2, #4
 8006a1a:	60da      	str	r2, [r3, #12]
      break;
 8006a1c:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681a      	ldr	r2, [r3, #0]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006a2e:	2300      	movs	r3, #0
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3708      	adds	r7, #8
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b02      	cmp	r3, #2
 8006a4c:	d122      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d11b      	bne.n	8006a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f06f 0202 	mvn.w	r2, #2
 8006a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	699b      	ldr	r3, [r3, #24]
 8006a72:	f003 0303 	and.w	r3, r3, #3
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f005 fa90 	bl	800bfa0 <HAL_TIM_IC_CaptureCallback>
 8006a80:	e005      	b.n	8006a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fb59 	bl	800713a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f000 fb60 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	f003 0304 	and.w	r3, r3, #4
 8006a9e:	2b04      	cmp	r3, #4
 8006aa0:	d122      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	68db      	ldr	r3, [r3, #12]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b04      	cmp	r3, #4
 8006aae:	d11b      	bne.n	8006ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f06f 0204 	mvn.w	r2, #4
 8006ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2202      	movs	r2, #2
 8006abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	699b      	ldr	r3, [r3, #24]
 8006ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f005 fa66 	bl	800bfa0 <HAL_TIM_IC_CaptureCallback>
 8006ad4:	e005      	b.n	8006ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fb2f 	bl	800713a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f000 fb36 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f003 0308 	and.w	r3, r3, #8
 8006af2:	2b08      	cmp	r3, #8
 8006af4:	d122      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f003 0308 	and.w	r3, r3, #8
 8006b00:	2b08      	cmp	r3, #8
 8006b02:	d11b      	bne.n	8006b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f06f 0208 	mvn.w	r2, #8
 8006b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2204      	movs	r2, #4
 8006b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	f003 0303 	and.w	r3, r3, #3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d003      	beq.n	8006b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b22:	6878      	ldr	r0, [r7, #4]
 8006b24:	f005 fa3c 	bl	800bfa0 <HAL_TIM_IC_CaptureCallback>
 8006b28:	e005      	b.n	8006b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fb05 	bl	800713a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fb0c 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	f003 0310 	and.w	r3, r3, #16
 8006b46:	2b10      	cmp	r3, #16
 8006b48:	d122      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f003 0310 	and.w	r3, r3, #16
 8006b54:	2b10      	cmp	r3, #16
 8006b56:	d11b      	bne.n	8006b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f06f 0210 	mvn.w	r2, #16
 8006b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2208      	movs	r2, #8
 8006b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d003      	beq.n	8006b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f005 fa12 	bl	800bfa0 <HAL_TIM_IC_CaptureCallback>
 8006b7c:	e005      	b.n	8006b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fadb 	bl	800713a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fae2 	bl	800714e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b01      	cmp	r3, #1
 8006b9c:	d10e      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	f003 0301 	and.w	r3, r3, #1
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d107      	bne.n	8006bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f06f 0201 	mvn.w	r2, #1
 8006bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f005 f83a 	bl	800bc30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bc6:	2b80      	cmp	r3, #128	; 0x80
 8006bc8:	d10e      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd4:	2b80      	cmp	r3, #128	; 0x80
 8006bd6:	d107      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f001 f804 	bl	8007bf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf2:	2b40      	cmp	r3, #64	; 0x40
 8006bf4:	d10e      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c00:	2b40      	cmp	r3, #64	; 0x40
 8006c02:	d107      	bne.n	8006c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 faa7 	bl	8007162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	f003 0320 	and.w	r3, r3, #32
 8006c1e:	2b20      	cmp	r3, #32
 8006c20:	d10e      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f003 0320 	and.w	r3, r3, #32
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d107      	bne.n	8006c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	f06f 0220 	mvn.w	r2, #32
 8006c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 ffce 	bl	8007bdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d101      	bne.n	8006c62 <HAL_TIM_OC_ConfigChannel+0x1a>
 8006c5e:	2302      	movs	r3, #2
 8006c60:	e04e      	b.n	8006d00 <HAL_TIM_OC_ConfigChannel+0xb8>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2b0c      	cmp	r3, #12
 8006c76:	d839      	bhi.n	8006cec <HAL_TIM_OC_ConfigChannel+0xa4>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006cb5 	.word	0x08006cb5
 8006c84:	08006ced 	.word	0x08006ced
 8006c88:	08006ced 	.word	0x08006ced
 8006c8c:	08006ced 	.word	0x08006ced
 8006c90:	08006cc3 	.word	0x08006cc3
 8006c94:	08006ced 	.word	0x08006ced
 8006c98:	08006ced 	.word	0x08006ced
 8006c9c:	08006ced 	.word	0x08006ced
 8006ca0:	08006cd1 	.word	0x08006cd1
 8006ca4:	08006ced 	.word	0x08006ced
 8006ca8:	08006ced 	.word	0x08006ced
 8006cac:	08006ced 	.word	0x08006ced
 8006cb0:	08006cdf 	.word	0x08006cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fafc 	bl	80072b8 <TIM_OC1_SetConfig>
      break;
 8006cc0:	e015      	b.n	8006cee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68b9      	ldr	r1, [r7, #8]
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f000 fb65 	bl	8007398 <TIM_OC2_SetConfig>
      break;
 8006cce:	e00e      	b.n	8006cee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fbd4 	bl	8007484 <TIM_OC3_SetConfig>
      break;
 8006cdc:	e007      	b.n	8006cee <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68b9      	ldr	r1, [r7, #8]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fc41 	bl	800756c <TIM_OC4_SetConfig>
      break;
 8006cea:	e000      	b.n	8006cee <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006cec:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2201      	movs	r2, #1
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d101      	bne.n	8006d22 <HAL_TIM_IC_ConfigChannel+0x1a>
 8006d1e:	2302      	movs	r3, #2
 8006d20:	e08a      	b.n	8006e38 <HAL_TIM_IC_ConfigChannel+0x130>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d11b      	bne.n	8006d70 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f000 fc66 	bl	8007618 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	699a      	ldr	r2, [r3, #24]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 020c 	bic.w	r2, r2, #12
 8006d5a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6999      	ldr	r1, [r3, #24]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	689a      	ldr	r2, [r3, #8]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	430a      	orrs	r2, r1
 8006d6c:	619a      	str	r2, [r3, #24]
 8006d6e:	e05a      	b.n	8006e26 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d11c      	bne.n	8006db0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6818      	ldr	r0, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	6819      	ldr	r1, [r3, #0]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f000 fcea 	bl	800775e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	699a      	ldr	r2, [r3, #24]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d98:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	6999      	ldr	r1, [r3, #24]
 8006da0:	68bb      	ldr	r3, [r7, #8]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	021a      	lsls	r2, r3, #8
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	430a      	orrs	r2, r1
 8006dac:	619a      	str	r2, [r3, #24]
 8006dae:	e03a      	b.n	8006e26 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2b08      	cmp	r3, #8
 8006db4:	d11b      	bne.n	8006dee <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6818      	ldr	r0, [r3, #0]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6819      	ldr	r1, [r3, #0]
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	685a      	ldr	r2, [r3, #4]
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	f000 fd37 	bl	8007838 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69da      	ldr	r2, [r3, #28]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 020c 	bic.w	r2, r2, #12
 8006dd8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	69d9      	ldr	r1, [r3, #28]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	689a      	ldr	r2, [r3, #8]
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	430a      	orrs	r2, r1
 8006dea:	61da      	str	r2, [r3, #28]
 8006dec:	e01b      	b.n	8006e26 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	6819      	ldr	r1, [r3, #0]
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	f000 fd57 	bl	80078b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006e10:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	69d9      	ldr	r1, [r3, #28]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	021a      	lsls	r2, r3, #8
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	430a      	orrs	r2, r1
 8006e24:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2201      	movs	r2, #1
 8006e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2200      	movs	r2, #0
 8006e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	60f8      	str	r0, [r7, #12]
 8006e48:	60b9      	str	r1, [r7, #8]
 8006e4a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d101      	bne.n	8006e5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e56:	2302      	movs	r3, #2
 8006e58:	e0b4      	b.n	8006fc4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2202      	movs	r2, #2
 8006e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2b0c      	cmp	r3, #12
 8006e6e:	f200 809f 	bhi.w	8006fb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006e72:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e78:	08006ead 	.word	0x08006ead
 8006e7c:	08006fb1 	.word	0x08006fb1
 8006e80:	08006fb1 	.word	0x08006fb1
 8006e84:	08006fb1 	.word	0x08006fb1
 8006e88:	08006eed 	.word	0x08006eed
 8006e8c:	08006fb1 	.word	0x08006fb1
 8006e90:	08006fb1 	.word	0x08006fb1
 8006e94:	08006fb1 	.word	0x08006fb1
 8006e98:	08006f2f 	.word	0x08006f2f
 8006e9c:	08006fb1 	.word	0x08006fb1
 8006ea0:	08006fb1 	.word	0x08006fb1
 8006ea4:	08006fb1 	.word	0x08006fb1
 8006ea8:	08006f6f 	.word	0x08006f6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68b9      	ldr	r1, [r7, #8]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f000 fa00 	bl	80072b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	699a      	ldr	r2, [r3, #24]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f042 0208 	orr.w	r2, r2, #8
 8006ec6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 0204 	bic.w	r2, r2, #4
 8006ed6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6999      	ldr	r1, [r3, #24]
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	691a      	ldr	r2, [r3, #16]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	430a      	orrs	r2, r1
 8006ee8:	619a      	str	r2, [r3, #24]
      break;
 8006eea:	e062      	b.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68b9      	ldr	r1, [r7, #8]
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f000 fa50 	bl	8007398 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	6999      	ldr	r1, [r3, #24]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	021a      	lsls	r2, r3, #8
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	430a      	orrs	r2, r1
 8006f2a:	619a      	str	r2, [r3, #24]
      break;
 8006f2c:	e041      	b.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68b9      	ldr	r1, [r7, #8]
 8006f34:	4618      	mov	r0, r3
 8006f36:	f000 faa5 	bl	8007484 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	69da      	ldr	r2, [r3, #28]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f042 0208 	orr.w	r2, r2, #8
 8006f48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	69da      	ldr	r2, [r3, #28]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f022 0204 	bic.w	r2, r2, #4
 8006f58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	69d9      	ldr	r1, [r3, #28]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	691a      	ldr	r2, [r3, #16]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	61da      	str	r2, [r3, #28]
      break;
 8006f6c:	e021      	b.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68b9      	ldr	r1, [r7, #8]
 8006f74:	4618      	mov	r0, r3
 8006f76:	f000 faf9 	bl	800756c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69da      	ldr	r2, [r3, #28]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	69da      	ldr	r2, [r3, #28]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	69d9      	ldr	r1, [r3, #28]
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	021a      	lsls	r2, r3, #8
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	430a      	orrs	r2, r1
 8006fac:	61da      	str	r2, [r3, #28]
      break;
 8006fae:	e000      	b.n	8006fb2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006fb0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2201      	movs	r2, #1
 8006fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3710      	adds	r7, #16
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	d101      	bne.n	8006fe4 <HAL_TIM_ConfigClockSource+0x18>
 8006fe0:	2302      	movs	r3, #2
 8006fe2:	e0a6      	b.n	8007132 <HAL_TIM_ConfigClockSource+0x166>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2202      	movs	r2, #2
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007002:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800700a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	2b40      	cmp	r3, #64	; 0x40
 800701a:	d067      	beq.n	80070ec <HAL_TIM_ConfigClockSource+0x120>
 800701c:	2b40      	cmp	r3, #64	; 0x40
 800701e:	d80b      	bhi.n	8007038 <HAL_TIM_ConfigClockSource+0x6c>
 8007020:	2b10      	cmp	r3, #16
 8007022:	d073      	beq.n	800710c <HAL_TIM_ConfigClockSource+0x140>
 8007024:	2b10      	cmp	r3, #16
 8007026:	d802      	bhi.n	800702e <HAL_TIM_ConfigClockSource+0x62>
 8007028:	2b00      	cmp	r3, #0
 800702a:	d06f      	beq.n	800710c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800702c:	e078      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800702e:	2b20      	cmp	r3, #32
 8007030:	d06c      	beq.n	800710c <HAL_TIM_ConfigClockSource+0x140>
 8007032:	2b30      	cmp	r3, #48	; 0x30
 8007034:	d06a      	beq.n	800710c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8007036:	e073      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007038:	2b70      	cmp	r3, #112	; 0x70
 800703a:	d00d      	beq.n	8007058 <HAL_TIM_ConfigClockSource+0x8c>
 800703c:	2b70      	cmp	r3, #112	; 0x70
 800703e:	d804      	bhi.n	800704a <HAL_TIM_ConfigClockSource+0x7e>
 8007040:	2b50      	cmp	r3, #80	; 0x50
 8007042:	d033      	beq.n	80070ac <HAL_TIM_ConfigClockSource+0xe0>
 8007044:	2b60      	cmp	r3, #96	; 0x60
 8007046:	d041      	beq.n	80070cc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8007048:	e06a      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800704a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800704e:	d066      	beq.n	800711e <HAL_TIM_ConfigClockSource+0x152>
 8007050:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007054:	d017      	beq.n	8007086 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8007056:	e063      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	6899      	ldr	r1, [r3, #8]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	f000 fc7a 	bl	8007960 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	689b      	ldr	r3, [r3, #8]
 8007072:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800707a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	609a      	str	r2, [r3, #8]
      break;
 8007084:	e04c      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	6899      	ldr	r1, [r3, #8]
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	68db      	ldr	r3, [r3, #12]
 8007096:	f000 fc63 	bl	8007960 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	689a      	ldr	r2, [r3, #8]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070a8:	609a      	str	r2, [r3, #8]
      break;
 80070aa:	e039      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	6859      	ldr	r1, [r3, #4]
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	461a      	mov	r2, r3
 80070ba:	f000 fb21 	bl	8007700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2150      	movs	r1, #80	; 0x50
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 fc30 	bl	800792a <TIM_ITRx_SetConfig>
      break;
 80070ca:	e029      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6818      	ldr	r0, [r3, #0]
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	6859      	ldr	r1, [r3, #4]
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	461a      	mov	r2, r3
 80070da:	f000 fb7d 	bl	80077d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2160      	movs	r1, #96	; 0x60
 80070e4:	4618      	mov	r0, r3
 80070e6:	f000 fc20 	bl	800792a <TIM_ITRx_SetConfig>
      break;
 80070ea:	e019      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6818      	ldr	r0, [r3, #0]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	6859      	ldr	r1, [r3, #4]
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	461a      	mov	r2, r3
 80070fa:	f000 fb01 	bl	8007700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2140      	movs	r1, #64	; 0x40
 8007104:	4618      	mov	r0, r3
 8007106:	f000 fc10 	bl	800792a <TIM_ITRx_SetConfig>
      break;
 800710a:	e009      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	683b      	ldr	r3, [r7, #0]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4619      	mov	r1, r3
 8007116:	4610      	mov	r0, r2
 8007118:	f000 fc07 	bl	800792a <TIM_ITRx_SetConfig>
      break;
 800711c:	e000      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800711e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800713a:	b480      	push	{r7}
 800713c:	b083      	sub	sp, #12
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007142:	bf00      	nop
 8007144:	370c      	adds	r7, #12
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr

0800714e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800714e:	b480      	push	{r7}
 8007150:	b083      	sub	sp, #12
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007156:	bf00      	nop
 8007158:	370c      	adds	r7, #12
 800715a:	46bd      	mov	sp, r7
 800715c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007160:	4770      	bx	lr

08007162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007162:	b480      	push	{r7}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800716a:	bf00      	nop
 800716c:	370c      	adds	r7, #12
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
	...

08007178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	4a40      	ldr	r2, [pc, #256]	; (800728c <TIM_Base_SetConfig+0x114>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d013      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007196:	d00f      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a3d      	ldr	r2, [pc, #244]	; (8007290 <TIM_Base_SetConfig+0x118>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00b      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a3c      	ldr	r2, [pc, #240]	; (8007294 <TIM_Base_SetConfig+0x11c>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d007      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a3b      	ldr	r2, [pc, #236]	; (8007298 <TIM_Base_SetConfig+0x120>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d003      	beq.n	80071b8 <TIM_Base_SetConfig+0x40>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a3a      	ldr	r2, [pc, #232]	; (800729c <TIM_Base_SetConfig+0x124>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d108      	bne.n	80071ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	685b      	ldr	r3, [r3, #4]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a2f      	ldr	r2, [pc, #188]	; (800728c <TIM_Base_SetConfig+0x114>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d02b      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d8:	d027      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <TIM_Base_SetConfig+0x118>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d023      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a2b      	ldr	r2, [pc, #172]	; (8007294 <TIM_Base_SetConfig+0x11c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d01f      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2a      	ldr	r2, [pc, #168]	; (8007298 <TIM_Base_SetConfig+0x120>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d01b      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a29      	ldr	r2, [pc, #164]	; (800729c <TIM_Base_SetConfig+0x124>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d017      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a28      	ldr	r2, [pc, #160]	; (80072a0 <TIM_Base_SetConfig+0x128>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d013      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a27      	ldr	r2, [pc, #156]	; (80072a4 <TIM_Base_SetConfig+0x12c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00f      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a26      	ldr	r2, [pc, #152]	; (80072a8 <TIM_Base_SetConfig+0x130>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00b      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a25      	ldr	r2, [pc, #148]	; (80072ac <TIM_Base_SetConfig+0x134>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d007      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a24      	ldr	r2, [pc, #144]	; (80072b0 <TIM_Base_SetConfig+0x138>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d003      	beq.n	800722a <TIM_Base_SetConfig+0xb2>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a23      	ldr	r2, [pc, #140]	; (80072b4 <TIM_Base_SetConfig+0x13c>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d108      	bne.n	800723c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	68db      	ldr	r3, [r3, #12]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	4313      	orrs	r3, r2
 800723a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68fa      	ldr	r2, [r7, #12]
 800724e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	689a      	ldr	r2, [r3, #8]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a0a      	ldr	r2, [pc, #40]	; (800728c <TIM_Base_SetConfig+0x114>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_Base_SetConfig+0xf8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a0c      	ldr	r2, [pc, #48]	; (800729c <TIM_Base_SetConfig+0x124>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d103      	bne.n	8007278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	615a      	str	r2, [r3, #20]
}
 800727e:	bf00      	nop
 8007280:	3714      	adds	r7, #20
 8007282:	46bd      	mov	sp, r7
 8007284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007288:	4770      	bx	lr
 800728a:	bf00      	nop
 800728c:	40010000 	.word	0x40010000
 8007290:	40000400 	.word	0x40000400
 8007294:	40000800 	.word	0x40000800
 8007298:	40000c00 	.word	0x40000c00
 800729c:	40010400 	.word	0x40010400
 80072a0:	40014000 	.word	0x40014000
 80072a4:	40014400 	.word	0x40014400
 80072a8:	40014800 	.word	0x40014800
 80072ac:	40001800 	.word	0x40001800
 80072b0:	40001c00 	.word	0x40001c00
 80072b4:	40002000 	.word	0x40002000

080072b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0201 	bic.w	r2, r3, #1
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f023 0303 	bic.w	r3, r3, #3
 80072ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	68fa      	ldr	r2, [r7, #12]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f023 0302 	bic.w	r3, r3, #2
 8007300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	689b      	ldr	r3, [r3, #8]
 8007306:	697a      	ldr	r2, [r7, #20]
 8007308:	4313      	orrs	r3, r2
 800730a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	4a20      	ldr	r2, [pc, #128]	; (8007390 <TIM_OC1_SetConfig+0xd8>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d003      	beq.n	800731c <TIM_OC1_SetConfig+0x64>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	4a1f      	ldr	r2, [pc, #124]	; (8007394 <TIM_OC1_SetConfig+0xdc>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d10c      	bne.n	8007336 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 0308 	bic.w	r3, r3, #8
 8007322:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	68db      	ldr	r3, [r3, #12]
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	4313      	orrs	r3, r2
 800732c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f023 0304 	bic.w	r3, r3, #4
 8007334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	4a15      	ldr	r2, [pc, #84]	; (8007390 <TIM_OC1_SetConfig+0xd8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d003      	beq.n	8007346 <TIM_OC1_SetConfig+0x8e>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	4a14      	ldr	r2, [pc, #80]	; (8007394 <TIM_OC1_SetConfig+0xdc>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d111      	bne.n	800736a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800734c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	693a      	ldr	r2, [r7, #16]
 800735c:	4313      	orrs	r3, r2
 800735e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	693a      	ldr	r2, [r7, #16]
 8007366:	4313      	orrs	r3, r2
 8007368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	693a      	ldr	r2, [r7, #16]
 800736e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	697a      	ldr	r2, [r7, #20]
 8007382:	621a      	str	r2, [r3, #32]
}
 8007384:	bf00      	nop
 8007386:	371c      	adds	r7, #28
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr
 8007390:	40010000 	.word	0x40010000
 8007394:	40010400 	.word	0x40010400

08007398 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007398:	b480      	push	{r7}
 800739a:	b087      	sub	sp, #28
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0210 	bic.w	r2, r3, #16
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	021b      	lsls	r3, r3, #8
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	4313      	orrs	r3, r2
 80073da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	f023 0320 	bic.w	r3, r3, #32
 80073e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	011b      	lsls	r3, r3, #4
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a22      	ldr	r2, [pc, #136]	; (800747c <TIM_OC2_SetConfig+0xe4>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d003      	beq.n	8007400 <TIM_OC2_SetConfig+0x68>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	4a21      	ldr	r2, [pc, #132]	; (8007480 <TIM_OC2_SetConfig+0xe8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10d      	bne.n	800741c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007406:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	697a      	ldr	r2, [r7, #20]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800741a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a17      	ldr	r2, [pc, #92]	; (800747c <TIM_OC2_SetConfig+0xe4>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_OC2_SetConfig+0x94>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a16      	ldr	r2, [pc, #88]	; (8007480 <TIM_OC2_SetConfig+0xe8>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d113      	bne.n	8007454 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800743a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4313      	orrs	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	621a      	str	r2, [r3, #32]
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40010000 	.word	0x40010000
 8007480:	40010400 	.word	0x40010400

08007484 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007484:	b480      	push	{r7}
 8007486:	b087      	sub	sp, #28
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
 800748c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	69db      	ldr	r3, [r3, #28]
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f023 0303 	bic.w	r3, r3, #3
 80074ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68fa      	ldr	r2, [r7, #12]
 80074c2:	4313      	orrs	r3, r2
 80074c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074c6:	697b      	ldr	r3, [r7, #20]
 80074c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	4a21      	ldr	r2, [pc, #132]	; (8007564 <TIM_OC3_SetConfig+0xe0>)
 80074de:	4293      	cmp	r3, r2
 80074e0:	d003      	beq.n	80074ea <TIM_OC3_SetConfig+0x66>
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	4a20      	ldr	r2, [pc, #128]	; (8007568 <TIM_OC3_SetConfig+0xe4>)
 80074e6:	4293      	cmp	r3, r2
 80074e8:	d10d      	bne.n	8007506 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	021b      	lsls	r3, r3, #8
 80074f8:	697a      	ldr	r2, [r7, #20]
 80074fa:	4313      	orrs	r3, r2
 80074fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007504:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	4a16      	ldr	r2, [pc, #88]	; (8007564 <TIM_OC3_SetConfig+0xe0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d003      	beq.n	8007516 <TIM_OC3_SetConfig+0x92>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	4a15      	ldr	r2, [pc, #84]	; (8007568 <TIM_OC3_SetConfig+0xe4>)
 8007512:	4293      	cmp	r3, r2
 8007514:	d113      	bne.n	800753e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800751c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007524:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	695b      	ldr	r3, [r3, #20]
 800752a:	011b      	lsls	r3, r3, #4
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	011b      	lsls	r3, r3, #4
 8007538:	693a      	ldr	r2, [r7, #16]
 800753a:	4313      	orrs	r3, r2
 800753c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	693a      	ldr	r2, [r7, #16]
 8007542:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	685a      	ldr	r2, [r3, #4]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	697a      	ldr	r2, [r7, #20]
 8007556:	621a      	str	r2, [r3, #32]
}
 8007558:	bf00      	nop
 800755a:	371c      	adds	r7, #28
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr
 8007564:	40010000 	.word	0x40010000
 8007568:	40010400 	.word	0x40010400

0800756c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800759a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	021b      	lsls	r3, r3, #8
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80075b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80075b8:	683b      	ldr	r3, [r7, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	031b      	lsls	r3, r3, #12
 80075be:	693a      	ldr	r2, [r7, #16]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a12      	ldr	r2, [pc, #72]	; (8007610 <TIM_OC4_SetConfig+0xa4>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d003      	beq.n	80075d4 <TIM_OC4_SetConfig+0x68>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a11      	ldr	r2, [pc, #68]	; (8007614 <TIM_OC4_SetConfig+0xa8>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d109      	bne.n	80075e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	695b      	ldr	r3, [r3, #20]
 80075e0:	019b      	lsls	r3, r3, #6
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	697a      	ldr	r2, [r7, #20]
 80075ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685a      	ldr	r2, [r3, #4]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	621a      	str	r2, [r3, #32]
}
 8007602:	bf00      	nop
 8007604:	371c      	adds	r7, #28
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr
 800760e:	bf00      	nop
 8007610:	40010000 	.word	0x40010000
 8007614:	40010400 	.word	0x40010400

08007618 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007618:	b480      	push	{r7}
 800761a:	b087      	sub	sp, #28
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	607a      	str	r2, [r7, #4]
 8007624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f023 0201 	bic.w	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6a1b      	ldr	r3, [r3, #32]
 800763c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4a28      	ldr	r2, [pc, #160]	; (80076e4 <TIM_TI1_SetConfig+0xcc>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d01b      	beq.n	800767e <TIM_TI1_SetConfig+0x66>
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800764c:	d017      	beq.n	800767e <TIM_TI1_SetConfig+0x66>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	4a25      	ldr	r2, [pc, #148]	; (80076e8 <TIM_TI1_SetConfig+0xd0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d013      	beq.n	800767e <TIM_TI1_SetConfig+0x66>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	4a24      	ldr	r2, [pc, #144]	; (80076ec <TIM_TI1_SetConfig+0xd4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00f      	beq.n	800767e <TIM_TI1_SetConfig+0x66>
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	4a23      	ldr	r2, [pc, #140]	; (80076f0 <TIM_TI1_SetConfig+0xd8>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d00b      	beq.n	800767e <TIM_TI1_SetConfig+0x66>
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	4a22      	ldr	r2, [pc, #136]	; (80076f4 <TIM_TI1_SetConfig+0xdc>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d007      	beq.n	800767e <TIM_TI1_SetConfig+0x66>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4a21      	ldr	r2, [pc, #132]	; (80076f8 <TIM_TI1_SetConfig+0xe0>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d003      	beq.n	800767e <TIM_TI1_SetConfig+0x66>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	4a20      	ldr	r2, [pc, #128]	; (80076fc <TIM_TI1_SetConfig+0xe4>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d101      	bne.n	8007682 <TIM_TI1_SetConfig+0x6a>
 800767e:	2301      	movs	r3, #1
 8007680:	e000      	b.n	8007684 <TIM_TI1_SetConfig+0x6c>
 8007682:	2300      	movs	r3, #0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d008      	beq.n	800769a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	f023 0303 	bic.w	r3, r3, #3
 800768e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4313      	orrs	r3, r2
 8007696:	617b      	str	r3, [r7, #20]
 8007698:	e003      	b.n	80076a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	f043 0301 	orr.w	r3, r3, #1
 80076a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80076a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	f023 030a 	bic.w	r3, r3, #10
 80076bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	f003 030a 	and.w	r3, r3, #10
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	693a      	ldr	r2, [r7, #16]
 80076d4:	621a      	str	r2, [r3, #32]
}
 80076d6:	bf00      	nop
 80076d8:	371c      	adds	r7, #28
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	40010000 	.word	0x40010000
 80076e8:	40000400 	.word	0x40000400
 80076ec:	40000800 	.word	0x40000800
 80076f0:	40000c00 	.word	0x40000c00
 80076f4:	40010400 	.word	0x40010400
 80076f8:	40014000 	.word	0x40014000
 80076fc:	40001800 	.word	0x40001800

08007700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	60b9      	str	r1, [r7, #8]
 800770a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a1b      	ldr	r3, [r3, #32]
 8007716:	f023 0201 	bic.w	r2, r3, #1
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	699b      	ldr	r3, [r3, #24]
 8007722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800772a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	f023 030a 	bic.w	r3, r3, #10
 800773c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	4313      	orrs	r3, r2
 8007744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800775e:	b480      	push	{r7}
 8007760:	b087      	sub	sp, #28
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
 800776a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1b      	ldr	r3, [r3, #32]
 8007770:	f023 0210 	bic.w	r2, r3, #16
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	699b      	ldr	r3, [r3, #24]
 800777c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a1b      	ldr	r3, [r3, #32]
 8007782:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800778a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	021b      	lsls	r3, r3, #8
 8007790:	697a      	ldr	r2, [r7, #20]
 8007792:	4313      	orrs	r3, r2
 8007794:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800779c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	031b      	lsls	r3, r3, #12
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	4313      	orrs	r3, r2
 80077a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80077b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	011b      	lsls	r3, r3, #4
 80077b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80077ba:	693a      	ldr	r2, [r7, #16]
 80077bc:	4313      	orrs	r3, r2
 80077be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	621a      	str	r2, [r3, #32]
}
 80077cc:	bf00      	nop
 80077ce:	371c      	adds	r7, #28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d6:	4770      	bx	lr

080077d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80077d8:	b480      	push	{r7}
 80077da:	b087      	sub	sp, #28
 80077dc:	af00      	add	r7, sp, #0
 80077de:	60f8      	str	r0, [r7, #12]
 80077e0:	60b9      	str	r1, [r7, #8]
 80077e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6a1b      	ldr	r3, [r3, #32]
 80077e8:	f023 0210 	bic.w	r2, r3, #16
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80077fc:	697b      	ldr	r3, [r7, #20]
 80077fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007802:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	031b      	lsls	r3, r3, #12
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	4313      	orrs	r3, r2
 800780c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007814:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	011b      	lsls	r3, r3, #4
 800781a:	693a      	ldr	r2, [r7, #16]
 800781c:	4313      	orrs	r3, r2
 800781e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	697a      	ldr	r2, [r7, #20]
 8007824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	693a      	ldr	r2, [r7, #16]
 800782a:	621a      	str	r2, [r3, #32]
}
 800782c:	bf00      	nop
 800782e:	371c      	adds	r7, #28
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr

08007838 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007838:	b480      	push	{r7}
 800783a:	b087      	sub	sp, #28
 800783c:	af00      	add	r7, sp, #0
 800783e:	60f8      	str	r0, [r7, #12]
 8007840:	60b9      	str	r1, [r7, #8]
 8007842:	607a      	str	r2, [r7, #4]
 8007844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6a1b      	ldr	r3, [r3, #32]
 800784a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	69db      	ldr	r3, [r3, #28]
 8007856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6a1b      	ldr	r3, [r3, #32]
 800785c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	f023 0303 	bic.w	r3, r3, #3
 8007864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007866:	697a      	ldr	r2, [r7, #20]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	4313      	orrs	r3, r2
 800786c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007874:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	011b      	lsls	r3, r3, #4
 800787a:	b2db      	uxtb	r3, r3
 800787c:	697a      	ldr	r2, [r7, #20]
 800787e:	4313      	orrs	r3, r2
 8007880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	021b      	lsls	r3, r3, #8
 800788e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007892:	693a      	ldr	r2, [r7, #16]
 8007894:	4313      	orrs	r3, r2
 8007896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	697a      	ldr	r2, [r7, #20]
 800789c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	621a      	str	r2, [r3, #32]
}
 80078a4:	bf00      	nop
 80078a6:	371c      	adds	r7, #28
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b087      	sub	sp, #28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	60f8      	str	r0, [r7, #12]
 80078b8:	60b9      	str	r1, [r7, #8]
 80078ba:	607a      	str	r2, [r7, #4]
 80078bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	69db      	ldr	r3, [r3, #28]
 80078ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	021b      	lsls	r3, r3, #8
 80078e2:	697a      	ldr	r2, [r7, #20]
 80078e4:	4313      	orrs	r3, r2
 80078e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80078ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	031b      	lsls	r3, r3, #12
 80078f4:	b29b      	uxth	r3, r3
 80078f6:	697a      	ldr	r2, [r7, #20]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007902:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	031b      	lsls	r3, r3, #12
 8007908:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800790c:	693a      	ldr	r2, [r7, #16]
 800790e:	4313      	orrs	r3, r2
 8007910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	697a      	ldr	r2, [r7, #20]
 8007916:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	bf00      	nop
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800792a:	b480      	push	{r7}
 800792c:	b085      	sub	sp, #20
 800792e:	af00      	add	r7, sp, #0
 8007930:	6078      	str	r0, [r7, #4]
 8007932:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	4313      	orrs	r3, r2
 8007948:	f043 0307 	orr.w	r3, r3, #7
 800794c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	609a      	str	r2, [r3, #8]
}
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795e:	4770      	bx	lr

08007960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
 800796c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800797a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	021a      	lsls	r2, r3, #8
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	431a      	orrs	r2, r3
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	4313      	orrs	r3, r2
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	4313      	orrs	r3, r2
 800798c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	609a      	str	r2, [r3, #8]
}
 8007994:	bf00      	nop
 8007996:	371c      	adds	r7, #28
 8007998:	46bd      	mov	sp, r7
 800799a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799e:	4770      	bx	lr

080079a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b087      	sub	sp, #28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 031f 	and.w	r3, r3, #31
 80079b2:	2201      	movs	r2, #1
 80079b4:	fa02 f303 	lsl.w	r3, r2, r3
 80079b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	6a1a      	ldr	r2, [r3, #32]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	43db      	mvns	r3, r3
 80079c2:	401a      	ands	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6a1a      	ldr	r2, [r3, #32]
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f003 031f 	and.w	r3, r3, #31
 80079d2:	6879      	ldr	r1, [r7, #4]
 80079d4:	fa01 f303 	lsl.w	r3, r1, r3
 80079d8:	431a      	orrs	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	621a      	str	r2, [r3, #32]
}
 80079de:	bf00      	nop
 80079e0:	371c      	adds	r7, #28
 80079e2:	46bd      	mov	sp, r7
 80079e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e8:	4770      	bx	lr

080079ea <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079ea:	b580      	push	{r7, lr}
 80079ec:	b084      	sub	sp, #16
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
 80079f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2204      	movs	r2, #4
 80079fa:	6839      	ldr	r1, [r7, #0]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f901 	bl	8007c04 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a10:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	689b      	ldr	r3, [r3, #8]
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2b06      	cmp	r3, #6
 8007a22:	d007      	beq.n	8007a34 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	681a      	ldr	r2, [r3, #0]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0201 	orr.w	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3710      	adds	r7, #16
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d101      	bne.n	8007a58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a54:	2302      	movs	r3, #2
 8007a56:	e05a      	b.n	8007b0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2202      	movs	r2, #2
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	689b      	ldr	r3, [r3, #8]
 8007a76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a21      	ldr	r2, [pc, #132]	; (8007b1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d022      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aa4:	d01d      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a1d      	ldr	r2, [pc, #116]	; (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007aac:	4293      	cmp	r3, r2
 8007aae:	d018      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a1b      	ldr	r2, [pc, #108]	; (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d013      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	4a1a      	ldr	r2, [pc, #104]	; (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	d00e      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a18      	ldr	r2, [pc, #96]	; (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d009      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4a17      	ldr	r2, [pc, #92]	; (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	d004      	beq.n	8007ae2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4a15      	ldr	r2, [pc, #84]	; (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d10c      	bne.n	8007afc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007ae8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	4313      	orrs	r3, r2
 8007af2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3714      	adds	r7, #20
 8007b12:	46bd      	mov	sp, r7
 8007b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b18:	4770      	bx	lr
 8007b1a:	bf00      	nop
 8007b1c:	40010000 	.word	0x40010000
 8007b20:	40000400 	.word	0x40000400
 8007b24:	40000800 	.word	0x40000800
 8007b28:	40000c00 	.word	0x40000c00
 8007b2c:	40010400 	.word	0x40010400
 8007b30:	40014000 	.word	0x40014000
 8007b34:	40001800 	.word	0x40001800

08007b38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b42:	2300      	movs	r3, #0
 8007b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d101      	bne.n	8007b54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b50:	2302      	movs	r3, #2
 8007b52:	e03d      	b.n	8007bd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	68db      	ldr	r3, [r3, #12]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	4313      	orrs	r3, r2
 8007b76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	4313      	orrs	r3, r2
 8007bae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	68fa      	ldr	r2, [r7, #12]
 8007bc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3714      	adds	r7, #20
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr

08007bdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bdc:	b480      	push	{r7}
 8007bde:	b083      	sub	sp, #12
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007be4:	bf00      	nop
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bf8:	bf00      	nop
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr

08007c04 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007c04:	b480      	push	{r7}
 8007c06:	b087      	sub	sp, #28
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	60f8      	str	r0, [r7, #12]
 8007c0c:	60b9      	str	r1, [r7, #8]
 8007c0e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	f003 031f 	and.w	r3, r3, #31
 8007c16:	2204      	movs	r2, #4
 8007c18:	fa02 f303 	lsl.w	r3, r2, r3
 8007c1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	6a1a      	ldr	r2, [r3, #32]
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	43db      	mvns	r3, r3
 8007c26:	401a      	ands	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a1a      	ldr	r2, [r3, #32]
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3c:	431a      	orrs	r2, r3
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	621a      	str	r2, [r3, #32]
}
 8007c42:	bf00      	nop
 8007c44:	371c      	adds	r7, #28
 8007c46:	46bd      	mov	sp, r7
 8007c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4c:	4770      	bx	lr

08007c4e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c4e:	b580      	push	{r7, lr}
 8007c50:	b082      	sub	sp, #8
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d101      	bne.n	8007c60 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e03f      	b.n	8007ce0 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d106      	bne.n	8007c7a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2200      	movs	r2, #0
 8007c70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f005 fbdd 	bl	800d434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2224      	movs	r2, #36	; 0x24
 8007c7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007c90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fabe 	bl	8008214 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691a      	ldr	r2, [r3, #16]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007ca6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	695a      	ldr	r2, [r3, #20]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	68da      	ldr	r2, [r3, #12]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2220      	movs	r2, #32
 8007cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2220      	movs	r2, #32
 8007cda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007cde:	2300      	movs	r3, #0
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b20      	cmp	r3, #32
 8007d00:	d140      	bne.n	8007d84 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d002      	beq.n	8007d0e <HAL_UART_Receive_IT+0x26>
 8007d08:	88fb      	ldrh	r3, [r7, #6]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e039      	b.n	8007d86 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	d101      	bne.n	8007d20 <HAL_UART_Receive_IT+0x38>
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	e032      	b.n	8007d86 <HAL_UART_Receive_IT+0x9e>
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	2201      	movs	r2, #1
 8007d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	68ba      	ldr	r2, [r7, #8]
 8007d2c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	88fa      	ldrh	r2, [r7, #6]
 8007d32:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	88fa      	ldrh	r2, [r7, #6]
 8007d38:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2222      	movs	r2, #34	; 0x22
 8007d44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68da      	ldr	r2, [r3, #12]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d5e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695a      	ldr	r2, [r3, #20]
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f042 0201 	orr.w	r2, r2, #1
 8007d6e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	68da      	ldr	r2, [r3, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0220 	orr.w	r2, r2, #32
 8007d7e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3714      	adds	r7, #20
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
	...

08007d94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b088      	sub	sp, #32
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	695b      	ldr	r3, [r3, #20]
 8007db2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007db4:	2300      	movs	r3, #0
 8007db6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007db8:	2300      	movs	r3, #0
 8007dba:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	f003 030f 	and.w	r3, r3, #15
 8007dc2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10d      	bne.n	8007de6 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	f003 0320 	and.w	r3, r3, #32
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d008      	beq.n	8007de6 <HAL_UART_IRQHandler+0x52>
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	f003 0320 	and.w	r3, r3, #32
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d003      	beq.n	8007de6 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f996 	bl	8008110 <UART_Receive_IT>
      return;
 8007de4:	e0d1      	b.n	8007f8a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	f000 80b0 	beq.w	8007f4e <HAL_UART_IRQHandler+0x1ba>
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f003 0301 	and.w	r3, r3, #1
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d105      	bne.n	8007e04 <HAL_UART_IRQHandler+0x70>
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	f000 80a5 	beq.w	8007f4e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	f003 0301 	and.w	r3, r3, #1
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00a      	beq.n	8007e24 <HAL_UART_IRQHandler+0x90>
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d005      	beq.n	8007e24 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e1c:	f043 0201 	orr.w	r2, r3, #1
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e24:	69fb      	ldr	r3, [r7, #28]
 8007e26:	f003 0304 	and.w	r3, r3, #4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00a      	beq.n	8007e44 <HAL_UART_IRQHandler+0xb0>
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f003 0301 	and.w	r3, r3, #1
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d005      	beq.n	8007e44 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e3c:	f043 0202 	orr.w	r2, r3, #2
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <HAL_UART_IRQHandler+0xd0>
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d005      	beq.n	8007e64 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e5c:	f043 0204 	orr.w	r2, r3, #4
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	f003 0308 	and.w	r3, r3, #8
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d00f      	beq.n	8007e8e <HAL_UART_IRQHandler+0xfa>
 8007e6e:	69bb      	ldr	r3, [r7, #24]
 8007e70:	f003 0320 	and.w	r3, r3, #32
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d104      	bne.n	8007e82 <HAL_UART_IRQHandler+0xee>
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f003 0301 	and.w	r3, r3, #1
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d005      	beq.n	8007e8e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e86:	f043 0208 	orr.w	r2, r3, #8
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d078      	beq.n	8007f88 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007e96:	69fb      	ldr	r3, [r7, #28]
 8007e98:	f003 0320 	and.w	r3, r3, #32
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d007      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x11c>
 8007ea0:	69bb      	ldr	r3, [r7, #24]
 8007ea2:	f003 0320 	and.w	r3, r3, #32
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 f930 	bl	8008110 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eba:	2b40      	cmp	r3, #64	; 0x40
 8007ebc:	bf0c      	ite	eq
 8007ebe:	2301      	moveq	r3, #1
 8007ec0:	2300      	movne	r3, #0
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eca:	f003 0308 	and.w	r3, r3, #8
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d102      	bne.n	8007ed8 <HAL_UART_IRQHandler+0x144>
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d031      	beq.n	8007f3c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f879 	bl	8007fd0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	695b      	ldr	r3, [r3, #20]
 8007ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ee8:	2b40      	cmp	r3, #64	; 0x40
 8007eea:	d123      	bne.n	8007f34 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	695a      	ldr	r2, [r3, #20]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007efa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d013      	beq.n	8007f2c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f08:	4a21      	ldr	r2, [pc, #132]	; (8007f90 <HAL_UART_IRQHandler+0x1fc>)
 8007f0a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fb f909 	bl	8003128 <HAL_DMA_Abort_IT>
 8007f16:	4603      	mov	r3, r0
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d016      	beq.n	8007f4a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007f26:	4610      	mov	r0, r2
 8007f28:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f2a:	e00e      	b.n	8007f4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007f2c:	6878      	ldr	r0, [r7, #4]
 8007f2e:	f000 f845 	bl	8007fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f32:	e00a      	b.n	8007f4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	f000 f841 	bl	8007fbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f3a:	e006      	b.n	8007f4a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f000 f83d 	bl	8007fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007f48:	e01e      	b.n	8007f88 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f4a:	bf00      	nop
    return;
 8007f4c:	e01c      	b.n	8007f88 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d008      	beq.n	8007f6a <HAL_UART_IRQHandler+0x1d6>
 8007f58:	69bb      	ldr	r3, [r7, #24]
 8007f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f000 f866 	bl	8008034 <UART_Transmit_IT>
    return;
 8007f68:	e00f      	b.n	8007f8a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f6a:	69fb      	ldr	r3, [r7, #28]
 8007f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d00a      	beq.n	8007f8a <HAL_UART_IRQHandler+0x1f6>
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d005      	beq.n	8007f8a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f8ae 	bl	80080e0 <UART_EndTransmit_IT>
    return;
 8007f84:	bf00      	nop
 8007f86:	e000      	b.n	8007f8a <HAL_UART_IRQHandler+0x1f6>
    return;
 8007f88:	bf00      	nop
  }
}
 8007f8a:	3720      	adds	r7, #32
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	bd80      	pop	{r7, pc}
 8007f90:	0800800d 	.word	0x0800800d

08007f94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b083      	sub	sp, #12
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fc4:	bf00      	nop
 8007fc6:	370c      	adds	r7, #12
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr

08007fd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007fd0:	b480      	push	{r7}
 8007fd2:	b083      	sub	sp, #12
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	68da      	ldr	r2, [r3, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fe6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695a      	ldr	r2, [r3, #20]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f022 0201 	bic.w	r2, r2, #1
 8007ff6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2220      	movs	r2, #32
 8007ffc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008000:	bf00      	nop
 8008002:	370c      	adds	r7, #12
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008018:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2200      	movs	r2, #0
 800801e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2200      	movs	r2, #0
 8008024:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f7ff ffc8 	bl	8007fbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800802c:	bf00      	nop
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b21      	cmp	r3, #33	; 0x21
 8008046:	d144      	bne.n	80080d2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	689b      	ldr	r3, [r3, #8]
 800804c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008050:	d11a      	bne.n	8008088 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a1b      	ldr	r3, [r3, #32]
 8008056:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	881b      	ldrh	r3, [r3, #0]
 800805c:	461a      	mov	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008066:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	2b00      	cmp	r3, #0
 800806e:	d105      	bne.n	800807c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	1c9a      	adds	r2, r3, #2
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	621a      	str	r2, [r3, #32]
 800807a:	e00e      	b.n	800809a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a1b      	ldr	r3, [r3, #32]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	621a      	str	r2, [r3, #32]
 8008086:	e008      	b.n	800809a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	1c59      	adds	r1, r3, #1
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	6211      	str	r1, [r2, #32]
 8008092:	781a      	ldrb	r2, [r3, #0]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800809e:	b29b      	uxth	r3, r3
 80080a0:	3b01      	subs	r3, #1
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	4619      	mov	r1, r3
 80080a8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10f      	bne.n	80080ce <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080bc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68da      	ldr	r2, [r3, #12]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080cc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	e000      	b.n	80080d4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80080d2:	2302      	movs	r3, #2
  }
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080f6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2220      	movs	r2, #32
 80080fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff ff47 	bl	8007f94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b084      	sub	sp, #16
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b22      	cmp	r3, #34	; 0x22
 8008122:	d171      	bne.n	8008208 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800812c:	d123      	bne.n	8008176 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	2b00      	cmp	r3, #0
 800813a:	d10e      	bne.n	800815a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	b29b      	uxth	r3, r3
 8008144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008148:	b29a      	uxth	r2, r3
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008152:	1c9a      	adds	r2, r3, #2
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	629a      	str	r2, [r3, #40]	; 0x28
 8008158:	e029      	b.n	80081ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	b29b      	uxth	r3, r3
 8008162:	b2db      	uxtb	r3, r3
 8008164:	b29a      	uxth	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800816e:	1c5a      	adds	r2, r3, #1
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	629a      	str	r2, [r3, #40]	; 0x28
 8008174:	e01b      	b.n	80081ae <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10a      	bne.n	8008194 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	6858      	ldr	r0, [r3, #4]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008188:	1c59      	adds	r1, r3, #1
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	6291      	str	r1, [r2, #40]	; 0x28
 800818e:	b2c2      	uxtb	r2, r0
 8008190:	701a      	strb	r2, [r3, #0]
 8008192:	e00c      	b.n	80081ae <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	b2da      	uxtb	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081a0:	1c58      	adds	r0, r3, #1
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	6288      	str	r0, [r1, #40]	; 0x28
 80081a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80081aa:	b2d2      	uxtb	r2, r2
 80081ac:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b01      	subs	r3, #1
 80081b6:	b29b      	uxth	r3, r3
 80081b8:	687a      	ldr	r2, [r7, #4]
 80081ba:	4619      	mov	r1, r3
 80081bc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d120      	bne.n	8008204 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0220 	bic.w	r2, r2, #32
 80081d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	68da      	ldr	r2, [r3, #12]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	695a      	ldr	r2, [r3, #20]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	f022 0201 	bic.w	r2, r2, #1
 80081f0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2220      	movs	r2, #32
 80081f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f7ff fed4 	bl	8007fa8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008200:	2300      	movs	r3, #0
 8008202:	e002      	b.n	800820a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	e000      	b.n	800820a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008208:	2302      	movs	r3, #2
  }
}
 800820a:	4618      	mov	r0, r3
 800820c:	3710      	adds	r7, #16
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
	...

08008214 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008218:	b085      	sub	sp, #20
 800821a:	af00      	add	r7, sp, #0
 800821c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	691b      	ldr	r3, [r3, #16]
 8008224:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	68da      	ldr	r2, [r3, #12]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	430a      	orrs	r2, r1
 8008232:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	689a      	ldr	r2, [r3, #8]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	691b      	ldr	r3, [r3, #16]
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	695b      	ldr	r3, [r3, #20]
 8008242:	431a      	orrs	r2, r3
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	69db      	ldr	r3, [r3, #28]
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68db      	ldr	r3, [r3, #12]
 8008252:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008256:	f023 030c 	bic.w	r3, r3, #12
 800825a:	687a      	ldr	r2, [r7, #4]
 800825c:	6812      	ldr	r2, [r2, #0]
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	430b      	orrs	r3, r1
 8008262:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	699a      	ldr	r2, [r3, #24]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	430a      	orrs	r2, r1
 8008278:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008282:	f040 818b 	bne.w	800859c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4ac1      	ldr	r2, [pc, #772]	; (8008590 <UART_SetConfig+0x37c>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d005      	beq.n	800829c <UART_SetConfig+0x88>
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4abf      	ldr	r2, [pc, #764]	; (8008594 <UART_SetConfig+0x380>)
 8008296:	4293      	cmp	r3, r2
 8008298:	f040 80bd 	bne.w	8008416 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800829c:	f7fd f906 	bl	80054ac <HAL_RCC_GetPCLK2Freq>
 80082a0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	461d      	mov	r5, r3
 80082a6:	f04f 0600 	mov.w	r6, #0
 80082aa:	46a8      	mov	r8, r5
 80082ac:	46b1      	mov	r9, r6
 80082ae:	eb18 0308 	adds.w	r3, r8, r8
 80082b2:	eb49 0409 	adc.w	r4, r9, r9
 80082b6:	4698      	mov	r8, r3
 80082b8:	46a1      	mov	r9, r4
 80082ba:	eb18 0805 	adds.w	r8, r8, r5
 80082be:	eb49 0906 	adc.w	r9, r9, r6
 80082c2:	f04f 0100 	mov.w	r1, #0
 80082c6:	f04f 0200 	mov.w	r2, #0
 80082ca:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80082ce:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80082d2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80082d6:	4688      	mov	r8, r1
 80082d8:	4691      	mov	r9, r2
 80082da:	eb18 0005 	adds.w	r0, r8, r5
 80082de:	eb49 0106 	adc.w	r1, r9, r6
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	461d      	mov	r5, r3
 80082e8:	f04f 0600 	mov.w	r6, #0
 80082ec:	196b      	adds	r3, r5, r5
 80082ee:	eb46 0406 	adc.w	r4, r6, r6
 80082f2:	461a      	mov	r2, r3
 80082f4:	4623      	mov	r3, r4
 80082f6:	f7f8 fcc7 	bl	8000c88 <__aeabi_uldivmod>
 80082fa:	4603      	mov	r3, r0
 80082fc:	460c      	mov	r4, r1
 80082fe:	461a      	mov	r2, r3
 8008300:	4ba5      	ldr	r3, [pc, #660]	; (8008598 <UART_SetConfig+0x384>)
 8008302:	fba3 2302 	umull	r2, r3, r3, r2
 8008306:	095b      	lsrs	r3, r3, #5
 8008308:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	461d      	mov	r5, r3
 8008310:	f04f 0600 	mov.w	r6, #0
 8008314:	46a9      	mov	r9, r5
 8008316:	46b2      	mov	sl, r6
 8008318:	eb19 0309 	adds.w	r3, r9, r9
 800831c:	eb4a 040a 	adc.w	r4, sl, sl
 8008320:	4699      	mov	r9, r3
 8008322:	46a2      	mov	sl, r4
 8008324:	eb19 0905 	adds.w	r9, r9, r5
 8008328:	eb4a 0a06 	adc.w	sl, sl, r6
 800832c:	f04f 0100 	mov.w	r1, #0
 8008330:	f04f 0200 	mov.w	r2, #0
 8008334:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008338:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800833c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008340:	4689      	mov	r9, r1
 8008342:	4692      	mov	sl, r2
 8008344:	eb19 0005 	adds.w	r0, r9, r5
 8008348:	eb4a 0106 	adc.w	r1, sl, r6
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	685b      	ldr	r3, [r3, #4]
 8008350:	461d      	mov	r5, r3
 8008352:	f04f 0600 	mov.w	r6, #0
 8008356:	196b      	adds	r3, r5, r5
 8008358:	eb46 0406 	adc.w	r4, r6, r6
 800835c:	461a      	mov	r2, r3
 800835e:	4623      	mov	r3, r4
 8008360:	f7f8 fc92 	bl	8000c88 <__aeabi_uldivmod>
 8008364:	4603      	mov	r3, r0
 8008366:	460c      	mov	r4, r1
 8008368:	461a      	mov	r2, r3
 800836a:	4b8b      	ldr	r3, [pc, #556]	; (8008598 <UART_SetConfig+0x384>)
 800836c:	fba3 1302 	umull	r1, r3, r3, r2
 8008370:	095b      	lsrs	r3, r3, #5
 8008372:	2164      	movs	r1, #100	; 0x64
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	00db      	lsls	r3, r3, #3
 800837c:	3332      	adds	r3, #50	; 0x32
 800837e:	4a86      	ldr	r2, [pc, #536]	; (8008598 <UART_SetConfig+0x384>)
 8008380:	fba2 2303 	umull	r2, r3, r2, r3
 8008384:	095b      	lsrs	r3, r3, #5
 8008386:	005b      	lsls	r3, r3, #1
 8008388:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800838c:	4498      	add	r8, r3
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	461d      	mov	r5, r3
 8008392:	f04f 0600 	mov.w	r6, #0
 8008396:	46a9      	mov	r9, r5
 8008398:	46b2      	mov	sl, r6
 800839a:	eb19 0309 	adds.w	r3, r9, r9
 800839e:	eb4a 040a 	adc.w	r4, sl, sl
 80083a2:	4699      	mov	r9, r3
 80083a4:	46a2      	mov	sl, r4
 80083a6:	eb19 0905 	adds.w	r9, r9, r5
 80083aa:	eb4a 0a06 	adc.w	sl, sl, r6
 80083ae:	f04f 0100 	mov.w	r1, #0
 80083b2:	f04f 0200 	mov.w	r2, #0
 80083b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083c2:	4689      	mov	r9, r1
 80083c4:	4692      	mov	sl, r2
 80083c6:	eb19 0005 	adds.w	r0, r9, r5
 80083ca:	eb4a 0106 	adc.w	r1, sl, r6
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	461d      	mov	r5, r3
 80083d4:	f04f 0600 	mov.w	r6, #0
 80083d8:	196b      	adds	r3, r5, r5
 80083da:	eb46 0406 	adc.w	r4, r6, r6
 80083de:	461a      	mov	r2, r3
 80083e0:	4623      	mov	r3, r4
 80083e2:	f7f8 fc51 	bl	8000c88 <__aeabi_uldivmod>
 80083e6:	4603      	mov	r3, r0
 80083e8:	460c      	mov	r4, r1
 80083ea:	461a      	mov	r2, r3
 80083ec:	4b6a      	ldr	r3, [pc, #424]	; (8008598 <UART_SetConfig+0x384>)
 80083ee:	fba3 1302 	umull	r1, r3, r3, r2
 80083f2:	095b      	lsrs	r3, r3, #5
 80083f4:	2164      	movs	r1, #100	; 0x64
 80083f6:	fb01 f303 	mul.w	r3, r1, r3
 80083fa:	1ad3      	subs	r3, r2, r3
 80083fc:	00db      	lsls	r3, r3, #3
 80083fe:	3332      	adds	r3, #50	; 0x32
 8008400:	4a65      	ldr	r2, [pc, #404]	; (8008598 <UART_SetConfig+0x384>)
 8008402:	fba2 2303 	umull	r2, r3, r2, r3
 8008406:	095b      	lsrs	r3, r3, #5
 8008408:	f003 0207 	and.w	r2, r3, #7
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4442      	add	r2, r8
 8008412:	609a      	str	r2, [r3, #8]
 8008414:	e26f      	b.n	80088f6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008416:	f7fd f835 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 800841a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	461d      	mov	r5, r3
 8008420:	f04f 0600 	mov.w	r6, #0
 8008424:	46a8      	mov	r8, r5
 8008426:	46b1      	mov	r9, r6
 8008428:	eb18 0308 	adds.w	r3, r8, r8
 800842c:	eb49 0409 	adc.w	r4, r9, r9
 8008430:	4698      	mov	r8, r3
 8008432:	46a1      	mov	r9, r4
 8008434:	eb18 0805 	adds.w	r8, r8, r5
 8008438:	eb49 0906 	adc.w	r9, r9, r6
 800843c:	f04f 0100 	mov.w	r1, #0
 8008440:	f04f 0200 	mov.w	r2, #0
 8008444:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008448:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800844c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008450:	4688      	mov	r8, r1
 8008452:	4691      	mov	r9, r2
 8008454:	eb18 0005 	adds.w	r0, r8, r5
 8008458:	eb49 0106 	adc.w	r1, r9, r6
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	461d      	mov	r5, r3
 8008462:	f04f 0600 	mov.w	r6, #0
 8008466:	196b      	adds	r3, r5, r5
 8008468:	eb46 0406 	adc.w	r4, r6, r6
 800846c:	461a      	mov	r2, r3
 800846e:	4623      	mov	r3, r4
 8008470:	f7f8 fc0a 	bl	8000c88 <__aeabi_uldivmod>
 8008474:	4603      	mov	r3, r0
 8008476:	460c      	mov	r4, r1
 8008478:	461a      	mov	r2, r3
 800847a:	4b47      	ldr	r3, [pc, #284]	; (8008598 <UART_SetConfig+0x384>)
 800847c:	fba3 2302 	umull	r2, r3, r3, r2
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008486:	68bb      	ldr	r3, [r7, #8]
 8008488:	461d      	mov	r5, r3
 800848a:	f04f 0600 	mov.w	r6, #0
 800848e:	46a9      	mov	r9, r5
 8008490:	46b2      	mov	sl, r6
 8008492:	eb19 0309 	adds.w	r3, r9, r9
 8008496:	eb4a 040a 	adc.w	r4, sl, sl
 800849a:	4699      	mov	r9, r3
 800849c:	46a2      	mov	sl, r4
 800849e:	eb19 0905 	adds.w	r9, r9, r5
 80084a2:	eb4a 0a06 	adc.w	sl, sl, r6
 80084a6:	f04f 0100 	mov.w	r1, #0
 80084aa:	f04f 0200 	mov.w	r2, #0
 80084ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80084b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80084ba:	4689      	mov	r9, r1
 80084bc:	4692      	mov	sl, r2
 80084be:	eb19 0005 	adds.w	r0, r9, r5
 80084c2:	eb4a 0106 	adc.w	r1, sl, r6
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	461d      	mov	r5, r3
 80084cc:	f04f 0600 	mov.w	r6, #0
 80084d0:	196b      	adds	r3, r5, r5
 80084d2:	eb46 0406 	adc.w	r4, r6, r6
 80084d6:	461a      	mov	r2, r3
 80084d8:	4623      	mov	r3, r4
 80084da:	f7f8 fbd5 	bl	8000c88 <__aeabi_uldivmod>
 80084de:	4603      	mov	r3, r0
 80084e0:	460c      	mov	r4, r1
 80084e2:	461a      	mov	r2, r3
 80084e4:	4b2c      	ldr	r3, [pc, #176]	; (8008598 <UART_SetConfig+0x384>)
 80084e6:	fba3 1302 	umull	r1, r3, r3, r2
 80084ea:	095b      	lsrs	r3, r3, #5
 80084ec:	2164      	movs	r1, #100	; 0x64
 80084ee:	fb01 f303 	mul.w	r3, r1, r3
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	3332      	adds	r3, #50	; 0x32
 80084f8:	4a27      	ldr	r2, [pc, #156]	; (8008598 <UART_SetConfig+0x384>)
 80084fa:	fba2 2303 	umull	r2, r3, r2, r3
 80084fe:	095b      	lsrs	r3, r3, #5
 8008500:	005b      	lsls	r3, r3, #1
 8008502:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008506:	4498      	add	r8, r3
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	461d      	mov	r5, r3
 800850c:	f04f 0600 	mov.w	r6, #0
 8008510:	46a9      	mov	r9, r5
 8008512:	46b2      	mov	sl, r6
 8008514:	eb19 0309 	adds.w	r3, r9, r9
 8008518:	eb4a 040a 	adc.w	r4, sl, sl
 800851c:	4699      	mov	r9, r3
 800851e:	46a2      	mov	sl, r4
 8008520:	eb19 0905 	adds.w	r9, r9, r5
 8008524:	eb4a 0a06 	adc.w	sl, sl, r6
 8008528:	f04f 0100 	mov.w	r1, #0
 800852c:	f04f 0200 	mov.w	r2, #0
 8008530:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008534:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008538:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800853c:	4689      	mov	r9, r1
 800853e:	4692      	mov	sl, r2
 8008540:	eb19 0005 	adds.w	r0, r9, r5
 8008544:	eb4a 0106 	adc.w	r1, sl, r6
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	461d      	mov	r5, r3
 800854e:	f04f 0600 	mov.w	r6, #0
 8008552:	196b      	adds	r3, r5, r5
 8008554:	eb46 0406 	adc.w	r4, r6, r6
 8008558:	461a      	mov	r2, r3
 800855a:	4623      	mov	r3, r4
 800855c:	f7f8 fb94 	bl	8000c88 <__aeabi_uldivmod>
 8008560:	4603      	mov	r3, r0
 8008562:	460c      	mov	r4, r1
 8008564:	461a      	mov	r2, r3
 8008566:	4b0c      	ldr	r3, [pc, #48]	; (8008598 <UART_SetConfig+0x384>)
 8008568:	fba3 1302 	umull	r1, r3, r3, r2
 800856c:	095b      	lsrs	r3, r3, #5
 800856e:	2164      	movs	r1, #100	; 0x64
 8008570:	fb01 f303 	mul.w	r3, r1, r3
 8008574:	1ad3      	subs	r3, r2, r3
 8008576:	00db      	lsls	r3, r3, #3
 8008578:	3332      	adds	r3, #50	; 0x32
 800857a:	4a07      	ldr	r2, [pc, #28]	; (8008598 <UART_SetConfig+0x384>)
 800857c:	fba2 2303 	umull	r2, r3, r2, r3
 8008580:	095b      	lsrs	r3, r3, #5
 8008582:	f003 0207 	and.w	r2, r3, #7
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	4442      	add	r2, r8
 800858c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800858e:	e1b2      	b.n	80088f6 <UART_SetConfig+0x6e2>
 8008590:	40011000 	.word	0x40011000
 8008594:	40011400 	.word	0x40011400
 8008598:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4ad7      	ldr	r2, [pc, #860]	; (8008900 <UART_SetConfig+0x6ec>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d005      	beq.n	80085b2 <UART_SetConfig+0x39e>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4ad6      	ldr	r2, [pc, #856]	; (8008904 <UART_SetConfig+0x6f0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	f040 80d1 	bne.w	8008754 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80085b2:	f7fc ff7b 	bl	80054ac <HAL_RCC_GetPCLK2Freq>
 80085b6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80085b8:	68bb      	ldr	r3, [r7, #8]
 80085ba:	469a      	mov	sl, r3
 80085bc:	f04f 0b00 	mov.w	fp, #0
 80085c0:	46d0      	mov	r8, sl
 80085c2:	46d9      	mov	r9, fp
 80085c4:	eb18 0308 	adds.w	r3, r8, r8
 80085c8:	eb49 0409 	adc.w	r4, r9, r9
 80085cc:	4698      	mov	r8, r3
 80085ce:	46a1      	mov	r9, r4
 80085d0:	eb18 080a 	adds.w	r8, r8, sl
 80085d4:	eb49 090b 	adc.w	r9, r9, fp
 80085d8:	f04f 0100 	mov.w	r1, #0
 80085dc:	f04f 0200 	mov.w	r2, #0
 80085e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80085e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80085e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80085ec:	4688      	mov	r8, r1
 80085ee:	4691      	mov	r9, r2
 80085f0:	eb1a 0508 	adds.w	r5, sl, r8
 80085f4:	eb4b 0609 	adc.w	r6, fp, r9
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	4619      	mov	r1, r3
 80085fe:	f04f 0200 	mov.w	r2, #0
 8008602:	f04f 0300 	mov.w	r3, #0
 8008606:	f04f 0400 	mov.w	r4, #0
 800860a:	0094      	lsls	r4, r2, #2
 800860c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008610:	008b      	lsls	r3, r1, #2
 8008612:	461a      	mov	r2, r3
 8008614:	4623      	mov	r3, r4
 8008616:	4628      	mov	r0, r5
 8008618:	4631      	mov	r1, r6
 800861a:	f7f8 fb35 	bl	8000c88 <__aeabi_uldivmod>
 800861e:	4603      	mov	r3, r0
 8008620:	460c      	mov	r4, r1
 8008622:	461a      	mov	r2, r3
 8008624:	4bb8      	ldr	r3, [pc, #736]	; (8008908 <UART_SetConfig+0x6f4>)
 8008626:	fba3 2302 	umull	r2, r3, r3, r2
 800862a:	095b      	lsrs	r3, r3, #5
 800862c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	469b      	mov	fp, r3
 8008634:	f04f 0c00 	mov.w	ip, #0
 8008638:	46d9      	mov	r9, fp
 800863a:	46e2      	mov	sl, ip
 800863c:	eb19 0309 	adds.w	r3, r9, r9
 8008640:	eb4a 040a 	adc.w	r4, sl, sl
 8008644:	4699      	mov	r9, r3
 8008646:	46a2      	mov	sl, r4
 8008648:	eb19 090b 	adds.w	r9, r9, fp
 800864c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008650:	f04f 0100 	mov.w	r1, #0
 8008654:	f04f 0200 	mov.w	r2, #0
 8008658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800865c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008664:	4689      	mov	r9, r1
 8008666:	4692      	mov	sl, r2
 8008668:	eb1b 0509 	adds.w	r5, fp, r9
 800866c:	eb4c 060a 	adc.w	r6, ip, sl
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	4619      	mov	r1, r3
 8008676:	f04f 0200 	mov.w	r2, #0
 800867a:	f04f 0300 	mov.w	r3, #0
 800867e:	f04f 0400 	mov.w	r4, #0
 8008682:	0094      	lsls	r4, r2, #2
 8008684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008688:	008b      	lsls	r3, r1, #2
 800868a:	461a      	mov	r2, r3
 800868c:	4623      	mov	r3, r4
 800868e:	4628      	mov	r0, r5
 8008690:	4631      	mov	r1, r6
 8008692:	f7f8 faf9 	bl	8000c88 <__aeabi_uldivmod>
 8008696:	4603      	mov	r3, r0
 8008698:	460c      	mov	r4, r1
 800869a:	461a      	mov	r2, r3
 800869c:	4b9a      	ldr	r3, [pc, #616]	; (8008908 <UART_SetConfig+0x6f4>)
 800869e:	fba3 1302 	umull	r1, r3, r3, r2
 80086a2:	095b      	lsrs	r3, r3, #5
 80086a4:	2164      	movs	r1, #100	; 0x64
 80086a6:	fb01 f303 	mul.w	r3, r1, r3
 80086aa:	1ad3      	subs	r3, r2, r3
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	3332      	adds	r3, #50	; 0x32
 80086b0:	4a95      	ldr	r2, [pc, #596]	; (8008908 <UART_SetConfig+0x6f4>)
 80086b2:	fba2 2303 	umull	r2, r3, r2, r3
 80086b6:	095b      	lsrs	r3, r3, #5
 80086b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80086bc:	4498      	add	r8, r3
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	469b      	mov	fp, r3
 80086c2:	f04f 0c00 	mov.w	ip, #0
 80086c6:	46d9      	mov	r9, fp
 80086c8:	46e2      	mov	sl, ip
 80086ca:	eb19 0309 	adds.w	r3, r9, r9
 80086ce:	eb4a 040a 	adc.w	r4, sl, sl
 80086d2:	4699      	mov	r9, r3
 80086d4:	46a2      	mov	sl, r4
 80086d6:	eb19 090b 	adds.w	r9, r9, fp
 80086da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80086de:	f04f 0100 	mov.w	r1, #0
 80086e2:	f04f 0200 	mov.w	r2, #0
 80086e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80086ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80086f2:	4689      	mov	r9, r1
 80086f4:	4692      	mov	sl, r2
 80086f6:	eb1b 0509 	adds.w	r5, fp, r9
 80086fa:	eb4c 060a 	adc.w	r6, ip, sl
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	4619      	mov	r1, r3
 8008704:	f04f 0200 	mov.w	r2, #0
 8008708:	f04f 0300 	mov.w	r3, #0
 800870c:	f04f 0400 	mov.w	r4, #0
 8008710:	0094      	lsls	r4, r2, #2
 8008712:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008716:	008b      	lsls	r3, r1, #2
 8008718:	461a      	mov	r2, r3
 800871a:	4623      	mov	r3, r4
 800871c:	4628      	mov	r0, r5
 800871e:	4631      	mov	r1, r6
 8008720:	f7f8 fab2 	bl	8000c88 <__aeabi_uldivmod>
 8008724:	4603      	mov	r3, r0
 8008726:	460c      	mov	r4, r1
 8008728:	461a      	mov	r2, r3
 800872a:	4b77      	ldr	r3, [pc, #476]	; (8008908 <UART_SetConfig+0x6f4>)
 800872c:	fba3 1302 	umull	r1, r3, r3, r2
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	2164      	movs	r1, #100	; 0x64
 8008734:	fb01 f303 	mul.w	r3, r1, r3
 8008738:	1ad3      	subs	r3, r2, r3
 800873a:	011b      	lsls	r3, r3, #4
 800873c:	3332      	adds	r3, #50	; 0x32
 800873e:	4a72      	ldr	r2, [pc, #456]	; (8008908 <UART_SetConfig+0x6f4>)
 8008740:	fba2 2303 	umull	r2, r3, r2, r3
 8008744:	095b      	lsrs	r3, r3, #5
 8008746:	f003 020f 	and.w	r2, r3, #15
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4442      	add	r2, r8
 8008750:	609a      	str	r2, [r3, #8]
 8008752:	e0d0      	b.n	80088f6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008754:	f7fc fe96 	bl	8005484 <HAL_RCC_GetPCLK1Freq>
 8008758:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	469a      	mov	sl, r3
 800875e:	f04f 0b00 	mov.w	fp, #0
 8008762:	46d0      	mov	r8, sl
 8008764:	46d9      	mov	r9, fp
 8008766:	eb18 0308 	adds.w	r3, r8, r8
 800876a:	eb49 0409 	adc.w	r4, r9, r9
 800876e:	4698      	mov	r8, r3
 8008770:	46a1      	mov	r9, r4
 8008772:	eb18 080a 	adds.w	r8, r8, sl
 8008776:	eb49 090b 	adc.w	r9, r9, fp
 800877a:	f04f 0100 	mov.w	r1, #0
 800877e:	f04f 0200 	mov.w	r2, #0
 8008782:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008786:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800878a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800878e:	4688      	mov	r8, r1
 8008790:	4691      	mov	r9, r2
 8008792:	eb1a 0508 	adds.w	r5, sl, r8
 8008796:	eb4b 0609 	adc.w	r6, fp, r9
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	4619      	mov	r1, r3
 80087a0:	f04f 0200 	mov.w	r2, #0
 80087a4:	f04f 0300 	mov.w	r3, #0
 80087a8:	f04f 0400 	mov.w	r4, #0
 80087ac:	0094      	lsls	r4, r2, #2
 80087ae:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80087b2:	008b      	lsls	r3, r1, #2
 80087b4:	461a      	mov	r2, r3
 80087b6:	4623      	mov	r3, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	4631      	mov	r1, r6
 80087bc:	f7f8 fa64 	bl	8000c88 <__aeabi_uldivmod>
 80087c0:	4603      	mov	r3, r0
 80087c2:	460c      	mov	r4, r1
 80087c4:	461a      	mov	r2, r3
 80087c6:	4b50      	ldr	r3, [pc, #320]	; (8008908 <UART_SetConfig+0x6f4>)
 80087c8:	fba3 2302 	umull	r2, r3, r3, r2
 80087cc:	095b      	lsrs	r3, r3, #5
 80087ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	469b      	mov	fp, r3
 80087d6:	f04f 0c00 	mov.w	ip, #0
 80087da:	46d9      	mov	r9, fp
 80087dc:	46e2      	mov	sl, ip
 80087de:	eb19 0309 	adds.w	r3, r9, r9
 80087e2:	eb4a 040a 	adc.w	r4, sl, sl
 80087e6:	4699      	mov	r9, r3
 80087e8:	46a2      	mov	sl, r4
 80087ea:	eb19 090b 	adds.w	r9, r9, fp
 80087ee:	eb4a 0a0c 	adc.w	sl, sl, ip
 80087f2:	f04f 0100 	mov.w	r1, #0
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80087fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008802:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008806:	4689      	mov	r9, r1
 8008808:	4692      	mov	sl, r2
 800880a:	eb1b 0509 	adds.w	r5, fp, r9
 800880e:	eb4c 060a 	adc.w	r6, ip, sl
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	685b      	ldr	r3, [r3, #4]
 8008816:	4619      	mov	r1, r3
 8008818:	f04f 0200 	mov.w	r2, #0
 800881c:	f04f 0300 	mov.w	r3, #0
 8008820:	f04f 0400 	mov.w	r4, #0
 8008824:	0094      	lsls	r4, r2, #2
 8008826:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800882a:	008b      	lsls	r3, r1, #2
 800882c:	461a      	mov	r2, r3
 800882e:	4623      	mov	r3, r4
 8008830:	4628      	mov	r0, r5
 8008832:	4631      	mov	r1, r6
 8008834:	f7f8 fa28 	bl	8000c88 <__aeabi_uldivmod>
 8008838:	4603      	mov	r3, r0
 800883a:	460c      	mov	r4, r1
 800883c:	461a      	mov	r2, r3
 800883e:	4b32      	ldr	r3, [pc, #200]	; (8008908 <UART_SetConfig+0x6f4>)
 8008840:	fba3 1302 	umull	r1, r3, r3, r2
 8008844:	095b      	lsrs	r3, r3, #5
 8008846:	2164      	movs	r1, #100	; 0x64
 8008848:	fb01 f303 	mul.w	r3, r1, r3
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	011b      	lsls	r3, r3, #4
 8008850:	3332      	adds	r3, #50	; 0x32
 8008852:	4a2d      	ldr	r2, [pc, #180]	; (8008908 <UART_SetConfig+0x6f4>)
 8008854:	fba2 2303 	umull	r2, r3, r2, r3
 8008858:	095b      	lsrs	r3, r3, #5
 800885a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800885e:	4498      	add	r8, r3
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	469b      	mov	fp, r3
 8008864:	f04f 0c00 	mov.w	ip, #0
 8008868:	46d9      	mov	r9, fp
 800886a:	46e2      	mov	sl, ip
 800886c:	eb19 0309 	adds.w	r3, r9, r9
 8008870:	eb4a 040a 	adc.w	r4, sl, sl
 8008874:	4699      	mov	r9, r3
 8008876:	46a2      	mov	sl, r4
 8008878:	eb19 090b 	adds.w	r9, r9, fp
 800887c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008880:	f04f 0100 	mov.w	r1, #0
 8008884:	f04f 0200 	mov.w	r2, #0
 8008888:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800888c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008890:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008894:	4689      	mov	r9, r1
 8008896:	4692      	mov	sl, r2
 8008898:	eb1b 0509 	adds.w	r5, fp, r9
 800889c:	eb4c 060a 	adc.w	r6, ip, sl
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	4619      	mov	r1, r3
 80088a6:	f04f 0200 	mov.w	r2, #0
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	f04f 0400 	mov.w	r4, #0
 80088b2:	0094      	lsls	r4, r2, #2
 80088b4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80088b8:	008b      	lsls	r3, r1, #2
 80088ba:	461a      	mov	r2, r3
 80088bc:	4623      	mov	r3, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	4631      	mov	r1, r6
 80088c2:	f7f8 f9e1 	bl	8000c88 <__aeabi_uldivmod>
 80088c6:	4603      	mov	r3, r0
 80088c8:	460c      	mov	r4, r1
 80088ca:	461a      	mov	r2, r3
 80088cc:	4b0e      	ldr	r3, [pc, #56]	; (8008908 <UART_SetConfig+0x6f4>)
 80088ce:	fba3 1302 	umull	r1, r3, r3, r2
 80088d2:	095b      	lsrs	r3, r3, #5
 80088d4:	2164      	movs	r1, #100	; 0x64
 80088d6:	fb01 f303 	mul.w	r3, r1, r3
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	011b      	lsls	r3, r3, #4
 80088de:	3332      	adds	r3, #50	; 0x32
 80088e0:	4a09      	ldr	r2, [pc, #36]	; (8008908 <UART_SetConfig+0x6f4>)
 80088e2:	fba2 2303 	umull	r2, r3, r2, r3
 80088e6:	095b      	lsrs	r3, r3, #5
 80088e8:	f003 020f 	and.w	r2, r3, #15
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4442      	add	r2, r8
 80088f2:	609a      	str	r2, [r3, #8]
}
 80088f4:	e7ff      	b.n	80088f6 <UART_SetConfig+0x6e2>
 80088f6:	bf00      	nop
 80088f8:	3714      	adds	r7, #20
 80088fa:	46bd      	mov	sp, r7
 80088fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008900:	40011000 	.word	0x40011000
 8008904:	40011400 	.word	0x40011400
 8008908:	51eb851f 	.word	0x51eb851f

0800890c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800890c:	b084      	sub	sp, #16
 800890e:	b580      	push	{r7, lr}
 8008910:	b084      	sub	sp, #16
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	f107 001c 	add.w	r0, r7, #28
 800891a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800891e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008920:	2b01      	cmp	r3, #1
 8008922:	d122      	bne.n	800896a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008928:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800893c:	687a      	ldr	r2, [r7, #4]
 800893e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800894c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800894e:	2b01      	cmp	r3, #1
 8008950:	d105      	bne.n	800895e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800895e:	6878      	ldr	r0, [r7, #4]
 8008960:	f000 fa5c 	bl	8008e1c <USB_CoreReset>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]
 8008968:	e01a      	b.n	80089a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa50 	bl	8008e1c <USB_CoreReset>
 800897c:	4603      	mov	r3, r0
 800897e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008980:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	d106      	bne.n	8008994 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	639a      	str	r2, [r3, #56]	; 0x38
 8008992:	e005      	b.n	80089a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008998:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80089a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d10b      	bne.n	80089be <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f043 0206 	orr.w	r2, r3, #6
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	689b      	ldr	r3, [r3, #8]
 80089b6:	f043 0220 	orr.w	r2, r3, #32
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80089be:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3710      	adds	r7, #16
 80089c4:	46bd      	mov	sp, r7
 80089c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80089ca:	b004      	add	sp, #16
 80089cc:	4770      	bx	lr

080089ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80089ce:	b480      	push	{r7}
 80089d0:	b083      	sub	sp, #12
 80089d2:	af00      	add	r7, sp, #0
 80089d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	689b      	ldr	r3, [r3, #8]
 80089da:	f023 0201 	bic.w	r2, r3, #1
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	370c      	adds	r7, #12
 80089e8:	46bd      	mov	sp, r7
 80089ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ee:	4770      	bx	lr

080089f0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
 80089f8:	460b      	mov	r3, r1
 80089fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68db      	ldr	r3, [r3, #12]
 8008a00:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008a08:	78fb      	ldrb	r3, [r7, #3]
 8008a0a:	2b01      	cmp	r3, #1
 8008a0c:	d106      	bne.n	8008a1c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	68db      	ldr	r3, [r3, #12]
 8008a12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	60da      	str	r2, [r3, #12]
 8008a1a:	e00b      	b.n	8008a34 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008a1c:	78fb      	ldrb	r3, [r7, #3]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d106      	bne.n	8008a30 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	68db      	ldr	r3, [r3, #12]
 8008a26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	60da      	str	r2, [r3, #12]
 8008a2e:	e001      	b.n	8008a34 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	e003      	b.n	8008a3c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008a34:	2032      	movs	r0, #50	; 0x32
 8008a36:	f7f8 fb19 	bl	800106c <HAL_Delay>

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3708      	adds	r7, #8
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a44:	b084      	sub	sp, #16
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b086      	sub	sp, #24
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008a52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008a56:	2300      	movs	r3, #0
 8008a58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008a5e:	2300      	movs	r3, #0
 8008a60:	613b      	str	r3, [r7, #16]
 8008a62:	e009      	b.n	8008a78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	3340      	adds	r3, #64	; 0x40
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	2200      	movs	r2, #0
 8008a70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	3301      	adds	r3, #1
 8008a76:	613b      	str	r3, [r7, #16]
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	2b0e      	cmp	r3, #14
 8008a7c:	d9f2      	bls.n	8008a64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008a7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d112      	bne.n	8008aaa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aa0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	639a      	str	r2, [r3, #56]	; 0x38
 8008aa8:	e00b      	b.n	8008ac2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ac8:	461a      	mov	r2, r3
 8008aca:	2300      	movs	r3, #0
 8008acc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008adc:	461a      	mov	r2, r3
 8008ade:	680b      	ldr	r3, [r1, #0]
 8008ae0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae4:	2b01      	cmp	r3, #1
 8008ae6:	d10c      	bne.n	8008b02 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d104      	bne.n	8008af8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008aee:	2100      	movs	r1, #0
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f000 f961 	bl	8008db8 <USB_SetDevSpeed>
 8008af6:	e008      	b.n	8008b0a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008af8:	2101      	movs	r1, #1
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f95c 	bl	8008db8 <USB_SetDevSpeed>
 8008b00:	e003      	b.n	8008b0a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008b02:	2103      	movs	r1, #3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 f957 	bl	8008db8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008b0a:	2110      	movs	r1, #16
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f000 f90b 	bl	8008d28 <USB_FlushTxFifo>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 f929 	bl	8008d74 <USB_FlushRxFifo>
 8008b22:	4603      	mov	r3, r0
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8008b28:	2301      	movs	r3, #1
 8008b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b32:	461a      	mov	r2, r3
 8008b34:	2300      	movs	r3, #0
 8008b36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b3e:	461a      	mov	r2, r3
 8008b40:	2300      	movs	r3, #0
 8008b42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b50:	2300      	movs	r3, #0
 8008b52:	613b      	str	r3, [r7, #16]
 8008b54:	e043      	b.n	8008bde <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b6c:	d118      	bne.n	8008ba0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d10a      	bne.n	8008b8a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	015a      	lsls	r2, r3, #5
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	4413      	add	r3, r2
 8008b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b80:	461a      	mov	r2, r3
 8008b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b86:	6013      	str	r3, [r2, #0]
 8008b88:	e013      	b.n	8008bb2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b96:	461a      	mov	r2, r3
 8008b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b9c:	6013      	str	r3, [r2, #0]
 8008b9e:	e008      	b.n	8008bb2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	015a      	lsls	r2, r3, #5
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	4413      	add	r3, r2
 8008ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bac:	461a      	mov	r2, r3
 8008bae:	2300      	movs	r3, #0
 8008bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	015a      	lsls	r2, r3, #5
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	4413      	add	r3, r2
 8008bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	015a      	lsls	r2, r3, #5
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	4413      	add	r3, r2
 8008bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3301      	adds	r3, #1
 8008bdc:	613b      	str	r3, [r7, #16]
 8008bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be0:	693a      	ldr	r2, [r7, #16]
 8008be2:	429a      	cmp	r2, r3
 8008be4:	d3b7      	bcc.n	8008b56 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008be6:	2300      	movs	r3, #0
 8008be8:	613b      	str	r3, [r7, #16]
 8008bea:	e043      	b.n	8008c74 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c02:	d118      	bne.n	8008c36 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10a      	bne.n	8008c20 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c16:	461a      	mov	r2, r3
 8008c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	e013      	b.n	8008c48 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	015a      	lsls	r2, r3, #5
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	4413      	add	r3, r2
 8008c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	e008      	b.n	8008c48 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	015a      	lsls	r2, r3, #5
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c42:	461a      	mov	r2, r3
 8008c44:	2300      	movs	r3, #0
 8008c46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c54:	461a      	mov	r2, r3
 8008c56:	2300      	movs	r3, #0
 8008c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	015a      	lsls	r2, r3, #5
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4413      	add	r3, r2
 8008c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c66:	461a      	mov	r2, r3
 8008c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	3301      	adds	r3, #1
 8008c72:	613b      	str	r3, [r7, #16]
 8008c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d3b7      	bcc.n	8008bec <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	68fa      	ldr	r2, [r7, #12]
 8008c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c8e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c92:	2b01      	cmp	r3, #1
 8008c94:	d111      	bne.n	8008cba <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <USB_DevInit+0x2dc>)
 8008ca0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cb4:	f043 0303 	orr.w	r3, r3, #3
 8008cb8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008cc6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d105      	bne.n	8008cda <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	699b      	ldr	r3, [r3, #24]
 8008cd2:	f043 0210 	orr.w	r2, r3, #16
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	699a      	ldr	r2, [r3, #24]
 8008cde:	4b11      	ldr	r3, [pc, #68]	; (8008d24 <USB_DevInit+0x2e0>)
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	699b      	ldr	r3, [r3, #24]
 8008cf0:	f043 0208 	orr.w	r2, r3, #8
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d107      	bne.n	8008d0e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	699b      	ldr	r3, [r3, #24]
 8008d02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d06:	f043 0304 	orr.w	r3, r3, #4
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d1a:	b004      	add	sp, #16
 8008d1c:	4770      	bx	lr
 8008d1e:	bf00      	nop
 8008d20:	00800100 	.word	0x00800100
 8008d24:	803c3800 	.word	0x803c3800

08008d28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008d32:	2300      	movs	r3, #0
 8008d34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	019b      	lsls	r3, r3, #6
 8008d3a:	f043 0220 	orr.w	r2, r3, #32
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	4a09      	ldr	r2, [pc, #36]	; (8008d70 <USB_FlushTxFifo+0x48>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d901      	bls.n	8008d54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008d50:	2303      	movs	r3, #3
 8008d52:	e006      	b.n	8008d62 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	f003 0320 	and.w	r3, r3, #32
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	d0f0      	beq.n	8008d42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008d60:	2300      	movs	r3, #0
}
 8008d62:	4618      	mov	r0, r3
 8008d64:	3714      	adds	r7, #20
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	00030d40 	.word	0x00030d40

08008d74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2210      	movs	r2, #16
 8008d84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	3301      	adds	r3, #1
 8008d8a:	60fb      	str	r3, [r7, #12]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <USB_FlushRxFifo+0x40>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d901      	bls.n	8008d98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008d94:	2303      	movs	r3, #3
 8008d96:	e006      	b.n	8008da6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	691b      	ldr	r3, [r3, #16]
 8008d9c:	f003 0310 	and.w	r3, r3, #16
 8008da0:	2b10      	cmp	r3, #16
 8008da2:	d0f0      	beq.n	8008d86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008da4:	2300      	movs	r3, #0
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3714      	adds	r7, #20
 8008daa:	46bd      	mov	sp, r7
 8008dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db0:	4770      	bx	lr
 8008db2:	bf00      	nop
 8008db4:	00030d40 	.word	0x00030d40

08008db8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dce:	681a      	ldr	r2, [r3, #0]
 8008dd0:	78fb      	ldrb	r3, [r7, #3]
 8008dd2:	68f9      	ldr	r1, [r7, #12]
 8008dd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dfc:	685b      	ldr	r3, [r3, #4]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e04:	f043 0302 	orr.w	r3, r3, #2
 8008e08:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008e0a:	2003      	movs	r0, #3
 8008e0c:	f7f8 f92e 	bl	800106c <HAL_Delay>

  return HAL_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}
	...

08008e1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b085      	sub	sp, #20
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008e24:	2300      	movs	r3, #0
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	3301      	adds	r3, #1
 8008e2c:	60fb      	str	r3, [r7, #12]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	4a13      	ldr	r2, [pc, #76]	; (8008e80 <USB_CoreReset+0x64>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d901      	bls.n	8008e3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e36:	2303      	movs	r3, #3
 8008e38:	e01b      	b.n	8008e72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	daf2      	bge.n	8008e28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	f043 0201 	orr.w	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	3301      	adds	r3, #1
 8008e56:	60fb      	str	r3, [r7, #12]
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a09      	ldr	r2, [pc, #36]	; (8008e80 <USB_CoreReset+0x64>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d901      	bls.n	8008e64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e60:	2303      	movs	r3, #3
 8008e62:	e006      	b.n	8008e72 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	691b      	ldr	r3, [r3, #16]
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d0f0      	beq.n	8008e52 <USB_CoreReset+0x36>

  return HAL_OK;
 8008e70:	2300      	movs	r3, #0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3714      	adds	r7, #20
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr
 8008e7e:	bf00      	nop
 8008e80:	00030d40 	.word	0x00030d40
 8008e84:	00000000 	.word	0x00000000

08008e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e8c:	f5ad 7d41 	sub.w	sp, sp, #772	; 0x304
 8008e90:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008e92:	f7f8 f879 	bl	8000f88 <HAL_Init>
  // todo transfer init part of code here

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008e96:	f001 faa5 	bl	800a3e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008e9a:	f002 fafb 	bl	800b494 <MX_GPIO_Init>
  MX_DMA_Init();
 8008e9e:	f002 fab3 	bl	800b408 <MX_DMA_Init>
  MX_TIM9_Init();
 8008ea2:	f002 f941 	bl	800b128 <MX_TIM9_Init>
  MX_SPI2_Init();
 8008ea6:	f001 fe73 	bl	800ab90 <MX_SPI2_Init>
  MX_ADC1_Init();
 8008eaa:	f001 fb1f 	bl	800a4ec <MX_ADC1_Init>
  MX_ADC2_Init();
 8008eae:	f001 fbfb 	bl	800a6a8 <MX_ADC2_Init>
  MX_CAN1_Init();
 8008eb2:	f001 fdb5 	bl	800aa20 <MX_CAN1_Init>
  MX_I2C1_Init();
 8008eb6:	f001 fde9 	bl	800aa8c <MX_I2C1_Init>
  MX_I2C2_Init();
 8008eba:	f001 fe15 	bl	800aae8 <MX_I2C2_Init>
  MX_TIM1_Init();
 8008ebe:	f001 fe9f 	bl	800ac00 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8008ec2:	f002 fa49 	bl	800b358 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8008ec6:	f002 f8d7 	bl	800b078 <MX_TIM8_Init>
  MX_TIM13_Init();
 8008eca:	f002 f9ff 	bl	800b2cc <MX_TIM13_Init>
  MX_TIM12_Init();
 8008ece:	f002 f99d 	bl	800b20c <MX_TIM12_Init>
  MX_TIM2_Init();
 8008ed2:	f001 ff67 	bl	800ada4 <MX_TIM2_Init>
  MX_ADC3_Init();
 8008ed6:	f001 fcc5 	bl	800a864 <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8008eda:	f002 fa67 	bl	800b3ac <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8008ede:	f001 fe31 	bl	800ab44 <MX_RTC_Init>
  MX_TIM6_Init();
 8008ee2:	f002 f893 	bl	800b00c <MX_TIM6_Init>
  MX_TIM3_Init();
 8008ee6:	f001 ffcf 	bl	800ae88 <MX_TIM3_Init>
  MX_TIM5_Init();
 8008eea:	f002 f841 	bl	800af70 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  calc_lookup(lookup);
 8008eee:	4861      	ldr	r0, [pc, #388]	; (8009074 <main+0x1ec>)
 8008ef0:	f002 fe02 	bl	800baf8 <calc_lookup>

	uint8_t buf[400];
	uint8_t buf_add[200];
	//uint8_t plot[300];

	char ch='.';
 8008ef4:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8008ef8:	222e      	movs	r2, #46	; 0x2e
 8008efa:	701a      	strb	r2, [r3, #0]
	int16_t accel16;
	uint8_t accel8l;
	uint8_t accel8h;

  // --- SET STATUS LEDS
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8008efc:	2100      	movs	r1, #0
 8008efe:	485e      	ldr	r0, [pc, #376]	; (8009078 <main+0x1f0>)
 8008f00:	f7fd fc3e 	bl	8006780 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8008f04:	2104      	movs	r1, #4
 8008f06:	485c      	ldr	r0, [pc, #368]	; (8009078 <main+0x1f0>)
 8008f08:	f7fd fbc6 	bl	8006698 <HAL_TIM_OC_Start>

  HAL_TIM_OC_Start(&htim12, TIM_CHANNEL_1);
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	485b      	ldr	r0, [pc, #364]	; (800907c <main+0x1f4>)
 8008f10:	f7fd fbc2 	bl	8006698 <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8008f14:	2100      	movs	r1, #0
 8008f16:	485a      	ldr	r0, [pc, #360]	; (8009080 <main+0x1f8>)
 8008f18:	f7fd fbbe 	bl	8006698 <HAL_TIM_OC_Start>

  // --- ENABLE DRV
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1); //todo maybe redundant since its also done below
 8008f1c:	2201      	movs	r2, #1
 8008f1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008f22:	4858      	ldr	r0, [pc, #352]	; (8009084 <main+0x1fc>)
 8008f24:	f7fa fd78 	bl	8003a18 <HAL_GPIO_WritePin>


  SCB->CPACR |= 0xf00000;
 8008f28:	4b57      	ldr	r3, [pc, #348]	; (8009088 <main+0x200>)
 8008f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2e:	4a56      	ldr	r2, [pc, #344]	; (8009088 <main+0x200>)
 8008f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  int i=0;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
	uint32_t i_fast = 0;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
	uint32_t i_slow = 0;
 8008f44:	2300      	movs	r3, #0
 8008f46:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
	uint32_t fast2slow = 100;
 8008f4a:	2364      	movs	r3, #100	; 0x64
 8008f4c:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0

	int blink_duration = 100;
 8008f50:	2364      	movs	r3, #100	; 0x64
 8008f52:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
  //  HAL_Delay(2);


	// --- MOTOR DRIVER ----------------------------------------------------
	//EN_GATE
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008f56:	2100      	movs	r1, #0
 8008f58:	484c      	ldr	r0, [pc, #304]	; (800908c <main+0x204>)
 8008f5a:	f7fd fc11 	bl	8006780 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8008f5e:	2100      	movs	r1, #0
 8008f60:	484a      	ldr	r0, [pc, #296]	; (800908c <main+0x204>)
 8008f62:	f7fe fd42 	bl	80079ea <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008f66:	2104      	movs	r1, #4
 8008f68:	4848      	ldr	r0, [pc, #288]	; (800908c <main+0x204>)
 8008f6a:	f7fd fc09 	bl	8006780 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8008f6e:	2104      	movs	r1, #4
 8008f70:	4846      	ldr	r0, [pc, #280]	; (800908c <main+0x204>)
 8008f72:	f7fe fd3a 	bl	80079ea <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008f76:	2108      	movs	r1, #8
 8008f78:	4844      	ldr	r0, [pc, #272]	; (800908c <main+0x204>)
 8008f7a:	f7fd fc01 	bl	8006780 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8008f7e:	2108      	movs	r1, #8
 8008f80:	4842      	ldr	r0, [pc, #264]	; (800908c <main+0x204>)
 8008f82:	f7fe fd32 	bl	80079ea <HAL_TIMEx_PWMN_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8008f86:	210c      	movs	r1, #12
 8008f88:	4840      	ldr	r0, [pc, #256]	; (800908c <main+0x204>)
 8008f8a:	f7fd fb85 	bl	8006698 <HAL_TIM_OC_Start>

	playSound( 3, 100, 20);
 8008f8e:	2214      	movs	r2, #20
 8008f90:	2164      	movs	r1, #100	; 0x64
 8008f92:	2003      	movs	r0, #3
 8008f94:	f002 fd72 	bl	800ba7c <playSound>

	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008f9e:	4839      	ldr	r0, [pc, #228]	; (8009084 <main+0x1fc>)
 8008fa0:	f7fa fd3a 	bl	8003a18 <HAL_GPIO_WritePin>


	// --- used for heartbeat of microcontroller
	HAL_TIM_Base_Start_IT(&htim3);
 8008fa4:	483a      	ldr	r0, [pc, #232]	; (8009090 <main+0x208>)
 8008fa6:	f7fd fb1e 	bl	80065e6 <HAL_TIM_Base_Start_IT>

	// --- 32bit timer used to measure time in10mus
	HAL_TIM_Base_Start(&htim5);
 8008faa:	483a      	ldr	r0, [pc, #232]	; (8009094 <main+0x20c>)
 8008fac:	f7fd faf7 	bl	800659e <HAL_TIM_Base_Start>
	// --- I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 8008fb0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008fb4:	226b      	movs	r2, #107	; 0x6b
 8008fb6:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 8008fb8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8008fc0:	23d0      	movs	r3, #208	; 0xd0
 8008fc2:	b299      	uxth	r1, r3
 8008fc4:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8008fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008fcc:	9300      	str	r3, [sp, #0]
 8008fce:	2302      	movs	r3, #2
 8008fd0:	4831      	ldr	r0, [pc, #196]	; (8009098 <main+0x210>)
 8008fd2:	f7fa fea5 	bl	8003d20 <HAL_I2C_Master_Transmit>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
	if (ret != HAL_OK){
 8008fdc:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d008      	beq.n	8008ff6 <main+0x16e>
		strcpy((char*)buf, "Error IMU T\r\n");
 8008fe4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008fe8:	4a2c      	ldr	r2, [pc, #176]	; (800909c <main+0x214>)
 8008fea:	461c      	mov	r4, r3
 8008fec:	4613      	mov	r3, r2
 8008fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008ff0:	c407      	stmia	r4!, {r0, r1, r2}
 8008ff2:	8023      	strh	r3, [r4, #0]
 8008ff4:	e003      	b.n	8008ffe <main+0x176>
	} else {
		buf[0] = 0x00;
 8008ff6:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 8008ffe:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009002:	223b      	movs	r2, #59	; 0x3b
 8009004:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8009006:	23d0      	movs	r3, #208	; 0xd0
 8009008:	b299      	uxth	r1, r3
 800900a:	f507 7280 	add.w	r2, r7, #256	; 0x100
 800900e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009012:	9300      	str	r3, [sp, #0]
 8009014:	2301      	movs	r3, #1
 8009016:	4820      	ldr	r0, [pc, #128]	; (8009098 <main+0x210>)
 8009018:	f7fa fe82 	bl	8003d20 <HAL_I2C_Master_Transmit>
 800901c:	4603      	mov	r3, r0
 800901e:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
	if (ret != HAL_OK){
 8009022:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 8009026:	2b00      	cmp	r3, #0
 8009028:	d008      	beq.n	800903c <main+0x1b4>
		strcpy((char*)buf, "Error IMU T\r\n");
 800902a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800902e:	4a1b      	ldr	r2, [pc, #108]	; (800909c <main+0x214>)
 8009030:	461c      	mov	r4, r3
 8009032:	4613      	mov	r3, r2
 8009034:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009036:	c407      	stmia	r4!, {r0, r1, r2}
 8009038:	8023      	strh	r3, [r4, #0]
 800903a:	e040      	b.n	80090be <main+0x236>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 800903c:	23d0      	movs	r3, #208	; 0xd0
 800903e:	b299      	uxth	r1, r3
 8009040:	f507 7280 	add.w	r2, r7, #256	; 0x100
 8009044:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	2301      	movs	r3, #1
 800904c:	4812      	ldr	r0, [pc, #72]	; (8009098 <main+0x210>)
 800904e:	f7fa ff65 	bl	8003f1c <HAL_I2C_Master_Receive>
 8009052:	4603      	mov	r3, r0
 8009054:	f887 32db 	strb.w	r3, [r7, #731]	; 0x2db
		if (ret != HAL_OK){
 8009058:	f897 32db 	ldrb.w	r3, [r7, #731]	; 0x2db
 800905c:	2b00      	cmp	r3, #0
 800905e:	d021      	beq.n	80090a4 <main+0x21c>
			strcpy((char*)buf, "Error IMU R\r\n");
 8009060:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009064:	4a0e      	ldr	r2, [pc, #56]	; (80090a0 <main+0x218>)
 8009066:	461c      	mov	r4, r3
 8009068:	4613      	mov	r3, r2
 800906a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800906c:	c407      	stmia	r4!, {r0, r1, r2}
 800906e:	8023      	strh	r3, [r4, #0]
 8009070:	e025      	b.n	80090be <main+0x236>
 8009072:	bf00      	nop
 8009074:	20000344 	.word	0x20000344
 8009078:	20000fd0 	.word	0x20000fd0
 800907c:	20001198 	.word	0x20001198
 8009080:	200010b4 	.word	0x200010b4
 8009084:	40021000 	.word	0x40021000
 8009088:	e000ed00 	.word	0xe000ed00
 800908c:	20000f28 	.word	0x20000f28
 8009090:	20000d14 	.word	0x20000d14
 8009094:	20000cd0 	.word	0x20000cd0
 8009098:	20000bb0 	.word	0x20000bb0
 800909c:	08010c90 	.word	0x08010c90
 80090a0:	08010ca0 	.word	0x08010ca0
		} else {
			accel8l = (int8_t)buf[0];
 80090a4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	f887 32da 	strb.w	r3, [r7, #730]	; 0x2da
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 80090ae:	f897 22da 	ldrb.w	r2, [r7, #730]	; 0x2da
 80090b2:	f107 0310 	add.w	r3, r7, #16
 80090b6:	49d8      	ldr	r1, [pc, #864]	; (8009418 <main+0x590>)
 80090b8:	4618      	mov	r0, r3
 80090ba:	f005 f883 	bl	800e1c4 <siprintf>
  //					}
  //
  //				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 80090be:	4ad7      	ldr	r2, [pc, #860]	; (800941c <main+0x594>)
 80090c0:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80090c4:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 80090c6:	4ad5      	ldr	r2, [pc, #852]	; (800941c <main+0x594>)
 80090c8:	f8d7 32dc 	ldr.w	r3, [r7, #732]	; 0x2dc
 80090cc:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 80090ce:	4bd4      	ldr	r3, [pc, #848]	; (8009420 <main+0x598>)
 80090d0:	2210      	movs	r2, #16
 80090d2:	619a      	str	r2, [r3, #24]




	playSound( 2, 100, 40);
 80090d4:	2228      	movs	r2, #40	; 0x28
 80090d6:	2164      	movs	r1, #100	; 0x64
 80090d8:	2002      	movs	r0, #2
 80090da:	f002 fccf 	bl	800ba7c <playSound>
	playSound( 1, 100, 80);
 80090de:	2250      	movs	r2, #80	; 0x50
 80090e0:	2164      	movs	r1, #100	; 0x64
 80090e2:	2001      	movs	r0, #1
 80090e4:	f002 fcca 	bl	800ba7c <playSound>
	HAL_Delay(100); // So the system stops vibrating
 80090e8:	2064      	movs	r0, #100	; 0x64
 80090ea:	f7f7 ffbf 	bl	800106c <HAL_Delay>




	// --- ROTATION SENSOR INIT ----------------------------------------------------
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80090ee:	213c      	movs	r1, #60	; 0x3c
 80090f0:	48cc      	ldr	r0, [pc, #816]	; (8009424 <main+0x59c>)
 80090f2:	f7fd fc4a 	bl	800698a <HAL_TIM_Encoder_Start_IT>
	uint8_t spi_value_8[2];

	//todo UGLY BUG - Ugly FIX: now i just send the init below twice because somehow the communication of the first transaction does not seem to work-- i sse on the MISO signal the lines just pulls up to 0.5V instead of 3V but it works fine for the next transmission so it gets initialized correctly if i sent it twice

	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 80090f6:	f107 030c 	add.w	r3, r7, #12
 80090fa:	2200      	movs	r2, #0
 80090fc:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;//00000000 00011000
 80090fe:	f107 030c 	add.w	r3, r7, #12
 8009102:	2218      	movs	r2, #24
 8009104:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 8009106:	f107 0308 	add.w	r3, r7, #8
 800910a:	2280      	movs	r2, #128	; 0x80
 800910c:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;  //10000000 10000000
 800910e:	f107 0308 	add.w	r3, r7, #8
 8009112:	2280      	movs	r2, #128	; 0x80
 8009114:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8009116:	f002 fc99 	bl	800ba4c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800911a:	2200      	movs	r2, #0
 800911c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009120:	48c1      	ldr	r0, [pc, #772]	; (8009428 <main+0x5a0>)
 8009122:	f7fa fc79 	bl	8003a18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009126:	f107 010c 	add.w	r1, r7, #12
 800912a:	2301      	movs	r3, #1
 800912c:	2201      	movs	r2, #1
 800912e:	48bf      	ldr	r0, [pc, #764]	; (800942c <main+0x5a4>)
 8009130:	f7fc fbfb 	bl	800592a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009134:	2201      	movs	r2, #1
 8009136:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800913a:	48bb      	ldr	r0, [pc, #748]	; (8009428 <main+0x5a0>)
 800913c:	f7fa fc6c 	bl	8003a18 <HAL_GPIO_WritePin>
	delay_SPI();
 8009140:	f002 fc84 	bl	800ba4c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009144:	2200      	movs	r2, #0
 8009146:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800914a:	48b7      	ldr	r0, [pc, #732]	; (8009428 <main+0x5a0>)
 800914c:	f7fa fc64 	bl	8003a18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009150:	f107 0108 	add.w	r1, r7, #8
 8009154:	2301      	movs	r3, #1
 8009156:	2201      	movs	r2, #1
 8009158:	48b4      	ldr	r0, [pc, #720]	; (800942c <main+0x5a4>)
 800915a:	f7fc fbe6 	bl	800592a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800915e:	2201      	movs	r2, #1
 8009160:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009164:	48b0      	ldr	r0, [pc, #704]	; (8009428 <main+0x5a0>)
 8009166:	f7fa fc57 	bl	8003a18 <HAL_GPIO_WritePin>

	// --- set ABI and enable PWM
		spi_address_8[1]= 0x00;//
 800916a:	f107 030c 	add.w	r3, r7, #12
 800916e:	2200      	movs	r2, #0
 8009170:	705a      	strb	r2, [r3, #1]
		spi_address_8[0]= 0x18;//00000000 00011000
 8009172:	f107 030c 	add.w	r3, r7, #12
 8009176:	2218      	movs	r2, #24
 8009178:	701a      	strb	r2, [r3, #0]
		spi_value_8[1]= 0x80;
 800917a:	f107 0308 	add.w	r3, r7, #8
 800917e:	2280      	movs	r2, #128	; 0x80
 8009180:	705a      	strb	r2, [r3, #1]
		spi_value_8[0]= 0x80;  //10000000 10000000
 8009182:	f107 0308 	add.w	r3, r7, #8
 8009186:	2280      	movs	r2, #128	; 0x80
 8009188:	701a      	strb	r2, [r3, #0]
		delay_SPI();
 800918a:	f002 fc5f 	bl	800ba4c <delay_SPI>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800918e:	2200      	movs	r2, #0
 8009190:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009194:	48a4      	ldr	r0, [pc, #656]	; (8009428 <main+0x5a0>)
 8009196:	f7fa fc3f 	bl	8003a18 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 800919a:	f107 010c 	add.w	r1, r7, #12
 800919e:	2301      	movs	r3, #1
 80091a0:	2201      	movs	r2, #1
 80091a2:	48a2      	ldr	r0, [pc, #648]	; (800942c <main+0x5a4>)
 80091a4:	f7fc fbc1 	bl	800592a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80091a8:	2201      	movs	r2, #1
 80091aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091ae:	489e      	ldr	r0, [pc, #632]	; (8009428 <main+0x5a0>)
 80091b0:	f7fa fc32 	bl	8003a18 <HAL_GPIO_WritePin>
		delay_SPI();
 80091b4:	f002 fc4a 	bl	800ba4c <delay_SPI>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80091b8:	2200      	movs	r2, #0
 80091ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091be:	489a      	ldr	r0, [pc, #616]	; (8009428 <main+0x5a0>)
 80091c0:	f7fa fc2a 	bl	8003a18 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80091c4:	f107 0108 	add.w	r1, r7, #8
 80091c8:	2301      	movs	r3, #1
 80091ca:	2201      	movs	r2, #1
 80091cc:	4897      	ldr	r0, [pc, #604]	; (800942c <main+0x5a4>)
 80091ce:	f7fc fbac 	bl	800592a <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80091d2:	2201      	movs	r2, #1
 80091d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80091d8:	4893      	ldr	r0, [pc, #588]	; (8009428 <main+0x5a0>)
 80091da:	f7fa fc1d 	bl	8003a18 <HAL_GPIO_WritePin>



	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 80091de:	f107 030c 	add.w	r3, r7, #12
 80091e2:	2200      	movs	r2, #0
 80091e4:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;//00000000 00011000
 80091e6:	f107 030c 	add.w	r3, r7, #12
 80091ea:	2218      	movs	r2, #24
 80091ec:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 80091ee:	f107 0308 	add.w	r3, r7, #8
 80091f2:	2280      	movs	r2, #128	; 0x80
 80091f4:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;  //10000000 10000000
 80091f6:	f107 0308 	add.w	r3, r7, #8
 80091fa:	2280      	movs	r2, #128	; 0x80
 80091fc:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 80091fe:	f002 fc25 	bl	800ba4c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009202:	2200      	movs	r2, #0
 8009204:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009208:	4887      	ldr	r0, [pc, #540]	; (8009428 <main+0x5a0>)
 800920a:	f7fa fc05 	bl	8003a18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 800920e:	f107 010c 	add.w	r1, r7, #12
 8009212:	2301      	movs	r3, #1
 8009214:	2201      	movs	r2, #1
 8009216:	4885      	ldr	r0, [pc, #532]	; (800942c <main+0x5a4>)
 8009218:	f7fc fb87 	bl	800592a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800921c:	2201      	movs	r2, #1
 800921e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009222:	4881      	ldr	r0, [pc, #516]	; (8009428 <main+0x5a0>)
 8009224:	f7fa fbf8 	bl	8003a18 <HAL_GPIO_WritePin>
	delay_SPI();
 8009228:	f002 fc10 	bl	800ba4c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800922c:	2200      	movs	r2, #0
 800922e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009232:	487d      	ldr	r0, [pc, #500]	; (8009428 <main+0x5a0>)
 8009234:	f7fa fbf0 	bl	8003a18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009238:	f107 0108 	add.w	r1, r7, #8
 800923c:	2301      	movs	r3, #1
 800923e:	2201      	movs	r2, #1
 8009240:	487a      	ldr	r0, [pc, #488]	; (800942c <main+0x5a4>)
 8009242:	f7fc fb72 	bl	800592a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009246:	2201      	movs	r2, #1
 8009248:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800924c:	4876      	ldr	r0, [pc, #472]	; (8009428 <main+0x5a0>)
 800924e:	f7fa fbe3 	bl	8003a18 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses //todo this seems not to work as I get 4000 steps
	spi_address_8[1]= 0x80;
 8009252:	f107 030c 	add.w	r3, r7, #12
 8009256:	2280      	movs	r2, #128	; 0x80
 8009258:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x19; //00001000 00011001
 800925a:	f107 030c 	add.w	r3, r7, #12
 800925e:	2219      	movs	r2, #25
 8009260:	701a      	strb	r2, [r3, #0]
	//address = AS_ADDR_SETTINGS2 | AS_WRITE ; // 0x8019
	//value = 0x0020 | AS_ODD; // 0x8020
	//value = 0x00E0 | AS_ODD;
	spi_value_8[1]= 0x80;
 8009262:	f107 0308 	add.w	r3, r7, #8
 8009266:	2280      	movs	r2, #128	; 0x80
 8009268:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x20;  // 10000000 00100000
 800926a:	f107 0308 	add.w	r3, r7, #8
 800926e:	2220      	movs	r2, #32
 8009270:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8009272:	f002 fbeb 	bl	800ba4c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009276:	2200      	movs	r2, #0
 8009278:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800927c:	486a      	ldr	r0, [pc, #424]	; (8009428 <main+0x5a0>)
 800927e:	f7fa fbcb 	bl	8003a18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009282:	f107 010c 	add.w	r1, r7, #12
 8009286:	2301      	movs	r3, #1
 8009288:	2201      	movs	r2, #1
 800928a:	4868      	ldr	r0, [pc, #416]	; (800942c <main+0x5a4>)
 800928c:	f7fc fb4d 	bl	800592a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009290:	2201      	movs	r2, #1
 8009292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009296:	4864      	ldr	r0, [pc, #400]	; (8009428 <main+0x5a0>)
 8009298:	f7fa fbbe 	bl	8003a18 <HAL_GPIO_WritePin>
	delay_SPI();
 800929c:	f002 fbd6 	bl	800ba4c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80092a0:	2200      	movs	r2, #0
 80092a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092a6:	4860      	ldr	r0, [pc, #384]	; (8009428 <main+0x5a0>)
 80092a8:	f7fa fbb6 	bl	8003a18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80092ac:	f107 0108 	add.w	r1, r7, #8
 80092b0:	2301      	movs	r3, #1
 80092b2:	2201      	movs	r2, #1
 80092b4:	485d      	ldr	r0, [pc, #372]	; (800942c <main+0x5a4>)
 80092b6:	f7fc fb38 	bl	800592a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80092ba:	2201      	movs	r2, #1
 80092bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092c0:	4859      	ldr	r0, [pc, #356]	; (8009428 <main+0x5a0>)
 80092c2:	f7fa fba9 	bl	8003a18 <HAL_GPIO_WritePin>

	// --- read angle
	HAL_Delay(1);
 80092c6:	2001      	movs	r0, #1
 80092c8:	f7f7 fed0 	bl	800106c <HAL_Delay>

	uint8_t angle8[2];
	uint16_t angle;

	//for (int i=0; i<4; i++)
	spi_address_8[1]= 0x7F;
 80092cc:	f107 030c 	add.w	r3, r7, #12
 80092d0:	227f      	movs	r2, #127	; 0x7f
 80092d2:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0xFE;
 80092d4:	f107 030c 	add.w	r3, r7, #12
 80092d8:	22fe      	movs	r2, #254	; 0xfe
 80092da:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 80092dc:	f002 fbb6 	bl	800ba4c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80092e0:	2200      	movs	r2, #0
 80092e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80092e6:	4850      	ldr	r0, [pc, #320]	; (8009428 <main+0x5a0>)
 80092e8:	f7fa fb96 	bl	8003a18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80092ec:	f107 010c 	add.w	r1, r7, #12
 80092f0:	2301      	movs	r3, #1
 80092f2:	2201      	movs	r2, #1
 80092f4:	484d      	ldr	r0, [pc, #308]	; (800942c <main+0x5a4>)
 80092f6:	f7fc fb18 	bl	800592a <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80092fa:	2201      	movs	r2, #1
 80092fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009300:	4849      	ldr	r0, [pc, #292]	; (8009428 <main+0x5a0>)
 8009302:	f7fa fb89 	bl	8003a18 <HAL_GPIO_WritePin>
	delay_SPI();
 8009306:	f002 fba1 	bl	800ba4c <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800930a:	2200      	movs	r2, #0
 800930c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009310:	4845      	ldr	r0, [pc, #276]	; (8009428 <main+0x5a0>)
 8009312:	f7fa fb81 	bl	8003a18 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8009316:	1d39      	adds	r1, r7, #4
 8009318:	2301      	movs	r3, #1
 800931a:	2201      	movs	r2, #1
 800931c:	4843      	ldr	r0, [pc, #268]	; (800942c <main+0x5a4>)
 800931e:	f7fc fc38 	bl	8005b92 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009322:	2201      	movs	r2, #1
 8009324:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009328:	483f      	ldr	r0, [pc, #252]	; (8009428 <main+0x5a0>)
 800932a:	f7fa fb75 	bl	8003a18 <HAL_GPIO_WritePin>

	angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 800932e:	1d3b      	adds	r3, r7, #4
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b21a      	sxth	r2, r3
 8009334:	1d3b      	adds	r3, r7, #4
 8009336:	785b      	ldrb	r3, [r3, #1]
 8009338:	021b      	lsls	r3, r3, #8
 800933a:	b21b      	sxth	r3, r3
 800933c:	4313      	orrs	r3, r2
 800933e:	b21b      	sxth	r3, r3
 8009340:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
	angle &= AS_DATA_MASK;
 8009344:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009348:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800934c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	//angle &= AS_DATA_MASK;
	EncVal = (uint16_t) ((float)angle /16384.0 * ENC_STEPS);
 8009350:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009354:	ee07 3a90 	vmov	s15, r3
 8009358:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800935c:	ee17 0a90 	vmov	r0, s15
 8009360:	f7f7 f8f2 	bl	8000548 <__aeabi_f2d>
 8009364:	f04f 0200 	mov.w	r2, #0
 8009368:	4b31      	ldr	r3, [pc, #196]	; (8009430 <main+0x5a8>)
 800936a:	f7f7 fa6f 	bl	800084c <__aeabi_ddiv>
 800936e:	4603      	mov	r3, r0
 8009370:	460c      	mov	r4, r1
 8009372:	4618      	mov	r0, r3
 8009374:	4621      	mov	r1, r4
 8009376:	f04f 0200 	mov.w	r2, #0
 800937a:	4b2e      	ldr	r3, [pc, #184]	; (8009434 <main+0x5ac>)
 800937c:	f7f7 f93c 	bl	80005f8 <__aeabi_dmul>
 8009380:	4603      	mov	r3, r0
 8009382:	460c      	mov	r4, r1
 8009384:	4618      	mov	r0, r3
 8009386:	4621      	mov	r1, r4
 8009388:	f7f7 fc0e 	bl	8000ba8 <__aeabi_d2uiz>
 800938c:	4603      	mov	r3, r0
 800938e:	b29b      	uxth	r3, r3
 8009390:	b21a      	sxth	r2, r3
 8009392:	4b29      	ldr	r3, [pc, #164]	; (8009438 <main+0x5b0>)
 8009394:	801a      	strh	r2, [r3, #0]
	last_EncVal = EncVal;
 8009396:	4b28      	ldr	r3, [pc, #160]	; (8009438 <main+0x5b0>)
 8009398:	f9b3 2000 	ldrsh.w	r2, [r3]
 800939c:	4b27      	ldr	r3, [pc, #156]	; (800943c <main+0x5b4>)
 800939e:	801a      	strh	r2, [r3, #0]
	last_EncVal_v = EncVal;
 80093a0:	4b25      	ldr	r3, [pc, #148]	; (8009438 <main+0x5b0>)
 80093a2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80093a6:	4b26      	ldr	r3, [pc, #152]	; (8009440 <main+0x5b8>)
 80093a8:	801a      	strh	r2, [r3, #0]
	TIM8->CNT = EncVal;
 80093aa:	4b23      	ldr	r3, [pc, #140]	; (8009438 <main+0x5b0>)
 80093ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80093b0:	4b24      	ldr	r3, [pc, #144]	; (8009444 <main+0x5bc>)
 80093b2:	625a      	str	r2, [r3, #36]	; 0x24
//	EncVal = TIM8->CNT;//takes 200ns
//	TIM1->CCR1 = 0;
//	phase = (float) EncVal * 0.02199 ;

	// --- UART DMA
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 80093b4:	4a24      	ldr	r2, [pc, #144]	; (8009448 <main+0x5c0>)
 80093b6:	2100      	movs	r1, #0
 80093b8:	4824      	ldr	r0, [pc, #144]	; (800944c <main+0x5c4>)
 80093ba:	f7fa f861 	bl	8003480 <HAL_DMA_RegisterCallback>


	//HAL_TIM_RegisterCallback(&htim8, HAL_TIM_IC_CAPTURE_CB_ID, &EncoderStepCallback );

	// --- ADC DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, 30); // this is the only one working // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 80093be:	221e      	movs	r2, #30
 80093c0:	4923      	ldr	r1, [pc, #140]	; (8009450 <main+0x5c8>)
 80093c2:	4824      	ldr	r0, [pc, #144]	; (8009454 <main+0x5cc>)
 80093c4:	f7f7 fff8 	bl	80013b8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, 30); // TODO enabling this only leads to no change all values stay zero
 80093c8:	221e      	movs	r2, #30
 80093ca:	4923      	ldr	r1, [pc, #140]	; (8009458 <main+0x5d0>)
 80093cc:	4823      	ldr	r0, [pc, #140]	; (800945c <main+0x5d4>)
 80093ce:	f7f7 fff3 	bl	80013b8 <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, 30); // TODO enabling this breaks transmission entirely
 80093d2:	221e      	movs	r2, #30
 80093d4:	4922      	ldr	r1, [pc, #136]	; (8009460 <main+0x5d8>)
 80093d6:	4823      	ldr	r0, [pc, #140]	; (8009464 <main+0x5dc>)
 80093d8:	f7f7 ffee 	bl	80013b8 <HAL_ADC_Start_DMA>


	HAL_ADCEx_InjectedStart (&hadc1);
 80093dc:	481d      	ldr	r0, [pc, #116]	; (8009454 <main+0x5cc>)
 80093de:	f7f8 fb91 	bl	8001b04 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 80093e2:	481e      	ldr	r0, [pc, #120]	; (800945c <main+0x5d4>)
 80093e4:	f7f8 fb8e 	bl	8001b04 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3); // again this seems to break  the full loop
 80093e8:	481e      	ldr	r0, [pc, #120]	; (8009464 <main+0x5dc>)
 80093ea:	f7f8 fb8b 	bl	8001b04 <HAL_ADCEx_InjectedStart>
//
//


	sprintf((char*)buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\nangle: %d EncVal %d \r\nangle: %u EncVal %u \r\n\r\n",
 80093ee:	f8b7 12d8 	ldrh.w	r1, [r7, #728]	; 0x2d8
 80093f2:	4b11      	ldr	r3, [pc, #68]	; (8009438 <main+0x5b0>)
 80093f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80093f8:	461c      	mov	r4, r3
 80093fa:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093fe:	4a0e      	ldr	r2, [pc, #56]	; (8009438 <main+0x5b0>)
 8009400:	f9b2 2000 	ldrsh.w	r2, [r2]
 8009404:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8009408:	9201      	str	r2, [sp, #4]
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	4623      	mov	r3, r4
 800940e:	460a      	mov	r2, r1
 8009410:	4915      	ldr	r1, [pc, #84]	; (8009468 <main+0x5e0>)
 8009412:	f004 fed7 	bl	800e1c4 <siprintf>
 8009416:	e029      	b.n	800946c <main+0x5e4>
 8009418:	08010cb0 	.word	0x08010cb0
 800941c:	40014000 	.word	0x40014000
 8009420:	40021000 	.word	0x40021000
 8009424:	2000068c 	.word	0x2000068c
 8009428:	40020c00 	.word	0x40020c00
 800942c:	200002ec 	.word	0x200002ec
 8009430:	40d00000 	.word	0x40d00000
 8009434:	409f4000 	.word	0x409f4000
 8009438:	20000e64 	.word	0x20000e64
 800943c:	20000c04 	.word	0x20000c04
 8009440:	20000d10 	.word	0x20000d10
 8009444:	40010400 	.word	0x40010400
 8009448:	0800bbc5 	.word	0x0800bbc5
 800944c:	20000c70 	.word	0x20000c70
 8009450:	20000d58 	.word	0x20000d58
 8009454:	20000d94 	.word	0x20000d94
 8009458:	20001078 	.word	0x20001078
 800945c:	2000070c 	.word	0x2000070c
 8009460:	20000f94 	.word	0x20000f94
 8009464:	20000ddc 	.word	0x20000ddc
 8009468:	08010cb8 	.word	0x08010cb8
			angle, EncVal ,
			angle, EncVal );
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800946c:	4bc2      	ldr	r3, [pc, #776]	; (8009778 <main+0x8f0>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	695a      	ldr	r2, [r3, #20]
 8009472:	4bc1      	ldr	r3, [pc, #772]	; (8009778 <main+0x8f0>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800947a:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800947c:	f507 7480 	add.w	r4, r7, #256	; 0x100
 8009480:	4bbd      	ldr	r3, [pc, #756]	; (8009778 <main+0x8f0>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	3304      	adds	r3, #4
 8009486:	461d      	mov	r5, r3
 8009488:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800948c:	4618      	mov	r0, r3
 800948e:	f7f6 fe9f 	bl	80001d0 <strlen>
 8009492:	4603      	mov	r3, r0
 8009494:	462a      	mov	r2, r5
 8009496:	4621      	mov	r1, r4
 8009498:	48b8      	ldr	r0, [pc, #736]	; (800977c <main+0x8f4>)
 800949a:	f7f9 fded 	bl	8003078 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 800949e:	200a      	movs	r0, #10
 80094a0:	f7f7 fde4 	bl	800106c <HAL_Delay>
	//HAL_TIM_Base_Start(&htim3);


	//HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);

	mode_of_operation = 1;
 80094a4:	4bb6      	ldr	r3, [pc, #728]	; (8009780 <main+0x8f8>)
 80094a6:	2201      	movs	r2, #1
 80094a8:	701a      	strb	r2, [r3, #0]


	pHeader.DLC =6;
 80094aa:	4bb6      	ldr	r3, [pc, #728]	; (8009784 <main+0x8fc>)
 80094ac:	2206      	movs	r2, #6
 80094ae:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 80094b0:	4bb4      	ldr	r3, [pc, #720]	; (8009784 <main+0x8fc>)
 80094b2:	2200      	movs	r2, #0
 80094b4:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 80094b6:	4bb3      	ldr	r3, [pc, #716]	; (8009784 <main+0x8fc>)
 80094b8:	2200      	movs	r2, #0
 80094ba:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x001;
 80094bc:	4bb1      	ldr	r3, [pc, #708]	; (8009784 <main+0x8fc>)
 80094be:	2201      	movs	r2, #1
 80094c0:	601a      	str	r2, [r3, #0]

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80094c2:	4bb1      	ldr	r3, [pc, #708]	; (8009788 <main+0x900>)
 80094c4:	2200      	movs	r2, #0
 80094c6:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = CAN_ID<<5;
 80094c8:	4baf      	ldr	r3, [pc, #700]	; (8009788 <main+0x900>)
 80094ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80094ce:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 80094d0:	4bad      	ldr	r3, [pc, #692]	; (8009788 <main+0x900>)
 80094d2:	2200      	movs	r2, #0
 80094d4:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 80094d6:	4bac      	ldr	r3, [pc, #688]	; (8009788 <main+0x900>)
 80094d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094dc:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0xFFFF;
 80094de:	4baa      	ldr	r3, [pc, #680]	; (8009788 <main+0x900>)
 80094e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094e4:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80094e6:	4ba8      	ldr	r3, [pc, #672]	; (8009788 <main+0x900>)
 80094e8:	2200      	movs	r2, #0
 80094ea:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 80094ec:	4ba6      	ldr	r3, [pc, #664]	; (8009788 <main+0x900>)
 80094ee:	2201      	movs	r2, #1
 80094f0:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80094f2:	49a5      	ldr	r1, [pc, #660]	; (8009788 <main+0x900>)
 80094f4:	48a5      	ldr	r0, [pc, #660]	; (800978c <main+0x904>)
 80094f6:	f7f8 fe95 	bl	8002224 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 80094fa:	48a4      	ldr	r0, [pc, #656]	; (800978c <main+0x904>)
 80094fc:	f7f8 ff72 	bl	80023e4 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009500:	2102      	movs	r1, #2
 8009502:	48a2      	ldr	r0, [pc, #648]	; (800978c <main+0x904>)
 8009504:	f7f9 f99f 	bl	8002846 <HAL_CAN_ActivateNotification>
  {
  	// -------------------------------------------------------------
		// --- FAST PROCESS ----------------------------------------------------
		// -------------------------------------------------------------

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8009508:	4ba1      	ldr	r3, [pc, #644]	; (8009790 <main+0x908>)
 800950a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800950e:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8009510:	4b9f      	ldr	r3, [pc, #636]	; (8009790 <main+0x908>)
 8009512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009516:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8009518:	4b9d      	ldr	r3, [pc, #628]	; (8009790 <main+0x908>)
 800951a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800951e:	619a      	str	r2, [r3, #24]
		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8009520:	4b9b      	ldr	r3, [pc, #620]	; (8009790 <main+0x908>)
 8009522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009526:	619a      	str	r2, [r3, #24]

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 8009528:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800952c:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8009530:	fbb3 f2f2 	udiv	r2, r3, r2
 8009534:	f8d7 12e0 	ldr.w	r1, [r7, #736]	; 0x2e0
 8009538:	fb01 f202 	mul.w	r2, r1, r2
 800953c:	1a9b      	subs	r3, r3, r2
 800953e:	2b00      	cmp	r3, #0
 8009540:	f040 8628 	bne.w	800a194 <main+0x130c>
	  	//a++;
	  	//HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8009544:	2110      	movs	r1, #16
 8009546:	4893      	ldr	r0, [pc, #588]	; (8009794 <main+0x90c>)
 8009548:	f7fa fa7f 	bl	8003a4a <HAL_GPIO_TogglePin>

			// --- UART ----------------------------------------------------


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 800954c:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009550:	2201      	movs	r2, #1
 8009552:	4619      	mov	r1, r3
 8009554:	4888      	ldr	r0, [pc, #544]	; (8009778 <main+0x8f0>)
 8009556:	f7fe fbc7 	bl	8007ce8 <HAL_UART_Receive_IT>

			if (rx_character_buffered != '.'){
 800955a:	4b8f      	ldr	r3, [pc, #572]	; (8009798 <main+0x910>)
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b2e      	cmp	r3, #46	; 0x2e
 8009560:	d007      	beq.n	8009572 <main+0x6ea>
				ch = rx_character_buffered;
 8009562:	4b8d      	ldr	r3, [pc, #564]	; (8009798 <main+0x910>)
 8009564:	781a      	ldrb	r2, [r3, #0]
 8009566:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800956a:	701a      	strb	r2, [r3, #0]
				//rx_character_armed = 0;
				rx_character_buffered = '.';
 800956c:	4b8a      	ldr	r3, [pc, #552]	; (8009798 <main+0x910>)
 800956e:	222e      	movs	r2, #46	; 0x2e
 8009570:	701a      	strb	r2, [r3, #0]
			}



			switch(ch){
 8009572:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	3b41      	subs	r3, #65	; 0x41
 800957a:	2b39      	cmp	r3, #57	; 0x39
 800957c:	f200 8226 	bhi.w	80099cc <main+0xb44>
 8009580:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <main+0x700>)
 8009582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009586:	bf00      	nop
 8009588:	080098dd 	.word	0x080098dd
 800958c:	08009981 	.word	0x08009981
 8009590:	080098f3 	.word	0x080098f3
 8009594:	080098cb 	.word	0x080098cb
 8009598:	08009931 	.word	0x08009931
 800959c:	0800991d 	.word	0x0800991d
 80095a0:	08009979 	.word	0x08009979
 80095a4:	080099cd 	.word	0x080099cd
 80095a8:	080099cd 	.word	0x080099cd
 80095ac:	080099cd 	.word	0x080099cd
 80095b0:	080099cd 	.word	0x080099cd
 80095b4:	08009989 	.word	0x08009989
 80095b8:	080099cd 	.word	0x080099cd
 80095bc:	080099cd 	.word	0x080099cd
 80095c0:	080099cd 	.word	0x080099cd
 80095c4:	08009887 	.word	0x08009887
 80095c8:	0800993d 	.word	0x0800993d
 80095cc:	0800990b 	.word	0x0800990b
 80095d0:	080098b5 	.word	0x080098b5
 80095d4:	08009971 	.word	0x08009971
 80095d8:	080099cd 	.word	0x080099cd
 80095dc:	080099cd 	.word	0x080099cd
 80095e0:	080098a3 	.word	0x080098a3
 80095e4:	08009881 	.word	0x08009881
 80095e8:	080099cd 	.word	0x080099cd
 80095ec:	080099cd 	.word	0x080099cd
 80095f0:	080099cd 	.word	0x080099cd
 80095f4:	080099cd 	.word	0x080099cd
 80095f8:	080099cd 	.word	0x080099cd
 80095fc:	080099cd 	.word	0x080099cd
 8009600:	080099cd 	.word	0x080099cd
 8009604:	080099cd 	.word	0x080099cd
 8009608:	08009699 	.word	0x08009699
 800960c:	080099cd 	.word	0x080099cd
 8009610:	080099cd 	.word	0x080099cd
 8009614:	080096c1 	.word	0x080096c1
 8009618:	08009711 	.word	0x08009711
 800961c:	080097ad 	.word	0x080097ad
 8009620:	08009741 	.word	0x08009741
 8009624:	08009749 	.word	0x08009749
 8009628:	0800988d 	.word	0x0800988d
 800962c:	08009819 	.word	0x08009819
 8009630:	08009895 	.word	0x08009895
 8009634:	0800986b 	.word	0x0800986b
 8009638:	08009949 	.word	0x08009949
 800963c:	0800995b 	.word	0x0800995b
 8009640:	08009861 	.word	0x08009861
 8009644:	08009841 	.word	0x08009841
 8009648:	080096e9 	.word	0x080096e9
 800964c:	080097d3 	.word	0x080097d3
 8009650:	08009683 	.word	0x08009683
 8009654:	08009739 	.word	0x08009739
 8009658:	080097f1 	.word	0x080097f1
 800965c:	080099cd 	.word	0x080099cd
 8009660:	08009671 	.word	0x08009671
 8009664:	080099cd 	.word	0x080099cd
 8009668:	080099cd 	.word	0x080099cd
 800966c:	080097e5 	.word	0x080097e5
				case 'w':
					amp *= 2;
 8009670:	4b4a      	ldr	r3, [pc, #296]	; (800979c <main+0x914>)
 8009672:	edd3 7a00 	vldr	s15, [r3]
 8009676:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800967a:	4b48      	ldr	r3, [pc, #288]	; (800979c <main+0x914>)
 800967c:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009680:	e1a8      	b.n	80099d4 <main+0xb4c>
				case 's':
					amp /= 2;
 8009682:	4b46      	ldr	r3, [pc, #280]	; (800979c <main+0x914>)
 8009684:	ed93 7a00 	vldr	s14, [r3]
 8009688:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800968c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8009690:	4b42      	ldr	r3, [pc, #264]	; (800979c <main+0x914>)
 8009692:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009696:	e19d      	b.n	80099d4 <main+0xb4c>
				case 'a':
					phase_shift -= 0.05;
 8009698:	4b41      	ldr	r3, [pc, #260]	; (80097a0 <main+0x918>)
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	4618      	mov	r0, r3
 800969e:	f7f6 ff53 	bl	8000548 <__aeabi_f2d>
 80096a2:	a333      	add	r3, pc, #204	; (adr r3, 8009770 <main+0x8e8>)
 80096a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a8:	f7f6 fdee 	bl	8000288 <__aeabi_dsub>
 80096ac:	4603      	mov	r3, r0
 80096ae:	460c      	mov	r4, r1
 80096b0:	4618      	mov	r0, r3
 80096b2:	4621      	mov	r1, r4
 80096b4:	f7f7 fa98 	bl	8000be8 <__aeabi_d2f>
 80096b8:	4602      	mov	r2, r0
 80096ba:	4b39      	ldr	r3, [pc, #228]	; (80097a0 <main+0x918>)
 80096bc:	601a      	str	r2, [r3, #0]
					break;
 80096be:	e189      	b.n	80099d4 <main+0xb4c>
				case 'd':
					phase_shift += 0.05;
 80096c0:	4b37      	ldr	r3, [pc, #220]	; (80097a0 <main+0x918>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f7f6 ff3f 	bl	8000548 <__aeabi_f2d>
 80096ca:	a329      	add	r3, pc, #164	; (adr r3, 8009770 <main+0x8e8>)
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f7f6 fddc 	bl	800028c <__adddf3>
 80096d4:	4603      	mov	r3, r0
 80096d6:	460c      	mov	r4, r1
 80096d8:	4618      	mov	r0, r3
 80096da:	4621      	mov	r1, r4
 80096dc:	f7f7 fa84 	bl	8000be8 <__aeabi_d2f>
 80096e0:	4602      	mov	r2, r0
 80096e2:	4b2f      	ldr	r3, [pc, #188]	; (80097a0 <main+0x918>)
 80096e4:	601a      	str	r2, [r3, #0]
					break;
 80096e6:	e175      	b.n	80099d4 <main+0xb4c>
				case 'q':
					phase0 -= 0.05;
 80096e8:	4b2e      	ldr	r3, [pc, #184]	; (80097a4 <main+0x91c>)
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	4618      	mov	r0, r3
 80096ee:	f7f6 ff2b 	bl	8000548 <__aeabi_f2d>
 80096f2:	a31f      	add	r3, pc, #124	; (adr r3, 8009770 <main+0x8e8>)
 80096f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f8:	f7f6 fdc6 	bl	8000288 <__aeabi_dsub>
 80096fc:	4603      	mov	r3, r0
 80096fe:	460c      	mov	r4, r1
 8009700:	4618      	mov	r0, r3
 8009702:	4621      	mov	r1, r4
 8009704:	f7f7 fa70 	bl	8000be8 <__aeabi_d2f>
 8009708:	4602      	mov	r2, r0
 800970a:	4b26      	ldr	r3, [pc, #152]	; (80097a4 <main+0x91c>)
 800970c:	601a      	str	r2, [r3, #0]
					break;
 800970e:	e161      	b.n	80099d4 <main+0xb4c>
				case 'e':
					phase0 += 0.05;
 8009710:	4b24      	ldr	r3, [pc, #144]	; (80097a4 <main+0x91c>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4618      	mov	r0, r3
 8009716:	f7f6 ff17 	bl	8000548 <__aeabi_f2d>
 800971a:	a315      	add	r3, pc, #84	; (adr r3, 8009770 <main+0x8e8>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fdb4 	bl	800028c <__adddf3>
 8009724:	4603      	mov	r3, r0
 8009726:	460c      	mov	r4, r1
 8009728:	4618      	mov	r0, r3
 800972a:	4621      	mov	r1, r4
 800972c:	f7f7 fa5c 	bl	8000be8 <__aeabi_d2f>
 8009730:	4602      	mov	r2, r0
 8009732:	4b1c      	ldr	r3, [pc, #112]	; (80097a4 <main+0x91c>)
 8009734:	601a      	str	r2, [r3, #0]
					break;
 8009736:	e14d      	b.n	80099d4 <main+0xb4c>
				case 't':
					run_motor = 1;
 8009738:	4b1b      	ldr	r3, [pc, #108]	; (80097a8 <main+0x920>)
 800973a:	2201      	movs	r2, #1
 800973c:	601a      	str	r2, [r3, #0]
					break;
 800973e:	e149      	b.n	80099d4 <main+0xb4c>
				case 'g':
					run_motor = 0;
 8009740:	4b19      	ldr	r3, [pc, #100]	; (80097a8 <main+0x920>)
 8009742:	2200      	movs	r2, #0
 8009744:	601a      	str	r2, [r3, #0]
					break;
 8009746:	e145      	b.n	80099d4 <main+0xb4c>
				case 'h':
					amp = abs(amp); //positive should be clockwise == EncVal increases positive :)
 8009748:	4b14      	ldr	r3, [pc, #80]	; (800979c <main+0x914>)
 800974a:	edd3 7a00 	vldr	s15, [r3]
 800974e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009752:	ee17 3a90 	vmov	r3, s15
 8009756:	2b00      	cmp	r3, #0
 8009758:	bfb8      	it	lt
 800975a:	425b      	neglt	r3, r3
 800975c:	ee07 3a90 	vmov	s15, r3
 8009760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009764:	4b0d      	ldr	r3, [pc, #52]	; (800979c <main+0x914>)
 8009766:	edc3 7a00 	vstr	s15, [r3]
					break;
 800976a:	e133      	b.n	80099d4 <main+0xb4c>
 800976c:	f3af 8000 	nop.w
 8009770:	9999999a 	.word	0x9999999a
 8009774:	3fa99999 	.word	0x3fa99999
 8009778:	200006cc 	.word	0x200006cc
 800977c:	20000c70 	.word	0x20000c70
 8009780:	20000275 	.word	0x20000275
 8009784:	200011d8 	.word	0x200011d8
 8009788:	20000298 	.word	0x20000298
 800978c:	20001170 	.word	0x20001170
 8009790:	40020c00 	.word	0x40020c00
 8009794:	40021000 	.word	0x40021000
 8009798:	20000005 	.word	0x20000005
 800979c:	20000010 	.word	0x20000010
 80097a0:	20000018 	.word	0x20000018
 80097a4:	20000008 	.word	0x20000008
 80097a8:	20000014 	.word	0x20000014
				case 'f':
					amp = -abs(amp);
 80097ac:	4b7a      	ldr	r3, [pc, #488]	; (8009998 <main+0xb10>)
 80097ae:	edd3 7a00 	vldr	s15, [r3]
 80097b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80097b6:	ee17 3a90 	vmov	r3, s15
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	bfb8      	it	lt
 80097be:	425b      	neglt	r3, r3
 80097c0:	425b      	negs	r3, r3
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097ca:	4b73      	ldr	r3, [pc, #460]	; (8009998 <main+0xb10>)
 80097cc:	edc3 7a00 	vstr	s15, [r3]
					break;
 80097d0:	e100      	b.n	80099d4 <main+0xb4c>
				case 'r':
					amp = -amp;
 80097d2:	4b71      	ldr	r3, [pc, #452]	; (8009998 <main+0xb10>)
 80097d4:	edd3 7a00 	vldr	s15, [r3]
 80097d8:	eef1 7a67 	vneg.f32	s15, s15
 80097dc:	4b6e      	ldr	r3, [pc, #440]	; (8009998 <main+0xb10>)
 80097de:	edc3 7a00 	vstr	s15, [r3]
					break;
 80097e2:	e0f7      	b.n	80099d4 <main+0xb4c>
				case 'z':
					playSound( 1, 20, 100);
 80097e4:	2264      	movs	r2, #100	; 0x64
 80097e6:	2114      	movs	r1, #20
 80097e8:	2001      	movs	r0, #1
 80097ea:	f002 f947 	bl	800ba7c <playSound>
					break;
 80097ee:	e0f1      	b.n	80099d4 <main+0xb4c>
				case 'u':
					stiffness += 0.001;
 80097f0:	4b6a      	ldr	r3, [pc, #424]	; (800999c <main+0xb14>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4618      	mov	r0, r3
 80097f6:	f7f6 fea7 	bl	8000548 <__aeabi_f2d>
 80097fa:	a365      	add	r3, pc, #404	; (adr r3, 8009990 <main+0xb08>)
 80097fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009800:	f7f6 fd44 	bl	800028c <__adddf3>
 8009804:	4603      	mov	r3, r0
 8009806:	460c      	mov	r4, r1
 8009808:	4618      	mov	r0, r3
 800980a:	4621      	mov	r1, r4
 800980c:	f7f7 f9ec 	bl	8000be8 <__aeabi_d2f>
 8009810:	4602      	mov	r2, r0
 8009812:	4b62      	ldr	r3, [pc, #392]	; (800999c <main+0xb14>)
 8009814:	601a      	str	r2, [r3, #0]
					break;
 8009816:	e0dd      	b.n	80099d4 <main+0xb4c>
				case 'j':
					stiffness -= 0.001;
 8009818:	4b60      	ldr	r3, [pc, #384]	; (800999c <main+0xb14>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4618      	mov	r0, r3
 800981e:	f7f6 fe93 	bl	8000548 <__aeabi_f2d>
 8009822:	a35b      	add	r3, pc, #364	; (adr r3, 8009990 <main+0xb08>)
 8009824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009828:	f7f6 fd2e 	bl	8000288 <__aeabi_dsub>
 800982c:	4603      	mov	r3, r0
 800982e:	460c      	mov	r4, r1
 8009830:	4618      	mov	r0, r3
 8009832:	4621      	mov	r1, r4
 8009834:	f7f7 f9d8 	bl	8000be8 <__aeabi_d2f>
 8009838:	4602      	mov	r2, r0
 800983a:	4b58      	ldr	r3, [pc, #352]	; (800999c <main+0xb14>)
 800983c:	601a      	str	r2, [r3, #0]
					break;
 800983e:	e0c9      	b.n	80099d4 <main+0xb4c>
				case 'p':
					//print2uart = false;
					print2uart = !print2uart;
 8009840:	4b57      	ldr	r3, [pc, #348]	; (80099a0 <main+0xb18>)
 8009842:	781b      	ldrb	r3, [r3, #0]
 8009844:	2b00      	cmp	r3, #0
 8009846:	bf14      	ite	ne
 8009848:	2301      	movne	r3, #1
 800984a:	2300      	moveq	r3, #0
 800984c:	b2db      	uxtb	r3, r3
 800984e:	f083 0301 	eor.w	r3, r3, #1
 8009852:	b2db      	uxtb	r3, r3
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	b2da      	uxtb	r2, r3
 800985a:	4b51      	ldr	r3, [pc, #324]	; (80099a0 <main+0xb18>)
 800985c:	701a      	strb	r2, [r3, #0]
					break;
 800985e:	e0b9      	b.n	80099d4 <main+0xb4c>
				case 'o':
					//HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
					EN_GATE_GPIO_Port->BSRR = (uint32_t)EN_GATE_Pin << 16U;
 8009860:	4b50      	ldr	r3, [pc, #320]	; (80099a4 <main+0xb1c>)
 8009862:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009866:	619a      	str	r2, [r3, #24]
					break;
 8009868:	e0b4      	b.n	80099d4 <main+0xb4c>
				case 'l':
					HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 800986a:	2201      	movs	r2, #1
 800986c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009870:	484c      	ldr	r0, [pc, #304]	; (80099a4 <main+0xb1c>)
 8009872:	f7fa f8d1 	bl	8003a18 <HAL_GPIO_WritePin>
					EN_GATE_GPIO_Port->BSRR = EN_GATE_Pin ;
 8009876:	4b4b      	ldr	r3, [pc, #300]	; (80099a4 <main+0xb1c>)
 8009878:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800987c:	619a      	str	r2, [r3, #24]
					break;
 800987e:	e0a9      	b.n	80099d4 <main+0xb4c>
				case 'X':
					step_through_pole_angles();
 8009880:	f001 fef4 	bl	800b66c <step_through_pole_angles>
					break;
 8009884:	e0a6      	b.n	80099d4 <main+0xb4c>
				case 'P':
					step_through_pwm_percent();
 8009886:	f002 f819 	bl	800b8bc <step_through_pwm_percent>
					break;
 800988a:	e0a3      	b.n	80099d4 <main+0xb4c>
				case 'i':
					mode_of_control = 1;
 800988c:	4b46      	ldr	r3, [pc, #280]	; (80099a8 <main+0xb20>)
 800988e:	2201      	movs	r2, #1
 8009890:	701a      	strb	r2, [r3, #0]
					break;
 8009892:	e09f      	b.n	80099d4 <main+0xb4c>
				case 'k':
					mode_of_control = 0;
 8009894:	4b44      	ldr	r3, [pc, #272]	; (80099a8 <main+0xb20>)
 8009896:	2200      	movs	r2, #0
 8009898:	701a      	strb	r2, [r3, #0]
					amp = 0.05;
 800989a:	4b3f      	ldr	r3, [pc, #252]	; (8009998 <main+0xb10>)
 800989c:	4a43      	ldr	r2, [pc, #268]	; (80099ac <main+0xb24>)
 800989e:	601a      	str	r2, [r3, #0]
					break;
 80098a0:	e098      	b.n	80099d4 <main+0xb4c>

				// pos control
				case 'W':
					pos_amp *= 2;
 80098a2:	4b43      	ldr	r3, [pc, #268]	; (80099b0 <main+0xb28>)
 80098a4:	edd3 7a00 	vldr	s15, [r3]
 80098a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098ac:	4b40      	ldr	r3, [pc, #256]	; (80099b0 <main+0xb28>)
 80098ae:	edc3 7a00 	vstr	s15, [r3]
					break;
 80098b2:	e08f      	b.n	80099d4 <main+0xb4c>
				case 'S':
					pos_amp *= 0.5;
 80098b4:	4b3e      	ldr	r3, [pc, #248]	; (80099b0 <main+0xb28>)
 80098b6:	edd3 7a00 	vldr	s15, [r3]
 80098ba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80098be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098c2:	4b3b      	ldr	r3, [pc, #236]	; (80099b0 <main+0xb28>)
 80098c4:	edc3 7a00 	vstr	s15, [r3]
					break;
 80098c8:	e084      	b.n	80099d4 <main+0xb4c>
				case 'D':
					pos_freq *= 2;
 80098ca:	4b3a      	ldr	r3, [pc, #232]	; (80099b4 <main+0xb2c>)
 80098cc:	edd3 7a00 	vldr	s15, [r3]
 80098d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80098d4:	4b37      	ldr	r3, [pc, #220]	; (80099b4 <main+0xb2c>)
 80098d6:	edc3 7a00 	vstr	s15, [r3]
					break;
 80098da:	e07b      	b.n	80099d4 <main+0xb4c>
				case 'A':
					pos_freq *= 0.5;
 80098dc:	4b35      	ldr	r3, [pc, #212]	; (80099b4 <main+0xb2c>)
 80098de:	edd3 7a00 	vldr	s15, [r3]
 80098e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80098e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098ea:	4b32      	ldr	r3, [pc, #200]	; (80099b4 <main+0xb2c>)
 80098ec:	edc3 7a00 	vstr	s15, [r3]
					break;
 80098f0:	e070      	b.n	80099d4 <main+0xb4c>
				case 'C':
					if (CONVERT){
 80098f2:	4b31      	ldr	r3, [pc, #196]	; (80099b8 <main+0xb30>)
 80098f4:	781b      	ldrb	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d003      	beq.n	8009902 <main+0xa7a>
						CONVERT = 0;
 80098fa:	4b2f      	ldr	r3, [pc, #188]	; (80099b8 <main+0xb30>)
 80098fc:	2200      	movs	r2, #0
 80098fe:	701a      	strb	r2, [r3, #0]
					}
					else {
						CONVERT = 1;
					}
					break;
 8009900:	e068      	b.n	80099d4 <main+0xb4c>
						CONVERT = 1;
 8009902:	4b2d      	ldr	r3, [pc, #180]	; (80099b8 <main+0xb30>)
 8009904:	2201      	movs	r2, #1
 8009906:	701a      	strb	r2, [r3, #0]
					break;
 8009908:	e064      	b.n	80099d4 <main+0xb4c>
				case 'R':
					pos_amp_limit *= 2;
 800990a:	4b2c      	ldr	r3, [pc, #176]	; (80099bc <main+0xb34>)
 800990c:	edd3 7a00 	vldr	s15, [r3]
 8009910:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009914:	4b29      	ldr	r3, [pc, #164]	; (80099bc <main+0xb34>)
 8009916:	edc3 7a00 	vstr	s15, [r3]
					break;
 800991a:	e05b      	b.n	80099d4 <main+0xb4c>
				case 'F':
					pos_amp_limit *= 0.5;
 800991c:	4b27      	ldr	r3, [pc, #156]	; (80099bc <main+0xb34>)
 800991e:	edd3 7a00 	vldr	s15, [r3]
 8009922:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009926:	ee67 7a87 	vmul.f32	s15, s15, s14
 800992a:	4b24      	ldr	r3, [pc, #144]	; (80099bc <main+0xb34>)
 800992c:	edc3 7a00 	vstr	s15, [r3]
				case 'E':
					pos_offset += 200;
 8009930:	4b23      	ldr	r3, [pc, #140]	; (80099c0 <main+0xb38>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	33c8      	adds	r3, #200	; 0xc8
 8009936:	4a22      	ldr	r2, [pc, #136]	; (80099c0 <main+0xb38>)
 8009938:	6013      	str	r3, [r2, #0]
					break;
 800993a:	e04b      	b.n	80099d4 <main+0xb4c>
				case 'Q':
					pos_offset -= 200;
 800993c:	4b20      	ldr	r3, [pc, #128]	; (80099c0 <main+0xb38>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	3bc8      	subs	r3, #200	; 0xc8
 8009942:	4a1f      	ldr	r2, [pc, #124]	; (80099c0 <main+0xb38>)
 8009944:	6013      	str	r3, [r2, #0]
					break;
 8009946:	e045      	b.n	80099d4 <main+0xb4c>
				case 'm':
					P_gain *= 2;
 8009948:	4b1e      	ldr	r3, [pc, #120]	; (80099c4 <main+0xb3c>)
 800994a:	edd3 7a00 	vldr	s15, [r3]
 800994e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009952:	4b1c      	ldr	r3, [pc, #112]	; (80099c4 <main+0xb3c>)
 8009954:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009958:	e03c      	b.n	80099d4 <main+0xb4c>
				case 'n':
					P_gain *= 0.5;
 800995a:	4b1a      	ldr	r3, [pc, #104]	; (80099c4 <main+0xb3c>)
 800995c:	edd3 7a00 	vldr	s15, [r3]
 8009960:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009964:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009968:	4b16      	ldr	r3, [pc, #88]	; (80099c4 <main+0xb3c>)
 800996a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800996e:	e031      	b.n	80099d4 <main+0xb4c>
				case 'T':
					wave_mode = 0;
 8009970:	4b15      	ldr	r3, [pc, #84]	; (80099c8 <main+0xb40>)
 8009972:	2200      	movs	r2, #0
 8009974:	701a      	strb	r2, [r3, #0]
					break;
 8009976:	e02d      	b.n	80099d4 <main+0xb4c>
				case 'G':
					wave_mode = 1;
 8009978:	4b13      	ldr	r3, [pc, #76]	; (80099c8 <main+0xb40>)
 800997a:	2201      	movs	r2, #1
 800997c:	701a      	strb	r2, [r3, #0]
					break;
 800997e:	e029      	b.n	80099d4 <main+0xb4c>
				case 'B':
					wave_mode = 2;
 8009980:	4b11      	ldr	r3, [pc, #68]	; (80099c8 <main+0xb40>)
 8009982:	2202      	movs	r2, #2
 8009984:	701a      	strb	r2, [r3, #0]
					break;
 8009986:	e025      	b.n	80099d4 <main+0xb4c>
				case 'L':
					explore_limits();
 8009988:	f001 ffd2 	bl	800b930 <explore_limits>
					break;
 800998c:	e022      	b.n	80099d4 <main+0xb4c>
 800998e:	bf00      	nop
 8009990:	d2f1a9fc 	.word	0xd2f1a9fc
 8009994:	3f50624d 	.word	0x3f50624d
 8009998:	20000010 	.word	0x20000010
 800999c:	20000234 	.word	0x20000234
 80099a0:	20000034 	.word	0x20000034
 80099a4:	40021000 	.word	0x40021000
 80099a8:	20000276 	.word	0x20000276
 80099ac:	3d4ccccd 	.word	0x3d4ccccd
 80099b0:	2000001c 	.word	0x2000001c
 80099b4:	20000020 	.word	0x20000020
 80099b8:	20000233 	.word	0x20000233
 80099bc:	20000024 	.word	0x20000024
 80099c0:	20000238 	.word	0x20000238
 80099c4:	20000028 	.word	0x20000028
 80099c8:	20000274 	.word	0x20000274

				default:
					ch='.';
 80099cc:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80099d0:	222e      	movs	r2, #46	; 0x2e
 80099d2:	701a      	strb	r2, [r3, #0]
			}

			//HAL_ADCEx_InjectedStart (&hadc1);
			//HAL_ADCEx_InjectedPollForConversion (&hadc1, 1); //this command is not necessary to get values - it was in for a long time

			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 80099d4:	2101      	movs	r1, #1
 80099d6:	48d0      	ldr	r0, [pc, #832]	; (8009d18 <main+0xe90>)
 80099d8:	f7f8 f952 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 80099dc:	f8c7 02d4 	str.w	r0, [r7, #724]	; 0x2d4
			uint32_t val_ASENSE = HAL_ADCEx_InjectedGetValue (&hadc1, 2);
 80099e0:	2102      	movs	r1, #2
 80099e2:	48cd      	ldr	r0, [pc, #820]	; (8009d18 <main+0xe90>)
 80099e4:	f7f8 f94c 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 80099e8:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
			uint32_t val_STRAIN0 = HAL_ADCEx_InjectedGetValue (&hadc1, 3); //last number refers to rank
 80099ec:	2103      	movs	r1, #3
 80099ee:	48ca      	ldr	r0, [pc, #808]	; (8009d18 <main+0xe90>)
 80099f0:	f7f8 f946 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 80099f4:	f8c7 02cc 	str.w	r0, [r7, #716]	; 0x2cc
			uint32_t val_M0_TEMP = HAL_ADCEx_InjectedGetValue (&hadc1, 4);
 80099f8:	2104      	movs	r1, #4
 80099fa:	48c7      	ldr	r0, [pc, #796]	; (8009d18 <main+0xe90>)
 80099fc:	f7f8 f940 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009a00:	f8c7 02c8 	str.w	r0, [r7, #712]	; 0x2c8

			uint32_t val_SO1 = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 8009a04:	2101      	movs	r1, #1
 8009a06:	48c5      	ldr	r0, [pc, #788]	; (8009d1c <main+0xe94>)
 8009a08:	f7f8 f93a 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009a0c:	f8c7 02c4 	str.w	r0, [r7, #708]	; 0x2c4
			uint32_t val_BSENSE = HAL_ADCEx_InjectedGetValue (&hadc2, 2);
 8009a10:	2102      	movs	r1, #2
 8009a12:	48c2      	ldr	r0, [pc, #776]	; (8009d1c <main+0xe94>)
 8009a14:	f7f8 f934 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009a18:	f8c7 02c0 	str.w	r0, [r7, #704]	; 0x2c0
			uint32_t val_STRAIN1 = HAL_ADCEx_InjectedGetValue (&hadc2, 3);
 8009a1c:	2103      	movs	r1, #3
 8009a1e:	48bf      	ldr	r0, [pc, #764]	; (8009d1c <main+0xe94>)
 8009a20:	f7f8 f92e 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009a24:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc
			uint32_t val_TEMP = HAL_ADCEx_InjectedGetValue (&hadc2, 4);
 8009a28:	2104      	movs	r1, #4
 8009a2a:	48bc      	ldr	r0, [pc, #752]	; (8009d1c <main+0xe94>)
 8009a2c:	f7f8 f928 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009a30:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
			uint32_t val_VBUS = HAL_ADCEx_InjectedGetValue (&hadc2, 5); //TODO this value is not read out correctly - always comes as 0
 8009a34:	2105      	movs	r1, #5
 8009a36:	48b9      	ldr	r0, [pc, #740]	; (8009d1c <main+0xe94>)
 8009a38:	f7f8 f922 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009a3c:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4

			uint32_t val_SO2 = HAL_ADCEx_InjectedGetValue (&hadc3, 1);
 8009a40:	2101      	movs	r1, #1
 8009a42:	48b7      	ldr	r0, [pc, #732]	; (8009d20 <main+0xe98>)
 8009a44:	f7f8 f91c 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009a48:	f8c7 02b0 	str.w	r0, [r7, #688]	; 0x2b0
			uint32_t val_CSENSE = HAL_ADCEx_InjectedGetValue (&hadc3, 2);
 8009a4c:	2102      	movs	r1, #2
 8009a4e:	48b4      	ldr	r0, [pc, #720]	; (8009d20 <main+0xe98>)
 8009a50:	f7f8 f916 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009a54:	f8c7 02ac 	str.w	r0, [r7, #684]	; 0x2ac

//			// --- read angle
				//uint8_t spi_address_8[2];
				//uint8_t angle8[2];
				spi_address_8[1]= 0x7F;
 8009a58:	f107 030c 	add.w	r3, r7, #12
 8009a5c:	227f      	movs	r2, #127	; 0x7f
 8009a5e:	705a      	strb	r2, [r3, #1]
				spi_address_8[0]= 0xFE;
 8009a60:	f107 030c 	add.w	r3, r7, #12
 8009a64:	22fe      	movs	r2, #254	; 0xfe
 8009a66:	701a      	strb	r2, [r3, #0]
				//address8 = {0xFE, 0x7F};
				//address = 0x3FFE | AS_READ ;
				delay_SPI();
 8009a68:	f001 fff0 	bl	800ba4c <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a72:	48ac      	ldr	r0, [pc, #688]	; (8009d24 <main+0xe9c>)
 8009a74:	f7f9 ffd0 	bl	8003a18 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009a78:	f107 010c 	add.w	r1, r7, #12
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	2201      	movs	r2, #1
 8009a80:	48a9      	ldr	r0, [pc, #676]	; (8009d28 <main+0xea0>)
 8009a82:	f7fb ff52 	bl	800592a <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009a86:	2201      	movs	r2, #1
 8009a88:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a8c:	48a5      	ldr	r0, [pc, #660]	; (8009d24 <main+0xe9c>)
 8009a8e:	f7f9 ffc3 	bl	8003a18 <HAL_GPIO_WritePin>
				delay_SPI();
 8009a92:	f001 ffdb 	bl	800ba4c <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009a96:	2200      	movs	r2, #0
 8009a98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009a9c:	48a1      	ldr	r0, [pc, #644]	; (8009d24 <main+0xe9c>)
 8009a9e:	f7f9 ffbb 	bl	8003a18 <HAL_GPIO_WritePin>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8009aa2:	1d39      	adds	r1, r7, #4
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	2201      	movs	r2, #1
 8009aa8:	489f      	ldr	r0, [pc, #636]	; (8009d28 <main+0xea0>)
 8009aaa:	f7fc f872 	bl	8005b92 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009aae:	2201      	movs	r2, #1
 8009ab0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009ab4:	489b      	ldr	r0, [pc, #620]	; (8009d24 <main+0xe9c>)
 8009ab6:	f7f9 ffaf 	bl	8003a18 <HAL_GPIO_WritePin>
				angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 8009aba:	1d3b      	adds	r3, r7, #4
 8009abc:	781b      	ldrb	r3, [r3, #0]
 8009abe:	b21a      	sxth	r2, r3
 8009ac0:	1d3b      	adds	r3, r7, #4
 8009ac2:	785b      	ldrb	r3, [r3, #1]
 8009ac4:	021b      	lsls	r3, r3, #8
 8009ac6:	b21b      	sxth	r3, r3
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	b21b      	sxth	r3, r3
 8009acc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
				angle &= AS_DATA_MASK;
 8009ad0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009ad4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009ad8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

				uint32_t time10mus = TIM5->CNT;
 8009adc:	4b93      	ldr	r3, [pc, #588]	; (8009d2c <main+0xea4>)
 8009ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae0:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8

				if (print2uart){
 8009ae4:	4b92      	ldr	r3, [pc, #584]	; (8009d30 <main+0xea8>)
 8009ae6:	781b      	ldrb	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 834a 	beq.w	800a182 <main+0x12fa>


						//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5


						sprintf((char*)buf, "tx: %c %4d %4d %4d %4d ", ch, tx_msg[0],rx_msg[1],rx_msg[2],rx_msg[3]);
 8009aee:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	461c      	mov	r4, r3
 8009af6:	4b8f      	ldr	r3, [pc, #572]	; (8009d34 <main+0xeac>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	461d      	mov	r5, r3
 8009afc:	4b8e      	ldr	r3, [pc, #568]	; (8009d38 <main+0xeb0>)
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	461a      	mov	r2, r3
 8009b02:	4b8d      	ldr	r3, [pc, #564]	; (8009d38 <main+0xeb0>)
 8009b04:	789b      	ldrb	r3, [r3, #2]
 8009b06:	4619      	mov	r1, r3
 8009b08:	4b8b      	ldr	r3, [pc, #556]	; (8009d38 <main+0xeb0>)
 8009b0a:	78db      	ldrb	r3, [r3, #3]
 8009b0c:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8009b10:	9302      	str	r3, [sp, #8]
 8009b12:	9101      	str	r1, [sp, #4]
 8009b14:	9200      	str	r2, [sp, #0]
 8009b16:	462b      	mov	r3, r5
 8009b18:	4622      	mov	r2, r4
 8009b1a:	4988      	ldr	r1, [pc, #544]	; (8009d3c <main+0xeb4>)
 8009b1c:	f004 fb52 	bl	800e1c4 <siprintf>

						sprintf((char*)buf_add, " rx:%c %4d %4d %4d %4d %4d", rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent); strcat(buf, buf_add);
 8009b20:	4b87      	ldr	r3, [pc, #540]	; (8009d40 <main+0xeb8>)
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	461d      	mov	r5, r3
 8009b26:	4b87      	ldr	r3, [pc, #540]	; (8009d44 <main+0xebc>)
 8009b28:	781b      	ldrb	r3, [r3, #0]
 8009b2a:	461e      	mov	r6, r3
 8009b2c:	4b86      	ldr	r3, [pc, #536]	; (8009d48 <main+0xec0>)
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	461a      	mov	r2, r3
 8009b32:	4b86      	ldr	r3, [pc, #536]	; (8009d4c <main+0xec4>)
 8009b34:	781b      	ldrb	r3, [r3, #0]
 8009b36:	4619      	mov	r1, r3
 8009b38:	4b85      	ldr	r3, [pc, #532]	; (8009d50 <main+0xec8>)
 8009b3a:	781b      	ldrb	r3, [r3, #0]
 8009b3c:	461c      	mov	r4, r3
 8009b3e:	4b85      	ldr	r3, [pc, #532]	; (8009d54 <main+0xecc>)
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009b46:	9303      	str	r3, [sp, #12]
 8009b48:	9402      	str	r4, [sp, #8]
 8009b4a:	9101      	str	r1, [sp, #4]
 8009b4c:	9200      	str	r2, [sp, #0]
 8009b4e:	4633      	mov	r3, r6
 8009b50:	462a      	mov	r2, r5
 8009b52:	4981      	ldr	r1, [pc, #516]	; (8009d58 <main+0xed0>)
 8009b54:	f004 fb36 	bl	800e1c4 <siprintf>
 8009b58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009b5c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009b60:	4611      	mov	r1, r2
 8009b62:	4618      	mov	r0, r3
 8009b64:	f004 fb4e 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " p0:%4.2f", phase0); strcat(buf, buf_add);
 8009b68:	4b7c      	ldr	r3, [pc, #496]	; (8009d5c <main+0xed4>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f7f6 fceb 	bl	8000548 <__aeabi_f2d>
 8009b72:	4603      	mov	r3, r0
 8009b74:	460c      	mov	r4, r1
 8009b76:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	4623      	mov	r3, r4
 8009b7e:	4978      	ldr	r1, [pc, #480]	; (8009d60 <main+0xed8>)
 8009b80:	f004 fb20 	bl	800e1c4 <siprintf>
 8009b84:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009b88:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009b8c:	4611      	mov	r1, r2
 8009b8e:	4618      	mov	r0, r3
 8009b90:	f004 fb38 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " ps:%4.2f", phase_shift); strcat(buf, buf_add);
 8009b94:	4b73      	ldr	r3, [pc, #460]	; (8009d64 <main+0xedc>)
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f7f6 fcd5 	bl	8000548 <__aeabi_f2d>
 8009b9e:	4603      	mov	r3, r0
 8009ba0:	460c      	mov	r4, r1
 8009ba2:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009ba6:	461a      	mov	r2, r3
 8009ba8:	4623      	mov	r3, r4
 8009baa:	496f      	ldr	r1, [pc, #444]	; (8009d68 <main+0xee0>)
 8009bac:	f004 fb0a 	bl	800e1c4 <siprintf>
 8009bb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009bb4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009bb8:	4611      	mov	r1, r2
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f004 fb22 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " amp:%3.2f", amp); strcat(buf, buf_add);
 8009bc0:	4b6a      	ldr	r3, [pc, #424]	; (8009d6c <main+0xee4>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7f6 fcbf 	bl	8000548 <__aeabi_f2d>
 8009bca:	4603      	mov	r3, r0
 8009bcc:	460c      	mov	r4, r1
 8009bce:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	4623      	mov	r3, r4
 8009bd6:	4966      	ldr	r1, [pc, #408]	; (8009d70 <main+0xee8>)
 8009bd8:	f004 faf4 	bl	800e1c4 <siprintf>
 8009bdc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009be0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009be4:	4611      	mov	r1, r2
 8009be6:	4618      	mov	r0, r3
 8009be8:	f004 fb0c 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " av:%5.2f", av_start_angle); strcat(buf, buf_add);
 8009bec:	4b61      	ldr	r3, [pc, #388]	; (8009d74 <main+0xeec>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	f7f6 fca9 	bl	8000548 <__aeabi_f2d>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	460c      	mov	r4, r1
 8009bfa:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009bfe:	461a      	mov	r2, r3
 8009c00:	4623      	mov	r3, r4
 8009c02:	495d      	ldr	r1, [pc, #372]	; (8009d78 <main+0xef0>)
 8009c04:	f004 fade 	bl	800e1c4 <siprintf>
 8009c08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c0c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009c10:	4611      	mov	r1, r2
 8009c12:	4618      	mov	r0, r3
 8009c14:	f004 faf6 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " a:%5d", angle); strcat(buf, buf_add);
 8009c18:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009c1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c20:	4956      	ldr	r1, [pc, #344]	; (8009d7c <main+0xef4>)
 8009c22:	4618      	mov	r0, r3
 8009c24:	f004 face 	bl	800e1c4 <siprintf>
 8009c28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c2c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009c30:	4611      	mov	r1, r2
 8009c32:	4618      	mov	r0, r3
 8009c34:	f004 fae6 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " E:%5d", EncVal); strcat(buf, buf_add);
 8009c38:	4b51      	ldr	r3, [pc, #324]	; (8009d80 <main+0xef8>)
 8009c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c3e:	461a      	mov	r2, r3
 8009c40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c44:	494f      	ldr	r1, [pc, #316]	; (8009d84 <main+0xefc>)
 8009c46:	4618      	mov	r0, r3
 8009c48:	f004 fabc 	bl	800e1c4 <siprintf>
 8009c4c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c50:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f004 fad4 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " c:%5d", rotation_counter); strcat(buf, buf_add);
 8009c5c:	4b4a      	ldr	r3, [pc, #296]	; (8009d88 <main+0xf00>)
 8009c5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009c62:	461a      	mov	r2, r3
 8009c64:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009c68:	4948      	ldr	r1, [pc, #288]	; (8009d8c <main+0xf04>)
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f004 faaa 	bl	800e1c4 <siprintf>
 8009c70:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009c74:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009c78:	4611      	mov	r1, r2
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	f004 fac2 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " v:%6.2f", av_velocity); strcat(buf, buf_add);
 8009c80:	4b43      	ldr	r3, [pc, #268]	; (8009d90 <main+0xf08>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4618      	mov	r0, r3
 8009c86:	f7f6 fc5f 	bl	8000548 <__aeabi_f2d>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	460c      	mov	r4, r1
 8009c8e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009c92:	461a      	mov	r2, r3
 8009c94:	4623      	mov	r3, r4
 8009c96:	493f      	ldr	r1, [pc, #252]	; (8009d94 <main+0xf0c>)
 8009c98:	f004 fa94 	bl	800e1c4 <siprintf>
 8009c9c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009ca0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009ca4:	4611      	mov	r1, r2
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f004 faac 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " s:%4.3f", stiffness); strcat(buf, buf_add);
 8009cac:	4b3a      	ldr	r3, [pc, #232]	; (8009d98 <main+0xf10>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f7f6 fc49 	bl	8000548 <__aeabi_f2d>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	460c      	mov	r4, r1
 8009cba:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	4623      	mov	r3, r4
 8009cc2:	4936      	ldr	r1, [pc, #216]	; (8009d9c <main+0xf14>)
 8009cc4:	f004 fa7e 	bl	800e1c4 <siprintf>
 8009cc8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009ccc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009cd0:	4611      	mov	r1, r2
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f004 fa96 	bl	800e204 <strcat>

						//sprintf((char*)buf_add, " d:%2d", direction); strcat(buf, buf_add);

						if (CONVERT){
 8009cd8:	4b31      	ldr	r3, [pc, #196]	; (8009da0 <main+0xf18>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	f000 811f 	beq.w	8009f20 <main+0x1098>
							float SO0 = ((float)val_I - 2040.0) * 0.134; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134
 8009ce2:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8009ce6:	ee07 3a90 	vmov	s15, r3
 8009cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cee:	ee17 0a90 	vmov	r0, s15
 8009cf2:	f7f6 fc29 	bl	8000548 <__aeabi_f2d>
 8009cf6:	f04f 0200 	mov.w	r2, #0
 8009cfa:	4b2a      	ldr	r3, [pc, #168]	; (8009da4 <main+0xf1c>)
 8009cfc:	f7f6 fac4 	bl	8000288 <__aeabi_dsub>
 8009d00:	4603      	mov	r3, r0
 8009d02:	460c      	mov	r4, r1
 8009d04:	4618      	mov	r0, r3
 8009d06:	4621      	mov	r1, r4
 8009d08:	a301      	add	r3, pc, #4	; (adr r3, 8009d10 <main+0xe88>)
 8009d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0e:	e04b      	b.n	8009da8 <main+0xf20>
 8009d10:	78d4fdf4 	.word	0x78d4fdf4
 8009d14:	3fc126e9 	.word	0x3fc126e9
 8009d18:	20000d94 	.word	0x20000d94
 8009d1c:	2000070c 	.word	0x2000070c
 8009d20:	20000ddc 	.word	0x20000ddc
 8009d24:	40020c00 	.word	0x40020c00
 8009d28:	200002ec 	.word	0x200002ec
 8009d2c:	40000c00 	.word	0x40000c00
 8009d30:	20000034 	.word	0x20000034
 8009d34:	20000c08 	.word	0x20000c08
 8009d38:	20000d54 	.word	0x20000d54
 8009d3c:	08010d08 	.word	0x08010d08
 8009d40:	20000006 	.word	0x20000006
 8009d44:	2000022c 	.word	0x2000022c
 8009d48:	2000022e 	.word	0x2000022e
 8009d4c:	20000230 	.word	0x20000230
 8009d50:	20000231 	.word	0x20000231
 8009d54:	20000232 	.word	0x20000232
 8009d58:	08010d20 	.word	0x08010d20
 8009d5c:	20000008 	.word	0x20000008
 8009d60:	08010d3c 	.word	0x08010d3c
 8009d64:	20000018 	.word	0x20000018
 8009d68:	08010d48 	.word	0x08010d48
 8009d6c:	20000010 	.word	0x20000010
 8009d70:	08010d54 	.word	0x08010d54
 8009d74:	20000f90 	.word	0x20000f90
 8009d78:	08010d60 	.word	0x08010d60
 8009d7c:	08010d6c 	.word	0x08010d6c
 8009d80:	20000e64 	.word	0x20000e64
 8009d84:	08010d74 	.word	0x08010d74
 8009d88:	2000023c 	.word	0x2000023c
 8009d8c:	08010d7c 	.word	0x08010d7c
 8009d90:	2000024c 	.word	0x2000024c
 8009d94:	08010d84 	.word	0x08010d84
 8009d98:	20000234 	.word	0x20000234
 8009d9c:	08010d90 	.word	0x08010d90
 8009da0:	20000233 	.word	0x20000233
 8009da4:	409fe000 	.word	0x409fe000
 8009da8:	f7f6 fc26 	bl	80005f8 <__aeabi_dmul>
 8009dac:	4603      	mov	r3, r0
 8009dae:	460c      	mov	r4, r1
 8009db0:	4618      	mov	r0, r3
 8009db2:	4621      	mov	r1, r4
 8009db4:	f7f6 ff18 	bl	8000be8 <__aeabi_d2f>
 8009db8:	4603      	mov	r3, r0
 8009dba:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
							float SO1 = ((float)val_SO1 - 2002.0) * 0.189; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134 //TODO verify SPI setting in DRV8301 the factor sqrt(2) comes out of thin air
 8009dbe:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8009dc2:	ee07 3a90 	vmov	s15, r3
 8009dc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dca:	ee17 0a90 	vmov	r0, s15
 8009dce:	f7f6 fbbb 	bl	8000548 <__aeabi_f2d>
 8009dd2:	f20f 4330 	addw	r3, pc, #1072	; 0x430
 8009dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dda:	f7f6 fa55 	bl	8000288 <__aeabi_dsub>
 8009dde:	4603      	mov	r3, r0
 8009de0:	460c      	mov	r4, r1
 8009de2:	4618      	mov	r0, r3
 8009de4:	4621      	mov	r1, r4
 8009de6:	f20f 4324 	addw	r3, pc, #1060	; 0x424
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	f7f6 fc03 	bl	80005f8 <__aeabi_dmul>
 8009df2:	4603      	mov	r3, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	4618      	mov	r0, r3
 8009df8:	4621      	mov	r1, r4
 8009dfa:	f7f6 fef5 	bl	8000be8 <__aeabi_d2f>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	f8c7 32a0 	str.w	r3, [r7, #672]	; 0x2a0
							float SO2 = ((float)val_SO2 - 2002.0) * 0.189; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134
 8009e04:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009e08:	ee07 3a90 	vmov	s15, r3
 8009e0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e10:	ee17 0a90 	vmov	r0, s15
 8009e14:	f7f6 fb98 	bl	8000548 <__aeabi_f2d>
 8009e18:	a3fa      	add	r3, pc, #1000	; (adr r3, 800a204 <main+0x137c>)
 8009e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1e:	f7f6 fa33 	bl	8000288 <__aeabi_dsub>
 8009e22:	4603      	mov	r3, r0
 8009e24:	460c      	mov	r4, r1
 8009e26:	4618      	mov	r0, r3
 8009e28:	4621      	mov	r1, r4
 8009e2a:	a3f8      	add	r3, pc, #992	; (adr r3, 800a20c <main+0x1384>)
 8009e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e30:	f7f6 fbe2 	bl	80005f8 <__aeabi_dmul>
 8009e34:	4603      	mov	r3, r0
 8009e36:	460c      	mov	r4, r1
 8009e38:	4618      	mov	r0, r3
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	f7f6 fed4 	bl	8000be8 <__aeabi_d2f>
 8009e40:	4603      	mov	r3, r0
 8009e42:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
							sprintf((char*)buf_add, " I:%5.2fA SO1:%5.2fA SO2:%5.2fA", SO0, SO1, SO2); strcat(buf, buf_add);
 8009e46:	f8d7 02a4 	ldr.w	r0, [r7, #676]	; 0x2a4
 8009e4a:	f7f6 fb7d 	bl	8000548 <__aeabi_f2d>
 8009e4e:	4680      	mov	r8, r0
 8009e50:	4689      	mov	r9, r1
 8009e52:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8009e56:	f7f6 fb77 	bl	8000548 <__aeabi_f2d>
 8009e5a:	4604      	mov	r4, r0
 8009e5c:	460d      	mov	r5, r1
 8009e5e:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8009e62:	f7f6 fb71 	bl	8000548 <__aeabi_f2d>
 8009e66:	4602      	mov	r2, r0
 8009e68:	460b      	mov	r3, r1
 8009e6a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009e6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e72:	e9cd 4500 	strd	r4, r5, [sp]
 8009e76:	4642      	mov	r2, r8
 8009e78:	464b      	mov	r3, r9
 8009e7a:	49cf      	ldr	r1, [pc, #828]	; (800a1b8 <main+0x1330>)
 8009e7c:	f004 f9a2 	bl	800e1c4 <siprintf>
 8009e80:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009e84:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f004 f9ba 	bl	800e204 <strcat>

							float I_tot = sqrt((SO0*SO0 + SO1*SO1 + SO2*SO2)/1.5); //see colab - the factor 1.5 allows to extract the distance from center of triangle to tip
 8009e90:	ed97 7aa9 	vldr	s14, [r7, #676]	; 0x2a4
 8009e94:	edd7 7aa9 	vldr	s15, [r7, #676]	; 0x2a4
 8009e98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009e9c:	edd7 6aa8 	vldr	s13, [r7, #672]	; 0x2a0
 8009ea0:	edd7 7aa8 	vldr	s15, [r7, #672]	; 0x2a0
 8009ea4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009ea8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009eac:	edd7 6aa7 	vldr	s13, [r7, #668]	; 0x29c
 8009eb0:	edd7 7aa7 	vldr	s15, [r7, #668]	; 0x29c
 8009eb4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009eb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009ebc:	ee17 0a90 	vmov	r0, s15
 8009ec0:	f7f6 fb42 	bl	8000548 <__aeabi_f2d>
 8009ec4:	f04f 0200 	mov.w	r2, #0
 8009ec8:	4bbc      	ldr	r3, [pc, #752]	; (800a1bc <main+0x1334>)
 8009eca:	f7f6 fcbf 	bl	800084c <__aeabi_ddiv>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	460c      	mov	r4, r1
 8009ed2:	ec44 3b17 	vmov	d7, r3, r4
 8009ed6:	eeb0 0a47 	vmov.f32	s0, s14
 8009eda:	eef0 0a67 	vmov.f32	s1, s15
 8009ede:	f005 fdef 	bl	800fac0 <sqrt>
 8009ee2:	ec54 3b10 	vmov	r3, r4, d0
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	4621      	mov	r1, r4
 8009eea:	f7f6 fe7d 	bl	8000be8 <__aeabi_d2f>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
							sprintf((char*)buf_add, " It:%5.2fA", I_tot); strcat(buf, buf_add);
 8009ef4:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8009ef8:	f7f6 fb26 	bl	8000548 <__aeabi_f2d>
 8009efc:	4603      	mov	r3, r0
 8009efe:	460c      	mov	r4, r1
 8009f00:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009f04:	461a      	mov	r2, r3
 8009f06:	4623      	mov	r3, r4
 8009f08:	49ad      	ldr	r1, [pc, #692]	; (800a1c0 <main+0x1338>)
 8009f0a:	f004 f95b 	bl	800e1c4 <siprintf>
 8009f0e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009f12:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009f16:	4611      	mov	r1, r2
 8009f18:	4618      	mov	r0, r3
 8009f1a:	f004 f973 	bl	800e204 <strcat>
 8009f1e:	e013      	b.n	8009f48 <main+0x10c0>
						}
						else{
							sprintf((char*)buf_add, " I:%4d SO1:%4d SO2:%4d", val_I, val_SO1, val_SO2); strcat(buf, buf_add);
 8009f20:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009f24:	f8d7 32b0 	ldr.w	r3, [r7, #688]	; 0x2b0
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8009f2e:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 8009f32:	49a4      	ldr	r1, [pc, #656]	; (800a1c4 <main+0x133c>)
 8009f34:	f004 f946 	bl	800e1c4 <siprintf>
 8009f38:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009f3c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009f40:	4611      	mov	r1, r2
 8009f42:	4618      	mov	r0, r3
 8009f44:	f004 f95e 	bl	800e204 <strcat>
						}

						sprintf((char*)buf_add, " A:%4d B:%4d C:%4d", val_ASENSE, val_BSENSE, val_CSENSE); strcat(buf, buf_add);
 8009f48:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8009f4c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8009f56:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009f5a:	499b      	ldr	r1, [pc, #620]	; (800a1c8 <main+0x1340>)
 8009f5c:	f004 f932 	bl	800e1c4 <siprintf>
 8009f60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8009f64:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8009f68:	4611      	mov	r1, r2
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f004 f94a 	bl	800e204 <strcat>

						if (CONVERT){
 8009f70:	4b96      	ldr	r3, [pc, #600]	; (800a1cc <main+0x1344>)
 8009f72:	781b      	ldrb	r3, [r3, #0]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d05a      	beq.n	800a02e <main+0x11a6>
							float STRAIN0 = ((float)val_STRAIN0 - 2235.0) * 1.678; // 3.3/4095/0.00048[gain see page 114] = 1.678
 8009f78:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 8009f7c:	ee07 3a90 	vmov	s15, r3
 8009f80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f84:	ee17 0a90 	vmov	r0, s15
 8009f88:	f7f6 fade 	bl	8000548 <__aeabi_f2d>
 8009f8c:	a386      	add	r3, pc, #536	; (adr r3, 800a1a8 <main+0x1320>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 f979 	bl	8000288 <__aeabi_dsub>
 8009f96:	4603      	mov	r3, r0
 8009f98:	460c      	mov	r4, r1
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	a384      	add	r3, pc, #528	; (adr r3, 800a1b0 <main+0x1328>)
 8009fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa4:	f7f6 fb28 	bl	80005f8 <__aeabi_dmul>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	460c      	mov	r4, r1
 8009fac:	4618      	mov	r0, r3
 8009fae:	4621      	mov	r1, r4
 8009fb0:	f7f6 fe1a 	bl	8000be8 <__aeabi_d2f>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
							float STRAIN1 = ((float)val_STRAIN1 - 2235.0) * 1.678;
 8009fba:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8009fbe:	ee07 3a90 	vmov	s15, r3
 8009fc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fc6:	ee17 0a90 	vmov	r0, s15
 8009fca:	f7f6 fabd 	bl	8000548 <__aeabi_f2d>
 8009fce:	a376      	add	r3, pc, #472	; (adr r3, 800a1a8 <main+0x1320>)
 8009fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd4:	f7f6 f958 	bl	8000288 <__aeabi_dsub>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	4618      	mov	r0, r3
 8009fde:	4621      	mov	r1, r4
 8009fe0:	a373      	add	r3, pc, #460	; (adr r3, 800a1b0 <main+0x1328>)
 8009fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fe6:	f7f6 fb07 	bl	80005f8 <__aeabi_dmul>
 8009fea:	4603      	mov	r3, r0
 8009fec:	460c      	mov	r4, r1
 8009fee:	4618      	mov	r0, r3
 8009ff0:	4621      	mov	r1, r4
 8009ff2:	f7f6 fdf9 	bl	8000be8 <__aeabi_d2f>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
							sprintf((char*)buf_add, " S0:%5.1fN S1:%4dN", STRAIN0, val_STRAIN1); strcat(buf, buf_add);
 8009ffc:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 800a000:	f7f6 faa2 	bl	8000548 <__aeabi_f2d>
 800a004:	460a      	mov	r2, r1
 800a006:	4601      	mov	r1, r0
 800a008:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800a00c:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	4613      	mov	r3, r2
 800a014:	460a      	mov	r2, r1
 800a016:	496e      	ldr	r1, [pc, #440]	; (800a1d0 <main+0x1348>)
 800a018:	f004 f8d4 	bl	800e1c4 <siprintf>
 800a01c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a020:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a024:	4611      	mov	r1, r2
 800a026:	4618      	mov	r0, r3
 800a028:	f004 f8ec 	bl	800e204 <strcat>
 800a02c:	e010      	b.n	800a050 <main+0x11c8>
						}
						else{
							sprintf((char*)buf_add, " S0:%4d S1:%4d", val_STRAIN0, val_STRAIN1); strcat(buf, buf_add);
 800a02e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800a032:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 800a036:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 800a03a:	4966      	ldr	r1, [pc, #408]	; (800a1d4 <main+0x134c>)
 800a03c:	f004 f8c2 	bl	800e1c4 <siprintf>
 800a040:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a044:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a048:	4611      	mov	r1, r2
 800a04a:	4618      	mov	r0, r3
 800a04c:	f004 f8da 	bl	800e204 <strcat>
						}

						sprintf((char*)buf_add, " TM:%4d TC:%4d V:%4d", val_TEMP, val_M0_TEMP, val_VBUS); strcat(buf, buf_add);
 800a050:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800a054:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 800a058:	9300      	str	r3, [sp, #0]
 800a05a:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800a05e:	f8d7 22b8 	ldr.w	r2, [r7, #696]	; 0x2b8
 800a062:	495d      	ldr	r1, [pc, #372]	; (800a1d8 <main+0x1350>)
 800a064:	f004 f8ae 	bl	800e1c4 <siprintf>
 800a068:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a06c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a070:	4611      	mov	r1, r2
 800a072:	4618      	mov	r0, r3
 800a074:	f004 f8c6 	bl	800e204 <strcat>

						//sprintf((char*)buf_add, " ADC: %4d %4d %4d %4d %4d", adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4]); strcat(buf, buf_add);

						if (val_TEMP > 1900){
 800a078:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 800a07c:	f240 726c 	movw	r2, #1900	; 0x76c
 800a080:	4293      	cmp	r3, r2
 800a082:	d90f      	bls.n	800a0a4 <main+0x121c>
							sprintf((char*)buf_add, "* >50C on ESC"); strcat(buf, buf_add);
 800a084:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a088:	4a54      	ldr	r2, [pc, #336]	; (800a1dc <main+0x1354>)
 800a08a:	461c      	mov	r4, r3
 800a08c:	4613      	mov	r3, r2
 800a08e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a090:	c407      	stmia	r4!, {r0, r1, r2}
 800a092:	8023      	strh	r3, [r4, #0]
 800a094:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a098:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a09c:	4611      	mov	r1, r2
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f004 f8b0 	bl	800e204 <strcat>
						}

						if (val_M0_TEMP > 1900){
 800a0a4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 800a0a8:	f240 726c 	movw	r2, #1900	; 0x76c
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d90f      	bls.n	800a0d0 <main+0x1248>
							sprintf((char*)buf_add, "* >50C on MOTOR"); strcat(buf, buf_add);
 800a0b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a0b4:	4a4a      	ldr	r2, [pc, #296]	; (800a1e0 <main+0x1358>)
 800a0b6:	461c      	mov	r4, r3
 800a0b8:	4613      	mov	r3, r2
 800a0ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a0bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800a0c0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a0c4:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f004 f89a 	bl	800e204 <strcat>
						}

						if (val_STRAIN0 < 2170){
 800a0d0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 800a0d4:	f640 0279 	movw	r2, #2169	; 0x879
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d80f      	bhi.n	800a0fc <main+0x1274>
							sprintf((char*)buf_add, "* -100N force"); strcat(buf, buf_add);
 800a0dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a0e0:	4a40      	ldr	r2, [pc, #256]	; (800a1e4 <main+0x135c>)
 800a0e2:	461c      	mov	r4, r3
 800a0e4:	4613      	mov	r3, r2
 800a0e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a0e8:	c407      	stmia	r4!, {r0, r1, r2}
 800a0ea:	8023      	strh	r3, [r4, #0]
 800a0ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a0f0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	f004 f884 	bl	800e204 <strcat>
						}

						sprintf((char*)buf_add, " p:%5d m:%5d", Enc_Val_total_lim_p, Enc_Val_total_lim_m); strcat(buf, buf_add);
 800a0fc:	4b3a      	ldr	r3, [pc, #232]	; (800a1e8 <main+0x1360>)
 800a0fe:	681a      	ldr	r2, [r3, #0]
 800a100:	4b3a      	ldr	r3, [pc, #232]	; (800a1ec <main+0x1364>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800a108:	4939      	ldr	r1, [pc, #228]	; (800a1f0 <main+0x1368>)
 800a10a:	f004 f85b 	bl	800e1c4 <siprintf>
 800a10e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a112:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a116:	4611      	mov	r1, r2
 800a118:	4618      	mov	r0, r3
 800a11a:	f004 f873 	bl	800e204 <strcat>

						sprintf((char*)buf_add, " \r\n"); strcat(buf, buf_add);
 800a11e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a122:	4a34      	ldr	r2, [pc, #208]	; (800a1f4 <main+0x136c>)
 800a124:	601a      	str	r2, [r3, #0]
 800a126:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800a12a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a12e:	4611      	mov	r1, r2
 800a130:	4618      	mov	r0, r3
 800a132:	f004 f867 	bl	800e204 <strcat>
			//			buf[50] = '|';
			//			buf[100 + max(-50, min(50, (int)av_velocity))] = 'v';



						if (buf_msgs[0] != '\0'){
 800a136:	4b30      	ldr	r3, [pc, #192]	; (800a1f8 <main+0x1370>)
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d008      	beq.n	800a150 <main+0x12c8>
							strcat(buf, buf_msgs);
 800a13e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a142:	492d      	ldr	r1, [pc, #180]	; (800a1f8 <main+0x1370>)
 800a144:	4618      	mov	r0, r3
 800a146:	f004 f85d 	bl	800e204 <strcat>
							buf_msgs[0] = '\0';
 800a14a:	4b2b      	ldr	r3, [pc, #172]	; (800a1f8 <main+0x1370>)
 800a14c:	2200      	movs	r2, #0
 800a14e:	701a      	strb	r2, [r3, #0]
						}



						//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
						huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800a150:	4b2a      	ldr	r3, [pc, #168]	; (800a1fc <main+0x1374>)
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	695a      	ldr	r2, [r3, #20]
 800a156:	4b29      	ldr	r3, [pc, #164]	; (800a1fc <main+0x1374>)
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a15e:	615a      	str	r2, [r3, #20]
						HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800a160:	f507 7480 	add.w	r4, r7, #256	; 0x100
 800a164:	4b25      	ldr	r3, [pc, #148]	; (800a1fc <main+0x1374>)
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	3304      	adds	r3, #4
 800a16a:	461d      	mov	r5, r3
 800a16c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800a170:	4618      	mov	r0, r3
 800a172:	f7f6 f82d 	bl	80001d0 <strlen>
 800a176:	4603      	mov	r3, r0
 800a178:	462a      	mov	r2, r5
 800a17a:	4621      	mov	r1, r4
 800a17c:	4820      	ldr	r0, [pc, #128]	; (800a200 <main+0x1378>)
 800a17e:	f7f8 ff7b 	bl	8003078 <HAL_DMA_Start_IT>
				}
			ch='.';
 800a182:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a186:	222e      	movs	r2, #46	; 0x2e
 800a188:	701a      	strb	r2, [r3, #0]

			i_slow++;
 800a18a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800a18e:	3301      	adds	r3, #1
 800a190:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
	  }

	  i_fast++;
 800a194:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 800a198:	3301      	adds	r3, #1
 800a19a:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
	  HAL_Delay(1);
 800a19e:	2001      	movs	r0, #1
 800a1a0:	f7f6 ff64 	bl	800106c <HAL_Delay>
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800a1a4:	f7ff b9b0 	b.w	8009508 <main+0x680>
 800a1a8:	00000000 	.word	0x00000000
 800a1ac:	40a17600 	.word	0x40a17600
 800a1b0:	872b020c 	.word	0x872b020c
 800a1b4:	3ffad916 	.word	0x3ffad916
 800a1b8:	08010d9c 	.word	0x08010d9c
 800a1bc:	3ff80000 	.word	0x3ff80000
 800a1c0:	08010dbc 	.word	0x08010dbc
 800a1c4:	08010dc8 	.word	0x08010dc8
 800a1c8:	08010de0 	.word	0x08010de0
 800a1cc:	20000233 	.word	0x20000233
 800a1d0:	08010df4 	.word	0x08010df4
 800a1d4:	08010e08 	.word	0x08010e08
 800a1d8:	08010e18 	.word	0x08010e18
 800a1dc:	08010e30 	.word	0x08010e30
 800a1e0:	08010e40 	.word	0x08010e40
 800a1e4:	08010e50 	.word	0x08010e50
 800a1e8:	2000027c 	.word	0x2000027c
 800a1ec:	20000278 	.word	0x20000278
 800a1f0:	08010e60 	.word	0x08010e60
 800a1f4:	000a0d20 	.word	0x000a0d20
 800a1f8:	20001014 	.word	0x20001014
 800a1fc:	200006cc 	.word	0x200006cc
 800a200:	20000c70 	.word	0x20000c70
 800a204:	00000000 	.word	0x00000000
 800a208:	409f4800 	.word	0x409f4800
 800a20c:	e978d4fe 	.word	0xe978d4fe
 800a210:	3fc83126 	.word	0x3fc83126

0800a214 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800a214:	b590      	push	{r4, r7, lr}
 800a216:	b083      	sub	sp, #12
 800a218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800a21a:	485e      	ldr	r0, [pc, #376]	; (800a394 <CAN1_RX0_IRQHandler+0x180>)
 800a21c:	f7f8 fb39 	bl	8002892 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, &rx_msg);
 800a220:	4b5d      	ldr	r3, [pc, #372]	; (800a398 <CAN1_RX0_IRQHandler+0x184>)
 800a222:	4a5e      	ldr	r2, [pc, #376]	; (800a39c <CAN1_RX0_IRQHandler+0x188>)
 800a224:	2100      	movs	r1, #0
 800a226:	485b      	ldr	r0, [pc, #364]	; (800a394 <CAN1_RX0_IRQHandler+0x180>)
 800a228:	f7f8 f9fb 	bl	8002622 <HAL_CAN_GetRxMessage>


  //decode RX can message
  rx_character = (rx_msg[0]) ;
 800a22c:	4b5a      	ldr	r3, [pc, #360]	; (800a398 <CAN1_RX0_IRQHandler+0x184>)
 800a22e:	781a      	ldrb	r2, [r3, #0]
 800a230:	4b5b      	ldr	r3, [pc, #364]	; (800a3a0 <CAN1_RX0_IRQHandler+0x18c>)
 800a232:	701a      	strb	r2, [r3, #0]
  rx_control_0 = (rx_msg[1]) ;
 800a234:	4b58      	ldr	r3, [pc, #352]	; (800a398 <CAN1_RX0_IRQHandler+0x184>)
 800a236:	785a      	ldrb	r2, [r3, #1]
 800a238:	4b5a      	ldr	r3, [pc, #360]	; (800a3a4 <CAN1_RX0_IRQHandler+0x190>)
 800a23a:	701a      	strb	r2, [r3, #0]
	rx_control_1 = (uint16_t)rx_msg[2] << 4 | rx_msg[3] >> 4;
 800a23c:	4b56      	ldr	r3, [pc, #344]	; (800a398 <CAN1_RX0_IRQHandler+0x184>)
 800a23e:	789b      	ldrb	r3, [r3, #2]
 800a240:	011b      	lsls	r3, r3, #4
 800a242:	b21a      	sxth	r2, r3
 800a244:	4b54      	ldr	r3, [pc, #336]	; (800a398 <CAN1_RX0_IRQHandler+0x184>)
 800a246:	78db      	ldrb	r3, [r3, #3]
 800a248:	091b      	lsrs	r3, r3, #4
 800a24a:	b2db      	uxtb	r3, r3
 800a24c:	b21b      	sxth	r3, r3
 800a24e:	4313      	orrs	r3, r2
 800a250:	b21b      	sxth	r3, r3
 800a252:	b29a      	uxth	r2, r3
 800a254:	4b54      	ldr	r3, [pc, #336]	; (800a3a8 <CAN1_RX0_IRQHandler+0x194>)
 800a256:	801a      	strh	r2, [r3, #0]
	rx_mode_0 = (rx_msg[3] >> 3) & 1;
 800a258:	4b4f      	ldr	r3, [pc, #316]	; (800a398 <CAN1_RX0_IRQHandler+0x184>)
 800a25a:	78db      	ldrb	r3, [r3, #3]
 800a25c:	08db      	lsrs	r3, r3, #3
 800a25e:	b2db      	uxtb	r3, r3
 800a260:	f003 0301 	and.w	r3, r3, #1
 800a264:	b2da      	uxtb	r2, r3
 800a266:	4b51      	ldr	r3, [pc, #324]	; (800a3ac <CAN1_RX0_IRQHandler+0x198>)
 800a268:	701a      	strb	r2, [r3, #0]
	rx_mode_1 = (rx_msg[3] >> 2) & 1;
 800a26a:	4b4b      	ldr	r3, [pc, #300]	; (800a398 <CAN1_RX0_IRQHandler+0x184>)
 800a26c:	78db      	ldrb	r3, [r3, #3]
 800a26e:	089b      	lsrs	r3, r3, #2
 800a270:	b2db      	uxtb	r3, r3
 800a272:	f003 0301 	and.w	r3, r3, #1
 800a276:	b2da      	uxtb	r2, r3
 800a278:	4b4d      	ldr	r3, [pc, #308]	; (800a3b0 <CAN1_RX0_IRQHandler+0x19c>)
 800a27a:	701a      	strb	r2, [r3, #0]
	rx_intent = (rx_msg[3]) & 3;
 800a27c:	4b46      	ldr	r3, [pc, #280]	; (800a398 <CAN1_RX0_IRQHandler+0x184>)
 800a27e:	78db      	ldrb	r3, [r3, #3]
 800a280:	f003 0303 	and.w	r3, r3, #3
 800a284:	b2da      	uxtb	r2, r3
 800a286:	4b4b      	ldr	r3, [pc, #300]	; (800a3b4 <CAN1_RX0_IRQHandler+0x1a0>)
 800a288:	701a      	strb	r2, [r3, #0]
	//uint16_t rc2 = (uint16_t)(rx_msg[2] & ((1<<5)-1)) << 6 | rx_msg[3] >> 2;
	if (rx_character != '.'){
 800a28a:	4b45      	ldr	r3, [pc, #276]	; (800a3a0 <CAN1_RX0_IRQHandler+0x18c>)
 800a28c:	781b      	ldrb	r3, [r3, #0]
 800a28e:	2b2e      	cmp	r3, #46	; 0x2e
 800a290:	d003      	beq.n	800a29a <CAN1_RX0_IRQHandler+0x86>
		rx_character_buffered = rx_character;
 800a292:	4b43      	ldr	r3, [pc, #268]	; (800a3a0 <CAN1_RX0_IRQHandler+0x18c>)
 800a294:	781a      	ldrb	r2, [r3, #0]
 800a296:	4b48      	ldr	r3, [pc, #288]	; (800a3b8 <CAN1_RX0_IRQHandler+0x1a4>)
 800a298:	701a      	strb	r2, [r3, #0]
		//rx_character_armed = 1;
	}
	if (rx_mode_0 == 0){
 800a29a:	4b44      	ldr	r3, [pc, #272]	; (800a3ac <CAN1_RX0_IRQHandler+0x198>)
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d124      	bne.n	800a2ec <CAN1_RX0_IRQHandler+0xd8>
		amp = (((float)rx_control_1)-2048) / 2048.0 / 2.5;
 800a2a2:	4b41      	ldr	r3, [pc, #260]	; (800a3a8 <CAN1_RX0_IRQHandler+0x194>)
 800a2a4:	881b      	ldrh	r3, [r3, #0]
 800a2a6:	ee07 3a90 	vmov	s15, r3
 800a2aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a2ae:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800a3bc <CAN1_RX0_IRQHandler+0x1a8>
 800a2b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a2b6:	ee17 0a90 	vmov	r0, s15
 800a2ba:	f7f6 f945 	bl	8000548 <__aeabi_f2d>
 800a2be:	f04f 0200 	mov.w	r2, #0
 800a2c2:	4b3f      	ldr	r3, [pc, #252]	; (800a3c0 <CAN1_RX0_IRQHandler+0x1ac>)
 800a2c4:	f7f6 fac2 	bl	800084c <__aeabi_ddiv>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	f04f 0200 	mov.w	r2, #0
 800a2d4:	4b3b      	ldr	r3, [pc, #236]	; (800a3c4 <CAN1_RX0_IRQHandler+0x1b0>)
 800a2d6:	f7f6 fab9 	bl	800084c <__aeabi_ddiv>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	460c      	mov	r4, r1
 800a2de:	4618      	mov	r0, r3
 800a2e0:	4621      	mov	r1, r4
 800a2e2:	f7f6 fc81 	bl	8000be8 <__aeabi_d2f>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	4b37      	ldr	r3, [pc, #220]	; (800a3c8 <CAN1_RX0_IRQHandler+0x1b4>)
 800a2ea:	601a      	str	r2, [r3, #0]
//			direction = -1;
//		}
	}

	//encode TX can message
		uint8_t v8= 100;
 800a2ec:	2364      	movs	r3, #100	; 0x64
 800a2ee:	71fb      	strb	r3, [r7, #7]
		uint16_t tx_pos = (uint16_t)((rotation_counter * ENC_STEPS + EncVal) / 16 + 2048);
 800a2f0:	4b36      	ldr	r3, [pc, #216]	; (800a3cc <CAN1_RX0_IRQHandler+0x1b8>)
 800a2f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a2fc:	fb03 f302 	mul.w	r3, r3, r2
 800a300:	4a33      	ldr	r2, [pc, #204]	; (800a3d0 <CAN1_RX0_IRQHandler+0x1bc>)
 800a302:	f9b2 2000 	ldrsh.w	r2, [r2]
 800a306:	4413      	add	r3, r2
 800a308:	2b00      	cmp	r3, #0
 800a30a:	da00      	bge.n	800a30e <CAN1_RX0_IRQHandler+0xfa>
 800a30c:	330f      	adds	r3, #15
 800a30e:	111b      	asrs	r3, r3, #4
 800a310:	b29b      	uxth	r3, r3
 800a312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a316:	80bb      	strh	r3, [r7, #4]
		uint16_t tx_av_velocity = (uint16_t) (av_velocity*10 + 2048);
 800a318:	4b2e      	ldr	r3, [pc, #184]	; (800a3d4 <CAN1_RX0_IRQHandler+0x1c0>)
 800a31a:	edd3 7a00 	vldr	s15, [r3]
 800a31e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800a322:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a326:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800a3bc <CAN1_RX0_IRQHandler+0x1a8>
 800a32a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a32e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a332:	ee17 3a90 	vmov	r3, s15
 800a336:	807b      	strh	r3, [r7, #2]

		tx_msg[0] = v8; //current
 800a338:	4a27      	ldr	r2, [pc, #156]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a33a:	79fb      	ldrb	r3, [r7, #7]
 800a33c:	7013      	strb	r3, [r2, #0]
		tx_msg[1] = v8; //Tmotor
 800a33e:	4a26      	ldr	r2, [pc, #152]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a340:	79fb      	ldrb	r3, [r7, #7]
 800a342:	7053      	strb	r3, [r2, #1]
		tx_msg[2] = v8; //Tboard
 800a344:	4a24      	ldr	r2, [pc, #144]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a346:	79fb      	ldrb	r3, [r7, #7]
 800a348:	7093      	strb	r3, [r2, #2]
		tx_msg[3] = (uint8_t)(tx_pos >> 4);
 800a34a:	88bb      	ldrh	r3, [r7, #4]
 800a34c:	091b      	lsrs	r3, r3, #4
 800a34e:	b29b      	uxth	r3, r3
 800a350:	b2da      	uxtb	r2, r3
 800a352:	4b21      	ldr	r3, [pc, #132]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a354:	70da      	strb	r2, [r3, #3]
		tx_msg[4] = (uint8_t)(tx_pos << 4);
 800a356:	88bb      	ldrh	r3, [r7, #4]
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	b2da      	uxtb	r2, r3
 800a35e:	4b1e      	ldr	r3, [pc, #120]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a360:	711a      	strb	r2, [r3, #4]
		tx_msg[4] = tx_msg[4] | (uint8_t)(tx_av_velocity >> 8);
 800a362:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a364:	791a      	ldrb	r2, [r3, #4]
 800a366:	887b      	ldrh	r3, [r7, #2]
 800a368:	0a1b      	lsrs	r3, r3, #8
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	4313      	orrs	r3, r2
 800a370:	b2da      	uxtb	r2, r3
 800a372:	4b19      	ldr	r3, [pc, #100]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a374:	711a      	strb	r2, [r3, #4]
		tx_msg[5] = (uint8_t)(tx_av_velocity);
 800a376:	887b      	ldrh	r3, [r7, #2]
 800a378:	b2da      	uxtb	r2, r3
 800a37a:	4b17      	ldr	r3, [pc, #92]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a37c:	715a      	strb	r2, [r3, #5]
		//HAL_CAN_AbortTxRequest(&hcan1, &TxMailbox);



		//if (can_pending_before == 0){
		HAL_CAN_AddTxMessage(&hcan1, &pHeader, &tx_msg, &TxMailbox);//somehow there is  a 4 second delay todo
 800a37e:	4b17      	ldr	r3, [pc, #92]	; (800a3dc <CAN1_RX0_IRQHandler+0x1c8>)
 800a380:	4a15      	ldr	r2, [pc, #84]	; (800a3d8 <CAN1_RX0_IRQHandler+0x1c4>)
 800a382:	4917      	ldr	r1, [pc, #92]	; (800a3e0 <CAN1_RX0_IRQHandler+0x1cc>)
 800a384:	4803      	ldr	r0, [pc, #12]	; (800a394 <CAN1_RX0_IRQHandler+0x180>)
 800a386:	f7f8 f871 	bl	800246c <HAL_CAN_AddTxMessage>




  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800a38a:	bf00      	nop
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd90      	pop	{r4, r7, pc}
 800a392:	bf00      	nop
 800a394:	20001170 	.word	0x20001170
 800a398:	20000d54 	.word	0x20000d54
 800a39c:	200010f4 	.word	0x200010f4
 800a3a0:	20000006 	.word	0x20000006
 800a3a4:	2000022c 	.word	0x2000022c
 800a3a8:	2000022e 	.word	0x2000022e
 800a3ac:	20000230 	.word	0x20000230
 800a3b0:	20000231 	.word	0x20000231
 800a3b4:	20000232 	.word	0x20000232
 800a3b8:	20000005 	.word	0x20000005
 800a3bc:	45000000 	.word	0x45000000
 800a3c0:	40a00000 	.word	0x40a00000
 800a3c4:	40040000 	.word	0x40040000
 800a3c8:	20000010 	.word	0x20000010
 800a3cc:	2000023c 	.word	0x2000023c
 800a3d0:	20000e64 	.word	0x20000e64
 800a3d4:	2000024c 	.word	0x2000024c
 800a3d8:	20000c08 	.word	0x20000c08
 800a3dc:	20001010 	.word	0x20001010
 800a3e0:	200011d8 	.word	0x200011d8

0800a3e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b098      	sub	sp, #96	; 0x60
 800a3e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a3ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a3ee:	2230      	movs	r2, #48	; 0x30
 800a3f0:	2100      	movs	r1, #0
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f003 fa82 	bl	800d8fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a3f8:	f107 031c 	add.w	r3, r7, #28
 800a3fc:	2200      	movs	r2, #0
 800a3fe:	601a      	str	r2, [r3, #0]
 800a400:	605a      	str	r2, [r3, #4]
 800a402:	609a      	str	r2, [r3, #8]
 800a404:	60da      	str	r2, [r3, #12]
 800a406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a408:	f107 030c 	add.w	r3, r7, #12
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
 800a410:	605a      	str	r2, [r3, #4]
 800a412:	609a      	str	r2, [r3, #8]
 800a414:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800a416:	2300      	movs	r3, #0
 800a418:	60bb      	str	r3, [r7, #8]
 800a41a:	4b32      	ldr	r3, [pc, #200]	; (800a4e4 <SystemClock_Config+0x100>)
 800a41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a41e:	4a31      	ldr	r2, [pc, #196]	; (800a4e4 <SystemClock_Config+0x100>)
 800a420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a424:	6413      	str	r3, [r2, #64]	; 0x40
 800a426:	4b2f      	ldr	r3, [pc, #188]	; (800a4e4 <SystemClock_Config+0x100>)
 800a428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a42e:	60bb      	str	r3, [r7, #8]
 800a430:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800a432:	2300      	movs	r3, #0
 800a434:	607b      	str	r3, [r7, #4]
 800a436:	4b2c      	ldr	r3, [pc, #176]	; (800a4e8 <SystemClock_Config+0x104>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a2b      	ldr	r2, [pc, #172]	; (800a4e8 <SystemClock_Config+0x104>)
 800a43c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a440:	6013      	str	r3, [r2, #0]
 800a442:	4b29      	ldr	r3, [pc, #164]	; (800a4e8 <SystemClock_Config+0x104>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a44a:	607b      	str	r3, [r7, #4]
 800a44c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800a44e:	2309      	movs	r3, #9
 800a450:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800a452:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a456:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800a458:	2301      	movs	r3, #1
 800a45a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a45c:	2302      	movs	r3, #2
 800a45e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a460:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a464:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800a466:	2304      	movs	r3, #4
 800a468:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800a46a:	23a8      	movs	r3, #168	; 0xa8
 800a46c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800a46e:	2302      	movs	r3, #2
 800a470:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a472:	2307      	movs	r3, #7
 800a474:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a476:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a47a:	4618      	mov	r0, r3
 800a47c:	f7fa fbbc 	bl	8004bf8 <HAL_RCC_OscConfig>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a486:	f002 fa91 	bl	800c9ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a48a:	230f      	movs	r3, #15
 800a48c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a48e:	2302      	movs	r3, #2
 800a490:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a492:	2300      	movs	r3, #0
 800a494:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a496:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a49c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a4a0:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a4a2:	f107 031c 	add.w	r3, r7, #28
 800a4a6:	2105      	movs	r1, #5
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f7fa fe15 	bl	80050d8 <HAL_RCC_ClockConfig>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d001      	beq.n	800a4b8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800a4b4:	f002 fa7a 	bl	800c9ac <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a4b8:	2302      	movs	r3, #2
 800a4ba:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a4bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4c0:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a4c2:	f107 030c 	add.w	r3, r7, #12
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fb f804 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d001      	beq.n	800a4d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a4d2:	f002 fa6b 	bl	800c9ac <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800a4d6:	f7fa fee5 	bl	80052a4 <HAL_RCC_EnableCSS>
}
 800a4da:	bf00      	nop
 800a4dc:	3760      	adds	r7, #96	; 0x60
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	40023800 	.word	0x40023800
 800a4e8:	40007000 	.word	0x40007000

0800a4ec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08c      	sub	sp, #48	; 0x30
 800a4f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a4f2:	f107 0320 	add.w	r3, r7, #32
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	601a      	str	r2, [r3, #0]
 800a4fa:	605a      	str	r2, [r3, #4]
 800a4fc:	609a      	str	r2, [r3, #8]
 800a4fe:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a500:	463b      	mov	r3, r7
 800a502:	2220      	movs	r2, #32
 800a504:	2100      	movs	r1, #0
 800a506:	4618      	mov	r0, r3
 800a508:	f003 f9f8 	bl	800d8fc <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a50c:	4b63      	ldr	r3, [pc, #396]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a50e:	4a64      	ldr	r2, [pc, #400]	; (800a6a0 <MX_ADC1_Init+0x1b4>)
 800a510:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a512:	4b62      	ldr	r3, [pc, #392]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a514:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a518:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a51a:	4b60      	ldr	r3, [pc, #384]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a51c:	2200      	movs	r2, #0
 800a51e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800a520:	4b5e      	ldr	r3, [pc, #376]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a522:	2201      	movs	r2, #1
 800a524:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800a526:	4b5d      	ldr	r3, [pc, #372]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a528:	2201      	movs	r2, #1
 800a52a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a52c:	4b5b      	ldr	r3, [pc, #364]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a534:	4b59      	ldr	r3, [pc, #356]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a536:	2200      	movs	r2, #0
 800a538:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a53a:	4b58      	ldr	r3, [pc, #352]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a53c:	4a59      	ldr	r2, [pc, #356]	; (800a6a4 <MX_ADC1_Init+0x1b8>)
 800a53e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a540:	4b56      	ldr	r3, [pc, #344]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a542:	2200      	movs	r2, #0
 800a544:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800a546:	4b55      	ldr	r3, [pc, #340]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a548:	2205      	movs	r2, #5
 800a54a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a54c:	4b53      	ldr	r3, [pc, #332]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a54e:	2201      	movs	r2, #1
 800a550:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a554:	4b51      	ldr	r3, [pc, #324]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a556:	2201      	movs	r2, #1
 800a558:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a55a:	4850      	ldr	r0, [pc, #320]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a55c:	f7f6 fda8 	bl	80010b0 <HAL_ADC_Init>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <MX_ADC1_Init+0x7e>
  {
    Error_Handler();
 800a566:	f002 fa21 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a56a:	2301      	movs	r3, #1
 800a56c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a56e:	2301      	movs	r3, #1
 800a570:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a572:	2301      	movs	r3, #1
 800a574:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a576:	f107 0320 	add.w	r3, r7, #32
 800a57a:	4619      	mov	r1, r3
 800a57c:	4847      	ldr	r0, [pc, #284]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a57e:	f7f7 f821 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 800a588:	f002 fa10 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800a58c:	230b      	movs	r3, #11
 800a58e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a590:	2302      	movs	r3, #2
 800a592:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a594:	f107 0320 	add.w	r3, r7, #32
 800a598:	4619      	mov	r1, r3
 800a59a:	4840      	ldr	r0, [pc, #256]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a59c:	f7f7 f812 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d001      	beq.n	800a5aa <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800a5a6:	f002 fa01 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800a5aa:	230e      	movs	r3, #14
 800a5ac:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a5ae:	2303      	movs	r3, #3
 800a5b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a5b2:	f107 0320 	add.w	r3, r7, #32
 800a5b6:	4619      	mov	r1, r3
 800a5b8:	4838      	ldr	r0, [pc, #224]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a5ba:	f7f7 f803 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d001      	beq.n	800a5c8 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 800a5c4:	f002 f9f2 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800a5c8:	2305      	movs	r3, #5
 800a5ca:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a5cc:	2304      	movs	r3, #4
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a5d0:	f107 0320 	add.w	r3, r7, #32
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4831      	ldr	r0, [pc, #196]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a5d8:	f7f6 fff4 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d001      	beq.n	800a5e6 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 800a5e2:	f002 f9e3 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800a5e6:	2310      	movs	r3, #16
 800a5e8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800a5ea:	2305      	movs	r3, #5
 800a5ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a5ee:	f107 0320 	add.w	r3, r7, #32
 800a5f2:	4619      	mov	r1, r3
 800a5f4:	4829      	ldr	r0, [pc, #164]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a5f6:	f7f6 ffe5 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800a600:	f002 f9d4 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800a604:	2301      	movs	r3, #1
 800a606:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a608:	2301      	movs	r3, #1
 800a60a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a60c:	2304      	movs	r3, #4
 800a60e:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a610:	2300      	movs	r3, #0
 800a612:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800a614:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a618:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800a61a:	2300      	movs	r3, #0
 800a61c:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a61e:	2300      	movs	r3, #0
 800a620:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a622:	2300      	movs	r3, #0
 800a624:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a62a:	463b      	mov	r3, r7
 800a62c:	4619      	mov	r1, r3
 800a62e:	481b      	ldr	r0, [pc, #108]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a630:	f7f7 fb68 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a634:	4603      	mov	r3, r0
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 800a63a:	f002 f9b7 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800a63e:	230b      	movs	r3, #11
 800a640:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a642:	2302      	movs	r3, #2
 800a644:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a646:	463b      	mov	r3, r7
 800a648:	4619      	mov	r1, r3
 800a64a:	4814      	ldr	r0, [pc, #80]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a64c:	f7f7 fb5a 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a650:	4603      	mov	r3, r0
 800a652:	2b00      	cmp	r3, #0
 800a654:	d001      	beq.n	800a65a <MX_ADC1_Init+0x16e>
  {
    Error_Handler();
 800a656:	f002 f9a9 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800a65a:	230e      	movs	r3, #14
 800a65c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a65e:	2303      	movs	r3, #3
 800a660:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a662:	463b      	mov	r3, r7
 800a664:	4619      	mov	r1, r3
 800a666:	480d      	ldr	r0, [pc, #52]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a668:	f7f7 fb4c 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 800a672:	f002 f99b 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800a676:	2305      	movs	r3, #5
 800a678:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a67a:	2304      	movs	r3, #4
 800a67c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a67e:	463b      	mov	r3, r7
 800a680:	4619      	mov	r1, r3
 800a682:	4806      	ldr	r0, [pc, #24]	; (800a69c <MX_ADC1_Init+0x1b0>)
 800a684:	f7f7 fb3e 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a688:	4603      	mov	r3, r0
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d001      	beq.n	800a692 <MX_ADC1_Init+0x1a6>
  {
    Error_Handler();
 800a68e:	f002 f98d 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a692:	bf00      	nop
 800a694:	3730      	adds	r7, #48	; 0x30
 800a696:	46bd      	mov	sp, r7
 800a698:	bd80      	pop	{r7, pc}
 800a69a:	bf00      	nop
 800a69c:	20000d94 	.word	0x20000d94
 800a6a0:	40012000 	.word	0x40012000
 800a6a4:	0f000001 	.word	0x0f000001

0800a6a8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08c      	sub	sp, #48	; 0x30
 800a6ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a6ae:	f107 0320 	add.w	r3, r7, #32
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	601a      	str	r2, [r3, #0]
 800a6b6:	605a      	str	r2, [r3, #4]
 800a6b8:	609a      	str	r2, [r3, #8]
 800a6ba:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a6bc:	463b      	mov	r3, r7
 800a6be:	2220      	movs	r2, #32
 800a6c0:	2100      	movs	r1, #0
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f003 f91a 	bl	800d8fc <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800a6c8:	4b63      	ldr	r3, [pc, #396]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6ca:	4a64      	ldr	r2, [pc, #400]	; (800a85c <MX_ADC2_Init+0x1b4>)
 800a6cc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a6ce:	4b62      	ldr	r3, [pc, #392]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6d0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a6d4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a6d6:	4b60      	ldr	r3, [pc, #384]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6d8:	2200      	movs	r2, #0
 800a6da:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800a6dc:	4b5e      	ldr	r3, [pc, #376]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6de:	2201      	movs	r2, #1
 800a6e0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800a6e2:	4b5d      	ldr	r3, [pc, #372]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a6e8:	4b5b      	ldr	r3, [pc, #364]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a6f0:	4b59      	ldr	r3, [pc, #356]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a6f6:	4b58      	ldr	r3, [pc, #352]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6f8:	4a59      	ldr	r2, [pc, #356]	; (800a860 <MX_ADC2_Init+0x1b8>)
 800a6fa:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a6fc:	4b56      	ldr	r3, [pc, #344]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 5;
 800a702:	4b55      	ldr	r3, [pc, #340]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a704:	2205      	movs	r2, #5
 800a706:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800a708:	4b53      	ldr	r3, [pc, #332]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a710:	4b51      	ldr	r3, [pc, #324]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a712:	2201      	movs	r2, #1
 800a714:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a716:	4850      	ldr	r0, [pc, #320]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a718:	f7f6 fcca 	bl	80010b0 <HAL_ADC_Init>
 800a71c:	4603      	mov	r3, r0
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d001      	beq.n	800a726 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 800a722:	f002 f943 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a726:	2302      	movs	r3, #2
 800a728:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a72a:	2301      	movs	r3, #1
 800a72c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a72e:	2301      	movs	r3, #1
 800a730:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a732:	f107 0320 	add.w	r3, r7, #32
 800a736:	4619      	mov	r1, r3
 800a738:	4847      	ldr	r0, [pc, #284]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a73a:	f7f6 ff43 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a73e:	4603      	mov	r3, r0
 800a740:	2b00      	cmp	r3, #0
 800a742:	d001      	beq.n	800a748 <MX_ADC2_Init+0xa0>
  {
    Error_Handler();
 800a744:	f002 f932 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800a748:	230c      	movs	r3, #12
 800a74a:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a74c:	2302      	movs	r3, #2
 800a74e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a750:	f107 0320 	add.w	r3, r7, #32
 800a754:	4619      	mov	r1, r3
 800a756:	4840      	ldr	r0, [pc, #256]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a758:	f7f6 ff34 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a75c:	4603      	mov	r3, r0
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d001      	beq.n	800a766 <MX_ADC2_Init+0xbe>
  {
    Error_Handler();
 800a762:	f002 f923 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a766:	230f      	movs	r3, #15
 800a768:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a76a:	2303      	movs	r3, #3
 800a76c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a76e:	f107 0320 	add.w	r3, r7, #32
 800a772:	4619      	mov	r1, r3
 800a774:	4838      	ldr	r0, [pc, #224]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a776:	f7f6 ff25 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <MX_ADC2_Init+0xdc>
  {
    Error_Handler();
 800a780:	f002 f914 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800a784:	2304      	movs	r3, #4
 800a786:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a788:	2304      	movs	r3, #4
 800a78a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a78c:	f107 0320 	add.w	r3, r7, #32
 800a790:	4619      	mov	r1, r3
 800a792:	4831      	ldr	r0, [pc, #196]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a794:	f7f6 ff16 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a798:	4603      	mov	r3, r0
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d001      	beq.n	800a7a2 <MX_ADC2_Init+0xfa>
  {
    Error_Handler();
 800a79e:	f002 f905 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800a7a2:	2308      	movs	r3, #8
 800a7a4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800a7a6:	2305      	movs	r3, #5
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a7aa:	f107 0320 	add.w	r3, r7, #32
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4829      	ldr	r0, [pc, #164]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a7b2:	f7f6 ff07 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <MX_ADC2_Init+0x118>
  {
    Error_Handler();
 800a7bc:	f002 f8f6 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800a7c0:	2302      	movs	r3, #2
 800a7c2:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a7c4:	2301      	movs	r3, #1
 800a7c6:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a7c8:	2304      	movs	r3, #4
 800a7ca:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800a7d0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a7d4:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a7e6:	463b      	mov	r3, r7
 800a7e8:	4619      	mov	r1, r3
 800a7ea:	481b      	ldr	r0, [pc, #108]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a7ec:	f7f7 fa8a 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d001      	beq.n	800a7fa <MX_ADC2_Init+0x152>
  {
    Error_Handler();
 800a7f6:	f002 f8d9 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800a7fa:	230c      	movs	r3, #12
 800a7fc:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a7fe:	2302      	movs	r3, #2
 800a800:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a802:	463b      	mov	r3, r7
 800a804:	4619      	mov	r1, r3
 800a806:	4814      	ldr	r0, [pc, #80]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a808:	f7f7 fa7c 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d001      	beq.n	800a816 <MX_ADC2_Init+0x16e>
  {
    Error_Handler();
 800a812:	f002 f8cb 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800a816:	230f      	movs	r3, #15
 800a818:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a81a:	2303      	movs	r3, #3
 800a81c:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a81e:	463b      	mov	r3, r7
 800a820:	4619      	mov	r1, r3
 800a822:	480d      	ldr	r0, [pc, #52]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a824:	f7f7 fa6e 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a828:	4603      	mov	r3, r0
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d001      	beq.n	800a832 <MX_ADC2_Init+0x18a>
  {
    Error_Handler();
 800a82e:	f002 f8bd 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800a832:	2304      	movs	r3, #4
 800a834:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a836:	2304      	movs	r3, #4
 800a838:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a83a:	463b      	mov	r3, r7
 800a83c:	4619      	mov	r1, r3
 800a83e:	4806      	ldr	r0, [pc, #24]	; (800a858 <MX_ADC2_Init+0x1b0>)
 800a840:	f7f7 fa60 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <MX_ADC2_Init+0x1a6>
  {
    Error_Handler();
 800a84a:	f002 f8af 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800a84e:	bf00      	nop
 800a850:	3730      	adds	r7, #48	; 0x30
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	2000070c 	.word	0x2000070c
 800a85c:	40012100 	.word	0x40012100
 800a860:	0f000001 	.word	0x0f000001

0800a864 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b08c      	sub	sp, #48	; 0x30
 800a868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a86a:	f107 0320 	add.w	r3, r7, #32
 800a86e:	2200      	movs	r2, #0
 800a870:	601a      	str	r2, [r3, #0]
 800a872:	605a      	str	r2, [r3, #4]
 800a874:	609a      	str	r2, [r3, #8]
 800a876:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a878:	463b      	mov	r3, r7
 800a87a:	2220      	movs	r2, #32
 800a87c:	2100      	movs	r1, #0
 800a87e:	4618      	mov	r0, r3
 800a880:	f003 f83c 	bl	800d8fc <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800a884:	4b63      	ldr	r3, [pc, #396]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a886:	4a64      	ldr	r2, [pc, #400]	; (800aa18 <MX_ADC3_Init+0x1b4>)
 800a888:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a88a:	4b62      	ldr	r3, [pc, #392]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a88c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a890:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800a892:	4b60      	ldr	r3, [pc, #384]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a894:	2200      	movs	r2, #0
 800a896:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800a898:	4b5e      	ldr	r3, [pc, #376]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a89a:	2201      	movs	r2, #1
 800a89c:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800a89e:	4b5d      	ldr	r3, [pc, #372]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8a0:	2201      	movs	r2, #1
 800a8a2:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a8a4:	4b5b      	ldr	r3, [pc, #364]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a8ac:	4b59      	ldr	r3, [pc, #356]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a8b2:	4b58      	ldr	r3, [pc, #352]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8b4:	4a59      	ldr	r2, [pc, #356]	; (800aa1c <MX_ADC3_Init+0x1b8>)
 800a8b6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a8b8:	4b56      	ldr	r3, [pc, #344]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 5;
 800a8be:	4b55      	ldr	r3, [pc, #340]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8c0:	2205      	movs	r2, #5
 800a8c2:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800a8c4:	4b53      	ldr	r3, [pc, #332]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800a8cc:	4b51      	ldr	r3, [pc, #324]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800a8d2:	4850      	ldr	r0, [pc, #320]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8d4:	f7f6 fbec 	bl	80010b0 <HAL_ADC_Init>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d001      	beq.n	800a8e2 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 800a8de:	f002 f865 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a8e2:	2303      	movs	r3, #3
 800a8e4:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a8e6:	2301      	movs	r3, #1
 800a8e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a8ee:	f107 0320 	add.w	r3, r7, #32
 800a8f2:	4619      	mov	r1, r3
 800a8f4:	4847      	ldr	r0, [pc, #284]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a8f6:	f7f6 fe65 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a8fa:	4603      	mov	r3, r0
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <MX_ADC3_Init+0xa0>
  {
    Error_Handler();
 800a900:	f002 f854 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800a904:	230d      	movs	r3, #13
 800a906:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a908:	2302      	movs	r3, #2
 800a90a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a90c:	f107 0320 	add.w	r3, r7, #32
 800a910:	4619      	mov	r1, r3
 800a912:	4840      	ldr	r0, [pc, #256]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a914:	f7f6 fe56 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 800a91e:	f002 f845 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a922:	2303      	movs	r3, #3
 800a924:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a926:	2303      	movs	r3, #3
 800a928:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a92a:	f107 0320 	add.w	r3, r7, #32
 800a92e:	4619      	mov	r1, r3
 800a930:	4838      	ldr	r0, [pc, #224]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a932:	f7f6 fe47 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 800a93c:	f002 f836 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800a940:	230d      	movs	r3, #13
 800a942:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a944:	2304      	movs	r3, #4
 800a946:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a948:	f107 0320 	add.w	r3, r7, #32
 800a94c:	4619      	mov	r1, r3
 800a94e:	4831      	ldr	r0, [pc, #196]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a950:	f7f6 fe38 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a954:	4603      	mov	r3, r0
 800a956:	2b00      	cmp	r3, #0
 800a958:	d001      	beq.n	800a95e <MX_ADC3_Init+0xfa>
  {
    Error_Handler();
 800a95a:	f002 f827 	bl	800c9ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a95e:	2303      	movs	r3, #3
 800a960:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 5;
 800a962:	2305      	movs	r3, #5
 800a964:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a966:	f107 0320 	add.w	r3, r7, #32
 800a96a:	4619      	mov	r1, r3
 800a96c:	4829      	ldr	r0, [pc, #164]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a96e:	f7f6 fe29 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d001      	beq.n	800a97c <MX_ADC3_Init+0x118>
  {
    Error_Handler();
 800a978:	f002 f818 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800a97c:	2303      	movs	r3, #3
 800a97e:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a980:	2301      	movs	r3, #1
 800a982:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a984:	2304      	movs	r3, #4
 800a986:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a988:	2300      	movs	r3, #0
 800a98a:	60bb      	str	r3, [r7, #8]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800a98c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a990:	61fb      	str	r3, [r7, #28]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800a992:	2300      	movs	r3, #0
 800a994:	61bb      	str	r3, [r7, #24]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a996:	2300      	movs	r3, #0
 800a998:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a99a:	2300      	movs	r3, #0
 800a99c:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a99e:	2300      	movs	r3, #0
 800a9a0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a9a2:	463b      	mov	r3, r7
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	481b      	ldr	r0, [pc, #108]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a9a8:	f7f7 f9ac 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <MX_ADC3_Init+0x152>
  {
    Error_Handler();
 800a9b2:	f001 fffb 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800a9b6:	230d      	movs	r3, #13
 800a9b8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a9ba:	2302      	movs	r3, #2
 800a9bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a9be:	463b      	mov	r3, r7
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4814      	ldr	r0, [pc, #80]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a9c4:	f7f7 f99e 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <MX_ADC3_Init+0x16e>
  {
    Error_Handler();
 800a9ce:	f001 ffed 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a9da:	463b      	mov	r3, r7
 800a9dc:	4619      	mov	r1, r3
 800a9de:	480d      	ldr	r0, [pc, #52]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a9e0:	f7f7 f990 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <MX_ADC3_Init+0x18a>
  {
    Error_Handler();
 800a9ea:	f001 ffdf 	bl	800c9ac <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800a9ee:	230d      	movs	r3, #13
 800a9f0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a9f2:	2304      	movs	r3, #4
 800a9f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a9f6:	463b      	mov	r3, r7
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4806      	ldr	r0, [pc, #24]	; (800aa14 <MX_ADC3_Init+0x1b0>)
 800a9fc:	f7f7 f982 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800aa00:	4603      	mov	r3, r0
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <MX_ADC3_Init+0x1a6>
  {
    Error_Handler();
 800aa06:	f001 ffd1 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800aa0a:	bf00      	nop
 800aa0c:	3730      	adds	r7, #48	; 0x30
 800aa0e:	46bd      	mov	sp, r7
 800aa10:	bd80      	pop	{r7, pc}
 800aa12:	bf00      	nop
 800aa14:	20000ddc 	.word	0x20000ddc
 800aa18:	40012200 	.word	0x40012200
 800aa1c:	0f000001 	.word	0x0f000001

0800aa20 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800aa24:	4b17      	ldr	r3, [pc, #92]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa26:	4a18      	ldr	r2, [pc, #96]	; (800aa88 <MX_CAN1_Init+0x68>)
 800aa28:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800aa2a:	4b16      	ldr	r3, [pc, #88]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa2c:	2203      	movs	r2, #3
 800aa2e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800aa30:	4b14      	ldr	r3, [pc, #80]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa32:	2200      	movs	r2, #0
 800aa34:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800aa36:	4b13      	ldr	r3, [pc, #76]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800aa3c:	4b11      	ldr	r3, [pc, #68]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa3e:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800aa42:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800aa44:	4b0f      	ldr	r3, [pc, #60]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800aa4a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800aa4c:	4b0d      	ldr	r3, [pc, #52]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa4e:	2200      	movs	r2, #0
 800aa50:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800aa52:	4b0c      	ldr	r3, [pc, #48]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa54:	2200      	movs	r2, #0
 800aa56:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800aa58:	4b0a      	ldr	r3, [pc, #40]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800aa5e:	4b09      	ldr	r3, [pc, #36]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa60:	2200      	movs	r2, #0
 800aa62:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800aa64:	4b07      	ldr	r3, [pc, #28]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa66:	2200      	movs	r2, #0
 800aa68:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800aa6a:	4b06      	ldr	r3, [pc, #24]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800aa70:	4804      	ldr	r0, [pc, #16]	; (800aa84 <MX_CAN1_Init+0x64>)
 800aa72:	f7f7 fadb 	bl	800202c <HAL_CAN_Init>
 800aa76:	4603      	mov	r3, r0
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d001      	beq.n	800aa80 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800aa7c:	f001 ff96 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800aa80:	bf00      	nop
 800aa82:	bd80      	pop	{r7, pc}
 800aa84:	20001170 	.word	0x20001170
 800aa88:	40006400 	.word	0x40006400

0800aa8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800aa90:	4b12      	ldr	r3, [pc, #72]	; (800aadc <MX_I2C1_Init+0x50>)
 800aa92:	4a13      	ldr	r2, [pc, #76]	; (800aae0 <MX_I2C1_Init+0x54>)
 800aa94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800aa96:	4b11      	ldr	r3, [pc, #68]	; (800aadc <MX_I2C1_Init+0x50>)
 800aa98:	4a12      	ldr	r2, [pc, #72]	; (800aae4 <MX_I2C1_Init+0x58>)
 800aa9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800aa9c:	4b0f      	ldr	r3, [pc, #60]	; (800aadc <MX_I2C1_Init+0x50>)
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800aaa2:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <MX_I2C1_Init+0x50>)
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800aaa8:	4b0c      	ldr	r3, [pc, #48]	; (800aadc <MX_I2C1_Init+0x50>)
 800aaaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800aaae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <MX_I2C1_Init+0x50>)
 800aab2:	2200      	movs	r2, #0
 800aab4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800aab6:	4b09      	ldr	r3, [pc, #36]	; (800aadc <MX_I2C1_Init+0x50>)
 800aab8:	2200      	movs	r2, #0
 800aaba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800aabc:	4b07      	ldr	r3, [pc, #28]	; (800aadc <MX_I2C1_Init+0x50>)
 800aabe:	2200      	movs	r2, #0
 800aac0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800aac2:	4b06      	ldr	r3, [pc, #24]	; (800aadc <MX_I2C1_Init+0x50>)
 800aac4:	2200      	movs	r2, #0
 800aac6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800aac8:	4804      	ldr	r0, [pc, #16]	; (800aadc <MX_I2C1_Init+0x50>)
 800aaca:	f7f8 fff1 	bl	8003ab0 <HAL_I2C_Init>
 800aace:	4603      	mov	r3, r0
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d001      	beq.n	800aad8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800aad4:	f001 ff6a 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800aad8:	bf00      	nop
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20000754 	.word	0x20000754
 800aae0:	40005400 	.word	0x40005400
 800aae4:	000186a0 	.word	0x000186a0

0800aae8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800aae8:	b580      	push	{r7, lr}
 800aaea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800aaec:	4b12      	ldr	r3, [pc, #72]	; (800ab38 <MX_I2C2_Init+0x50>)
 800aaee:	4a13      	ldr	r2, [pc, #76]	; (800ab3c <MX_I2C2_Init+0x54>)
 800aaf0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800aaf2:	4b11      	ldr	r3, [pc, #68]	; (800ab38 <MX_I2C2_Init+0x50>)
 800aaf4:	4a12      	ldr	r2, [pc, #72]	; (800ab40 <MX_I2C2_Init+0x58>)
 800aaf6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800aaf8:	4b0f      	ldr	r3, [pc, #60]	; (800ab38 <MX_I2C2_Init+0x50>)
 800aafa:	2200      	movs	r2, #0
 800aafc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800aafe:	4b0e      	ldr	r3, [pc, #56]	; (800ab38 <MX_I2C2_Init+0x50>)
 800ab00:	2200      	movs	r2, #0
 800ab02:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800ab04:	4b0c      	ldr	r3, [pc, #48]	; (800ab38 <MX_I2C2_Init+0x50>)
 800ab06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab0a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800ab0c:	4b0a      	ldr	r3, [pc, #40]	; (800ab38 <MX_I2C2_Init+0x50>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800ab12:	4b09      	ldr	r3, [pc, #36]	; (800ab38 <MX_I2C2_Init+0x50>)
 800ab14:	2200      	movs	r2, #0
 800ab16:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800ab18:	4b07      	ldr	r3, [pc, #28]	; (800ab38 <MX_I2C2_Init+0x50>)
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800ab1e:	4b06      	ldr	r3, [pc, #24]	; (800ab38 <MX_I2C2_Init+0x50>)
 800ab20:	2200      	movs	r2, #0
 800ab22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800ab24:	4804      	ldr	r0, [pc, #16]	; (800ab38 <MX_I2C2_Init+0x50>)
 800ab26:	f7f8 ffc3 	bl	8003ab0 <HAL_I2C_Init>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d001      	beq.n	800ab34 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800ab30:	f001 ff3c 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800ab34:	bf00      	nop
 800ab36:	bd80      	pop	{r7, pc}
 800ab38:	20000bb0 	.word	0x20000bb0
 800ab3c:	40005800 	.word	0x40005800
 800ab40:	000186a0 	.word	0x000186a0

0800ab44 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800ab48:	4b0f      	ldr	r3, [pc, #60]	; (800ab88 <MX_RTC_Init+0x44>)
 800ab4a:	4a10      	ldr	r2, [pc, #64]	; (800ab8c <MX_RTC_Init+0x48>)
 800ab4c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800ab4e:	4b0e      	ldr	r3, [pc, #56]	; (800ab88 <MX_RTC_Init+0x44>)
 800ab50:	2200      	movs	r2, #0
 800ab52:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800ab54:	4b0c      	ldr	r3, [pc, #48]	; (800ab88 <MX_RTC_Init+0x44>)
 800ab56:	227f      	movs	r2, #127	; 0x7f
 800ab58:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <MX_RTC_Init+0x44>)
 800ab5c:	22ff      	movs	r2, #255	; 0xff
 800ab5e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800ab60:	4b09      	ldr	r3, [pc, #36]	; (800ab88 <MX_RTC_Init+0x44>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800ab66:	4b08      	ldr	r3, [pc, #32]	; (800ab88 <MX_RTC_Init+0x44>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800ab6c:	4b06      	ldr	r3, [pc, #24]	; (800ab88 <MX_RTC_Init+0x44>)
 800ab6e:	2200      	movs	r2, #0
 800ab70:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800ab72:	4805      	ldr	r0, [pc, #20]	; (800ab88 <MX_RTC_Init+0x44>)
 800ab74:	f7fa fd90 	bl	8005698 <HAL_RTC_Init>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d001      	beq.n	800ab82 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800ab7e:	f001 ff15 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800ab82:	bf00      	nop
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20000ec8 	.word	0x20000ec8
 800ab8c:	40002800 	.word	0x40002800

0800ab90 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800ab94:	4b18      	ldr	r3, [pc, #96]	; (800abf8 <MX_SPI2_Init+0x68>)
 800ab96:	4a19      	ldr	r2, [pc, #100]	; (800abfc <MX_SPI2_Init+0x6c>)
 800ab98:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800ab9a:	4b17      	ldr	r3, [pc, #92]	; (800abf8 <MX_SPI2_Init+0x68>)
 800ab9c:	f44f 7282 	mov.w	r2, #260	; 0x104
 800aba0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800aba2:	4b15      	ldr	r3, [pc, #84]	; (800abf8 <MX_SPI2_Init+0x68>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800aba8:	4b13      	ldr	r3, [pc, #76]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abae:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800abb0:	4b11      	ldr	r3, [pc, #68]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abb2:	2200      	movs	r2, #0
 800abb4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800abb6:	4b10      	ldr	r3, [pc, #64]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abb8:	2201      	movs	r2, #1
 800abba:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800abbc:	4b0e      	ldr	r3, [pc, #56]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abbe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800abc2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800abc4:	4b0c      	ldr	r3, [pc, #48]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abc6:	2220      	movs	r2, #32
 800abc8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800abca:	4b0b      	ldr	r3, [pc, #44]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abcc:	2200      	movs	r2, #0
 800abce:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800abd0:	4b09      	ldr	r3, [pc, #36]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abd2:	2200      	movs	r2, #0
 800abd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800abd6:	4b08      	ldr	r3, [pc, #32]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abd8:	2200      	movs	r2, #0
 800abda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800abdc:	4b06      	ldr	r3, [pc, #24]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abde:	220a      	movs	r2, #10
 800abe0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800abe2:	4805      	ldr	r0, [pc, #20]	; (800abf8 <MX_SPI2_Init+0x68>)
 800abe4:	f7fa fe3d 	bl	8005862 <HAL_SPI_Init>
 800abe8:	4603      	mov	r3, r0
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800abee:	f001 fedd 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800abf2:	bf00      	nop
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	bf00      	nop
 800abf8:	200002ec 	.word	0x200002ec
 800abfc:	40003800 	.word	0x40003800

0800ac00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b096      	sub	sp, #88	; 0x58
 800ac04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac0a:	2200      	movs	r2, #0
 800ac0c:	601a      	str	r2, [r3, #0]
 800ac0e:	605a      	str	r2, [r3, #4]
 800ac10:	609a      	str	r2, [r3, #8]
 800ac12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ac14:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800ac18:	2200      	movs	r2, #0
 800ac1a:	601a      	str	r2, [r3, #0]
 800ac1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ac1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac22:	2200      	movs	r2, #0
 800ac24:	601a      	str	r2, [r3, #0]
 800ac26:	605a      	str	r2, [r3, #4]
 800ac28:	609a      	str	r2, [r3, #8]
 800ac2a:	60da      	str	r2, [r3, #12]
 800ac2c:	611a      	str	r2, [r3, #16]
 800ac2e:	615a      	str	r2, [r3, #20]
 800ac30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800ac32:	1d3b      	adds	r3, r7, #4
 800ac34:	2220      	movs	r2, #32
 800ac36:	2100      	movs	r1, #0
 800ac38:	4618      	mov	r0, r3
 800ac3a:	f002 fe5f 	bl	800d8fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800ac3e:	4b57      	ldr	r3, [pc, #348]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac40:	4a57      	ldr	r2, [pc, #348]	; (800ada0 <MX_TIM1_Init+0x1a0>)
 800ac42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800ac44:	4b55      	ldr	r3, [pc, #340]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac46:	2200      	movs	r2, #0
 800ac48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac4a:	4b54      	ldr	r3, [pc, #336]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 800ac50:	4b52      	ldr	r3, [pc, #328]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac52:	f640 72ff 	movw	r2, #4095	; 0xfff
 800ac56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac58:	4b50      	ldr	r3, [pc, #320]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac5a:	2200      	movs	r2, #0
 800ac5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800ac5e:	4b4f      	ldr	r3, [pc, #316]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac64:	4b4d      	ldr	r3, [pc, #308]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac66:	2200      	movs	r2, #0
 800ac68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800ac6a:	484c      	ldr	r0, [pc, #304]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac6c:	f7fb fc6c 	bl	8006548 <HAL_TIM_Base_Init>
 800ac70:	4603      	mov	r3, r0
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d001      	beq.n	800ac7a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800ac76:	f001 fe99 	bl	800c9ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ac7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac7e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800ac80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800ac84:	4619      	mov	r1, r3
 800ac86:	4845      	ldr	r0, [pc, #276]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac88:	f7fc f9a0 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d001      	beq.n	800ac96 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800ac92:	f001 fe8b 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800ac96:	4841      	ldr	r0, [pc, #260]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ac98:	f7fb fd3c 	bl	8006714 <HAL_TIM_PWM_Init>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d001      	beq.n	800aca6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800aca2:	f001 fe83 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800aca6:	483d      	ldr	r0, [pc, #244]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800aca8:	f7fb fcc1 	bl	800662e <HAL_TIM_OC_Init>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d001      	beq.n	800acb6 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800acb2:	f001 fe7b 	bl	800c9ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800acb6:	2300      	movs	r3, #0
 800acb8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800acba:	2300      	movs	r3, #0
 800acbc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800acbe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800acc2:	4619      	mov	r1, r3
 800acc4:	4835      	ldr	r0, [pc, #212]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800acc6:	f7fc febb 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d001      	beq.n	800acd4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800acd0:	f001 fe6c 	bl	800c9ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800acd4:	2360      	movs	r3, #96	; 0x60
 800acd6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800acd8:	2300      	movs	r3, #0
 800acda:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800acdc:	2300      	movs	r3, #0
 800acde:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800ace0:	2300      	movs	r3, #0
 800ace2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ace4:	2300      	movs	r3, #0
 800ace6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800ace8:	2300      	movs	r3, #0
 800acea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800acec:	2300      	movs	r3, #0
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800acf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800acf4:	2200      	movs	r2, #0
 800acf6:	4619      	mov	r1, r3
 800acf8:	4828      	ldr	r0, [pc, #160]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800acfa:	f7fc f8a1 	bl	8006e40 <HAL_TIM_PWM_ConfigChannel>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d001      	beq.n	800ad08 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800ad04:	f001 fe52 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ad08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad0c:	2204      	movs	r2, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4822      	ldr	r0, [pc, #136]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ad12:	f7fc f895 	bl	8006e40 <HAL_TIM_PWM_ConfigChannel>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800ad1c:	f001 fe46 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800ad20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad24:	2208      	movs	r2, #8
 800ad26:	4619      	mov	r1, r3
 800ad28:	481c      	ldr	r0, [pc, #112]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ad2a:	f7fc f889 	bl	8006e40 <HAL_TIM_PWM_ConfigChannel>
 800ad2e:	4603      	mov	r3, r0
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d001      	beq.n	800ad38 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800ad34:	f001 fe3a 	bl	800c9ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800ad38:	2330      	movs	r3, #48	; 0x30
 800ad3a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1900;
 800ad3c:	f240 736c 	movw	r3, #1900	; 0x76c
 800ad40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800ad42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ad46:	220c      	movs	r2, #12
 800ad48:	4619      	mov	r1, r3
 800ad4a:	4814      	ldr	r0, [pc, #80]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ad4c:	f7fb ff7c 	bl	8006c48 <HAL_TIM_OC_ConfigChannel>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800ad56:	f001 fe29 	bl	800c9ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800ad5a:	2300      	movs	r3, #0
 800ad5c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800ad62:	2300      	movs	r3, #0
 800ad64:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800ad6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ad72:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800ad74:	2300      	movs	r3, #0
 800ad76:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800ad78:	1d3b      	adds	r3, r7, #4
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	4807      	ldr	r0, [pc, #28]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ad7e:	f7fc fedb 	bl	8007b38 <HAL_TIMEx_ConfigBreakDeadTime>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 800ad88:	f001 fe10 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800ad8c:	4803      	ldr	r0, [pc, #12]	; (800ad9c <MX_TIM1_Init+0x19c>)
 800ad8e:	f002 faf1 	bl	800d374 <HAL_TIM_MspPostInit>

}
 800ad92:	bf00      	nop
 800ad94:	3758      	adds	r7, #88	; 0x58
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20000f28 	.word	0x20000f28
 800ada0:	40010000 	.word	0x40010000

0800ada4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b08e      	sub	sp, #56	; 0x38
 800ada8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800adaa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800adae:	2200      	movs	r2, #0
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	605a      	str	r2, [r3, #4]
 800adb4:	609a      	str	r2, [r3, #8]
 800adb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800adb8:	f107 0320 	add.w	r3, r7, #32
 800adbc:	2200      	movs	r2, #0
 800adbe:	601a      	str	r2, [r3, #0]
 800adc0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800adc2:	1d3b      	adds	r3, r7, #4
 800adc4:	2200      	movs	r2, #0
 800adc6:	601a      	str	r2, [r3, #0]
 800adc8:	605a      	str	r2, [r3, #4]
 800adca:	609a      	str	r2, [r3, #8]
 800adcc:	60da      	str	r2, [r3, #12]
 800adce:	611a      	str	r2, [r3, #16]
 800add0:	615a      	str	r2, [r3, #20]
 800add2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800add4:	4b2b      	ldr	r3, [pc, #172]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800add6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800adda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800addc:	4b29      	ldr	r3, [pc, #164]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800adde:	2207      	movs	r2, #7
 800ade0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ade2:	4b28      	ldr	r3, [pc, #160]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800ade8:	4b26      	ldr	r3, [pc, #152]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800adea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800adee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800adf0:	4b24      	ldr	r3, [pc, #144]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800adf2:	2200      	movs	r2, #0
 800adf4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800adf6:	4b23      	ldr	r3, [pc, #140]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800adf8:	2200      	movs	r2, #0
 800adfa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800adfc:	4821      	ldr	r0, [pc, #132]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800adfe:	f7fb fba3 	bl	8006548 <HAL_TIM_Base_Init>
 800ae02:	4603      	mov	r3, r0
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d001      	beq.n	800ae0c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800ae08:	f001 fdd0 	bl	800c9ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ae0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae10:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800ae12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae16:	4619      	mov	r1, r3
 800ae18:	481a      	ldr	r0, [pc, #104]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800ae1a:	f7fc f8d7 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 800ae1e:	4603      	mov	r3, r0
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d001      	beq.n	800ae28 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800ae24:	f001 fdc2 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800ae28:	4816      	ldr	r0, [pc, #88]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800ae2a:	f7fb fc00 	bl	800662e <HAL_TIM_OC_Init>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d001      	beq.n	800ae38 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800ae34:	f001 fdba 	bl	800c9ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800ae40:	f107 0320 	add.w	r3, r7, #32
 800ae44:	4619      	mov	r1, r3
 800ae46:	480f      	ldr	r0, [pc, #60]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800ae48:	f7fc fdfa 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800ae52:	f001 fdab 	bl	800c9ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800ae56:	2300      	movs	r3, #0
 800ae58:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800ae62:	2300      	movs	r3, #0
 800ae64:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800ae66:	1d3b      	adds	r3, r7, #4
 800ae68:	2200      	movs	r2, #0
 800ae6a:	4619      	mov	r1, r3
 800ae6c:	4805      	ldr	r0, [pc, #20]	; (800ae84 <MX_TIM2_Init+0xe0>)
 800ae6e:	f7fb feeb 	bl	8006c48 <HAL_TIM_OC_ConfigChannel>
 800ae72:	4603      	mov	r3, r0
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d001      	beq.n	800ae7c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800ae78:	f001 fd98 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800ae7c:	bf00      	nop
 800ae7e:	3738      	adds	r7, #56	; 0x38
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	200010b4 	.word	0x200010b4

0800ae88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b08e      	sub	sp, #56	; 0x38
 800ae8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ae8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ae92:	2200      	movs	r2, #0
 800ae94:	601a      	str	r2, [r3, #0]
 800ae96:	605a      	str	r2, [r3, #4]
 800ae98:	609a      	str	r2, [r3, #8]
 800ae9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ae9c:	f107 0320 	add.w	r3, r7, #32
 800aea0:	2200      	movs	r2, #0
 800aea2:	601a      	str	r2, [r3, #0]
 800aea4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800aea6:	1d3b      	adds	r3, r7, #4
 800aea8:	2200      	movs	r2, #0
 800aeaa:	601a      	str	r2, [r3, #0]
 800aeac:	605a      	str	r2, [r3, #4]
 800aeae:	609a      	str	r2, [r3, #8]
 800aeb0:	60da      	str	r2, [r3, #12]
 800aeb2:	611a      	str	r2, [r3, #16]
 800aeb4:	615a      	str	r2, [r3, #20]
 800aeb6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800aeb8:	4b2b      	ldr	r3, [pc, #172]	; (800af68 <MX_TIM3_Init+0xe0>)
 800aeba:	4a2c      	ldr	r2, [pc, #176]	; (800af6c <MX_TIM3_Init+0xe4>)
 800aebc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800aebe:	4b2a      	ldr	r3, [pc, #168]	; (800af68 <MX_TIM3_Init+0xe0>)
 800aec0:	2253      	movs	r2, #83	; 0x53
 800aec2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aec4:	4b28      	ldr	r3, [pc, #160]	; (800af68 <MX_TIM3_Init+0xe0>)
 800aec6:	2200      	movs	r2, #0
 800aec8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800aeca:	4b27      	ldr	r3, [pc, #156]	; (800af68 <MX_TIM3_Init+0xe0>)
 800aecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800aed0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aed2:	4b25      	ldr	r3, [pc, #148]	; (800af68 <MX_TIM3_Init+0xe0>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aed8:	4b23      	ldr	r3, [pc, #140]	; (800af68 <MX_TIM3_Init+0xe0>)
 800aeda:	2200      	movs	r2, #0
 800aedc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800aede:	4822      	ldr	r0, [pc, #136]	; (800af68 <MX_TIM3_Init+0xe0>)
 800aee0:	f7fb fb32 	bl	8006548 <HAL_TIM_Base_Init>
 800aee4:	4603      	mov	r3, r0
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800aeea:	f001 fd5f 	bl	800c9ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aeee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aef2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800aef4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aef8:	4619      	mov	r1, r3
 800aefa:	481b      	ldr	r0, [pc, #108]	; (800af68 <MX_TIM3_Init+0xe0>)
 800aefc:	f7fc f866 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800af06:	f001 fd51 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800af0a:	4817      	ldr	r0, [pc, #92]	; (800af68 <MX_TIM3_Init+0xe0>)
 800af0c:	f7fb fb8f 	bl	800662e <HAL_TIM_OC_Init>
 800af10:	4603      	mov	r3, r0
 800af12:	2b00      	cmp	r3, #0
 800af14:	d001      	beq.n	800af1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800af16:	f001 fd49 	bl	800c9ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af1a:	2300      	movs	r3, #0
 800af1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af1e:	2300      	movs	r3, #0
 800af20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800af22:	f107 0320 	add.w	r3, r7, #32
 800af26:	4619      	mov	r1, r3
 800af28:	480f      	ldr	r0, [pc, #60]	; (800af68 <MX_TIM3_Init+0xe0>)
 800af2a:	f7fc fd89 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 800af2e:	4603      	mov	r3, r0
 800af30:	2b00      	cmp	r3, #0
 800af32:	d001      	beq.n	800af38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800af34:	f001 fd3a 	bl	800c9ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800af38:	2330      	movs	r3, #48	; 0x30
 800af3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800af40:	2300      	movs	r3, #0
 800af42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800af44:	2300      	movs	r3, #0
 800af46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800af48:	1d3b      	adds	r3, r7, #4
 800af4a:	2200      	movs	r2, #0
 800af4c:	4619      	mov	r1, r3
 800af4e:	4806      	ldr	r0, [pc, #24]	; (800af68 <MX_TIM3_Init+0xe0>)
 800af50:	f7fb fe7a 	bl	8006c48 <HAL_TIM_OC_ConfigChannel>
 800af54:	4603      	mov	r3, r0
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800af5a:	f001 fd27 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800af5e:	bf00      	nop
 800af60:	3738      	adds	r7, #56	; 0x38
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop
 800af68:	20000d14 	.word	0x20000d14
 800af6c:	40000400 	.word	0x40000400

0800af70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b086      	sub	sp, #24
 800af74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800af76:	f107 0308 	add.w	r3, r7, #8
 800af7a:	2200      	movs	r2, #0
 800af7c:	601a      	str	r2, [r3, #0]
 800af7e:	605a      	str	r2, [r3, #4]
 800af80:	609a      	str	r2, [r3, #8]
 800af82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af84:	463b      	mov	r3, r7
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
 800af8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800af8c:	4b1d      	ldr	r3, [pc, #116]	; (800b004 <MX_TIM5_Init+0x94>)
 800af8e:	4a1e      	ldr	r2, [pc, #120]	; (800b008 <MX_TIM5_Init+0x98>)
 800af90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 800af92:	4b1c      	ldr	r3, [pc, #112]	; (800b004 <MX_TIM5_Init+0x94>)
 800af94:	f240 3247 	movw	r2, #839	; 0x347
 800af98:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af9a:	4b1a      	ldr	r3, [pc, #104]	; (800b004 <MX_TIM5_Init+0x94>)
 800af9c:	2200      	movs	r2, #0
 800af9e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800afa0:	4b18      	ldr	r3, [pc, #96]	; (800b004 <MX_TIM5_Init+0x94>)
 800afa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afa6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800afa8:	4b16      	ldr	r3, [pc, #88]	; (800b004 <MX_TIM5_Init+0x94>)
 800afaa:	2200      	movs	r2, #0
 800afac:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800afae:	4b15      	ldr	r3, [pc, #84]	; (800b004 <MX_TIM5_Init+0x94>)
 800afb0:	2200      	movs	r2, #0
 800afb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800afb4:	4813      	ldr	r0, [pc, #76]	; (800b004 <MX_TIM5_Init+0x94>)
 800afb6:	f7fb fac7 	bl	8006548 <HAL_TIM_Base_Init>
 800afba:	4603      	mov	r3, r0
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800afc0:	f001 fcf4 	bl	800c9ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800afc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afc8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800afca:	f107 0308 	add.w	r3, r7, #8
 800afce:	4619      	mov	r1, r3
 800afd0:	480c      	ldr	r0, [pc, #48]	; (800b004 <MX_TIM5_Init+0x94>)
 800afd2:	f7fb fffb 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 800afd6:	4603      	mov	r3, r0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d001      	beq.n	800afe0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800afdc:	f001 fce6 	bl	800c9ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800afe0:	2300      	movs	r3, #0
 800afe2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800afe4:	2300      	movs	r3, #0
 800afe6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800afe8:	463b      	mov	r3, r7
 800afea:	4619      	mov	r1, r3
 800afec:	4805      	ldr	r0, [pc, #20]	; (800b004 <MX_TIM5_Init+0x94>)
 800afee:	f7fc fd27 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 800aff2:	4603      	mov	r3, r0
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d001      	beq.n	800affc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800aff8:	f001 fcd8 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800affc:	bf00      	nop
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}
 800b004:	20000cd0 	.word	0x20000cd0
 800b008:	40000c00 	.word	0x40000c00

0800b00c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800b00c:	b580      	push	{r7, lr}
 800b00e:	b082      	sub	sp, #8
 800b010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b012:	463b      	mov	r3, r7
 800b014:	2200      	movs	r2, #0
 800b016:	601a      	str	r2, [r3, #0]
 800b018:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b01a:	4b15      	ldr	r3, [pc, #84]	; (800b070 <MX_TIM6_Init+0x64>)
 800b01c:	4a15      	ldr	r2, [pc, #84]	; (800b074 <MX_TIM6_Init+0x68>)
 800b01e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800b020:	4b13      	ldr	r3, [pc, #76]	; (800b070 <MX_TIM6_Init+0x64>)
 800b022:	2253      	movs	r2, #83	; 0x53
 800b024:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b026:	4b12      	ldr	r3, [pc, #72]	; (800b070 <MX_TIM6_Init+0x64>)
 800b028:	2200      	movs	r2, #0
 800b02a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800b02c:	4b10      	ldr	r3, [pc, #64]	; (800b070 <MX_TIM6_Init+0x64>)
 800b02e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b032:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b034:	4b0e      	ldr	r3, [pc, #56]	; (800b070 <MX_TIM6_Init+0x64>)
 800b036:	2200      	movs	r2, #0
 800b038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b03a:	480d      	ldr	r0, [pc, #52]	; (800b070 <MX_TIM6_Init+0x64>)
 800b03c:	f7fb fa84 	bl	8006548 <HAL_TIM_Base_Init>
 800b040:	4603      	mov	r3, r0
 800b042:	2b00      	cmp	r3, #0
 800b044:	d001      	beq.n	800b04a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800b046:	f001 fcb1 	bl	800c9ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b04a:	2300      	movs	r3, #0
 800b04c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b04e:	2300      	movs	r3, #0
 800b050:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b052:	463b      	mov	r3, r7
 800b054:	4619      	mov	r1, r3
 800b056:	4806      	ldr	r0, [pc, #24]	; (800b070 <MX_TIM6_Init+0x64>)
 800b058:	f7fc fcf2 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 800b05c:	4603      	mov	r3, r0
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800b062:	f001 fca3 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b066:	bf00      	nop
 800b068:	3708      	adds	r7, #8
 800b06a:	46bd      	mov	sp, r7
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	20000ee8 	.word	0x20000ee8
 800b074:	40001000 	.word	0x40001000

0800b078 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b08c      	sub	sp, #48	; 0x30
 800b07c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800b07e:	f107 030c 	add.w	r3, r7, #12
 800b082:	2224      	movs	r2, #36	; 0x24
 800b084:	2100      	movs	r1, #0
 800b086:	4618      	mov	r0, r3
 800b088:	f002 fc38 	bl	800d8fc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b08c:	1d3b      	adds	r3, r7, #4
 800b08e:	2200      	movs	r2, #0
 800b090:	601a      	str	r2, [r3, #0]
 800b092:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800b094:	4b22      	ldr	r3, [pc, #136]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b096:	4a23      	ldr	r2, [pc, #140]	; (800b124 <MX_TIM8_Init+0xac>)
 800b098:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800b09a:	4b21      	ldr	r3, [pc, #132]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b0a0:	4b1f      	ldr	r3, [pc, #124]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 800b0a6:	4b1e      	ldr	r3, [pc, #120]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b0a8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800b0ac:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b0ae:	4b1c      	ldr	r3, [pc, #112]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800b0b4:	4b1a      	ldr	r3, [pc, #104]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b0ba:	4b19      	ldr	r3, [pc, #100]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800b0c0:	2303      	movs	r3, #3
 800b0c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800b0e4:	f107 030c 	add.w	r3, r7, #12
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	480d      	ldr	r0, [pc, #52]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b0ec:	f7fb fbbb 	bl	8006866 <HAL_TIM_Encoder_Init>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d001      	beq.n	800b0fa <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800b0f6:	f001 fc59 	bl	800c9ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800b0fa:	2320      	movs	r3, #32
 800b0fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b0fe:	2300      	movs	r3, #0
 800b100:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800b102:	1d3b      	adds	r3, r7, #4
 800b104:	4619      	mov	r1, r3
 800b106:	4806      	ldr	r0, [pc, #24]	; (800b120 <MX_TIM8_Init+0xa8>)
 800b108:	f7fc fc9a 	bl	8007a40 <HAL_TIMEx_MasterConfigSynchronization>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d001      	beq.n	800b116 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800b112:	f001 fc4b 	bl	800c9ac <Error_Handler>
  //HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 800b116:	bf00      	nop
 800b118:	3730      	adds	r7, #48	; 0x30
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	2000068c 	.word	0x2000068c
 800b124:	40010400 	.word	0x40010400

0800b128 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b08c      	sub	sp, #48	; 0x30
 800b12c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b12e:	f107 0320 	add.w	r3, r7, #32
 800b132:	2200      	movs	r2, #0
 800b134:	601a      	str	r2, [r3, #0]
 800b136:	605a      	str	r2, [r3, #4]
 800b138:	609a      	str	r2, [r3, #8]
 800b13a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b13c:	1d3b      	adds	r3, r7, #4
 800b13e:	2200      	movs	r2, #0
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	605a      	str	r2, [r3, #4]
 800b144:	609a      	str	r2, [r3, #8]
 800b146:	60da      	str	r2, [r3, #12]
 800b148:	611a      	str	r2, [r3, #16]
 800b14a:	615a      	str	r2, [r3, #20]
 800b14c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800b14e:	4b2d      	ldr	r3, [pc, #180]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b150:	4a2d      	ldr	r2, [pc, #180]	; (800b208 <MX_TIM9_Init+0xe0>)
 800b152:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 800b154:	4b2b      	ldr	r3, [pc, #172]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b156:	22a7      	movs	r2, #167	; 0xa7
 800b158:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b15a:	4b2a      	ldr	r3, [pc, #168]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 800b160:	4b28      	ldr	r3, [pc, #160]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b162:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b166:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b168:	4b26      	ldr	r3, [pc, #152]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b16e:	4b25      	ldr	r3, [pc, #148]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b170:	2200      	movs	r2, #0
 800b172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800b174:	4823      	ldr	r0, [pc, #140]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b176:	f7fb f9e7 	bl	8006548 <HAL_TIM_Base_Init>
 800b17a:	4603      	mov	r3, r0
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d001      	beq.n	800b184 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800b180:	f001 fc14 	bl	800c9ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b184:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b188:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800b18a:	f107 0320 	add.w	r3, r7, #32
 800b18e:	4619      	mov	r1, r3
 800b190:	481c      	ldr	r0, [pc, #112]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b192:	f7fb ff1b 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 800b196:	4603      	mov	r3, r0
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d001      	beq.n	800b1a0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800b19c:	f001 fc06 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800b1a0:	4818      	ldr	r0, [pc, #96]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b1a2:	f7fb fab7 	bl	8006714 <HAL_TIM_PWM_Init>
 800b1a6:	4603      	mov	r3, r0
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d001      	beq.n	800b1b0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800b1ac:	f001 fbfe 	bl	800c9ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b1b0:	2360      	movs	r3, #96	; 0x60
 800b1b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800b1b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1b8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b1be:	2300      	movs	r3, #0
 800b1c0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b1c2:	1d3b      	adds	r3, r7, #4
 800b1c4:	2200      	movs	r2, #0
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	480e      	ldr	r0, [pc, #56]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b1ca:	f7fb fe39 	bl	8006e40 <HAL_TIM_PWM_ConfigChannel>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d001      	beq.n	800b1d8 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800b1d4:	f001 fbea 	bl	800c9ac <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800b1d8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b1dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b1de:	1d3b      	adds	r3, r7, #4
 800b1e0:	2204      	movs	r2, #4
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	4807      	ldr	r0, [pc, #28]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b1e6:	f7fb fe2b 	bl	8006e40 <HAL_TIM_PWM_ConfigChannel>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d001      	beq.n	800b1f4 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 800b1f0:	f001 fbdc 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800b1f4:	4803      	ldr	r0, [pc, #12]	; (800b204 <MX_TIM9_Init+0xdc>)
 800b1f6:	f002 f8bd 	bl	800d374 <HAL_TIM_MspPostInit>

}
 800b1fa:	bf00      	nop
 800b1fc:	3730      	adds	r7, #48	; 0x30
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	20000fd0 	.word	0x20000fd0
 800b208:	40014000 	.word	0x40014000

0800b20c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08c      	sub	sp, #48	; 0x30
 800b210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800b212:	f107 0320 	add.w	r3, r7, #32
 800b216:	2200      	movs	r2, #0
 800b218:	601a      	str	r2, [r3, #0]
 800b21a:	605a      	str	r2, [r3, #4]
 800b21c:	609a      	str	r2, [r3, #8]
 800b21e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b220:	1d3b      	adds	r3, r7, #4
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	605a      	str	r2, [r3, #4]
 800b228:	609a      	str	r2, [r3, #8]
 800b22a:	60da      	str	r2, [r3, #12]
 800b22c:	611a      	str	r2, [r3, #16]
 800b22e:	615a      	str	r2, [r3, #20]
 800b230:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800b232:	4b24      	ldr	r3, [pc, #144]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b234:	4a24      	ldr	r2, [pc, #144]	; (800b2c8 <MX_TIM12_Init+0xbc>)
 800b236:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 7;
 800b238:	4b22      	ldr	r3, [pc, #136]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b23a:	2207      	movs	r2, #7
 800b23c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b23e:	4b21      	ldr	r3, [pc, #132]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b240:	2200      	movs	r2, #0
 800b242:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800b244:	4b1f      	ldr	r3, [pc, #124]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b246:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b24a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b24c:	4b1d      	ldr	r3, [pc, #116]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b24e:	2200      	movs	r2, #0
 800b250:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b252:	4b1c      	ldr	r3, [pc, #112]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b254:	2200      	movs	r2, #0
 800b256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800b258:	481a      	ldr	r0, [pc, #104]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b25a:	f7fb f975 	bl	8006548 <HAL_TIM_Base_Init>
 800b25e:	4603      	mov	r3, r0
 800b260:	2b00      	cmp	r3, #0
 800b262:	d001      	beq.n	800b268 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800b264:	f001 fba2 	bl	800c9ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800b268:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b26c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800b26e:	f107 0320 	add.w	r3, r7, #32
 800b272:	4619      	mov	r1, r3
 800b274:	4813      	ldr	r0, [pc, #76]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b276:	f7fb fea9 	bl	8006fcc <HAL_TIM_ConfigClockSource>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d001      	beq.n	800b284 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800b280:	f001 fb94 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 800b284:	480f      	ldr	r0, [pc, #60]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b286:	f7fb f9d2 	bl	800662e <HAL_TIM_OC_Init>
 800b28a:	4603      	mov	r3, r0
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d001      	beq.n	800b294 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800b290:	f001 fb8c 	bl	800c9ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800b294:	2300      	movs	r3, #0
 800b296:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800b298:	2300      	movs	r3, #0
 800b29a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b29c:	2300      	movs	r3, #0
 800b29e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b2a4:	1d3b      	adds	r3, r7, #4
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	4619      	mov	r1, r3
 800b2aa:	4806      	ldr	r0, [pc, #24]	; (800b2c4 <MX_TIM12_Init+0xb8>)
 800b2ac:	f7fb fccc 	bl	8006c48 <HAL_TIM_OC_ConfigChannel>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d001      	beq.n	800b2ba <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800b2b6:	f001 fb79 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800b2ba:	bf00      	nop
 800b2bc:	3730      	adds	r7, #48	; 0x30
 800b2be:	46bd      	mov	sp, r7
 800b2c0:	bd80      	pop	{r7, pc}
 800b2c2:	bf00      	nop
 800b2c4:	20001198 	.word	0x20001198
 800b2c8:	40001800 	.word	0x40001800

0800b2cc <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b084      	sub	sp, #16
 800b2d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800b2d2:	463b      	mov	r3, r7
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	605a      	str	r2, [r3, #4]
 800b2da:	609a      	str	r2, [r3, #8]
 800b2dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800b2de:	4b1c      	ldr	r3, [pc, #112]	; (800b350 <MX_TIM13_Init+0x84>)
 800b2e0:	4a1c      	ldr	r2, [pc, #112]	; (800b354 <MX_TIM13_Init+0x88>)
 800b2e2:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800b2e4:	4b1a      	ldr	r3, [pc, #104]	; (800b350 <MX_TIM13_Init+0x84>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b2ea:	4b19      	ldr	r3, [pc, #100]	; (800b350 <MX_TIM13_Init+0x84>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 800b2f0:	4b17      	ldr	r3, [pc, #92]	; (800b350 <MX_TIM13_Init+0x84>)
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b2f6:	4b16      	ldr	r3, [pc, #88]	; (800b350 <MX_TIM13_Init+0x84>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b2fc:	4b14      	ldr	r3, [pc, #80]	; (800b350 <MX_TIM13_Init+0x84>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800b302:	4813      	ldr	r0, [pc, #76]	; (800b350 <MX_TIM13_Init+0x84>)
 800b304:	f7fb f920 	bl	8006548 <HAL_TIM_Base_Init>
 800b308:	4603      	mov	r3, r0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d001      	beq.n	800b312 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 800b30e:	f001 fb4d 	bl	800c9ac <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800b312:	480f      	ldr	r0, [pc, #60]	; (800b350 <MX_TIM13_Init+0x84>)
 800b314:	f7fb fa72 	bl	80067fc <HAL_TIM_IC_Init>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 800b31e:	f001 fb45 	bl	800c9ac <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800b322:	2300      	movs	r3, #0
 800b324:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800b326:	2301      	movs	r3, #1
 800b328:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800b332:	463b      	mov	r3, r7
 800b334:	2200      	movs	r2, #0
 800b336:	4619      	mov	r1, r3
 800b338:	4805      	ldr	r0, [pc, #20]	; (800b350 <MX_TIM13_Init+0x84>)
 800b33a:	f7fb fce5 	bl	8006d08 <HAL_TIM_IC_ConfigChannel>
 800b33e:	4603      	mov	r3, r0
 800b340:	2b00      	cmp	r3, #0
 800b342:	d001      	beq.n	800b348 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 800b344:	f001 fb32 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800b348:	bf00      	nop
 800b34a:	3710      	adds	r7, #16
 800b34c:	46bd      	mov	sp, r7
 800b34e:	bd80      	pop	{r7, pc}
 800b350:	20000e24 	.word	0x20000e24
 800b354:	40001c00 	.word	0x40001c00

0800b358 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800b35c:	4b11      	ldr	r3, [pc, #68]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b35e:	4a12      	ldr	r2, [pc, #72]	; (800b3a8 <MX_USART3_UART_Init+0x50>)
 800b360:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800b362:	4b10      	ldr	r3, [pc, #64]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800b368:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800b36a:	4b0e      	ldr	r3, [pc, #56]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b36c:	2200      	movs	r2, #0
 800b36e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800b370:	4b0c      	ldr	r3, [pc, #48]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b372:	2200      	movs	r2, #0
 800b374:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800b376:	4b0b      	ldr	r3, [pc, #44]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b378:	2200      	movs	r2, #0
 800b37a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800b37c:	4b09      	ldr	r3, [pc, #36]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b37e:	220c      	movs	r2, #12
 800b380:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b382:	4b08      	ldr	r3, [pc, #32]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b384:	2200      	movs	r2, #0
 800b386:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800b388:	4b06      	ldr	r3, [pc, #24]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b38a:	2200      	movs	r2, #0
 800b38c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800b38e:	4805      	ldr	r0, [pc, #20]	; (800b3a4 <MX_USART3_UART_Init+0x4c>)
 800b390:	f7fc fc5d 	bl	8007c4e <HAL_UART_Init>
 800b394:	4603      	mov	r3, r0
 800b396:	2b00      	cmp	r3, #0
 800b398:	d001      	beq.n	800b39e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800b39a:	f001 fb07 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800b39e:	bf00      	nop
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	200006cc 	.word	0x200006cc
 800b3a8:	40004800 	.word	0x40004800

0800b3ac <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b3b0:	4b14      	ldr	r3, [pc, #80]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b3b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b3b8:	4b12      	ldr	r3, [pc, #72]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3ba:	2204      	movs	r2, #4
 800b3bc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b3be:	4b11      	ldr	r3, [pc, #68]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3c0:	2202      	movs	r2, #2
 800b3c2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b3c4:	4b0f      	ldr	r3, [pc, #60]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b3ca:	4b0e      	ldr	r3, [pc, #56]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3cc:	2202      	movs	r2, #2
 800b3ce:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b3d0:	4b0c      	ldr	r3, [pc, #48]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b3d6:	4b0b      	ldr	r3, [pc, #44]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b3dc:	4b09      	ldr	r3, [pc, #36]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b3e2:	4b08      	ldr	r3, [pc, #32]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b3e8:	4b06      	ldr	r3, [pc, #24]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b3ee:	4805      	ldr	r0, [pc, #20]	; (800b404 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800b3f0:	f7f9 fae5 	bl	80049be <HAL_PCD_Init>
 800b3f4:	4603      	mov	r3, r0
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d001      	beq.n	800b3fe <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800b3fa:	f001 fad7 	bl	800c9ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800b3fe:	bf00      	nop
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	200007a8 	.word	0x200007a8

0800b408 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b082      	sub	sp, #8
 800b40c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800b40e:	2300      	movs	r3, #0
 800b410:	607b      	str	r3, [r7, #4]
 800b412:	4b1f      	ldr	r3, [pc, #124]	; (800b490 <MX_DMA_Init+0x88>)
 800b414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b416:	4a1e      	ldr	r2, [pc, #120]	; (800b490 <MX_DMA_Init+0x88>)
 800b418:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b41c:	6313      	str	r3, [r2, #48]	; 0x30
 800b41e:	4b1c      	ldr	r3, [pc, #112]	; (800b490 <MX_DMA_Init+0x88>)
 800b420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b422:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b426:	607b      	str	r3, [r7, #4]
 800b428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800b42a:	2300      	movs	r3, #0
 800b42c:	603b      	str	r3, [r7, #0]
 800b42e:	4b18      	ldr	r3, [pc, #96]	; (800b490 <MX_DMA_Init+0x88>)
 800b430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b432:	4a17      	ldr	r2, [pc, #92]	; (800b490 <MX_DMA_Init+0x88>)
 800b434:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b438:	6313      	str	r3, [r2, #48]	; 0x30
 800b43a:	4b15      	ldr	r3, [pc, #84]	; (800b490 <MX_DMA_Init+0x88>)
 800b43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b43e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b442:	603b      	str	r3, [r7, #0]
 800b444:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800b446:	2200      	movs	r2, #0
 800b448:	2100      	movs	r1, #0
 800b44a:	200e      	movs	r0, #14
 800b44c:	f7f7 fd2f 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800b450:	200e      	movs	r0, #14
 800b452:	f7f7 fd48 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800b456:	2200      	movs	r2, #0
 800b458:	2100      	movs	r1, #0
 800b45a:	2038      	movs	r0, #56	; 0x38
 800b45c:	f7f7 fd27 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800b460:	2038      	movs	r0, #56	; 0x38
 800b462:	f7f7 fd40 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800b466:	2200      	movs	r2, #0
 800b468:	2100      	movs	r1, #0
 800b46a:	2039      	movs	r0, #57	; 0x39
 800b46c:	f7f7 fd1f 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800b470:	2039      	movs	r0, #57	; 0x39
 800b472:	f7f7 fd38 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800b476:	2200      	movs	r2, #0
 800b478:	2100      	movs	r1, #0
 800b47a:	203a      	movs	r0, #58	; 0x3a
 800b47c:	f7f7 fd17 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800b480:	203a      	movs	r0, #58	; 0x3a
 800b482:	f7f7 fd30 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 800b486:	bf00      	nop
 800b488:	3708      	adds	r7, #8
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	40023800 	.word	0x40023800

0800b494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b08c      	sub	sp, #48	; 0x30
 800b498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b49a:	f107 031c 	add.w	r3, r7, #28
 800b49e:	2200      	movs	r2, #0
 800b4a0:	601a      	str	r2, [r3, #0]
 800b4a2:	605a      	str	r2, [r3, #4]
 800b4a4:	609a      	str	r2, [r3, #8]
 800b4a6:	60da      	str	r2, [r3, #12]
 800b4a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61bb      	str	r3, [r7, #24]
 800b4ae:	4b61      	ldr	r3, [pc, #388]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4b2:	4a60      	ldr	r2, [pc, #384]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4b4:	f043 0310 	orr.w	r3, r3, #16
 800b4b8:	6313      	str	r3, [r2, #48]	; 0x30
 800b4ba:	4b5e      	ldr	r3, [pc, #376]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4be:	f003 0310 	and.w	r3, r3, #16
 800b4c2:	61bb      	str	r3, [r7, #24]
 800b4c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
 800b4ca:	4b5a      	ldr	r3, [pc, #360]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ce:	4a59      	ldr	r2, [pc, #356]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4d0:	f043 0304 	orr.w	r3, r3, #4
 800b4d4:	6313      	str	r3, [r2, #48]	; 0x30
 800b4d6:	4b57      	ldr	r3, [pc, #348]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4da:	f003 0304 	and.w	r3, r3, #4
 800b4de:	617b      	str	r3, [r7, #20]
 800b4e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	613b      	str	r3, [r7, #16]
 800b4e6:	4b53      	ldr	r3, [pc, #332]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ea:	4a52      	ldr	r2, [pc, #328]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4f0:	6313      	str	r3, [r2, #48]	; 0x30
 800b4f2:	4b50      	ldr	r3, [pc, #320]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fa:	613b      	str	r3, [r7, #16]
 800b4fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4fe:	2300      	movs	r3, #0
 800b500:	60fb      	str	r3, [r7, #12]
 800b502:	4b4c      	ldr	r3, [pc, #304]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b506:	4a4b      	ldr	r2, [pc, #300]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b508:	f043 0301 	orr.w	r3, r3, #1
 800b50c:	6313      	str	r3, [r2, #48]	; 0x30
 800b50e:	4b49      	ldr	r3, [pc, #292]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	60fb      	str	r3, [r7, #12]
 800b518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b51a:	2300      	movs	r3, #0
 800b51c:	60bb      	str	r3, [r7, #8]
 800b51e:	4b45      	ldr	r3, [pc, #276]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b522:	4a44      	ldr	r2, [pc, #272]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b524:	f043 0302 	orr.w	r3, r3, #2
 800b528:	6313      	str	r3, [r2, #48]	; 0x30
 800b52a:	4b42      	ldr	r3, [pc, #264]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b52c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b52e:	f003 0302 	and.w	r3, r3, #2
 800b532:	60bb      	str	r3, [r7, #8]
 800b534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b536:	2300      	movs	r3, #0
 800b538:	607b      	str	r3, [r7, #4]
 800b53a:	4b3e      	ldr	r3, [pc, #248]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b53c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53e:	4a3d      	ldr	r2, [pc, #244]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b540:	f043 0308 	orr.w	r3, r3, #8
 800b544:	6313      	str	r3, [r2, #48]	; 0x30
 800b546:	4b3b      	ldr	r3, [pc, #236]	; (800b634 <MX_GPIO_Init+0x1a0>)
 800b548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b54a:	f003 0308 	and.w	r3, r3, #8
 800b54e:	607b      	str	r3, [r7, #4]
 800b550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 800b552:	2200      	movs	r2, #0
 800b554:	f24c 0118 	movw	r1, #49176	; 0xc018
 800b558:	4837      	ldr	r0, [pc, #220]	; (800b638 <MX_GPIO_Init+0x1a4>)
 800b55a:	f7f8 fa5d 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b55e:	2200      	movs	r2, #0
 800b560:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b564:	4835      	ldr	r0, [pc, #212]	; (800b63c <MX_GPIO_Init+0x1a8>)
 800b566:	f7f8 fa57 	bl	8003a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800b56a:	2200      	movs	r2, #0
 800b56c:	f64b 0180 	movw	r1, #47232	; 0xb880
 800b570:	4833      	ldr	r0, [pc, #204]	; (800b640 <MX_GPIO_Init+0x1ac>)
 800b572:	f7f8 fa51 	bl	8003a18 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 800b576:	f24c 0318 	movw	r3, #49176	; 0xc018
 800b57a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b57c:	2301      	movs	r3, #1
 800b57e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b580:	2300      	movs	r3, #0
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b584:	2300      	movs	r3, #0
 800b586:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b588:	f107 031c 	add.w	r3, r7, #28
 800b58c:	4619      	mov	r1, r3
 800b58e:	482a      	ldr	r0, [pc, #168]	; (800b638 <MX_GPIO_Init+0x1a4>)
 800b590:	f7f8 f8a8 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b594:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b598:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b59a:	2301      	movs	r3, #1
 800b59c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b5a6:	f107 031c 	add.w	r3, r7, #28
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	4823      	ldr	r0, [pc, #140]	; (800b63c <MX_GPIO_Init+0x1a8>)
 800b5ae:	f7f8 f899 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800b5b2:	f64b 0380 	movw	r3, #47232	; 0xb880
 800b5b6:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b5c4:	f107 031c 	add.w	r3, r7, #28
 800b5c8:	4619      	mov	r1, r3
 800b5ca:	481d      	ldr	r0, [pc, #116]	; (800b640 <MX_GPIO_Init+0x1ac>)
 800b5cc:	f7f8 f88a 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 800b5d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b5d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5da:	2300      	movs	r3, #0
 800b5dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 800b5de:	f107 031c 	add.w	r3, r7, #28
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	4816      	ldr	r0, [pc, #88]	; (800b640 <MX_GPIO_Init+0x1ac>)
 800b5e6:	f7f8 f87d 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 800b5ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b5f0:	4b14      	ldr	r3, [pc, #80]	; (800b644 <MX_GPIO_Init+0x1b0>)
 800b5f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800b5f8:	f107 031c 	add.w	r3, r7, #28
 800b5fc:	4619      	mov	r1, r3
 800b5fe:	480f      	ldr	r0, [pc, #60]	; (800b63c <MX_GPIO_Init+0x1a8>)
 800b600:	f7f8 f870 	bl	80036e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800b604:	2370      	movs	r3, #112	; 0x70
 800b606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b608:	2300      	movs	r3, #0
 800b60a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b60c:	2301      	movs	r3, #1
 800b60e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b610:	f107 031c 	add.w	r3, r7, #28
 800b614:	4619      	mov	r1, r3
 800b616:	480a      	ldr	r0, [pc, #40]	; (800b640 <MX_GPIO_Init+0x1ac>)
 800b618:	f7f8 f864 	bl	80036e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800b61c:	2200      	movs	r2, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	2017      	movs	r0, #23
 800b622:	f7f7 fc44 	bl	8002eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800b626:	2017      	movs	r0, #23
 800b628:	f7f7 fc5d 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 800b62c:	bf00      	nop
 800b62e:	3730      	adds	r7, #48	; 0x30
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}
 800b634:	40023800 	.word	0x40023800
 800b638:	40021000 	.word	0x40021000
 800b63c:	40020800 	.word	0x40020800
 800b640:	40020c00 	.word	0x40020c00
 800b644:	10110000 	.word	0x10110000

0800b648 <set_pwm_off>:

/* USER CODE BEGIN 4 */

void set_pwm_off(void){
 800b648:	b480      	push	{r7}
 800b64a:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800b64c:	4b06      	ldr	r3, [pc, #24]	; (800b668 <set_pwm_off+0x20>)
 800b64e:	2200      	movs	r2, #0
 800b650:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800b652:	4b05      	ldr	r3, [pc, #20]	; (800b668 <set_pwm_off+0x20>)
 800b654:	2200      	movs	r2, #0
 800b656:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800b658:	4b03      	ldr	r3, [pc, #12]	; (800b668 <set_pwm_off+0x20>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b65e:	bf00      	nop
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr
 800b668:	40010000 	.word	0x40010000

0800b66c <step_through_pole_angles>:

void step_through_pole_angles(void){
 800b66c:	b5b0      	push	{r4, r5, r7, lr}
 800b66e:	b0d4      	sub	sp, #336	; 0x150
 800b670:	af02      	add	r7, sp, #8
	normal_operation_enabled = false;
 800b672:	4b84      	ldr	r3, [pc, #528]	; (800b884 <step_through_pole_angles+0x218>)
 800b674:	2200      	movs	r2, #0
 800b676:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b678:	f7ff ffe6 	bl	800b648 <set_pwm_off>
	//run_motor = 0;
	HAL_Delay(100);
 800b67c:	2064      	movs	r0, #100	; 0x64
 800b67e:	f7f5 fcf5 	bl	800106c <HAL_Delay>
	uint16_t step_through_amp = 5 * PWM_1PERCENT;
 800b682:	23cd      	movs	r3, #205	; 0xcd
 800b684:	f8a7 313e 	strh.w	r3, [r7, #318]	; 0x13e
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800b688:	2300      	movs	r3, #0
 800b68a:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
 800b68e:	e07f      	b.n	800b790 <step_through_pole_angles+0x124>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800b690:	2300      	movs	r3, #0
 800b692:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
 800b696:	e072      	b.n	800b77e <step_through_pole_angles+0x112>
			set_pwm_off();
 800b698:	f7ff ffd6 	bl	800b648 <set_pwm_off>
			if (ABC==0){
 800b69c:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d104      	bne.n	800b6ae <step_through_pole_angles+0x42>
				TIM1->CCR1 = step_through_amp;
 800b6a4:	4a78      	ldr	r2, [pc, #480]	; (800b888 <step_through_pole_angles+0x21c>)
 800b6a6:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800b6aa:	6353      	str	r3, [r2, #52]	; 0x34
 800b6ac:	e00c      	b.n	800b6c8 <step_through_pole_angles+0x5c>
			}
			else if (ABC==1){
 800b6ae:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d104      	bne.n	800b6c0 <step_through_pole_angles+0x54>
				if (INVERT){
					TIM1->CCR3 = step_through_amp;
				}
				else{
					TIM1->CCR2 = step_through_amp;
 800b6b6:	4a74      	ldr	r2, [pc, #464]	; (800b888 <step_through_pole_angles+0x21c>)
 800b6b8:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800b6bc:	6393      	str	r3, [r2, #56]	; 0x38
 800b6be:	e003      	b.n	800b6c8 <step_through_pole_angles+0x5c>
			else {
				if (INVERT){
					TIM1->CCR2 = step_through_amp;
				}
				else{
					TIM1->CCR3 = step_through_amp;
 800b6c0:	4a71      	ldr	r2, [pc, #452]	; (800b888 <step_through_pole_angles+0x21c>)
 800b6c2:	f8b7 313e 	ldrh.w	r3, [r7, #318]	; 0x13e
 800b6c6:	63d3      	str	r3, [r2, #60]	; 0x3c
				}
			}
			HAL_Delay(200);
 800b6c8:	20c8      	movs	r0, #200	; 0xc8
 800b6ca:	f7f5 fccf 	bl	800106c <HAL_Delay>
			pole_angles[pole * N_PHASES + ABC]=TIM8->CNT;
 800b6ce:	4b6f      	ldr	r3, [pc, #444]	; (800b88c <step_through_pole_angles+0x220>)
 800b6d0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b6d2:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	005b      	lsls	r3, r3, #1
 800b6da:	441a      	add	r2, r3
 800b6dc:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b6e0:	4413      	add	r3, r2
 800b6e2:	b289      	uxth	r1, r1
 800b6e4:	4a6a      	ldr	r2, [pc, #424]	; (800b890 <step_through_pole_angles+0x224>)
 800b6e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]



			uint8_t buf[300];
			buf[0] = '\0';
 800b6ea:	1d3b      	adds	r3, r7, #4
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[step_through_pole_angles] pole: %d ABC: %d angle: %d \r\n", pole, ABC, TIM8->CNT);
 800b6f0:	f897 2143 	ldrb.w	r2, [r7, #323]	; 0x143
 800b6f4:	f897 1142 	ldrb.w	r1, [r7, #322]	; 0x142
 800b6f8:	4b64      	ldr	r3, [pc, #400]	; (800b88c <step_through_pole_angles+0x220>)
 800b6fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fc:	9300      	str	r3, [sp, #0]
 800b6fe:	460b      	mov	r3, r1
 800b700:	4964      	ldr	r1, [pc, #400]	; (800b894 <step_through_pole_angles+0x228>)
 800b702:	4865      	ldr	r0, [pc, #404]	; (800b898 <step_through_pole_angles+0x22c>)
 800b704:	f002 fd5e 	bl	800e1c4 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800b708:	4863      	ldr	r0, [pc, #396]	; (800b898 <step_through_pole_angles+0x22c>)
 800b70a:	f7f4 fd61 	bl	80001d0 <strlen>
 800b70e:	4604      	mov	r4, r0
 800b710:	4862      	ldr	r0, [pc, #392]	; (800b89c <step_through_pole_angles+0x230>)
 800b712:	f7f4 fd5d 	bl	80001d0 <strlen>
 800b716:	4603      	mov	r3, r0
 800b718:	4423      	add	r3, r4
 800b71a:	2b63      	cmp	r3, #99	; 0x63
 800b71c:	d804      	bhi.n	800b728 <step_through_pole_angles+0xbc>
				strcat(buf_msgs, buf_msg);
 800b71e:	495e      	ldr	r1, [pc, #376]	; (800b898 <step_through_pole_angles+0x22c>)
 800b720:	485e      	ldr	r0, [pc, #376]	; (800b89c <step_through_pole_angles+0x230>)
 800b722:	f002 fd6f 	bl	800e204 <strcat>
 800b726:	e002      	b.n	800b72e <step_through_pole_angles+0xc2>
			}
			else {
				buf_msgs[0] = '#';
 800b728:	4b5c      	ldr	r3, [pc, #368]	; (800b89c <step_through_pole_angles+0x230>)
 800b72a:	2223      	movs	r2, #35	; 0x23
 800b72c:	701a      	strb	r2, [r3, #0]
			}
			if (buf_msgs[0] != '\0'){
 800b72e:	4b5b      	ldr	r3, [pc, #364]	; (800b89c <step_through_pole_angles+0x230>)
 800b730:	781b      	ldrb	r3, [r3, #0]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d007      	beq.n	800b746 <step_through_pole_angles+0xda>
				strcat(buf, buf_msgs);
 800b736:	1d3b      	adds	r3, r7, #4
 800b738:	4958      	ldr	r1, [pc, #352]	; (800b89c <step_through_pole_angles+0x230>)
 800b73a:	4618      	mov	r0, r3
 800b73c:	f002 fd62 	bl	800e204 <strcat>
				buf_msgs[0] = '\0';
 800b740:	4b56      	ldr	r3, [pc, #344]	; (800b89c <step_through_pole_angles+0x230>)
 800b742:	2200      	movs	r2, #0
 800b744:	701a      	strb	r2, [r3, #0]
			}
			//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
			huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800b746:	4b56      	ldr	r3, [pc, #344]	; (800b8a0 <step_through_pole_angles+0x234>)
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	695a      	ldr	r2, [r3, #20]
 800b74c:	4b54      	ldr	r3, [pc, #336]	; (800b8a0 <step_through_pole_angles+0x234>)
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b754:	615a      	str	r2, [r3, #20]
			HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800b756:	1d3c      	adds	r4, r7, #4
 800b758:	4b51      	ldr	r3, [pc, #324]	; (800b8a0 <step_through_pole_angles+0x234>)
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	3304      	adds	r3, #4
 800b75e:	461d      	mov	r5, r3
 800b760:	1d3b      	adds	r3, r7, #4
 800b762:	4618      	mov	r0, r3
 800b764:	f7f4 fd34 	bl	80001d0 <strlen>
 800b768:	4603      	mov	r3, r0
 800b76a:	462a      	mov	r2, r5
 800b76c:	4621      	mov	r1, r4
 800b76e:	484d      	ldr	r0, [pc, #308]	; (800b8a4 <step_through_pole_angles+0x238>)
 800b770:	f7f7 fc82 	bl	8003078 <HAL_DMA_Start_IT>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800b774:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b778:	3301      	adds	r3, #1
 800b77a:	f887 3142 	strb.w	r3, [r7, #322]	; 0x142
 800b77e:	f897 3142 	ldrb.w	r3, [r7, #322]	; 0x142
 800b782:	2b02      	cmp	r3, #2
 800b784:	d988      	bls.n	800b698 <step_through_pole_angles+0x2c>
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800b786:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800b78a:	3301      	adds	r3, #1
 800b78c:	f887 3143 	strb.w	r3, [r7, #323]	; 0x143
 800b790:	f897 3143 	ldrb.w	r3, [r7, #323]	; 0x143
 800b794:	2b06      	cmp	r3, #6
 800b796:	f67f af7b 	bls.w	800b690 <step_through_pole_angles+0x24>

		}
	}
	set_pwm_off();
 800b79a:	f7ff ff55 	bl	800b648 <set_pwm_off>
	normal_operation_enabled = true;
 800b79e:	4b39      	ldr	r3, [pc, #228]	; (800b884 <step_through_pole_angles+0x218>)
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	701a      	strb	r2, [r3, #0]

	float sum = 0;
 800b7a4:	f04f 0300 	mov.w	r3, #0
 800b7a8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
	float enc_steps_per_A2B = (float)ENC_STEPS / (float)(N_POLES * N_PHASES);
 800b7ac:	4b3e      	ldr	r3, [pc, #248]	; (800b8a8 <step_through_pole_angles+0x23c>)
 800b7ae:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	float enc_steps_per_A2A = (float)ENC_STEPS / (float)N_POLES;
 800b7b2:	4b3e      	ldr	r3, [pc, #248]	; (800b8ac <step_through_pole_angles+0x240>)
 800b7b4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 800b7be:	e057      	b.n	800b870 <step_through_pole_angles+0x204>
		float reduced_pole_angle = pole_angles[i] - i * enc_steps_per_A2B ;//should be 95.238=ENC_STEPS/21 = ENC_STEPS/ (N_POLES * N_PHASES)
 800b7c0:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800b7c4:	4a32      	ldr	r2, [pc, #200]	; (800b890 <step_through_pole_angles+0x224>)
 800b7c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b7ca:	ee07 3a90 	vmov	s15, r3
 800b7ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b7d2:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800b7d6:	ee07 3a90 	vmov	s15, r3
 800b7da:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b7de:	edd7 7a4e 	vldr	s15, [r7, #312]	; 0x138
 800b7e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b7e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7ea:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
		if (reduced_pole_angle > -ENC_STEPS_HALF){
 800b7ee:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b7f2:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b8b0 <step_through_pole_angles+0x244>
 800b7f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7fe:	dd08      	ble.n	800b812 <step_through_pole_angles+0x1a6>
			sum += reduced_pole_angle;
 800b800:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800b804:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b80c:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
 800b810:	e00b      	b.n	800b82a <step_through_pole_angles+0x1be>
		}
		else{
			sum += reduced_pole_angle + ENC_STEPS;
 800b812:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b816:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b8b4 <step_through_pole_angles+0x248>
 800b81a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b81e:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800b822:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b826:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144
		}
		av_start_angle = sum / (float)(N_POLES * N_PHASES);
 800b82a:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800b82e:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 800b832:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b836:	4b20      	ldr	r3, [pc, #128]	; (800b8b8 <step_through_pole_angles+0x24c>)
 800b838:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800b83c:	e009      	b.n	800b852 <step_through_pole_angles+0x1e6>
			av_start_angle -= enc_steps_per_A2A;
 800b83e:	4b1e      	ldr	r3, [pc, #120]	; (800b8b8 <step_through_pole_angles+0x24c>)
 800b840:	ed93 7a00 	vldr	s14, [r3]
 800b844:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800b848:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b84c:	4b1a      	ldr	r3, [pc, #104]	; (800b8b8 <step_through_pole_angles+0x24c>)
 800b84e:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800b852:	4b19      	ldr	r3, [pc, #100]	; (800b8b8 <step_through_pole_angles+0x24c>)
 800b854:	edd3 7a00 	vldr	s15, [r3]
 800b858:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 800b85c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b864:	d4eb      	bmi.n	800b83e <step_through_pole_angles+0x1d2>
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800b866:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800b86a:	3301      	adds	r3, #1
 800b86c:	f887 3141 	strb.w	r3, [r7, #321]	; 0x141
 800b870:	f897 3141 	ldrb.w	r3, [r7, #321]	; 0x141
 800b874:	2b14      	cmp	r3, #20
 800b876:	d9a3      	bls.n	800b7c0 <step_through_pole_angles+0x154>
		//float av_angle_first_A =

	}


}
 800b878:	bf00      	nop
 800b87a:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b87e:	46bd      	mov	sp, r7
 800b880:	bdb0      	pop	{r4, r5, r7, pc}
 800b882:	bf00      	nop
 800b884:	20000035 	.word	0x20000035
 800b888:	40010000 	.word	0x40010000
 800b88c:	40010400 	.word	0x40010400
 800b890:	200002c0 	.word	0x200002c0
 800b894:	08010e70 	.word	0x08010e70
 800b898:	200011f0 	.word	0x200011f0
 800b89c:	20001014 	.word	0x20001014
 800b8a0:	200006cc 	.word	0x200006cc
 800b8a4:	20000c70 	.word	0x20000c70
 800b8a8:	42be79e8 	.word	0x42be79e8
 800b8ac:	438edb6e 	.word	0x438edb6e
 800b8b0:	c47a0000 	.word	0xc47a0000
 800b8b4:	44fa0000 	.word	0x44fa0000
 800b8b8:	20000f90 	.word	0x20000f90

0800b8bc <step_through_pwm_percent>:

void step_through_pwm_percent(void){
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
	normal_operation_enabled = false;
 800b8c2:	4b16      	ldr	r3, [pc, #88]	; (800b91c <step_through_pwm_percent+0x60>)
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b8c8:	f7ff febe 	bl	800b648 <set_pwm_off>
	HAL_Delay(100);
 800b8cc:	2064      	movs	r0, #100	; 0x64
 800b8ce:	f7f5 fbcd 	bl	800106c <HAL_Delay>
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	71fb      	strb	r3, [r7, #7]
 800b8d6:	e014      	b.n	800b902 <step_through_pwm_percent+0x46>
		TIM1->CCR1 = percent * PWM_1PERCENT;
 800b8d8:	79fa      	ldrb	r2, [r7, #7]
 800b8da:	4613      	mov	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	4413      	add	r3, r2
 800b8e0:	00db      	lsls	r3, r3, #3
 800b8e2:	441a      	add	r2, r3
 800b8e4:	4b0e      	ldr	r3, [pc, #56]	; (800b920 <step_through_pwm_percent+0x64>)
 800b8e6:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 800b8e8:	20c8      	movs	r0, #200	; 0xc8
 800b8ea:	f7f5 fbbf 	bl	800106c <HAL_Delay>
		pole_angle_by_amp[percent]=TIM8->CNT;
 800b8ee:	4b0d      	ldr	r3, [pc, #52]	; (800b924 <step_through_pwm_percent+0x68>)
 800b8f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8f2:	79fb      	ldrb	r3, [r7, #7]
 800b8f4:	b291      	uxth	r1, r2
 800b8f6:	4a0c      	ldr	r2, [pc, #48]	; (800b928 <step_through_pwm_percent+0x6c>)
 800b8f8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800b8fc:	79fb      	ldrb	r3, [r7, #7]
 800b8fe:	3301      	adds	r3, #1
 800b900:	71fb      	strb	r3, [r7, #7]
 800b902:	79fb      	ldrb	r3, [r7, #7]
 800b904:	2b09      	cmp	r3, #9
 800b906:	d9e7      	bls.n	800b8d8 <step_through_pwm_percent+0x1c>
	}
	set_pwm_off();
 800b908:	f7ff fe9e 	bl	800b648 <set_pwm_off>
	normal_operation_enabled = true;
 800b90c:	4b03      	ldr	r3, [pc, #12]	; (800b91c <step_through_pwm_percent+0x60>)
 800b90e:	2201      	movs	r2, #1
 800b910:	701a      	strb	r2, [r3, #0]
}
 800b912:	bf00      	nop
 800b914:	3708      	adds	r7, #8
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop
 800b91c:	20000035 	.word	0x20000035
 800b920:	40010000 	.word	0x40010000
 800b924:	40010400 	.word	0x40010400
 800b928:	20000f68 	.word	0x20000f68
 800b92c:	00000000 	.word	0x00000000

0800b930 <explore_limits>:

void explore_limits(void){
 800b930:	b590      	push	{r4, r7, lr}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
	amp = 0;
 800b936:	4b3e      	ldr	r3, [pc, #248]	; (800ba30 <explore_limits+0x100>)
 800b938:	f04f 0200 	mov.w	r2, #0
 800b93c:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800b93e:	2064      	movs	r0, #100	; 0x64
 800b940:	f7f5 fb94 	bl	800106c <HAL_Delay>
	for (int8_t dir=-1;dir<2; dir+=2){
 800b944:	23ff      	movs	r3, #255	; 0xff
 800b946:	73fb      	strb	r3, [r7, #15]
 800b948:	e063      	b.n	800ba12 <explore_limits+0xe2>
		HAL_Delay(500);
 800b94a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b94e:	f7f5 fb8d 	bl	800106c <HAL_Delay>
		amp= dir * 0.1;
 800b952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b956:	4618      	mov	r0, r3
 800b958:	f7f4 fde4 	bl	8000524 <__aeabi_i2d>
 800b95c:	a332      	add	r3, pc, #200	; (adr r3, 800ba28 <explore_limits+0xf8>)
 800b95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b962:	f7f4 fe49 	bl	80005f8 <__aeabi_dmul>
 800b966:	4603      	mov	r3, r0
 800b968:	460c      	mov	r4, r1
 800b96a:	4618      	mov	r0, r3
 800b96c:	4621      	mov	r1, r4
 800b96e:	f7f5 f93b 	bl	8000be8 <__aeabi_d2f>
 800b972:	4602      	mov	r2, r0
 800b974:	4b2e      	ldr	r3, [pc, #184]	; (800ba30 <explore_limits+0x100>)
 800b976:	601a      	str	r2, [r3, #0]
		for (int16_t i = 0; i<50; i++){
 800b978:	2300      	movs	r3, #0
 800b97a:	81bb      	strh	r3, [r7, #12]
 800b97c:	e041      	b.n	800ba02 <explore_limits+0xd2>
			HAL_Delay(100);
 800b97e:	2064      	movs	r0, #100	; 0x64
 800b980:	f7f5 fb74 	bl	800106c <HAL_Delay>
			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 800b984:	2101      	movs	r1, #1
 800b986:	482b      	ldr	r0, [pc, #172]	; (800ba34 <explore_limits+0x104>)
 800b988:	f7f6 f97a 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800b98c:	60b8      	str	r0, [r7, #8]
			if (val_I > 2100 || val_I < 1980){
 800b98e:	68bb      	ldr	r3, [r7, #8]
 800b990:	f640 0234 	movw	r2, #2100	; 0x834
 800b994:	4293      	cmp	r3, r2
 800b996:	d804      	bhi.n	800b9a2 <explore_limits+0x72>
 800b998:	68bb      	ldr	r3, [r7, #8]
 800b99a:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800b99e:	4293      	cmp	r3, r2
 800b9a0:	d829      	bhi.n	800b9f6 <explore_limits+0xc6>
				amp=0;
 800b9a2:	4b23      	ldr	r3, [pc, #140]	; (800ba30 <explore_limits+0x100>)
 800b9a4:	f04f 0200 	mov.w	r2, #0
 800b9a8:	601a      	str	r2, [r3, #0]
				uint32_t EncVal_lim = TIM8->CNT;
 800b9aa:	4b23      	ldr	r3, [pc, #140]	; (800ba38 <explore_limits+0x108>)
 800b9ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9ae:	607b      	str	r3, [r7, #4]
				if (dir==-1){
 800b9b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b9b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9b8:	d10e      	bne.n	800b9d8 <explore_limits+0xa8>
					Enc_Val_total_lim_m = EncVal_lim + rotation_counter * ENC_STEPS;
 800b9ba:	4b20      	ldr	r3, [pc, #128]	; (800ba3c <explore_limits+0x10c>)
 800b9bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9c0:	461a      	mov	r2, r3
 800b9c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b9c6:	fb03 f302 	mul.w	r3, r3, r2
 800b9ca:	461a      	mov	r2, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	461a      	mov	r2, r3
 800b9d2:	4b1b      	ldr	r3, [pc, #108]	; (800ba40 <explore_limits+0x110>)
 800b9d4:	601a      	str	r2, [r3, #0]
				else{
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;

				}

				break;
 800b9d6:	e018      	b.n	800ba0a <explore_limits+0xda>
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;
 800b9d8:	4b18      	ldr	r3, [pc, #96]	; (800ba3c <explore_limits+0x10c>)
 800b9da:	f9b3 3000 	ldrsh.w	r3, [r3]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b9e4:	fb03 f302 	mul.w	r3, r3, r2
 800b9e8:	461a      	mov	r2, r3
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	461a      	mov	r2, r3
 800b9f0:	4b14      	ldr	r3, [pc, #80]	; (800ba44 <explore_limits+0x114>)
 800b9f2:	601a      	str	r2, [r3, #0]
				break;
 800b9f4:	e009      	b.n	800ba0a <explore_limits+0xda>
		for (int16_t i = 0; i<50; i++){
 800b9f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b9fa:	b29b      	uxth	r3, r3
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	b29b      	uxth	r3, r3
 800ba00:	81bb      	strh	r3, [r7, #12]
 800ba02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ba06:	2b31      	cmp	r3, #49	; 0x31
 800ba08:	ddb9      	ble.n	800b97e <explore_limits+0x4e>
	for (int8_t dir=-1;dir<2; dir+=2){
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
 800ba0c:	3302      	adds	r3, #2
 800ba0e:	b2db      	uxtb	r3, r3
 800ba10:	73fb      	strb	r3, [r7, #15]
 800ba12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	dd97      	ble.n	800b94a <explore_limits+0x1a>
			}
		}
	}

	amp = 0.01;
 800ba1a:	4b05      	ldr	r3, [pc, #20]	; (800ba30 <explore_limits+0x100>)
 800ba1c:	4a0a      	ldr	r2, [pc, #40]	; (800ba48 <explore_limits+0x118>)
 800ba1e:	601a      	str	r2, [r3, #0]
}
 800ba20:	bf00      	nop
 800ba22:	3714      	adds	r7, #20
 800ba24:	46bd      	mov	sp, r7
 800ba26:	bd90      	pop	{r4, r7, pc}
 800ba28:	9999999a 	.word	0x9999999a
 800ba2c:	3fb99999 	.word	0x3fb99999
 800ba30:	20000010 	.word	0x20000010
 800ba34:	20000d94 	.word	0x20000d94
 800ba38:	40010400 	.word	0x40010400
 800ba3c:	2000023c 	.word	0x2000023c
 800ba40:	20000278 	.word	0x20000278
 800ba44:	2000027c 	.word	0x2000027c
 800ba48:	3c23d70a 	.word	0x3c23d70a

0800ba4c <delay_SPI>:
    //for (i=0; i<3195; i++);
  	for (i=0; i<1; i++);
  }
}

void delay_SPI(void){
 800ba4c:	b480      	push	{r7}
 800ba4e:	b083      	sub	sp, #12
 800ba50:	af00      	add	r7, sp, #0
	int g =0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800ba56:	2300      	movs	r3, #0
 800ba58:	603b      	str	r3, [r7, #0]
 800ba5a:	e005      	b.n	800ba68 <delay_SPI+0x1c>
		g++;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	3301      	adds	r3, #1
 800ba60:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800ba62:	683b      	ldr	r3, [r7, #0]
 800ba64:	3301      	adds	r3, #1
 800ba66:	603b      	str	r3, [r7, #0]
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	2b13      	cmp	r3, #19
 800ba6c:	ddf6      	ble.n	800ba5c <delay_SPI+0x10>
	}
}
 800ba6e:	bf00      	nop
 800ba70:	370c      	adds	r7, #12
 800ba72:	46bd      	mov	sp, r7
 800ba74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba78:	4770      	bx	lr
	...

0800ba7c <playSound>:
void myDelay(void){
	HAL_Delay(1);

}

void playSound(uint16_t periode, uint16_t volume, uint16_t cycles){
 800ba7c:	b580      	push	{r7, lr}
 800ba7e:	b084      	sub	sp, #16
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	4603      	mov	r3, r0
 800ba84:	80fb      	strh	r3, [r7, #6]
 800ba86:	460b      	mov	r3, r1
 800ba88:	80bb      	strh	r3, [r7, #4]
 800ba8a:	4613      	mov	r3, r2
 800ba8c:	807b      	strh	r3, [r7, #2]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);
	normal_operation_enabled = false;
 800ba8e:	4b17      	ldr	r3, [pc, #92]	; (800baec <playSound+0x70>)
 800ba90:	2200      	movs	r2, #0
 800ba92:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800ba94:	f7ff fdd8 	bl	800b648 <set_pwm_off>
	HAL_Delay(10);
 800ba98:	200a      	movs	r0, #10
 800ba9a:	f7f5 fae7 	bl	800106c <HAL_Delay>

	for (uint16_t i=0; i<cycles; i++){
 800ba9e:	2300      	movs	r3, #0
 800baa0:	81fb      	strh	r3, [r7, #14]
 800baa2:	e016      	b.n	800bad2 <playSound+0x56>
		TIM1->CCR1 = 0; //takes<150ns
 800baa4:	4b12      	ldr	r3, [pc, #72]	; (800baf0 <playSound+0x74>)
 800baa6:	2200      	movs	r2, #0
 800baa8:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800baaa:	4a11      	ldr	r2, [pc, #68]	; (800baf0 <playSound+0x74>)
 800baac:	88bb      	ldrh	r3, [r7, #4]
 800baae:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 800bab0:	88fb      	ldrh	r3, [r7, #6]
 800bab2:	4618      	mov	r0, r3
 800bab4:	f7f5 fada 	bl	800106c <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800bab8:	4a0d      	ldr	r2, [pc, #52]	; (800baf0 <playSound+0x74>)
 800baba:	88bb      	ldrh	r3, [r7, #4]
 800babc:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 800babe:	4b0c      	ldr	r3, [pc, #48]	; (800baf0 <playSound+0x74>)
 800bac0:	2200      	movs	r2, #0
 800bac2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 800bac4:	88fb      	ldrh	r3, [r7, #6]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7f5 fad0 	bl	800106c <HAL_Delay>
	for (uint16_t i=0; i<cycles; i++){
 800bacc:	89fb      	ldrh	r3, [r7, #14]
 800bace:	3301      	adds	r3, #1
 800bad0:	81fb      	strh	r3, [r7, #14]
 800bad2:	89fa      	ldrh	r2, [r7, #14]
 800bad4:	887b      	ldrh	r3, [r7, #2]
 800bad6:	429a      	cmp	r2, r3
 800bad8:	d3e4      	bcc.n	800baa4 <playSound+0x28>
	}
	set_pwm_off();
 800bada:	f7ff fdb5 	bl	800b648 <set_pwm_off>
	normal_operation_enabled = true;
 800bade:	4b03      	ldr	r3, [pc, #12]	; (800baec <playSound+0x70>)
 800bae0:	2201      	movs	r2, #1
 800bae2:	701a      	strb	r2, [r3, #0]



	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 800bae4:	bf00      	nop
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	20000035 	.word	0x20000035
 800baf0:	40010000 	.word	0x40010000
 800baf4:	00000000 	.word	0x00000000

0800baf8 <calc_lookup>:
//	}
//}



void calc_lookup(float *lookup){
 800baf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
	// TODO plug in a higher order harmonic and see if system gets more energy efficient or more silent
	for (int i=0; i<210; i++){
 800bb00:	2300      	movs	r3, #0
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	e051      	b.n	800bbaa <calc_lookup+0xb2>
	    lookup[i] = cos((float)i/100.0) + cos((float)i/100.0-1.047);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	ee07 3a90 	vmov	s15, r3
 800bb0c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb10:	ee17 0a90 	vmov	r0, s15
 800bb14:	f7f4 fd18 	bl	8000548 <__aeabi_f2d>
 800bb18:	f04f 0200 	mov.w	r2, #0
 800bb1c:	4b28      	ldr	r3, [pc, #160]	; (800bbc0 <calc_lookup+0xc8>)
 800bb1e:	f7f4 fe95 	bl	800084c <__aeabi_ddiv>
 800bb22:	4603      	mov	r3, r0
 800bb24:	460c      	mov	r4, r1
 800bb26:	ec44 3b17 	vmov	d7, r3, r4
 800bb2a:	eeb0 0a47 	vmov.f32	s0, s14
 800bb2e:	eef0 0a67 	vmov.f32	s1, s15
 800bb32:	f003 ff39 	bl	800f9a8 <cos>
 800bb36:	ec56 5b10 	vmov	r5, r6, d0
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	ee07 3a90 	vmov	s15, r3
 800bb40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb44:	ee17 0a90 	vmov	r0, s15
 800bb48:	f7f4 fcfe 	bl	8000548 <__aeabi_f2d>
 800bb4c:	f04f 0200 	mov.w	r2, #0
 800bb50:	4b1b      	ldr	r3, [pc, #108]	; (800bbc0 <calc_lookup+0xc8>)
 800bb52:	f7f4 fe7b 	bl	800084c <__aeabi_ddiv>
 800bb56:	4603      	mov	r3, r0
 800bb58:	460c      	mov	r4, r1
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	4621      	mov	r1, r4
 800bb5e:	a316      	add	r3, pc, #88	; (adr r3, 800bbb8 <calc_lookup+0xc0>)
 800bb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb64:	f7f4 fb90 	bl	8000288 <__aeabi_dsub>
 800bb68:	4603      	mov	r3, r0
 800bb6a:	460c      	mov	r4, r1
 800bb6c:	ec44 3b17 	vmov	d7, r3, r4
 800bb70:	eeb0 0a47 	vmov.f32	s0, s14
 800bb74:	eef0 0a67 	vmov.f32	s1, s15
 800bb78:	f003 ff16 	bl	800f9a8 <cos>
 800bb7c:	ec54 3b10 	vmov	r3, r4, d0
 800bb80:	461a      	mov	r2, r3
 800bb82:	4623      	mov	r3, r4
 800bb84:	4628      	mov	r0, r5
 800bb86:	4631      	mov	r1, r6
 800bb88:	f7f4 fb80 	bl	800028c <__adddf3>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	460c      	mov	r4, r1
 800bb90:	4618      	mov	r0, r3
 800bb92:	4621      	mov	r1, r4
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	687a      	ldr	r2, [r7, #4]
 800bb9a:	18d4      	adds	r4, r2, r3
 800bb9c:	f7f5 f824 	bl	8000be8 <__aeabi_d2f>
 800bba0:	4603      	mov	r3, r0
 800bba2:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	3301      	adds	r3, #1
 800bba8:	60fb      	str	r3, [r7, #12]
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2bd1      	cmp	r3, #209	; 0xd1
 800bbae:	ddaa      	ble.n	800bb06 <calc_lookup+0xe>
	}
}
 800bbb0:	bf00      	nop
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbb8:	126e978d 	.word	0x126e978d
 800bbbc:	3ff0c083 	.word	0x3ff0c083
 800bbc0:	40590000 	.word	0x40590000

0800bbc4 <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
 800bbca:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800bbcc:	4b06      	ldr	r3, [pc, #24]	; (800bbe8 <DMAUSARTTransferComplete+0x24>)
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	695a      	ldr	r2, [r3, #20]
 800bbd2:	4b05      	ldr	r3, [pc, #20]	; (800bbe8 <DMAUSARTTransferComplete+0x24>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bbda:	615a      	str	r2, [r3, #20]
}
 800bbdc:	bf00      	nop
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr
 800bbe8:	200006cc 	.word	0x200006cc

0800bbec <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800bbec:	b480      	push	{r7}
 800bbee:	b083      	sub	sp, #12
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin;
 800bbf4:	4b04      	ldr	r3, [pc, #16]	; (800bc08 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800bbf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bbfa:	619a      	str	r2, [r3, #24]
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	40020c00 	.word	0x40020c00

0800bc0c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
 800bc14:	4b04      	ldr	r3, [pc, #16]	; (800bc28 <HAL_ADC_ConvCpltCallback+0x1c>)
 800bc16:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800bc1a:	619a      	str	r2, [r3, #24]
}
 800bc1c:	bf00      	nop
 800bc1e:	370c      	adds	r7, #12
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr
 800bc28:	40020c00 	.word	0x40020c00
 800bc2c:	00000000 	.word	0x00000000

0800bc30 <HAL_TIM_PeriodElapsedCallback>:
//	}
//}


// --- 1ms heartbeat of the microcontroller
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){
 800bc30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bc34:	b091      	sub	sp, #68	; 0x44
 800bc36:	af08      	add	r7, sp, #32
 800bc38:	6078      	str	r0, [r7, #4]

	// shift tx here to offload the can interrupt

	if (TIM5->CNT - time_of_last_pwm_update  > 95){ //100 time time_step = heartbeat
 800bc3a:	4b8f      	ldr	r3, [pc, #572]	; (800be78 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800bc3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc3e:	4a8f      	ldr	r2, [pc, #572]	; (800be7c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800bc40:	6812      	ldr	r2, [r2, #0]
 800bc42:	1a9b      	subs	r3, r3, r2
 800bc44:	2b5f      	cmp	r3, #95	; 0x5f
 800bc46:	d905      	bls.n	800bc54 <HAL_TIM_PeriodElapsedCallback+0x24>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 800bc48:	2108      	movs	r1, #8
 800bc4a:	488d      	ldr	r0, [pc, #564]	; (800be80 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800bc4c:	f7f7 fefd 	bl	8003a4a <HAL_GPIO_TogglePin>
		update_pwm();
 800bc50:	f000 fb66 	bl	800c320 <update_pwm>
	}



	if (mode_of_control == 1){
 800bc54:	4b8b      	ldr	r3, [pc, #556]	; (800be84 <HAL_TIM_PeriodElapsedCallback+0x254>)
 800bc56:	781b      	ldrb	r3, [r3, #0]
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	f040 80ff 	bne.w	800be5c <HAL_TIM_PeriodElapsedCallback+0x22c>
		float t = (float)((TIM5->CNT - last_tim5_cnt) / 100) / 1000.0;
 800bc5e:	4b86      	ldr	r3, [pc, #536]	; (800be78 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800bc60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bc62:	4b89      	ldr	r3, [pc, #548]	; (800be88 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	1ad3      	subs	r3, r2, r3
 800bc68:	4a88      	ldr	r2, [pc, #544]	; (800be8c <HAL_TIM_PeriodElapsedCallback+0x25c>)
 800bc6a:	fba2 2303 	umull	r2, r3, r2, r3
 800bc6e:	095b      	lsrs	r3, r3, #5
 800bc70:	ee07 3a90 	vmov	s15, r3
 800bc74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bc78:	eddf 6a85 	vldr	s13, [pc, #532]	; 800be90 <HAL_TIM_PeriodElapsedCallback+0x260>
 800bc7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bc80:	edc7 7a06 	vstr	s15, [r7, #24]

		int32_t desired_EncVal = pos_offset + pos_amp * sin(6.28f * pos_freq * t);
 800bc84:	4b83      	ldr	r3, [pc, #524]	; (800be94 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4618      	mov	r0, r3
 800bc8a:	f7f4 fc4b 	bl	8000524 <__aeabi_i2d>
 800bc8e:	4604      	mov	r4, r0
 800bc90:	460d      	mov	r5, r1
 800bc92:	4b81      	ldr	r3, [pc, #516]	; (800be98 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7f4 fc56 	bl	8000548 <__aeabi_f2d>
 800bc9c:	4680      	mov	r8, r0
 800bc9e:	4689      	mov	r9, r1
 800bca0:	4b7e      	ldr	r3, [pc, #504]	; (800be9c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800bca2:	edd3 7a00 	vldr	s15, [r3]
 800bca6:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800bea0 <HAL_TIM_PeriodElapsedCallback+0x270>
 800bcaa:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bcae:	edd7 7a06 	vldr	s15, [r7, #24]
 800bcb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcb6:	ee17 0a90 	vmov	r0, s15
 800bcba:	f7f4 fc45 	bl	8000548 <__aeabi_f2d>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	ec43 2b10 	vmov	d0, r2, r3
 800bcc6:	f003 feb3 	bl	800fa30 <sin>
 800bcca:	ec53 2b10 	vmov	r2, r3, d0
 800bcce:	4640      	mov	r0, r8
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	f7f4 fc91 	bl	80005f8 <__aeabi_dmul>
 800bcd6:	4602      	mov	r2, r0
 800bcd8:	460b      	mov	r3, r1
 800bcda:	4620      	mov	r0, r4
 800bcdc:	4629      	mov	r1, r5
 800bcde:	f7f4 fad5 	bl	800028c <__adddf3>
 800bce2:	4603      	mov	r3, r0
 800bce4:	460c      	mov	r4, r1
 800bce6:	4618      	mov	r0, r3
 800bce8:	4621      	mov	r1, r4
 800bcea:	f7f4 ff35 	bl	8000b58 <__aeabi_d2iz>
 800bcee:	4603      	mov	r3, r0
 800bcf0:	617b      	str	r3, [r7, #20]
//		else{
//			desired_EncVal = 0;
//		}


		int32_t Enc_Val_total = EncVal + rotation_counter * ENC_STEPS;
 800bcf2:	4b6c      	ldr	r3, [pc, #432]	; (800bea4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 800bcf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	4b6b      	ldr	r3, [pc, #428]	; (800bea8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800bcfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bd00:	4619      	mov	r1, r3
 800bd02:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800bd06:	fb03 f301 	mul.w	r3, r3, r1
 800bd0a:	4413      	add	r3, r2
 800bd0c:	613b      	str	r3, [r7, #16]
		float raw_amp = (float)(Enc_Val_total - desired_EncVal) * P_gain; //oscillates for P_gain > 0.005
 800bd0e:	693a      	ldr	r2, [r7, #16]
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	1ad3      	subs	r3, r2, r3
 800bd14:	ee07 3a90 	vmov	s15, r3
 800bd18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bd1c:	4b63      	ldr	r3, [pc, #396]	; (800beac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800bd1e:	edd3 7a00 	vldr	s15, [r3]
 800bd22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd26:	edc7 7a07 	vstr	s15, [r7, #28]
		float raw_amp_check = raw_amp;
 800bd2a:	69fb      	ldr	r3, [r7, #28]
 800bd2c:	60fb      	str	r3, [r7, #12]
//			direction = -1;
//		}
//		else{
//			direction = 1;
//		}
		if (raw_amp > pos_amp_limit){
 800bd2e:	4b60      	ldr	r3, [pc, #384]	; (800beb0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800bd30:	edd3 7a00 	vldr	s15, [r3]
 800bd34:	ed97 7a07 	vldr	s14, [r7, #28]
 800bd38:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd40:	dd02      	ble.n	800bd48 <HAL_TIM_PeriodElapsedCallback+0x118>
			raw_amp = pos_amp_limit;
 800bd42:	4b5b      	ldr	r3, [pc, #364]	; (800beb0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	61fb      	str	r3, [r7, #28]
		}
		if (raw_amp < - pos_amp_limit){
 800bd48:	4b59      	ldr	r3, [pc, #356]	; (800beb0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800bd4a:	edd3 7a00 	vldr	s15, [r3]
 800bd4e:	eef1 7a67 	vneg.f32	s15, s15
 800bd52:	ed97 7a07 	vldr	s14, [r7, #28]
 800bd56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd5e:	d506      	bpl.n	800bd6e <HAL_TIM_PeriodElapsedCallback+0x13e>
			raw_amp = - pos_amp_limit;
 800bd60:	4b53      	ldr	r3, [pc, #332]	; (800beb0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800bd62:	edd3 7a00 	vldr	s15, [r3]
 800bd66:	eef1 7a67 	vneg.f32	s15, s15
 800bd6a:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		amp = raw_amp;
 800bd6e:	4a51      	ldr	r2, [pc, #324]	; (800beb4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	6013      	str	r3, [r2, #0]

		if (buf_msgs[0] == '\0'){
 800bd74:	4b50      	ldr	r3, [pc, #320]	; (800beb8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800bd76:	781b      	ldrb	r3, [r3, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d173      	bne.n	800be64 <HAL_TIM_PeriodElapsedCallback+0x234>
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
					(int)((float)(Enc_Val_total - desired_EncVal) * 0.0005*1000),
 800bd7c:	693a      	ldr	r2, [r7, #16]
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	1ad3      	subs	r3, r2, r3
 800bd82:	ee07 3a90 	vmov	s15, r3
 800bd86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bd8a:	ee17 0a90 	vmov	r0, s15
 800bd8e:	f7f4 fbdb 	bl	8000548 <__aeabi_f2d>
 800bd92:	a337      	add	r3, pc, #220	; (adr r3, 800be70 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800bd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd98:	f7f4 fc2e 	bl	80005f8 <__aeabi_dmul>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	4618      	mov	r0, r3
 800bda2:	4621      	mov	r1, r4
 800bda4:	f04f 0200 	mov.w	r2, #0
 800bda8:	4b44      	ldr	r3, [pc, #272]	; (800bebc <HAL_TIM_PeriodElapsedCallback+0x28c>)
 800bdaa:	f7f4 fc25 	bl	80005f8 <__aeabi_dmul>
 800bdae:	4603      	mov	r3, r0
 800bdb0:	460c      	mov	r4, r1
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	4621      	mov	r1, r4
 800bdb6:	f7f4 fecf 	bl	8000b58 <__aeabi_d2iz>
 800bdba:	4606      	mov	r6, r0
					(int)(raw_amp*1000),
 800bdbc:	edd7 7a07 	vldr	s15, [r7, #28]
 800bdc0:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800be90 <HAL_TIM_PeriodElapsedCallback+0x260>
 800bdc4:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bdc8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int)(raw_amp_check*1000),
 800bdcc:	edd7 7a03 	vldr	s15, [r7, #12]
 800bdd0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800be90 <HAL_TIM_PeriodElapsedCallback+0x260>
 800bdd4:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bdd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bddc:	ee17 1a90 	vmov	r1, s15
 800bde0:	4b2d      	ldr	r3, [pc, #180]	; (800be98 <HAL_TIM_PeriodElapsedCallback+0x268>)
 800bde2:	edd3 7a00 	vldr	s15, [r3]
 800bde6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bdea:	ee17 0a90 	vmov	r0, s15
					(int)Enc_Val_total,
					(int)(pos_amp),
					(int)(pos_freq*1000),
 800bdee:	4b2b      	ldr	r3, [pc, #172]	; (800be9c <HAL_TIM_PeriodElapsedCallback+0x26c>)
 800bdf0:	edd3 7a00 	vldr	s15, [r3]
 800bdf4:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800be90 <HAL_TIM_PeriodElapsedCallback+0x260>
 800bdf8:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bdfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be00:	ee17 4a90 	vmov	r4, s15
					(int)(pos_amp_limit * 1000),
 800be04:	4b2a      	ldr	r3, [pc, #168]	; (800beb0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800be06:	edd3 7a00 	vldr	s15, [r3]
 800be0a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800be90 <HAL_TIM_PeriodElapsedCallback+0x260>
 800be0e:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800be12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be16:	ee17 5a90 	vmov	r5, s15
 800be1a:	4b1e      	ldr	r3, [pc, #120]	; (800be94 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800be1c:	681b      	ldr	r3, [r3, #0]
					(int)(pos_offset),
					(int)(P_gain*1000000));
 800be1e:	4a23      	ldr	r2, [pc, #140]	; (800beac <HAL_TIM_PeriodElapsedCallback+0x27c>)
 800be20:	edd2 7a00 	vldr	s15, [r2]
 800be24:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800bec0 <HAL_TIM_PeriodElapsedCallback+0x290>
 800be28:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800be2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be30:	ee17 2a90 	vmov	r2, s15
 800be34:	9206      	str	r2, [sp, #24]
 800be36:	9305      	str	r3, [sp, #20]
 800be38:	9504      	str	r5, [sp, #16]
 800be3a:	9403      	str	r4, [sp, #12]
 800be3c:	9002      	str	r0, [sp, #8]
 800be3e:	693b      	ldr	r3, [r7, #16]
 800be40:	9301      	str	r3, [sp, #4]
 800be42:	9100      	str	r1, [sp, #0]
 800be44:	ee16 3a90 	vmov	r3, s13
 800be48:	4632      	mov	r2, r6
 800be4a:	491e      	ldr	r1, [pc, #120]	; (800bec4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 800be4c:	481e      	ldr	r0, [pc, #120]	; (800bec8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800be4e:	f002 f9b9 	bl	800e1c4 <siprintf>
			strcat(buf_msgs, buf_msg);
 800be52:	491d      	ldr	r1, [pc, #116]	; (800bec8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 800be54:	4818      	ldr	r0, [pc, #96]	; (800beb8 <HAL_TIM_PeriodElapsedCallback+0x288>)
 800be56:	f002 f9d5 	bl	800e204 <strcat>
	}




}
 800be5a:	e003      	b.n	800be64 <HAL_TIM_PeriodElapsedCallback+0x234>
		last_tim5_cnt = TIM5->CNT;
 800be5c:	4b06      	ldr	r3, [pc, #24]	; (800be78 <HAL_TIM_PeriodElapsedCallback+0x248>)
 800be5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be60:	4a09      	ldr	r2, [pc, #36]	; (800be88 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800be62:	6013      	str	r3, [r2, #0]
}
 800be64:	bf00      	nop
 800be66:	3724      	adds	r7, #36	; 0x24
 800be68:	46bd      	mov	sp, r7
 800be6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be6e:	bf00      	nop
 800be70:	d2f1a9fc 	.word	0xd2f1a9fc
 800be74:	3f40624d 	.word	0x3f40624d
 800be78:	40000c00 	.word	0x40000c00
 800be7c:	20000284 	.word	0x20000284
 800be80:	40021000 	.word	0x40021000
 800be84:	20000276 	.word	0x20000276
 800be88:	20000280 	.word	0x20000280
 800be8c:	51eb851f 	.word	0x51eb851f
 800be90:	447a0000 	.word	0x447a0000
 800be94:	20000238 	.word	0x20000238
 800be98:	2000001c 	.word	0x2000001c
 800be9c:	20000020 	.word	0x20000020
 800bea0:	40c8f5c3 	.word	0x40c8f5c3
 800bea4:	20000e64 	.word	0x20000e64
 800bea8:	2000023c 	.word	0x2000023c
 800beac:	20000028 	.word	0x20000028
 800beb0:	20000024 	.word	0x20000024
 800beb4:	20000010 	.word	0x20000010
 800beb8:	20001014 	.word	0x20001014
 800bebc:	408f4000 	.word	0x408f4000
 800bec0:	49742400 	.word	0x49742400
 800bec4:	08010eac 	.word	0x08010eac
 800bec8:	200011f0 	.word	0x200011f0

0800becc <HAL_GPIO_EXTI_Callback>:

// --- Callback when Encoder fires the I at zero point
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800becc:	b590      	push	{r4, r7, lr}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	4603      	mov	r3, r0
 800bed4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800bed6:	88fb      	ldrh	r3, [r7, #6]
 800bed8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bedc:	d14a      	bne.n	800bf74 <HAL_GPIO_EXTI_Callback+0xa8>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
		uint16_t encoder_belief = TIM8->CNT;
 800bede:	4b28      	ldr	r3, [pc, #160]	; (800bf80 <HAL_GPIO_EXTI_Callback+0xb4>)
 800bee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee2:	81fb      	strh	r3, [r7, #14]

		if (counter0ing_at0crossing){
 800bee4:	4b27      	ldr	r3, [pc, #156]	; (800bf84 <HAL_GPIO_EXTI_Callback+0xb8>)
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d01e      	beq.n	800bf2a <HAL_GPIO_EXTI_Callback+0x5e>
			TIM8->CNT = 0;     //TODO: this could lead to an offset of 1 since the CNT value may not be set yet and get incremented thereafter if this interrupt is executed before the CNT increment.
 800beec:	4b24      	ldr	r3, [pc, #144]	; (800bf80 <HAL_GPIO_EXTI_Callback+0xb4>)
 800beee:	2200      	movs	r2, #0
 800bef0:	625a      	str	r2, [r3, #36]	; 0x24
			counter0ing_at0crossing = false;
 800bef2:	4b24      	ldr	r3, [pc, #144]	; (800bf84 <HAL_GPIO_EXTI_Callback+0xb8>)
 800bef4:	2200      	movs	r2, #0
 800bef6:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at FIRST ZERO: %d \r\n", encoder_belief);
 800bef8:	89fb      	ldrh	r3, [r7, #14]
 800befa:	461a      	mov	r2, r3
 800befc:	4922      	ldr	r1, [pc, #136]	; (800bf88 <HAL_GPIO_EXTI_Callback+0xbc>)
 800befe:	4823      	ldr	r0, [pc, #140]	; (800bf8c <HAL_GPIO_EXTI_Callback+0xc0>)
 800bf00:	f002 f960 	bl	800e1c4 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800bf04:	4821      	ldr	r0, [pc, #132]	; (800bf8c <HAL_GPIO_EXTI_Callback+0xc0>)
 800bf06:	f7f4 f963 	bl	80001d0 <strlen>
 800bf0a:	4604      	mov	r4, r0
 800bf0c:	4820      	ldr	r0, [pc, #128]	; (800bf90 <HAL_GPIO_EXTI_Callback+0xc4>)
 800bf0e:	f7f4 f95f 	bl	80001d0 <strlen>
 800bf12:	4603      	mov	r3, r0
 800bf14:	4423      	add	r3, r4
 800bf16:	2b63      	cmp	r3, #99	; 0x63
 800bf18:	d804      	bhi.n	800bf24 <HAL_GPIO_EXTI_Callback+0x58>
				strcat(buf_msgs, buf_msg);
 800bf1a:	491c      	ldr	r1, [pc, #112]	; (800bf8c <HAL_GPIO_EXTI_Callback+0xc0>)
 800bf1c:	481c      	ldr	r0, [pc, #112]	; (800bf90 <HAL_GPIO_EXTI_Callback+0xc4>)
 800bf1e:	f002 f971 	bl	800e204 <strcat>
 800bf22:	e002      	b.n	800bf2a <HAL_GPIO_EXTI_Callback+0x5e>
			}
			else {
				buf_msgs[0] = '#';
 800bf24:	4b1a      	ldr	r3, [pc, #104]	; (800bf90 <HAL_GPIO_EXTI_Callback+0xc4>)
 800bf26:	2223      	movs	r2, #35	; 0x23
 800bf28:	701a      	strb	r2, [r3, #0]
			}
		}
		val_SO1_buf_index = 0;
 800bf2a:	4b1a      	ldr	r3, [pc, #104]	; (800bf94 <HAL_GPIO_EXTI_Callback+0xc8>)
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	801a      	strh	r2, [r3, #0]

		if (encoder_belief > ENC_TOLERANCE && encoder_belief < ENC_STEPS - ENC_TOLERANCE){
 800bf30:	89fb      	ldrh	r3, [r7, #14]
 800bf32:	2b02      	cmp	r3, #2
 800bf34:	d91f      	bls.n	800bf76 <HAL_GPIO_EXTI_Callback+0xaa>
 800bf36:	89fb      	ldrh	r3, [r7, #14]
 800bf38:	f240 72cd 	movw	r2, #1997	; 0x7cd
 800bf3c:	4293      	cmp	r3, r2
 800bf3e:	d81a      	bhi.n	800bf76 <HAL_GPIO_EXTI_Callback+0xaa>
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at ZERO MISMATCH: %d \r\n", encoder_belief);
 800bf40:	89fb      	ldrh	r3, [r7, #14]
 800bf42:	461a      	mov	r2, r3
 800bf44:	4914      	ldr	r1, [pc, #80]	; (800bf98 <HAL_GPIO_EXTI_Callback+0xcc>)
 800bf46:	4811      	ldr	r0, [pc, #68]	; (800bf8c <HAL_GPIO_EXTI_Callback+0xc0>)
 800bf48:	f002 f93c 	bl	800e1c4 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800bf4c:	480f      	ldr	r0, [pc, #60]	; (800bf8c <HAL_GPIO_EXTI_Callback+0xc0>)
 800bf4e:	f7f4 f93f 	bl	80001d0 <strlen>
 800bf52:	4604      	mov	r4, r0
 800bf54:	480e      	ldr	r0, [pc, #56]	; (800bf90 <HAL_GPIO_EXTI_Callback+0xc4>)
 800bf56:	f7f4 f93b 	bl	80001d0 <strlen>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	4423      	add	r3, r4
 800bf5e:	2b63      	cmp	r3, #99	; 0x63
 800bf60:	d804      	bhi.n	800bf6c <HAL_GPIO_EXTI_Callback+0xa0>
				strcat(buf_msgs, buf_msg);
 800bf62:	490a      	ldr	r1, [pc, #40]	; (800bf8c <HAL_GPIO_EXTI_Callback+0xc0>)
 800bf64:	480a      	ldr	r0, [pc, #40]	; (800bf90 <HAL_GPIO_EXTI_Callback+0xc4>)
 800bf66:	f002 f94d 	bl	800e204 <strcat>
		}
	}
	else{
		__NOP();
	}
}
 800bf6a:	e004      	b.n	800bf76 <HAL_GPIO_EXTI_Callback+0xaa>
				buf_msgs[0] = '#';
 800bf6c:	4b08      	ldr	r3, [pc, #32]	; (800bf90 <HAL_GPIO_EXTI_Callback+0xc4>)
 800bf6e:	2223      	movs	r2, #35	; 0x23
 800bf70:	701a      	strb	r2, [r3, #0]
}
 800bf72:	e000      	b.n	800bf76 <HAL_GPIO_EXTI_Callback+0xaa>
		__NOP();
 800bf74:	bf00      	nop
}
 800bf76:	bf00      	nop
 800bf78:	3714      	adds	r7, #20
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd90      	pop	{r4, r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	40010400 	.word	0x40010400
 800bf84:	2000002c 	.word	0x2000002c
 800bf88:	08010ef4 	.word	0x08010ef4
 800bf8c:	200011f0 	.word	0x200011f0
 800bf90:	20001014 	.word	0x20001014
 800bf94:	20000264 	.word	0x20000264
 800bf98:	08010f20 	.word	0x08010f20
 800bf9c:	00000000 	.word	0x00000000

0800bfa0 <HAL_TIM_IC_CaptureCallback>:




//this is it
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 800bfa0:	b5b0      	push	{r4, r5, r7, lr}
 800bfa2:	b086      	sub	sp, #24
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
	// see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder

	//debug2_out_GPIO_Port->BSRR = debug2_out_Pin; //takes 60ns == 5 clock cycles
	//debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
	//HAL_GPIO_TogglePin(debug2_out_GPIO_Port, debug2_out_Pin);
	if(htim->Instance == TIM8){
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a92      	ldr	r2, [pc, #584]	; (800c1f8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	f040 8198 	bne.w	800c2e4 <HAL_TIM_IC_CaptureCallback+0x344>

		if (skip_update){ //TODO somehow the Callback is triggered at this strange 25% duty cycle so we just look at every second update to get a constant frequency
 800bfb4:	4b91      	ldr	r3, [pc, #580]	; (800c1fc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d003      	beq.n	800bfc4 <HAL_TIM_IC_CaptureCallback+0x24>
			skip_update = 0;
 800bfbc:	4b8f      	ldr	r3, [pc, #572]	; (800c1fc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	601a      	str	r2, [r3, #0]
	}


	//counterISR++;

}
 800bfc2:	e18f      	b.n	800c2e4 <HAL_TIM_IC_CaptureCallback+0x344>
			skip_update = 1;
 800bfc4:	4b8d      	ldr	r3, [pc, #564]	; (800c1fc <HAL_TIM_IC_CaptureCallback+0x25c>)
 800bfc6:	2201      	movs	r2, #1
 800bfc8:	601a      	str	r2, [r3, #0]
			debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800bfca:	4b8d      	ldr	r3, [pc, #564]	; (800c200 <HAL_TIM_IC_CaptureCallback+0x260>)
 800bfcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bfd0:	619a      	str	r2, [r3, #24]
			debug1_out_GPIO_Port->BSRR = debug1_out_Pin << 16U; //takes 60ns == 5 clock cycles
 800bfd2:	4b8b      	ldr	r3, [pc, #556]	; (800c200 <HAL_TIM_IC_CaptureCallback+0x260>)
 800bfd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfd8:	619a      	str	r2, [r3, #24]
			last_EncVal = EncVal;
 800bfda:	4b8a      	ldr	r3, [pc, #552]	; (800c204 <HAL_TIM_IC_CaptureCallback+0x264>)
 800bfdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 800bfe0:	4b89      	ldr	r3, [pc, #548]	; (800c208 <HAL_TIM_IC_CaptureCallback+0x268>)
 800bfe2:	801a      	strh	r2, [r3, #0]
			EncVal = TIM8->CNT;//takes 200ns
 800bfe4:	4b84      	ldr	r3, [pc, #528]	; (800c1f8 <HAL_TIM_IC_CaptureCallback+0x258>)
 800bfe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe8:	b21a      	sxth	r2, r3
 800bfea:	4b86      	ldr	r3, [pc, #536]	; (800c204 <HAL_TIM_IC_CaptureCallback+0x264>)
 800bfec:	801a      	strh	r2, [r3, #0]
			if (EncVal - last_EncVal > ENC_STEPS_HALF){
 800bfee:	4b85      	ldr	r3, [pc, #532]	; (800c204 <HAL_TIM_IC_CaptureCallback+0x264>)
 800bff0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bff4:	461a      	mov	r2, r3
 800bff6:	4b84      	ldr	r3, [pc, #528]	; (800c208 <HAL_TIM_IC_CaptureCallback+0x268>)
 800bff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800bffc:	1ad3      	subs	r3, r2, r3
 800bffe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c002:	dd09      	ble.n	800c018 <HAL_TIM_IC_CaptureCallback+0x78>
				rotation_counter--;
 800c004:	4b81      	ldr	r3, [pc, #516]	; (800c20c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800c006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	3b01      	subs	r3, #1
 800c00e:	b29b      	uxth	r3, r3
 800c010:	b21a      	sxth	r2, r3
 800c012:	4b7e      	ldr	r3, [pc, #504]	; (800c20c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800c014:	801a      	strh	r2, [r3, #0]
 800c016:	e013      	b.n	800c040 <HAL_TIM_IC_CaptureCallback+0xa0>
			else if (last_EncVal - EncVal > ENC_STEPS_HALF){
 800c018:	4b7b      	ldr	r3, [pc, #492]	; (800c208 <HAL_TIM_IC_CaptureCallback+0x268>)
 800c01a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c01e:	461a      	mov	r2, r3
 800c020:	4b78      	ldr	r3, [pc, #480]	; (800c204 <HAL_TIM_IC_CaptureCallback+0x264>)
 800c022:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c026:	1ad3      	subs	r3, r2, r3
 800c028:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c02c:	dd08      	ble.n	800c040 <HAL_TIM_IC_CaptureCallback+0xa0>
				rotation_counter++;
 800c02e:	4b77      	ldr	r3, [pc, #476]	; (800c20c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800c030:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c034:	b29b      	uxth	r3, r3
 800c036:	3301      	adds	r3, #1
 800c038:	b29b      	uxth	r3, r3
 800c03a:	b21a      	sxth	r2, r3
 800c03c:	4b73      	ldr	r3, [pc, #460]	; (800c20c <HAL_TIM_IC_CaptureCallback+0x26c>)
 800c03e:	801a      	strh	r2, [r3, #0]
			if (val_SO1_buf_index < 72){
 800c040:	4b73      	ldr	r3, [pc, #460]	; (800c210 <HAL_TIM_IC_CaptureCallback+0x270>)
 800c042:	881b      	ldrh	r3, [r3, #0]
 800c044:	2b47      	cmp	r3, #71	; 0x47
 800c046:	d810      	bhi.n	800c06a <HAL_TIM_IC_CaptureCallback+0xca>
				val_SO1_buf[val_SO1_buf_index] = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 800c048:	4b71      	ldr	r3, [pc, #452]	; (800c210 <HAL_TIM_IC_CaptureCallback+0x270>)
 800c04a:	881b      	ldrh	r3, [r3, #0]
 800c04c:	461c      	mov	r4, r3
 800c04e:	2101      	movs	r1, #1
 800c050:	4870      	ldr	r0, [pc, #448]	; (800c214 <HAL_TIM_IC_CaptureCallback+0x274>)
 800c052:	f7f5 fe15 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800c056:	4602      	mov	r2, r0
 800c058:	4b6f      	ldr	r3, [pc, #444]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c05a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
				val_SO1_buf_index++;
 800c05e:	4b6c      	ldr	r3, [pc, #432]	; (800c210 <HAL_TIM_IC_CaptureCallback+0x270>)
 800c060:	881b      	ldrh	r3, [r3, #0]
 800c062:	3301      	adds	r3, #1
 800c064:	b29a      	uxth	r2, r3
 800c066:	4b6a      	ldr	r3, [pc, #424]	; (800c210 <HAL_TIM_IC_CaptureCallback+0x270>)
 800c068:	801a      	strh	r2, [r3, #0]
			if (val_SO1_buf_index == 72){  // some hints that this takes 10mus
 800c06a:	4b69      	ldr	r3, [pc, #420]	; (800c210 <HAL_TIM_IC_CaptureCallback+0x270>)
 800c06c:	881b      	ldrh	r3, [r3, #0]
 800c06e:	2b48      	cmp	r3, #72	; 0x48
 800c070:	f040 8081 	bne.w	800c176 <HAL_TIM_IC_CaptureCallback+0x1d6>
				int32_t cos_part = 0;
 800c074:	2300      	movs	r3, #0
 800c076:	617b      	str	r3, [r7, #20]
				int32_t sin_part = 0;
 800c078:	2300      	movs	r3, #0
 800c07a:	613b      	str	r3, [r7, #16]
				for (int i=0; i< 72; i++){
 800c07c:	2300      	movs	r3, #0
 800c07e:	60fb      	str	r3, [r7, #12]
 800c080:	e046      	b.n	800c110 <HAL_TIM_IC_CaptureCallback+0x170>
				    if (i<18){
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	2b11      	cmp	r3, #17
 800c086:	dc0e      	bgt.n	800c0a6 <HAL_TIM_IC_CaptureCallback+0x106>
				      cos_part += val_SO1_buf[i];
 800c088:	4a63      	ldr	r2, [pc, #396]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	4413      	add	r3, r2
 800c094:	617b      	str	r3, [r7, #20]
				      sin_part += val_SO1_buf[i];}
 800c096:	4a60      	ldr	r2, [pc, #384]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	613b      	str	r3, [r7, #16]
 800c0a4:	e031      	b.n	800c10a <HAL_TIM_IC_CaptureCallback+0x16a>
				    else if (i<36){
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2b23      	cmp	r3, #35	; 0x23
 800c0aa:	dc0e      	bgt.n	800c0ca <HAL_TIM_IC_CaptureCallback+0x12a>
				      cos_part -= val_SO1_buf[i];
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	495a      	ldr	r1, [pc, #360]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c0b6:	1ad3      	subs	r3, r2, r3
 800c0b8:	617b      	str	r3, [r7, #20]
				      sin_part += val_SO1_buf[i];}
 800c0ba:	4a57      	ldr	r2, [pc, #348]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	4413      	add	r3, r2
 800c0c6:	613b      	str	r3, [r7, #16]
 800c0c8:	e01f      	b.n	800c10a <HAL_TIM_IC_CaptureCallback+0x16a>
				    else if (i<54){
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	2b35      	cmp	r3, #53	; 0x35
 800c0ce:	dc0e      	bgt.n	800c0ee <HAL_TIM_IC_CaptureCallback+0x14e>
				      cos_part -= val_SO1_buf[i];
 800c0d0:	697a      	ldr	r2, [r7, #20]
 800c0d2:	4951      	ldr	r1, [pc, #324]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c0da:	1ad3      	subs	r3, r2, r3
 800c0dc:	617b      	str	r3, [r7, #20]
				      sin_part -= val_SO1_buf[i];}
 800c0de:	693a      	ldr	r2, [r7, #16]
 800c0e0:	494d      	ldr	r1, [pc, #308]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	613b      	str	r3, [r7, #16]
 800c0ec:	e00d      	b.n	800c10a <HAL_TIM_IC_CaptureCallback+0x16a>
				      cos_part += val_SO1_buf[i];
 800c0ee:	4a4a      	ldr	r2, [pc, #296]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	617b      	str	r3, [r7, #20]
				      sin_part -= val_SO1_buf[i];}
 800c0fc:	693a      	ldr	r2, [r7, #16]
 800c0fe:	4946      	ldr	r1, [pc, #280]	; (800c218 <HAL_TIM_IC_CaptureCallback+0x278>)
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	613b      	str	r3, [r7, #16]
				for (int i=0; i< 72; i++){
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	3301      	adds	r3, #1
 800c10e:	60fb      	str	r3, [r7, #12]
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b47      	cmp	r3, #71	; 0x47
 800c114:	ddb5      	ble.n	800c082 <HAL_TIM_IC_CaptureCallback+0xe2>
				field_amplitude = cos_part*cos_part + sin_part*sin_part;
 800c116:	697b      	ldr	r3, [r7, #20]
 800c118:	697a      	ldr	r2, [r7, #20]
 800c11a:	fb02 f203 	mul.w	r2, r2, r3
 800c11e:	693b      	ldr	r3, [r7, #16]
 800c120:	6939      	ldr	r1, [r7, #16]
 800c122:	fb01 f303 	mul.w	r3, r1, r3
 800c126:	4413      	add	r3, r2
 800c128:	461a      	mov	r2, r3
 800c12a:	4b3c      	ldr	r3, [pc, #240]	; (800c21c <HAL_TIM_IC_CaptureCallback+0x27c>)
 800c12c:	601a      	str	r2, [r3, #0]
				field_phase_shift = (float) cos_part / (float) sin_part;
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	ee07 3a90 	vmov	s15, r3
 800c134:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c138:	693b      	ldr	r3, [r7, #16]
 800c13a:	ee07 3a90 	vmov	s15, r3
 800c13e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c142:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c146:	4b36      	ldr	r3, [pc, #216]	; (800c220 <HAL_TIM_IC_CaptureCallback+0x280>)
 800c148:	edc3 7a00 	vstr	s15, [r3]
				field_phase_shift_pihalf = (float) sin_part / (float) cos_part;
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	ee07 3a90 	vmov	s15, r3
 800c152:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c156:	697b      	ldr	r3, [r7, #20]
 800c158:	ee07 3a90 	vmov	s15, r3
 800c15c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c160:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c164:	4b2f      	ldr	r3, [pc, #188]	; (800c224 <HAL_TIM_IC_CaptureCallback+0x284>)
 800c166:	edc3 7a00 	vstr	s15, [r3]
				val_SO1_buf_index++;
 800c16a:	4b29      	ldr	r3, [pc, #164]	; (800c210 <HAL_TIM_IC_CaptureCallback+0x270>)
 800c16c:	881b      	ldrh	r3, [r3, #0]
 800c16e:	3301      	adds	r3, #1
 800c170:	b29a      	uxth	r2, r3
 800c172:	4b27      	ldr	r3, [pc, #156]	; (800c210 <HAL_TIM_IC_CaptureCallback+0x270>)
 800c174:	801a      	strh	r2, [r3, #0]
			if (abs(av_velocity) > 5 &&  skip_update_high_v == 1){
 800c176:	4b2c      	ldr	r3, [pc, #176]	; (800c228 <HAL_TIM_IC_CaptureCallback+0x288>)
 800c178:	edd3 7a00 	vldr	s15, [r3]
 800c17c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c180:	ee17 3a90 	vmov	r3, s15
 800c184:	2b00      	cmp	r3, #0
 800c186:	bfb8      	it	lt
 800c188:	425b      	neglt	r3, r3
 800c18a:	2b05      	cmp	r3, #5
 800c18c:	dd07      	ble.n	800c19e <HAL_TIM_IC_CaptureCallback+0x1fe>
 800c18e:	4b27      	ldr	r3, [pc, #156]	; (800c22c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	2b01      	cmp	r3, #1
 800c194:	d103      	bne.n	800c19e <HAL_TIM_IC_CaptureCallback+0x1fe>
				skip_update_high_v = 0;
 800c196:	4b25      	ldr	r3, [pc, #148]	; (800c22c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800c198:	2200      	movs	r2, #0
 800c19a:	601a      	str	r2, [r3, #0]
}
 800c19c:	e0a2      	b.n	800c2e4 <HAL_TIM_IC_CaptureCallback+0x344>
				debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 800c19e:	4b18      	ldr	r3, [pc, #96]	; (800c200 <HAL_TIM_IC_CaptureCallback+0x260>)
 800c1a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c1a4:	619a      	str	r2, [r3, #24]
				GPIOC->BSRR = GPIO_PIN_13; // DEBUG
 800c1a6:	4b22      	ldr	r3, [pc, #136]	; (800c230 <HAL_TIM_IC_CaptureCallback+0x290>)
 800c1a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c1ac:	619a      	str	r2, [r3, #24]
				skip_update_high_v = 1;
 800c1ae:	4b1f      	ldr	r3, [pc, #124]	; (800c22c <HAL_TIM_IC_CaptureCallback+0x28c>)
 800c1b0:	2201      	movs	r2, #1
 800c1b2:	601a      	str	r2, [r3, #0]
				tim12_counter = TIM2->CNT;
 800c1b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ba:	4a1e      	ldr	r2, [pc, #120]	; (800c234 <HAL_TIM_IC_CaptureCallback+0x294>)
 800c1bc:	6013      	str	r3, [r2, #0]
				if (tim12_counter > ENC_STEPS){ // TODO fix the issue that this gets almost never called when velocity is super low.
 800c1be:	4b1d      	ldr	r3, [pc, #116]	; (800c234 <HAL_TIM_IC_CaptureCallback+0x294>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800c1c6:	f240 8087 	bls.w	800c2d8 <HAL_TIM_IC_CaptureCallback+0x338>
					TIM2->CNT = 0;
 800c1ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	625a      	str	r2, [r3, #36]	; 0x24
					int EncDiff = EncVal-last_EncVal_v;
 800c1d2:	4b0c      	ldr	r3, [pc, #48]	; (800c204 <HAL_TIM_IC_CaptureCallback+0x264>)
 800c1d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1d8:	461a      	mov	r2, r3
 800c1da:	4b17      	ldr	r3, [pc, #92]	; (800c238 <HAL_TIM_IC_CaptureCallback+0x298>)
 800c1dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	60bb      	str	r3, [r7, #8]
					if (EncDiff > ENC_STEPS_HALF){ // if jump is more than a half rotation it's most likely the 0 crossing
 800c1e4:	68bb      	ldr	r3, [r7, #8]
 800c1e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1ea:	dd27      	ble.n	800c23c <HAL_TIM_IC_CaptureCallback+0x29c>
						EncDiff -= ENC_STEPS;
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800c1f2:	60bb      	str	r3, [r7, #8]
 800c1f4:	e02a      	b.n	800c24c <HAL_TIM_IC_CaptureCallback+0x2ac>
 800c1f6:	bf00      	nop
 800c1f8:	40010400 	.word	0x40010400
 800c1fc:	2000025c 	.word	0x2000025c
 800c200:	40020c00 	.word	0x40020c00
 800c204:	20000e64 	.word	0x20000e64
 800c208:	20000c04 	.word	0x20000c04
 800c20c:	2000023c 	.word	0x2000023c
 800c210:	20000264 	.word	0x20000264
 800c214:	2000070c 	.word	0x2000070c
 800c218:	20001224 	.word	0x20001224
 800c21c:	20000270 	.word	0x20000270
 800c220:	20000268 	.word	0x20000268
 800c224:	2000026c 	.word	0x2000026c
 800c228:	2000024c 	.word	0x2000024c
 800c22c:	20000260 	.word	0x20000260
 800c230:	40020800 	.word	0x40020800
 800c234:	20000030 	.word	0x20000030
 800c238:	20000d10 	.word	0x20000d10
					else if (EncDiff < -1000){
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800c242:	da03      	bge.n	800c24c <HAL_TIM_IC_CaptureCallback+0x2ac>
						EncDiff += ENC_STEPS;
 800c244:	68bb      	ldr	r3, [r7, #8]
 800c246:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800c24a:	60bb      	str	r3, [r7, #8]
					velocity = (float)(EncDiff) / (float)tim12_counter; //[steps/counts]
 800c24c:	68bb      	ldr	r3, [r7, #8]
 800c24e:	ee07 3a90 	vmov	s15, r3
 800c252:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800c256:	4b2a      	ldr	r3, [pc, #168]	; (800c300 <HAL_TIM_IC_CaptureCallback+0x360>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	ee07 3a90 	vmov	s15, r3
 800c25e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c266:	4b27      	ldr	r3, [pc, #156]	; (800c304 <HAL_TIM_IC_CaptureCallback+0x364>)
 800c268:	edc3 7a00 	vstr	s15, [r3]
					velocity *= 21000000/ENC_STEPS; // /ENC_STEPS steps/round * 21000000 counts/sec --> [round/sec]  //TODO velocity seems too high by factor of 2 or 3 maybe same clock frequency issue that we actually run at 42 MHz. !!! TODO check clock frequency  // TODO divided by 10 as well
 800c26c:	4b25      	ldr	r3, [pc, #148]	; (800c304 <HAL_TIM_IC_CaptureCallback+0x364>)
 800c26e:	edd3 7a00 	vldr	s15, [r3]
 800c272:	ed9f 7a25 	vldr	s14, [pc, #148]	; 800c308 <HAL_TIM_IC_CaptureCallback+0x368>
 800c276:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c27a:	4b22      	ldr	r3, [pc, #136]	; (800c304 <HAL_TIM_IC_CaptureCallback+0x364>)
 800c27c:	edc3 7a00 	vstr	s15, [r3]
					av_velocity = 0.95 * av_velocity + 0.05 * velocity;
 800c280:	4b22      	ldr	r3, [pc, #136]	; (800c30c <HAL_TIM_IC_CaptureCallback+0x36c>)
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	4618      	mov	r0, r3
 800c286:	f7f4 f95f 	bl	8000548 <__aeabi_f2d>
 800c28a:	a319      	add	r3, pc, #100	; (adr r3, 800c2f0 <HAL_TIM_IC_CaptureCallback+0x350>)
 800c28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c290:	f7f4 f9b2 	bl	80005f8 <__aeabi_dmul>
 800c294:	4603      	mov	r3, r0
 800c296:	460c      	mov	r4, r1
 800c298:	4625      	mov	r5, r4
 800c29a:	461c      	mov	r4, r3
 800c29c:	4b19      	ldr	r3, [pc, #100]	; (800c304 <HAL_TIM_IC_CaptureCallback+0x364>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	f7f4 f951 	bl	8000548 <__aeabi_f2d>
 800c2a6:	a314      	add	r3, pc, #80	; (adr r3, 800c2f8 <HAL_TIM_IC_CaptureCallback+0x358>)
 800c2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2ac:	f7f4 f9a4 	bl	80005f8 <__aeabi_dmul>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	460b      	mov	r3, r1
 800c2b4:	4620      	mov	r0, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	f7f3 ffe8 	bl	800028c <__adddf3>
 800c2bc:	4603      	mov	r3, r0
 800c2be:	460c      	mov	r4, r1
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	4621      	mov	r1, r4
 800c2c4:	f7f4 fc90 	bl	8000be8 <__aeabi_d2f>
 800c2c8:	4602      	mov	r2, r0
 800c2ca:	4b10      	ldr	r3, [pc, #64]	; (800c30c <HAL_TIM_IC_CaptureCallback+0x36c>)
 800c2cc:	601a      	str	r2, [r3, #0]
					last_EncVal_v = EncVal;
 800c2ce:	4b10      	ldr	r3, [pc, #64]	; (800c310 <HAL_TIM_IC_CaptureCallback+0x370>)
 800c2d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800c2d4:	4b0f      	ldr	r3, [pc, #60]	; (800c314 <HAL_TIM_IC_CaptureCallback+0x374>)
 800c2d6:	801a      	strh	r2, [r3, #0]
				update_pwm();
 800c2d8:	f000 f822 	bl	800c320 <update_pwm>
				GPIOC->BSRR = GPIO_PIN_13  << 16U ; // DEBUG
 800c2dc:	4b0e      	ldr	r3, [pc, #56]	; (800c318 <HAL_TIM_IC_CaptureCallback+0x378>)
 800c2de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c2e2:	619a      	str	r2, [r3, #24]
}
 800c2e4:	bf00      	nop
 800c2e6:	3718      	adds	r7, #24
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bdb0      	pop	{r4, r5, r7, pc}
 800c2ec:	f3af 8000 	nop.w
 800c2f0:	66666666 	.word	0x66666666
 800c2f4:	3fee6666 	.word	0x3fee6666
 800c2f8:	9999999a 	.word	0x9999999a
 800c2fc:	3fa99999 	.word	0x3fa99999
 800c300:	20000030 	.word	0x20000030
 800c304:	20000248 	.word	0x20000248
 800c308:	46241000 	.word	0x46241000
 800c30c:	2000024c 	.word	0x2000024c
 800c310:	20000e64 	.word	0x20000e64
 800c314:	20000d10 	.word	0x20000d10
 800c318:	40020800 	.word	0x40020800
 800c31c:	00000000 	.word	0x00000000

0800c320 <update_pwm>:

void update_pwm(void){
 800c320:	b590      	push	{r4, r7, lr}
 800c322:	b087      	sub	sp, #28
 800c324:	af00      	add	r7, sp, #0

	//dtime_since_last_pwm_update = TIM5->CNT - time_of_last_pwm_update;
	time_of_last_pwm_update = TIM5->CNT;
 800c326:	4bb6      	ldr	r3, [pc, #728]	; (800c600 <update_pwm+0x2e0>)
 800c328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c32a:	461a      	mov	r2, r3
 800c32c:	4bb5      	ldr	r3, [pc, #724]	; (800c604 <update_pwm+0x2e4>)
 800c32e:	601a      	str	r2, [r3, #0]

	phase = (float) EncVal * 0.0031415 * N_POLES ; //(float) EncVal / ENC_STEPS * 2*PI * N_POLES ; //takes 1500ns
 800c330:	4bb5      	ldr	r3, [pc, #724]	; (800c608 <update_pwm+0x2e8>)
 800c332:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c336:	ee07 3a90 	vmov	s15, r3
 800c33a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c33e:	ee17 0a90 	vmov	r0, s15
 800c342:	f7f4 f901 	bl	8000548 <__aeabi_f2d>
 800c346:	a3a8      	add	r3, pc, #672	; (adr r3, 800c5e8 <update_pwm+0x2c8>)
 800c348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c34c:	f7f4 f954 	bl	80005f8 <__aeabi_dmul>
 800c350:	4603      	mov	r3, r0
 800c352:	460c      	mov	r4, r1
 800c354:	4618      	mov	r0, r3
 800c356:	4621      	mov	r1, r4
 800c358:	f04f 0200 	mov.w	r2, #0
 800c35c:	4bab      	ldr	r3, [pc, #684]	; (800c60c <update_pwm+0x2ec>)
 800c35e:	f7f4 f94b 	bl	80005f8 <__aeabi_dmul>
 800c362:	4603      	mov	r3, r0
 800c364:	460c      	mov	r4, r1
 800c366:	4618      	mov	r0, r3
 800c368:	4621      	mov	r1, r4
 800c36a:	f7f4 fc3d 	bl	8000be8 <__aeabi_d2f>
 800c36e:	4602      	mov	r2, r0
 800c370:	4ba7      	ldr	r3, [pc, #668]	; (800c610 <update_pwm+0x2f0>)
 800c372:	601a      	str	r2, [r3, #0]
	phase -= phase0;
 800c374:	4ba6      	ldr	r3, [pc, #664]	; (800c610 <update_pwm+0x2f0>)
 800c376:	ed93 7a00 	vldr	s14, [r3]
 800c37a:	4ba6      	ldr	r3, [pc, #664]	; (800c614 <update_pwm+0x2f4>)
 800c37c:	edd3 7a00 	vldr	s15, [r3]
 800c380:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c384:	4ba2      	ldr	r3, [pc, #648]	; (800c610 <update_pwm+0x2f0>)
 800c386:	edc3 7a00 	vstr	s15, [r3]
	//phase = -phase;

	float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel //takes<200ns
 800c38a:	4ba3      	ldr	r3, [pc, #652]	; (800c618 <update_pwm+0x2f8>)
 800c38c:	617b      	str	r3, [r7, #20]
	float modified_amp = amp + stiffness * av_velocity;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 800c38e:	4ba3      	ldr	r3, [pc, #652]	; (800c61c <update_pwm+0x2fc>)
 800c390:	ed93 7a00 	vldr	s14, [r3]
 800c394:	4ba2      	ldr	r3, [pc, #648]	; (800c620 <update_pwm+0x300>)
 800c396:	edd3 7a00 	vldr	s15, [r3]
 800c39a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c39e:	4ba1      	ldr	r3, [pc, #644]	; (800c624 <update_pwm+0x304>)
 800c3a0:	edd3 7a00 	vldr	s15, [r3]
 800c3a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3a8:	edc7 7a04 	vstr	s15, [r7, #16]
	//u0 *= amp;  //takes<200ns
	if (modified_amp > AMP_LIMIT){
 800c3ac:	6938      	ldr	r0, [r7, #16]
 800c3ae:	f7f4 f8cb 	bl	8000548 <__aeabi_f2d>
 800c3b2:	a38f      	add	r3, pc, #572	; (adr r3, 800c5f0 <update_pwm+0x2d0>)
 800c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b8:	f7f4 fbae 	bl	8000b18 <__aeabi_dcmpgt>
 800c3bc:	4603      	mov	r3, r0
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <update_pwm+0xa6>
		modified_amp = AMP_LIMIT;
 800c3c2:	4b99      	ldr	r3, [pc, #612]	; (800c628 <update_pwm+0x308>)
 800c3c4:	613b      	str	r3, [r7, #16]
	}
	if (modified_amp < -AMP_LIMIT){
 800c3c6:	6938      	ldr	r0, [r7, #16]
 800c3c8:	f7f4 f8be 	bl	8000548 <__aeabi_f2d>
 800c3cc:	a38a      	add	r3, pc, #552	; (adr r3, 800c5f8 <update_pwm+0x2d8>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f4 fb83 	bl	8000adc <__aeabi_dcmplt>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d001      	beq.n	800c3e0 <update_pwm+0xc0>
		modified_amp = -AMP_LIMIT;
 800c3dc:	4b93      	ldr	r3, [pc, #588]	; (800c62c <update_pwm+0x30c>)
 800c3de:	613b      	str	r3, [r7, #16]
	}



	if (modified_amp > 0){
 800c3e0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c3e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3ec:	dd13      	ble.n	800c416 <update_pwm+0xf6>
		phase -= phase_shift;  //takes<200ns
 800c3ee:	4b88      	ldr	r3, [pc, #544]	; (800c610 <update_pwm+0x2f0>)
 800c3f0:	ed93 7a00 	vldr	s14, [r3]
 800c3f4:	4b8e      	ldr	r3, [pc, #568]	; (800c630 <update_pwm+0x310>)
 800c3f6:	edd3 7a00 	vldr	s15, [r3]
 800c3fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3fe:	4b84      	ldr	r3, [pc, #528]	; (800c610 <update_pwm+0x2f0>)
 800c400:	edc3 7a00 	vstr	s15, [r3]
		u0 *= modified_amp;  //takes<200ns
 800c404:	ed97 7a05 	vldr	s14, [r7, #20]
 800c408:	edd7 7a04 	vldr	s15, [r7, #16]
 800c40c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c410:	edc7 7a05 	vstr	s15, [r7, #20]
 800c414:	e014      	b.n	800c440 <update_pwm+0x120>
	}
	else {
		phase += phase_shift;
 800c416:	4b7e      	ldr	r3, [pc, #504]	; (800c610 <update_pwm+0x2f0>)
 800c418:	ed93 7a00 	vldr	s14, [r3]
 800c41c:	4b84      	ldr	r3, [pc, #528]	; (800c630 <update_pwm+0x310>)
 800c41e:	edd3 7a00 	vldr	s15, [r3]
 800c422:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c426:	4b7a      	ldr	r3, [pc, #488]	; (800c610 <update_pwm+0x2f0>)
 800c428:	edc3 7a00 	vstr	s15, [r3]
		u0 *= -modified_amp;  //takes<200ns
 800c42c:	edd7 7a04 	vldr	s15, [r7, #16]
 800c430:	eef1 7a67 	vneg.f32	s15, s15
 800c434:	ed97 7a05 	vldr	s14, [r7, #20]
 800c438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c43c:	edc7 7a05 	vstr	s15, [r7, #20]
	}
	u0 *= run_motor;  //takes<200ns
 800c440:	4b7c      	ldr	r3, [pc, #496]	; (800c634 <update_pwm+0x314>)
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	ee07 3a90 	vmov	s15, r3
 800c448:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c44c:	ed97 7a05 	vldr	s14, [r7, #20]
 800c450:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c454:	edc7 7a05 	vstr	s15, [r7, #20]

//



	phase *= 100;
 800c458:	4b6d      	ldr	r3, [pc, #436]	; (800c610 <update_pwm+0x2f0>)
 800c45a:	edd3 7a00 	vldr	s15, [r3]
 800c45e:	ed9f 7a76 	vldr	s14, [pc, #472]	; 800c638 <update_pwm+0x318>
 800c462:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c466:	4b6a      	ldr	r3, [pc, #424]	; (800c610 <update_pwm+0x2f0>)
 800c468:	edc3 7a00 	vstr	s15, [r3]
	int_phase = (int) phase;
 800c46c:	4b68      	ldr	r3, [pc, #416]	; (800c610 <update_pwm+0x2f0>)
 800c46e:	edd3 7a00 	vldr	s15, [r3]
 800c472:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c476:	ee17 2a90 	vmov	r2, s15
 800c47a:	4b70      	ldr	r3, [pc, #448]	; (800c63c <update_pwm+0x31c>)
 800c47c:	601a      	str	r2, [r3, #0]
	int_phase = int_phase % 628;
 800c47e:	4b6f      	ldr	r3, [pc, #444]	; (800c63c <update_pwm+0x31c>)
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	4b6f      	ldr	r3, [pc, #444]	; (800c640 <update_pwm+0x320>)
 800c484:	fb83 1302 	smull	r1, r3, r3, r2
 800c488:	11d9      	asrs	r1, r3, #7
 800c48a:	17d3      	asrs	r3, r2, #31
 800c48c:	1acb      	subs	r3, r1, r3
 800c48e:	f44f 711d 	mov.w	r1, #628	; 0x274
 800c492:	fb01 f303 	mul.w	r3, r1, r3
 800c496:	1ad3      	subs	r3, r2, r3
 800c498:	4a68      	ldr	r2, [pc, #416]	; (800c63c <update_pwm+0x31c>)
 800c49a:	6013      	str	r3, [r2, #0]
	if (int_phase < 0) {
 800c49c:	4b67      	ldr	r3, [pc, #412]	; (800c63c <update_pwm+0x31c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	da05      	bge.n	800c4b0 <update_pwm+0x190>
		int_phase += 628;
 800c4a4:	4b65      	ldr	r3, [pc, #404]	; (800c63c <update_pwm+0x31c>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f503 731d 	add.w	r3, r3, #628	; 0x274
 800c4ac:	4a63      	ldr	r2, [pc, #396]	; (800c63c <update_pwm+0x31c>)
 800c4ae:	6013      	str	r3, [r2, #0]
	}

	float uA = 0;
 800c4b0:	f04f 0300 	mov.w	r3, #0
 800c4b4:	60fb      	str	r3, [r7, #12]
	float uB = 0;
 800c4b6:	f04f 0300 	mov.w	r3, #0
 800c4ba:	60bb      	str	r3, [r7, #8]
	float uC = 0;
 800c4bc:	f04f 0300 	mov.w	r3, #0
 800c4c0:	607b      	str	r3, [r7, #4]

	if (wave_mode < 2 ){
 800c4c2:	4b60      	ldr	r3, [pc, #384]	; (800c644 <update_pwm+0x324>)
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	2b01      	cmp	r3, #1
 800c4c8:	f200 8140 	bhi.w	800c74c <update_pwm+0x42c>
		if (wave_mode == 0 ){
 800c4cc:	4b5d      	ldr	r3, [pc, #372]	; (800c644 <update_pwm+0x324>)
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d149      	bne.n	800c568 <update_pwm+0x248>
		//    			uB = lookup[2]; // takes 3mus
		//    			uC = 0;

			// ---- lookup  this optimized routine brings roundtrip down to 5mus

			if  (int_phase < 210)	{ //0...209
 800c4d4:	4b59      	ldr	r3, [pc, #356]	; (800c63c <update_pwm+0x31c>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	2bd1      	cmp	r3, #209	; 0xd1
 800c4da:	dc13      	bgt.n	800c504 <update_pwm+0x1e4>
				uA = lookup[int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800c4dc:	4b57      	ldr	r3, [pc, #348]	; (800c63c <update_pwm+0x31c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a59      	ldr	r2, [pc, #356]	; (800c648 <update_pwm+0x328>)
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	4413      	add	r3, r2
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	60fb      	str	r3, [r7, #12]
				uB = lookup[210 - 1 - int_phase]; // takes 3mus
 800c4ea:	4b54      	ldr	r3, [pc, #336]	; (800c63c <update_pwm+0x31c>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	f1c3 03d1 	rsb	r3, r3, #209	; 0xd1
 800c4f2:	4a55      	ldr	r2, [pc, #340]	; (800c648 <update_pwm+0x328>)
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	4413      	add	r3, r2
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c4fc:	f04f 0300 	mov.w	r3, #0
 800c500:	607b      	str	r3, [r7, #4]
 800c502:	e0cb      	b.n	800c69c <update_pwm+0x37c>
			}
		 else if  (int_phase < 420){	 //210...419
 800c504:	4b4d      	ldr	r3, [pc, #308]	; (800c63c <update_pwm+0x31c>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c50c:	da15      	bge.n	800c53a <update_pwm+0x21a>
				uA = 0; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800c50e:	f04f 0300 	mov.w	r3, #0
 800c512:	60fb      	str	r3, [r7, #12]
				uB = lookup[int_phase - 210]; // takes 3mus
 800c514:	4b49      	ldr	r3, [pc, #292]	; (800c63c <update_pwm+0x31c>)
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	3bd2      	subs	r3, #210	; 0xd2
 800c51a:	4a4b      	ldr	r2, [pc, #300]	; (800c648 <update_pwm+0x328>)
 800c51c:	009b      	lsls	r3, r3, #2
 800c51e:	4413      	add	r3, r2
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	60bb      	str	r3, [r7, #8]
				uC = lookup[420 - 1 - int_phase];
 800c524:	4b45      	ldr	r3, [pc, #276]	; (800c63c <update_pwm+0x31c>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f5c3 73d1 	rsb	r3, r3, #418	; 0x1a2
 800c52c:	3301      	adds	r3, #1
 800c52e:	4a46      	ldr	r2, [pc, #280]	; (800c648 <update_pwm+0x328>)
 800c530:	009b      	lsls	r3, r3, #2
 800c532:	4413      	add	r3, r2
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	607b      	str	r3, [r7, #4]
 800c538:	e0b0      	b.n	800c69c <update_pwm+0x37c>
		 }
		 else	{  //420...629
				uA = lookup[630 - 1 - int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800c53a:	4b40      	ldr	r3, [pc, #256]	; (800c63c <update_pwm+0x31c>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f5c3 731d 	rsb	r3, r3, #628	; 0x274
 800c542:	3301      	adds	r3, #1
 800c544:	4a40      	ldr	r2, [pc, #256]	; (800c648 <update_pwm+0x328>)
 800c546:	009b      	lsls	r3, r3, #2
 800c548:	4413      	add	r3, r2
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	60fb      	str	r3, [r7, #12]
				uB = 0; // takes 3mus
 800c54e:	f04f 0300 	mov.w	r3, #0
 800c552:	60bb      	str	r3, [r7, #8]
				uC = lookup[int_phase - 420];
 800c554:	4b39      	ldr	r3, [pc, #228]	; (800c63c <update_pwm+0x31c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800c55c:	4a3a      	ldr	r2, [pc, #232]	; (800c648 <update_pwm+0x328>)
 800c55e:	009b      	lsls	r3, r3, #2
 800c560:	4413      	add	r3, r2
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	607b      	str	r3, [r7, #4]
 800c566:	e099      	b.n	800c69c <update_pwm+0x37c>
			}
		}

		else if (wave_mode == 1){
 800c568:	4b36      	ldr	r3, [pc, #216]	; (800c644 <update_pwm+0x324>)
 800c56a:	781b      	ldrb	r3, [r3, #0]
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	f040 8095 	bne.w	800c69c <update_pwm+0x37c>
			if  (int_phase < 105-52)	{
 800c572:	4b32      	ldr	r3, [pc, #200]	; (800c63c <update_pwm+0x31c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	2b34      	cmp	r3, #52	; 0x34
 800c578:	dc09      	bgt.n	800c58e <update_pwm+0x26e>
				uA = 1;
 800c57a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c57e:	60fb      	str	r3, [r7, #12]
				uB = 0;
 800c580:	f04f 0300 	mov.w	r3, #0
 800c584:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c586:	f04f 0300 	mov.w	r3, #0
 800c58a:	607b      	str	r3, [r7, #4]
 800c58c:	e086      	b.n	800c69c <update_pwm+0x37c>
			}
			else if  (int_phase < 210-52)	{
 800c58e:	4b2b      	ldr	r3, [pc, #172]	; (800c63c <update_pwm+0x31c>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	2b9d      	cmp	r3, #157	; 0x9d
 800c594:	dc09      	bgt.n	800c5aa <update_pwm+0x28a>
				uA = 1;
 800c596:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c59a:	60fb      	str	r3, [r7, #12]
				uB = 1;
 800c59c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c5a0:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c5a2:	f04f 0300 	mov.w	r3, #0
 800c5a6:	607b      	str	r3, [r7, #4]
 800c5a8:	e078      	b.n	800c69c <update_pwm+0x37c>
			}
			else if  (int_phase < 315-52)	{
 800c5aa:	4b24      	ldr	r3, [pc, #144]	; (800c63c <update_pwm+0x31c>)
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
 800c5b2:	dc09      	bgt.n	800c5c8 <update_pwm+0x2a8>
				uA = 0;
 800c5b4:	f04f 0300 	mov.w	r3, #0
 800c5b8:	60fb      	str	r3, [r7, #12]
				uB = 1;
 800c5ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c5be:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c5c0:	f04f 0300 	mov.w	r3, #0
 800c5c4:	607b      	str	r3, [r7, #4]
 800c5c6:	e069      	b.n	800c69c <update_pwm+0x37c>
			}
			else if  (int_phase < 420-52)	{
 800c5c8:	4b1c      	ldr	r3, [pc, #112]	; (800c63c <update_pwm+0x31c>)
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f5b3 7fb8 	cmp.w	r3, #368	; 0x170
 800c5d0:	da3c      	bge.n	800c64c <update_pwm+0x32c>
				uA = 0;
 800c5d2:	f04f 0300 	mov.w	r3, #0
 800c5d6:	60fb      	str	r3, [r7, #12]
				uB = 1;
 800c5d8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c5dc:	60bb      	str	r3, [r7, #8]
				uC = 1;
 800c5de:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c5e2:	607b      	str	r3, [r7, #4]
 800c5e4:	e05a      	b.n	800c69c <update_pwm+0x37c>
 800c5e6:	bf00      	nop
 800c5e8:	f85510d4 	.word	0xf85510d4
 800c5ec:	3f69bc33 	.word	0x3f69bc33
 800c5f0:	cccccccd 	.word	0xcccccccd
 800c5f4:	3feccccc 	.word	0x3feccccc
 800c5f8:	cccccccd 	.word	0xcccccccd
 800c5fc:	bfeccccc 	.word	0xbfeccccc
 800c600:	40000c00 	.word	0x40000c00
 800c604:	20000284 	.word	0x20000284
 800c608:	20000e64 	.word	0x20000e64
 800c60c:	401c0000 	.word	0x401c0000
 800c610:	20000240 	.word	0x20000240
 800c614:	20000008 	.word	0x20000008
 800c618:	3f13c9ef 	.word	0x3f13c9ef
 800c61c:	20000234 	.word	0x20000234
 800c620:	2000024c 	.word	0x2000024c
 800c624:	20000010 	.word	0x20000010
 800c628:	3f666666 	.word	0x3f666666
 800c62c:	bf666666 	.word	0xbf666666
 800c630:	20000018 	.word	0x20000018
 800c634:	20000014 	.word	0x20000014
 800c638:	42c80000 	.word	0x42c80000
 800c63c:	20000244 	.word	0x20000244
 800c640:	342da7f3 	.word	0x342da7f3
 800c644:	20000274 	.word	0x20000274
 800c648:	20000344 	.word	0x20000344
			}
			else if  (int_phase < 525-52)	{
 800c64c:	4b9c      	ldr	r3, [pc, #624]	; (800c8c0 <update_pwm+0x5a0>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	f5b3 7fec 	cmp.w	r3, #472	; 0x1d8
 800c654:	dc09      	bgt.n	800c66a <update_pwm+0x34a>
				uA = 0;
 800c656:	f04f 0300 	mov.w	r3, #0
 800c65a:	60fb      	str	r3, [r7, #12]
				uB = 0;
 800c65c:	f04f 0300 	mov.w	r3, #0
 800c660:	60bb      	str	r3, [r7, #8]
				uC = 1;
 800c662:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c666:	607b      	str	r3, [r7, #4]
 800c668:	e018      	b.n	800c69c <update_pwm+0x37c>
			}
			else if  (int_phase < 630-52)	{
 800c66a:	4b95      	ldr	r3, [pc, #596]	; (800c8c0 <update_pwm+0x5a0>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f240 2241 	movw	r2, #577	; 0x241
 800c672:	4293      	cmp	r3, r2
 800c674:	dc09      	bgt.n	800c68a <update_pwm+0x36a>
				uA = 1;
 800c676:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c67a:	60fb      	str	r3, [r7, #12]
				uB = 0;
 800c67c:	f04f 0300 	mov.w	r3, #0
 800c680:	60bb      	str	r3, [r7, #8]
				uC = 1;
 800c682:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c686:	607b      	str	r3, [r7, #4]
 800c688:	e008      	b.n	800c69c <update_pwm+0x37c>
			}
			else 	{ //same as first half phase
				uA = 1;
 800c68a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c68e:	60fb      	str	r3, [r7, #12]
				uB = 0;
 800c690:	f04f 0300 	mov.w	r3, #0
 800c694:	60bb      	str	r3, [r7, #8]
				uC = 0;
 800c696:	f04f 0300 	mov.w	r3, #0
 800c69a:	607b      	str	r3, [r7, #4]
			}
		}
		pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c69c:	4b89      	ldr	r3, [pc, #548]	; (800c8c4 <update_pwm+0x5a4>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	ee07 3a90 	vmov	s15, r3
 800c6a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c6a8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c6ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800c6b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6bc:	ee17 3a90 	vmov	r3, s15
 800c6c0:	b29b      	uxth	r3, r3
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	4b80      	ldr	r3, [pc, #512]	; (800c8c8 <update_pwm+0x5a8>)
 800c6c6:	601a      	str	r2, [r3, #0]
		pwmB = (uint16_t) (pwm * u0 * uB); //takes<200ns
 800c6c8:	4b7e      	ldr	r3, [pc, #504]	; (800c8c4 <update_pwm+0x5a4>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	ee07 3a90 	vmov	s15, r3
 800c6d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c6d4:	edd7 7a05 	vldr	s15, [r7, #20]
 800c6d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c6dc:	edd7 7a02 	vldr	s15, [r7, #8]
 800c6e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6e8:	ee17 3a90 	vmov	r3, s15
 800c6ec:	b29b      	uxth	r3, r3
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	4b76      	ldr	r3, [pc, #472]	; (800c8cc <update_pwm+0x5ac>)
 800c6f2:	601a      	str	r2, [r3, #0]
		pwmC = (uint16_t) (pwm * u0 * uC); //takes<200ns
 800c6f4:	4b73      	ldr	r3, [pc, #460]	; (800c8c4 <update_pwm+0x5a4>)
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	ee07 3a90 	vmov	s15, r3
 800c6fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c700:	edd7 7a05 	vldr	s15, [r7, #20]
 800c704:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c708:	edd7 7a01 	vldr	s15, [r7, #4]
 800c70c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c710:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c714:	ee17 3a90 	vmov	r3, s15
 800c718:	b29b      	uxth	r3, r3
 800c71a:	461a      	mov	r2, r3
 800c71c:	4b6c      	ldr	r3, [pc, #432]	; (800c8d0 <update_pwm+0x5b0>)
 800c71e:	601a      	str	r2, [r3, #0]

		// ---- end lookup

		debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800c720:	4b6c      	ldr	r3, [pc, #432]	; (800c8d4 <update_pwm+0x5b4>)
 800c722:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c726:	619a      	str	r2, [r3, #24]

		// --- MOTOR DRIVER ----------------------------------------------------
		// --- PWM pulses 0...2048
		if (normal_operation_enabled){
 800c728:	4b6b      	ldr	r3, [pc, #428]	; (800c8d8 <update_pwm+0x5b8>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	f000 812f 	beq.w	800c990 <update_pwm+0x670>
			TIM1->CCR1 = pwmA; //takes<150ns
 800c732:	4b65      	ldr	r3, [pc, #404]	; (800c8c8 <update_pwm+0x5a8>)
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	4b69      	ldr	r3, [pc, #420]	; (800c8dc <update_pwm+0x5bc>)
 800c738:	635a      	str	r2, [r3, #52]	; 0x34
			if (INVERT){
				TIM1->CCR3 = pwmB; //takes<150ns
				TIM1->CCR2 = pwmC; //takes<150ns
			}
			else {
				TIM1->CCR2 = pwmB; //takes<150ns
 800c73a:	4b64      	ldr	r3, [pc, #400]	; (800c8cc <update_pwm+0x5ac>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	4b67      	ldr	r3, [pc, #412]	; (800c8dc <update_pwm+0x5bc>)
 800c740:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = pwmC; //takes<150ns
 800c742:	4b63      	ldr	r3, [pc, #396]	; (800c8d0 <update_pwm+0x5b0>)
 800c744:	681a      	ldr	r2, [r3, #0]
 800c746:	4b65      	ldr	r3, [pc, #404]	; (800c8dc <update_pwm+0x5bc>)
 800c748:	63da      	str	r2, [r3, #60]	; 0x3c
	}




}
 800c74a:	e121      	b.n	800c990 <update_pwm+0x670>
		if  (int_phase < 105)	{
 800c74c:	4b5c      	ldr	r3, [pc, #368]	; (800c8c0 <update_pwm+0x5a0>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b68      	cmp	r3, #104	; 0x68
 800c752:	dc29      	bgt.n	800c7a8 <update_pwm+0x488>
			uA = 1;
 800c754:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c758:	60fb      	str	r3, [r7, #12]
			pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c75a:	4b5a      	ldr	r3, [pc, #360]	; (800c8c4 <update_pwm+0x5a4>)
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	ee07 3a90 	vmov	s15, r3
 800c762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c766:	edd7 7a05 	vldr	s15, [r7, #20]
 800c76a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c76e:	edd7 7a03 	vldr	s15, [r7, #12]
 800c772:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c77a:	ee17 3a90 	vmov	r3, s15
 800c77e:	b29b      	uxth	r3, r3
 800c780:	461a      	mov	r2, r3
 800c782:	4b51      	ldr	r3, [pc, #324]	; (800c8c8 <update_pwm+0x5a8>)
 800c784:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = pwmA; //takes<150ns
 800c786:	4b50      	ldr	r3, [pc, #320]	; (800c8c8 <update_pwm+0x5a8>)
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	4b54      	ldr	r3, [pc, #336]	; (800c8dc <update_pwm+0x5bc>)
 800c78c:	635a      	str	r2, [r3, #52]	; 0x34
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c78e:	4b53      	ldr	r3, [pc, #332]	; (800c8dc <update_pwm+0x5bc>)
 800c790:	699b      	ldr	r3, [r3, #24]
 800c792:	4a52      	ldr	r2, [pc, #328]	; (800c8dc <update_pwm+0x5bc>)
 800c794:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c798:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c79a:	4b50      	ldr	r3, [pc, #320]	; (800c8dc <update_pwm+0x5bc>)
 800c79c:	699b      	ldr	r3, [r3, #24]
 800c79e:	4a4f      	ldr	r2, [pc, #316]	; (800c8dc <update_pwm+0x5bc>)
 800c7a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c7a4:	6193      	str	r3, [r2, #24]
}
 800c7a6:	e0f3      	b.n	800c990 <update_pwm+0x670>
		else if  (int_phase < 210)	{
 800c7a8:	4b45      	ldr	r3, [pc, #276]	; (800c8c0 <update_pwm+0x5a0>)
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	2bd1      	cmp	r3, #209	; 0xd1
 800c7ae:	dc29      	bgt.n	800c804 <update_pwm+0x4e4>
			uB = 1;
 800c7b0:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c7b4:	60bb      	str	r3, [r7, #8]
			pwmB = (uint16_t) (pwm * u0 * uB); //takes<2s00ns
 800c7b6:	4b43      	ldr	r3, [pc, #268]	; (800c8c4 <update_pwm+0x5a4>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	ee07 3a90 	vmov	s15, r3
 800c7be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c7c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800c7c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7ca:	edd7 7a02 	vldr	s15, [r7, #8]
 800c7ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c7d6:	ee17 3a90 	vmov	r3, s15
 800c7da:	b29b      	uxth	r3, r3
 800c7dc:	461a      	mov	r2, r3
 800c7de:	4b3b      	ldr	r3, [pc, #236]	; (800c8cc <update_pwm+0x5ac>)
 800c7e0:	601a      	str	r2, [r3, #0]
			TIM1->CCR2 = pwmB; //takes<150ns
 800c7e2:	4b3a      	ldr	r3, [pc, #232]	; (800c8cc <update_pwm+0x5ac>)
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	4b3d      	ldr	r3, [pc, #244]	; (800c8dc <update_pwm+0x5bc>)
 800c7e8:	639a      	str	r2, [r3, #56]	; 0x38
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c7ea:	4b3c      	ldr	r3, [pc, #240]	; (800c8dc <update_pwm+0x5bc>)
 800c7ec:	699b      	ldr	r3, [r3, #24]
 800c7ee:	4a3b      	ldr	r2, [pc, #236]	; (800c8dc <update_pwm+0x5bc>)
 800c7f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c7f4:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c7f6:	4b39      	ldr	r3, [pc, #228]	; (800c8dc <update_pwm+0x5bc>)
 800c7f8:	699b      	ldr	r3, [r3, #24]
 800c7fa:	4a38      	ldr	r2, [pc, #224]	; (800c8dc <update_pwm+0x5bc>)
 800c7fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c800:	6193      	str	r3, [r2, #24]
}
 800c802:	e0c5      	b.n	800c990 <update_pwm+0x670>
		else if  (int_phase < 315)	{
 800c804:	4b2e      	ldr	r3, [pc, #184]	; (800c8c0 <update_pwm+0x5a0>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800c80c:	dc29      	bgt.n	800c862 <update_pwm+0x542>
			uB = 1;
 800c80e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c812:	60bb      	str	r3, [r7, #8]
			pwmB = (uint16_t) (pwm * u0 * uB); //takes<2s00ns
 800c814:	4b2b      	ldr	r3, [pc, #172]	; (800c8c4 <update_pwm+0x5a4>)
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	ee07 3a90 	vmov	s15, r3
 800c81c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c820:	edd7 7a05 	vldr	s15, [r7, #20]
 800c824:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c828:	edd7 7a02 	vldr	s15, [r7, #8]
 800c82c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c834:	ee17 3a90 	vmov	r3, s15
 800c838:	b29b      	uxth	r3, r3
 800c83a:	461a      	mov	r2, r3
 800c83c:	4b23      	ldr	r3, [pc, #140]	; (800c8cc <update_pwm+0x5ac>)
 800c83e:	601a      	str	r2, [r3, #0]
			TIM1->CCR2 = pwmB; //takes<150ns
 800c840:	4b22      	ldr	r3, [pc, #136]	; (800c8cc <update_pwm+0x5ac>)
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	4b25      	ldr	r3, [pc, #148]	; (800c8dc <update_pwm+0x5bc>)
 800c846:	639a      	str	r2, [r3, #56]	; 0x38
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c848:	4b24      	ldr	r3, [pc, #144]	; (800c8dc <update_pwm+0x5bc>)
 800c84a:	699b      	ldr	r3, [r3, #24]
 800c84c:	4a23      	ldr	r2, [pc, #140]	; (800c8dc <update_pwm+0x5bc>)
 800c84e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c852:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c854:	4b21      	ldr	r3, [pc, #132]	; (800c8dc <update_pwm+0x5bc>)
 800c856:	699b      	ldr	r3, [r3, #24]
 800c858:	4a20      	ldr	r2, [pc, #128]	; (800c8dc <update_pwm+0x5bc>)
 800c85a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c85e:	6193      	str	r3, [r2, #24]
}
 800c860:	e096      	b.n	800c990 <update_pwm+0x670>
		else if  (int_phase < 420)	{
 800c862:	4b17      	ldr	r3, [pc, #92]	; (800c8c0 <update_pwm+0x5a0>)
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800c86a:	da39      	bge.n	800c8e0 <update_pwm+0x5c0>
			uC = 1;
 800c86c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c870:	607b      	str	r3, [r7, #4]
			pwmC = (uint16_t) (pwm * u0 * uC); //takes<2s00ns
 800c872:	4b14      	ldr	r3, [pc, #80]	; (800c8c4 <update_pwm+0x5a4>)
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c87e:	edd7 7a05 	vldr	s15, [r7, #20]
 800c882:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c886:	edd7 7a01 	vldr	s15, [r7, #4]
 800c88a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c892:	ee17 3a90 	vmov	r3, s15
 800c896:	b29b      	uxth	r3, r3
 800c898:	461a      	mov	r2, r3
 800c89a:	4b0d      	ldr	r3, [pc, #52]	; (800c8d0 <update_pwm+0x5b0>)
 800c89c:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = pwmC; //takes<150ns
 800c89e:	4b0c      	ldr	r3, [pc, #48]	; (800c8d0 <update_pwm+0x5b0>)
 800c8a0:	681a      	ldr	r2, [r3, #0]
 800c8a2:	4b0e      	ldr	r3, [pc, #56]	; (800c8dc <update_pwm+0x5bc>)
 800c8a4:	63da      	str	r2, [r3, #60]	; 0x3c
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c8a6:	4b0d      	ldr	r3, [pc, #52]	; (800c8dc <update_pwm+0x5bc>)
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	4a0c      	ldr	r2, [pc, #48]	; (800c8dc <update_pwm+0x5bc>)
 800c8ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c8b0:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c8b2:	4b0a      	ldr	r3, [pc, #40]	; (800c8dc <update_pwm+0x5bc>)
 800c8b4:	699b      	ldr	r3, [r3, #24]
 800c8b6:	4a09      	ldr	r2, [pc, #36]	; (800c8dc <update_pwm+0x5bc>)
 800c8b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c8bc:	6193      	str	r3, [r2, #24]
}
 800c8be:	e067      	b.n	800c990 <update_pwm+0x670>
 800c8c0:	20000244 	.word	0x20000244
 800c8c4:	2000000c 	.word	0x2000000c
 800c8c8:	20000250 	.word	0x20000250
 800c8cc:	20000254 	.word	0x20000254
 800c8d0:	20000258 	.word	0x20000258
 800c8d4:	40020c00 	.word	0x40020c00
 800c8d8:	20000035 	.word	0x20000035
 800c8dc:	40010000 	.word	0x40010000
		else if  (int_phase < 525)	{
 800c8e0:	4b2d      	ldr	r3, [pc, #180]	; (800c998 <update_pwm+0x678>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	f5b3 7f03 	cmp.w	r3, #524	; 0x20c
 800c8e8:	dc29      	bgt.n	800c93e <update_pwm+0x61e>
			uC = 1;
 800c8ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c8ee:	607b      	str	r3, [r7, #4]
			pwmC = (uint16_t) (pwm * u0 * uC); //takes<2s00ns
 800c8f0:	4b2a      	ldr	r3, [pc, #168]	; (800c99c <update_pwm+0x67c>)
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	ee07 3a90 	vmov	s15, r3
 800c8f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c8fc:	edd7 7a05 	vldr	s15, [r7, #20]
 800c900:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c904:	edd7 7a01 	vldr	s15, [r7, #4]
 800c908:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c90c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c910:	ee17 3a90 	vmov	r3, s15
 800c914:	b29b      	uxth	r3, r3
 800c916:	461a      	mov	r2, r3
 800c918:	4b21      	ldr	r3, [pc, #132]	; (800c9a0 <update_pwm+0x680>)
 800c91a:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = pwmC; //takes<150ns
 800c91c:	4b20      	ldr	r3, [pc, #128]	; (800c9a0 <update_pwm+0x680>)
 800c91e:	681a      	ldr	r2, [r3, #0]
 800c920:	4b20      	ldr	r3, [pc, #128]	; (800c9a4 <update_pwm+0x684>)
 800c922:	63da      	str	r2, [r3, #60]	; 0x3c
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c924:	4b1f      	ldr	r3, [pc, #124]	; (800c9a4 <update_pwm+0x684>)
 800c926:	699b      	ldr	r3, [r3, #24]
 800c928:	4a1e      	ldr	r2, [pc, #120]	; (800c9a4 <update_pwm+0x684>)
 800c92a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c92e:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c930:	4b1c      	ldr	r3, [pc, #112]	; (800c9a4 <update_pwm+0x684>)
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	4a1b      	ldr	r2, [pc, #108]	; (800c9a4 <update_pwm+0x684>)
 800c936:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c93a:	6193      	str	r3, [r2, #24]
}
 800c93c:	e028      	b.n	800c990 <update_pwm+0x670>
			uA = 1;
 800c93e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800c942:	60fb      	str	r3, [r7, #12]
			pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c944:	4b15      	ldr	r3, [pc, #84]	; (800c99c <update_pwm+0x67c>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	ee07 3a90 	vmov	s15, r3
 800c94c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c950:	edd7 7a05 	vldr	s15, [r7, #20]
 800c954:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c958:	edd7 7a03 	vldr	s15, [r7, #12]
 800c95c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c964:	ee17 3a90 	vmov	r3, s15
 800c968:	b29b      	uxth	r3, r3
 800c96a:	461a      	mov	r2, r3
 800c96c:	4b0e      	ldr	r3, [pc, #56]	; (800c9a8 <update_pwm+0x688>)
 800c96e:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = pwmA; //takes<150ns
 800c970:	4b0d      	ldr	r3, [pc, #52]	; (800c9a8 <update_pwm+0x688>)
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	4b0b      	ldr	r3, [pc, #44]	; (800c9a4 <update_pwm+0x684>)
 800c976:	635a      	str	r2, [r3, #52]	; 0x34
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c978:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <update_pwm+0x684>)
 800c97a:	699b      	ldr	r3, [r3, #24]
 800c97c:	4a09      	ldr	r2, [pc, #36]	; (800c9a4 <update_pwm+0x684>)
 800c97e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c982:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c984:	4b07      	ldr	r3, [pc, #28]	; (800c9a4 <update_pwm+0x684>)
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	4a06      	ldr	r2, [pc, #24]	; (800c9a4 <update_pwm+0x684>)
 800c98a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c98e:	6193      	str	r3, [r2, #24]
}
 800c990:	bf00      	nop
 800c992:	371c      	adds	r7, #28
 800c994:	46bd      	mov	sp, r7
 800c996:	bd90      	pop	{r4, r7, pc}
 800c998:	20000244 	.word	0x20000244
 800c99c:	2000000c 	.word	0x2000000c
 800c9a0:	20000258 	.word	0x20000258
 800c9a4:	40010000 	.word	0x40010000
 800c9a8:	20000250 	.word	0x20000250

0800c9ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c9b0:	bf00      	nop
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b8:	4770      	bx	lr
	...

0800c9bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b083      	sub	sp, #12
 800c9c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	607b      	str	r3, [r7, #4]
 800c9c6:	4b10      	ldr	r3, [pc, #64]	; (800ca08 <HAL_MspInit+0x4c>)
 800c9c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9ca:	4a0f      	ldr	r2, [pc, #60]	; (800ca08 <HAL_MspInit+0x4c>)
 800c9cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c9d0:	6453      	str	r3, [r2, #68]	; 0x44
 800c9d2:	4b0d      	ldr	r3, [pc, #52]	; (800ca08 <HAL_MspInit+0x4c>)
 800c9d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c9d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9da:	607b      	str	r3, [r7, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c9de:	2300      	movs	r3, #0
 800c9e0:	603b      	str	r3, [r7, #0]
 800c9e2:	4b09      	ldr	r3, [pc, #36]	; (800ca08 <HAL_MspInit+0x4c>)
 800c9e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9e6:	4a08      	ldr	r2, [pc, #32]	; (800ca08 <HAL_MspInit+0x4c>)
 800c9e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9ec:	6413      	str	r3, [r2, #64]	; 0x40
 800c9ee:	4b06      	ldr	r3, [pc, #24]	; (800ca08 <HAL_MspInit+0x4c>)
 800c9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9f6:	603b      	str	r3, [r7, #0]
 800c9f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c9fa:	bf00      	nop
 800c9fc:	370c      	adds	r7, #12
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	40023800 	.word	0x40023800

0800ca0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b092      	sub	sp, #72	; 0x48
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ca18:	2200      	movs	r2, #0
 800ca1a:	601a      	str	r2, [r3, #0]
 800ca1c:	605a      	str	r2, [r3, #4]
 800ca1e:	609a      	str	r2, [r3, #8]
 800ca20:	60da      	str	r2, [r3, #12]
 800ca22:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	681b      	ldr	r3, [r3, #0]
 800ca28:	4a9b      	ldr	r2, [pc, #620]	; (800cc98 <HAL_ADC_MspInit+0x28c>)
 800ca2a:	4293      	cmp	r3, r2
 800ca2c:	f040 8096 	bne.w	800cb5c <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800ca30:	2300      	movs	r3, #0
 800ca32:	633b      	str	r3, [r7, #48]	; 0x30
 800ca34:	4b99      	ldr	r3, [pc, #612]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca38:	4a98      	ldr	r2, [pc, #608]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ca3e:	6453      	str	r3, [r2, #68]	; 0x44
 800ca40:	4b96      	ldr	r3, [pc, #600]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca48:	633b      	str	r3, [r7, #48]	; 0x30
 800ca4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca50:	4b92      	ldr	r3, [pc, #584]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca54:	4a91      	ldr	r2, [pc, #580]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca56:	f043 0304 	orr.w	r3, r3, #4
 800ca5a:	6313      	str	r3, [r2, #48]	; 0x30
 800ca5c:	4b8f      	ldr	r3, [pc, #572]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca60:	f003 0304 	and.w	r3, r3, #4
 800ca64:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca68:	2300      	movs	r3, #0
 800ca6a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca6c:	4b8b      	ldr	r3, [pc, #556]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca70:	4a8a      	ldr	r2, [pc, #552]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca72:	f043 0301 	orr.w	r3, r3, #1
 800ca76:	6313      	str	r3, [r2, #48]	; 0x30
 800ca78:	4b88      	ldr	r3, [pc, #544]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	62bb      	str	r3, [r7, #40]	; 0x28
 800ca82:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca84:	2300      	movs	r3, #0
 800ca86:	627b      	str	r3, [r7, #36]	; 0x24
 800ca88:	4b84      	ldr	r3, [pc, #528]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca8c:	4a83      	ldr	r2, [pc, #524]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca8e:	f043 0302 	orr.w	r3, r3, #2
 800ca92:	6313      	str	r3, [r2, #48]	; 0x30
 800ca94:	4b81      	ldr	r3, [pc, #516]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800ca96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca98:	f003 0302 	and.w	r3, r3, #2
 800ca9c:	627b      	str	r3, [r7, #36]	; 0x24
 800ca9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800caa0:	233e      	movs	r3, #62	; 0x3e
 800caa2:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800caa4:	2303      	movs	r3, #3
 800caa6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800caa8:	2300      	movs	r3, #0
 800caaa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800caac:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cab0:	4619      	mov	r1, r3
 800cab2:	487b      	ldr	r0, [pc, #492]	; (800cca0 <HAL_ADC_MspInit+0x294>)
 800cab4:	f7f6 fe16 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800cab8:	233e      	movs	r3, #62	; 0x3e
 800caba:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cabc:	2303      	movs	r3, #3
 800cabe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cac0:	2300      	movs	r3, #0
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cac4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cac8:	4619      	mov	r1, r3
 800caca:	4876      	ldr	r0, [pc, #472]	; (800cca4 <HAL_ADC_MspInit+0x298>)
 800cacc:	f7f6 fe0a 	bl	80036e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cad0:	2301      	movs	r3, #1
 800cad2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cad4:	2303      	movs	r3, #3
 800cad6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cad8:	2300      	movs	r3, #0
 800cada:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cadc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cae0:	4619      	mov	r1, r3
 800cae2:	4871      	ldr	r0, [pc, #452]	; (800cca8 <HAL_ADC_MspInit+0x29c>)
 800cae4:	f7f6 fdfe 	bl	80036e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800cae8:	4b70      	ldr	r3, [pc, #448]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800caea:	4a71      	ldr	r2, [pc, #452]	; (800ccb0 <HAL_ADC_MspInit+0x2a4>)
 800caec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800caee:	4b6f      	ldr	r3, [pc, #444]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800caf4:	4b6d      	ldr	r3, [pc, #436]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800caf6:	2200      	movs	r2, #0
 800caf8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800cafa:	4b6c      	ldr	r3, [pc, #432]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cafc:	2200      	movs	r2, #0
 800cafe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800cb00:	4b6a      	ldr	r3, [pc, #424]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb06:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cb08:	4b68      	ldr	r3, [pc, #416]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb0e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cb10:	4b66      	ldr	r3, [pc, #408]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cb16:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800cb18:	4b64      	ldr	r3, [pc, #400]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb1e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800cb20:	4b62      	ldr	r3, [pc, #392]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb22:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cb26:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cb28:	4b60      	ldr	r3, [pc, #384]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800cb2e:	485f      	ldr	r0, [pc, #380]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb30:	f7f6 f9f4 	bl	8002f1c <HAL_DMA_Init>
 800cb34:	4603      	mov	r3, r0
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800cb3a:	f7ff ff37 	bl	800c9ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	4a5a      	ldr	r2, [pc, #360]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb42:	639a      	str	r2, [r3, #56]	; 0x38
 800cb44:	4a59      	ldr	r2, [pc, #356]	; (800ccac <HAL_ADC_MspInit+0x2a0>)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	2012      	movs	r0, #18
 800cb50:	f7f6 f9ad 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800cb54:	2012      	movs	r0, #18
 800cb56:	f7f6 f9c6 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800cb5a:	e131      	b.n	800cdc0 <HAL_ADC_MspInit+0x3b4>
  else if(hadc->Instance==ADC2)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	4a54      	ldr	r2, [pc, #336]	; (800ccb4 <HAL_ADC_MspInit+0x2a8>)
 800cb62:	4293      	cmp	r3, r2
 800cb64:	f040 80ac 	bne.w	800ccc0 <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800cb68:	2300      	movs	r3, #0
 800cb6a:	623b      	str	r3, [r7, #32]
 800cb6c:	4b4b      	ldr	r3, [pc, #300]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cb6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb70:	4a4a      	ldr	r2, [pc, #296]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cb72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cb76:	6453      	str	r3, [r2, #68]	; 0x44
 800cb78:	4b48      	ldr	r3, [pc, #288]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cb7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb80:	623b      	str	r3, [r7, #32]
 800cb82:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cb84:	2300      	movs	r3, #0
 800cb86:	61fb      	str	r3, [r7, #28]
 800cb88:	4b44      	ldr	r3, [pc, #272]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cb8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb8c:	4a43      	ldr	r2, [pc, #268]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cb8e:	f043 0304 	orr.w	r3, r3, #4
 800cb92:	6313      	str	r3, [r2, #48]	; 0x30
 800cb94:	4b41      	ldr	r3, [pc, #260]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cb96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb98:	f003 0304 	and.w	r3, r3, #4
 800cb9c:	61fb      	str	r3, [r7, #28]
 800cb9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cba0:	2300      	movs	r3, #0
 800cba2:	61bb      	str	r3, [r7, #24]
 800cba4:	4b3d      	ldr	r3, [pc, #244]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cba8:	4a3c      	ldr	r2, [pc, #240]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cbaa:	f043 0301 	orr.w	r3, r3, #1
 800cbae:	6313      	str	r3, [r2, #48]	; 0x30
 800cbb0:	4b3a      	ldr	r3, [pc, #232]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cbb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb4:	f003 0301 	and.w	r3, r3, #1
 800cbb8:	61bb      	str	r3, [r7, #24]
 800cbba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	617b      	str	r3, [r7, #20]
 800cbc0:	4b36      	ldr	r3, [pc, #216]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cbc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc4:	4a35      	ldr	r2, [pc, #212]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cbc6:	f043 0302 	orr.w	r3, r3, #2
 800cbca:	6313      	str	r3, [r2, #48]	; 0x30
 800cbcc:	4b33      	ldr	r3, [pc, #204]	; (800cc9c <HAL_ADC_MspInit+0x290>)
 800cbce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbd0:	f003 0302 	and.w	r3, r3, #2
 800cbd4:	617b      	str	r3, [r7, #20]
 800cbd6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800cbd8:	233e      	movs	r3, #62	; 0x3e
 800cbda:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cbdc:	2303      	movs	r3, #3
 800cbde:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbe4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cbe8:	4619      	mov	r1, r3
 800cbea:	482d      	ldr	r0, [pc, #180]	; (800cca0 <HAL_ADC_MspInit+0x294>)
 800cbec:	f7f6 fd7a 	bl	80036e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800cbf0:	2316      	movs	r3, #22
 800cbf2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cbfc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc00:	4619      	mov	r1, r3
 800cc02:	4828      	ldr	r0, [pc, #160]	; (800cca4 <HAL_ADC_MspInit+0x298>)
 800cc04:	f7f6 fd6e 	bl	80036e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800cc08:	2301      	movs	r3, #1
 800cc0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cc0c:	2303      	movs	r3, #3
 800cc0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc10:	2300      	movs	r3, #0
 800cc12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cc14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cc18:	4619      	mov	r1, r3
 800cc1a:	4823      	ldr	r0, [pc, #140]	; (800cca8 <HAL_ADC_MspInit+0x29c>)
 800cc1c:	f7f6 fd62 	bl	80036e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800cc20:	4b25      	ldr	r3, [pc, #148]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc22:	4a26      	ldr	r2, [pc, #152]	; (800ccbc <HAL_ADC_MspInit+0x2b0>)
 800cc24:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800cc26:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800cc2c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cc2e:	4b22      	ldr	r3, [pc, #136]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc30:	2200      	movs	r2, #0
 800cc32:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800cc34:	4b20      	ldr	r3, [pc, #128]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc36:	2200      	movs	r2, #0
 800cc38:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800cc3a:	4b1f      	ldr	r3, [pc, #124]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc40:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cc42:	4b1d      	ldr	r3, [pc, #116]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cc48:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cc4a:	4b1b      	ldr	r3, [pc, #108]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc4c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cc50:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800cc52:	4b19      	ldr	r3, [pc, #100]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc54:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc58:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_MEDIUM;
 800cc5a:	4b17      	ldr	r3, [pc, #92]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800cc60:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cc62:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc64:	2200      	movs	r2, #0
 800cc66:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800cc68:	4813      	ldr	r0, [pc, #76]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc6a:	f7f6 f957 	bl	8002f1c <HAL_DMA_Init>
 800cc6e:	4603      	mov	r3, r0
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d001      	beq.n	800cc78 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 800cc74:	f7ff fe9a 	bl	800c9ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	4a0f      	ldr	r2, [pc, #60]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc7c:	639a      	str	r2, [r3, #56]	; 0x38
 800cc7e:	4a0e      	ldr	r2, [pc, #56]	; (800ccb8 <HAL_ADC_MspInit+0x2ac>)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800cc84:	2200      	movs	r2, #0
 800cc86:	2100      	movs	r1, #0
 800cc88:	2012      	movs	r0, #18
 800cc8a:	f7f6 f910 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800cc8e:	2012      	movs	r0, #18
 800cc90:	f7f6 f929 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800cc94:	e094      	b.n	800cdc0 <HAL_ADC_MspInit+0x3b4>
 800cc96:	bf00      	nop
 800cc98:	40012000 	.word	0x40012000
 800cc9c:	40023800 	.word	0x40023800
 800cca0:	40020800 	.word	0x40020800
 800cca4:	40020000 	.word	0x40020000
 800cca8:	40020400 	.word	0x40020400
 800ccac:	20000e68 	.word	0x20000e68
 800ccb0:	40026410 	.word	0x40026410
 800ccb4:	40012100 	.word	0x40012100
 800ccb8:	20001110 	.word	0x20001110
 800ccbc:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	4a40      	ldr	r2, [pc, #256]	; (800cdc8 <HAL_ADC_MspInit+0x3bc>)
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d17a      	bne.n	800cdc0 <HAL_ADC_MspInit+0x3b4>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800ccca:	2300      	movs	r3, #0
 800cccc:	613b      	str	r3, [r7, #16]
 800ccce:	4b3f      	ldr	r3, [pc, #252]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800ccd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccd2:	4a3e      	ldr	r2, [pc, #248]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800ccd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800ccd8:	6453      	str	r3, [r2, #68]	; 0x44
 800ccda:	4b3c      	ldr	r3, [pc, #240]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800ccdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cce2:	613b      	str	r3, [r7, #16]
 800cce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cce6:	2300      	movs	r3, #0
 800cce8:	60fb      	str	r3, [r7, #12]
 800ccea:	4b38      	ldr	r3, [pc, #224]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800ccec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccee:	4a37      	ldr	r2, [pc, #220]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800ccf0:	f043 0304 	orr.w	r3, r3, #4
 800ccf4:	6313      	str	r3, [r2, #48]	; 0x30
 800ccf6:	4b35      	ldr	r3, [pc, #212]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800ccf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccfa:	f003 0304 	and.w	r3, r3, #4
 800ccfe:	60fb      	str	r3, [r7, #12]
 800cd00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cd02:	2300      	movs	r3, #0
 800cd04:	60bb      	str	r3, [r7, #8]
 800cd06:	4b31      	ldr	r3, [pc, #196]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800cd08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd0a:	4a30      	ldr	r2, [pc, #192]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800cd0c:	f043 0301 	orr.w	r3, r3, #1
 800cd10:	6313      	str	r3, [r2, #48]	; 0x30
 800cd12:	4b2e      	ldr	r3, [pc, #184]	; (800cdcc <HAL_ADC_MspInit+0x3c0>)
 800cd14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd16:	f003 0301 	and.w	r3, r3, #1
 800cd1a:	60bb      	str	r3, [r7, #8]
 800cd1c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cd1e:	2308      	movs	r3, #8
 800cd20:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cd22:	2303      	movs	r3, #3
 800cd24:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd26:	2300      	movs	r3, #0
 800cd28:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cd2a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd2e:	4619      	mov	r1, r3
 800cd30:	4827      	ldr	r0, [pc, #156]	; (800cdd0 <HAL_ADC_MspInit+0x3c4>)
 800cd32:	f7f6 fcd7 	bl	80036e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cd36:	2308      	movs	r3, #8
 800cd38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cd3a:	2303      	movs	r3, #3
 800cd3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cd42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cd46:	4619      	mov	r1, r3
 800cd48:	4822      	ldr	r0, [pc, #136]	; (800cdd4 <HAL_ADC_MspInit+0x3c8>)
 800cd4a:	f7f6 fccb 	bl	80036e4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800cd4e:	4b22      	ldr	r3, [pc, #136]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd50:	4a22      	ldr	r2, [pc, #136]	; (800cddc <HAL_ADC_MspInit+0x3d0>)
 800cd52:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800cd54:	4b20      	ldr	r3, [pc, #128]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd56:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800cd5a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cd5c:	4b1e      	ldr	r3, [pc, #120]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd5e:	2200      	movs	r2, #0
 800cd60:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd62:	4b1d      	ldr	r3, [pc, #116]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800cd68:	4b1b      	ldr	r3, [pc, #108]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd6e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cd70:	4b19      	ldr	r3, [pc, #100]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cd76:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cd78:	4b17      	ldr	r3, [pc, #92]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cd7e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800cd80:	4b15      	ldr	r3, [pc, #84]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd86:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800cd88:	4b13      	ldr	r3, [pc, #76]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cd8e:	4b12      	ldr	r3, [pc, #72]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd90:	2200      	movs	r2, #0
 800cd92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800cd94:	4810      	ldr	r0, [pc, #64]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cd96:	f7f6 f8c1 	bl	8002f1c <HAL_DMA_Init>
 800cd9a:	4603      	mov	r3, r0
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d001      	beq.n	800cda4 <HAL_ADC_MspInit+0x398>
      Error_Handler();
 800cda0:	f7ff fe04 	bl	800c9ac <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	4a0c      	ldr	r2, [pc, #48]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cda8:	639a      	str	r2, [r3, #56]	; 0x38
 800cdaa:	4a0b      	ldr	r2, [pc, #44]	; (800cdd8 <HAL_ADC_MspInit+0x3cc>)
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	2100      	movs	r1, #0
 800cdb4:	2012      	movs	r0, #18
 800cdb6:	f7f6 f87a 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800cdba:	2012      	movs	r0, #18
 800cdbc:	f7f6 f893 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800cdc0:	bf00      	nop
 800cdc2:	3748      	adds	r7, #72	; 0x48
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	40012200 	.word	0x40012200
 800cdcc:	40023800 	.word	0x40023800
 800cdd0:	40020800 	.word	0x40020800
 800cdd4:	40020000 	.word	0x40020000
 800cdd8:	20000c10 	.word	0x20000c10
 800cddc:	40026428 	.word	0x40026428

0800cde0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b08a      	sub	sp, #40	; 0x28
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cde8:	f107 0314 	add.w	r3, r7, #20
 800cdec:	2200      	movs	r2, #0
 800cdee:	601a      	str	r2, [r3, #0]
 800cdf0:	605a      	str	r2, [r3, #4]
 800cdf2:	609a      	str	r2, [r3, #8]
 800cdf4:	60da      	str	r2, [r3, #12]
 800cdf6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a1d      	ldr	r2, [pc, #116]	; (800ce74 <HAL_CAN_MspInit+0x94>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d133      	bne.n	800ce6a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800ce02:	2300      	movs	r3, #0
 800ce04:	613b      	str	r3, [r7, #16]
 800ce06:	4b1c      	ldr	r3, [pc, #112]	; (800ce78 <HAL_CAN_MspInit+0x98>)
 800ce08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce0a:	4a1b      	ldr	r2, [pc, #108]	; (800ce78 <HAL_CAN_MspInit+0x98>)
 800ce0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ce10:	6413      	str	r3, [r2, #64]	; 0x40
 800ce12:	4b19      	ldr	r3, [pc, #100]	; (800ce78 <HAL_CAN_MspInit+0x98>)
 800ce14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce1a:	613b      	str	r3, [r7, #16]
 800ce1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60fb      	str	r3, [r7, #12]
 800ce22:	4b15      	ldr	r3, [pc, #84]	; (800ce78 <HAL_CAN_MspInit+0x98>)
 800ce24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce26:	4a14      	ldr	r2, [pc, #80]	; (800ce78 <HAL_CAN_MspInit+0x98>)
 800ce28:	f043 0308 	orr.w	r3, r3, #8
 800ce2c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce2e:	4b12      	ldr	r3, [pc, #72]	; (800ce78 <HAL_CAN_MspInit+0x98>)
 800ce30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce32:	f003 0308 	and.w	r3, r3, #8
 800ce36:	60fb      	str	r3, [r7, #12]
 800ce38:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ce3a:	2303      	movs	r3, #3
 800ce3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce3e:	2302      	movs	r3, #2
 800ce40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce42:	2300      	movs	r3, #0
 800ce44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce46:	2303      	movs	r3, #3
 800ce48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800ce4a:	2309      	movs	r3, #9
 800ce4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ce4e:	f107 0314 	add.w	r3, r7, #20
 800ce52:	4619      	mov	r1, r3
 800ce54:	4809      	ldr	r0, [pc, #36]	; (800ce7c <HAL_CAN_MspInit+0x9c>)
 800ce56:	f7f6 fc45 	bl	80036e4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	2100      	movs	r1, #0
 800ce5e:	2014      	movs	r0, #20
 800ce60:	f7f6 f825 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800ce64:	2014      	movs	r0, #20
 800ce66:	f7f6 f83e 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800ce6a:	bf00      	nop
 800ce6c:	3728      	adds	r7, #40	; 0x28
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}
 800ce72:	bf00      	nop
 800ce74:	40006400 	.word	0x40006400
 800ce78:	40023800 	.word	0x40023800
 800ce7c:	40020c00 	.word	0x40020c00

0800ce80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08c      	sub	sp, #48	; 0x30
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce88:	f107 031c 	add.w	r3, r7, #28
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	605a      	str	r2, [r3, #4]
 800ce92:	609a      	str	r2, [r3, #8]
 800ce94:	60da      	str	r2, [r3, #12]
 800ce96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a32      	ldr	r2, [pc, #200]	; (800cf68 <HAL_I2C_MspInit+0xe8>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d12c      	bne.n	800cefc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cea2:	2300      	movs	r3, #0
 800cea4:	61bb      	str	r3, [r7, #24]
 800cea6:	4b31      	ldr	r3, [pc, #196]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceaa:	4a30      	ldr	r2, [pc, #192]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800ceac:	f043 0302 	orr.w	r3, r3, #2
 800ceb0:	6313      	str	r3, [r2, #48]	; 0x30
 800ceb2:	4b2e      	ldr	r3, [pc, #184]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800ceb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceb6:	f003 0302 	and.w	r3, r3, #2
 800ceba:	61bb      	str	r3, [r7, #24]
 800cebc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cebe:	23c0      	movs	r3, #192	; 0xc0
 800cec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cec2:	2312      	movs	r3, #18
 800cec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cec6:	2301      	movs	r3, #1
 800cec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ceca:	2303      	movs	r3, #3
 800cecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800cece:	2304      	movs	r3, #4
 800ced0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ced2:	f107 031c 	add.w	r3, r7, #28
 800ced6:	4619      	mov	r1, r3
 800ced8:	4825      	ldr	r0, [pc, #148]	; (800cf70 <HAL_I2C_MspInit+0xf0>)
 800ceda:	f7f6 fc03 	bl	80036e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cede:	2300      	movs	r3, #0
 800cee0:	617b      	str	r3, [r7, #20]
 800cee2:	4b22      	ldr	r3, [pc, #136]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee6:	4a21      	ldr	r2, [pc, #132]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cee8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ceec:	6413      	str	r3, [r2, #64]	; 0x40
 800ceee:	4b1f      	ldr	r3, [pc, #124]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cef6:	617b      	str	r3, [r7, #20]
 800cef8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800cefa:	e031      	b.n	800cf60 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	4a1c      	ldr	r2, [pc, #112]	; (800cf74 <HAL_I2C_MspInit+0xf4>)
 800cf02:	4293      	cmp	r3, r2
 800cf04:	d12c      	bne.n	800cf60 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cf06:	2300      	movs	r3, #0
 800cf08:	613b      	str	r3, [r7, #16]
 800cf0a:	4b18      	ldr	r3, [pc, #96]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cf0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf0e:	4a17      	ldr	r2, [pc, #92]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cf10:	f043 0302 	orr.w	r3, r3, #2
 800cf14:	6313      	str	r3, [r2, #48]	; 0x30
 800cf16:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cf18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf1a:	f003 0302 	and.w	r3, r3, #2
 800cf1e:	613b      	str	r3, [r7, #16]
 800cf20:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800cf22:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800cf26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cf28:	2312      	movs	r3, #18
 800cf2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cf30:	2303      	movs	r3, #3
 800cf32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800cf34:	2304      	movs	r3, #4
 800cf36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cf38:	f107 031c 	add.w	r3, r7, #28
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	480c      	ldr	r0, [pc, #48]	; (800cf70 <HAL_I2C_MspInit+0xf0>)
 800cf40:	f7f6 fbd0 	bl	80036e4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cf44:	2300      	movs	r3, #0
 800cf46:	60fb      	str	r3, [r7, #12]
 800cf48:	4b08      	ldr	r3, [pc, #32]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cf4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf4c:	4a07      	ldr	r2, [pc, #28]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cf4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cf52:	6413      	str	r3, [r2, #64]	; 0x40
 800cf54:	4b05      	ldr	r3, [pc, #20]	; (800cf6c <HAL_I2C_MspInit+0xec>)
 800cf56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf5c:	60fb      	str	r3, [r7, #12]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
}
 800cf60:	bf00      	nop
 800cf62:	3730      	adds	r7, #48	; 0x30
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	40005400 	.word	0x40005400
 800cf6c:	40023800 	.word	0x40023800
 800cf70:	40020400 	.word	0x40020400
 800cf74:	40005800 	.word	0x40005800

0800cf78 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800cf78:	b480      	push	{r7}
 800cf7a:	b083      	sub	sp, #12
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a05      	ldr	r2, [pc, #20]	; (800cf9c <HAL_RTC_MspInit+0x24>)
 800cf86:	4293      	cmp	r3, r2
 800cf88:	d102      	bne.n	800cf90 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800cf8a:	4b05      	ldr	r3, [pc, #20]	; (800cfa0 <HAL_RTC_MspInit+0x28>)
 800cf8c:	2201      	movs	r2, #1
 800cf8e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800cf90:	bf00      	nop
 800cf92:	370c      	adds	r7, #12
 800cf94:	46bd      	mov	sp, r7
 800cf96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9a:	4770      	bx	lr
 800cf9c:	40002800 	.word	0x40002800
 800cfa0:	42470e3c 	.word	0x42470e3c

0800cfa4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	b08a      	sub	sp, #40	; 0x28
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfac:	f107 0314 	add.w	r3, r7, #20
 800cfb0:	2200      	movs	r2, #0
 800cfb2:	601a      	str	r2, [r3, #0]
 800cfb4:	605a      	str	r2, [r3, #4]
 800cfb6:	609a      	str	r2, [r3, #8]
 800cfb8:	60da      	str	r2, [r3, #12]
 800cfba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	4a1d      	ldr	r2, [pc, #116]	; (800d038 <HAL_SPI_MspInit+0x94>)
 800cfc2:	4293      	cmp	r3, r2
 800cfc4:	d134      	bne.n	800d030 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	613b      	str	r3, [r7, #16]
 800cfca:	4b1c      	ldr	r3, [pc, #112]	; (800d03c <HAL_SPI_MspInit+0x98>)
 800cfcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfce:	4a1b      	ldr	r2, [pc, #108]	; (800d03c <HAL_SPI_MspInit+0x98>)
 800cfd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cfd4:	6413      	str	r3, [r2, #64]	; 0x40
 800cfd6:	4b19      	ldr	r3, [pc, #100]	; (800d03c <HAL_SPI_MspInit+0x98>)
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cfde:	613b      	str	r3, [r7, #16]
 800cfe0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	60fb      	str	r3, [r7, #12]
 800cfe6:	4b15      	ldr	r3, [pc, #84]	; (800d03c <HAL_SPI_MspInit+0x98>)
 800cfe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfea:	4a14      	ldr	r2, [pc, #80]	; (800d03c <HAL_SPI_MspInit+0x98>)
 800cfec:	f043 0302 	orr.w	r3, r3, #2
 800cff0:	6313      	str	r3, [r2, #48]	; 0x30
 800cff2:	4b12      	ldr	r3, [pc, #72]	; (800d03c <HAL_SPI_MspInit+0x98>)
 800cff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cff6:	f003 0302 	and.w	r3, r3, #2
 800cffa:	60fb      	str	r3, [r7, #12]
 800cffc:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800cffe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800d002:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d004:	2302      	movs	r3, #2
 800d006:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d008:	2300      	movs	r3, #0
 800d00a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d00c:	2303      	movs	r3, #3
 800d00e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800d010:	2305      	movs	r3, #5
 800d012:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d014:	f107 0314 	add.w	r3, r7, #20
 800d018:	4619      	mov	r1, r3
 800d01a:	4809      	ldr	r0, [pc, #36]	; (800d040 <HAL_SPI_MspInit+0x9c>)
 800d01c:	f7f6 fb62 	bl	80036e4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800d020:	2200      	movs	r2, #0
 800d022:	2100      	movs	r1, #0
 800d024:	2024      	movs	r0, #36	; 0x24
 800d026:	f7f5 ff42 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800d02a:	2024      	movs	r0, #36	; 0x24
 800d02c:	f7f5 ff5b 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800d030:	bf00      	nop
 800d032:	3728      	adds	r7, #40	; 0x28
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	40003800 	.word	0x40003800
 800d03c:	40023800 	.word	0x40023800
 800d040:	40020400 	.word	0x40020400

0800d044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b090      	sub	sp, #64	; 0x40
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d04c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d050:	2200      	movs	r2, #0
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	605a      	str	r2, [r3, #4]
 800d056:	609a      	str	r2, [r3, #8]
 800d058:	60da      	str	r2, [r3, #12]
 800d05a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a87      	ldr	r2, [pc, #540]	; (800d280 <HAL_TIM_Base_MspInit+0x23c>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d12e      	bne.n	800d0c4 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800d066:	2300      	movs	r3, #0
 800d068:	62bb      	str	r3, [r7, #40]	; 0x28
 800d06a:	4b86      	ldr	r3, [pc, #536]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d06e:	4a85      	ldr	r2, [pc, #532]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d070:	f043 0301 	orr.w	r3, r3, #1
 800d074:	6453      	str	r3, [r2, #68]	; 0x44
 800d076:	4b83      	ldr	r3, [pc, #524]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d07a:	f003 0301 	and.w	r3, r3, #1
 800d07e:	62bb      	str	r3, [r7, #40]	; 0x28
 800d080:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800d082:	2200      	movs	r2, #0
 800d084:	2100      	movs	r1, #0
 800d086:	2018      	movs	r0, #24
 800d088:	f7f5 ff11 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800d08c:	2018      	movs	r0, #24
 800d08e:	f7f5 ff2a 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800d092:	2200      	movs	r2, #0
 800d094:	2100      	movs	r1, #0
 800d096:	2019      	movs	r0, #25
 800d098:	f7f5 ff09 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800d09c:	2019      	movs	r0, #25
 800d09e:	f7f5 ff22 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	2100      	movs	r1, #0
 800d0a6:	201a      	movs	r0, #26
 800d0a8:	f7f5 ff01 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800d0ac:	201a      	movs	r0, #26
 800d0ae:	f7f5 ff1a 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	2100      	movs	r1, #0
 800d0b6:	201b      	movs	r0, #27
 800d0b8:	f7f5 fef9 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800d0bc:	201b      	movs	r0, #27
 800d0be:	f7f5 ff12 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800d0c2:	e0d8      	b.n	800d276 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM2)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d0cc:	d10e      	bne.n	800d0ec <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0d2:	4b6c      	ldr	r3, [pc, #432]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d0d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d6:	4a6b      	ldr	r2, [pc, #428]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d0d8:	f043 0301 	orr.w	r3, r3, #1
 800d0dc:	6413      	str	r3, [r2, #64]	; 0x40
 800d0de:	4b69      	ldr	r3, [pc, #420]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d0e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0e2:	f003 0301 	and.w	r3, r3, #1
 800d0e6:	627b      	str	r3, [r7, #36]	; 0x24
 800d0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0ea:	e0c4      	b.n	800d276 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM3)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	4a65      	ldr	r2, [pc, #404]	; (800d288 <HAL_TIM_Base_MspInit+0x244>)
 800d0f2:	4293      	cmp	r3, r2
 800d0f4:	d116      	bne.n	800d124 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	623b      	str	r3, [r7, #32]
 800d0fa:	4b62      	ldr	r3, [pc, #392]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d0fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0fe:	4a61      	ldr	r2, [pc, #388]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d100:	f043 0302 	orr.w	r3, r3, #2
 800d104:	6413      	str	r3, [r2, #64]	; 0x40
 800d106:	4b5f      	ldr	r3, [pc, #380]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d10a:	f003 0302 	and.w	r3, r3, #2
 800d10e:	623b      	str	r3, [r7, #32]
 800d110:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800d112:	2200      	movs	r2, #0
 800d114:	2100      	movs	r1, #0
 800d116:	201d      	movs	r0, #29
 800d118:	f7f5 fec9 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800d11c:	201d      	movs	r0, #29
 800d11e:	f7f5 fee2 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800d122:	e0a8      	b.n	800d276 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM5)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	4a58      	ldr	r2, [pc, #352]	; (800d28c <HAL_TIM_Base_MspInit+0x248>)
 800d12a:	4293      	cmp	r3, r2
 800d12c:	d116      	bne.n	800d15c <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800d12e:	2300      	movs	r3, #0
 800d130:	61fb      	str	r3, [r7, #28]
 800d132:	4b54      	ldr	r3, [pc, #336]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d136:	4a53      	ldr	r2, [pc, #332]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d138:	f043 0308 	orr.w	r3, r3, #8
 800d13c:	6413      	str	r3, [r2, #64]	; 0x40
 800d13e:	4b51      	ldr	r3, [pc, #324]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d142:	f003 0308 	and.w	r3, r3, #8
 800d146:	61fb      	str	r3, [r7, #28]
 800d148:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800d14a:	2200      	movs	r2, #0
 800d14c:	2100      	movs	r1, #0
 800d14e:	2032      	movs	r0, #50	; 0x32
 800d150:	f7f5 fead 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800d154:	2032      	movs	r0, #50	; 0x32
 800d156:	f7f5 fec6 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800d15a:	e08c      	b.n	800d276 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM6)
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	4a4b      	ldr	r2, [pc, #300]	; (800d290 <HAL_TIM_Base_MspInit+0x24c>)
 800d162:	4293      	cmp	r3, r2
 800d164:	d116      	bne.n	800d194 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800d166:	2300      	movs	r3, #0
 800d168:	61bb      	str	r3, [r7, #24]
 800d16a:	4b46      	ldr	r3, [pc, #280]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d16c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d16e:	4a45      	ldr	r2, [pc, #276]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d170:	f043 0310 	orr.w	r3, r3, #16
 800d174:	6413      	str	r3, [r2, #64]	; 0x40
 800d176:	4b43      	ldr	r3, [pc, #268]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d17a:	f003 0310 	and.w	r3, r3, #16
 800d17e:	61bb      	str	r3, [r7, #24]
 800d180:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800d182:	2200      	movs	r2, #0
 800d184:	2100      	movs	r1, #0
 800d186:	2036      	movs	r0, #54	; 0x36
 800d188:	f7f5 fe91 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800d18c:	2036      	movs	r0, #54	; 0x36
 800d18e:	f7f5 feaa 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800d192:	e070      	b.n	800d276 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM9)
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	4a3e      	ldr	r2, [pc, #248]	; (800d294 <HAL_TIM_Base_MspInit+0x250>)
 800d19a:	4293      	cmp	r3, r2
 800d19c:	d116      	bne.n	800d1cc <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800d19e:	2300      	movs	r3, #0
 800d1a0:	617b      	str	r3, [r7, #20]
 800d1a2:	4b38      	ldr	r3, [pc, #224]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d1a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1a6:	4a37      	ldr	r2, [pc, #220]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d1a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d1ac:	6453      	str	r3, [r2, #68]	; 0x44
 800d1ae:	4b35      	ldr	r3, [pc, #212]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d1b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d1b6:	617b      	str	r3, [r7, #20]
 800d1b8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	2100      	movs	r1, #0
 800d1be:	2018      	movs	r0, #24
 800d1c0:	f7f5 fe75 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800d1c4:	2018      	movs	r0, #24
 800d1c6:	f7f5 fe8e 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800d1ca:	e054      	b.n	800d276 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM12)
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	4a31      	ldr	r2, [pc, #196]	; (800d298 <HAL_TIM_Base_MspInit+0x254>)
 800d1d2:	4293      	cmp	r3, r2
 800d1d4:	d116      	bne.n	800d204 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	613b      	str	r3, [r7, #16]
 800d1da:	4b2a      	ldr	r3, [pc, #168]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d1dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1de:	4a29      	ldr	r2, [pc, #164]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d1e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1e4:	6413      	str	r3, [r2, #64]	; 0x40
 800d1e6:	4b27      	ldr	r3, [pc, #156]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d1e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1ee:	613b      	str	r3, [r7, #16]
 800d1f0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	2100      	movs	r1, #0
 800d1f6:	202b      	movs	r0, #43	; 0x2b
 800d1f8:	f7f5 fe59 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800d1fc:	202b      	movs	r0, #43	; 0x2b
 800d1fe:	f7f5 fe72 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800d202:	e038      	b.n	800d276 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM13)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	4a24      	ldr	r2, [pc, #144]	; (800d29c <HAL_TIM_Base_MspInit+0x258>)
 800d20a:	4293      	cmp	r3, r2
 800d20c:	d133      	bne.n	800d276 <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800d20e:	2300      	movs	r3, #0
 800d210:	60fb      	str	r3, [r7, #12]
 800d212:	4b1c      	ldr	r3, [pc, #112]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d216:	4a1b      	ldr	r2, [pc, #108]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d218:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d21c:	6413      	str	r3, [r2, #64]	; 0x40
 800d21e:	4b19      	ldr	r3, [pc, #100]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d226:	60fb      	str	r3, [r7, #12]
 800d228:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d22a:	2300      	movs	r3, #0
 800d22c:	60bb      	str	r3, [r7, #8]
 800d22e:	4b15      	ldr	r3, [pc, #84]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d232:	4a14      	ldr	r2, [pc, #80]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d234:	f043 0301 	orr.w	r3, r3, #1
 800d238:	6313      	str	r3, [r2, #48]	; 0x30
 800d23a:	4b12      	ldr	r3, [pc, #72]	; (800d284 <HAL_TIM_Base_MspInit+0x240>)
 800d23c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d23e:	f003 0301 	and.w	r3, r3, #1
 800d242:	60bb      	str	r3, [r7, #8]
 800d244:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d246:	2340      	movs	r3, #64	; 0x40
 800d248:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d24a:	2302      	movs	r3, #2
 800d24c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d24e:	2300      	movs	r3, #0
 800d250:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d252:	2300      	movs	r3, #0
 800d254:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800d256:	2309      	movs	r3, #9
 800d258:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d25a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d25e:	4619      	mov	r1, r3
 800d260:	480f      	ldr	r0, [pc, #60]	; (800d2a0 <HAL_TIM_Base_MspInit+0x25c>)
 800d262:	f7f6 fa3f 	bl	80036e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800d266:	2200      	movs	r2, #0
 800d268:	2100      	movs	r1, #0
 800d26a:	202c      	movs	r0, #44	; 0x2c
 800d26c:	f7f5 fe1f 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d270:	202c      	movs	r0, #44	; 0x2c
 800d272:	f7f5 fe38 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800d276:	bf00      	nop
 800d278:	3740      	adds	r7, #64	; 0x40
 800d27a:	46bd      	mov	sp, r7
 800d27c:	bd80      	pop	{r7, pc}
 800d27e:	bf00      	nop
 800d280:	40010000 	.word	0x40010000
 800d284:	40023800 	.word	0x40023800
 800d288:	40000400 	.word	0x40000400
 800d28c:	40000c00 	.word	0x40000c00
 800d290:	40001000 	.word	0x40001000
 800d294:	40014000 	.word	0x40014000
 800d298:	40001800 	.word	0x40001800
 800d29c:	40001c00 	.word	0x40001c00
 800d2a0:	40020000 	.word	0x40020000

0800d2a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b08a      	sub	sp, #40	; 0x28
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d2ac:	f107 0314 	add.w	r3, r7, #20
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	601a      	str	r2, [r3, #0]
 800d2b4:	605a      	str	r2, [r3, #4]
 800d2b6:	609a      	str	r2, [r3, #8]
 800d2b8:	60da      	str	r2, [r3, #12]
 800d2ba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4a29      	ldr	r2, [pc, #164]	; (800d368 <HAL_TIM_Encoder_MspInit+0xc4>)
 800d2c2:	4293      	cmp	r3, r2
 800d2c4:	d14b      	bne.n	800d35e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	613b      	str	r3, [r7, #16]
 800d2ca:	4b28      	ldr	r3, [pc, #160]	; (800d36c <HAL_TIM_Encoder_MspInit+0xc8>)
 800d2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2ce:	4a27      	ldr	r2, [pc, #156]	; (800d36c <HAL_TIM_Encoder_MspInit+0xc8>)
 800d2d0:	f043 0302 	orr.w	r3, r3, #2
 800d2d4:	6453      	str	r3, [r2, #68]	; 0x44
 800d2d6:	4b25      	ldr	r3, [pc, #148]	; (800d36c <HAL_TIM_Encoder_MspInit+0xc8>)
 800d2d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2da:	f003 0302 	and.w	r3, r3, #2
 800d2de:	613b      	str	r3, [r7, #16]
 800d2e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	60fb      	str	r3, [r7, #12]
 800d2e6:	4b21      	ldr	r3, [pc, #132]	; (800d36c <HAL_TIM_Encoder_MspInit+0xc8>)
 800d2e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ea:	4a20      	ldr	r2, [pc, #128]	; (800d36c <HAL_TIM_Encoder_MspInit+0xc8>)
 800d2ec:	f043 0304 	orr.w	r3, r3, #4
 800d2f0:	6313      	str	r3, [r2, #48]	; 0x30
 800d2f2:	4b1e      	ldr	r3, [pc, #120]	; (800d36c <HAL_TIM_Encoder_MspInit+0xc8>)
 800d2f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f6:	f003 0304 	and.w	r3, r3, #4
 800d2fa:	60fb      	str	r3, [r7, #12]
 800d2fc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d2fe:	23c0      	movs	r3, #192	; 0xc0
 800d300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d302:	2302      	movs	r3, #2
 800d304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d306:	2300      	movs	r3, #0
 800d308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d30a:	2300      	movs	r3, #0
 800d30c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d30e:	2303      	movs	r3, #3
 800d310:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d312:	f107 0314 	add.w	r3, r7, #20
 800d316:	4619      	mov	r1, r3
 800d318:	4815      	ldr	r0, [pc, #84]	; (800d370 <HAL_TIM_Encoder_MspInit+0xcc>)
 800d31a:	f7f6 f9e3 	bl	80036e4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800d31e:	2200      	movs	r2, #0
 800d320:	2100      	movs	r1, #0
 800d322:	202b      	movs	r0, #43	; 0x2b
 800d324:	f7f5 fdc3 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800d328:	202b      	movs	r0, #43	; 0x2b
 800d32a:	f7f5 fddc 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800d32e:	2200      	movs	r2, #0
 800d330:	2100      	movs	r1, #0
 800d332:	202c      	movs	r0, #44	; 0x2c
 800d334:	f7f5 fdbb 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d338:	202c      	movs	r0, #44	; 0x2c
 800d33a:	f7f5 fdd4 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800d33e:	2200      	movs	r2, #0
 800d340:	2100      	movs	r1, #0
 800d342:	202d      	movs	r0, #45	; 0x2d
 800d344:	f7f5 fdb3 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800d348:	202d      	movs	r0, #45	; 0x2d
 800d34a:	f7f5 fdcc 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800d34e:	2200      	movs	r2, #0
 800d350:	2100      	movs	r1, #0
 800d352:	202e      	movs	r0, #46	; 0x2e
 800d354:	f7f5 fdab 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800d358:	202e      	movs	r0, #46	; 0x2e
 800d35a:	f7f5 fdc4 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d35e:	bf00      	nop
 800d360:	3728      	adds	r7, #40	; 0x28
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}
 800d366:	bf00      	nop
 800d368:	40010400 	.word	0x40010400
 800d36c:	40023800 	.word	0x40023800
 800d370:	40020800 	.word	0x40020800

0800d374 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b08a      	sub	sp, #40	; 0x28
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d37c:	f107 0314 	add.w	r3, r7, #20
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	605a      	str	r2, [r3, #4]
 800d386:	609a      	str	r2, [r3, #8]
 800d388:	60da      	str	r2, [r3, #12]
 800d38a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	4a24      	ldr	r2, [pc, #144]	; (800d424 <HAL_TIM_MspPostInit+0xb0>)
 800d392:	4293      	cmp	r3, r2
 800d394:	d11f      	bne.n	800d3d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d396:	2300      	movs	r3, #0
 800d398:	613b      	str	r3, [r7, #16]
 800d39a:	4b23      	ldr	r3, [pc, #140]	; (800d428 <HAL_TIM_MspPostInit+0xb4>)
 800d39c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d39e:	4a22      	ldr	r2, [pc, #136]	; (800d428 <HAL_TIM_MspPostInit+0xb4>)
 800d3a0:	f043 0310 	orr.w	r3, r3, #16
 800d3a4:	6313      	str	r3, [r2, #48]	; 0x30
 800d3a6:	4b20      	ldr	r3, [pc, #128]	; (800d428 <HAL_TIM_MspPostInit+0xb4>)
 800d3a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3aa:	f003 0310 	and.w	r3, r3, #16
 800d3ae:	613b      	str	r3, [r7, #16]
 800d3b0:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800d3b2:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800d3b6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d3b8:	2302      	movs	r3, #2
 800d3ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d3c4:	2301      	movs	r3, #1
 800d3c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d3c8:	f107 0314 	add.w	r3, r7, #20
 800d3cc:	4619      	mov	r1, r3
 800d3ce:	4817      	ldr	r0, [pc, #92]	; (800d42c <HAL_TIM_MspPostInit+0xb8>)
 800d3d0:	f7f6 f988 	bl	80036e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800d3d4:	e022      	b.n	800d41c <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	4a15      	ldr	r2, [pc, #84]	; (800d430 <HAL_TIM_MspPostInit+0xbc>)
 800d3dc:	4293      	cmp	r3, r2
 800d3de:	d11d      	bne.n	800d41c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	60fb      	str	r3, [r7, #12]
 800d3e4:	4b10      	ldr	r3, [pc, #64]	; (800d428 <HAL_TIM_MspPostInit+0xb4>)
 800d3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3e8:	4a0f      	ldr	r2, [pc, #60]	; (800d428 <HAL_TIM_MspPostInit+0xb4>)
 800d3ea:	f043 0310 	orr.w	r3, r3, #16
 800d3ee:	6313      	str	r3, [r2, #48]	; 0x30
 800d3f0:	4b0d      	ldr	r3, [pc, #52]	; (800d428 <HAL_TIM_MspPostInit+0xb4>)
 800d3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f4:	f003 0310 	and.w	r3, r3, #16
 800d3f8:	60fb      	str	r3, [r7, #12]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800d3fc:	2360      	movs	r3, #96	; 0x60
 800d3fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d400:	2302      	movs	r3, #2
 800d402:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d404:	2300      	movs	r3, #0
 800d406:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d408:	2300      	movs	r3, #0
 800d40a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800d40c:	2303      	movs	r3, #3
 800d40e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d410:	f107 0314 	add.w	r3, r7, #20
 800d414:	4619      	mov	r1, r3
 800d416:	4805      	ldr	r0, [pc, #20]	; (800d42c <HAL_TIM_MspPostInit+0xb8>)
 800d418:	f7f6 f964 	bl	80036e4 <HAL_GPIO_Init>
}
 800d41c:	bf00      	nop
 800d41e:	3728      	adds	r7, #40	; 0x28
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	40010000 	.word	0x40010000
 800d428:	40023800 	.word	0x40023800
 800d42c:	40021000 	.word	0x40021000
 800d430:	40014000 	.word	0x40014000

0800d434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b08a      	sub	sp, #40	; 0x28
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d43c:	f107 0314 	add.w	r3, r7, #20
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	605a      	str	r2, [r3, #4]
 800d446:	609a      	str	r2, [r3, #8]
 800d448:	60da      	str	r2, [r3, #12]
 800d44a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	4a34      	ldr	r2, [pc, #208]	; (800d524 <HAL_UART_MspInit+0xf0>)
 800d452:	4293      	cmp	r3, r2
 800d454:	d162      	bne.n	800d51c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d456:	2300      	movs	r3, #0
 800d458:	613b      	str	r3, [r7, #16]
 800d45a:	4b33      	ldr	r3, [pc, #204]	; (800d528 <HAL_UART_MspInit+0xf4>)
 800d45c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d45e:	4a32      	ldr	r2, [pc, #200]	; (800d528 <HAL_UART_MspInit+0xf4>)
 800d460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d464:	6413      	str	r3, [r2, #64]	; 0x40
 800d466:	4b30      	ldr	r3, [pc, #192]	; (800d528 <HAL_UART_MspInit+0xf4>)
 800d468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d46a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d46e:	613b      	str	r3, [r7, #16]
 800d470:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d472:	2300      	movs	r3, #0
 800d474:	60fb      	str	r3, [r7, #12]
 800d476:	4b2c      	ldr	r3, [pc, #176]	; (800d528 <HAL_UART_MspInit+0xf4>)
 800d478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47a:	4a2b      	ldr	r2, [pc, #172]	; (800d528 <HAL_UART_MspInit+0xf4>)
 800d47c:	f043 0308 	orr.w	r3, r3, #8
 800d480:	6313      	str	r3, [r2, #48]	; 0x30
 800d482:	4b29      	ldr	r3, [pc, #164]	; (800d528 <HAL_UART_MspInit+0xf4>)
 800d484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d486:	f003 0308 	and.w	r3, r3, #8
 800d48a:	60fb      	str	r3, [r7, #12]
 800d48c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d48e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d494:	2302      	movs	r3, #2
 800d496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d498:	2301      	movs	r3, #1
 800d49a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d49c:	2303      	movs	r3, #3
 800d49e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d4a0:	2307      	movs	r3, #7
 800d4a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d4a4:	f107 0314 	add.w	r3, r7, #20
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	4820      	ldr	r0, [pc, #128]	; (800d52c <HAL_UART_MspInit+0xf8>)
 800d4ac:	f7f6 f91a 	bl	80036e4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800d4b0:	4b1f      	ldr	r3, [pc, #124]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4b2:	4a20      	ldr	r2, [pc, #128]	; (800d534 <HAL_UART_MspInit+0x100>)
 800d4b4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800d4b6:	4b1e      	ldr	r3, [pc, #120]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d4bc:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d4be:	4b1c      	ldr	r3, [pc, #112]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4c0:	2240      	movs	r2, #64	; 0x40
 800d4c2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d4c4:	4b1a      	ldr	r3, [pc, #104]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d4ca:	4b19      	ldr	r3, [pc, #100]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d4d0:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d4d2:	4b17      	ldr	r3, [pc, #92]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d4d8:	4b15      	ldr	r3, [pc, #84]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4da:	2200      	movs	r2, #0
 800d4dc:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800d4de:	4b14      	ldr	r3, [pc, #80]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d4e4:	4b12      	ldr	r3, [pc, #72]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d4ea:	4b11      	ldr	r3, [pc, #68]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800d4f0:	480f      	ldr	r0, [pc, #60]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d4f2:	f7f5 fd13 	bl	8002f1c <HAL_DMA_Init>
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d001      	beq.n	800d500 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800d4fc:	f7ff fa56 	bl	800c9ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	4a0b      	ldr	r2, [pc, #44]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d504:	631a      	str	r2, [r3, #48]	; 0x30
 800d506:	4a0a      	ldr	r2, [pc, #40]	; (800d530 <HAL_UART_MspInit+0xfc>)
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800d50c:	2200      	movs	r2, #0
 800d50e:	2100      	movs	r1, #0
 800d510:	2027      	movs	r0, #39	; 0x27
 800d512:	f7f5 fccc 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d516:	2027      	movs	r0, #39	; 0x27
 800d518:	f7f5 fce5 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d51c:	bf00      	nop
 800d51e:	3728      	adds	r7, #40	; 0x28
 800d520:	46bd      	mov	sp, r7
 800d522:	bd80      	pop	{r7, pc}
 800d524:	40004800 	.word	0x40004800
 800d528:	40023800 	.word	0x40023800
 800d52c:	40020c00 	.word	0x40020c00
 800d530:	20000c70 	.word	0x20000c70
 800d534:	40026058 	.word	0x40026058

0800d538 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b08a      	sub	sp, #40	; 0x28
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d540:	f107 0314 	add.w	r3, r7, #20
 800d544:	2200      	movs	r2, #0
 800d546:	601a      	str	r2, [r3, #0]
 800d548:	605a      	str	r2, [r3, #4]
 800d54a:	609a      	str	r2, [r3, #8]
 800d54c:	60da      	str	r2, [r3, #12]
 800d54e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d558:	d132      	bne.n	800d5c0 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d55a:	2300      	movs	r3, #0
 800d55c:	613b      	str	r3, [r7, #16]
 800d55e:	4b1a      	ldr	r3, [pc, #104]	; (800d5c8 <HAL_PCD_MspInit+0x90>)
 800d560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d562:	4a19      	ldr	r2, [pc, #100]	; (800d5c8 <HAL_PCD_MspInit+0x90>)
 800d564:	f043 0301 	orr.w	r3, r3, #1
 800d568:	6313      	str	r3, [r2, #48]	; 0x30
 800d56a:	4b17      	ldr	r3, [pc, #92]	; (800d5c8 <HAL_PCD_MspInit+0x90>)
 800d56c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d56e:	f003 0301 	and.w	r3, r3, #1
 800d572:	613b      	str	r3, [r7, #16]
 800d574:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d576:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d57a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d57c:	2302      	movs	r3, #2
 800d57e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d580:	2300      	movs	r3, #0
 800d582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d584:	2303      	movs	r3, #3
 800d586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d588:	230a      	movs	r3, #10
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d58c:	f107 0314 	add.w	r3, r7, #20
 800d590:	4619      	mov	r1, r3
 800d592:	480e      	ldr	r0, [pc, #56]	; (800d5cc <HAL_PCD_MspInit+0x94>)
 800d594:	f7f6 f8a6 	bl	80036e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d598:	4b0b      	ldr	r3, [pc, #44]	; (800d5c8 <HAL_PCD_MspInit+0x90>)
 800d59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d59c:	4a0a      	ldr	r2, [pc, #40]	; (800d5c8 <HAL_PCD_MspInit+0x90>)
 800d59e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5a2:	6353      	str	r3, [r2, #52]	; 0x34
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	60fb      	str	r3, [r7, #12]
 800d5a8:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <HAL_PCD_MspInit+0x90>)
 800d5aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ac:	4a06      	ldr	r2, [pc, #24]	; (800d5c8 <HAL_PCD_MspInit+0x90>)
 800d5ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d5b2:	6453      	str	r3, [r2, #68]	; 0x44
 800d5b4:	4b04      	ldr	r3, [pc, #16]	; (800d5c8 <HAL_PCD_MspInit+0x90>)
 800d5b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d5bc:	60fb      	str	r3, [r7, #12]
 800d5be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800d5c0:	bf00      	nop
 800d5c2:	3728      	adds	r7, #40	; 0x28
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	40023800 	.word	0x40023800
 800d5cc:	40020000 	.word	0x40020000

0800d5d0 <NMI_Handler>:

/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d5d4:	bf00      	nop
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d5de:	b480      	push	{r7}
 800d5e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d5e2:	e7fe      	b.n	800d5e2 <HardFault_Handler+0x4>

0800d5e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d5e4:	b480      	push	{r7}
 800d5e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d5e8:	e7fe      	b.n	800d5e8 <MemManage_Handler+0x4>

0800d5ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d5ee:	e7fe      	b.n	800d5ee <BusFault_Handler+0x4>

0800d5f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d5f4:	e7fe      	b.n	800d5f4 <UsageFault_Handler+0x4>

0800d5f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d5f6:	b480      	push	{r7}
 800d5f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d5fa:	bf00      	nop
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d604:	b480      	push	{r7}
 800d606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d608:	bf00      	nop
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d612:	b480      	push	{r7}
 800d614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d616:	bf00      	nop
 800d618:	46bd      	mov	sp, r7
 800d61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61e:	4770      	bx	lr

0800d620 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d620:	b580      	push	{r7, lr}
 800d622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d624:	f7f3 fd02 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d628:	bf00      	nop
 800d62a:	bd80      	pop	{r7, pc}

0800d62c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800d62c:	b580      	push	{r7, lr}
 800d62e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800d630:	4802      	ldr	r0, [pc, #8]	; (800d63c <DMA1_Stream3_IRQHandler+0x10>)
 800d632:	f7f5 fd9b 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800d636:	bf00      	nop
 800d638:	bd80      	pop	{r7, pc}
 800d63a:	bf00      	nop
 800d63c:	20000c70 	.word	0x20000c70

0800d640 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800d644:	4805      	ldr	r0, [pc, #20]	; (800d65c <ADC_IRQHandler+0x1c>)
 800d646:	f7f3 fd76 	bl	8001136 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800d64a:	4805      	ldr	r0, [pc, #20]	; (800d660 <ADC_IRQHandler+0x20>)
 800d64c:	f7f3 fd73 	bl	8001136 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800d650:	4804      	ldr	r0, [pc, #16]	; (800d664 <ADC_IRQHandler+0x24>)
 800d652:	f7f3 fd70 	bl	8001136 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800d656:	bf00      	nop
 800d658:	bd80      	pop	{r7, pc}
 800d65a:	bf00      	nop
 800d65c:	20000d94 	.word	0x20000d94
 800d660:	2000070c 	.word	0x2000070c
 800d664:	20000ddc 	.word	0x20000ddc

0800d668 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d66c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d670:	f7f6 fa06 	bl	8003a80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d674:	bf00      	nop
 800d676:	bd80      	pop	{r7, pc}

0800d678 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d67c:	4803      	ldr	r0, [pc, #12]	; (800d68c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800d67e:	f7f9 f9db 	bl	8006a38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800d682:	4803      	ldr	r0, [pc, #12]	; (800d690 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800d684:	f7f9 f9d8 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800d688:	bf00      	nop
 800d68a:	bd80      	pop	{r7, pc}
 800d68c:	20000f28 	.word	0x20000f28
 800d690:	20000fd0 	.word	0x20000fd0

0800d694 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d698:	4802      	ldr	r0, [pc, #8]	; (800d6a4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800d69a:	f7f9 f9cd 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d69e:	bf00      	nop
 800d6a0:	bd80      	pop	{r7, pc}
 800d6a2:	bf00      	nop
 800d6a4:	20000f28 	.word	0x20000f28

0800d6a8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d6ac:	4802      	ldr	r0, [pc, #8]	; (800d6b8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800d6ae:	f7f9 f9c3 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800d6b2:	bf00      	nop
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	20000f28 	.word	0x20000f28

0800d6bc <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d6c0:	4802      	ldr	r0, [pc, #8]	; (800d6cc <TIM1_CC_IRQHandler+0x10>)
 800d6c2:	f7f9 f9b9 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800d6c6:	bf00      	nop
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	20000f28 	.word	0x20000f28

0800d6d0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d6d4:	4802      	ldr	r0, [pc, #8]	; (800d6e0 <TIM3_IRQHandler+0x10>)
 800d6d6:	f7f9 f9af 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM3_IRQn 1 */
}
 800d6da:	bf00      	nop
 800d6dc:	bd80      	pop	{r7, pc}
 800d6de:	bf00      	nop
 800d6e0:	20000d14 	.word	0x20000d14

0800d6e4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800d6e8:	4802      	ldr	r0, [pc, #8]	; (800d6f4 <SPI2_IRQHandler+0x10>)
 800d6ea:	f7f8 fcfd 	bl	80060e8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800d6ee:	bf00      	nop
 800d6f0:	bd80      	pop	{r7, pc}
 800d6f2:	bf00      	nop
 800d6f4:	200002ec 	.word	0x200002ec

0800d6f8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d6fc:	4802      	ldr	r0, [pc, #8]	; (800d708 <USART3_IRQHandler+0x10>)
 800d6fe:	f7fa fb49 	bl	8007d94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d702:	bf00      	nop
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	200006cc 	.word	0x200006cc

0800d70c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800d70c:	b580      	push	{r7, lr}
 800d70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d710:	4803      	ldr	r0, [pc, #12]	; (800d720 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800d712:	f7f9 f991 	bl	8006a38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800d716:	4803      	ldr	r0, [pc, #12]	; (800d724 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800d718:	f7f9 f98e 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800d71c:	bf00      	nop
 800d71e:	bd80      	pop	{r7, pc}
 800d720:	2000068c 	.word	0x2000068c
 800d724:	20001198 	.word	0x20001198

0800d728 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d72c:	4803      	ldr	r0, [pc, #12]	; (800d73c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800d72e:	f7f9 f983 	bl	8006a38 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800d732:	4803      	ldr	r0, [pc, #12]	; (800d740 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800d734:	f7f9 f980 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800d738:	bf00      	nop
 800d73a:	bd80      	pop	{r7, pc}
 800d73c:	2000068c 	.word	0x2000068c
 800d740:	20000e24 	.word	0x20000e24

0800d744 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800d744:	b580      	push	{r7, lr}
 800d746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d748:	4802      	ldr	r0, [pc, #8]	; (800d754 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800d74a:	f7f9 f975 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800d74e:	bf00      	nop
 800d750:	bd80      	pop	{r7, pc}
 800d752:	bf00      	nop
 800d754:	2000068c 	.word	0x2000068c

0800d758 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d75c:	4802      	ldr	r0, [pc, #8]	; (800d768 <TIM8_CC_IRQHandler+0x10>)
 800d75e:	f7f9 f96b 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800d762:	bf00      	nop
 800d764:	bd80      	pop	{r7, pc}
 800d766:	bf00      	nop
 800d768:	2000068c 	.word	0x2000068c

0800d76c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800d76c:	b580      	push	{r7, lr}
 800d76e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800d770:	4802      	ldr	r0, [pc, #8]	; (800d77c <TIM5_IRQHandler+0x10>)
 800d772:	f7f9 f961 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800d776:	bf00      	nop
 800d778:	bd80      	pop	{r7, pc}
 800d77a:	bf00      	nop
 800d77c:	20000cd0 	.word	0x20000cd0

0800d780 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d784:	4802      	ldr	r0, [pc, #8]	; (800d790 <TIM6_DAC_IRQHandler+0x10>)
 800d786:	f7f9 f957 	bl	8006a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d78a:	bf00      	nop
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	20000ee8 	.word	0x20000ee8

0800d794 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d798:	4802      	ldr	r0, [pc, #8]	; (800d7a4 <DMA2_Stream0_IRQHandler+0x10>)
 800d79a:	f7f5 fce7 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d79e:	bf00      	nop
 800d7a0:	bd80      	pop	{r7, pc}
 800d7a2:	bf00      	nop
 800d7a4:	20000e68 	.word	0x20000e68

0800d7a8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800d7ac:	4802      	ldr	r0, [pc, #8]	; (800d7b8 <DMA2_Stream1_IRQHandler+0x10>)
 800d7ae:	f7f5 fcdd 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800d7b2:	bf00      	nop
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	20000c10 	.word	0x20000c10

0800d7bc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d7bc:	b580      	push	{r7, lr}
 800d7be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d7c0:	4802      	ldr	r0, [pc, #8]	; (800d7cc <DMA2_Stream2_IRQHandler+0x10>)
 800d7c2:	f7f5 fcd3 	bl	800316c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d7c6:	bf00      	nop
 800d7c8:	bd80      	pop	{r7, pc}
 800d7ca:	bf00      	nop
 800d7cc:	20001110 	.word	0x20001110

0800d7d0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d7d8:	4b11      	ldr	r3, [pc, #68]	; (800d820 <_sbrk+0x50>)
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d102      	bne.n	800d7e6 <_sbrk+0x16>
		heap_end = &end;
 800d7e0:	4b0f      	ldr	r3, [pc, #60]	; (800d820 <_sbrk+0x50>)
 800d7e2:	4a10      	ldr	r2, [pc, #64]	; (800d824 <_sbrk+0x54>)
 800d7e4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d7e6:	4b0e      	ldr	r3, [pc, #56]	; (800d820 <_sbrk+0x50>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d7ec:	4b0c      	ldr	r3, [pc, #48]	; (800d820 <_sbrk+0x50>)
 800d7ee:	681a      	ldr	r2, [r3, #0]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	466a      	mov	r2, sp
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d907      	bls.n	800d80a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d7fa:	f000 f855 	bl	800d8a8 <__errno>
 800d7fe:	4602      	mov	r2, r0
 800d800:	230c      	movs	r3, #12
 800d802:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d808:	e006      	b.n	800d818 <_sbrk+0x48>
	}

	heap_end += incr;
 800d80a:	4b05      	ldr	r3, [pc, #20]	; (800d820 <_sbrk+0x50>)
 800d80c:	681a      	ldr	r2, [r3, #0]
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	4413      	add	r3, r2
 800d812:	4a03      	ldr	r2, [pc, #12]	; (800d820 <_sbrk+0x50>)
 800d814:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d816:	68fb      	ldr	r3, [r7, #12]
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3710      	adds	r7, #16
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	20000288 	.word	0x20000288
 800d824:	20001548 	.word	0x20001548

0800d828 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d828:	b480      	push	{r7}
 800d82a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d82c:	4b08      	ldr	r3, [pc, #32]	; (800d850 <SystemInit+0x28>)
 800d82e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d832:	4a07      	ldr	r2, [pc, #28]	; (800d850 <SystemInit+0x28>)
 800d834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d83c:	4b04      	ldr	r3, [pc, #16]	; (800d850 <SystemInit+0x28>)
 800d83e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d842:	609a      	str	r2, [r3, #8]
#endif
}
 800d844:	bf00      	nop
 800d846:	46bd      	mov	sp, r7
 800d848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84c:	4770      	bx	lr
 800d84e:	bf00      	nop
 800d850:	e000ed00 	.word	0xe000ed00

0800d854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d854:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d88c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d858:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d85a:	e003      	b.n	800d864 <LoopCopyDataInit>

0800d85c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d85c:	4b0c      	ldr	r3, [pc, #48]	; (800d890 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d85e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d860:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d862:	3104      	adds	r1, #4

0800d864 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d864:	480b      	ldr	r0, [pc, #44]	; (800d894 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d866:	4b0c      	ldr	r3, [pc, #48]	; (800d898 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d868:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d86a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d86c:	d3f6      	bcc.n	800d85c <CopyDataInit>
  ldr  r2, =_sbss
 800d86e:	4a0b      	ldr	r2, [pc, #44]	; (800d89c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d870:	e002      	b.n	800d878 <LoopFillZerobss>

0800d872 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d872:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d874:	f842 3b04 	str.w	r3, [r2], #4

0800d878 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d878:	4b09      	ldr	r3, [pc, #36]	; (800d8a0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d87a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d87c:	d3f9      	bcc.n	800d872 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d87e:	f7ff ffd3 	bl	800d828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d882:	f000 f817 	bl	800d8b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d886:	f7fb faff 	bl	8008e88 <main>
  bx  lr    
 800d88a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d88c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d890:	080113c0 	.word	0x080113c0
  ldr  r0, =_sdata
 800d894:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d898:	20000210 	.word	0x20000210
  ldr  r2, =_sbss
 800d89c:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 800d8a0:	20001548 	.word	0x20001548

0800d8a4 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d8a4:	e7fe      	b.n	800d8a4 <CAN1_RX1_IRQHandler>
	...

0800d8a8 <__errno>:
 800d8a8:	4b01      	ldr	r3, [pc, #4]	; (800d8b0 <__errno+0x8>)
 800d8aa:	6818      	ldr	r0, [r3, #0]
 800d8ac:	4770      	bx	lr
 800d8ae:	bf00      	nop
 800d8b0:	2000003c 	.word	0x2000003c

0800d8b4 <__libc_init_array>:
 800d8b4:	b570      	push	{r4, r5, r6, lr}
 800d8b6:	4e0d      	ldr	r6, [pc, #52]	; (800d8ec <__libc_init_array+0x38>)
 800d8b8:	4c0d      	ldr	r4, [pc, #52]	; (800d8f0 <__libc_init_array+0x3c>)
 800d8ba:	1ba4      	subs	r4, r4, r6
 800d8bc:	10a4      	asrs	r4, r4, #2
 800d8be:	2500      	movs	r5, #0
 800d8c0:	42a5      	cmp	r5, r4
 800d8c2:	d109      	bne.n	800d8d8 <__libc_init_array+0x24>
 800d8c4:	4e0b      	ldr	r6, [pc, #44]	; (800d8f4 <__libc_init_array+0x40>)
 800d8c6:	4c0c      	ldr	r4, [pc, #48]	; (800d8f8 <__libc_init_array+0x44>)
 800d8c8:	f003 f9d4 	bl	8010c74 <_init>
 800d8cc:	1ba4      	subs	r4, r4, r6
 800d8ce:	10a4      	asrs	r4, r4, #2
 800d8d0:	2500      	movs	r5, #0
 800d8d2:	42a5      	cmp	r5, r4
 800d8d4:	d105      	bne.n	800d8e2 <__libc_init_array+0x2e>
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8dc:	4798      	blx	r3
 800d8de:	3501      	adds	r5, #1
 800d8e0:	e7ee      	b.n	800d8c0 <__libc_init_array+0xc>
 800d8e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d8e6:	4798      	blx	r3
 800d8e8:	3501      	adds	r5, #1
 800d8ea:	e7f2      	b.n	800d8d2 <__libc_init_array+0x1e>
 800d8ec:	080113b8 	.word	0x080113b8
 800d8f0:	080113b8 	.word	0x080113b8
 800d8f4:	080113b8 	.word	0x080113b8
 800d8f8:	080113bc 	.word	0x080113bc

0800d8fc <memset>:
 800d8fc:	4402      	add	r2, r0
 800d8fe:	4603      	mov	r3, r0
 800d900:	4293      	cmp	r3, r2
 800d902:	d100      	bne.n	800d906 <memset+0xa>
 800d904:	4770      	bx	lr
 800d906:	f803 1b01 	strb.w	r1, [r3], #1
 800d90a:	e7f9      	b.n	800d900 <memset+0x4>

0800d90c <__cvt>:
 800d90c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d910:	ec55 4b10 	vmov	r4, r5, d0
 800d914:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d916:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d91a:	2d00      	cmp	r5, #0
 800d91c:	460e      	mov	r6, r1
 800d91e:	4691      	mov	r9, r2
 800d920:	4619      	mov	r1, r3
 800d922:	bfb8      	it	lt
 800d924:	4622      	movlt	r2, r4
 800d926:	462b      	mov	r3, r5
 800d928:	f027 0720 	bic.w	r7, r7, #32
 800d92c:	bfbb      	ittet	lt
 800d92e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d932:	461d      	movlt	r5, r3
 800d934:	2300      	movge	r3, #0
 800d936:	232d      	movlt	r3, #45	; 0x2d
 800d938:	bfb8      	it	lt
 800d93a:	4614      	movlt	r4, r2
 800d93c:	2f46      	cmp	r7, #70	; 0x46
 800d93e:	700b      	strb	r3, [r1, #0]
 800d940:	d004      	beq.n	800d94c <__cvt+0x40>
 800d942:	2f45      	cmp	r7, #69	; 0x45
 800d944:	d100      	bne.n	800d948 <__cvt+0x3c>
 800d946:	3601      	adds	r6, #1
 800d948:	2102      	movs	r1, #2
 800d94a:	e000      	b.n	800d94e <__cvt+0x42>
 800d94c:	2103      	movs	r1, #3
 800d94e:	ab03      	add	r3, sp, #12
 800d950:	9301      	str	r3, [sp, #4]
 800d952:	ab02      	add	r3, sp, #8
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	4632      	mov	r2, r6
 800d958:	4653      	mov	r3, sl
 800d95a:	ec45 4b10 	vmov	d0, r4, r5
 800d95e:	f000 fcef 	bl	800e340 <_dtoa_r>
 800d962:	2f47      	cmp	r7, #71	; 0x47
 800d964:	4680      	mov	r8, r0
 800d966:	d102      	bne.n	800d96e <__cvt+0x62>
 800d968:	f019 0f01 	tst.w	r9, #1
 800d96c:	d026      	beq.n	800d9bc <__cvt+0xb0>
 800d96e:	2f46      	cmp	r7, #70	; 0x46
 800d970:	eb08 0906 	add.w	r9, r8, r6
 800d974:	d111      	bne.n	800d99a <__cvt+0x8e>
 800d976:	f898 3000 	ldrb.w	r3, [r8]
 800d97a:	2b30      	cmp	r3, #48	; 0x30
 800d97c:	d10a      	bne.n	800d994 <__cvt+0x88>
 800d97e:	2200      	movs	r2, #0
 800d980:	2300      	movs	r3, #0
 800d982:	4620      	mov	r0, r4
 800d984:	4629      	mov	r1, r5
 800d986:	f7f3 f89f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d98a:	b918      	cbnz	r0, 800d994 <__cvt+0x88>
 800d98c:	f1c6 0601 	rsb	r6, r6, #1
 800d990:	f8ca 6000 	str.w	r6, [sl]
 800d994:	f8da 3000 	ldr.w	r3, [sl]
 800d998:	4499      	add	r9, r3
 800d99a:	2200      	movs	r2, #0
 800d99c:	2300      	movs	r3, #0
 800d99e:	4620      	mov	r0, r4
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	f7f3 f891 	bl	8000ac8 <__aeabi_dcmpeq>
 800d9a6:	b938      	cbnz	r0, 800d9b8 <__cvt+0xac>
 800d9a8:	2230      	movs	r2, #48	; 0x30
 800d9aa:	9b03      	ldr	r3, [sp, #12]
 800d9ac:	454b      	cmp	r3, r9
 800d9ae:	d205      	bcs.n	800d9bc <__cvt+0xb0>
 800d9b0:	1c59      	adds	r1, r3, #1
 800d9b2:	9103      	str	r1, [sp, #12]
 800d9b4:	701a      	strb	r2, [r3, #0]
 800d9b6:	e7f8      	b.n	800d9aa <__cvt+0x9e>
 800d9b8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d9c0:	eba3 0308 	sub.w	r3, r3, r8
 800d9c4:	4640      	mov	r0, r8
 800d9c6:	6013      	str	r3, [r2, #0]
 800d9c8:	b004      	add	sp, #16
 800d9ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d9ce <__exponent>:
 800d9ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9d0:	2900      	cmp	r1, #0
 800d9d2:	4604      	mov	r4, r0
 800d9d4:	bfba      	itte	lt
 800d9d6:	4249      	neglt	r1, r1
 800d9d8:	232d      	movlt	r3, #45	; 0x2d
 800d9da:	232b      	movge	r3, #43	; 0x2b
 800d9dc:	2909      	cmp	r1, #9
 800d9de:	f804 2b02 	strb.w	r2, [r4], #2
 800d9e2:	7043      	strb	r3, [r0, #1]
 800d9e4:	dd20      	ble.n	800da28 <__exponent+0x5a>
 800d9e6:	f10d 0307 	add.w	r3, sp, #7
 800d9ea:	461f      	mov	r7, r3
 800d9ec:	260a      	movs	r6, #10
 800d9ee:	fb91 f5f6 	sdiv	r5, r1, r6
 800d9f2:	fb06 1115 	mls	r1, r6, r5, r1
 800d9f6:	3130      	adds	r1, #48	; 0x30
 800d9f8:	2d09      	cmp	r5, #9
 800d9fa:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d9fe:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800da02:	4629      	mov	r1, r5
 800da04:	dc09      	bgt.n	800da1a <__exponent+0x4c>
 800da06:	3130      	adds	r1, #48	; 0x30
 800da08:	3b02      	subs	r3, #2
 800da0a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800da0e:	42bb      	cmp	r3, r7
 800da10:	4622      	mov	r2, r4
 800da12:	d304      	bcc.n	800da1e <__exponent+0x50>
 800da14:	1a10      	subs	r0, r2, r0
 800da16:	b003      	add	sp, #12
 800da18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da1a:	4613      	mov	r3, r2
 800da1c:	e7e7      	b.n	800d9ee <__exponent+0x20>
 800da1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800da22:	f804 2b01 	strb.w	r2, [r4], #1
 800da26:	e7f2      	b.n	800da0e <__exponent+0x40>
 800da28:	2330      	movs	r3, #48	; 0x30
 800da2a:	4419      	add	r1, r3
 800da2c:	7083      	strb	r3, [r0, #2]
 800da2e:	1d02      	adds	r2, r0, #4
 800da30:	70c1      	strb	r1, [r0, #3]
 800da32:	e7ef      	b.n	800da14 <__exponent+0x46>

0800da34 <_printf_float>:
 800da34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da38:	b08d      	sub	sp, #52	; 0x34
 800da3a:	460c      	mov	r4, r1
 800da3c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800da40:	4616      	mov	r6, r2
 800da42:	461f      	mov	r7, r3
 800da44:	4605      	mov	r5, r0
 800da46:	f001 fa33 	bl	800eeb0 <_localeconv_r>
 800da4a:	6803      	ldr	r3, [r0, #0]
 800da4c:	9304      	str	r3, [sp, #16]
 800da4e:	4618      	mov	r0, r3
 800da50:	f7f2 fbbe 	bl	80001d0 <strlen>
 800da54:	2300      	movs	r3, #0
 800da56:	930a      	str	r3, [sp, #40]	; 0x28
 800da58:	f8d8 3000 	ldr.w	r3, [r8]
 800da5c:	9005      	str	r0, [sp, #20]
 800da5e:	3307      	adds	r3, #7
 800da60:	f023 0307 	bic.w	r3, r3, #7
 800da64:	f103 0208 	add.w	r2, r3, #8
 800da68:	f894 a018 	ldrb.w	sl, [r4, #24]
 800da6c:	f8d4 b000 	ldr.w	fp, [r4]
 800da70:	f8c8 2000 	str.w	r2, [r8]
 800da74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da78:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800da7c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800da80:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800da84:	9307      	str	r3, [sp, #28]
 800da86:	f8cd 8018 	str.w	r8, [sp, #24]
 800da8a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da8e:	4ba7      	ldr	r3, [pc, #668]	; (800dd2c <_printf_float+0x2f8>)
 800da90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800da94:	f7f3 f84a 	bl	8000b2c <__aeabi_dcmpun>
 800da98:	bb70      	cbnz	r0, 800daf8 <_printf_float+0xc4>
 800da9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da9e:	4ba3      	ldr	r3, [pc, #652]	; (800dd2c <_printf_float+0x2f8>)
 800daa0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800daa4:	f7f3 f824 	bl	8000af0 <__aeabi_dcmple>
 800daa8:	bb30      	cbnz	r0, 800daf8 <_printf_float+0xc4>
 800daaa:	2200      	movs	r2, #0
 800daac:	2300      	movs	r3, #0
 800daae:	4640      	mov	r0, r8
 800dab0:	4649      	mov	r1, r9
 800dab2:	f7f3 f813 	bl	8000adc <__aeabi_dcmplt>
 800dab6:	b110      	cbz	r0, 800dabe <_printf_float+0x8a>
 800dab8:	232d      	movs	r3, #45	; 0x2d
 800daba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dabe:	4a9c      	ldr	r2, [pc, #624]	; (800dd30 <_printf_float+0x2fc>)
 800dac0:	4b9c      	ldr	r3, [pc, #624]	; (800dd34 <_printf_float+0x300>)
 800dac2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dac6:	bf8c      	ite	hi
 800dac8:	4690      	movhi	r8, r2
 800daca:	4698      	movls	r8, r3
 800dacc:	2303      	movs	r3, #3
 800dace:	f02b 0204 	bic.w	r2, fp, #4
 800dad2:	6123      	str	r3, [r4, #16]
 800dad4:	6022      	str	r2, [r4, #0]
 800dad6:	f04f 0900 	mov.w	r9, #0
 800dada:	9700      	str	r7, [sp, #0]
 800dadc:	4633      	mov	r3, r6
 800dade:	aa0b      	add	r2, sp, #44	; 0x2c
 800dae0:	4621      	mov	r1, r4
 800dae2:	4628      	mov	r0, r5
 800dae4:	f000 f9e6 	bl	800deb4 <_printf_common>
 800dae8:	3001      	adds	r0, #1
 800daea:	f040 808d 	bne.w	800dc08 <_printf_float+0x1d4>
 800daee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800daf2:	b00d      	add	sp, #52	; 0x34
 800daf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800daf8:	4642      	mov	r2, r8
 800dafa:	464b      	mov	r3, r9
 800dafc:	4640      	mov	r0, r8
 800dafe:	4649      	mov	r1, r9
 800db00:	f7f3 f814 	bl	8000b2c <__aeabi_dcmpun>
 800db04:	b110      	cbz	r0, 800db0c <_printf_float+0xd8>
 800db06:	4a8c      	ldr	r2, [pc, #560]	; (800dd38 <_printf_float+0x304>)
 800db08:	4b8c      	ldr	r3, [pc, #560]	; (800dd3c <_printf_float+0x308>)
 800db0a:	e7da      	b.n	800dac2 <_printf_float+0x8e>
 800db0c:	6861      	ldr	r1, [r4, #4]
 800db0e:	1c4b      	adds	r3, r1, #1
 800db10:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800db14:	a80a      	add	r0, sp, #40	; 0x28
 800db16:	d13e      	bne.n	800db96 <_printf_float+0x162>
 800db18:	2306      	movs	r3, #6
 800db1a:	6063      	str	r3, [r4, #4]
 800db1c:	2300      	movs	r3, #0
 800db1e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800db22:	ab09      	add	r3, sp, #36	; 0x24
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	ec49 8b10 	vmov	d0, r8, r9
 800db2a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800db2e:	6022      	str	r2, [r4, #0]
 800db30:	f8cd a004 	str.w	sl, [sp, #4]
 800db34:	6861      	ldr	r1, [r4, #4]
 800db36:	4628      	mov	r0, r5
 800db38:	f7ff fee8 	bl	800d90c <__cvt>
 800db3c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800db40:	2b47      	cmp	r3, #71	; 0x47
 800db42:	4680      	mov	r8, r0
 800db44:	d109      	bne.n	800db5a <_printf_float+0x126>
 800db46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db48:	1cd8      	adds	r0, r3, #3
 800db4a:	db02      	blt.n	800db52 <_printf_float+0x11e>
 800db4c:	6862      	ldr	r2, [r4, #4]
 800db4e:	4293      	cmp	r3, r2
 800db50:	dd47      	ble.n	800dbe2 <_printf_float+0x1ae>
 800db52:	f1aa 0a02 	sub.w	sl, sl, #2
 800db56:	fa5f fa8a 	uxtb.w	sl, sl
 800db5a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800db5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800db60:	d824      	bhi.n	800dbac <_printf_float+0x178>
 800db62:	3901      	subs	r1, #1
 800db64:	4652      	mov	r2, sl
 800db66:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800db6a:	9109      	str	r1, [sp, #36]	; 0x24
 800db6c:	f7ff ff2f 	bl	800d9ce <__exponent>
 800db70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db72:	1813      	adds	r3, r2, r0
 800db74:	2a01      	cmp	r2, #1
 800db76:	4681      	mov	r9, r0
 800db78:	6123      	str	r3, [r4, #16]
 800db7a:	dc02      	bgt.n	800db82 <_printf_float+0x14e>
 800db7c:	6822      	ldr	r2, [r4, #0]
 800db7e:	07d1      	lsls	r1, r2, #31
 800db80:	d501      	bpl.n	800db86 <_printf_float+0x152>
 800db82:	3301      	adds	r3, #1
 800db84:	6123      	str	r3, [r4, #16]
 800db86:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0a5      	beq.n	800dada <_printf_float+0xa6>
 800db8e:	232d      	movs	r3, #45	; 0x2d
 800db90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db94:	e7a1      	b.n	800dada <_printf_float+0xa6>
 800db96:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800db9a:	f000 8177 	beq.w	800de8c <_printf_float+0x458>
 800db9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dba2:	d1bb      	bne.n	800db1c <_printf_float+0xe8>
 800dba4:	2900      	cmp	r1, #0
 800dba6:	d1b9      	bne.n	800db1c <_printf_float+0xe8>
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e7b6      	b.n	800db1a <_printf_float+0xe6>
 800dbac:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800dbb0:	d119      	bne.n	800dbe6 <_printf_float+0x1b2>
 800dbb2:	2900      	cmp	r1, #0
 800dbb4:	6863      	ldr	r3, [r4, #4]
 800dbb6:	dd0c      	ble.n	800dbd2 <_printf_float+0x19e>
 800dbb8:	6121      	str	r1, [r4, #16]
 800dbba:	b913      	cbnz	r3, 800dbc2 <_printf_float+0x18e>
 800dbbc:	6822      	ldr	r2, [r4, #0]
 800dbbe:	07d2      	lsls	r2, r2, #31
 800dbc0:	d502      	bpl.n	800dbc8 <_printf_float+0x194>
 800dbc2:	3301      	adds	r3, #1
 800dbc4:	440b      	add	r3, r1
 800dbc6:	6123      	str	r3, [r4, #16]
 800dbc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbca:	65a3      	str	r3, [r4, #88]	; 0x58
 800dbcc:	f04f 0900 	mov.w	r9, #0
 800dbd0:	e7d9      	b.n	800db86 <_printf_float+0x152>
 800dbd2:	b913      	cbnz	r3, 800dbda <_printf_float+0x1a6>
 800dbd4:	6822      	ldr	r2, [r4, #0]
 800dbd6:	07d0      	lsls	r0, r2, #31
 800dbd8:	d501      	bpl.n	800dbde <_printf_float+0x1aa>
 800dbda:	3302      	adds	r3, #2
 800dbdc:	e7f3      	b.n	800dbc6 <_printf_float+0x192>
 800dbde:	2301      	movs	r3, #1
 800dbe0:	e7f1      	b.n	800dbc6 <_printf_float+0x192>
 800dbe2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dbe6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dbea:	4293      	cmp	r3, r2
 800dbec:	db05      	blt.n	800dbfa <_printf_float+0x1c6>
 800dbee:	6822      	ldr	r2, [r4, #0]
 800dbf0:	6123      	str	r3, [r4, #16]
 800dbf2:	07d1      	lsls	r1, r2, #31
 800dbf4:	d5e8      	bpl.n	800dbc8 <_printf_float+0x194>
 800dbf6:	3301      	adds	r3, #1
 800dbf8:	e7e5      	b.n	800dbc6 <_printf_float+0x192>
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	bfd4      	ite	le
 800dbfe:	f1c3 0302 	rsble	r3, r3, #2
 800dc02:	2301      	movgt	r3, #1
 800dc04:	4413      	add	r3, r2
 800dc06:	e7de      	b.n	800dbc6 <_printf_float+0x192>
 800dc08:	6823      	ldr	r3, [r4, #0]
 800dc0a:	055a      	lsls	r2, r3, #21
 800dc0c:	d407      	bmi.n	800dc1e <_printf_float+0x1ea>
 800dc0e:	6923      	ldr	r3, [r4, #16]
 800dc10:	4642      	mov	r2, r8
 800dc12:	4631      	mov	r1, r6
 800dc14:	4628      	mov	r0, r5
 800dc16:	47b8      	blx	r7
 800dc18:	3001      	adds	r0, #1
 800dc1a:	d12b      	bne.n	800dc74 <_printf_float+0x240>
 800dc1c:	e767      	b.n	800daee <_printf_float+0xba>
 800dc1e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dc22:	f240 80dc 	bls.w	800ddde <_printf_float+0x3aa>
 800dc26:	2200      	movs	r2, #0
 800dc28:	2300      	movs	r3, #0
 800dc2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc2e:	f7f2 ff4b 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc32:	2800      	cmp	r0, #0
 800dc34:	d033      	beq.n	800dc9e <_printf_float+0x26a>
 800dc36:	2301      	movs	r3, #1
 800dc38:	4a41      	ldr	r2, [pc, #260]	; (800dd40 <_printf_float+0x30c>)
 800dc3a:	4631      	mov	r1, r6
 800dc3c:	4628      	mov	r0, r5
 800dc3e:	47b8      	blx	r7
 800dc40:	3001      	adds	r0, #1
 800dc42:	f43f af54 	beq.w	800daee <_printf_float+0xba>
 800dc46:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc4a:	429a      	cmp	r2, r3
 800dc4c:	db02      	blt.n	800dc54 <_printf_float+0x220>
 800dc4e:	6823      	ldr	r3, [r4, #0]
 800dc50:	07d8      	lsls	r0, r3, #31
 800dc52:	d50f      	bpl.n	800dc74 <_printf_float+0x240>
 800dc54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc58:	4631      	mov	r1, r6
 800dc5a:	4628      	mov	r0, r5
 800dc5c:	47b8      	blx	r7
 800dc5e:	3001      	adds	r0, #1
 800dc60:	f43f af45 	beq.w	800daee <_printf_float+0xba>
 800dc64:	f04f 0800 	mov.w	r8, #0
 800dc68:	f104 091a 	add.w	r9, r4, #26
 800dc6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	4543      	cmp	r3, r8
 800dc72:	dc09      	bgt.n	800dc88 <_printf_float+0x254>
 800dc74:	6823      	ldr	r3, [r4, #0]
 800dc76:	079b      	lsls	r3, r3, #30
 800dc78:	f100 8103 	bmi.w	800de82 <_printf_float+0x44e>
 800dc7c:	68e0      	ldr	r0, [r4, #12]
 800dc7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc80:	4298      	cmp	r0, r3
 800dc82:	bfb8      	it	lt
 800dc84:	4618      	movlt	r0, r3
 800dc86:	e734      	b.n	800daf2 <_printf_float+0xbe>
 800dc88:	2301      	movs	r3, #1
 800dc8a:	464a      	mov	r2, r9
 800dc8c:	4631      	mov	r1, r6
 800dc8e:	4628      	mov	r0, r5
 800dc90:	47b8      	blx	r7
 800dc92:	3001      	adds	r0, #1
 800dc94:	f43f af2b 	beq.w	800daee <_printf_float+0xba>
 800dc98:	f108 0801 	add.w	r8, r8, #1
 800dc9c:	e7e6      	b.n	800dc6c <_printf_float+0x238>
 800dc9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	dc2b      	bgt.n	800dcfc <_printf_float+0x2c8>
 800dca4:	2301      	movs	r3, #1
 800dca6:	4a26      	ldr	r2, [pc, #152]	; (800dd40 <_printf_float+0x30c>)
 800dca8:	4631      	mov	r1, r6
 800dcaa:	4628      	mov	r0, r5
 800dcac:	47b8      	blx	r7
 800dcae:	3001      	adds	r0, #1
 800dcb0:	f43f af1d 	beq.w	800daee <_printf_float+0xba>
 800dcb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcb6:	b923      	cbnz	r3, 800dcc2 <_printf_float+0x28e>
 800dcb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dcba:	b913      	cbnz	r3, 800dcc2 <_printf_float+0x28e>
 800dcbc:	6823      	ldr	r3, [r4, #0]
 800dcbe:	07d9      	lsls	r1, r3, #31
 800dcc0:	d5d8      	bpl.n	800dc74 <_printf_float+0x240>
 800dcc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcc6:	4631      	mov	r1, r6
 800dcc8:	4628      	mov	r0, r5
 800dcca:	47b8      	blx	r7
 800dccc:	3001      	adds	r0, #1
 800dcce:	f43f af0e 	beq.w	800daee <_printf_float+0xba>
 800dcd2:	f04f 0900 	mov.w	r9, #0
 800dcd6:	f104 0a1a 	add.w	sl, r4, #26
 800dcda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dcdc:	425b      	negs	r3, r3
 800dcde:	454b      	cmp	r3, r9
 800dce0:	dc01      	bgt.n	800dce6 <_printf_float+0x2b2>
 800dce2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dce4:	e794      	b.n	800dc10 <_printf_float+0x1dc>
 800dce6:	2301      	movs	r3, #1
 800dce8:	4652      	mov	r2, sl
 800dcea:	4631      	mov	r1, r6
 800dcec:	4628      	mov	r0, r5
 800dcee:	47b8      	blx	r7
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	f43f aefc 	beq.w	800daee <_printf_float+0xba>
 800dcf6:	f109 0901 	add.w	r9, r9, #1
 800dcfa:	e7ee      	b.n	800dcda <_printf_float+0x2a6>
 800dcfc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dcfe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800dd00:	429a      	cmp	r2, r3
 800dd02:	bfa8      	it	ge
 800dd04:	461a      	movge	r2, r3
 800dd06:	2a00      	cmp	r2, #0
 800dd08:	4691      	mov	r9, r2
 800dd0a:	dd07      	ble.n	800dd1c <_printf_float+0x2e8>
 800dd0c:	4613      	mov	r3, r2
 800dd0e:	4631      	mov	r1, r6
 800dd10:	4642      	mov	r2, r8
 800dd12:	4628      	mov	r0, r5
 800dd14:	47b8      	blx	r7
 800dd16:	3001      	adds	r0, #1
 800dd18:	f43f aee9 	beq.w	800daee <_printf_float+0xba>
 800dd1c:	f104 031a 	add.w	r3, r4, #26
 800dd20:	f04f 0b00 	mov.w	fp, #0
 800dd24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dd28:	9306      	str	r3, [sp, #24]
 800dd2a:	e015      	b.n	800dd58 <_printf_float+0x324>
 800dd2c:	7fefffff 	.word	0x7fefffff
 800dd30:	08010f74 	.word	0x08010f74
 800dd34:	08010f70 	.word	0x08010f70
 800dd38:	08010f7c 	.word	0x08010f7c
 800dd3c:	08010f78 	.word	0x08010f78
 800dd40:	08010f80 	.word	0x08010f80
 800dd44:	2301      	movs	r3, #1
 800dd46:	9a06      	ldr	r2, [sp, #24]
 800dd48:	4631      	mov	r1, r6
 800dd4a:	4628      	mov	r0, r5
 800dd4c:	47b8      	blx	r7
 800dd4e:	3001      	adds	r0, #1
 800dd50:	f43f aecd 	beq.w	800daee <_printf_float+0xba>
 800dd54:	f10b 0b01 	add.w	fp, fp, #1
 800dd58:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800dd5c:	ebaa 0309 	sub.w	r3, sl, r9
 800dd60:	455b      	cmp	r3, fp
 800dd62:	dcef      	bgt.n	800dd44 <_printf_float+0x310>
 800dd64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	44d0      	add	r8, sl
 800dd6c:	db15      	blt.n	800dd9a <_printf_float+0x366>
 800dd6e:	6823      	ldr	r3, [r4, #0]
 800dd70:	07da      	lsls	r2, r3, #31
 800dd72:	d412      	bmi.n	800dd9a <_printf_float+0x366>
 800dd74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dd76:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd78:	eba3 020a 	sub.w	r2, r3, sl
 800dd7c:	eba3 0a01 	sub.w	sl, r3, r1
 800dd80:	4592      	cmp	sl, r2
 800dd82:	bfa8      	it	ge
 800dd84:	4692      	movge	sl, r2
 800dd86:	f1ba 0f00 	cmp.w	sl, #0
 800dd8a:	dc0e      	bgt.n	800ddaa <_printf_float+0x376>
 800dd8c:	f04f 0800 	mov.w	r8, #0
 800dd90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd94:	f104 091a 	add.w	r9, r4, #26
 800dd98:	e019      	b.n	800ddce <_printf_float+0x39a>
 800dd9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd9e:	4631      	mov	r1, r6
 800dda0:	4628      	mov	r0, r5
 800dda2:	47b8      	blx	r7
 800dda4:	3001      	adds	r0, #1
 800dda6:	d1e5      	bne.n	800dd74 <_printf_float+0x340>
 800dda8:	e6a1      	b.n	800daee <_printf_float+0xba>
 800ddaa:	4653      	mov	r3, sl
 800ddac:	4642      	mov	r2, r8
 800ddae:	4631      	mov	r1, r6
 800ddb0:	4628      	mov	r0, r5
 800ddb2:	47b8      	blx	r7
 800ddb4:	3001      	adds	r0, #1
 800ddb6:	d1e9      	bne.n	800dd8c <_printf_float+0x358>
 800ddb8:	e699      	b.n	800daee <_printf_float+0xba>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	464a      	mov	r2, r9
 800ddbe:	4631      	mov	r1, r6
 800ddc0:	4628      	mov	r0, r5
 800ddc2:	47b8      	blx	r7
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	f43f ae92 	beq.w	800daee <_printf_float+0xba>
 800ddca:	f108 0801 	add.w	r8, r8, #1
 800ddce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ddd2:	1a9b      	subs	r3, r3, r2
 800ddd4:	eba3 030a 	sub.w	r3, r3, sl
 800ddd8:	4543      	cmp	r3, r8
 800ddda:	dcee      	bgt.n	800ddba <_printf_float+0x386>
 800dddc:	e74a      	b.n	800dc74 <_printf_float+0x240>
 800ddde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dde0:	2a01      	cmp	r2, #1
 800dde2:	dc01      	bgt.n	800dde8 <_printf_float+0x3b4>
 800dde4:	07db      	lsls	r3, r3, #31
 800dde6:	d53a      	bpl.n	800de5e <_printf_float+0x42a>
 800dde8:	2301      	movs	r3, #1
 800ddea:	4642      	mov	r2, r8
 800ddec:	4631      	mov	r1, r6
 800ddee:	4628      	mov	r0, r5
 800ddf0:	47b8      	blx	r7
 800ddf2:	3001      	adds	r0, #1
 800ddf4:	f43f ae7b 	beq.w	800daee <_printf_float+0xba>
 800ddf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ddfc:	4631      	mov	r1, r6
 800ddfe:	4628      	mov	r0, r5
 800de00:	47b8      	blx	r7
 800de02:	3001      	adds	r0, #1
 800de04:	f108 0801 	add.w	r8, r8, #1
 800de08:	f43f ae71 	beq.w	800daee <_printf_float+0xba>
 800de0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de0e:	2200      	movs	r2, #0
 800de10:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800de14:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de18:	2300      	movs	r3, #0
 800de1a:	f7f2 fe55 	bl	8000ac8 <__aeabi_dcmpeq>
 800de1e:	b9c8      	cbnz	r0, 800de54 <_printf_float+0x420>
 800de20:	4653      	mov	r3, sl
 800de22:	4642      	mov	r2, r8
 800de24:	4631      	mov	r1, r6
 800de26:	4628      	mov	r0, r5
 800de28:	47b8      	blx	r7
 800de2a:	3001      	adds	r0, #1
 800de2c:	d10e      	bne.n	800de4c <_printf_float+0x418>
 800de2e:	e65e      	b.n	800daee <_printf_float+0xba>
 800de30:	2301      	movs	r3, #1
 800de32:	4652      	mov	r2, sl
 800de34:	4631      	mov	r1, r6
 800de36:	4628      	mov	r0, r5
 800de38:	47b8      	blx	r7
 800de3a:	3001      	adds	r0, #1
 800de3c:	f43f ae57 	beq.w	800daee <_printf_float+0xba>
 800de40:	f108 0801 	add.w	r8, r8, #1
 800de44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de46:	3b01      	subs	r3, #1
 800de48:	4543      	cmp	r3, r8
 800de4a:	dcf1      	bgt.n	800de30 <_printf_float+0x3fc>
 800de4c:	464b      	mov	r3, r9
 800de4e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800de52:	e6de      	b.n	800dc12 <_printf_float+0x1de>
 800de54:	f04f 0800 	mov.w	r8, #0
 800de58:	f104 0a1a 	add.w	sl, r4, #26
 800de5c:	e7f2      	b.n	800de44 <_printf_float+0x410>
 800de5e:	2301      	movs	r3, #1
 800de60:	e7df      	b.n	800de22 <_printf_float+0x3ee>
 800de62:	2301      	movs	r3, #1
 800de64:	464a      	mov	r2, r9
 800de66:	4631      	mov	r1, r6
 800de68:	4628      	mov	r0, r5
 800de6a:	47b8      	blx	r7
 800de6c:	3001      	adds	r0, #1
 800de6e:	f43f ae3e 	beq.w	800daee <_printf_float+0xba>
 800de72:	f108 0801 	add.w	r8, r8, #1
 800de76:	68e3      	ldr	r3, [r4, #12]
 800de78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de7a:	1a9b      	subs	r3, r3, r2
 800de7c:	4543      	cmp	r3, r8
 800de7e:	dcf0      	bgt.n	800de62 <_printf_float+0x42e>
 800de80:	e6fc      	b.n	800dc7c <_printf_float+0x248>
 800de82:	f04f 0800 	mov.w	r8, #0
 800de86:	f104 0919 	add.w	r9, r4, #25
 800de8a:	e7f4      	b.n	800de76 <_printf_float+0x442>
 800de8c:	2900      	cmp	r1, #0
 800de8e:	f43f ae8b 	beq.w	800dba8 <_printf_float+0x174>
 800de92:	2300      	movs	r3, #0
 800de94:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800de98:	ab09      	add	r3, sp, #36	; 0x24
 800de9a:	9300      	str	r3, [sp, #0]
 800de9c:	ec49 8b10 	vmov	d0, r8, r9
 800dea0:	6022      	str	r2, [r4, #0]
 800dea2:	f8cd a004 	str.w	sl, [sp, #4]
 800dea6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800deaa:	4628      	mov	r0, r5
 800deac:	f7ff fd2e 	bl	800d90c <__cvt>
 800deb0:	4680      	mov	r8, r0
 800deb2:	e648      	b.n	800db46 <_printf_float+0x112>

0800deb4 <_printf_common>:
 800deb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800deb8:	4691      	mov	r9, r2
 800deba:	461f      	mov	r7, r3
 800debc:	688a      	ldr	r2, [r1, #8]
 800debe:	690b      	ldr	r3, [r1, #16]
 800dec0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dec4:	4293      	cmp	r3, r2
 800dec6:	bfb8      	it	lt
 800dec8:	4613      	movlt	r3, r2
 800deca:	f8c9 3000 	str.w	r3, [r9]
 800dece:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ded2:	4606      	mov	r6, r0
 800ded4:	460c      	mov	r4, r1
 800ded6:	b112      	cbz	r2, 800dede <_printf_common+0x2a>
 800ded8:	3301      	adds	r3, #1
 800deda:	f8c9 3000 	str.w	r3, [r9]
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	0699      	lsls	r1, r3, #26
 800dee2:	bf42      	ittt	mi
 800dee4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dee8:	3302      	addmi	r3, #2
 800deea:	f8c9 3000 	strmi.w	r3, [r9]
 800deee:	6825      	ldr	r5, [r4, #0]
 800def0:	f015 0506 	ands.w	r5, r5, #6
 800def4:	d107      	bne.n	800df06 <_printf_common+0x52>
 800def6:	f104 0a19 	add.w	sl, r4, #25
 800defa:	68e3      	ldr	r3, [r4, #12]
 800defc:	f8d9 2000 	ldr.w	r2, [r9]
 800df00:	1a9b      	subs	r3, r3, r2
 800df02:	42ab      	cmp	r3, r5
 800df04:	dc28      	bgt.n	800df58 <_printf_common+0xa4>
 800df06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800df0a:	6822      	ldr	r2, [r4, #0]
 800df0c:	3300      	adds	r3, #0
 800df0e:	bf18      	it	ne
 800df10:	2301      	movne	r3, #1
 800df12:	0692      	lsls	r2, r2, #26
 800df14:	d42d      	bmi.n	800df72 <_printf_common+0xbe>
 800df16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800df1a:	4639      	mov	r1, r7
 800df1c:	4630      	mov	r0, r6
 800df1e:	47c0      	blx	r8
 800df20:	3001      	adds	r0, #1
 800df22:	d020      	beq.n	800df66 <_printf_common+0xb2>
 800df24:	6823      	ldr	r3, [r4, #0]
 800df26:	68e5      	ldr	r5, [r4, #12]
 800df28:	f8d9 2000 	ldr.w	r2, [r9]
 800df2c:	f003 0306 	and.w	r3, r3, #6
 800df30:	2b04      	cmp	r3, #4
 800df32:	bf08      	it	eq
 800df34:	1aad      	subeq	r5, r5, r2
 800df36:	68a3      	ldr	r3, [r4, #8]
 800df38:	6922      	ldr	r2, [r4, #16]
 800df3a:	bf0c      	ite	eq
 800df3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800df40:	2500      	movne	r5, #0
 800df42:	4293      	cmp	r3, r2
 800df44:	bfc4      	itt	gt
 800df46:	1a9b      	subgt	r3, r3, r2
 800df48:	18ed      	addgt	r5, r5, r3
 800df4a:	f04f 0900 	mov.w	r9, #0
 800df4e:	341a      	adds	r4, #26
 800df50:	454d      	cmp	r5, r9
 800df52:	d11a      	bne.n	800df8a <_printf_common+0xd6>
 800df54:	2000      	movs	r0, #0
 800df56:	e008      	b.n	800df6a <_printf_common+0xb6>
 800df58:	2301      	movs	r3, #1
 800df5a:	4652      	mov	r2, sl
 800df5c:	4639      	mov	r1, r7
 800df5e:	4630      	mov	r0, r6
 800df60:	47c0      	blx	r8
 800df62:	3001      	adds	r0, #1
 800df64:	d103      	bne.n	800df6e <_printf_common+0xba>
 800df66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df6e:	3501      	adds	r5, #1
 800df70:	e7c3      	b.n	800defa <_printf_common+0x46>
 800df72:	18e1      	adds	r1, r4, r3
 800df74:	1c5a      	adds	r2, r3, #1
 800df76:	2030      	movs	r0, #48	; 0x30
 800df78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800df7c:	4422      	add	r2, r4
 800df7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800df82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800df86:	3302      	adds	r3, #2
 800df88:	e7c5      	b.n	800df16 <_printf_common+0x62>
 800df8a:	2301      	movs	r3, #1
 800df8c:	4622      	mov	r2, r4
 800df8e:	4639      	mov	r1, r7
 800df90:	4630      	mov	r0, r6
 800df92:	47c0      	blx	r8
 800df94:	3001      	adds	r0, #1
 800df96:	d0e6      	beq.n	800df66 <_printf_common+0xb2>
 800df98:	f109 0901 	add.w	r9, r9, #1
 800df9c:	e7d8      	b.n	800df50 <_printf_common+0x9c>
	...

0800dfa0 <_printf_i>:
 800dfa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfa4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dfa8:	460c      	mov	r4, r1
 800dfaa:	7e09      	ldrb	r1, [r1, #24]
 800dfac:	b085      	sub	sp, #20
 800dfae:	296e      	cmp	r1, #110	; 0x6e
 800dfb0:	4617      	mov	r7, r2
 800dfb2:	4606      	mov	r6, r0
 800dfb4:	4698      	mov	r8, r3
 800dfb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dfb8:	f000 80b3 	beq.w	800e122 <_printf_i+0x182>
 800dfbc:	d822      	bhi.n	800e004 <_printf_i+0x64>
 800dfbe:	2963      	cmp	r1, #99	; 0x63
 800dfc0:	d036      	beq.n	800e030 <_printf_i+0x90>
 800dfc2:	d80a      	bhi.n	800dfda <_printf_i+0x3a>
 800dfc4:	2900      	cmp	r1, #0
 800dfc6:	f000 80b9 	beq.w	800e13c <_printf_i+0x19c>
 800dfca:	2958      	cmp	r1, #88	; 0x58
 800dfcc:	f000 8083 	beq.w	800e0d6 <_printf_i+0x136>
 800dfd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dfd8:	e032      	b.n	800e040 <_printf_i+0xa0>
 800dfda:	2964      	cmp	r1, #100	; 0x64
 800dfdc:	d001      	beq.n	800dfe2 <_printf_i+0x42>
 800dfde:	2969      	cmp	r1, #105	; 0x69
 800dfe0:	d1f6      	bne.n	800dfd0 <_printf_i+0x30>
 800dfe2:	6820      	ldr	r0, [r4, #0]
 800dfe4:	6813      	ldr	r3, [r2, #0]
 800dfe6:	0605      	lsls	r5, r0, #24
 800dfe8:	f103 0104 	add.w	r1, r3, #4
 800dfec:	d52a      	bpl.n	800e044 <_printf_i+0xa4>
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	6011      	str	r1, [r2, #0]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	da03      	bge.n	800dffe <_printf_i+0x5e>
 800dff6:	222d      	movs	r2, #45	; 0x2d
 800dff8:	425b      	negs	r3, r3
 800dffa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dffe:	486f      	ldr	r0, [pc, #444]	; (800e1bc <_printf_i+0x21c>)
 800e000:	220a      	movs	r2, #10
 800e002:	e039      	b.n	800e078 <_printf_i+0xd8>
 800e004:	2973      	cmp	r1, #115	; 0x73
 800e006:	f000 809d 	beq.w	800e144 <_printf_i+0x1a4>
 800e00a:	d808      	bhi.n	800e01e <_printf_i+0x7e>
 800e00c:	296f      	cmp	r1, #111	; 0x6f
 800e00e:	d020      	beq.n	800e052 <_printf_i+0xb2>
 800e010:	2970      	cmp	r1, #112	; 0x70
 800e012:	d1dd      	bne.n	800dfd0 <_printf_i+0x30>
 800e014:	6823      	ldr	r3, [r4, #0]
 800e016:	f043 0320 	orr.w	r3, r3, #32
 800e01a:	6023      	str	r3, [r4, #0]
 800e01c:	e003      	b.n	800e026 <_printf_i+0x86>
 800e01e:	2975      	cmp	r1, #117	; 0x75
 800e020:	d017      	beq.n	800e052 <_printf_i+0xb2>
 800e022:	2978      	cmp	r1, #120	; 0x78
 800e024:	d1d4      	bne.n	800dfd0 <_printf_i+0x30>
 800e026:	2378      	movs	r3, #120	; 0x78
 800e028:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e02c:	4864      	ldr	r0, [pc, #400]	; (800e1c0 <_printf_i+0x220>)
 800e02e:	e055      	b.n	800e0dc <_printf_i+0x13c>
 800e030:	6813      	ldr	r3, [r2, #0]
 800e032:	1d19      	adds	r1, r3, #4
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	6011      	str	r1, [r2, #0]
 800e038:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e03c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e040:	2301      	movs	r3, #1
 800e042:	e08c      	b.n	800e15e <_printf_i+0x1be>
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	6011      	str	r1, [r2, #0]
 800e048:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e04c:	bf18      	it	ne
 800e04e:	b21b      	sxthne	r3, r3
 800e050:	e7cf      	b.n	800dff2 <_printf_i+0x52>
 800e052:	6813      	ldr	r3, [r2, #0]
 800e054:	6825      	ldr	r5, [r4, #0]
 800e056:	1d18      	adds	r0, r3, #4
 800e058:	6010      	str	r0, [r2, #0]
 800e05a:	0628      	lsls	r0, r5, #24
 800e05c:	d501      	bpl.n	800e062 <_printf_i+0xc2>
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	e002      	b.n	800e068 <_printf_i+0xc8>
 800e062:	0668      	lsls	r0, r5, #25
 800e064:	d5fb      	bpl.n	800e05e <_printf_i+0xbe>
 800e066:	881b      	ldrh	r3, [r3, #0]
 800e068:	4854      	ldr	r0, [pc, #336]	; (800e1bc <_printf_i+0x21c>)
 800e06a:	296f      	cmp	r1, #111	; 0x6f
 800e06c:	bf14      	ite	ne
 800e06e:	220a      	movne	r2, #10
 800e070:	2208      	moveq	r2, #8
 800e072:	2100      	movs	r1, #0
 800e074:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e078:	6865      	ldr	r5, [r4, #4]
 800e07a:	60a5      	str	r5, [r4, #8]
 800e07c:	2d00      	cmp	r5, #0
 800e07e:	f2c0 8095 	blt.w	800e1ac <_printf_i+0x20c>
 800e082:	6821      	ldr	r1, [r4, #0]
 800e084:	f021 0104 	bic.w	r1, r1, #4
 800e088:	6021      	str	r1, [r4, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d13d      	bne.n	800e10a <_printf_i+0x16a>
 800e08e:	2d00      	cmp	r5, #0
 800e090:	f040 808e 	bne.w	800e1b0 <_printf_i+0x210>
 800e094:	4665      	mov	r5, ip
 800e096:	2a08      	cmp	r2, #8
 800e098:	d10b      	bne.n	800e0b2 <_printf_i+0x112>
 800e09a:	6823      	ldr	r3, [r4, #0]
 800e09c:	07db      	lsls	r3, r3, #31
 800e09e:	d508      	bpl.n	800e0b2 <_printf_i+0x112>
 800e0a0:	6923      	ldr	r3, [r4, #16]
 800e0a2:	6862      	ldr	r2, [r4, #4]
 800e0a4:	429a      	cmp	r2, r3
 800e0a6:	bfde      	ittt	le
 800e0a8:	2330      	movle	r3, #48	; 0x30
 800e0aa:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e0ae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e0b2:	ebac 0305 	sub.w	r3, ip, r5
 800e0b6:	6123      	str	r3, [r4, #16]
 800e0b8:	f8cd 8000 	str.w	r8, [sp]
 800e0bc:	463b      	mov	r3, r7
 800e0be:	aa03      	add	r2, sp, #12
 800e0c0:	4621      	mov	r1, r4
 800e0c2:	4630      	mov	r0, r6
 800e0c4:	f7ff fef6 	bl	800deb4 <_printf_common>
 800e0c8:	3001      	adds	r0, #1
 800e0ca:	d14d      	bne.n	800e168 <_printf_i+0x1c8>
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e0d0:	b005      	add	sp, #20
 800e0d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e0d6:	4839      	ldr	r0, [pc, #228]	; (800e1bc <_printf_i+0x21c>)
 800e0d8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e0dc:	6813      	ldr	r3, [r2, #0]
 800e0de:	6821      	ldr	r1, [r4, #0]
 800e0e0:	1d1d      	adds	r5, r3, #4
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	6015      	str	r5, [r2, #0]
 800e0e6:	060a      	lsls	r2, r1, #24
 800e0e8:	d50b      	bpl.n	800e102 <_printf_i+0x162>
 800e0ea:	07ca      	lsls	r2, r1, #31
 800e0ec:	bf44      	itt	mi
 800e0ee:	f041 0120 	orrmi.w	r1, r1, #32
 800e0f2:	6021      	strmi	r1, [r4, #0]
 800e0f4:	b91b      	cbnz	r3, 800e0fe <_printf_i+0x15e>
 800e0f6:	6822      	ldr	r2, [r4, #0]
 800e0f8:	f022 0220 	bic.w	r2, r2, #32
 800e0fc:	6022      	str	r2, [r4, #0]
 800e0fe:	2210      	movs	r2, #16
 800e100:	e7b7      	b.n	800e072 <_printf_i+0xd2>
 800e102:	064d      	lsls	r5, r1, #25
 800e104:	bf48      	it	mi
 800e106:	b29b      	uxthmi	r3, r3
 800e108:	e7ef      	b.n	800e0ea <_printf_i+0x14a>
 800e10a:	4665      	mov	r5, ip
 800e10c:	fbb3 f1f2 	udiv	r1, r3, r2
 800e110:	fb02 3311 	mls	r3, r2, r1, r3
 800e114:	5cc3      	ldrb	r3, [r0, r3]
 800e116:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e11a:	460b      	mov	r3, r1
 800e11c:	2900      	cmp	r1, #0
 800e11e:	d1f5      	bne.n	800e10c <_printf_i+0x16c>
 800e120:	e7b9      	b.n	800e096 <_printf_i+0xf6>
 800e122:	6813      	ldr	r3, [r2, #0]
 800e124:	6825      	ldr	r5, [r4, #0]
 800e126:	6961      	ldr	r1, [r4, #20]
 800e128:	1d18      	adds	r0, r3, #4
 800e12a:	6010      	str	r0, [r2, #0]
 800e12c:	0628      	lsls	r0, r5, #24
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	d501      	bpl.n	800e136 <_printf_i+0x196>
 800e132:	6019      	str	r1, [r3, #0]
 800e134:	e002      	b.n	800e13c <_printf_i+0x19c>
 800e136:	066a      	lsls	r2, r5, #25
 800e138:	d5fb      	bpl.n	800e132 <_printf_i+0x192>
 800e13a:	8019      	strh	r1, [r3, #0]
 800e13c:	2300      	movs	r3, #0
 800e13e:	6123      	str	r3, [r4, #16]
 800e140:	4665      	mov	r5, ip
 800e142:	e7b9      	b.n	800e0b8 <_printf_i+0x118>
 800e144:	6813      	ldr	r3, [r2, #0]
 800e146:	1d19      	adds	r1, r3, #4
 800e148:	6011      	str	r1, [r2, #0]
 800e14a:	681d      	ldr	r5, [r3, #0]
 800e14c:	6862      	ldr	r2, [r4, #4]
 800e14e:	2100      	movs	r1, #0
 800e150:	4628      	mov	r0, r5
 800e152:	f7f2 f845 	bl	80001e0 <memchr>
 800e156:	b108      	cbz	r0, 800e15c <_printf_i+0x1bc>
 800e158:	1b40      	subs	r0, r0, r5
 800e15a:	6060      	str	r0, [r4, #4]
 800e15c:	6863      	ldr	r3, [r4, #4]
 800e15e:	6123      	str	r3, [r4, #16]
 800e160:	2300      	movs	r3, #0
 800e162:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e166:	e7a7      	b.n	800e0b8 <_printf_i+0x118>
 800e168:	6923      	ldr	r3, [r4, #16]
 800e16a:	462a      	mov	r2, r5
 800e16c:	4639      	mov	r1, r7
 800e16e:	4630      	mov	r0, r6
 800e170:	47c0      	blx	r8
 800e172:	3001      	adds	r0, #1
 800e174:	d0aa      	beq.n	800e0cc <_printf_i+0x12c>
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	079b      	lsls	r3, r3, #30
 800e17a:	d413      	bmi.n	800e1a4 <_printf_i+0x204>
 800e17c:	68e0      	ldr	r0, [r4, #12]
 800e17e:	9b03      	ldr	r3, [sp, #12]
 800e180:	4298      	cmp	r0, r3
 800e182:	bfb8      	it	lt
 800e184:	4618      	movlt	r0, r3
 800e186:	e7a3      	b.n	800e0d0 <_printf_i+0x130>
 800e188:	2301      	movs	r3, #1
 800e18a:	464a      	mov	r2, r9
 800e18c:	4639      	mov	r1, r7
 800e18e:	4630      	mov	r0, r6
 800e190:	47c0      	blx	r8
 800e192:	3001      	adds	r0, #1
 800e194:	d09a      	beq.n	800e0cc <_printf_i+0x12c>
 800e196:	3501      	adds	r5, #1
 800e198:	68e3      	ldr	r3, [r4, #12]
 800e19a:	9a03      	ldr	r2, [sp, #12]
 800e19c:	1a9b      	subs	r3, r3, r2
 800e19e:	42ab      	cmp	r3, r5
 800e1a0:	dcf2      	bgt.n	800e188 <_printf_i+0x1e8>
 800e1a2:	e7eb      	b.n	800e17c <_printf_i+0x1dc>
 800e1a4:	2500      	movs	r5, #0
 800e1a6:	f104 0919 	add.w	r9, r4, #25
 800e1aa:	e7f5      	b.n	800e198 <_printf_i+0x1f8>
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1ac      	bne.n	800e10a <_printf_i+0x16a>
 800e1b0:	7803      	ldrb	r3, [r0, #0]
 800e1b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e1b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1ba:	e76c      	b.n	800e096 <_printf_i+0xf6>
 800e1bc:	08010f82 	.word	0x08010f82
 800e1c0:	08010f93 	.word	0x08010f93

0800e1c4 <siprintf>:
 800e1c4:	b40e      	push	{r1, r2, r3}
 800e1c6:	b500      	push	{lr}
 800e1c8:	b09c      	sub	sp, #112	; 0x70
 800e1ca:	ab1d      	add	r3, sp, #116	; 0x74
 800e1cc:	9002      	str	r0, [sp, #8]
 800e1ce:	9006      	str	r0, [sp, #24]
 800e1d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1d4:	4809      	ldr	r0, [pc, #36]	; (800e1fc <siprintf+0x38>)
 800e1d6:	9107      	str	r1, [sp, #28]
 800e1d8:	9104      	str	r1, [sp, #16]
 800e1da:	4909      	ldr	r1, [pc, #36]	; (800e200 <siprintf+0x3c>)
 800e1dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1e0:	9105      	str	r1, [sp, #20]
 800e1e2:	6800      	ldr	r0, [r0, #0]
 800e1e4:	9301      	str	r3, [sp, #4]
 800e1e6:	a902      	add	r1, sp, #8
 800e1e8:	f001 fa6e 	bl	800f6c8 <_svfiprintf_r>
 800e1ec:	9b02      	ldr	r3, [sp, #8]
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	701a      	strb	r2, [r3, #0]
 800e1f2:	b01c      	add	sp, #112	; 0x70
 800e1f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1f8:	b003      	add	sp, #12
 800e1fa:	4770      	bx	lr
 800e1fc:	2000003c 	.word	0x2000003c
 800e200:	ffff0208 	.word	0xffff0208

0800e204 <strcat>:
 800e204:	b510      	push	{r4, lr}
 800e206:	4603      	mov	r3, r0
 800e208:	781a      	ldrb	r2, [r3, #0]
 800e20a:	1c5c      	adds	r4, r3, #1
 800e20c:	b93a      	cbnz	r2, 800e21e <strcat+0x1a>
 800e20e:	3b01      	subs	r3, #1
 800e210:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e214:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e218:	2a00      	cmp	r2, #0
 800e21a:	d1f9      	bne.n	800e210 <strcat+0xc>
 800e21c:	bd10      	pop	{r4, pc}
 800e21e:	4623      	mov	r3, r4
 800e220:	e7f2      	b.n	800e208 <strcat+0x4>

0800e222 <quorem>:
 800e222:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e226:	6903      	ldr	r3, [r0, #16]
 800e228:	690c      	ldr	r4, [r1, #16]
 800e22a:	42a3      	cmp	r3, r4
 800e22c:	4680      	mov	r8, r0
 800e22e:	f2c0 8082 	blt.w	800e336 <quorem+0x114>
 800e232:	3c01      	subs	r4, #1
 800e234:	f101 0714 	add.w	r7, r1, #20
 800e238:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e23c:	f100 0614 	add.w	r6, r0, #20
 800e240:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e244:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e248:	eb06 030c 	add.w	r3, r6, ip
 800e24c:	3501      	adds	r5, #1
 800e24e:	eb07 090c 	add.w	r9, r7, ip
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	fbb0 f5f5 	udiv	r5, r0, r5
 800e258:	b395      	cbz	r5, 800e2c0 <quorem+0x9e>
 800e25a:	f04f 0a00 	mov.w	sl, #0
 800e25e:	4638      	mov	r0, r7
 800e260:	46b6      	mov	lr, r6
 800e262:	46d3      	mov	fp, sl
 800e264:	f850 2b04 	ldr.w	r2, [r0], #4
 800e268:	b293      	uxth	r3, r2
 800e26a:	fb05 a303 	mla	r3, r5, r3, sl
 800e26e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e272:	b29b      	uxth	r3, r3
 800e274:	ebab 0303 	sub.w	r3, fp, r3
 800e278:	0c12      	lsrs	r2, r2, #16
 800e27a:	f8de b000 	ldr.w	fp, [lr]
 800e27e:	fb05 a202 	mla	r2, r5, r2, sl
 800e282:	fa13 f38b 	uxtah	r3, r3, fp
 800e286:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e28a:	fa1f fb82 	uxth.w	fp, r2
 800e28e:	f8de 2000 	ldr.w	r2, [lr]
 800e292:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e296:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e29a:	b29b      	uxth	r3, r3
 800e29c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2a0:	4581      	cmp	r9, r0
 800e2a2:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e2a6:	f84e 3b04 	str.w	r3, [lr], #4
 800e2aa:	d2db      	bcs.n	800e264 <quorem+0x42>
 800e2ac:	f856 300c 	ldr.w	r3, [r6, ip]
 800e2b0:	b933      	cbnz	r3, 800e2c0 <quorem+0x9e>
 800e2b2:	9b01      	ldr	r3, [sp, #4]
 800e2b4:	3b04      	subs	r3, #4
 800e2b6:	429e      	cmp	r6, r3
 800e2b8:	461a      	mov	r2, r3
 800e2ba:	d330      	bcc.n	800e31e <quorem+0xfc>
 800e2bc:	f8c8 4010 	str.w	r4, [r8, #16]
 800e2c0:	4640      	mov	r0, r8
 800e2c2:	f001 f82b 	bl	800f31c <__mcmp>
 800e2c6:	2800      	cmp	r0, #0
 800e2c8:	db25      	blt.n	800e316 <quorem+0xf4>
 800e2ca:	3501      	adds	r5, #1
 800e2cc:	4630      	mov	r0, r6
 800e2ce:	f04f 0c00 	mov.w	ip, #0
 800e2d2:	f857 2b04 	ldr.w	r2, [r7], #4
 800e2d6:	f8d0 e000 	ldr.w	lr, [r0]
 800e2da:	b293      	uxth	r3, r2
 800e2dc:	ebac 0303 	sub.w	r3, ip, r3
 800e2e0:	0c12      	lsrs	r2, r2, #16
 800e2e2:	fa13 f38e 	uxtah	r3, r3, lr
 800e2e6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e2ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e2ee:	b29b      	uxth	r3, r3
 800e2f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2f4:	45b9      	cmp	r9, r7
 800e2f6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e2fa:	f840 3b04 	str.w	r3, [r0], #4
 800e2fe:	d2e8      	bcs.n	800e2d2 <quorem+0xb0>
 800e300:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e304:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e308:	b92a      	cbnz	r2, 800e316 <quorem+0xf4>
 800e30a:	3b04      	subs	r3, #4
 800e30c:	429e      	cmp	r6, r3
 800e30e:	461a      	mov	r2, r3
 800e310:	d30b      	bcc.n	800e32a <quorem+0x108>
 800e312:	f8c8 4010 	str.w	r4, [r8, #16]
 800e316:	4628      	mov	r0, r5
 800e318:	b003      	add	sp, #12
 800e31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e31e:	6812      	ldr	r2, [r2, #0]
 800e320:	3b04      	subs	r3, #4
 800e322:	2a00      	cmp	r2, #0
 800e324:	d1ca      	bne.n	800e2bc <quorem+0x9a>
 800e326:	3c01      	subs	r4, #1
 800e328:	e7c5      	b.n	800e2b6 <quorem+0x94>
 800e32a:	6812      	ldr	r2, [r2, #0]
 800e32c:	3b04      	subs	r3, #4
 800e32e:	2a00      	cmp	r2, #0
 800e330:	d1ef      	bne.n	800e312 <quorem+0xf0>
 800e332:	3c01      	subs	r4, #1
 800e334:	e7ea      	b.n	800e30c <quorem+0xea>
 800e336:	2000      	movs	r0, #0
 800e338:	e7ee      	b.n	800e318 <quorem+0xf6>
 800e33a:	0000      	movs	r0, r0
 800e33c:	0000      	movs	r0, r0
	...

0800e340 <_dtoa_r>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	ec57 6b10 	vmov	r6, r7, d0
 800e348:	b097      	sub	sp, #92	; 0x5c
 800e34a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e34c:	9106      	str	r1, [sp, #24]
 800e34e:	4604      	mov	r4, r0
 800e350:	920b      	str	r2, [sp, #44]	; 0x2c
 800e352:	9312      	str	r3, [sp, #72]	; 0x48
 800e354:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e358:	e9cd 6700 	strd	r6, r7, [sp]
 800e35c:	b93d      	cbnz	r5, 800e36e <_dtoa_r+0x2e>
 800e35e:	2010      	movs	r0, #16
 800e360:	f000 fdb4 	bl	800eecc <malloc>
 800e364:	6260      	str	r0, [r4, #36]	; 0x24
 800e366:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e36a:	6005      	str	r5, [r0, #0]
 800e36c:	60c5      	str	r5, [r0, #12]
 800e36e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e370:	6819      	ldr	r1, [r3, #0]
 800e372:	b151      	cbz	r1, 800e38a <_dtoa_r+0x4a>
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	604a      	str	r2, [r1, #4]
 800e378:	2301      	movs	r3, #1
 800e37a:	4093      	lsls	r3, r2
 800e37c:	608b      	str	r3, [r1, #8]
 800e37e:	4620      	mov	r0, r4
 800e380:	f000 fdeb 	bl	800ef5a <_Bfree>
 800e384:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e386:	2200      	movs	r2, #0
 800e388:	601a      	str	r2, [r3, #0]
 800e38a:	1e3b      	subs	r3, r7, #0
 800e38c:	bfbb      	ittet	lt
 800e38e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e392:	9301      	strlt	r3, [sp, #4]
 800e394:	2300      	movge	r3, #0
 800e396:	2201      	movlt	r2, #1
 800e398:	bfac      	ite	ge
 800e39a:	f8c8 3000 	strge.w	r3, [r8]
 800e39e:	f8c8 2000 	strlt.w	r2, [r8]
 800e3a2:	4baf      	ldr	r3, [pc, #700]	; (800e660 <_dtoa_r+0x320>)
 800e3a4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e3a8:	ea33 0308 	bics.w	r3, r3, r8
 800e3ac:	d114      	bne.n	800e3d8 <_dtoa_r+0x98>
 800e3ae:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e3b0:	f242 730f 	movw	r3, #9999	; 0x270f
 800e3b4:	6013      	str	r3, [r2, #0]
 800e3b6:	9b00      	ldr	r3, [sp, #0]
 800e3b8:	b923      	cbnz	r3, 800e3c4 <_dtoa_r+0x84>
 800e3ba:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e3be:	2800      	cmp	r0, #0
 800e3c0:	f000 8542 	beq.w	800ee48 <_dtoa_r+0xb08>
 800e3c4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3c6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800e674 <_dtoa_r+0x334>
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	f000 8544 	beq.w	800ee58 <_dtoa_r+0xb18>
 800e3d0:	f10b 0303 	add.w	r3, fp, #3
 800e3d4:	f000 bd3e 	b.w	800ee54 <_dtoa_r+0xb14>
 800e3d8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e3dc:	2200      	movs	r2, #0
 800e3de:	2300      	movs	r3, #0
 800e3e0:	4630      	mov	r0, r6
 800e3e2:	4639      	mov	r1, r7
 800e3e4:	f7f2 fb70 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3e8:	4681      	mov	r9, r0
 800e3ea:	b168      	cbz	r0, 800e408 <_dtoa_r+0xc8>
 800e3ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	6013      	str	r3, [r2, #0]
 800e3f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	f000 8524 	beq.w	800ee42 <_dtoa_r+0xb02>
 800e3fa:	4b9a      	ldr	r3, [pc, #616]	; (800e664 <_dtoa_r+0x324>)
 800e3fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e3fe:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800e402:	6013      	str	r3, [r2, #0]
 800e404:	f000 bd28 	b.w	800ee58 <_dtoa_r+0xb18>
 800e408:	aa14      	add	r2, sp, #80	; 0x50
 800e40a:	a915      	add	r1, sp, #84	; 0x54
 800e40c:	ec47 6b10 	vmov	d0, r6, r7
 800e410:	4620      	mov	r0, r4
 800e412:	f000 fffa 	bl	800f40a <__d2b>
 800e416:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e41a:	9004      	str	r0, [sp, #16]
 800e41c:	2d00      	cmp	r5, #0
 800e41e:	d07c      	beq.n	800e51a <_dtoa_r+0x1da>
 800e420:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e424:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e428:	46b2      	mov	sl, r6
 800e42a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e42e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e432:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e436:	2200      	movs	r2, #0
 800e438:	4b8b      	ldr	r3, [pc, #556]	; (800e668 <_dtoa_r+0x328>)
 800e43a:	4650      	mov	r0, sl
 800e43c:	4659      	mov	r1, fp
 800e43e:	f7f1 ff23 	bl	8000288 <__aeabi_dsub>
 800e442:	a381      	add	r3, pc, #516	; (adr r3, 800e648 <_dtoa_r+0x308>)
 800e444:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e448:	f7f2 f8d6 	bl	80005f8 <__aeabi_dmul>
 800e44c:	a380      	add	r3, pc, #512	; (adr r3, 800e650 <_dtoa_r+0x310>)
 800e44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e452:	f7f1 ff1b 	bl	800028c <__adddf3>
 800e456:	4606      	mov	r6, r0
 800e458:	4628      	mov	r0, r5
 800e45a:	460f      	mov	r7, r1
 800e45c:	f7f2 f862 	bl	8000524 <__aeabi_i2d>
 800e460:	a37d      	add	r3, pc, #500	; (adr r3, 800e658 <_dtoa_r+0x318>)
 800e462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e466:	f7f2 f8c7 	bl	80005f8 <__aeabi_dmul>
 800e46a:	4602      	mov	r2, r0
 800e46c:	460b      	mov	r3, r1
 800e46e:	4630      	mov	r0, r6
 800e470:	4639      	mov	r1, r7
 800e472:	f7f1 ff0b 	bl	800028c <__adddf3>
 800e476:	4606      	mov	r6, r0
 800e478:	460f      	mov	r7, r1
 800e47a:	f7f2 fb6d 	bl	8000b58 <__aeabi_d2iz>
 800e47e:	2200      	movs	r2, #0
 800e480:	4682      	mov	sl, r0
 800e482:	2300      	movs	r3, #0
 800e484:	4630      	mov	r0, r6
 800e486:	4639      	mov	r1, r7
 800e488:	f7f2 fb28 	bl	8000adc <__aeabi_dcmplt>
 800e48c:	b148      	cbz	r0, 800e4a2 <_dtoa_r+0x162>
 800e48e:	4650      	mov	r0, sl
 800e490:	f7f2 f848 	bl	8000524 <__aeabi_i2d>
 800e494:	4632      	mov	r2, r6
 800e496:	463b      	mov	r3, r7
 800e498:	f7f2 fb16 	bl	8000ac8 <__aeabi_dcmpeq>
 800e49c:	b908      	cbnz	r0, 800e4a2 <_dtoa_r+0x162>
 800e49e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e4a2:	f1ba 0f16 	cmp.w	sl, #22
 800e4a6:	d859      	bhi.n	800e55c <_dtoa_r+0x21c>
 800e4a8:	4970      	ldr	r1, [pc, #448]	; (800e66c <_dtoa_r+0x32c>)
 800e4aa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e4ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e4b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4b6:	f7f2 fb2f 	bl	8000b18 <__aeabi_dcmpgt>
 800e4ba:	2800      	cmp	r0, #0
 800e4bc:	d050      	beq.n	800e560 <_dtoa_r+0x220>
 800e4be:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e4c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e4c8:	1b5d      	subs	r5, r3, r5
 800e4ca:	f1b5 0801 	subs.w	r8, r5, #1
 800e4ce:	bf49      	itett	mi
 800e4d0:	f1c5 0301 	rsbmi	r3, r5, #1
 800e4d4:	2300      	movpl	r3, #0
 800e4d6:	9305      	strmi	r3, [sp, #20]
 800e4d8:	f04f 0800 	movmi.w	r8, #0
 800e4dc:	bf58      	it	pl
 800e4de:	9305      	strpl	r3, [sp, #20]
 800e4e0:	f1ba 0f00 	cmp.w	sl, #0
 800e4e4:	db3e      	blt.n	800e564 <_dtoa_r+0x224>
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	44d0      	add	r8, sl
 800e4ea:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e4ee:	9307      	str	r3, [sp, #28]
 800e4f0:	9b06      	ldr	r3, [sp, #24]
 800e4f2:	2b09      	cmp	r3, #9
 800e4f4:	f200 8090 	bhi.w	800e618 <_dtoa_r+0x2d8>
 800e4f8:	2b05      	cmp	r3, #5
 800e4fa:	bfc4      	itt	gt
 800e4fc:	3b04      	subgt	r3, #4
 800e4fe:	9306      	strgt	r3, [sp, #24]
 800e500:	9b06      	ldr	r3, [sp, #24]
 800e502:	f1a3 0302 	sub.w	r3, r3, #2
 800e506:	bfcc      	ite	gt
 800e508:	2500      	movgt	r5, #0
 800e50a:	2501      	movle	r5, #1
 800e50c:	2b03      	cmp	r3, #3
 800e50e:	f200 808f 	bhi.w	800e630 <_dtoa_r+0x2f0>
 800e512:	e8df f003 	tbb	[pc, r3]
 800e516:	7f7d      	.short	0x7f7d
 800e518:	7131      	.short	0x7131
 800e51a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e51e:	441d      	add	r5, r3
 800e520:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e524:	2820      	cmp	r0, #32
 800e526:	dd13      	ble.n	800e550 <_dtoa_r+0x210>
 800e528:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e52c:	9b00      	ldr	r3, [sp, #0]
 800e52e:	fa08 f800 	lsl.w	r8, r8, r0
 800e532:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e536:	fa23 f000 	lsr.w	r0, r3, r0
 800e53a:	ea48 0000 	orr.w	r0, r8, r0
 800e53e:	f7f1 ffe1 	bl	8000504 <__aeabi_ui2d>
 800e542:	2301      	movs	r3, #1
 800e544:	4682      	mov	sl, r0
 800e546:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e54a:	3d01      	subs	r5, #1
 800e54c:	9313      	str	r3, [sp, #76]	; 0x4c
 800e54e:	e772      	b.n	800e436 <_dtoa_r+0xf6>
 800e550:	9b00      	ldr	r3, [sp, #0]
 800e552:	f1c0 0020 	rsb	r0, r0, #32
 800e556:	fa03 f000 	lsl.w	r0, r3, r0
 800e55a:	e7f0      	b.n	800e53e <_dtoa_r+0x1fe>
 800e55c:	2301      	movs	r3, #1
 800e55e:	e7b1      	b.n	800e4c4 <_dtoa_r+0x184>
 800e560:	900f      	str	r0, [sp, #60]	; 0x3c
 800e562:	e7b0      	b.n	800e4c6 <_dtoa_r+0x186>
 800e564:	9b05      	ldr	r3, [sp, #20]
 800e566:	eba3 030a 	sub.w	r3, r3, sl
 800e56a:	9305      	str	r3, [sp, #20]
 800e56c:	f1ca 0300 	rsb	r3, sl, #0
 800e570:	9307      	str	r3, [sp, #28]
 800e572:	2300      	movs	r3, #0
 800e574:	930e      	str	r3, [sp, #56]	; 0x38
 800e576:	e7bb      	b.n	800e4f0 <_dtoa_r+0x1b0>
 800e578:	2301      	movs	r3, #1
 800e57a:	930a      	str	r3, [sp, #40]	; 0x28
 800e57c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e57e:	2b00      	cmp	r3, #0
 800e580:	dd59      	ble.n	800e636 <_dtoa_r+0x2f6>
 800e582:	9302      	str	r3, [sp, #8]
 800e584:	4699      	mov	r9, r3
 800e586:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e588:	2200      	movs	r2, #0
 800e58a:	6072      	str	r2, [r6, #4]
 800e58c:	2204      	movs	r2, #4
 800e58e:	f102 0014 	add.w	r0, r2, #20
 800e592:	4298      	cmp	r0, r3
 800e594:	6871      	ldr	r1, [r6, #4]
 800e596:	d953      	bls.n	800e640 <_dtoa_r+0x300>
 800e598:	4620      	mov	r0, r4
 800e59a:	f000 fcaa 	bl	800eef2 <_Balloc>
 800e59e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5a0:	6030      	str	r0, [r6, #0]
 800e5a2:	f1b9 0f0e 	cmp.w	r9, #14
 800e5a6:	f8d3 b000 	ldr.w	fp, [r3]
 800e5aa:	f200 80e6 	bhi.w	800e77a <_dtoa_r+0x43a>
 800e5ae:	2d00      	cmp	r5, #0
 800e5b0:	f000 80e3 	beq.w	800e77a <_dtoa_r+0x43a>
 800e5b4:	ed9d 7b00 	vldr	d7, [sp]
 800e5b8:	f1ba 0f00 	cmp.w	sl, #0
 800e5bc:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800e5c0:	dd74      	ble.n	800e6ac <_dtoa_r+0x36c>
 800e5c2:	4a2a      	ldr	r2, [pc, #168]	; (800e66c <_dtoa_r+0x32c>)
 800e5c4:	f00a 030f 	and.w	r3, sl, #15
 800e5c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e5cc:	ed93 7b00 	vldr	d7, [r3]
 800e5d0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800e5d4:	06f0      	lsls	r0, r6, #27
 800e5d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800e5da:	d565      	bpl.n	800e6a8 <_dtoa_r+0x368>
 800e5dc:	4b24      	ldr	r3, [pc, #144]	; (800e670 <_dtoa_r+0x330>)
 800e5de:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e5e2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e5e6:	f7f2 f931 	bl	800084c <__aeabi_ddiv>
 800e5ea:	e9cd 0100 	strd	r0, r1, [sp]
 800e5ee:	f006 060f 	and.w	r6, r6, #15
 800e5f2:	2503      	movs	r5, #3
 800e5f4:	4f1e      	ldr	r7, [pc, #120]	; (800e670 <_dtoa_r+0x330>)
 800e5f6:	e04c      	b.n	800e692 <_dtoa_r+0x352>
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800e5fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5fe:	4453      	add	r3, sl
 800e600:	f103 0901 	add.w	r9, r3, #1
 800e604:	9302      	str	r3, [sp, #8]
 800e606:	464b      	mov	r3, r9
 800e608:	2b01      	cmp	r3, #1
 800e60a:	bfb8      	it	lt
 800e60c:	2301      	movlt	r3, #1
 800e60e:	e7ba      	b.n	800e586 <_dtoa_r+0x246>
 800e610:	2300      	movs	r3, #0
 800e612:	e7b2      	b.n	800e57a <_dtoa_r+0x23a>
 800e614:	2300      	movs	r3, #0
 800e616:	e7f0      	b.n	800e5fa <_dtoa_r+0x2ba>
 800e618:	2501      	movs	r5, #1
 800e61a:	2300      	movs	r3, #0
 800e61c:	9306      	str	r3, [sp, #24]
 800e61e:	950a      	str	r5, [sp, #40]	; 0x28
 800e620:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e624:	9302      	str	r3, [sp, #8]
 800e626:	4699      	mov	r9, r3
 800e628:	2200      	movs	r2, #0
 800e62a:	2312      	movs	r3, #18
 800e62c:	920b      	str	r2, [sp, #44]	; 0x2c
 800e62e:	e7aa      	b.n	800e586 <_dtoa_r+0x246>
 800e630:	2301      	movs	r3, #1
 800e632:	930a      	str	r3, [sp, #40]	; 0x28
 800e634:	e7f4      	b.n	800e620 <_dtoa_r+0x2e0>
 800e636:	2301      	movs	r3, #1
 800e638:	9302      	str	r3, [sp, #8]
 800e63a:	4699      	mov	r9, r3
 800e63c:	461a      	mov	r2, r3
 800e63e:	e7f5      	b.n	800e62c <_dtoa_r+0x2ec>
 800e640:	3101      	adds	r1, #1
 800e642:	6071      	str	r1, [r6, #4]
 800e644:	0052      	lsls	r2, r2, #1
 800e646:	e7a2      	b.n	800e58e <_dtoa_r+0x24e>
 800e648:	636f4361 	.word	0x636f4361
 800e64c:	3fd287a7 	.word	0x3fd287a7
 800e650:	8b60c8b3 	.word	0x8b60c8b3
 800e654:	3fc68a28 	.word	0x3fc68a28
 800e658:	509f79fb 	.word	0x509f79fb
 800e65c:	3fd34413 	.word	0x3fd34413
 800e660:	7ff00000 	.word	0x7ff00000
 800e664:	08010f81 	.word	0x08010f81
 800e668:	3ff80000 	.word	0x3ff80000
 800e66c:	08010fe0 	.word	0x08010fe0
 800e670:	08010fb8 	.word	0x08010fb8
 800e674:	08010fad 	.word	0x08010fad
 800e678:	07f1      	lsls	r1, r6, #31
 800e67a:	d508      	bpl.n	800e68e <_dtoa_r+0x34e>
 800e67c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e680:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e684:	f7f1 ffb8 	bl	80005f8 <__aeabi_dmul>
 800e688:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e68c:	3501      	adds	r5, #1
 800e68e:	1076      	asrs	r6, r6, #1
 800e690:	3708      	adds	r7, #8
 800e692:	2e00      	cmp	r6, #0
 800e694:	d1f0      	bne.n	800e678 <_dtoa_r+0x338>
 800e696:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e69a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e69e:	f7f2 f8d5 	bl	800084c <__aeabi_ddiv>
 800e6a2:	e9cd 0100 	strd	r0, r1, [sp]
 800e6a6:	e01a      	b.n	800e6de <_dtoa_r+0x39e>
 800e6a8:	2502      	movs	r5, #2
 800e6aa:	e7a3      	b.n	800e5f4 <_dtoa_r+0x2b4>
 800e6ac:	f000 80a0 	beq.w	800e7f0 <_dtoa_r+0x4b0>
 800e6b0:	f1ca 0600 	rsb	r6, sl, #0
 800e6b4:	4b9f      	ldr	r3, [pc, #636]	; (800e934 <_dtoa_r+0x5f4>)
 800e6b6:	4fa0      	ldr	r7, [pc, #640]	; (800e938 <_dtoa_r+0x5f8>)
 800e6b8:	f006 020f 	and.w	r2, r6, #15
 800e6bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6c4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800e6c8:	f7f1 ff96 	bl	80005f8 <__aeabi_dmul>
 800e6cc:	e9cd 0100 	strd	r0, r1, [sp]
 800e6d0:	1136      	asrs	r6, r6, #4
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	2502      	movs	r5, #2
 800e6d6:	2e00      	cmp	r6, #0
 800e6d8:	d17f      	bne.n	800e7da <_dtoa_r+0x49a>
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d1e1      	bne.n	800e6a2 <_dtoa_r+0x362>
 800e6de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	f000 8087 	beq.w	800e7f4 <_dtoa_r+0x4b4>
 800e6e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	4b93      	ldr	r3, [pc, #588]	; (800e93c <_dtoa_r+0x5fc>)
 800e6ee:	4630      	mov	r0, r6
 800e6f0:	4639      	mov	r1, r7
 800e6f2:	f7f2 f9f3 	bl	8000adc <__aeabi_dcmplt>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d07c      	beq.n	800e7f4 <_dtoa_r+0x4b4>
 800e6fa:	f1b9 0f00 	cmp.w	r9, #0
 800e6fe:	d079      	beq.n	800e7f4 <_dtoa_r+0x4b4>
 800e700:	9b02      	ldr	r3, [sp, #8]
 800e702:	2b00      	cmp	r3, #0
 800e704:	dd35      	ble.n	800e772 <_dtoa_r+0x432>
 800e706:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800e70a:	9308      	str	r3, [sp, #32]
 800e70c:	4639      	mov	r1, r7
 800e70e:	2200      	movs	r2, #0
 800e710:	4b8b      	ldr	r3, [pc, #556]	; (800e940 <_dtoa_r+0x600>)
 800e712:	4630      	mov	r0, r6
 800e714:	f7f1 ff70 	bl	80005f8 <__aeabi_dmul>
 800e718:	e9cd 0100 	strd	r0, r1, [sp]
 800e71c:	9f02      	ldr	r7, [sp, #8]
 800e71e:	3501      	adds	r5, #1
 800e720:	4628      	mov	r0, r5
 800e722:	f7f1 feff 	bl	8000524 <__aeabi_i2d>
 800e726:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e72a:	f7f1 ff65 	bl	80005f8 <__aeabi_dmul>
 800e72e:	2200      	movs	r2, #0
 800e730:	4b84      	ldr	r3, [pc, #528]	; (800e944 <_dtoa_r+0x604>)
 800e732:	f7f1 fdab 	bl	800028c <__adddf3>
 800e736:	4605      	mov	r5, r0
 800e738:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800e73c:	2f00      	cmp	r7, #0
 800e73e:	d15d      	bne.n	800e7fc <_dtoa_r+0x4bc>
 800e740:	2200      	movs	r2, #0
 800e742:	4b81      	ldr	r3, [pc, #516]	; (800e948 <_dtoa_r+0x608>)
 800e744:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e748:	f7f1 fd9e 	bl	8000288 <__aeabi_dsub>
 800e74c:	462a      	mov	r2, r5
 800e74e:	4633      	mov	r3, r6
 800e750:	e9cd 0100 	strd	r0, r1, [sp]
 800e754:	f7f2 f9e0 	bl	8000b18 <__aeabi_dcmpgt>
 800e758:	2800      	cmp	r0, #0
 800e75a:	f040 8288 	bne.w	800ec6e <_dtoa_r+0x92e>
 800e75e:	462a      	mov	r2, r5
 800e760:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e764:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e768:	f7f2 f9b8 	bl	8000adc <__aeabi_dcmplt>
 800e76c:	2800      	cmp	r0, #0
 800e76e:	f040 827c 	bne.w	800ec6a <_dtoa_r+0x92a>
 800e772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e776:	e9cd 2300 	strd	r2, r3, [sp]
 800e77a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	f2c0 8150 	blt.w	800ea22 <_dtoa_r+0x6e2>
 800e782:	f1ba 0f0e 	cmp.w	sl, #14
 800e786:	f300 814c 	bgt.w	800ea22 <_dtoa_r+0x6e2>
 800e78a:	4b6a      	ldr	r3, [pc, #424]	; (800e934 <_dtoa_r+0x5f4>)
 800e78c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e790:	ed93 7b00 	vldr	d7, [r3]
 800e794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e796:	2b00      	cmp	r3, #0
 800e798:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e79c:	f280 80d8 	bge.w	800e950 <_dtoa_r+0x610>
 800e7a0:	f1b9 0f00 	cmp.w	r9, #0
 800e7a4:	f300 80d4 	bgt.w	800e950 <_dtoa_r+0x610>
 800e7a8:	f040 825e 	bne.w	800ec68 <_dtoa_r+0x928>
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	4b66      	ldr	r3, [pc, #408]	; (800e948 <_dtoa_r+0x608>)
 800e7b0:	ec51 0b17 	vmov	r0, r1, d7
 800e7b4:	f7f1 ff20 	bl	80005f8 <__aeabi_dmul>
 800e7b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e7bc:	f7f2 f9a2 	bl	8000b04 <__aeabi_dcmpge>
 800e7c0:	464f      	mov	r7, r9
 800e7c2:	464e      	mov	r6, r9
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	f040 8234 	bne.w	800ec32 <_dtoa_r+0x8f2>
 800e7ca:	2331      	movs	r3, #49	; 0x31
 800e7cc:	f10b 0501 	add.w	r5, fp, #1
 800e7d0:	f88b 3000 	strb.w	r3, [fp]
 800e7d4:	f10a 0a01 	add.w	sl, sl, #1
 800e7d8:	e22f      	b.n	800ec3a <_dtoa_r+0x8fa>
 800e7da:	07f2      	lsls	r2, r6, #31
 800e7dc:	d505      	bpl.n	800e7ea <_dtoa_r+0x4aa>
 800e7de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7e2:	f7f1 ff09 	bl	80005f8 <__aeabi_dmul>
 800e7e6:	3501      	adds	r5, #1
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	1076      	asrs	r6, r6, #1
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	e772      	b.n	800e6d6 <_dtoa_r+0x396>
 800e7f0:	2502      	movs	r5, #2
 800e7f2:	e774      	b.n	800e6de <_dtoa_r+0x39e>
 800e7f4:	f8cd a020 	str.w	sl, [sp, #32]
 800e7f8:	464f      	mov	r7, r9
 800e7fa:	e791      	b.n	800e720 <_dtoa_r+0x3e0>
 800e7fc:	4b4d      	ldr	r3, [pc, #308]	; (800e934 <_dtoa_r+0x5f4>)
 800e7fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e802:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800e806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d047      	beq.n	800e89c <_dtoa_r+0x55c>
 800e80c:	4602      	mov	r2, r0
 800e80e:	460b      	mov	r3, r1
 800e810:	2000      	movs	r0, #0
 800e812:	494e      	ldr	r1, [pc, #312]	; (800e94c <_dtoa_r+0x60c>)
 800e814:	f7f2 f81a 	bl	800084c <__aeabi_ddiv>
 800e818:	462a      	mov	r2, r5
 800e81a:	4633      	mov	r3, r6
 800e81c:	f7f1 fd34 	bl	8000288 <__aeabi_dsub>
 800e820:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e824:	465d      	mov	r5, fp
 800e826:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e82a:	f7f2 f995 	bl	8000b58 <__aeabi_d2iz>
 800e82e:	4606      	mov	r6, r0
 800e830:	f7f1 fe78 	bl	8000524 <__aeabi_i2d>
 800e834:	4602      	mov	r2, r0
 800e836:	460b      	mov	r3, r1
 800e838:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e83c:	f7f1 fd24 	bl	8000288 <__aeabi_dsub>
 800e840:	3630      	adds	r6, #48	; 0x30
 800e842:	f805 6b01 	strb.w	r6, [r5], #1
 800e846:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e84a:	e9cd 0100 	strd	r0, r1, [sp]
 800e84e:	f7f2 f945 	bl	8000adc <__aeabi_dcmplt>
 800e852:	2800      	cmp	r0, #0
 800e854:	d163      	bne.n	800e91e <_dtoa_r+0x5de>
 800e856:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e85a:	2000      	movs	r0, #0
 800e85c:	4937      	ldr	r1, [pc, #220]	; (800e93c <_dtoa_r+0x5fc>)
 800e85e:	f7f1 fd13 	bl	8000288 <__aeabi_dsub>
 800e862:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e866:	f7f2 f939 	bl	8000adc <__aeabi_dcmplt>
 800e86a:	2800      	cmp	r0, #0
 800e86c:	f040 80b7 	bne.w	800e9de <_dtoa_r+0x69e>
 800e870:	eba5 030b 	sub.w	r3, r5, fp
 800e874:	429f      	cmp	r7, r3
 800e876:	f77f af7c 	ble.w	800e772 <_dtoa_r+0x432>
 800e87a:	2200      	movs	r2, #0
 800e87c:	4b30      	ldr	r3, [pc, #192]	; (800e940 <_dtoa_r+0x600>)
 800e87e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e882:	f7f1 feb9 	bl	80005f8 <__aeabi_dmul>
 800e886:	2200      	movs	r2, #0
 800e888:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e88c:	4b2c      	ldr	r3, [pc, #176]	; (800e940 <_dtoa_r+0x600>)
 800e88e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e892:	f7f1 feb1 	bl	80005f8 <__aeabi_dmul>
 800e896:	e9cd 0100 	strd	r0, r1, [sp]
 800e89a:	e7c4      	b.n	800e826 <_dtoa_r+0x4e6>
 800e89c:	462a      	mov	r2, r5
 800e89e:	4633      	mov	r3, r6
 800e8a0:	f7f1 feaa 	bl	80005f8 <__aeabi_dmul>
 800e8a4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800e8a8:	eb0b 0507 	add.w	r5, fp, r7
 800e8ac:	465e      	mov	r6, fp
 800e8ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8b2:	f7f2 f951 	bl	8000b58 <__aeabi_d2iz>
 800e8b6:	4607      	mov	r7, r0
 800e8b8:	f7f1 fe34 	bl	8000524 <__aeabi_i2d>
 800e8bc:	3730      	adds	r7, #48	; 0x30
 800e8be:	4602      	mov	r2, r0
 800e8c0:	460b      	mov	r3, r1
 800e8c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8c6:	f7f1 fcdf 	bl	8000288 <__aeabi_dsub>
 800e8ca:	f806 7b01 	strb.w	r7, [r6], #1
 800e8ce:	42ae      	cmp	r6, r5
 800e8d0:	e9cd 0100 	strd	r0, r1, [sp]
 800e8d4:	f04f 0200 	mov.w	r2, #0
 800e8d8:	d126      	bne.n	800e928 <_dtoa_r+0x5e8>
 800e8da:	4b1c      	ldr	r3, [pc, #112]	; (800e94c <_dtoa_r+0x60c>)
 800e8dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e8e0:	f7f1 fcd4 	bl	800028c <__adddf3>
 800e8e4:	4602      	mov	r2, r0
 800e8e6:	460b      	mov	r3, r1
 800e8e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e8ec:	f7f2 f914 	bl	8000b18 <__aeabi_dcmpgt>
 800e8f0:	2800      	cmp	r0, #0
 800e8f2:	d174      	bne.n	800e9de <_dtoa_r+0x69e>
 800e8f4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800e8f8:	2000      	movs	r0, #0
 800e8fa:	4914      	ldr	r1, [pc, #80]	; (800e94c <_dtoa_r+0x60c>)
 800e8fc:	f7f1 fcc4 	bl	8000288 <__aeabi_dsub>
 800e900:	4602      	mov	r2, r0
 800e902:	460b      	mov	r3, r1
 800e904:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e908:	f7f2 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800e90c:	2800      	cmp	r0, #0
 800e90e:	f43f af30 	beq.w	800e772 <_dtoa_r+0x432>
 800e912:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e916:	2b30      	cmp	r3, #48	; 0x30
 800e918:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800e91c:	d002      	beq.n	800e924 <_dtoa_r+0x5e4>
 800e91e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e922:	e04a      	b.n	800e9ba <_dtoa_r+0x67a>
 800e924:	4615      	mov	r5, r2
 800e926:	e7f4      	b.n	800e912 <_dtoa_r+0x5d2>
 800e928:	4b05      	ldr	r3, [pc, #20]	; (800e940 <_dtoa_r+0x600>)
 800e92a:	f7f1 fe65 	bl	80005f8 <__aeabi_dmul>
 800e92e:	e9cd 0100 	strd	r0, r1, [sp]
 800e932:	e7bc      	b.n	800e8ae <_dtoa_r+0x56e>
 800e934:	08010fe0 	.word	0x08010fe0
 800e938:	08010fb8 	.word	0x08010fb8
 800e93c:	3ff00000 	.word	0x3ff00000
 800e940:	40240000 	.word	0x40240000
 800e944:	401c0000 	.word	0x401c0000
 800e948:	40140000 	.word	0x40140000
 800e94c:	3fe00000 	.word	0x3fe00000
 800e950:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e954:	465d      	mov	r5, fp
 800e956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e95a:	4630      	mov	r0, r6
 800e95c:	4639      	mov	r1, r7
 800e95e:	f7f1 ff75 	bl	800084c <__aeabi_ddiv>
 800e962:	f7f2 f8f9 	bl	8000b58 <__aeabi_d2iz>
 800e966:	4680      	mov	r8, r0
 800e968:	f7f1 fddc 	bl	8000524 <__aeabi_i2d>
 800e96c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e970:	f7f1 fe42 	bl	80005f8 <__aeabi_dmul>
 800e974:	4602      	mov	r2, r0
 800e976:	460b      	mov	r3, r1
 800e978:	4630      	mov	r0, r6
 800e97a:	4639      	mov	r1, r7
 800e97c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800e980:	f7f1 fc82 	bl	8000288 <__aeabi_dsub>
 800e984:	f805 6b01 	strb.w	r6, [r5], #1
 800e988:	eba5 060b 	sub.w	r6, r5, fp
 800e98c:	45b1      	cmp	r9, r6
 800e98e:	4602      	mov	r2, r0
 800e990:	460b      	mov	r3, r1
 800e992:	d139      	bne.n	800ea08 <_dtoa_r+0x6c8>
 800e994:	f7f1 fc7a 	bl	800028c <__adddf3>
 800e998:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e99c:	4606      	mov	r6, r0
 800e99e:	460f      	mov	r7, r1
 800e9a0:	f7f2 f8ba 	bl	8000b18 <__aeabi_dcmpgt>
 800e9a4:	b9c8      	cbnz	r0, 800e9da <_dtoa_r+0x69a>
 800e9a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e9aa:	4630      	mov	r0, r6
 800e9ac:	4639      	mov	r1, r7
 800e9ae:	f7f2 f88b 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9b2:	b110      	cbz	r0, 800e9ba <_dtoa_r+0x67a>
 800e9b4:	f018 0f01 	tst.w	r8, #1
 800e9b8:	d10f      	bne.n	800e9da <_dtoa_r+0x69a>
 800e9ba:	9904      	ldr	r1, [sp, #16]
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f000 facc 	bl	800ef5a <_Bfree>
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e9c6:	702b      	strb	r3, [r5, #0]
 800e9c8:	f10a 0301 	add.w	r3, sl, #1
 800e9cc:	6013      	str	r3, [r2, #0]
 800e9ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	f000 8241 	beq.w	800ee58 <_dtoa_r+0xb18>
 800e9d6:	601d      	str	r5, [r3, #0]
 800e9d8:	e23e      	b.n	800ee58 <_dtoa_r+0xb18>
 800e9da:	f8cd a020 	str.w	sl, [sp, #32]
 800e9de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e9e2:	2a39      	cmp	r2, #57	; 0x39
 800e9e4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800e9e8:	d108      	bne.n	800e9fc <_dtoa_r+0x6bc>
 800e9ea:	459b      	cmp	fp, r3
 800e9ec:	d10a      	bne.n	800ea04 <_dtoa_r+0x6c4>
 800e9ee:	9b08      	ldr	r3, [sp, #32]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	9308      	str	r3, [sp, #32]
 800e9f4:	2330      	movs	r3, #48	; 0x30
 800e9f6:	f88b 3000 	strb.w	r3, [fp]
 800e9fa:	465b      	mov	r3, fp
 800e9fc:	781a      	ldrb	r2, [r3, #0]
 800e9fe:	3201      	adds	r2, #1
 800ea00:	701a      	strb	r2, [r3, #0]
 800ea02:	e78c      	b.n	800e91e <_dtoa_r+0x5de>
 800ea04:	461d      	mov	r5, r3
 800ea06:	e7ea      	b.n	800e9de <_dtoa_r+0x69e>
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4b9b      	ldr	r3, [pc, #620]	; (800ec78 <_dtoa_r+0x938>)
 800ea0c:	f7f1 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ea10:	2200      	movs	r2, #0
 800ea12:	2300      	movs	r3, #0
 800ea14:	4606      	mov	r6, r0
 800ea16:	460f      	mov	r7, r1
 800ea18:	f7f2 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	d09a      	beq.n	800e956 <_dtoa_r+0x616>
 800ea20:	e7cb      	b.n	800e9ba <_dtoa_r+0x67a>
 800ea22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea24:	2a00      	cmp	r2, #0
 800ea26:	f000 808b 	beq.w	800eb40 <_dtoa_r+0x800>
 800ea2a:	9a06      	ldr	r2, [sp, #24]
 800ea2c:	2a01      	cmp	r2, #1
 800ea2e:	dc6e      	bgt.n	800eb0e <_dtoa_r+0x7ce>
 800ea30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea32:	2a00      	cmp	r2, #0
 800ea34:	d067      	beq.n	800eb06 <_dtoa_r+0x7c6>
 800ea36:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ea3a:	9f07      	ldr	r7, [sp, #28]
 800ea3c:	9d05      	ldr	r5, [sp, #20]
 800ea3e:	9a05      	ldr	r2, [sp, #20]
 800ea40:	2101      	movs	r1, #1
 800ea42:	441a      	add	r2, r3
 800ea44:	4620      	mov	r0, r4
 800ea46:	9205      	str	r2, [sp, #20]
 800ea48:	4498      	add	r8, r3
 800ea4a:	f000 fb26 	bl	800f09a <__i2b>
 800ea4e:	4606      	mov	r6, r0
 800ea50:	2d00      	cmp	r5, #0
 800ea52:	dd0c      	ble.n	800ea6e <_dtoa_r+0x72e>
 800ea54:	f1b8 0f00 	cmp.w	r8, #0
 800ea58:	dd09      	ble.n	800ea6e <_dtoa_r+0x72e>
 800ea5a:	4545      	cmp	r5, r8
 800ea5c:	9a05      	ldr	r2, [sp, #20]
 800ea5e:	462b      	mov	r3, r5
 800ea60:	bfa8      	it	ge
 800ea62:	4643      	movge	r3, r8
 800ea64:	1ad2      	subs	r2, r2, r3
 800ea66:	9205      	str	r2, [sp, #20]
 800ea68:	1aed      	subs	r5, r5, r3
 800ea6a:	eba8 0803 	sub.w	r8, r8, r3
 800ea6e:	9b07      	ldr	r3, [sp, #28]
 800ea70:	b1eb      	cbz	r3, 800eaae <_dtoa_r+0x76e>
 800ea72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d067      	beq.n	800eb48 <_dtoa_r+0x808>
 800ea78:	b18f      	cbz	r7, 800ea9e <_dtoa_r+0x75e>
 800ea7a:	4631      	mov	r1, r6
 800ea7c:	463a      	mov	r2, r7
 800ea7e:	4620      	mov	r0, r4
 800ea80:	f000 fbaa 	bl	800f1d8 <__pow5mult>
 800ea84:	9a04      	ldr	r2, [sp, #16]
 800ea86:	4601      	mov	r1, r0
 800ea88:	4606      	mov	r6, r0
 800ea8a:	4620      	mov	r0, r4
 800ea8c:	f000 fb0e 	bl	800f0ac <__multiply>
 800ea90:	9904      	ldr	r1, [sp, #16]
 800ea92:	9008      	str	r0, [sp, #32]
 800ea94:	4620      	mov	r0, r4
 800ea96:	f000 fa60 	bl	800ef5a <_Bfree>
 800ea9a:	9b08      	ldr	r3, [sp, #32]
 800ea9c:	9304      	str	r3, [sp, #16]
 800ea9e:	9b07      	ldr	r3, [sp, #28]
 800eaa0:	1bda      	subs	r2, r3, r7
 800eaa2:	d004      	beq.n	800eaae <_dtoa_r+0x76e>
 800eaa4:	9904      	ldr	r1, [sp, #16]
 800eaa6:	4620      	mov	r0, r4
 800eaa8:	f000 fb96 	bl	800f1d8 <__pow5mult>
 800eaac:	9004      	str	r0, [sp, #16]
 800eaae:	2101      	movs	r1, #1
 800eab0:	4620      	mov	r0, r4
 800eab2:	f000 faf2 	bl	800f09a <__i2b>
 800eab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eab8:	4607      	mov	r7, r0
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	f000 81d0 	beq.w	800ee60 <_dtoa_r+0xb20>
 800eac0:	461a      	mov	r2, r3
 800eac2:	4601      	mov	r1, r0
 800eac4:	4620      	mov	r0, r4
 800eac6:	f000 fb87 	bl	800f1d8 <__pow5mult>
 800eaca:	9b06      	ldr	r3, [sp, #24]
 800eacc:	2b01      	cmp	r3, #1
 800eace:	4607      	mov	r7, r0
 800ead0:	dc40      	bgt.n	800eb54 <_dtoa_r+0x814>
 800ead2:	9b00      	ldr	r3, [sp, #0]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d139      	bne.n	800eb4c <_dtoa_r+0x80c>
 800ead8:	9b01      	ldr	r3, [sp, #4]
 800eada:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d136      	bne.n	800eb50 <_dtoa_r+0x810>
 800eae2:	9b01      	ldr	r3, [sp, #4]
 800eae4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800eae8:	0d1b      	lsrs	r3, r3, #20
 800eaea:	051b      	lsls	r3, r3, #20
 800eaec:	b12b      	cbz	r3, 800eafa <_dtoa_r+0x7ba>
 800eaee:	9b05      	ldr	r3, [sp, #20]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	9305      	str	r3, [sp, #20]
 800eaf4:	f108 0801 	add.w	r8, r8, #1
 800eaf8:	2301      	movs	r3, #1
 800eafa:	9307      	str	r3, [sp, #28]
 800eafc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d12a      	bne.n	800eb58 <_dtoa_r+0x818>
 800eb02:	2001      	movs	r0, #1
 800eb04:	e030      	b.n	800eb68 <_dtoa_r+0x828>
 800eb06:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800eb08:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800eb0c:	e795      	b.n	800ea3a <_dtoa_r+0x6fa>
 800eb0e:	9b07      	ldr	r3, [sp, #28]
 800eb10:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800eb14:	42bb      	cmp	r3, r7
 800eb16:	bfbf      	itttt	lt
 800eb18:	9b07      	ldrlt	r3, [sp, #28]
 800eb1a:	9707      	strlt	r7, [sp, #28]
 800eb1c:	1afa      	sublt	r2, r7, r3
 800eb1e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800eb20:	bfbb      	ittet	lt
 800eb22:	189b      	addlt	r3, r3, r2
 800eb24:	930e      	strlt	r3, [sp, #56]	; 0x38
 800eb26:	1bdf      	subge	r7, r3, r7
 800eb28:	2700      	movlt	r7, #0
 800eb2a:	f1b9 0f00 	cmp.w	r9, #0
 800eb2e:	bfb5      	itete	lt
 800eb30:	9b05      	ldrlt	r3, [sp, #20]
 800eb32:	9d05      	ldrge	r5, [sp, #20]
 800eb34:	eba3 0509 	sublt.w	r5, r3, r9
 800eb38:	464b      	movge	r3, r9
 800eb3a:	bfb8      	it	lt
 800eb3c:	2300      	movlt	r3, #0
 800eb3e:	e77e      	b.n	800ea3e <_dtoa_r+0x6fe>
 800eb40:	9f07      	ldr	r7, [sp, #28]
 800eb42:	9d05      	ldr	r5, [sp, #20]
 800eb44:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800eb46:	e783      	b.n	800ea50 <_dtoa_r+0x710>
 800eb48:	9a07      	ldr	r2, [sp, #28]
 800eb4a:	e7ab      	b.n	800eaa4 <_dtoa_r+0x764>
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	e7d4      	b.n	800eafa <_dtoa_r+0x7ba>
 800eb50:	9b00      	ldr	r3, [sp, #0]
 800eb52:	e7d2      	b.n	800eafa <_dtoa_r+0x7ba>
 800eb54:	2300      	movs	r3, #0
 800eb56:	9307      	str	r3, [sp, #28]
 800eb58:	693b      	ldr	r3, [r7, #16]
 800eb5a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800eb5e:	6918      	ldr	r0, [r3, #16]
 800eb60:	f000 fa4d 	bl	800effe <__hi0bits>
 800eb64:	f1c0 0020 	rsb	r0, r0, #32
 800eb68:	4440      	add	r0, r8
 800eb6a:	f010 001f 	ands.w	r0, r0, #31
 800eb6e:	d047      	beq.n	800ec00 <_dtoa_r+0x8c0>
 800eb70:	f1c0 0320 	rsb	r3, r0, #32
 800eb74:	2b04      	cmp	r3, #4
 800eb76:	dd3b      	ble.n	800ebf0 <_dtoa_r+0x8b0>
 800eb78:	9b05      	ldr	r3, [sp, #20]
 800eb7a:	f1c0 001c 	rsb	r0, r0, #28
 800eb7e:	4403      	add	r3, r0
 800eb80:	9305      	str	r3, [sp, #20]
 800eb82:	4405      	add	r5, r0
 800eb84:	4480      	add	r8, r0
 800eb86:	9b05      	ldr	r3, [sp, #20]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	dd05      	ble.n	800eb98 <_dtoa_r+0x858>
 800eb8c:	461a      	mov	r2, r3
 800eb8e:	9904      	ldr	r1, [sp, #16]
 800eb90:	4620      	mov	r0, r4
 800eb92:	f000 fb6f 	bl	800f274 <__lshift>
 800eb96:	9004      	str	r0, [sp, #16]
 800eb98:	f1b8 0f00 	cmp.w	r8, #0
 800eb9c:	dd05      	ble.n	800ebaa <_dtoa_r+0x86a>
 800eb9e:	4639      	mov	r1, r7
 800eba0:	4642      	mov	r2, r8
 800eba2:	4620      	mov	r0, r4
 800eba4:	f000 fb66 	bl	800f274 <__lshift>
 800eba8:	4607      	mov	r7, r0
 800ebaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebac:	b353      	cbz	r3, 800ec04 <_dtoa_r+0x8c4>
 800ebae:	4639      	mov	r1, r7
 800ebb0:	9804      	ldr	r0, [sp, #16]
 800ebb2:	f000 fbb3 	bl	800f31c <__mcmp>
 800ebb6:	2800      	cmp	r0, #0
 800ebb8:	da24      	bge.n	800ec04 <_dtoa_r+0x8c4>
 800ebba:	2300      	movs	r3, #0
 800ebbc:	220a      	movs	r2, #10
 800ebbe:	9904      	ldr	r1, [sp, #16]
 800ebc0:	4620      	mov	r0, r4
 800ebc2:	f000 f9e1 	bl	800ef88 <__multadd>
 800ebc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebc8:	9004      	str	r0, [sp, #16]
 800ebca:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	f000 814d 	beq.w	800ee6e <_dtoa_r+0xb2e>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	4631      	mov	r1, r6
 800ebd8:	220a      	movs	r2, #10
 800ebda:	4620      	mov	r0, r4
 800ebdc:	f000 f9d4 	bl	800ef88 <__multadd>
 800ebe0:	9b02      	ldr	r3, [sp, #8]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	4606      	mov	r6, r0
 800ebe6:	dc4f      	bgt.n	800ec88 <_dtoa_r+0x948>
 800ebe8:	9b06      	ldr	r3, [sp, #24]
 800ebea:	2b02      	cmp	r3, #2
 800ebec:	dd4c      	ble.n	800ec88 <_dtoa_r+0x948>
 800ebee:	e011      	b.n	800ec14 <_dtoa_r+0x8d4>
 800ebf0:	d0c9      	beq.n	800eb86 <_dtoa_r+0x846>
 800ebf2:	9a05      	ldr	r2, [sp, #20]
 800ebf4:	331c      	adds	r3, #28
 800ebf6:	441a      	add	r2, r3
 800ebf8:	9205      	str	r2, [sp, #20]
 800ebfa:	441d      	add	r5, r3
 800ebfc:	4498      	add	r8, r3
 800ebfe:	e7c2      	b.n	800eb86 <_dtoa_r+0x846>
 800ec00:	4603      	mov	r3, r0
 800ec02:	e7f6      	b.n	800ebf2 <_dtoa_r+0x8b2>
 800ec04:	f1b9 0f00 	cmp.w	r9, #0
 800ec08:	dc38      	bgt.n	800ec7c <_dtoa_r+0x93c>
 800ec0a:	9b06      	ldr	r3, [sp, #24]
 800ec0c:	2b02      	cmp	r3, #2
 800ec0e:	dd35      	ble.n	800ec7c <_dtoa_r+0x93c>
 800ec10:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec14:	9b02      	ldr	r3, [sp, #8]
 800ec16:	b963      	cbnz	r3, 800ec32 <_dtoa_r+0x8f2>
 800ec18:	4639      	mov	r1, r7
 800ec1a:	2205      	movs	r2, #5
 800ec1c:	4620      	mov	r0, r4
 800ec1e:	f000 f9b3 	bl	800ef88 <__multadd>
 800ec22:	4601      	mov	r1, r0
 800ec24:	4607      	mov	r7, r0
 800ec26:	9804      	ldr	r0, [sp, #16]
 800ec28:	f000 fb78 	bl	800f31c <__mcmp>
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	f73f adcc 	bgt.w	800e7ca <_dtoa_r+0x48a>
 800ec32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ec34:	465d      	mov	r5, fp
 800ec36:	ea6f 0a03 	mvn.w	sl, r3
 800ec3a:	f04f 0900 	mov.w	r9, #0
 800ec3e:	4639      	mov	r1, r7
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 f98a 	bl	800ef5a <_Bfree>
 800ec46:	2e00      	cmp	r6, #0
 800ec48:	f43f aeb7 	beq.w	800e9ba <_dtoa_r+0x67a>
 800ec4c:	f1b9 0f00 	cmp.w	r9, #0
 800ec50:	d005      	beq.n	800ec5e <_dtoa_r+0x91e>
 800ec52:	45b1      	cmp	r9, r6
 800ec54:	d003      	beq.n	800ec5e <_dtoa_r+0x91e>
 800ec56:	4649      	mov	r1, r9
 800ec58:	4620      	mov	r0, r4
 800ec5a:	f000 f97e 	bl	800ef5a <_Bfree>
 800ec5e:	4631      	mov	r1, r6
 800ec60:	4620      	mov	r0, r4
 800ec62:	f000 f97a 	bl	800ef5a <_Bfree>
 800ec66:	e6a8      	b.n	800e9ba <_dtoa_r+0x67a>
 800ec68:	2700      	movs	r7, #0
 800ec6a:	463e      	mov	r6, r7
 800ec6c:	e7e1      	b.n	800ec32 <_dtoa_r+0x8f2>
 800ec6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ec72:	463e      	mov	r6, r7
 800ec74:	e5a9      	b.n	800e7ca <_dtoa_r+0x48a>
 800ec76:	bf00      	nop
 800ec78:	40240000 	.word	0x40240000
 800ec7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec7e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	f000 80fa 	beq.w	800ee7c <_dtoa_r+0xb3c>
 800ec88:	2d00      	cmp	r5, #0
 800ec8a:	dd05      	ble.n	800ec98 <_dtoa_r+0x958>
 800ec8c:	4631      	mov	r1, r6
 800ec8e:	462a      	mov	r2, r5
 800ec90:	4620      	mov	r0, r4
 800ec92:	f000 faef 	bl	800f274 <__lshift>
 800ec96:	4606      	mov	r6, r0
 800ec98:	9b07      	ldr	r3, [sp, #28]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d04c      	beq.n	800ed38 <_dtoa_r+0x9f8>
 800ec9e:	6871      	ldr	r1, [r6, #4]
 800eca0:	4620      	mov	r0, r4
 800eca2:	f000 f926 	bl	800eef2 <_Balloc>
 800eca6:	6932      	ldr	r2, [r6, #16]
 800eca8:	3202      	adds	r2, #2
 800ecaa:	4605      	mov	r5, r0
 800ecac:	0092      	lsls	r2, r2, #2
 800ecae:	f106 010c 	add.w	r1, r6, #12
 800ecb2:	300c      	adds	r0, #12
 800ecb4:	f000 f912 	bl	800eedc <memcpy>
 800ecb8:	2201      	movs	r2, #1
 800ecba:	4629      	mov	r1, r5
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	f000 fad9 	bl	800f274 <__lshift>
 800ecc2:	9b00      	ldr	r3, [sp, #0]
 800ecc4:	f8cd b014 	str.w	fp, [sp, #20]
 800ecc8:	f003 0301 	and.w	r3, r3, #1
 800eccc:	46b1      	mov	r9, r6
 800ecce:	9307      	str	r3, [sp, #28]
 800ecd0:	4606      	mov	r6, r0
 800ecd2:	4639      	mov	r1, r7
 800ecd4:	9804      	ldr	r0, [sp, #16]
 800ecd6:	f7ff faa4 	bl	800e222 <quorem>
 800ecda:	4649      	mov	r1, r9
 800ecdc:	4605      	mov	r5, r0
 800ecde:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ece2:	9804      	ldr	r0, [sp, #16]
 800ece4:	f000 fb1a 	bl	800f31c <__mcmp>
 800ece8:	4632      	mov	r2, r6
 800ecea:	9000      	str	r0, [sp, #0]
 800ecec:	4639      	mov	r1, r7
 800ecee:	4620      	mov	r0, r4
 800ecf0:	f000 fb2e 	bl	800f350 <__mdiff>
 800ecf4:	68c3      	ldr	r3, [r0, #12]
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	bb03      	cbnz	r3, 800ed3c <_dtoa_r+0x9fc>
 800ecfa:	4601      	mov	r1, r0
 800ecfc:	9008      	str	r0, [sp, #32]
 800ecfe:	9804      	ldr	r0, [sp, #16]
 800ed00:	f000 fb0c 	bl	800f31c <__mcmp>
 800ed04:	9a08      	ldr	r2, [sp, #32]
 800ed06:	4603      	mov	r3, r0
 800ed08:	4611      	mov	r1, r2
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	9308      	str	r3, [sp, #32]
 800ed0e:	f000 f924 	bl	800ef5a <_Bfree>
 800ed12:	9b08      	ldr	r3, [sp, #32]
 800ed14:	b9a3      	cbnz	r3, 800ed40 <_dtoa_r+0xa00>
 800ed16:	9a06      	ldr	r2, [sp, #24]
 800ed18:	b992      	cbnz	r2, 800ed40 <_dtoa_r+0xa00>
 800ed1a:	9a07      	ldr	r2, [sp, #28]
 800ed1c:	b982      	cbnz	r2, 800ed40 <_dtoa_r+0xa00>
 800ed1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed22:	d029      	beq.n	800ed78 <_dtoa_r+0xa38>
 800ed24:	9b00      	ldr	r3, [sp, #0]
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	dd01      	ble.n	800ed2e <_dtoa_r+0x9ee>
 800ed2a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800ed2e:	9b05      	ldr	r3, [sp, #20]
 800ed30:	1c5d      	adds	r5, r3, #1
 800ed32:	f883 8000 	strb.w	r8, [r3]
 800ed36:	e782      	b.n	800ec3e <_dtoa_r+0x8fe>
 800ed38:	4630      	mov	r0, r6
 800ed3a:	e7c2      	b.n	800ecc2 <_dtoa_r+0x982>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e7e3      	b.n	800ed08 <_dtoa_r+0x9c8>
 800ed40:	9a00      	ldr	r2, [sp, #0]
 800ed42:	2a00      	cmp	r2, #0
 800ed44:	db04      	blt.n	800ed50 <_dtoa_r+0xa10>
 800ed46:	d125      	bne.n	800ed94 <_dtoa_r+0xa54>
 800ed48:	9a06      	ldr	r2, [sp, #24]
 800ed4a:	bb1a      	cbnz	r2, 800ed94 <_dtoa_r+0xa54>
 800ed4c:	9a07      	ldr	r2, [sp, #28]
 800ed4e:	bb0a      	cbnz	r2, 800ed94 <_dtoa_r+0xa54>
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	ddec      	ble.n	800ed2e <_dtoa_r+0x9ee>
 800ed54:	2201      	movs	r2, #1
 800ed56:	9904      	ldr	r1, [sp, #16]
 800ed58:	4620      	mov	r0, r4
 800ed5a:	f000 fa8b 	bl	800f274 <__lshift>
 800ed5e:	4639      	mov	r1, r7
 800ed60:	9004      	str	r0, [sp, #16]
 800ed62:	f000 fadb 	bl	800f31c <__mcmp>
 800ed66:	2800      	cmp	r0, #0
 800ed68:	dc03      	bgt.n	800ed72 <_dtoa_r+0xa32>
 800ed6a:	d1e0      	bne.n	800ed2e <_dtoa_r+0x9ee>
 800ed6c:	f018 0f01 	tst.w	r8, #1
 800ed70:	d0dd      	beq.n	800ed2e <_dtoa_r+0x9ee>
 800ed72:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800ed76:	d1d8      	bne.n	800ed2a <_dtoa_r+0x9ea>
 800ed78:	9b05      	ldr	r3, [sp, #20]
 800ed7a:	9a05      	ldr	r2, [sp, #20]
 800ed7c:	1c5d      	adds	r5, r3, #1
 800ed7e:	2339      	movs	r3, #57	; 0x39
 800ed80:	7013      	strb	r3, [r2, #0]
 800ed82:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed86:	2b39      	cmp	r3, #57	; 0x39
 800ed88:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ed8c:	d04f      	beq.n	800ee2e <_dtoa_r+0xaee>
 800ed8e:	3301      	adds	r3, #1
 800ed90:	7013      	strb	r3, [r2, #0]
 800ed92:	e754      	b.n	800ec3e <_dtoa_r+0x8fe>
 800ed94:	9a05      	ldr	r2, [sp, #20]
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	f102 0501 	add.w	r5, r2, #1
 800ed9c:	dd06      	ble.n	800edac <_dtoa_r+0xa6c>
 800ed9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800eda2:	d0e9      	beq.n	800ed78 <_dtoa_r+0xa38>
 800eda4:	f108 0801 	add.w	r8, r8, #1
 800eda8:	9b05      	ldr	r3, [sp, #20]
 800edaa:	e7c2      	b.n	800ed32 <_dtoa_r+0x9f2>
 800edac:	9a02      	ldr	r2, [sp, #8]
 800edae:	f805 8c01 	strb.w	r8, [r5, #-1]
 800edb2:	eba5 030b 	sub.w	r3, r5, fp
 800edb6:	4293      	cmp	r3, r2
 800edb8:	d021      	beq.n	800edfe <_dtoa_r+0xabe>
 800edba:	2300      	movs	r3, #0
 800edbc:	220a      	movs	r2, #10
 800edbe:	9904      	ldr	r1, [sp, #16]
 800edc0:	4620      	mov	r0, r4
 800edc2:	f000 f8e1 	bl	800ef88 <__multadd>
 800edc6:	45b1      	cmp	r9, r6
 800edc8:	9004      	str	r0, [sp, #16]
 800edca:	f04f 0300 	mov.w	r3, #0
 800edce:	f04f 020a 	mov.w	r2, #10
 800edd2:	4649      	mov	r1, r9
 800edd4:	4620      	mov	r0, r4
 800edd6:	d105      	bne.n	800ede4 <_dtoa_r+0xaa4>
 800edd8:	f000 f8d6 	bl	800ef88 <__multadd>
 800eddc:	4681      	mov	r9, r0
 800edde:	4606      	mov	r6, r0
 800ede0:	9505      	str	r5, [sp, #20]
 800ede2:	e776      	b.n	800ecd2 <_dtoa_r+0x992>
 800ede4:	f000 f8d0 	bl	800ef88 <__multadd>
 800ede8:	4631      	mov	r1, r6
 800edea:	4681      	mov	r9, r0
 800edec:	2300      	movs	r3, #0
 800edee:	220a      	movs	r2, #10
 800edf0:	4620      	mov	r0, r4
 800edf2:	f000 f8c9 	bl	800ef88 <__multadd>
 800edf6:	4606      	mov	r6, r0
 800edf8:	e7f2      	b.n	800ede0 <_dtoa_r+0xaa0>
 800edfa:	f04f 0900 	mov.w	r9, #0
 800edfe:	2201      	movs	r2, #1
 800ee00:	9904      	ldr	r1, [sp, #16]
 800ee02:	4620      	mov	r0, r4
 800ee04:	f000 fa36 	bl	800f274 <__lshift>
 800ee08:	4639      	mov	r1, r7
 800ee0a:	9004      	str	r0, [sp, #16]
 800ee0c:	f000 fa86 	bl	800f31c <__mcmp>
 800ee10:	2800      	cmp	r0, #0
 800ee12:	dcb6      	bgt.n	800ed82 <_dtoa_r+0xa42>
 800ee14:	d102      	bne.n	800ee1c <_dtoa_r+0xadc>
 800ee16:	f018 0f01 	tst.w	r8, #1
 800ee1a:	d1b2      	bne.n	800ed82 <_dtoa_r+0xa42>
 800ee1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee20:	2b30      	cmp	r3, #48	; 0x30
 800ee22:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ee26:	f47f af0a 	bne.w	800ec3e <_dtoa_r+0x8fe>
 800ee2a:	4615      	mov	r5, r2
 800ee2c:	e7f6      	b.n	800ee1c <_dtoa_r+0xadc>
 800ee2e:	4593      	cmp	fp, r2
 800ee30:	d105      	bne.n	800ee3e <_dtoa_r+0xafe>
 800ee32:	2331      	movs	r3, #49	; 0x31
 800ee34:	f10a 0a01 	add.w	sl, sl, #1
 800ee38:	f88b 3000 	strb.w	r3, [fp]
 800ee3c:	e6ff      	b.n	800ec3e <_dtoa_r+0x8fe>
 800ee3e:	4615      	mov	r5, r2
 800ee40:	e79f      	b.n	800ed82 <_dtoa_r+0xa42>
 800ee42:	f8df b064 	ldr.w	fp, [pc, #100]	; 800eea8 <_dtoa_r+0xb68>
 800ee46:	e007      	b.n	800ee58 <_dtoa_r+0xb18>
 800ee48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee4a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800eeac <_dtoa_r+0xb6c>
 800ee4e:	b11b      	cbz	r3, 800ee58 <_dtoa_r+0xb18>
 800ee50:	f10b 0308 	add.w	r3, fp, #8
 800ee54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ee56:	6013      	str	r3, [r2, #0]
 800ee58:	4658      	mov	r0, fp
 800ee5a:	b017      	add	sp, #92	; 0x5c
 800ee5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee60:	9b06      	ldr	r3, [sp, #24]
 800ee62:	2b01      	cmp	r3, #1
 800ee64:	f77f ae35 	ble.w	800ead2 <_dtoa_r+0x792>
 800ee68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ee6a:	9307      	str	r3, [sp, #28]
 800ee6c:	e649      	b.n	800eb02 <_dtoa_r+0x7c2>
 800ee6e:	9b02      	ldr	r3, [sp, #8]
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	dc03      	bgt.n	800ee7c <_dtoa_r+0xb3c>
 800ee74:	9b06      	ldr	r3, [sp, #24]
 800ee76:	2b02      	cmp	r3, #2
 800ee78:	f73f aecc 	bgt.w	800ec14 <_dtoa_r+0x8d4>
 800ee7c:	465d      	mov	r5, fp
 800ee7e:	4639      	mov	r1, r7
 800ee80:	9804      	ldr	r0, [sp, #16]
 800ee82:	f7ff f9ce 	bl	800e222 <quorem>
 800ee86:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ee8a:	f805 8b01 	strb.w	r8, [r5], #1
 800ee8e:	9a02      	ldr	r2, [sp, #8]
 800ee90:	eba5 030b 	sub.w	r3, r5, fp
 800ee94:	429a      	cmp	r2, r3
 800ee96:	ddb0      	ble.n	800edfa <_dtoa_r+0xaba>
 800ee98:	2300      	movs	r3, #0
 800ee9a:	220a      	movs	r2, #10
 800ee9c:	9904      	ldr	r1, [sp, #16]
 800ee9e:	4620      	mov	r0, r4
 800eea0:	f000 f872 	bl	800ef88 <__multadd>
 800eea4:	9004      	str	r0, [sp, #16]
 800eea6:	e7ea      	b.n	800ee7e <_dtoa_r+0xb3e>
 800eea8:	08010f80 	.word	0x08010f80
 800eeac:	08010fa4 	.word	0x08010fa4

0800eeb0 <_localeconv_r>:
 800eeb0:	4b04      	ldr	r3, [pc, #16]	; (800eec4 <_localeconv_r+0x14>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	6a18      	ldr	r0, [r3, #32]
 800eeb6:	4b04      	ldr	r3, [pc, #16]	; (800eec8 <_localeconv_r+0x18>)
 800eeb8:	2800      	cmp	r0, #0
 800eeba:	bf08      	it	eq
 800eebc:	4618      	moveq	r0, r3
 800eebe:	30f0      	adds	r0, #240	; 0xf0
 800eec0:	4770      	bx	lr
 800eec2:	bf00      	nop
 800eec4:	2000003c 	.word	0x2000003c
 800eec8:	200000a0 	.word	0x200000a0

0800eecc <malloc>:
 800eecc:	4b02      	ldr	r3, [pc, #8]	; (800eed8 <malloc+0xc>)
 800eece:	4601      	mov	r1, r0
 800eed0:	6818      	ldr	r0, [r3, #0]
 800eed2:	f000 bb45 	b.w	800f560 <_malloc_r>
 800eed6:	bf00      	nop
 800eed8:	2000003c 	.word	0x2000003c

0800eedc <memcpy>:
 800eedc:	b510      	push	{r4, lr}
 800eede:	1e43      	subs	r3, r0, #1
 800eee0:	440a      	add	r2, r1
 800eee2:	4291      	cmp	r1, r2
 800eee4:	d100      	bne.n	800eee8 <memcpy+0xc>
 800eee6:	bd10      	pop	{r4, pc}
 800eee8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eeec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eef0:	e7f7      	b.n	800eee2 <memcpy+0x6>

0800eef2 <_Balloc>:
 800eef2:	b570      	push	{r4, r5, r6, lr}
 800eef4:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800eef6:	4604      	mov	r4, r0
 800eef8:	460e      	mov	r6, r1
 800eefa:	b93d      	cbnz	r5, 800ef0c <_Balloc+0x1a>
 800eefc:	2010      	movs	r0, #16
 800eefe:	f7ff ffe5 	bl	800eecc <malloc>
 800ef02:	6260      	str	r0, [r4, #36]	; 0x24
 800ef04:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ef08:	6005      	str	r5, [r0, #0]
 800ef0a:	60c5      	str	r5, [r0, #12]
 800ef0c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ef0e:	68eb      	ldr	r3, [r5, #12]
 800ef10:	b183      	cbz	r3, 800ef34 <_Balloc+0x42>
 800ef12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ef1a:	b9b8      	cbnz	r0, 800ef4c <_Balloc+0x5a>
 800ef1c:	2101      	movs	r1, #1
 800ef1e:	fa01 f506 	lsl.w	r5, r1, r6
 800ef22:	1d6a      	adds	r2, r5, #5
 800ef24:	0092      	lsls	r2, r2, #2
 800ef26:	4620      	mov	r0, r4
 800ef28:	f000 fabe 	bl	800f4a8 <_calloc_r>
 800ef2c:	b160      	cbz	r0, 800ef48 <_Balloc+0x56>
 800ef2e:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800ef32:	e00e      	b.n	800ef52 <_Balloc+0x60>
 800ef34:	2221      	movs	r2, #33	; 0x21
 800ef36:	2104      	movs	r1, #4
 800ef38:	4620      	mov	r0, r4
 800ef3a:	f000 fab5 	bl	800f4a8 <_calloc_r>
 800ef3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ef40:	60e8      	str	r0, [r5, #12]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d1e4      	bne.n	800ef12 <_Balloc+0x20>
 800ef48:	2000      	movs	r0, #0
 800ef4a:	bd70      	pop	{r4, r5, r6, pc}
 800ef4c:	6802      	ldr	r2, [r0, #0]
 800ef4e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800ef52:	2300      	movs	r3, #0
 800ef54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ef58:	e7f7      	b.n	800ef4a <_Balloc+0x58>

0800ef5a <_Bfree>:
 800ef5a:	b570      	push	{r4, r5, r6, lr}
 800ef5c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800ef5e:	4606      	mov	r6, r0
 800ef60:	460d      	mov	r5, r1
 800ef62:	b93c      	cbnz	r4, 800ef74 <_Bfree+0x1a>
 800ef64:	2010      	movs	r0, #16
 800ef66:	f7ff ffb1 	bl	800eecc <malloc>
 800ef6a:	6270      	str	r0, [r6, #36]	; 0x24
 800ef6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ef70:	6004      	str	r4, [r0, #0]
 800ef72:	60c4      	str	r4, [r0, #12]
 800ef74:	b13d      	cbz	r5, 800ef86 <_Bfree+0x2c>
 800ef76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800ef78:	686a      	ldr	r2, [r5, #4]
 800ef7a:	68db      	ldr	r3, [r3, #12]
 800ef7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ef80:	6029      	str	r1, [r5, #0]
 800ef82:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800ef86:	bd70      	pop	{r4, r5, r6, pc}

0800ef88 <__multadd>:
 800ef88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef8c:	690d      	ldr	r5, [r1, #16]
 800ef8e:	461f      	mov	r7, r3
 800ef90:	4606      	mov	r6, r0
 800ef92:	460c      	mov	r4, r1
 800ef94:	f101 0c14 	add.w	ip, r1, #20
 800ef98:	2300      	movs	r3, #0
 800ef9a:	f8dc 0000 	ldr.w	r0, [ip]
 800ef9e:	b281      	uxth	r1, r0
 800efa0:	fb02 7101 	mla	r1, r2, r1, r7
 800efa4:	0c0f      	lsrs	r7, r1, #16
 800efa6:	0c00      	lsrs	r0, r0, #16
 800efa8:	fb02 7000 	mla	r0, r2, r0, r7
 800efac:	b289      	uxth	r1, r1
 800efae:	3301      	adds	r3, #1
 800efb0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800efb4:	429d      	cmp	r5, r3
 800efb6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800efba:	f84c 1b04 	str.w	r1, [ip], #4
 800efbe:	dcec      	bgt.n	800ef9a <__multadd+0x12>
 800efc0:	b1d7      	cbz	r7, 800eff8 <__multadd+0x70>
 800efc2:	68a3      	ldr	r3, [r4, #8]
 800efc4:	42ab      	cmp	r3, r5
 800efc6:	dc12      	bgt.n	800efee <__multadd+0x66>
 800efc8:	6861      	ldr	r1, [r4, #4]
 800efca:	4630      	mov	r0, r6
 800efcc:	3101      	adds	r1, #1
 800efce:	f7ff ff90 	bl	800eef2 <_Balloc>
 800efd2:	6922      	ldr	r2, [r4, #16]
 800efd4:	3202      	adds	r2, #2
 800efd6:	f104 010c 	add.w	r1, r4, #12
 800efda:	4680      	mov	r8, r0
 800efdc:	0092      	lsls	r2, r2, #2
 800efde:	300c      	adds	r0, #12
 800efe0:	f7ff ff7c 	bl	800eedc <memcpy>
 800efe4:	4621      	mov	r1, r4
 800efe6:	4630      	mov	r0, r6
 800efe8:	f7ff ffb7 	bl	800ef5a <_Bfree>
 800efec:	4644      	mov	r4, r8
 800efee:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eff2:	3501      	adds	r5, #1
 800eff4:	615f      	str	r7, [r3, #20]
 800eff6:	6125      	str	r5, [r4, #16]
 800eff8:	4620      	mov	r0, r4
 800effa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800effe <__hi0bits>:
 800effe:	0c02      	lsrs	r2, r0, #16
 800f000:	0412      	lsls	r2, r2, #16
 800f002:	4603      	mov	r3, r0
 800f004:	b9b2      	cbnz	r2, 800f034 <__hi0bits+0x36>
 800f006:	0403      	lsls	r3, r0, #16
 800f008:	2010      	movs	r0, #16
 800f00a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f00e:	bf04      	itt	eq
 800f010:	021b      	lsleq	r3, r3, #8
 800f012:	3008      	addeq	r0, #8
 800f014:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f018:	bf04      	itt	eq
 800f01a:	011b      	lsleq	r3, r3, #4
 800f01c:	3004      	addeq	r0, #4
 800f01e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f022:	bf04      	itt	eq
 800f024:	009b      	lsleq	r3, r3, #2
 800f026:	3002      	addeq	r0, #2
 800f028:	2b00      	cmp	r3, #0
 800f02a:	db06      	blt.n	800f03a <__hi0bits+0x3c>
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	d503      	bpl.n	800f038 <__hi0bits+0x3a>
 800f030:	3001      	adds	r0, #1
 800f032:	4770      	bx	lr
 800f034:	2000      	movs	r0, #0
 800f036:	e7e8      	b.n	800f00a <__hi0bits+0xc>
 800f038:	2020      	movs	r0, #32
 800f03a:	4770      	bx	lr

0800f03c <__lo0bits>:
 800f03c:	6803      	ldr	r3, [r0, #0]
 800f03e:	f013 0207 	ands.w	r2, r3, #7
 800f042:	4601      	mov	r1, r0
 800f044:	d00b      	beq.n	800f05e <__lo0bits+0x22>
 800f046:	07da      	lsls	r2, r3, #31
 800f048:	d423      	bmi.n	800f092 <__lo0bits+0x56>
 800f04a:	0798      	lsls	r0, r3, #30
 800f04c:	bf49      	itett	mi
 800f04e:	085b      	lsrmi	r3, r3, #1
 800f050:	089b      	lsrpl	r3, r3, #2
 800f052:	2001      	movmi	r0, #1
 800f054:	600b      	strmi	r3, [r1, #0]
 800f056:	bf5c      	itt	pl
 800f058:	600b      	strpl	r3, [r1, #0]
 800f05a:	2002      	movpl	r0, #2
 800f05c:	4770      	bx	lr
 800f05e:	b298      	uxth	r0, r3
 800f060:	b9a8      	cbnz	r0, 800f08e <__lo0bits+0x52>
 800f062:	0c1b      	lsrs	r3, r3, #16
 800f064:	2010      	movs	r0, #16
 800f066:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f06a:	bf04      	itt	eq
 800f06c:	0a1b      	lsreq	r3, r3, #8
 800f06e:	3008      	addeq	r0, #8
 800f070:	071a      	lsls	r2, r3, #28
 800f072:	bf04      	itt	eq
 800f074:	091b      	lsreq	r3, r3, #4
 800f076:	3004      	addeq	r0, #4
 800f078:	079a      	lsls	r2, r3, #30
 800f07a:	bf04      	itt	eq
 800f07c:	089b      	lsreq	r3, r3, #2
 800f07e:	3002      	addeq	r0, #2
 800f080:	07da      	lsls	r2, r3, #31
 800f082:	d402      	bmi.n	800f08a <__lo0bits+0x4e>
 800f084:	085b      	lsrs	r3, r3, #1
 800f086:	d006      	beq.n	800f096 <__lo0bits+0x5a>
 800f088:	3001      	adds	r0, #1
 800f08a:	600b      	str	r3, [r1, #0]
 800f08c:	4770      	bx	lr
 800f08e:	4610      	mov	r0, r2
 800f090:	e7e9      	b.n	800f066 <__lo0bits+0x2a>
 800f092:	2000      	movs	r0, #0
 800f094:	4770      	bx	lr
 800f096:	2020      	movs	r0, #32
 800f098:	4770      	bx	lr

0800f09a <__i2b>:
 800f09a:	b510      	push	{r4, lr}
 800f09c:	460c      	mov	r4, r1
 800f09e:	2101      	movs	r1, #1
 800f0a0:	f7ff ff27 	bl	800eef2 <_Balloc>
 800f0a4:	2201      	movs	r2, #1
 800f0a6:	6144      	str	r4, [r0, #20]
 800f0a8:	6102      	str	r2, [r0, #16]
 800f0aa:	bd10      	pop	{r4, pc}

0800f0ac <__multiply>:
 800f0ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b0:	4614      	mov	r4, r2
 800f0b2:	690a      	ldr	r2, [r1, #16]
 800f0b4:	6923      	ldr	r3, [r4, #16]
 800f0b6:	429a      	cmp	r2, r3
 800f0b8:	bfb8      	it	lt
 800f0ba:	460b      	movlt	r3, r1
 800f0bc:	4688      	mov	r8, r1
 800f0be:	bfbc      	itt	lt
 800f0c0:	46a0      	movlt	r8, r4
 800f0c2:	461c      	movlt	r4, r3
 800f0c4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f0c8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f0cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f0d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f0d4:	eb07 0609 	add.w	r6, r7, r9
 800f0d8:	42b3      	cmp	r3, r6
 800f0da:	bfb8      	it	lt
 800f0dc:	3101      	addlt	r1, #1
 800f0de:	f7ff ff08 	bl	800eef2 <_Balloc>
 800f0e2:	f100 0514 	add.w	r5, r0, #20
 800f0e6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f0ea:	462b      	mov	r3, r5
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	4573      	cmp	r3, lr
 800f0f0:	d316      	bcc.n	800f120 <__multiply+0x74>
 800f0f2:	f104 0214 	add.w	r2, r4, #20
 800f0f6:	f108 0114 	add.w	r1, r8, #20
 800f0fa:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f0fe:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	9b00      	ldr	r3, [sp, #0]
 800f106:	9201      	str	r2, [sp, #4]
 800f108:	4293      	cmp	r3, r2
 800f10a:	d80c      	bhi.n	800f126 <__multiply+0x7a>
 800f10c:	2e00      	cmp	r6, #0
 800f10e:	dd03      	ble.n	800f118 <__multiply+0x6c>
 800f110:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f114:	2b00      	cmp	r3, #0
 800f116:	d05d      	beq.n	800f1d4 <__multiply+0x128>
 800f118:	6106      	str	r6, [r0, #16]
 800f11a:	b003      	add	sp, #12
 800f11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f120:	f843 2b04 	str.w	r2, [r3], #4
 800f124:	e7e3      	b.n	800f0ee <__multiply+0x42>
 800f126:	f8b2 b000 	ldrh.w	fp, [r2]
 800f12a:	f1bb 0f00 	cmp.w	fp, #0
 800f12e:	d023      	beq.n	800f178 <__multiply+0xcc>
 800f130:	4689      	mov	r9, r1
 800f132:	46ac      	mov	ip, r5
 800f134:	f04f 0800 	mov.w	r8, #0
 800f138:	f859 4b04 	ldr.w	r4, [r9], #4
 800f13c:	f8dc a000 	ldr.w	sl, [ip]
 800f140:	b2a3      	uxth	r3, r4
 800f142:	fa1f fa8a 	uxth.w	sl, sl
 800f146:	fb0b a303 	mla	r3, fp, r3, sl
 800f14a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f14e:	f8dc 4000 	ldr.w	r4, [ip]
 800f152:	4443      	add	r3, r8
 800f154:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f158:	fb0b 840a 	mla	r4, fp, sl, r8
 800f15c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f160:	46e2      	mov	sl, ip
 800f162:	b29b      	uxth	r3, r3
 800f164:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f168:	454f      	cmp	r7, r9
 800f16a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f16e:	f84a 3b04 	str.w	r3, [sl], #4
 800f172:	d82b      	bhi.n	800f1cc <__multiply+0x120>
 800f174:	f8cc 8004 	str.w	r8, [ip, #4]
 800f178:	9b01      	ldr	r3, [sp, #4]
 800f17a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f17e:	3204      	adds	r2, #4
 800f180:	f1ba 0f00 	cmp.w	sl, #0
 800f184:	d020      	beq.n	800f1c8 <__multiply+0x11c>
 800f186:	682b      	ldr	r3, [r5, #0]
 800f188:	4689      	mov	r9, r1
 800f18a:	46a8      	mov	r8, r5
 800f18c:	f04f 0b00 	mov.w	fp, #0
 800f190:	f8b9 c000 	ldrh.w	ip, [r9]
 800f194:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f198:	fb0a 440c 	mla	r4, sl, ip, r4
 800f19c:	445c      	add	r4, fp
 800f19e:	46c4      	mov	ip, r8
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f1a6:	f84c 3b04 	str.w	r3, [ip], #4
 800f1aa:	f859 3b04 	ldr.w	r3, [r9], #4
 800f1ae:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f1b2:	0c1b      	lsrs	r3, r3, #16
 800f1b4:	fb0a b303 	mla	r3, sl, r3, fp
 800f1b8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f1bc:	454f      	cmp	r7, r9
 800f1be:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f1c2:	d805      	bhi.n	800f1d0 <__multiply+0x124>
 800f1c4:	f8c8 3004 	str.w	r3, [r8, #4]
 800f1c8:	3504      	adds	r5, #4
 800f1ca:	e79b      	b.n	800f104 <__multiply+0x58>
 800f1cc:	46d4      	mov	ip, sl
 800f1ce:	e7b3      	b.n	800f138 <__multiply+0x8c>
 800f1d0:	46e0      	mov	r8, ip
 800f1d2:	e7dd      	b.n	800f190 <__multiply+0xe4>
 800f1d4:	3e01      	subs	r6, #1
 800f1d6:	e799      	b.n	800f10c <__multiply+0x60>

0800f1d8 <__pow5mult>:
 800f1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1dc:	4615      	mov	r5, r2
 800f1de:	f012 0203 	ands.w	r2, r2, #3
 800f1e2:	4606      	mov	r6, r0
 800f1e4:	460f      	mov	r7, r1
 800f1e6:	d007      	beq.n	800f1f8 <__pow5mult+0x20>
 800f1e8:	3a01      	subs	r2, #1
 800f1ea:	4c21      	ldr	r4, [pc, #132]	; (800f270 <__pow5mult+0x98>)
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f1f2:	f7ff fec9 	bl	800ef88 <__multadd>
 800f1f6:	4607      	mov	r7, r0
 800f1f8:	10ad      	asrs	r5, r5, #2
 800f1fa:	d035      	beq.n	800f268 <__pow5mult+0x90>
 800f1fc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f1fe:	b93c      	cbnz	r4, 800f210 <__pow5mult+0x38>
 800f200:	2010      	movs	r0, #16
 800f202:	f7ff fe63 	bl	800eecc <malloc>
 800f206:	6270      	str	r0, [r6, #36]	; 0x24
 800f208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f20c:	6004      	str	r4, [r0, #0]
 800f20e:	60c4      	str	r4, [r0, #12]
 800f210:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f214:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f218:	b94c      	cbnz	r4, 800f22e <__pow5mult+0x56>
 800f21a:	f240 2171 	movw	r1, #625	; 0x271
 800f21e:	4630      	mov	r0, r6
 800f220:	f7ff ff3b 	bl	800f09a <__i2b>
 800f224:	2300      	movs	r3, #0
 800f226:	f8c8 0008 	str.w	r0, [r8, #8]
 800f22a:	4604      	mov	r4, r0
 800f22c:	6003      	str	r3, [r0, #0]
 800f22e:	f04f 0800 	mov.w	r8, #0
 800f232:	07eb      	lsls	r3, r5, #31
 800f234:	d50a      	bpl.n	800f24c <__pow5mult+0x74>
 800f236:	4639      	mov	r1, r7
 800f238:	4622      	mov	r2, r4
 800f23a:	4630      	mov	r0, r6
 800f23c:	f7ff ff36 	bl	800f0ac <__multiply>
 800f240:	4639      	mov	r1, r7
 800f242:	4681      	mov	r9, r0
 800f244:	4630      	mov	r0, r6
 800f246:	f7ff fe88 	bl	800ef5a <_Bfree>
 800f24a:	464f      	mov	r7, r9
 800f24c:	106d      	asrs	r5, r5, #1
 800f24e:	d00b      	beq.n	800f268 <__pow5mult+0x90>
 800f250:	6820      	ldr	r0, [r4, #0]
 800f252:	b938      	cbnz	r0, 800f264 <__pow5mult+0x8c>
 800f254:	4622      	mov	r2, r4
 800f256:	4621      	mov	r1, r4
 800f258:	4630      	mov	r0, r6
 800f25a:	f7ff ff27 	bl	800f0ac <__multiply>
 800f25e:	6020      	str	r0, [r4, #0]
 800f260:	f8c0 8000 	str.w	r8, [r0]
 800f264:	4604      	mov	r4, r0
 800f266:	e7e4      	b.n	800f232 <__pow5mult+0x5a>
 800f268:	4638      	mov	r0, r7
 800f26a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f26e:	bf00      	nop
 800f270:	080110a8 	.word	0x080110a8

0800f274 <__lshift>:
 800f274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f278:	460c      	mov	r4, r1
 800f27a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f27e:	6923      	ldr	r3, [r4, #16]
 800f280:	6849      	ldr	r1, [r1, #4]
 800f282:	eb0a 0903 	add.w	r9, sl, r3
 800f286:	68a3      	ldr	r3, [r4, #8]
 800f288:	4607      	mov	r7, r0
 800f28a:	4616      	mov	r6, r2
 800f28c:	f109 0501 	add.w	r5, r9, #1
 800f290:	42ab      	cmp	r3, r5
 800f292:	db32      	blt.n	800f2fa <__lshift+0x86>
 800f294:	4638      	mov	r0, r7
 800f296:	f7ff fe2c 	bl	800eef2 <_Balloc>
 800f29a:	2300      	movs	r3, #0
 800f29c:	4680      	mov	r8, r0
 800f29e:	f100 0114 	add.w	r1, r0, #20
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	4553      	cmp	r3, sl
 800f2a6:	db2b      	blt.n	800f300 <__lshift+0x8c>
 800f2a8:	6920      	ldr	r0, [r4, #16]
 800f2aa:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f2ae:	f104 0314 	add.w	r3, r4, #20
 800f2b2:	f016 021f 	ands.w	r2, r6, #31
 800f2b6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f2ba:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f2be:	d025      	beq.n	800f30c <__lshift+0x98>
 800f2c0:	f1c2 0e20 	rsb	lr, r2, #32
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	681e      	ldr	r6, [r3, #0]
 800f2c8:	468a      	mov	sl, r1
 800f2ca:	4096      	lsls	r6, r2
 800f2cc:	4330      	orrs	r0, r6
 800f2ce:	f84a 0b04 	str.w	r0, [sl], #4
 800f2d2:	f853 0b04 	ldr.w	r0, [r3], #4
 800f2d6:	459c      	cmp	ip, r3
 800f2d8:	fa20 f00e 	lsr.w	r0, r0, lr
 800f2dc:	d814      	bhi.n	800f308 <__lshift+0x94>
 800f2de:	6048      	str	r0, [r1, #4]
 800f2e0:	b108      	cbz	r0, 800f2e6 <__lshift+0x72>
 800f2e2:	f109 0502 	add.w	r5, r9, #2
 800f2e6:	3d01      	subs	r5, #1
 800f2e8:	4638      	mov	r0, r7
 800f2ea:	f8c8 5010 	str.w	r5, [r8, #16]
 800f2ee:	4621      	mov	r1, r4
 800f2f0:	f7ff fe33 	bl	800ef5a <_Bfree>
 800f2f4:	4640      	mov	r0, r8
 800f2f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2fa:	3101      	adds	r1, #1
 800f2fc:	005b      	lsls	r3, r3, #1
 800f2fe:	e7c7      	b.n	800f290 <__lshift+0x1c>
 800f300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800f304:	3301      	adds	r3, #1
 800f306:	e7cd      	b.n	800f2a4 <__lshift+0x30>
 800f308:	4651      	mov	r1, sl
 800f30a:	e7dc      	b.n	800f2c6 <__lshift+0x52>
 800f30c:	3904      	subs	r1, #4
 800f30e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f312:	f841 2f04 	str.w	r2, [r1, #4]!
 800f316:	459c      	cmp	ip, r3
 800f318:	d8f9      	bhi.n	800f30e <__lshift+0x9a>
 800f31a:	e7e4      	b.n	800f2e6 <__lshift+0x72>

0800f31c <__mcmp>:
 800f31c:	6903      	ldr	r3, [r0, #16]
 800f31e:	690a      	ldr	r2, [r1, #16]
 800f320:	1a9b      	subs	r3, r3, r2
 800f322:	b530      	push	{r4, r5, lr}
 800f324:	d10c      	bne.n	800f340 <__mcmp+0x24>
 800f326:	0092      	lsls	r2, r2, #2
 800f328:	3014      	adds	r0, #20
 800f32a:	3114      	adds	r1, #20
 800f32c:	1884      	adds	r4, r0, r2
 800f32e:	4411      	add	r1, r2
 800f330:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f334:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f338:	4295      	cmp	r5, r2
 800f33a:	d003      	beq.n	800f344 <__mcmp+0x28>
 800f33c:	d305      	bcc.n	800f34a <__mcmp+0x2e>
 800f33e:	2301      	movs	r3, #1
 800f340:	4618      	mov	r0, r3
 800f342:	bd30      	pop	{r4, r5, pc}
 800f344:	42a0      	cmp	r0, r4
 800f346:	d3f3      	bcc.n	800f330 <__mcmp+0x14>
 800f348:	e7fa      	b.n	800f340 <__mcmp+0x24>
 800f34a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f34e:	e7f7      	b.n	800f340 <__mcmp+0x24>

0800f350 <__mdiff>:
 800f350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f354:	460d      	mov	r5, r1
 800f356:	4607      	mov	r7, r0
 800f358:	4611      	mov	r1, r2
 800f35a:	4628      	mov	r0, r5
 800f35c:	4614      	mov	r4, r2
 800f35e:	f7ff ffdd 	bl	800f31c <__mcmp>
 800f362:	1e06      	subs	r6, r0, #0
 800f364:	d108      	bne.n	800f378 <__mdiff+0x28>
 800f366:	4631      	mov	r1, r6
 800f368:	4638      	mov	r0, r7
 800f36a:	f7ff fdc2 	bl	800eef2 <_Balloc>
 800f36e:	2301      	movs	r3, #1
 800f370:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800f374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f378:	bfa4      	itt	ge
 800f37a:	4623      	movge	r3, r4
 800f37c:	462c      	movge	r4, r5
 800f37e:	4638      	mov	r0, r7
 800f380:	6861      	ldr	r1, [r4, #4]
 800f382:	bfa6      	itte	ge
 800f384:	461d      	movge	r5, r3
 800f386:	2600      	movge	r6, #0
 800f388:	2601      	movlt	r6, #1
 800f38a:	f7ff fdb2 	bl	800eef2 <_Balloc>
 800f38e:	692b      	ldr	r3, [r5, #16]
 800f390:	60c6      	str	r6, [r0, #12]
 800f392:	6926      	ldr	r6, [r4, #16]
 800f394:	f105 0914 	add.w	r9, r5, #20
 800f398:	f104 0214 	add.w	r2, r4, #20
 800f39c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800f3a0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800f3a4:	f100 0514 	add.w	r5, r0, #20
 800f3a8:	f04f 0e00 	mov.w	lr, #0
 800f3ac:	f852 ab04 	ldr.w	sl, [r2], #4
 800f3b0:	f859 4b04 	ldr.w	r4, [r9], #4
 800f3b4:	fa1e f18a 	uxtah	r1, lr, sl
 800f3b8:	b2a3      	uxth	r3, r4
 800f3ba:	1ac9      	subs	r1, r1, r3
 800f3bc:	0c23      	lsrs	r3, r4, #16
 800f3be:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800f3c2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800f3c6:	b289      	uxth	r1, r1
 800f3c8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800f3cc:	45c8      	cmp	r8, r9
 800f3ce:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800f3d2:	4694      	mov	ip, r2
 800f3d4:	f845 3b04 	str.w	r3, [r5], #4
 800f3d8:	d8e8      	bhi.n	800f3ac <__mdiff+0x5c>
 800f3da:	45bc      	cmp	ip, r7
 800f3dc:	d304      	bcc.n	800f3e8 <__mdiff+0x98>
 800f3de:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800f3e2:	b183      	cbz	r3, 800f406 <__mdiff+0xb6>
 800f3e4:	6106      	str	r6, [r0, #16]
 800f3e6:	e7c5      	b.n	800f374 <__mdiff+0x24>
 800f3e8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800f3ec:	fa1e f381 	uxtah	r3, lr, r1
 800f3f0:	141a      	asrs	r2, r3, #16
 800f3f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f3fc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800f400:	f845 3b04 	str.w	r3, [r5], #4
 800f404:	e7e9      	b.n	800f3da <__mdiff+0x8a>
 800f406:	3e01      	subs	r6, #1
 800f408:	e7e9      	b.n	800f3de <__mdiff+0x8e>

0800f40a <__d2b>:
 800f40a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f40e:	460e      	mov	r6, r1
 800f410:	2101      	movs	r1, #1
 800f412:	ec59 8b10 	vmov	r8, r9, d0
 800f416:	4615      	mov	r5, r2
 800f418:	f7ff fd6b 	bl	800eef2 <_Balloc>
 800f41c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800f420:	4607      	mov	r7, r0
 800f422:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f426:	bb34      	cbnz	r4, 800f476 <__d2b+0x6c>
 800f428:	9301      	str	r3, [sp, #4]
 800f42a:	f1b8 0300 	subs.w	r3, r8, #0
 800f42e:	d027      	beq.n	800f480 <__d2b+0x76>
 800f430:	a802      	add	r0, sp, #8
 800f432:	f840 3d08 	str.w	r3, [r0, #-8]!
 800f436:	f7ff fe01 	bl	800f03c <__lo0bits>
 800f43a:	9900      	ldr	r1, [sp, #0]
 800f43c:	b1f0      	cbz	r0, 800f47c <__d2b+0x72>
 800f43e:	9a01      	ldr	r2, [sp, #4]
 800f440:	f1c0 0320 	rsb	r3, r0, #32
 800f444:	fa02 f303 	lsl.w	r3, r2, r3
 800f448:	430b      	orrs	r3, r1
 800f44a:	40c2      	lsrs	r2, r0
 800f44c:	617b      	str	r3, [r7, #20]
 800f44e:	9201      	str	r2, [sp, #4]
 800f450:	9b01      	ldr	r3, [sp, #4]
 800f452:	61bb      	str	r3, [r7, #24]
 800f454:	2b00      	cmp	r3, #0
 800f456:	bf14      	ite	ne
 800f458:	2102      	movne	r1, #2
 800f45a:	2101      	moveq	r1, #1
 800f45c:	6139      	str	r1, [r7, #16]
 800f45e:	b1c4      	cbz	r4, 800f492 <__d2b+0x88>
 800f460:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800f464:	4404      	add	r4, r0
 800f466:	6034      	str	r4, [r6, #0]
 800f468:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f46c:	6028      	str	r0, [r5, #0]
 800f46e:	4638      	mov	r0, r7
 800f470:	b003      	add	sp, #12
 800f472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f47a:	e7d5      	b.n	800f428 <__d2b+0x1e>
 800f47c:	6179      	str	r1, [r7, #20]
 800f47e:	e7e7      	b.n	800f450 <__d2b+0x46>
 800f480:	a801      	add	r0, sp, #4
 800f482:	f7ff fddb 	bl	800f03c <__lo0bits>
 800f486:	9b01      	ldr	r3, [sp, #4]
 800f488:	617b      	str	r3, [r7, #20]
 800f48a:	2101      	movs	r1, #1
 800f48c:	6139      	str	r1, [r7, #16]
 800f48e:	3020      	adds	r0, #32
 800f490:	e7e5      	b.n	800f45e <__d2b+0x54>
 800f492:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800f496:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f49a:	6030      	str	r0, [r6, #0]
 800f49c:	6918      	ldr	r0, [r3, #16]
 800f49e:	f7ff fdae 	bl	800effe <__hi0bits>
 800f4a2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800f4a6:	e7e1      	b.n	800f46c <__d2b+0x62>

0800f4a8 <_calloc_r>:
 800f4a8:	b538      	push	{r3, r4, r5, lr}
 800f4aa:	fb02 f401 	mul.w	r4, r2, r1
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	f000 f856 	bl	800f560 <_malloc_r>
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	b118      	cbz	r0, 800f4c0 <_calloc_r+0x18>
 800f4b8:	4622      	mov	r2, r4
 800f4ba:	2100      	movs	r1, #0
 800f4bc:	f7fe fa1e 	bl	800d8fc <memset>
 800f4c0:	4628      	mov	r0, r5
 800f4c2:	bd38      	pop	{r3, r4, r5, pc}

0800f4c4 <_free_r>:
 800f4c4:	b538      	push	{r3, r4, r5, lr}
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	2900      	cmp	r1, #0
 800f4ca:	d045      	beq.n	800f558 <_free_r+0x94>
 800f4cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f4d0:	1f0c      	subs	r4, r1, #4
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	bfb8      	it	lt
 800f4d6:	18e4      	addlt	r4, r4, r3
 800f4d8:	f000 fa29 	bl	800f92e <__malloc_lock>
 800f4dc:	4a1f      	ldr	r2, [pc, #124]	; (800f55c <_free_r+0x98>)
 800f4de:	6813      	ldr	r3, [r2, #0]
 800f4e0:	4610      	mov	r0, r2
 800f4e2:	b933      	cbnz	r3, 800f4f2 <_free_r+0x2e>
 800f4e4:	6063      	str	r3, [r4, #4]
 800f4e6:	6014      	str	r4, [r2, #0]
 800f4e8:	4628      	mov	r0, r5
 800f4ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4ee:	f000 ba1f 	b.w	800f930 <__malloc_unlock>
 800f4f2:	42a3      	cmp	r3, r4
 800f4f4:	d90c      	bls.n	800f510 <_free_r+0x4c>
 800f4f6:	6821      	ldr	r1, [r4, #0]
 800f4f8:	1862      	adds	r2, r4, r1
 800f4fa:	4293      	cmp	r3, r2
 800f4fc:	bf04      	itt	eq
 800f4fe:	681a      	ldreq	r2, [r3, #0]
 800f500:	685b      	ldreq	r3, [r3, #4]
 800f502:	6063      	str	r3, [r4, #4]
 800f504:	bf04      	itt	eq
 800f506:	1852      	addeq	r2, r2, r1
 800f508:	6022      	streq	r2, [r4, #0]
 800f50a:	6004      	str	r4, [r0, #0]
 800f50c:	e7ec      	b.n	800f4e8 <_free_r+0x24>
 800f50e:	4613      	mov	r3, r2
 800f510:	685a      	ldr	r2, [r3, #4]
 800f512:	b10a      	cbz	r2, 800f518 <_free_r+0x54>
 800f514:	42a2      	cmp	r2, r4
 800f516:	d9fa      	bls.n	800f50e <_free_r+0x4a>
 800f518:	6819      	ldr	r1, [r3, #0]
 800f51a:	1858      	adds	r0, r3, r1
 800f51c:	42a0      	cmp	r0, r4
 800f51e:	d10b      	bne.n	800f538 <_free_r+0x74>
 800f520:	6820      	ldr	r0, [r4, #0]
 800f522:	4401      	add	r1, r0
 800f524:	1858      	adds	r0, r3, r1
 800f526:	4282      	cmp	r2, r0
 800f528:	6019      	str	r1, [r3, #0]
 800f52a:	d1dd      	bne.n	800f4e8 <_free_r+0x24>
 800f52c:	6810      	ldr	r0, [r2, #0]
 800f52e:	6852      	ldr	r2, [r2, #4]
 800f530:	605a      	str	r2, [r3, #4]
 800f532:	4401      	add	r1, r0
 800f534:	6019      	str	r1, [r3, #0]
 800f536:	e7d7      	b.n	800f4e8 <_free_r+0x24>
 800f538:	d902      	bls.n	800f540 <_free_r+0x7c>
 800f53a:	230c      	movs	r3, #12
 800f53c:	602b      	str	r3, [r5, #0]
 800f53e:	e7d3      	b.n	800f4e8 <_free_r+0x24>
 800f540:	6820      	ldr	r0, [r4, #0]
 800f542:	1821      	adds	r1, r4, r0
 800f544:	428a      	cmp	r2, r1
 800f546:	bf04      	itt	eq
 800f548:	6811      	ldreq	r1, [r2, #0]
 800f54a:	6852      	ldreq	r2, [r2, #4]
 800f54c:	6062      	str	r2, [r4, #4]
 800f54e:	bf04      	itt	eq
 800f550:	1809      	addeq	r1, r1, r0
 800f552:	6021      	streq	r1, [r4, #0]
 800f554:	605c      	str	r4, [r3, #4]
 800f556:	e7c7      	b.n	800f4e8 <_free_r+0x24>
 800f558:	bd38      	pop	{r3, r4, r5, pc}
 800f55a:	bf00      	nop
 800f55c:	2000028c 	.word	0x2000028c

0800f560 <_malloc_r>:
 800f560:	b570      	push	{r4, r5, r6, lr}
 800f562:	1ccd      	adds	r5, r1, #3
 800f564:	f025 0503 	bic.w	r5, r5, #3
 800f568:	3508      	adds	r5, #8
 800f56a:	2d0c      	cmp	r5, #12
 800f56c:	bf38      	it	cc
 800f56e:	250c      	movcc	r5, #12
 800f570:	2d00      	cmp	r5, #0
 800f572:	4606      	mov	r6, r0
 800f574:	db01      	blt.n	800f57a <_malloc_r+0x1a>
 800f576:	42a9      	cmp	r1, r5
 800f578:	d903      	bls.n	800f582 <_malloc_r+0x22>
 800f57a:	230c      	movs	r3, #12
 800f57c:	6033      	str	r3, [r6, #0]
 800f57e:	2000      	movs	r0, #0
 800f580:	bd70      	pop	{r4, r5, r6, pc}
 800f582:	f000 f9d4 	bl	800f92e <__malloc_lock>
 800f586:	4a21      	ldr	r2, [pc, #132]	; (800f60c <_malloc_r+0xac>)
 800f588:	6814      	ldr	r4, [r2, #0]
 800f58a:	4621      	mov	r1, r4
 800f58c:	b991      	cbnz	r1, 800f5b4 <_malloc_r+0x54>
 800f58e:	4c20      	ldr	r4, [pc, #128]	; (800f610 <_malloc_r+0xb0>)
 800f590:	6823      	ldr	r3, [r4, #0]
 800f592:	b91b      	cbnz	r3, 800f59c <_malloc_r+0x3c>
 800f594:	4630      	mov	r0, r6
 800f596:	f000 f98f 	bl	800f8b8 <_sbrk_r>
 800f59a:	6020      	str	r0, [r4, #0]
 800f59c:	4629      	mov	r1, r5
 800f59e:	4630      	mov	r0, r6
 800f5a0:	f000 f98a 	bl	800f8b8 <_sbrk_r>
 800f5a4:	1c43      	adds	r3, r0, #1
 800f5a6:	d124      	bne.n	800f5f2 <_malloc_r+0x92>
 800f5a8:	230c      	movs	r3, #12
 800f5aa:	6033      	str	r3, [r6, #0]
 800f5ac:	4630      	mov	r0, r6
 800f5ae:	f000 f9bf 	bl	800f930 <__malloc_unlock>
 800f5b2:	e7e4      	b.n	800f57e <_malloc_r+0x1e>
 800f5b4:	680b      	ldr	r3, [r1, #0]
 800f5b6:	1b5b      	subs	r3, r3, r5
 800f5b8:	d418      	bmi.n	800f5ec <_malloc_r+0x8c>
 800f5ba:	2b0b      	cmp	r3, #11
 800f5bc:	d90f      	bls.n	800f5de <_malloc_r+0x7e>
 800f5be:	600b      	str	r3, [r1, #0]
 800f5c0:	50cd      	str	r5, [r1, r3]
 800f5c2:	18cc      	adds	r4, r1, r3
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	f000 f9b3 	bl	800f930 <__malloc_unlock>
 800f5ca:	f104 000b 	add.w	r0, r4, #11
 800f5ce:	1d23      	adds	r3, r4, #4
 800f5d0:	f020 0007 	bic.w	r0, r0, #7
 800f5d4:	1ac3      	subs	r3, r0, r3
 800f5d6:	d0d3      	beq.n	800f580 <_malloc_r+0x20>
 800f5d8:	425a      	negs	r2, r3
 800f5da:	50e2      	str	r2, [r4, r3]
 800f5dc:	e7d0      	b.n	800f580 <_malloc_r+0x20>
 800f5de:	428c      	cmp	r4, r1
 800f5e0:	684b      	ldr	r3, [r1, #4]
 800f5e2:	bf16      	itet	ne
 800f5e4:	6063      	strne	r3, [r4, #4]
 800f5e6:	6013      	streq	r3, [r2, #0]
 800f5e8:	460c      	movne	r4, r1
 800f5ea:	e7eb      	b.n	800f5c4 <_malloc_r+0x64>
 800f5ec:	460c      	mov	r4, r1
 800f5ee:	6849      	ldr	r1, [r1, #4]
 800f5f0:	e7cc      	b.n	800f58c <_malloc_r+0x2c>
 800f5f2:	1cc4      	adds	r4, r0, #3
 800f5f4:	f024 0403 	bic.w	r4, r4, #3
 800f5f8:	42a0      	cmp	r0, r4
 800f5fa:	d005      	beq.n	800f608 <_malloc_r+0xa8>
 800f5fc:	1a21      	subs	r1, r4, r0
 800f5fe:	4630      	mov	r0, r6
 800f600:	f000 f95a 	bl	800f8b8 <_sbrk_r>
 800f604:	3001      	adds	r0, #1
 800f606:	d0cf      	beq.n	800f5a8 <_malloc_r+0x48>
 800f608:	6025      	str	r5, [r4, #0]
 800f60a:	e7db      	b.n	800f5c4 <_malloc_r+0x64>
 800f60c:	2000028c 	.word	0x2000028c
 800f610:	20000290 	.word	0x20000290

0800f614 <__ssputs_r>:
 800f614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f618:	688e      	ldr	r6, [r1, #8]
 800f61a:	429e      	cmp	r6, r3
 800f61c:	4682      	mov	sl, r0
 800f61e:	460c      	mov	r4, r1
 800f620:	4690      	mov	r8, r2
 800f622:	4699      	mov	r9, r3
 800f624:	d837      	bhi.n	800f696 <__ssputs_r+0x82>
 800f626:	898a      	ldrh	r2, [r1, #12]
 800f628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f62c:	d031      	beq.n	800f692 <__ssputs_r+0x7e>
 800f62e:	6825      	ldr	r5, [r4, #0]
 800f630:	6909      	ldr	r1, [r1, #16]
 800f632:	1a6f      	subs	r7, r5, r1
 800f634:	6965      	ldr	r5, [r4, #20]
 800f636:	2302      	movs	r3, #2
 800f638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f63c:	fb95 f5f3 	sdiv	r5, r5, r3
 800f640:	f109 0301 	add.w	r3, r9, #1
 800f644:	443b      	add	r3, r7
 800f646:	429d      	cmp	r5, r3
 800f648:	bf38      	it	cc
 800f64a:	461d      	movcc	r5, r3
 800f64c:	0553      	lsls	r3, r2, #21
 800f64e:	d530      	bpl.n	800f6b2 <__ssputs_r+0x9e>
 800f650:	4629      	mov	r1, r5
 800f652:	f7ff ff85 	bl	800f560 <_malloc_r>
 800f656:	4606      	mov	r6, r0
 800f658:	b950      	cbnz	r0, 800f670 <__ssputs_r+0x5c>
 800f65a:	230c      	movs	r3, #12
 800f65c:	f8ca 3000 	str.w	r3, [sl]
 800f660:	89a3      	ldrh	r3, [r4, #12]
 800f662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f666:	81a3      	strh	r3, [r4, #12]
 800f668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f66c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f670:	463a      	mov	r2, r7
 800f672:	6921      	ldr	r1, [r4, #16]
 800f674:	f7ff fc32 	bl	800eedc <memcpy>
 800f678:	89a3      	ldrh	r3, [r4, #12]
 800f67a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f67e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f682:	81a3      	strh	r3, [r4, #12]
 800f684:	6126      	str	r6, [r4, #16]
 800f686:	6165      	str	r5, [r4, #20]
 800f688:	443e      	add	r6, r7
 800f68a:	1bed      	subs	r5, r5, r7
 800f68c:	6026      	str	r6, [r4, #0]
 800f68e:	60a5      	str	r5, [r4, #8]
 800f690:	464e      	mov	r6, r9
 800f692:	454e      	cmp	r6, r9
 800f694:	d900      	bls.n	800f698 <__ssputs_r+0x84>
 800f696:	464e      	mov	r6, r9
 800f698:	4632      	mov	r2, r6
 800f69a:	4641      	mov	r1, r8
 800f69c:	6820      	ldr	r0, [r4, #0]
 800f69e:	f000 f92d 	bl	800f8fc <memmove>
 800f6a2:	68a3      	ldr	r3, [r4, #8]
 800f6a4:	1b9b      	subs	r3, r3, r6
 800f6a6:	60a3      	str	r3, [r4, #8]
 800f6a8:	6823      	ldr	r3, [r4, #0]
 800f6aa:	441e      	add	r6, r3
 800f6ac:	6026      	str	r6, [r4, #0]
 800f6ae:	2000      	movs	r0, #0
 800f6b0:	e7dc      	b.n	800f66c <__ssputs_r+0x58>
 800f6b2:	462a      	mov	r2, r5
 800f6b4:	f000 f93d 	bl	800f932 <_realloc_r>
 800f6b8:	4606      	mov	r6, r0
 800f6ba:	2800      	cmp	r0, #0
 800f6bc:	d1e2      	bne.n	800f684 <__ssputs_r+0x70>
 800f6be:	6921      	ldr	r1, [r4, #16]
 800f6c0:	4650      	mov	r0, sl
 800f6c2:	f7ff feff 	bl	800f4c4 <_free_r>
 800f6c6:	e7c8      	b.n	800f65a <__ssputs_r+0x46>

0800f6c8 <_svfiprintf_r>:
 800f6c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6cc:	461d      	mov	r5, r3
 800f6ce:	898b      	ldrh	r3, [r1, #12]
 800f6d0:	061f      	lsls	r7, r3, #24
 800f6d2:	b09d      	sub	sp, #116	; 0x74
 800f6d4:	4680      	mov	r8, r0
 800f6d6:	460c      	mov	r4, r1
 800f6d8:	4616      	mov	r6, r2
 800f6da:	d50f      	bpl.n	800f6fc <_svfiprintf_r+0x34>
 800f6dc:	690b      	ldr	r3, [r1, #16]
 800f6de:	b96b      	cbnz	r3, 800f6fc <_svfiprintf_r+0x34>
 800f6e0:	2140      	movs	r1, #64	; 0x40
 800f6e2:	f7ff ff3d 	bl	800f560 <_malloc_r>
 800f6e6:	6020      	str	r0, [r4, #0]
 800f6e8:	6120      	str	r0, [r4, #16]
 800f6ea:	b928      	cbnz	r0, 800f6f8 <_svfiprintf_r+0x30>
 800f6ec:	230c      	movs	r3, #12
 800f6ee:	f8c8 3000 	str.w	r3, [r8]
 800f6f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f6f6:	e0c8      	b.n	800f88a <_svfiprintf_r+0x1c2>
 800f6f8:	2340      	movs	r3, #64	; 0x40
 800f6fa:	6163      	str	r3, [r4, #20]
 800f6fc:	2300      	movs	r3, #0
 800f6fe:	9309      	str	r3, [sp, #36]	; 0x24
 800f700:	2320      	movs	r3, #32
 800f702:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f706:	2330      	movs	r3, #48	; 0x30
 800f708:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f70c:	9503      	str	r5, [sp, #12]
 800f70e:	f04f 0b01 	mov.w	fp, #1
 800f712:	4637      	mov	r7, r6
 800f714:	463d      	mov	r5, r7
 800f716:	f815 3b01 	ldrb.w	r3, [r5], #1
 800f71a:	b10b      	cbz	r3, 800f720 <_svfiprintf_r+0x58>
 800f71c:	2b25      	cmp	r3, #37	; 0x25
 800f71e:	d13e      	bne.n	800f79e <_svfiprintf_r+0xd6>
 800f720:	ebb7 0a06 	subs.w	sl, r7, r6
 800f724:	d00b      	beq.n	800f73e <_svfiprintf_r+0x76>
 800f726:	4653      	mov	r3, sl
 800f728:	4632      	mov	r2, r6
 800f72a:	4621      	mov	r1, r4
 800f72c:	4640      	mov	r0, r8
 800f72e:	f7ff ff71 	bl	800f614 <__ssputs_r>
 800f732:	3001      	adds	r0, #1
 800f734:	f000 80a4 	beq.w	800f880 <_svfiprintf_r+0x1b8>
 800f738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f73a:	4453      	add	r3, sl
 800f73c:	9309      	str	r3, [sp, #36]	; 0x24
 800f73e:	783b      	ldrb	r3, [r7, #0]
 800f740:	2b00      	cmp	r3, #0
 800f742:	f000 809d 	beq.w	800f880 <_svfiprintf_r+0x1b8>
 800f746:	2300      	movs	r3, #0
 800f748:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f74c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f750:	9304      	str	r3, [sp, #16]
 800f752:	9307      	str	r3, [sp, #28]
 800f754:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f758:	931a      	str	r3, [sp, #104]	; 0x68
 800f75a:	462f      	mov	r7, r5
 800f75c:	2205      	movs	r2, #5
 800f75e:	f817 1b01 	ldrb.w	r1, [r7], #1
 800f762:	4850      	ldr	r0, [pc, #320]	; (800f8a4 <_svfiprintf_r+0x1dc>)
 800f764:	f7f0 fd3c 	bl	80001e0 <memchr>
 800f768:	9b04      	ldr	r3, [sp, #16]
 800f76a:	b9d0      	cbnz	r0, 800f7a2 <_svfiprintf_r+0xda>
 800f76c:	06d9      	lsls	r1, r3, #27
 800f76e:	bf44      	itt	mi
 800f770:	2220      	movmi	r2, #32
 800f772:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f776:	071a      	lsls	r2, r3, #28
 800f778:	bf44      	itt	mi
 800f77a:	222b      	movmi	r2, #43	; 0x2b
 800f77c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800f780:	782a      	ldrb	r2, [r5, #0]
 800f782:	2a2a      	cmp	r2, #42	; 0x2a
 800f784:	d015      	beq.n	800f7b2 <_svfiprintf_r+0xea>
 800f786:	9a07      	ldr	r2, [sp, #28]
 800f788:	462f      	mov	r7, r5
 800f78a:	2000      	movs	r0, #0
 800f78c:	250a      	movs	r5, #10
 800f78e:	4639      	mov	r1, r7
 800f790:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f794:	3b30      	subs	r3, #48	; 0x30
 800f796:	2b09      	cmp	r3, #9
 800f798:	d94d      	bls.n	800f836 <_svfiprintf_r+0x16e>
 800f79a:	b1b8      	cbz	r0, 800f7cc <_svfiprintf_r+0x104>
 800f79c:	e00f      	b.n	800f7be <_svfiprintf_r+0xf6>
 800f79e:	462f      	mov	r7, r5
 800f7a0:	e7b8      	b.n	800f714 <_svfiprintf_r+0x4c>
 800f7a2:	4a40      	ldr	r2, [pc, #256]	; (800f8a4 <_svfiprintf_r+0x1dc>)
 800f7a4:	1a80      	subs	r0, r0, r2
 800f7a6:	fa0b f000 	lsl.w	r0, fp, r0
 800f7aa:	4318      	orrs	r0, r3
 800f7ac:	9004      	str	r0, [sp, #16]
 800f7ae:	463d      	mov	r5, r7
 800f7b0:	e7d3      	b.n	800f75a <_svfiprintf_r+0x92>
 800f7b2:	9a03      	ldr	r2, [sp, #12]
 800f7b4:	1d11      	adds	r1, r2, #4
 800f7b6:	6812      	ldr	r2, [r2, #0]
 800f7b8:	9103      	str	r1, [sp, #12]
 800f7ba:	2a00      	cmp	r2, #0
 800f7bc:	db01      	blt.n	800f7c2 <_svfiprintf_r+0xfa>
 800f7be:	9207      	str	r2, [sp, #28]
 800f7c0:	e004      	b.n	800f7cc <_svfiprintf_r+0x104>
 800f7c2:	4252      	negs	r2, r2
 800f7c4:	f043 0302 	orr.w	r3, r3, #2
 800f7c8:	9207      	str	r2, [sp, #28]
 800f7ca:	9304      	str	r3, [sp, #16]
 800f7cc:	783b      	ldrb	r3, [r7, #0]
 800f7ce:	2b2e      	cmp	r3, #46	; 0x2e
 800f7d0:	d10c      	bne.n	800f7ec <_svfiprintf_r+0x124>
 800f7d2:	787b      	ldrb	r3, [r7, #1]
 800f7d4:	2b2a      	cmp	r3, #42	; 0x2a
 800f7d6:	d133      	bne.n	800f840 <_svfiprintf_r+0x178>
 800f7d8:	9b03      	ldr	r3, [sp, #12]
 800f7da:	1d1a      	adds	r2, r3, #4
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	9203      	str	r2, [sp, #12]
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	bfb8      	it	lt
 800f7e4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800f7e8:	3702      	adds	r7, #2
 800f7ea:	9305      	str	r3, [sp, #20]
 800f7ec:	4d2e      	ldr	r5, [pc, #184]	; (800f8a8 <_svfiprintf_r+0x1e0>)
 800f7ee:	7839      	ldrb	r1, [r7, #0]
 800f7f0:	2203      	movs	r2, #3
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	f7f0 fcf4 	bl	80001e0 <memchr>
 800f7f8:	b138      	cbz	r0, 800f80a <_svfiprintf_r+0x142>
 800f7fa:	2340      	movs	r3, #64	; 0x40
 800f7fc:	1b40      	subs	r0, r0, r5
 800f7fe:	fa03 f000 	lsl.w	r0, r3, r0
 800f802:	9b04      	ldr	r3, [sp, #16]
 800f804:	4303      	orrs	r3, r0
 800f806:	3701      	adds	r7, #1
 800f808:	9304      	str	r3, [sp, #16]
 800f80a:	7839      	ldrb	r1, [r7, #0]
 800f80c:	4827      	ldr	r0, [pc, #156]	; (800f8ac <_svfiprintf_r+0x1e4>)
 800f80e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f812:	2206      	movs	r2, #6
 800f814:	1c7e      	adds	r6, r7, #1
 800f816:	f7f0 fce3 	bl	80001e0 <memchr>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d038      	beq.n	800f890 <_svfiprintf_r+0x1c8>
 800f81e:	4b24      	ldr	r3, [pc, #144]	; (800f8b0 <_svfiprintf_r+0x1e8>)
 800f820:	bb13      	cbnz	r3, 800f868 <_svfiprintf_r+0x1a0>
 800f822:	9b03      	ldr	r3, [sp, #12]
 800f824:	3307      	adds	r3, #7
 800f826:	f023 0307 	bic.w	r3, r3, #7
 800f82a:	3308      	adds	r3, #8
 800f82c:	9303      	str	r3, [sp, #12]
 800f82e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f830:	444b      	add	r3, r9
 800f832:	9309      	str	r3, [sp, #36]	; 0x24
 800f834:	e76d      	b.n	800f712 <_svfiprintf_r+0x4a>
 800f836:	fb05 3202 	mla	r2, r5, r2, r3
 800f83a:	2001      	movs	r0, #1
 800f83c:	460f      	mov	r7, r1
 800f83e:	e7a6      	b.n	800f78e <_svfiprintf_r+0xc6>
 800f840:	2300      	movs	r3, #0
 800f842:	3701      	adds	r7, #1
 800f844:	9305      	str	r3, [sp, #20]
 800f846:	4619      	mov	r1, r3
 800f848:	250a      	movs	r5, #10
 800f84a:	4638      	mov	r0, r7
 800f84c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f850:	3a30      	subs	r2, #48	; 0x30
 800f852:	2a09      	cmp	r2, #9
 800f854:	d903      	bls.n	800f85e <_svfiprintf_r+0x196>
 800f856:	2b00      	cmp	r3, #0
 800f858:	d0c8      	beq.n	800f7ec <_svfiprintf_r+0x124>
 800f85a:	9105      	str	r1, [sp, #20]
 800f85c:	e7c6      	b.n	800f7ec <_svfiprintf_r+0x124>
 800f85e:	fb05 2101 	mla	r1, r5, r1, r2
 800f862:	2301      	movs	r3, #1
 800f864:	4607      	mov	r7, r0
 800f866:	e7f0      	b.n	800f84a <_svfiprintf_r+0x182>
 800f868:	ab03      	add	r3, sp, #12
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	4622      	mov	r2, r4
 800f86e:	4b11      	ldr	r3, [pc, #68]	; (800f8b4 <_svfiprintf_r+0x1ec>)
 800f870:	a904      	add	r1, sp, #16
 800f872:	4640      	mov	r0, r8
 800f874:	f7fe f8de 	bl	800da34 <_printf_float>
 800f878:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800f87c:	4681      	mov	r9, r0
 800f87e:	d1d6      	bne.n	800f82e <_svfiprintf_r+0x166>
 800f880:	89a3      	ldrh	r3, [r4, #12]
 800f882:	065b      	lsls	r3, r3, #25
 800f884:	f53f af35 	bmi.w	800f6f2 <_svfiprintf_r+0x2a>
 800f888:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f88a:	b01d      	add	sp, #116	; 0x74
 800f88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f890:	ab03      	add	r3, sp, #12
 800f892:	9300      	str	r3, [sp, #0]
 800f894:	4622      	mov	r2, r4
 800f896:	4b07      	ldr	r3, [pc, #28]	; (800f8b4 <_svfiprintf_r+0x1ec>)
 800f898:	a904      	add	r1, sp, #16
 800f89a:	4640      	mov	r0, r8
 800f89c:	f7fe fb80 	bl	800dfa0 <_printf_i>
 800f8a0:	e7ea      	b.n	800f878 <_svfiprintf_r+0x1b0>
 800f8a2:	bf00      	nop
 800f8a4:	080110b4 	.word	0x080110b4
 800f8a8:	080110ba 	.word	0x080110ba
 800f8ac:	080110be 	.word	0x080110be
 800f8b0:	0800da35 	.word	0x0800da35
 800f8b4:	0800f615 	.word	0x0800f615

0800f8b8 <_sbrk_r>:
 800f8b8:	b538      	push	{r3, r4, r5, lr}
 800f8ba:	4c06      	ldr	r4, [pc, #24]	; (800f8d4 <_sbrk_r+0x1c>)
 800f8bc:	2300      	movs	r3, #0
 800f8be:	4605      	mov	r5, r0
 800f8c0:	4608      	mov	r0, r1
 800f8c2:	6023      	str	r3, [r4, #0]
 800f8c4:	f7fd ff84 	bl	800d7d0 <_sbrk>
 800f8c8:	1c43      	adds	r3, r0, #1
 800f8ca:	d102      	bne.n	800f8d2 <_sbrk_r+0x1a>
 800f8cc:	6823      	ldr	r3, [r4, #0]
 800f8ce:	b103      	cbz	r3, 800f8d2 <_sbrk_r+0x1a>
 800f8d0:	602b      	str	r3, [r5, #0]
 800f8d2:	bd38      	pop	{r3, r4, r5, pc}
 800f8d4:	20001544 	.word	0x20001544

0800f8d8 <__ascii_mbtowc>:
 800f8d8:	b082      	sub	sp, #8
 800f8da:	b901      	cbnz	r1, 800f8de <__ascii_mbtowc+0x6>
 800f8dc:	a901      	add	r1, sp, #4
 800f8de:	b142      	cbz	r2, 800f8f2 <__ascii_mbtowc+0x1a>
 800f8e0:	b14b      	cbz	r3, 800f8f6 <__ascii_mbtowc+0x1e>
 800f8e2:	7813      	ldrb	r3, [r2, #0]
 800f8e4:	600b      	str	r3, [r1, #0]
 800f8e6:	7812      	ldrb	r2, [r2, #0]
 800f8e8:	1c10      	adds	r0, r2, #0
 800f8ea:	bf18      	it	ne
 800f8ec:	2001      	movne	r0, #1
 800f8ee:	b002      	add	sp, #8
 800f8f0:	4770      	bx	lr
 800f8f2:	4610      	mov	r0, r2
 800f8f4:	e7fb      	b.n	800f8ee <__ascii_mbtowc+0x16>
 800f8f6:	f06f 0001 	mvn.w	r0, #1
 800f8fa:	e7f8      	b.n	800f8ee <__ascii_mbtowc+0x16>

0800f8fc <memmove>:
 800f8fc:	4288      	cmp	r0, r1
 800f8fe:	b510      	push	{r4, lr}
 800f900:	eb01 0302 	add.w	r3, r1, r2
 800f904:	d807      	bhi.n	800f916 <memmove+0x1a>
 800f906:	1e42      	subs	r2, r0, #1
 800f908:	4299      	cmp	r1, r3
 800f90a:	d00a      	beq.n	800f922 <memmove+0x26>
 800f90c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f910:	f802 4f01 	strb.w	r4, [r2, #1]!
 800f914:	e7f8      	b.n	800f908 <memmove+0xc>
 800f916:	4283      	cmp	r3, r0
 800f918:	d9f5      	bls.n	800f906 <memmove+0xa>
 800f91a:	1881      	adds	r1, r0, r2
 800f91c:	1ad2      	subs	r2, r2, r3
 800f91e:	42d3      	cmn	r3, r2
 800f920:	d100      	bne.n	800f924 <memmove+0x28>
 800f922:	bd10      	pop	{r4, pc}
 800f924:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f928:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800f92c:	e7f7      	b.n	800f91e <memmove+0x22>

0800f92e <__malloc_lock>:
 800f92e:	4770      	bx	lr

0800f930 <__malloc_unlock>:
 800f930:	4770      	bx	lr

0800f932 <_realloc_r>:
 800f932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f934:	4607      	mov	r7, r0
 800f936:	4614      	mov	r4, r2
 800f938:	460e      	mov	r6, r1
 800f93a:	b921      	cbnz	r1, 800f946 <_realloc_r+0x14>
 800f93c:	4611      	mov	r1, r2
 800f93e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f942:	f7ff be0d 	b.w	800f560 <_malloc_r>
 800f946:	b922      	cbnz	r2, 800f952 <_realloc_r+0x20>
 800f948:	f7ff fdbc 	bl	800f4c4 <_free_r>
 800f94c:	4625      	mov	r5, r4
 800f94e:	4628      	mov	r0, r5
 800f950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f952:	f000 f821 	bl	800f998 <_malloc_usable_size_r>
 800f956:	42a0      	cmp	r0, r4
 800f958:	d20f      	bcs.n	800f97a <_realloc_r+0x48>
 800f95a:	4621      	mov	r1, r4
 800f95c:	4638      	mov	r0, r7
 800f95e:	f7ff fdff 	bl	800f560 <_malloc_r>
 800f962:	4605      	mov	r5, r0
 800f964:	2800      	cmp	r0, #0
 800f966:	d0f2      	beq.n	800f94e <_realloc_r+0x1c>
 800f968:	4631      	mov	r1, r6
 800f96a:	4622      	mov	r2, r4
 800f96c:	f7ff fab6 	bl	800eedc <memcpy>
 800f970:	4631      	mov	r1, r6
 800f972:	4638      	mov	r0, r7
 800f974:	f7ff fda6 	bl	800f4c4 <_free_r>
 800f978:	e7e9      	b.n	800f94e <_realloc_r+0x1c>
 800f97a:	4635      	mov	r5, r6
 800f97c:	e7e7      	b.n	800f94e <_realloc_r+0x1c>

0800f97e <__ascii_wctomb>:
 800f97e:	b149      	cbz	r1, 800f994 <__ascii_wctomb+0x16>
 800f980:	2aff      	cmp	r2, #255	; 0xff
 800f982:	bf85      	ittet	hi
 800f984:	238a      	movhi	r3, #138	; 0x8a
 800f986:	6003      	strhi	r3, [r0, #0]
 800f988:	700a      	strbls	r2, [r1, #0]
 800f98a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800f98e:	bf98      	it	ls
 800f990:	2001      	movls	r0, #1
 800f992:	4770      	bx	lr
 800f994:	4608      	mov	r0, r1
 800f996:	4770      	bx	lr

0800f998 <_malloc_usable_size_r>:
 800f998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f99c:	1f18      	subs	r0, r3, #4
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	bfbc      	itt	lt
 800f9a2:	580b      	ldrlt	r3, [r1, r0]
 800f9a4:	18c0      	addlt	r0, r0, r3
 800f9a6:	4770      	bx	lr

0800f9a8 <cos>:
 800f9a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9aa:	ec51 0b10 	vmov	r0, r1, d0
 800f9ae:	4a1e      	ldr	r2, [pc, #120]	; (800fa28 <cos+0x80>)
 800f9b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f9b4:	4293      	cmp	r3, r2
 800f9b6:	dc06      	bgt.n	800f9c6 <cos+0x1e>
 800f9b8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800fa20 <cos+0x78>
 800f9bc:	f000 fb80 	bl	80100c0 <__kernel_cos>
 800f9c0:	ec51 0b10 	vmov	r0, r1, d0
 800f9c4:	e007      	b.n	800f9d6 <cos+0x2e>
 800f9c6:	4a19      	ldr	r2, [pc, #100]	; (800fa2c <cos+0x84>)
 800f9c8:	4293      	cmp	r3, r2
 800f9ca:	dd09      	ble.n	800f9e0 <cos+0x38>
 800f9cc:	ee10 2a10 	vmov	r2, s0
 800f9d0:	460b      	mov	r3, r1
 800f9d2:	f7f0 fc59 	bl	8000288 <__aeabi_dsub>
 800f9d6:	ec41 0b10 	vmov	d0, r0, r1
 800f9da:	b005      	add	sp, #20
 800f9dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9e0:	4668      	mov	r0, sp
 800f9e2:	f000 f8c9 	bl	800fb78 <__ieee754_rem_pio2>
 800f9e6:	f000 0003 	and.w	r0, r0, #3
 800f9ea:	2801      	cmp	r0, #1
 800f9ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9f0:	ed9d 0b00 	vldr	d0, [sp]
 800f9f4:	d007      	beq.n	800fa06 <cos+0x5e>
 800f9f6:	2802      	cmp	r0, #2
 800f9f8:	d00e      	beq.n	800fa18 <cos+0x70>
 800f9fa:	2800      	cmp	r0, #0
 800f9fc:	d0de      	beq.n	800f9bc <cos+0x14>
 800f9fe:	2001      	movs	r0, #1
 800fa00:	f000 ff66 	bl	80108d0 <__kernel_sin>
 800fa04:	e7dc      	b.n	800f9c0 <cos+0x18>
 800fa06:	f000 ff63 	bl	80108d0 <__kernel_sin>
 800fa0a:	ec53 2b10 	vmov	r2, r3, d0
 800fa0e:	ee10 0a10 	vmov	r0, s0
 800fa12:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fa16:	e7de      	b.n	800f9d6 <cos+0x2e>
 800fa18:	f000 fb52 	bl	80100c0 <__kernel_cos>
 800fa1c:	e7f5      	b.n	800fa0a <cos+0x62>
 800fa1e:	bf00      	nop
	...
 800fa28:	3fe921fb 	.word	0x3fe921fb
 800fa2c:	7fefffff 	.word	0x7fefffff

0800fa30 <sin>:
 800fa30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa32:	ec51 0b10 	vmov	r0, r1, d0
 800fa36:	4a20      	ldr	r2, [pc, #128]	; (800fab8 <sin+0x88>)
 800fa38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800fa3c:	4293      	cmp	r3, r2
 800fa3e:	dc07      	bgt.n	800fa50 <sin+0x20>
 800fa40:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800fab0 <sin+0x80>
 800fa44:	2000      	movs	r0, #0
 800fa46:	f000 ff43 	bl	80108d0 <__kernel_sin>
 800fa4a:	ec51 0b10 	vmov	r0, r1, d0
 800fa4e:	e007      	b.n	800fa60 <sin+0x30>
 800fa50:	4a1a      	ldr	r2, [pc, #104]	; (800fabc <sin+0x8c>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	dd09      	ble.n	800fa6a <sin+0x3a>
 800fa56:	ee10 2a10 	vmov	r2, s0
 800fa5a:	460b      	mov	r3, r1
 800fa5c:	f7f0 fc14 	bl	8000288 <__aeabi_dsub>
 800fa60:	ec41 0b10 	vmov	d0, r0, r1
 800fa64:	b005      	add	sp, #20
 800fa66:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa6a:	4668      	mov	r0, sp
 800fa6c:	f000 f884 	bl	800fb78 <__ieee754_rem_pio2>
 800fa70:	f000 0003 	and.w	r0, r0, #3
 800fa74:	2801      	cmp	r0, #1
 800fa76:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fa7a:	ed9d 0b00 	vldr	d0, [sp]
 800fa7e:	d004      	beq.n	800fa8a <sin+0x5a>
 800fa80:	2802      	cmp	r0, #2
 800fa82:	d005      	beq.n	800fa90 <sin+0x60>
 800fa84:	b970      	cbnz	r0, 800faa4 <sin+0x74>
 800fa86:	2001      	movs	r0, #1
 800fa88:	e7dd      	b.n	800fa46 <sin+0x16>
 800fa8a:	f000 fb19 	bl	80100c0 <__kernel_cos>
 800fa8e:	e7dc      	b.n	800fa4a <sin+0x1a>
 800fa90:	2001      	movs	r0, #1
 800fa92:	f000 ff1d 	bl	80108d0 <__kernel_sin>
 800fa96:	ec53 2b10 	vmov	r2, r3, d0
 800fa9a:	ee10 0a10 	vmov	r0, s0
 800fa9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800faa2:	e7dd      	b.n	800fa60 <sin+0x30>
 800faa4:	f000 fb0c 	bl	80100c0 <__kernel_cos>
 800faa8:	e7f5      	b.n	800fa96 <sin+0x66>
 800faaa:	bf00      	nop
 800faac:	f3af 8000 	nop.w
	...
 800fab8:	3fe921fb 	.word	0x3fe921fb
 800fabc:	7fefffff 	.word	0x7fefffff

0800fac0 <sqrt>:
 800fac0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800fac4:	ed2d 8b02 	vpush	{d8}
 800fac8:	b08b      	sub	sp, #44	; 0x2c
 800faca:	ec55 4b10 	vmov	r4, r5, d0
 800face:	f000 fa45 	bl	800ff5c <__ieee754_sqrt>
 800fad2:	4b26      	ldr	r3, [pc, #152]	; (800fb6c <sqrt+0xac>)
 800fad4:	eeb0 8a40 	vmov.f32	s16, s0
 800fad8:	eef0 8a60 	vmov.f32	s17, s1
 800fadc:	f993 6000 	ldrsb.w	r6, [r3]
 800fae0:	1c73      	adds	r3, r6, #1
 800fae2:	d02a      	beq.n	800fb3a <sqrt+0x7a>
 800fae4:	4622      	mov	r2, r4
 800fae6:	462b      	mov	r3, r5
 800fae8:	4620      	mov	r0, r4
 800faea:	4629      	mov	r1, r5
 800faec:	f7f1 f81e 	bl	8000b2c <__aeabi_dcmpun>
 800faf0:	4607      	mov	r7, r0
 800faf2:	bb10      	cbnz	r0, 800fb3a <sqrt+0x7a>
 800faf4:	f04f 0800 	mov.w	r8, #0
 800faf8:	f04f 0900 	mov.w	r9, #0
 800fafc:	4642      	mov	r2, r8
 800fafe:	464b      	mov	r3, r9
 800fb00:	4620      	mov	r0, r4
 800fb02:	4629      	mov	r1, r5
 800fb04:	f7f0 ffea 	bl	8000adc <__aeabi_dcmplt>
 800fb08:	b1b8      	cbz	r0, 800fb3a <sqrt+0x7a>
 800fb0a:	2301      	movs	r3, #1
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	4b18      	ldr	r3, [pc, #96]	; (800fb70 <sqrt+0xb0>)
 800fb10:	9301      	str	r3, [sp, #4]
 800fb12:	9708      	str	r7, [sp, #32]
 800fb14:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800fb18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800fb1c:	b9b6      	cbnz	r6, 800fb4c <sqrt+0x8c>
 800fb1e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800fb22:	4668      	mov	r0, sp
 800fb24:	f001 f81c 	bl	8010b60 <matherr>
 800fb28:	b1d0      	cbz	r0, 800fb60 <sqrt+0xa0>
 800fb2a:	9b08      	ldr	r3, [sp, #32]
 800fb2c:	b11b      	cbz	r3, 800fb36 <sqrt+0x76>
 800fb2e:	f7fd febb 	bl	800d8a8 <__errno>
 800fb32:	9b08      	ldr	r3, [sp, #32]
 800fb34:	6003      	str	r3, [r0, #0]
 800fb36:	ed9d 8b06 	vldr	d8, [sp, #24]
 800fb3a:	eeb0 0a48 	vmov.f32	s0, s16
 800fb3e:	eef0 0a68 	vmov.f32	s1, s17
 800fb42:	b00b      	add	sp, #44	; 0x2c
 800fb44:	ecbd 8b02 	vpop	{d8}
 800fb48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb4c:	4642      	mov	r2, r8
 800fb4e:	464b      	mov	r3, r9
 800fb50:	4640      	mov	r0, r8
 800fb52:	4649      	mov	r1, r9
 800fb54:	f7f0 fe7a 	bl	800084c <__aeabi_ddiv>
 800fb58:	2e02      	cmp	r6, #2
 800fb5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800fb5e:	d1e0      	bne.n	800fb22 <sqrt+0x62>
 800fb60:	f7fd fea2 	bl	800d8a8 <__errno>
 800fb64:	2321      	movs	r3, #33	; 0x21
 800fb66:	6003      	str	r3, [r0, #0]
 800fb68:	e7df      	b.n	800fb2a <sqrt+0x6a>
 800fb6a:	bf00      	nop
 800fb6c:	2000020c 	.word	0x2000020c
 800fb70:	080111d0 	.word	0x080111d0
 800fb74:	00000000 	.word	0x00000000

0800fb78 <__ieee754_rem_pio2>:
 800fb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb7c:	ec57 6b10 	vmov	r6, r7, d0
 800fb80:	4bc3      	ldr	r3, [pc, #780]	; (800fe90 <__ieee754_rem_pio2+0x318>)
 800fb82:	b08d      	sub	sp, #52	; 0x34
 800fb84:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fb88:	4598      	cmp	r8, r3
 800fb8a:	4604      	mov	r4, r0
 800fb8c:	9704      	str	r7, [sp, #16]
 800fb8e:	dc07      	bgt.n	800fba0 <__ieee754_rem_pio2+0x28>
 800fb90:	2200      	movs	r2, #0
 800fb92:	2300      	movs	r3, #0
 800fb94:	ed84 0b00 	vstr	d0, [r4]
 800fb98:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fb9c:	2500      	movs	r5, #0
 800fb9e:	e027      	b.n	800fbf0 <__ieee754_rem_pio2+0x78>
 800fba0:	4bbc      	ldr	r3, [pc, #752]	; (800fe94 <__ieee754_rem_pio2+0x31c>)
 800fba2:	4598      	cmp	r8, r3
 800fba4:	dc75      	bgt.n	800fc92 <__ieee754_rem_pio2+0x11a>
 800fba6:	9b04      	ldr	r3, [sp, #16]
 800fba8:	4dbb      	ldr	r5, [pc, #748]	; (800fe98 <__ieee754_rem_pio2+0x320>)
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	ee10 0a10 	vmov	r0, s0
 800fbb0:	a3a9      	add	r3, pc, #676	; (adr r3, 800fe58 <__ieee754_rem_pio2+0x2e0>)
 800fbb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb6:	4639      	mov	r1, r7
 800fbb8:	dd36      	ble.n	800fc28 <__ieee754_rem_pio2+0xb0>
 800fbba:	f7f0 fb65 	bl	8000288 <__aeabi_dsub>
 800fbbe:	45a8      	cmp	r8, r5
 800fbc0:	4606      	mov	r6, r0
 800fbc2:	460f      	mov	r7, r1
 800fbc4:	d018      	beq.n	800fbf8 <__ieee754_rem_pio2+0x80>
 800fbc6:	a3a6      	add	r3, pc, #664	; (adr r3, 800fe60 <__ieee754_rem_pio2+0x2e8>)
 800fbc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbcc:	f7f0 fb5c 	bl	8000288 <__aeabi_dsub>
 800fbd0:	4602      	mov	r2, r0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	e9c4 2300 	strd	r2, r3, [r4]
 800fbd8:	4630      	mov	r0, r6
 800fbda:	4639      	mov	r1, r7
 800fbdc:	f7f0 fb54 	bl	8000288 <__aeabi_dsub>
 800fbe0:	a39f      	add	r3, pc, #636	; (adr r3, 800fe60 <__ieee754_rem_pio2+0x2e8>)
 800fbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe6:	f7f0 fb4f 	bl	8000288 <__aeabi_dsub>
 800fbea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fbee:	2501      	movs	r5, #1
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	b00d      	add	sp, #52	; 0x34
 800fbf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf8:	a39b      	add	r3, pc, #620	; (adr r3, 800fe68 <__ieee754_rem_pio2+0x2f0>)
 800fbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfe:	f7f0 fb43 	bl	8000288 <__aeabi_dsub>
 800fc02:	a39b      	add	r3, pc, #620	; (adr r3, 800fe70 <__ieee754_rem_pio2+0x2f8>)
 800fc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc08:	4606      	mov	r6, r0
 800fc0a:	460f      	mov	r7, r1
 800fc0c:	f7f0 fb3c 	bl	8000288 <__aeabi_dsub>
 800fc10:	4602      	mov	r2, r0
 800fc12:	460b      	mov	r3, r1
 800fc14:	e9c4 2300 	strd	r2, r3, [r4]
 800fc18:	4630      	mov	r0, r6
 800fc1a:	4639      	mov	r1, r7
 800fc1c:	f7f0 fb34 	bl	8000288 <__aeabi_dsub>
 800fc20:	a393      	add	r3, pc, #588	; (adr r3, 800fe70 <__ieee754_rem_pio2+0x2f8>)
 800fc22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc26:	e7de      	b.n	800fbe6 <__ieee754_rem_pio2+0x6e>
 800fc28:	f7f0 fb30 	bl	800028c <__adddf3>
 800fc2c:	45a8      	cmp	r8, r5
 800fc2e:	4606      	mov	r6, r0
 800fc30:	460f      	mov	r7, r1
 800fc32:	d016      	beq.n	800fc62 <__ieee754_rem_pio2+0xea>
 800fc34:	a38a      	add	r3, pc, #552	; (adr r3, 800fe60 <__ieee754_rem_pio2+0x2e8>)
 800fc36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3a:	f7f0 fb27 	bl	800028c <__adddf3>
 800fc3e:	4602      	mov	r2, r0
 800fc40:	460b      	mov	r3, r1
 800fc42:	e9c4 2300 	strd	r2, r3, [r4]
 800fc46:	4630      	mov	r0, r6
 800fc48:	4639      	mov	r1, r7
 800fc4a:	f7f0 fb1d 	bl	8000288 <__aeabi_dsub>
 800fc4e:	a384      	add	r3, pc, #528	; (adr r3, 800fe60 <__ieee754_rem_pio2+0x2e8>)
 800fc50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc54:	f7f0 fb1a 	bl	800028c <__adddf3>
 800fc58:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800fc5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fc60:	e7c6      	b.n	800fbf0 <__ieee754_rem_pio2+0x78>
 800fc62:	a381      	add	r3, pc, #516	; (adr r3, 800fe68 <__ieee754_rem_pio2+0x2f0>)
 800fc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc68:	f7f0 fb10 	bl	800028c <__adddf3>
 800fc6c:	a380      	add	r3, pc, #512	; (adr r3, 800fe70 <__ieee754_rem_pio2+0x2f8>)
 800fc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc72:	4606      	mov	r6, r0
 800fc74:	460f      	mov	r7, r1
 800fc76:	f7f0 fb09 	bl	800028c <__adddf3>
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	e9c4 2300 	strd	r2, r3, [r4]
 800fc82:	4630      	mov	r0, r6
 800fc84:	4639      	mov	r1, r7
 800fc86:	f7f0 faff 	bl	8000288 <__aeabi_dsub>
 800fc8a:	a379      	add	r3, pc, #484	; (adr r3, 800fe70 <__ieee754_rem_pio2+0x2f8>)
 800fc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc90:	e7e0      	b.n	800fc54 <__ieee754_rem_pio2+0xdc>
 800fc92:	4b82      	ldr	r3, [pc, #520]	; (800fe9c <__ieee754_rem_pio2+0x324>)
 800fc94:	4598      	cmp	r8, r3
 800fc96:	f300 80d0 	bgt.w	800fe3a <__ieee754_rem_pio2+0x2c2>
 800fc9a:	f000 fed3 	bl	8010a44 <fabs>
 800fc9e:	ec57 6b10 	vmov	r6, r7, d0
 800fca2:	ee10 0a10 	vmov	r0, s0
 800fca6:	a374      	add	r3, pc, #464	; (adr r3, 800fe78 <__ieee754_rem_pio2+0x300>)
 800fca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcac:	4639      	mov	r1, r7
 800fcae:	f7f0 fca3 	bl	80005f8 <__aeabi_dmul>
 800fcb2:	2200      	movs	r2, #0
 800fcb4:	4b7a      	ldr	r3, [pc, #488]	; (800fea0 <__ieee754_rem_pio2+0x328>)
 800fcb6:	f7f0 fae9 	bl	800028c <__adddf3>
 800fcba:	f7f0 ff4d 	bl	8000b58 <__aeabi_d2iz>
 800fcbe:	4605      	mov	r5, r0
 800fcc0:	f7f0 fc30 	bl	8000524 <__aeabi_i2d>
 800fcc4:	a364      	add	r3, pc, #400	; (adr r3, 800fe58 <__ieee754_rem_pio2+0x2e0>)
 800fcc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fcce:	f7f0 fc93 	bl	80005f8 <__aeabi_dmul>
 800fcd2:	4602      	mov	r2, r0
 800fcd4:	460b      	mov	r3, r1
 800fcd6:	4630      	mov	r0, r6
 800fcd8:	4639      	mov	r1, r7
 800fcda:	f7f0 fad5 	bl	8000288 <__aeabi_dsub>
 800fcde:	a360      	add	r3, pc, #384	; (adr r3, 800fe60 <__ieee754_rem_pio2+0x2e8>)
 800fce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fce4:	4682      	mov	sl, r0
 800fce6:	468b      	mov	fp, r1
 800fce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcec:	f7f0 fc84 	bl	80005f8 <__aeabi_dmul>
 800fcf0:	2d1f      	cmp	r5, #31
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	460f      	mov	r7, r1
 800fcf6:	dc0c      	bgt.n	800fd12 <__ieee754_rem_pio2+0x19a>
 800fcf8:	1e6a      	subs	r2, r5, #1
 800fcfa:	4b6a      	ldr	r3, [pc, #424]	; (800fea4 <__ieee754_rem_pio2+0x32c>)
 800fcfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd00:	4543      	cmp	r3, r8
 800fd02:	d006      	beq.n	800fd12 <__ieee754_rem_pio2+0x19a>
 800fd04:	4632      	mov	r2, r6
 800fd06:	463b      	mov	r3, r7
 800fd08:	4650      	mov	r0, sl
 800fd0a:	4659      	mov	r1, fp
 800fd0c:	f7f0 fabc 	bl	8000288 <__aeabi_dsub>
 800fd10:	e00e      	b.n	800fd30 <__ieee754_rem_pio2+0x1b8>
 800fd12:	4632      	mov	r2, r6
 800fd14:	463b      	mov	r3, r7
 800fd16:	4650      	mov	r0, sl
 800fd18:	4659      	mov	r1, fp
 800fd1a:	f7f0 fab5 	bl	8000288 <__aeabi_dsub>
 800fd1e:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fd22:	9305      	str	r3, [sp, #20]
 800fd24:	9a05      	ldr	r2, [sp, #20]
 800fd26:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fd2a:	1ad3      	subs	r3, r2, r3
 800fd2c:	2b10      	cmp	r3, #16
 800fd2e:	dc02      	bgt.n	800fd36 <__ieee754_rem_pio2+0x1be>
 800fd30:	e9c4 0100 	strd	r0, r1, [r4]
 800fd34:	e039      	b.n	800fdaa <__ieee754_rem_pio2+0x232>
 800fd36:	a34c      	add	r3, pc, #304	; (adr r3, 800fe68 <__ieee754_rem_pio2+0x2f0>)
 800fd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd40:	f7f0 fc5a 	bl	80005f8 <__aeabi_dmul>
 800fd44:	4606      	mov	r6, r0
 800fd46:	460f      	mov	r7, r1
 800fd48:	4602      	mov	r2, r0
 800fd4a:	460b      	mov	r3, r1
 800fd4c:	4650      	mov	r0, sl
 800fd4e:	4659      	mov	r1, fp
 800fd50:	f7f0 fa9a 	bl	8000288 <__aeabi_dsub>
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	4680      	mov	r8, r0
 800fd5a:	4689      	mov	r9, r1
 800fd5c:	4650      	mov	r0, sl
 800fd5e:	4659      	mov	r1, fp
 800fd60:	f7f0 fa92 	bl	8000288 <__aeabi_dsub>
 800fd64:	4632      	mov	r2, r6
 800fd66:	463b      	mov	r3, r7
 800fd68:	f7f0 fa8e 	bl	8000288 <__aeabi_dsub>
 800fd6c:	a340      	add	r3, pc, #256	; (adr r3, 800fe70 <__ieee754_rem_pio2+0x2f8>)
 800fd6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd72:	4606      	mov	r6, r0
 800fd74:	460f      	mov	r7, r1
 800fd76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd7a:	f7f0 fc3d 	bl	80005f8 <__aeabi_dmul>
 800fd7e:	4632      	mov	r2, r6
 800fd80:	463b      	mov	r3, r7
 800fd82:	f7f0 fa81 	bl	8000288 <__aeabi_dsub>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	4606      	mov	r6, r0
 800fd8c:	460f      	mov	r7, r1
 800fd8e:	4640      	mov	r0, r8
 800fd90:	4649      	mov	r1, r9
 800fd92:	f7f0 fa79 	bl	8000288 <__aeabi_dsub>
 800fd96:	9a05      	ldr	r2, [sp, #20]
 800fd98:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fd9c:	1ad3      	subs	r3, r2, r3
 800fd9e:	2b31      	cmp	r3, #49	; 0x31
 800fda0:	dc20      	bgt.n	800fde4 <__ieee754_rem_pio2+0x26c>
 800fda2:	e9c4 0100 	strd	r0, r1, [r4]
 800fda6:	46c2      	mov	sl, r8
 800fda8:	46cb      	mov	fp, r9
 800fdaa:	e9d4 8900 	ldrd	r8, r9, [r4]
 800fdae:	4650      	mov	r0, sl
 800fdb0:	4642      	mov	r2, r8
 800fdb2:	464b      	mov	r3, r9
 800fdb4:	4659      	mov	r1, fp
 800fdb6:	f7f0 fa67 	bl	8000288 <__aeabi_dsub>
 800fdba:	463b      	mov	r3, r7
 800fdbc:	4632      	mov	r2, r6
 800fdbe:	f7f0 fa63 	bl	8000288 <__aeabi_dsub>
 800fdc2:	9b04      	ldr	r3, [sp, #16]
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fdca:	f6bf af11 	bge.w	800fbf0 <__ieee754_rem_pio2+0x78>
 800fdce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fdd2:	6063      	str	r3, [r4, #4]
 800fdd4:	f8c4 8000 	str.w	r8, [r4]
 800fdd8:	60a0      	str	r0, [r4, #8]
 800fdda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fdde:	60e3      	str	r3, [r4, #12]
 800fde0:	426d      	negs	r5, r5
 800fde2:	e705      	b.n	800fbf0 <__ieee754_rem_pio2+0x78>
 800fde4:	a326      	add	r3, pc, #152	; (adr r3, 800fe80 <__ieee754_rem_pio2+0x308>)
 800fde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdee:	f7f0 fc03 	bl	80005f8 <__aeabi_dmul>
 800fdf2:	4606      	mov	r6, r0
 800fdf4:	460f      	mov	r7, r1
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	460b      	mov	r3, r1
 800fdfa:	4640      	mov	r0, r8
 800fdfc:	4649      	mov	r1, r9
 800fdfe:	f7f0 fa43 	bl	8000288 <__aeabi_dsub>
 800fe02:	4602      	mov	r2, r0
 800fe04:	460b      	mov	r3, r1
 800fe06:	4682      	mov	sl, r0
 800fe08:	468b      	mov	fp, r1
 800fe0a:	4640      	mov	r0, r8
 800fe0c:	4649      	mov	r1, r9
 800fe0e:	f7f0 fa3b 	bl	8000288 <__aeabi_dsub>
 800fe12:	4632      	mov	r2, r6
 800fe14:	463b      	mov	r3, r7
 800fe16:	f7f0 fa37 	bl	8000288 <__aeabi_dsub>
 800fe1a:	a31b      	add	r3, pc, #108	; (adr r3, 800fe88 <__ieee754_rem_pio2+0x310>)
 800fe1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe20:	4606      	mov	r6, r0
 800fe22:	460f      	mov	r7, r1
 800fe24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fe28:	f7f0 fbe6 	bl	80005f8 <__aeabi_dmul>
 800fe2c:	4632      	mov	r2, r6
 800fe2e:	463b      	mov	r3, r7
 800fe30:	f7f0 fa2a 	bl	8000288 <__aeabi_dsub>
 800fe34:	4606      	mov	r6, r0
 800fe36:	460f      	mov	r7, r1
 800fe38:	e764      	b.n	800fd04 <__ieee754_rem_pio2+0x18c>
 800fe3a:	4b1b      	ldr	r3, [pc, #108]	; (800fea8 <__ieee754_rem_pio2+0x330>)
 800fe3c:	4598      	cmp	r8, r3
 800fe3e:	dd35      	ble.n	800feac <__ieee754_rem_pio2+0x334>
 800fe40:	ee10 2a10 	vmov	r2, s0
 800fe44:	463b      	mov	r3, r7
 800fe46:	4630      	mov	r0, r6
 800fe48:	4639      	mov	r1, r7
 800fe4a:	f7f0 fa1d 	bl	8000288 <__aeabi_dsub>
 800fe4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800fe52:	e9c4 0100 	strd	r0, r1, [r4]
 800fe56:	e6a1      	b.n	800fb9c <__ieee754_rem_pio2+0x24>
 800fe58:	54400000 	.word	0x54400000
 800fe5c:	3ff921fb 	.word	0x3ff921fb
 800fe60:	1a626331 	.word	0x1a626331
 800fe64:	3dd0b461 	.word	0x3dd0b461
 800fe68:	1a600000 	.word	0x1a600000
 800fe6c:	3dd0b461 	.word	0x3dd0b461
 800fe70:	2e037073 	.word	0x2e037073
 800fe74:	3ba3198a 	.word	0x3ba3198a
 800fe78:	6dc9c883 	.word	0x6dc9c883
 800fe7c:	3fe45f30 	.word	0x3fe45f30
 800fe80:	2e000000 	.word	0x2e000000
 800fe84:	3ba3198a 	.word	0x3ba3198a
 800fe88:	252049c1 	.word	0x252049c1
 800fe8c:	397b839a 	.word	0x397b839a
 800fe90:	3fe921fb 	.word	0x3fe921fb
 800fe94:	4002d97b 	.word	0x4002d97b
 800fe98:	3ff921fb 	.word	0x3ff921fb
 800fe9c:	413921fb 	.word	0x413921fb
 800fea0:	3fe00000 	.word	0x3fe00000
 800fea4:	080111d8 	.word	0x080111d8
 800fea8:	7fefffff 	.word	0x7fefffff
 800feac:	ea4f 5528 	mov.w	r5, r8, asr #20
 800feb0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800feb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800feb8:	4630      	mov	r0, r6
 800feba:	460f      	mov	r7, r1
 800febc:	f7f0 fe4c 	bl	8000b58 <__aeabi_d2iz>
 800fec0:	f7f0 fb30 	bl	8000524 <__aeabi_i2d>
 800fec4:	4602      	mov	r2, r0
 800fec6:	460b      	mov	r3, r1
 800fec8:	4630      	mov	r0, r6
 800feca:	4639      	mov	r1, r7
 800fecc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fed0:	f7f0 f9da 	bl	8000288 <__aeabi_dsub>
 800fed4:	2200      	movs	r2, #0
 800fed6:	4b1f      	ldr	r3, [pc, #124]	; (800ff54 <__ieee754_rem_pio2+0x3dc>)
 800fed8:	f7f0 fb8e 	bl	80005f8 <__aeabi_dmul>
 800fedc:	460f      	mov	r7, r1
 800fede:	4606      	mov	r6, r0
 800fee0:	f7f0 fe3a 	bl	8000b58 <__aeabi_d2iz>
 800fee4:	f7f0 fb1e 	bl	8000524 <__aeabi_i2d>
 800fee8:	4602      	mov	r2, r0
 800feea:	460b      	mov	r3, r1
 800feec:	4630      	mov	r0, r6
 800feee:	4639      	mov	r1, r7
 800fef0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800fef4:	f7f0 f9c8 	bl	8000288 <__aeabi_dsub>
 800fef8:	2200      	movs	r2, #0
 800fefa:	4b16      	ldr	r3, [pc, #88]	; (800ff54 <__ieee754_rem_pio2+0x3dc>)
 800fefc:	f7f0 fb7c 	bl	80005f8 <__aeabi_dmul>
 800ff00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ff04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ff08:	f04f 0803 	mov.w	r8, #3
 800ff0c:	2600      	movs	r6, #0
 800ff0e:	2700      	movs	r7, #0
 800ff10:	4632      	mov	r2, r6
 800ff12:	463b      	mov	r3, r7
 800ff14:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ff18:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800ff1c:	f7f0 fdd4 	bl	8000ac8 <__aeabi_dcmpeq>
 800ff20:	b9b0      	cbnz	r0, 800ff50 <__ieee754_rem_pio2+0x3d8>
 800ff22:	4b0d      	ldr	r3, [pc, #52]	; (800ff58 <__ieee754_rem_pio2+0x3e0>)
 800ff24:	9301      	str	r3, [sp, #4]
 800ff26:	2302      	movs	r3, #2
 800ff28:	9300      	str	r3, [sp, #0]
 800ff2a:	462a      	mov	r2, r5
 800ff2c:	4643      	mov	r3, r8
 800ff2e:	4621      	mov	r1, r4
 800ff30:	a806      	add	r0, sp, #24
 800ff32:	f000 f98d 	bl	8010250 <__kernel_rem_pio2>
 800ff36:	9b04      	ldr	r3, [sp, #16]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	4605      	mov	r5, r0
 800ff3c:	f6bf ae58 	bge.w	800fbf0 <__ieee754_rem_pio2+0x78>
 800ff40:	6863      	ldr	r3, [r4, #4]
 800ff42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff46:	6063      	str	r3, [r4, #4]
 800ff48:	68e3      	ldr	r3, [r4, #12]
 800ff4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ff4e:	e746      	b.n	800fdde <__ieee754_rem_pio2+0x266>
 800ff50:	46d0      	mov	r8, sl
 800ff52:	e7dd      	b.n	800ff10 <__ieee754_rem_pio2+0x398>
 800ff54:	41700000 	.word	0x41700000
 800ff58:	08011258 	.word	0x08011258

0800ff5c <__ieee754_sqrt>:
 800ff5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff60:	4955      	ldr	r1, [pc, #340]	; (80100b8 <__ieee754_sqrt+0x15c>)
 800ff62:	ec55 4b10 	vmov	r4, r5, d0
 800ff66:	43a9      	bics	r1, r5
 800ff68:	462b      	mov	r3, r5
 800ff6a:	462a      	mov	r2, r5
 800ff6c:	d112      	bne.n	800ff94 <__ieee754_sqrt+0x38>
 800ff6e:	ee10 2a10 	vmov	r2, s0
 800ff72:	ee10 0a10 	vmov	r0, s0
 800ff76:	4629      	mov	r1, r5
 800ff78:	f7f0 fb3e 	bl	80005f8 <__aeabi_dmul>
 800ff7c:	4602      	mov	r2, r0
 800ff7e:	460b      	mov	r3, r1
 800ff80:	4620      	mov	r0, r4
 800ff82:	4629      	mov	r1, r5
 800ff84:	f7f0 f982 	bl	800028c <__adddf3>
 800ff88:	4604      	mov	r4, r0
 800ff8a:	460d      	mov	r5, r1
 800ff8c:	ec45 4b10 	vmov	d0, r4, r5
 800ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff94:	2d00      	cmp	r5, #0
 800ff96:	ee10 0a10 	vmov	r0, s0
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	dc0f      	bgt.n	800ffbe <__ieee754_sqrt+0x62>
 800ff9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800ffa2:	4330      	orrs	r0, r6
 800ffa4:	d0f2      	beq.n	800ff8c <__ieee754_sqrt+0x30>
 800ffa6:	b155      	cbz	r5, 800ffbe <__ieee754_sqrt+0x62>
 800ffa8:	ee10 2a10 	vmov	r2, s0
 800ffac:	4620      	mov	r0, r4
 800ffae:	4629      	mov	r1, r5
 800ffb0:	f7f0 f96a 	bl	8000288 <__aeabi_dsub>
 800ffb4:	4602      	mov	r2, r0
 800ffb6:	460b      	mov	r3, r1
 800ffb8:	f7f0 fc48 	bl	800084c <__aeabi_ddiv>
 800ffbc:	e7e4      	b.n	800ff88 <__ieee754_sqrt+0x2c>
 800ffbe:	151b      	asrs	r3, r3, #20
 800ffc0:	d073      	beq.n	80100aa <__ieee754_sqrt+0x14e>
 800ffc2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ffc6:	07dd      	lsls	r5, r3, #31
 800ffc8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800ffcc:	bf48      	it	mi
 800ffce:	0fc8      	lsrmi	r0, r1, #31
 800ffd0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ffd4:	bf44      	itt	mi
 800ffd6:	0049      	lslmi	r1, r1, #1
 800ffd8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800ffdc:	2500      	movs	r5, #0
 800ffde:	1058      	asrs	r0, r3, #1
 800ffe0:	0fcb      	lsrs	r3, r1, #31
 800ffe2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800ffe6:	0049      	lsls	r1, r1, #1
 800ffe8:	2316      	movs	r3, #22
 800ffea:	462c      	mov	r4, r5
 800ffec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800fff0:	19a7      	adds	r7, r4, r6
 800fff2:	4297      	cmp	r7, r2
 800fff4:	bfde      	ittt	le
 800fff6:	19bc      	addle	r4, r7, r6
 800fff8:	1bd2      	suble	r2, r2, r7
 800fffa:	19ad      	addle	r5, r5, r6
 800fffc:	0fcf      	lsrs	r7, r1, #31
 800fffe:	3b01      	subs	r3, #1
 8010000:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8010004:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8010008:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801000c:	d1f0      	bne.n	800fff0 <__ieee754_sqrt+0x94>
 801000e:	f04f 0c20 	mov.w	ip, #32
 8010012:	469e      	mov	lr, r3
 8010014:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8010018:	42a2      	cmp	r2, r4
 801001a:	eb06 070e 	add.w	r7, r6, lr
 801001e:	dc02      	bgt.n	8010026 <__ieee754_sqrt+0xca>
 8010020:	d112      	bne.n	8010048 <__ieee754_sqrt+0xec>
 8010022:	428f      	cmp	r7, r1
 8010024:	d810      	bhi.n	8010048 <__ieee754_sqrt+0xec>
 8010026:	2f00      	cmp	r7, #0
 8010028:	eb07 0e06 	add.w	lr, r7, r6
 801002c:	da42      	bge.n	80100b4 <__ieee754_sqrt+0x158>
 801002e:	f1be 0f00 	cmp.w	lr, #0
 8010032:	db3f      	blt.n	80100b4 <__ieee754_sqrt+0x158>
 8010034:	f104 0801 	add.w	r8, r4, #1
 8010038:	1b12      	subs	r2, r2, r4
 801003a:	428f      	cmp	r7, r1
 801003c:	bf88      	it	hi
 801003e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8010042:	1bc9      	subs	r1, r1, r7
 8010044:	4433      	add	r3, r6
 8010046:	4644      	mov	r4, r8
 8010048:	0052      	lsls	r2, r2, #1
 801004a:	f1bc 0c01 	subs.w	ip, ip, #1
 801004e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8010052:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8010056:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801005a:	d1dd      	bne.n	8010018 <__ieee754_sqrt+0xbc>
 801005c:	430a      	orrs	r2, r1
 801005e:	d006      	beq.n	801006e <__ieee754_sqrt+0x112>
 8010060:	1c5c      	adds	r4, r3, #1
 8010062:	bf13      	iteet	ne
 8010064:	3301      	addne	r3, #1
 8010066:	3501      	addeq	r5, #1
 8010068:	4663      	moveq	r3, ip
 801006a:	f023 0301 	bicne.w	r3, r3, #1
 801006e:	106a      	asrs	r2, r5, #1
 8010070:	085b      	lsrs	r3, r3, #1
 8010072:	07e9      	lsls	r1, r5, #31
 8010074:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8010078:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801007c:	bf48      	it	mi
 801007e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8010082:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8010086:	461c      	mov	r4, r3
 8010088:	e780      	b.n	800ff8c <__ieee754_sqrt+0x30>
 801008a:	0aca      	lsrs	r2, r1, #11
 801008c:	3815      	subs	r0, #21
 801008e:	0549      	lsls	r1, r1, #21
 8010090:	2a00      	cmp	r2, #0
 8010092:	d0fa      	beq.n	801008a <__ieee754_sqrt+0x12e>
 8010094:	02d6      	lsls	r6, r2, #11
 8010096:	d50a      	bpl.n	80100ae <__ieee754_sqrt+0x152>
 8010098:	f1c3 0420 	rsb	r4, r3, #32
 801009c:	fa21 f404 	lsr.w	r4, r1, r4
 80100a0:	1e5d      	subs	r5, r3, #1
 80100a2:	4099      	lsls	r1, r3
 80100a4:	4322      	orrs	r2, r4
 80100a6:	1b43      	subs	r3, r0, r5
 80100a8:	e78b      	b.n	800ffc2 <__ieee754_sqrt+0x66>
 80100aa:	4618      	mov	r0, r3
 80100ac:	e7f0      	b.n	8010090 <__ieee754_sqrt+0x134>
 80100ae:	0052      	lsls	r2, r2, #1
 80100b0:	3301      	adds	r3, #1
 80100b2:	e7ef      	b.n	8010094 <__ieee754_sqrt+0x138>
 80100b4:	46a0      	mov	r8, r4
 80100b6:	e7bf      	b.n	8010038 <__ieee754_sqrt+0xdc>
 80100b8:	7ff00000 	.word	0x7ff00000
 80100bc:	00000000 	.word	0x00000000

080100c0 <__kernel_cos>:
 80100c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100c4:	ec59 8b10 	vmov	r8, r9, d0
 80100c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80100cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80100d0:	ed2d 8b02 	vpush	{d8}
 80100d4:	eeb0 8a41 	vmov.f32	s16, s2
 80100d8:	eef0 8a61 	vmov.f32	s17, s3
 80100dc:	da07      	bge.n	80100ee <__kernel_cos+0x2e>
 80100de:	ee10 0a10 	vmov	r0, s0
 80100e2:	4649      	mov	r1, r9
 80100e4:	f7f0 fd38 	bl	8000b58 <__aeabi_d2iz>
 80100e8:	2800      	cmp	r0, #0
 80100ea:	f000 8089 	beq.w	8010200 <__kernel_cos+0x140>
 80100ee:	4642      	mov	r2, r8
 80100f0:	464b      	mov	r3, r9
 80100f2:	4640      	mov	r0, r8
 80100f4:	4649      	mov	r1, r9
 80100f6:	f7f0 fa7f 	bl	80005f8 <__aeabi_dmul>
 80100fa:	2200      	movs	r2, #0
 80100fc:	4b4e      	ldr	r3, [pc, #312]	; (8010238 <__kernel_cos+0x178>)
 80100fe:	4604      	mov	r4, r0
 8010100:	460d      	mov	r5, r1
 8010102:	f7f0 fa79 	bl	80005f8 <__aeabi_dmul>
 8010106:	a340      	add	r3, pc, #256	; (adr r3, 8010208 <__kernel_cos+0x148>)
 8010108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801010c:	4682      	mov	sl, r0
 801010e:	468b      	mov	fp, r1
 8010110:	4620      	mov	r0, r4
 8010112:	4629      	mov	r1, r5
 8010114:	f7f0 fa70 	bl	80005f8 <__aeabi_dmul>
 8010118:	a33d      	add	r3, pc, #244	; (adr r3, 8010210 <__kernel_cos+0x150>)
 801011a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801011e:	f7f0 f8b5 	bl	800028c <__adddf3>
 8010122:	4622      	mov	r2, r4
 8010124:	462b      	mov	r3, r5
 8010126:	f7f0 fa67 	bl	80005f8 <__aeabi_dmul>
 801012a:	a33b      	add	r3, pc, #236	; (adr r3, 8010218 <__kernel_cos+0x158>)
 801012c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010130:	f7f0 f8aa 	bl	8000288 <__aeabi_dsub>
 8010134:	4622      	mov	r2, r4
 8010136:	462b      	mov	r3, r5
 8010138:	f7f0 fa5e 	bl	80005f8 <__aeabi_dmul>
 801013c:	a338      	add	r3, pc, #224	; (adr r3, 8010220 <__kernel_cos+0x160>)
 801013e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010142:	f7f0 f8a3 	bl	800028c <__adddf3>
 8010146:	4622      	mov	r2, r4
 8010148:	462b      	mov	r3, r5
 801014a:	f7f0 fa55 	bl	80005f8 <__aeabi_dmul>
 801014e:	a336      	add	r3, pc, #216	; (adr r3, 8010228 <__kernel_cos+0x168>)
 8010150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010154:	f7f0 f898 	bl	8000288 <__aeabi_dsub>
 8010158:	4622      	mov	r2, r4
 801015a:	462b      	mov	r3, r5
 801015c:	f7f0 fa4c 	bl	80005f8 <__aeabi_dmul>
 8010160:	a333      	add	r3, pc, #204	; (adr r3, 8010230 <__kernel_cos+0x170>)
 8010162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010166:	f7f0 f891 	bl	800028c <__adddf3>
 801016a:	4622      	mov	r2, r4
 801016c:	462b      	mov	r3, r5
 801016e:	f7f0 fa43 	bl	80005f8 <__aeabi_dmul>
 8010172:	4622      	mov	r2, r4
 8010174:	462b      	mov	r3, r5
 8010176:	f7f0 fa3f 	bl	80005f8 <__aeabi_dmul>
 801017a:	ec53 2b18 	vmov	r2, r3, d8
 801017e:	4604      	mov	r4, r0
 8010180:	460d      	mov	r5, r1
 8010182:	4640      	mov	r0, r8
 8010184:	4649      	mov	r1, r9
 8010186:	f7f0 fa37 	bl	80005f8 <__aeabi_dmul>
 801018a:	460b      	mov	r3, r1
 801018c:	4602      	mov	r2, r0
 801018e:	4629      	mov	r1, r5
 8010190:	4620      	mov	r0, r4
 8010192:	f7f0 f879 	bl	8000288 <__aeabi_dsub>
 8010196:	4b29      	ldr	r3, [pc, #164]	; (801023c <__kernel_cos+0x17c>)
 8010198:	429e      	cmp	r6, r3
 801019a:	4680      	mov	r8, r0
 801019c:	4689      	mov	r9, r1
 801019e:	dc11      	bgt.n	80101c4 <__kernel_cos+0x104>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4650      	mov	r0, sl
 80101a6:	4659      	mov	r1, fp
 80101a8:	f7f0 f86e 	bl	8000288 <__aeabi_dsub>
 80101ac:	460b      	mov	r3, r1
 80101ae:	4924      	ldr	r1, [pc, #144]	; (8010240 <__kernel_cos+0x180>)
 80101b0:	4602      	mov	r2, r0
 80101b2:	2000      	movs	r0, #0
 80101b4:	f7f0 f868 	bl	8000288 <__aeabi_dsub>
 80101b8:	ecbd 8b02 	vpop	{d8}
 80101bc:	ec41 0b10 	vmov	d0, r0, r1
 80101c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101c4:	4b1f      	ldr	r3, [pc, #124]	; (8010244 <__kernel_cos+0x184>)
 80101c6:	491e      	ldr	r1, [pc, #120]	; (8010240 <__kernel_cos+0x180>)
 80101c8:	429e      	cmp	r6, r3
 80101ca:	bfcc      	ite	gt
 80101cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8010248 <__kernel_cos+0x188>)
 80101ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80101d2:	2400      	movs	r4, #0
 80101d4:	4622      	mov	r2, r4
 80101d6:	462b      	mov	r3, r5
 80101d8:	2000      	movs	r0, #0
 80101da:	f7f0 f855 	bl	8000288 <__aeabi_dsub>
 80101de:	4622      	mov	r2, r4
 80101e0:	4606      	mov	r6, r0
 80101e2:	460f      	mov	r7, r1
 80101e4:	462b      	mov	r3, r5
 80101e6:	4650      	mov	r0, sl
 80101e8:	4659      	mov	r1, fp
 80101ea:	f7f0 f84d 	bl	8000288 <__aeabi_dsub>
 80101ee:	4642      	mov	r2, r8
 80101f0:	464b      	mov	r3, r9
 80101f2:	f7f0 f849 	bl	8000288 <__aeabi_dsub>
 80101f6:	4602      	mov	r2, r0
 80101f8:	460b      	mov	r3, r1
 80101fa:	4630      	mov	r0, r6
 80101fc:	4639      	mov	r1, r7
 80101fe:	e7d9      	b.n	80101b4 <__kernel_cos+0xf4>
 8010200:	2000      	movs	r0, #0
 8010202:	490f      	ldr	r1, [pc, #60]	; (8010240 <__kernel_cos+0x180>)
 8010204:	e7d8      	b.n	80101b8 <__kernel_cos+0xf8>
 8010206:	bf00      	nop
 8010208:	be8838d4 	.word	0xbe8838d4
 801020c:	bda8fae9 	.word	0xbda8fae9
 8010210:	bdb4b1c4 	.word	0xbdb4b1c4
 8010214:	3e21ee9e 	.word	0x3e21ee9e
 8010218:	809c52ad 	.word	0x809c52ad
 801021c:	3e927e4f 	.word	0x3e927e4f
 8010220:	19cb1590 	.word	0x19cb1590
 8010224:	3efa01a0 	.word	0x3efa01a0
 8010228:	16c15177 	.word	0x16c15177
 801022c:	3f56c16c 	.word	0x3f56c16c
 8010230:	5555554c 	.word	0x5555554c
 8010234:	3fa55555 	.word	0x3fa55555
 8010238:	3fe00000 	.word	0x3fe00000
 801023c:	3fd33332 	.word	0x3fd33332
 8010240:	3ff00000 	.word	0x3ff00000
 8010244:	3fe90000 	.word	0x3fe90000
 8010248:	3fd20000 	.word	0x3fd20000
 801024c:	00000000 	.word	0x00000000

08010250 <__kernel_rem_pio2>:
 8010250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010254:	ed2d 8b02 	vpush	{d8}
 8010258:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 801025c:	1ed4      	subs	r4, r2, #3
 801025e:	9308      	str	r3, [sp, #32]
 8010260:	9101      	str	r1, [sp, #4]
 8010262:	4bc5      	ldr	r3, [pc, #788]	; (8010578 <__kernel_rem_pio2+0x328>)
 8010264:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8010266:	9009      	str	r0, [sp, #36]	; 0x24
 8010268:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801026c:	9304      	str	r3, [sp, #16]
 801026e:	9b08      	ldr	r3, [sp, #32]
 8010270:	3b01      	subs	r3, #1
 8010272:	9307      	str	r3, [sp, #28]
 8010274:	2318      	movs	r3, #24
 8010276:	fb94 f4f3 	sdiv	r4, r4, r3
 801027a:	f06f 0317 	mvn.w	r3, #23
 801027e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8010282:	fb04 3303 	mla	r3, r4, r3, r3
 8010286:	eb03 0a02 	add.w	sl, r3, r2
 801028a:	9b04      	ldr	r3, [sp, #16]
 801028c:	9a07      	ldr	r2, [sp, #28]
 801028e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010568 <__kernel_rem_pio2+0x318>
 8010292:	eb03 0802 	add.w	r8, r3, r2
 8010296:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010298:	1aa7      	subs	r7, r4, r2
 801029a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801029e:	ae22      	add	r6, sp, #136	; 0x88
 80102a0:	2500      	movs	r5, #0
 80102a2:	4545      	cmp	r5, r8
 80102a4:	dd13      	ble.n	80102ce <__kernel_rem_pio2+0x7e>
 80102a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8010568 <__kernel_rem_pio2+0x318>
 80102aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80102ae:	2600      	movs	r6, #0
 80102b0:	9b04      	ldr	r3, [sp, #16]
 80102b2:	429e      	cmp	r6, r3
 80102b4:	dc32      	bgt.n	801031c <__kernel_rem_pio2+0xcc>
 80102b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80102b8:	9302      	str	r3, [sp, #8]
 80102ba:	9b08      	ldr	r3, [sp, #32]
 80102bc:	199d      	adds	r5, r3, r6
 80102be:	ab22      	add	r3, sp, #136	; 0x88
 80102c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80102c4:	9306      	str	r3, [sp, #24]
 80102c6:	ec59 8b18 	vmov	r8, r9, d8
 80102ca:	2700      	movs	r7, #0
 80102cc:	e01f      	b.n	801030e <__kernel_rem_pio2+0xbe>
 80102ce:	42ef      	cmn	r7, r5
 80102d0:	d407      	bmi.n	80102e2 <__kernel_rem_pio2+0x92>
 80102d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80102d6:	f7f0 f925 	bl	8000524 <__aeabi_i2d>
 80102da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80102de:	3501      	adds	r5, #1
 80102e0:	e7df      	b.n	80102a2 <__kernel_rem_pio2+0x52>
 80102e2:	ec51 0b18 	vmov	r0, r1, d8
 80102e6:	e7f8      	b.n	80102da <__kernel_rem_pio2+0x8a>
 80102e8:	9906      	ldr	r1, [sp, #24]
 80102ea:	9d02      	ldr	r5, [sp, #8]
 80102ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80102f0:	9106      	str	r1, [sp, #24]
 80102f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80102f6:	9502      	str	r5, [sp, #8]
 80102f8:	f7f0 f97e 	bl	80005f8 <__aeabi_dmul>
 80102fc:	4602      	mov	r2, r0
 80102fe:	460b      	mov	r3, r1
 8010300:	4640      	mov	r0, r8
 8010302:	4649      	mov	r1, r9
 8010304:	f7ef ffc2 	bl	800028c <__adddf3>
 8010308:	3701      	adds	r7, #1
 801030a:	4680      	mov	r8, r0
 801030c:	4689      	mov	r9, r1
 801030e:	9b07      	ldr	r3, [sp, #28]
 8010310:	429f      	cmp	r7, r3
 8010312:	dde9      	ble.n	80102e8 <__kernel_rem_pio2+0x98>
 8010314:	e8eb 8902 	strd	r8, r9, [fp], #8
 8010318:	3601      	adds	r6, #1
 801031a:	e7c9      	b.n	80102b0 <__kernel_rem_pio2+0x60>
 801031c:	9b04      	ldr	r3, [sp, #16]
 801031e:	aa0e      	add	r2, sp, #56	; 0x38
 8010320:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010324:	930c      	str	r3, [sp, #48]	; 0x30
 8010326:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010328:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801032c:	9c04      	ldr	r4, [sp, #16]
 801032e:	930b      	str	r3, [sp, #44]	; 0x2c
 8010330:	ab9a      	add	r3, sp, #616	; 0x268
 8010332:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8010336:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801033a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801033e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8010342:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8010346:	ab9a      	add	r3, sp, #616	; 0x268
 8010348:	445b      	add	r3, fp
 801034a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 801034e:	2500      	movs	r5, #0
 8010350:	1b63      	subs	r3, r4, r5
 8010352:	2b00      	cmp	r3, #0
 8010354:	dc78      	bgt.n	8010448 <__kernel_rem_pio2+0x1f8>
 8010356:	4650      	mov	r0, sl
 8010358:	ec49 8b10 	vmov	d0, r8, r9
 801035c:	f000 fc04 	bl	8010b68 <scalbn>
 8010360:	ec57 6b10 	vmov	r6, r7, d0
 8010364:	2200      	movs	r2, #0
 8010366:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801036a:	ee10 0a10 	vmov	r0, s0
 801036e:	4639      	mov	r1, r7
 8010370:	f7f0 f942 	bl	80005f8 <__aeabi_dmul>
 8010374:	ec41 0b10 	vmov	d0, r0, r1
 8010378:	f000 fb6e 	bl	8010a58 <floor>
 801037c:	2200      	movs	r2, #0
 801037e:	ec51 0b10 	vmov	r0, r1, d0
 8010382:	4b7e      	ldr	r3, [pc, #504]	; (801057c <__kernel_rem_pio2+0x32c>)
 8010384:	f7f0 f938 	bl	80005f8 <__aeabi_dmul>
 8010388:	4602      	mov	r2, r0
 801038a:	460b      	mov	r3, r1
 801038c:	4630      	mov	r0, r6
 801038e:	4639      	mov	r1, r7
 8010390:	f7ef ff7a 	bl	8000288 <__aeabi_dsub>
 8010394:	460f      	mov	r7, r1
 8010396:	4606      	mov	r6, r0
 8010398:	f7f0 fbde 	bl	8000b58 <__aeabi_d2iz>
 801039c:	9006      	str	r0, [sp, #24]
 801039e:	f7f0 f8c1 	bl	8000524 <__aeabi_i2d>
 80103a2:	4602      	mov	r2, r0
 80103a4:	460b      	mov	r3, r1
 80103a6:	4630      	mov	r0, r6
 80103a8:	4639      	mov	r1, r7
 80103aa:	f7ef ff6d 	bl	8000288 <__aeabi_dsub>
 80103ae:	f1ba 0f00 	cmp.w	sl, #0
 80103b2:	4606      	mov	r6, r0
 80103b4:	460f      	mov	r7, r1
 80103b6:	dd6c      	ble.n	8010492 <__kernel_rem_pio2+0x242>
 80103b8:	1e62      	subs	r2, r4, #1
 80103ba:	ab0e      	add	r3, sp, #56	; 0x38
 80103bc:	f1ca 0118 	rsb	r1, sl, #24
 80103c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80103c4:	9d06      	ldr	r5, [sp, #24]
 80103c6:	fa40 f301 	asr.w	r3, r0, r1
 80103ca:	441d      	add	r5, r3
 80103cc:	408b      	lsls	r3, r1
 80103ce:	1ac0      	subs	r0, r0, r3
 80103d0:	ab0e      	add	r3, sp, #56	; 0x38
 80103d2:	9506      	str	r5, [sp, #24]
 80103d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80103d8:	f1ca 0317 	rsb	r3, sl, #23
 80103dc:	fa40 f303 	asr.w	r3, r0, r3
 80103e0:	9302      	str	r3, [sp, #8]
 80103e2:	9b02      	ldr	r3, [sp, #8]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	dd62      	ble.n	80104ae <__kernel_rem_pio2+0x25e>
 80103e8:	9b06      	ldr	r3, [sp, #24]
 80103ea:	2200      	movs	r2, #0
 80103ec:	3301      	adds	r3, #1
 80103ee:	9306      	str	r3, [sp, #24]
 80103f0:	4615      	mov	r5, r2
 80103f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80103f6:	4294      	cmp	r4, r2
 80103f8:	f300 8095 	bgt.w	8010526 <__kernel_rem_pio2+0x2d6>
 80103fc:	f1ba 0f00 	cmp.w	sl, #0
 8010400:	dd07      	ble.n	8010412 <__kernel_rem_pio2+0x1c2>
 8010402:	f1ba 0f01 	cmp.w	sl, #1
 8010406:	f000 80a2 	beq.w	801054e <__kernel_rem_pio2+0x2fe>
 801040a:	f1ba 0f02 	cmp.w	sl, #2
 801040e:	f000 80c1 	beq.w	8010594 <__kernel_rem_pio2+0x344>
 8010412:	9b02      	ldr	r3, [sp, #8]
 8010414:	2b02      	cmp	r3, #2
 8010416:	d14a      	bne.n	80104ae <__kernel_rem_pio2+0x25e>
 8010418:	4632      	mov	r2, r6
 801041a:	463b      	mov	r3, r7
 801041c:	2000      	movs	r0, #0
 801041e:	4958      	ldr	r1, [pc, #352]	; (8010580 <__kernel_rem_pio2+0x330>)
 8010420:	f7ef ff32 	bl	8000288 <__aeabi_dsub>
 8010424:	4606      	mov	r6, r0
 8010426:	460f      	mov	r7, r1
 8010428:	2d00      	cmp	r5, #0
 801042a:	d040      	beq.n	80104ae <__kernel_rem_pio2+0x25e>
 801042c:	4650      	mov	r0, sl
 801042e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010570 <__kernel_rem_pio2+0x320>
 8010432:	f000 fb99 	bl	8010b68 <scalbn>
 8010436:	4630      	mov	r0, r6
 8010438:	4639      	mov	r1, r7
 801043a:	ec53 2b10 	vmov	r2, r3, d0
 801043e:	f7ef ff23 	bl	8000288 <__aeabi_dsub>
 8010442:	4606      	mov	r6, r0
 8010444:	460f      	mov	r7, r1
 8010446:	e032      	b.n	80104ae <__kernel_rem_pio2+0x25e>
 8010448:	2200      	movs	r2, #0
 801044a:	4b4e      	ldr	r3, [pc, #312]	; (8010584 <__kernel_rem_pio2+0x334>)
 801044c:	4640      	mov	r0, r8
 801044e:	4649      	mov	r1, r9
 8010450:	f7f0 f8d2 	bl	80005f8 <__aeabi_dmul>
 8010454:	f7f0 fb80 	bl	8000b58 <__aeabi_d2iz>
 8010458:	f7f0 f864 	bl	8000524 <__aeabi_i2d>
 801045c:	2200      	movs	r2, #0
 801045e:	4b4a      	ldr	r3, [pc, #296]	; (8010588 <__kernel_rem_pio2+0x338>)
 8010460:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010464:	f7f0 f8c8 	bl	80005f8 <__aeabi_dmul>
 8010468:	4602      	mov	r2, r0
 801046a:	460b      	mov	r3, r1
 801046c:	4640      	mov	r0, r8
 801046e:	4649      	mov	r1, r9
 8010470:	f7ef ff0a 	bl	8000288 <__aeabi_dsub>
 8010474:	f7f0 fb70 	bl	8000b58 <__aeabi_d2iz>
 8010478:	ab0e      	add	r3, sp, #56	; 0x38
 801047a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 801047e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8010482:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010486:	f7ef ff01 	bl	800028c <__adddf3>
 801048a:	3501      	adds	r5, #1
 801048c:	4680      	mov	r8, r0
 801048e:	4689      	mov	r9, r1
 8010490:	e75e      	b.n	8010350 <__kernel_rem_pio2+0x100>
 8010492:	d105      	bne.n	80104a0 <__kernel_rem_pio2+0x250>
 8010494:	1e63      	subs	r3, r4, #1
 8010496:	aa0e      	add	r2, sp, #56	; 0x38
 8010498:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801049c:	15c3      	asrs	r3, r0, #23
 801049e:	e79f      	b.n	80103e0 <__kernel_rem_pio2+0x190>
 80104a0:	2200      	movs	r2, #0
 80104a2:	4b3a      	ldr	r3, [pc, #232]	; (801058c <__kernel_rem_pio2+0x33c>)
 80104a4:	f7f0 fb2e 	bl	8000b04 <__aeabi_dcmpge>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	d139      	bne.n	8010520 <__kernel_rem_pio2+0x2d0>
 80104ac:	9002      	str	r0, [sp, #8]
 80104ae:	2200      	movs	r2, #0
 80104b0:	2300      	movs	r3, #0
 80104b2:	4630      	mov	r0, r6
 80104b4:	4639      	mov	r1, r7
 80104b6:	f7f0 fb07 	bl	8000ac8 <__aeabi_dcmpeq>
 80104ba:	2800      	cmp	r0, #0
 80104bc:	f000 80c7 	beq.w	801064e <__kernel_rem_pio2+0x3fe>
 80104c0:	1e65      	subs	r5, r4, #1
 80104c2:	462b      	mov	r3, r5
 80104c4:	2200      	movs	r2, #0
 80104c6:	9904      	ldr	r1, [sp, #16]
 80104c8:	428b      	cmp	r3, r1
 80104ca:	da6a      	bge.n	80105a2 <__kernel_rem_pio2+0x352>
 80104cc:	2a00      	cmp	r2, #0
 80104ce:	f000 8088 	beq.w	80105e2 <__kernel_rem_pio2+0x392>
 80104d2:	ab0e      	add	r3, sp, #56	; 0x38
 80104d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80104d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80104dc:	2b00      	cmp	r3, #0
 80104de:	f000 80b4 	beq.w	801064a <__kernel_rem_pio2+0x3fa>
 80104e2:	4650      	mov	r0, sl
 80104e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8010570 <__kernel_rem_pio2+0x320>
 80104e8:	f000 fb3e 	bl	8010b68 <scalbn>
 80104ec:	00ec      	lsls	r4, r5, #3
 80104ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80104f0:	191e      	adds	r6, r3, r4
 80104f2:	ec59 8b10 	vmov	r8, r9, d0
 80104f6:	f106 0a08 	add.w	sl, r6, #8
 80104fa:	462f      	mov	r7, r5
 80104fc:	2f00      	cmp	r7, #0
 80104fe:	f280 80df 	bge.w	80106c0 <__kernel_rem_pio2+0x470>
 8010502:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8010568 <__kernel_rem_pio2+0x318>
 8010506:	f04f 0a00 	mov.w	sl, #0
 801050a:	eba5 030a 	sub.w	r3, r5, sl
 801050e:	2b00      	cmp	r3, #0
 8010510:	f2c0 810a 	blt.w	8010728 <__kernel_rem_pio2+0x4d8>
 8010514:	f8df b078 	ldr.w	fp, [pc, #120]	; 8010590 <__kernel_rem_pio2+0x340>
 8010518:	ec59 8b18 	vmov	r8, r9, d8
 801051c:	2700      	movs	r7, #0
 801051e:	e0f5      	b.n	801070c <__kernel_rem_pio2+0x4bc>
 8010520:	2302      	movs	r3, #2
 8010522:	9302      	str	r3, [sp, #8]
 8010524:	e760      	b.n	80103e8 <__kernel_rem_pio2+0x198>
 8010526:	ab0e      	add	r3, sp, #56	; 0x38
 8010528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801052c:	b94d      	cbnz	r5, 8010542 <__kernel_rem_pio2+0x2f2>
 801052e:	b12b      	cbz	r3, 801053c <__kernel_rem_pio2+0x2ec>
 8010530:	a80e      	add	r0, sp, #56	; 0x38
 8010532:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010536:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801053a:	2301      	movs	r3, #1
 801053c:	3201      	adds	r2, #1
 801053e:	461d      	mov	r5, r3
 8010540:	e759      	b.n	80103f6 <__kernel_rem_pio2+0x1a6>
 8010542:	a80e      	add	r0, sp, #56	; 0x38
 8010544:	1acb      	subs	r3, r1, r3
 8010546:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801054a:	462b      	mov	r3, r5
 801054c:	e7f6      	b.n	801053c <__kernel_rem_pio2+0x2ec>
 801054e:	1e62      	subs	r2, r4, #1
 8010550:	ab0e      	add	r3, sp, #56	; 0x38
 8010552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010556:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801055a:	a90e      	add	r1, sp, #56	; 0x38
 801055c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010560:	e757      	b.n	8010412 <__kernel_rem_pio2+0x1c2>
 8010562:	bf00      	nop
 8010564:	f3af 8000 	nop.w
	...
 8010574:	3ff00000 	.word	0x3ff00000
 8010578:	080113a0 	.word	0x080113a0
 801057c:	40200000 	.word	0x40200000
 8010580:	3ff00000 	.word	0x3ff00000
 8010584:	3e700000 	.word	0x3e700000
 8010588:	41700000 	.word	0x41700000
 801058c:	3fe00000 	.word	0x3fe00000
 8010590:	08011360 	.word	0x08011360
 8010594:	1e62      	subs	r2, r4, #1
 8010596:	ab0e      	add	r3, sp, #56	; 0x38
 8010598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801059c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80105a0:	e7db      	b.n	801055a <__kernel_rem_pio2+0x30a>
 80105a2:	a90e      	add	r1, sp, #56	; 0x38
 80105a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80105a8:	3b01      	subs	r3, #1
 80105aa:	430a      	orrs	r2, r1
 80105ac:	e78b      	b.n	80104c6 <__kernel_rem_pio2+0x276>
 80105ae:	3301      	adds	r3, #1
 80105b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80105b4:	2900      	cmp	r1, #0
 80105b6:	d0fa      	beq.n	80105ae <__kernel_rem_pio2+0x35e>
 80105b8:	9a08      	ldr	r2, [sp, #32]
 80105ba:	4422      	add	r2, r4
 80105bc:	00d2      	lsls	r2, r2, #3
 80105be:	a922      	add	r1, sp, #136	; 0x88
 80105c0:	18e3      	adds	r3, r4, r3
 80105c2:	9206      	str	r2, [sp, #24]
 80105c4:	440a      	add	r2, r1
 80105c6:	9302      	str	r3, [sp, #8]
 80105c8:	f10b 0108 	add.w	r1, fp, #8
 80105cc:	f102 0308 	add.w	r3, r2, #8
 80105d0:	1c66      	adds	r6, r4, #1
 80105d2:	910a      	str	r1, [sp, #40]	; 0x28
 80105d4:	2500      	movs	r5, #0
 80105d6:	930d      	str	r3, [sp, #52]	; 0x34
 80105d8:	9b02      	ldr	r3, [sp, #8]
 80105da:	42b3      	cmp	r3, r6
 80105dc:	da04      	bge.n	80105e8 <__kernel_rem_pio2+0x398>
 80105de:	461c      	mov	r4, r3
 80105e0:	e6a6      	b.n	8010330 <__kernel_rem_pio2+0xe0>
 80105e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80105e4:	2301      	movs	r3, #1
 80105e6:	e7e3      	b.n	80105b0 <__kernel_rem_pio2+0x360>
 80105e8:	9b06      	ldr	r3, [sp, #24]
 80105ea:	18ef      	adds	r7, r5, r3
 80105ec:	ab22      	add	r3, sp, #136	; 0x88
 80105ee:	441f      	add	r7, r3
 80105f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80105f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80105f6:	f7ef ff95 	bl	8000524 <__aeabi_i2d>
 80105fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105fc:	461c      	mov	r4, r3
 80105fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010600:	e9c7 0100 	strd	r0, r1, [r7]
 8010604:	eb03 0b05 	add.w	fp, r3, r5
 8010608:	2700      	movs	r7, #0
 801060a:	f04f 0800 	mov.w	r8, #0
 801060e:	f04f 0900 	mov.w	r9, #0
 8010612:	9b07      	ldr	r3, [sp, #28]
 8010614:	429f      	cmp	r7, r3
 8010616:	dd08      	ble.n	801062a <__kernel_rem_pio2+0x3da>
 8010618:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801061a:	aa72      	add	r2, sp, #456	; 0x1c8
 801061c:	18eb      	adds	r3, r5, r3
 801061e:	4413      	add	r3, r2
 8010620:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8010624:	3601      	adds	r6, #1
 8010626:	3508      	adds	r5, #8
 8010628:	e7d6      	b.n	80105d8 <__kernel_rem_pio2+0x388>
 801062a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801062e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8010632:	f7ef ffe1 	bl	80005f8 <__aeabi_dmul>
 8010636:	4602      	mov	r2, r0
 8010638:	460b      	mov	r3, r1
 801063a:	4640      	mov	r0, r8
 801063c:	4649      	mov	r1, r9
 801063e:	f7ef fe25 	bl	800028c <__adddf3>
 8010642:	3701      	adds	r7, #1
 8010644:	4680      	mov	r8, r0
 8010646:	4689      	mov	r9, r1
 8010648:	e7e3      	b.n	8010612 <__kernel_rem_pio2+0x3c2>
 801064a:	3d01      	subs	r5, #1
 801064c:	e741      	b.n	80104d2 <__kernel_rem_pio2+0x282>
 801064e:	f1ca 0000 	rsb	r0, sl, #0
 8010652:	ec47 6b10 	vmov	d0, r6, r7
 8010656:	f000 fa87 	bl	8010b68 <scalbn>
 801065a:	ec57 6b10 	vmov	r6, r7, d0
 801065e:	2200      	movs	r2, #0
 8010660:	4b99      	ldr	r3, [pc, #612]	; (80108c8 <__kernel_rem_pio2+0x678>)
 8010662:	ee10 0a10 	vmov	r0, s0
 8010666:	4639      	mov	r1, r7
 8010668:	f7f0 fa4c 	bl	8000b04 <__aeabi_dcmpge>
 801066c:	b1f8      	cbz	r0, 80106ae <__kernel_rem_pio2+0x45e>
 801066e:	2200      	movs	r2, #0
 8010670:	4b96      	ldr	r3, [pc, #600]	; (80108cc <__kernel_rem_pio2+0x67c>)
 8010672:	4630      	mov	r0, r6
 8010674:	4639      	mov	r1, r7
 8010676:	f7ef ffbf 	bl	80005f8 <__aeabi_dmul>
 801067a:	f7f0 fa6d 	bl	8000b58 <__aeabi_d2iz>
 801067e:	4680      	mov	r8, r0
 8010680:	f7ef ff50 	bl	8000524 <__aeabi_i2d>
 8010684:	2200      	movs	r2, #0
 8010686:	4b90      	ldr	r3, [pc, #576]	; (80108c8 <__kernel_rem_pio2+0x678>)
 8010688:	f7ef ffb6 	bl	80005f8 <__aeabi_dmul>
 801068c:	460b      	mov	r3, r1
 801068e:	4602      	mov	r2, r0
 8010690:	4639      	mov	r1, r7
 8010692:	4630      	mov	r0, r6
 8010694:	f7ef fdf8 	bl	8000288 <__aeabi_dsub>
 8010698:	f7f0 fa5e 	bl	8000b58 <__aeabi_d2iz>
 801069c:	1c65      	adds	r5, r4, #1
 801069e:	ab0e      	add	r3, sp, #56	; 0x38
 80106a0:	f10a 0a18 	add.w	sl, sl, #24
 80106a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80106a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80106ac:	e719      	b.n	80104e2 <__kernel_rem_pio2+0x292>
 80106ae:	4630      	mov	r0, r6
 80106b0:	4639      	mov	r1, r7
 80106b2:	f7f0 fa51 	bl	8000b58 <__aeabi_d2iz>
 80106b6:	ab0e      	add	r3, sp, #56	; 0x38
 80106b8:	4625      	mov	r5, r4
 80106ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80106be:	e710      	b.n	80104e2 <__kernel_rem_pio2+0x292>
 80106c0:	ab0e      	add	r3, sp, #56	; 0x38
 80106c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80106c6:	f7ef ff2d 	bl	8000524 <__aeabi_i2d>
 80106ca:	4642      	mov	r2, r8
 80106cc:	464b      	mov	r3, r9
 80106ce:	f7ef ff93 	bl	80005f8 <__aeabi_dmul>
 80106d2:	2200      	movs	r2, #0
 80106d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80106d8:	4b7c      	ldr	r3, [pc, #496]	; (80108cc <__kernel_rem_pio2+0x67c>)
 80106da:	4640      	mov	r0, r8
 80106dc:	4649      	mov	r1, r9
 80106de:	f7ef ff8b 	bl	80005f8 <__aeabi_dmul>
 80106e2:	3f01      	subs	r7, #1
 80106e4:	4680      	mov	r8, r0
 80106e6:	4689      	mov	r9, r1
 80106e8:	e708      	b.n	80104fc <__kernel_rem_pio2+0x2ac>
 80106ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80106ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80106f6:	f7ef ff7f 	bl	80005f8 <__aeabi_dmul>
 80106fa:	4602      	mov	r2, r0
 80106fc:	460b      	mov	r3, r1
 80106fe:	4640      	mov	r0, r8
 8010700:	4649      	mov	r1, r9
 8010702:	f7ef fdc3 	bl	800028c <__adddf3>
 8010706:	3701      	adds	r7, #1
 8010708:	4680      	mov	r8, r0
 801070a:	4689      	mov	r9, r1
 801070c:	9b04      	ldr	r3, [sp, #16]
 801070e:	429f      	cmp	r7, r3
 8010710:	dc01      	bgt.n	8010716 <__kernel_rem_pio2+0x4c6>
 8010712:	45ba      	cmp	sl, r7
 8010714:	dae9      	bge.n	80106ea <__kernel_rem_pio2+0x49a>
 8010716:	ab4a      	add	r3, sp, #296	; 0x128
 8010718:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801071c:	e9c3 8900 	strd	r8, r9, [r3]
 8010720:	f10a 0a01 	add.w	sl, sl, #1
 8010724:	3e08      	subs	r6, #8
 8010726:	e6f0      	b.n	801050a <__kernel_rem_pio2+0x2ba>
 8010728:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801072a:	2b03      	cmp	r3, #3
 801072c:	d85b      	bhi.n	80107e6 <__kernel_rem_pio2+0x596>
 801072e:	e8df f003 	tbb	[pc, r3]
 8010732:	264a      	.short	0x264a
 8010734:	0226      	.short	0x0226
 8010736:	ab9a      	add	r3, sp, #616	; 0x268
 8010738:	441c      	add	r4, r3
 801073a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801073e:	46a2      	mov	sl, r4
 8010740:	46ab      	mov	fp, r5
 8010742:	f1bb 0f00 	cmp.w	fp, #0
 8010746:	dc6c      	bgt.n	8010822 <__kernel_rem_pio2+0x5d2>
 8010748:	46a2      	mov	sl, r4
 801074a:	46ab      	mov	fp, r5
 801074c:	f1bb 0f01 	cmp.w	fp, #1
 8010750:	f300 8086 	bgt.w	8010860 <__kernel_rem_pio2+0x610>
 8010754:	2000      	movs	r0, #0
 8010756:	2100      	movs	r1, #0
 8010758:	2d01      	cmp	r5, #1
 801075a:	f300 80a0 	bgt.w	801089e <__kernel_rem_pio2+0x64e>
 801075e:	9b02      	ldr	r3, [sp, #8]
 8010760:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010764:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8010768:	2b00      	cmp	r3, #0
 801076a:	f040 809e 	bne.w	80108aa <__kernel_rem_pio2+0x65a>
 801076e:	9b01      	ldr	r3, [sp, #4]
 8010770:	e9c3 7800 	strd	r7, r8, [r3]
 8010774:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8010778:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801077c:	e033      	b.n	80107e6 <__kernel_rem_pio2+0x596>
 801077e:	3408      	adds	r4, #8
 8010780:	ab4a      	add	r3, sp, #296	; 0x128
 8010782:	441c      	add	r4, r3
 8010784:	462e      	mov	r6, r5
 8010786:	2000      	movs	r0, #0
 8010788:	2100      	movs	r1, #0
 801078a:	2e00      	cmp	r6, #0
 801078c:	da3a      	bge.n	8010804 <__kernel_rem_pio2+0x5b4>
 801078e:	9b02      	ldr	r3, [sp, #8]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d03d      	beq.n	8010810 <__kernel_rem_pio2+0x5c0>
 8010794:	4602      	mov	r2, r0
 8010796:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801079a:	9c01      	ldr	r4, [sp, #4]
 801079c:	e9c4 2300 	strd	r2, r3, [r4]
 80107a0:	4602      	mov	r2, r0
 80107a2:	460b      	mov	r3, r1
 80107a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80107a8:	f7ef fd6e 	bl	8000288 <__aeabi_dsub>
 80107ac:	ae4c      	add	r6, sp, #304	; 0x130
 80107ae:	2401      	movs	r4, #1
 80107b0:	42a5      	cmp	r5, r4
 80107b2:	da30      	bge.n	8010816 <__kernel_rem_pio2+0x5c6>
 80107b4:	9b02      	ldr	r3, [sp, #8]
 80107b6:	b113      	cbz	r3, 80107be <__kernel_rem_pio2+0x56e>
 80107b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107bc:	4619      	mov	r1, r3
 80107be:	9b01      	ldr	r3, [sp, #4]
 80107c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80107c4:	e00f      	b.n	80107e6 <__kernel_rem_pio2+0x596>
 80107c6:	ab9a      	add	r3, sp, #616	; 0x268
 80107c8:	441c      	add	r4, r3
 80107ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80107ce:	2000      	movs	r0, #0
 80107d0:	2100      	movs	r1, #0
 80107d2:	2d00      	cmp	r5, #0
 80107d4:	da10      	bge.n	80107f8 <__kernel_rem_pio2+0x5a8>
 80107d6:	9b02      	ldr	r3, [sp, #8]
 80107d8:	b113      	cbz	r3, 80107e0 <__kernel_rem_pio2+0x590>
 80107da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80107de:	4619      	mov	r1, r3
 80107e0:	9b01      	ldr	r3, [sp, #4]
 80107e2:	e9c3 0100 	strd	r0, r1, [r3]
 80107e6:	9b06      	ldr	r3, [sp, #24]
 80107e8:	f003 0007 	and.w	r0, r3, #7
 80107ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80107f0:	ecbd 8b02 	vpop	{d8}
 80107f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80107fc:	f7ef fd46 	bl	800028c <__adddf3>
 8010800:	3d01      	subs	r5, #1
 8010802:	e7e6      	b.n	80107d2 <__kernel_rem_pio2+0x582>
 8010804:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010808:	f7ef fd40 	bl	800028c <__adddf3>
 801080c:	3e01      	subs	r6, #1
 801080e:	e7bc      	b.n	801078a <__kernel_rem_pio2+0x53a>
 8010810:	4602      	mov	r2, r0
 8010812:	460b      	mov	r3, r1
 8010814:	e7c1      	b.n	801079a <__kernel_rem_pio2+0x54a>
 8010816:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801081a:	f7ef fd37 	bl	800028c <__adddf3>
 801081e:	3401      	adds	r4, #1
 8010820:	e7c6      	b.n	80107b0 <__kernel_rem_pio2+0x560>
 8010822:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8010826:	ed3a 7b02 	vldmdb	sl!, {d7}
 801082a:	4640      	mov	r0, r8
 801082c:	ec53 2b17 	vmov	r2, r3, d7
 8010830:	4649      	mov	r1, r9
 8010832:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010836:	f7ef fd29 	bl	800028c <__adddf3>
 801083a:	4602      	mov	r2, r0
 801083c:	460b      	mov	r3, r1
 801083e:	4606      	mov	r6, r0
 8010840:	460f      	mov	r7, r1
 8010842:	4640      	mov	r0, r8
 8010844:	4649      	mov	r1, r9
 8010846:	f7ef fd1f 	bl	8000288 <__aeabi_dsub>
 801084a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801084e:	f7ef fd1d 	bl	800028c <__adddf3>
 8010852:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010856:	e9ca 0100 	strd	r0, r1, [sl]
 801085a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 801085e:	e770      	b.n	8010742 <__kernel_rem_pio2+0x4f2>
 8010860:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8010864:	ed3a 7b02 	vldmdb	sl!, {d7}
 8010868:	4630      	mov	r0, r6
 801086a:	ec53 2b17 	vmov	r2, r3, d7
 801086e:	4639      	mov	r1, r7
 8010870:	ed8d 7b04 	vstr	d7, [sp, #16]
 8010874:	f7ef fd0a 	bl	800028c <__adddf3>
 8010878:	4602      	mov	r2, r0
 801087a:	460b      	mov	r3, r1
 801087c:	4680      	mov	r8, r0
 801087e:	4689      	mov	r9, r1
 8010880:	4630      	mov	r0, r6
 8010882:	4639      	mov	r1, r7
 8010884:	f7ef fd00 	bl	8000288 <__aeabi_dsub>
 8010888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801088c:	f7ef fcfe 	bl	800028c <__adddf3>
 8010890:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8010894:	e9ca 0100 	strd	r0, r1, [sl]
 8010898:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801089c:	e756      	b.n	801074c <__kernel_rem_pio2+0x4fc>
 801089e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80108a2:	f7ef fcf3 	bl	800028c <__adddf3>
 80108a6:	3d01      	subs	r5, #1
 80108a8:	e756      	b.n	8010758 <__kernel_rem_pio2+0x508>
 80108aa:	9b01      	ldr	r3, [sp, #4]
 80108ac:	9a01      	ldr	r2, [sp, #4]
 80108ae:	601f      	str	r7, [r3, #0]
 80108b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80108b4:	605c      	str	r4, [r3, #4]
 80108b6:	609d      	str	r5, [r3, #8]
 80108b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80108bc:	60d3      	str	r3, [r2, #12]
 80108be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80108c2:	6110      	str	r0, [r2, #16]
 80108c4:	6153      	str	r3, [r2, #20]
 80108c6:	e78e      	b.n	80107e6 <__kernel_rem_pio2+0x596>
 80108c8:	41700000 	.word	0x41700000
 80108cc:	3e700000 	.word	0x3e700000

080108d0 <__kernel_sin>:
 80108d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d4:	ec55 4b10 	vmov	r4, r5, d0
 80108d8:	b085      	sub	sp, #20
 80108da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80108de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80108e2:	ed8d 1b00 	vstr	d1, [sp]
 80108e6:	9002      	str	r0, [sp, #8]
 80108e8:	da06      	bge.n	80108f8 <__kernel_sin+0x28>
 80108ea:	ee10 0a10 	vmov	r0, s0
 80108ee:	4629      	mov	r1, r5
 80108f0:	f7f0 f932 	bl	8000b58 <__aeabi_d2iz>
 80108f4:	2800      	cmp	r0, #0
 80108f6:	d051      	beq.n	801099c <__kernel_sin+0xcc>
 80108f8:	4622      	mov	r2, r4
 80108fa:	462b      	mov	r3, r5
 80108fc:	4620      	mov	r0, r4
 80108fe:	4629      	mov	r1, r5
 8010900:	f7ef fe7a 	bl	80005f8 <__aeabi_dmul>
 8010904:	4682      	mov	sl, r0
 8010906:	468b      	mov	fp, r1
 8010908:	4602      	mov	r2, r0
 801090a:	460b      	mov	r3, r1
 801090c:	4620      	mov	r0, r4
 801090e:	4629      	mov	r1, r5
 8010910:	f7ef fe72 	bl	80005f8 <__aeabi_dmul>
 8010914:	a341      	add	r3, pc, #260	; (adr r3, 8010a1c <__kernel_sin+0x14c>)
 8010916:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091a:	4680      	mov	r8, r0
 801091c:	4689      	mov	r9, r1
 801091e:	4650      	mov	r0, sl
 8010920:	4659      	mov	r1, fp
 8010922:	f7ef fe69 	bl	80005f8 <__aeabi_dmul>
 8010926:	a33f      	add	r3, pc, #252	; (adr r3, 8010a24 <__kernel_sin+0x154>)
 8010928:	e9d3 2300 	ldrd	r2, r3, [r3]
 801092c:	f7ef fcac 	bl	8000288 <__aeabi_dsub>
 8010930:	4652      	mov	r2, sl
 8010932:	465b      	mov	r3, fp
 8010934:	f7ef fe60 	bl	80005f8 <__aeabi_dmul>
 8010938:	a33c      	add	r3, pc, #240	; (adr r3, 8010a2c <__kernel_sin+0x15c>)
 801093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093e:	f7ef fca5 	bl	800028c <__adddf3>
 8010942:	4652      	mov	r2, sl
 8010944:	465b      	mov	r3, fp
 8010946:	f7ef fe57 	bl	80005f8 <__aeabi_dmul>
 801094a:	a33a      	add	r3, pc, #232	; (adr r3, 8010a34 <__kernel_sin+0x164>)
 801094c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010950:	f7ef fc9a 	bl	8000288 <__aeabi_dsub>
 8010954:	4652      	mov	r2, sl
 8010956:	465b      	mov	r3, fp
 8010958:	f7ef fe4e 	bl	80005f8 <__aeabi_dmul>
 801095c:	a337      	add	r3, pc, #220	; (adr r3, 8010a3c <__kernel_sin+0x16c>)
 801095e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010962:	f7ef fc93 	bl	800028c <__adddf3>
 8010966:	9b02      	ldr	r3, [sp, #8]
 8010968:	4606      	mov	r6, r0
 801096a:	460f      	mov	r7, r1
 801096c:	b9db      	cbnz	r3, 80109a6 <__kernel_sin+0xd6>
 801096e:	4602      	mov	r2, r0
 8010970:	460b      	mov	r3, r1
 8010972:	4650      	mov	r0, sl
 8010974:	4659      	mov	r1, fp
 8010976:	f7ef fe3f 	bl	80005f8 <__aeabi_dmul>
 801097a:	a325      	add	r3, pc, #148	; (adr r3, 8010a10 <__kernel_sin+0x140>)
 801097c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010980:	f7ef fc82 	bl	8000288 <__aeabi_dsub>
 8010984:	4642      	mov	r2, r8
 8010986:	464b      	mov	r3, r9
 8010988:	f7ef fe36 	bl	80005f8 <__aeabi_dmul>
 801098c:	4602      	mov	r2, r0
 801098e:	460b      	mov	r3, r1
 8010990:	4620      	mov	r0, r4
 8010992:	4629      	mov	r1, r5
 8010994:	f7ef fc7a 	bl	800028c <__adddf3>
 8010998:	4604      	mov	r4, r0
 801099a:	460d      	mov	r5, r1
 801099c:	ec45 4b10 	vmov	d0, r4, r5
 80109a0:	b005      	add	sp, #20
 80109a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109a6:	2200      	movs	r2, #0
 80109a8:	4b1b      	ldr	r3, [pc, #108]	; (8010a18 <__kernel_sin+0x148>)
 80109aa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80109ae:	f7ef fe23 	bl	80005f8 <__aeabi_dmul>
 80109b2:	4632      	mov	r2, r6
 80109b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80109b8:	463b      	mov	r3, r7
 80109ba:	4640      	mov	r0, r8
 80109bc:	4649      	mov	r1, r9
 80109be:	f7ef fe1b 	bl	80005f8 <__aeabi_dmul>
 80109c2:	4602      	mov	r2, r0
 80109c4:	460b      	mov	r3, r1
 80109c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80109ca:	f7ef fc5d 	bl	8000288 <__aeabi_dsub>
 80109ce:	4652      	mov	r2, sl
 80109d0:	465b      	mov	r3, fp
 80109d2:	f7ef fe11 	bl	80005f8 <__aeabi_dmul>
 80109d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109da:	f7ef fc55 	bl	8000288 <__aeabi_dsub>
 80109de:	a30c      	add	r3, pc, #48	; (adr r3, 8010a10 <__kernel_sin+0x140>)
 80109e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109e4:	4606      	mov	r6, r0
 80109e6:	460f      	mov	r7, r1
 80109e8:	4640      	mov	r0, r8
 80109ea:	4649      	mov	r1, r9
 80109ec:	f7ef fe04 	bl	80005f8 <__aeabi_dmul>
 80109f0:	4602      	mov	r2, r0
 80109f2:	460b      	mov	r3, r1
 80109f4:	4630      	mov	r0, r6
 80109f6:	4639      	mov	r1, r7
 80109f8:	f7ef fc48 	bl	800028c <__adddf3>
 80109fc:	4602      	mov	r2, r0
 80109fe:	460b      	mov	r3, r1
 8010a00:	4620      	mov	r0, r4
 8010a02:	4629      	mov	r1, r5
 8010a04:	f7ef fc40 	bl	8000288 <__aeabi_dsub>
 8010a08:	e7c6      	b.n	8010998 <__kernel_sin+0xc8>
 8010a0a:	bf00      	nop
 8010a0c:	f3af 8000 	nop.w
 8010a10:	55555549 	.word	0x55555549
 8010a14:	3fc55555 	.word	0x3fc55555
 8010a18:	3fe00000 	.word	0x3fe00000
 8010a1c:	5acfd57c 	.word	0x5acfd57c
 8010a20:	3de5d93a 	.word	0x3de5d93a
 8010a24:	8a2b9ceb 	.word	0x8a2b9ceb
 8010a28:	3e5ae5e6 	.word	0x3e5ae5e6
 8010a2c:	57b1fe7d 	.word	0x57b1fe7d
 8010a30:	3ec71de3 	.word	0x3ec71de3
 8010a34:	19c161d5 	.word	0x19c161d5
 8010a38:	3f2a01a0 	.word	0x3f2a01a0
 8010a3c:	1110f8a6 	.word	0x1110f8a6
 8010a40:	3f811111 	.word	0x3f811111

08010a44 <fabs>:
 8010a44:	ec51 0b10 	vmov	r0, r1, d0
 8010a48:	ee10 2a10 	vmov	r2, s0
 8010a4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010a50:	ec43 2b10 	vmov	d0, r2, r3
 8010a54:	4770      	bx	lr
	...

08010a58 <floor>:
 8010a58:	ec51 0b10 	vmov	r0, r1, d0
 8010a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010a64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010a68:	2e13      	cmp	r6, #19
 8010a6a:	460c      	mov	r4, r1
 8010a6c:	ee10 5a10 	vmov	r5, s0
 8010a70:	4680      	mov	r8, r0
 8010a72:	dc34      	bgt.n	8010ade <floor+0x86>
 8010a74:	2e00      	cmp	r6, #0
 8010a76:	da16      	bge.n	8010aa6 <floor+0x4e>
 8010a78:	a335      	add	r3, pc, #212	; (adr r3, 8010b50 <floor+0xf8>)
 8010a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a7e:	f7ef fc05 	bl	800028c <__adddf3>
 8010a82:	2200      	movs	r2, #0
 8010a84:	2300      	movs	r3, #0
 8010a86:	f7f0 f847 	bl	8000b18 <__aeabi_dcmpgt>
 8010a8a:	b148      	cbz	r0, 8010aa0 <floor+0x48>
 8010a8c:	2c00      	cmp	r4, #0
 8010a8e:	da59      	bge.n	8010b44 <floor+0xec>
 8010a90:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010a94:	4a30      	ldr	r2, [pc, #192]	; (8010b58 <floor+0x100>)
 8010a96:	432b      	orrs	r3, r5
 8010a98:	2500      	movs	r5, #0
 8010a9a:	42ab      	cmp	r3, r5
 8010a9c:	bf18      	it	ne
 8010a9e:	4614      	movne	r4, r2
 8010aa0:	4621      	mov	r1, r4
 8010aa2:	4628      	mov	r0, r5
 8010aa4:	e025      	b.n	8010af2 <floor+0x9a>
 8010aa6:	4f2d      	ldr	r7, [pc, #180]	; (8010b5c <floor+0x104>)
 8010aa8:	4137      	asrs	r7, r6
 8010aaa:	ea01 0307 	and.w	r3, r1, r7
 8010aae:	4303      	orrs	r3, r0
 8010ab0:	d01f      	beq.n	8010af2 <floor+0x9a>
 8010ab2:	a327      	add	r3, pc, #156	; (adr r3, 8010b50 <floor+0xf8>)
 8010ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ab8:	f7ef fbe8 	bl	800028c <__adddf3>
 8010abc:	2200      	movs	r2, #0
 8010abe:	2300      	movs	r3, #0
 8010ac0:	f7f0 f82a 	bl	8000b18 <__aeabi_dcmpgt>
 8010ac4:	2800      	cmp	r0, #0
 8010ac6:	d0eb      	beq.n	8010aa0 <floor+0x48>
 8010ac8:	2c00      	cmp	r4, #0
 8010aca:	bfbe      	ittt	lt
 8010acc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8010ad0:	fa43 f606 	asrlt.w	r6, r3, r6
 8010ad4:	19a4      	addlt	r4, r4, r6
 8010ad6:	ea24 0407 	bic.w	r4, r4, r7
 8010ada:	2500      	movs	r5, #0
 8010adc:	e7e0      	b.n	8010aa0 <floor+0x48>
 8010ade:	2e33      	cmp	r6, #51	; 0x33
 8010ae0:	dd0b      	ble.n	8010afa <floor+0xa2>
 8010ae2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010ae6:	d104      	bne.n	8010af2 <floor+0x9a>
 8010ae8:	ee10 2a10 	vmov	r2, s0
 8010aec:	460b      	mov	r3, r1
 8010aee:	f7ef fbcd 	bl	800028c <__adddf3>
 8010af2:	ec41 0b10 	vmov	d0, r0, r1
 8010af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010afa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b02:	fa23 f707 	lsr.w	r7, r3, r7
 8010b06:	4207      	tst	r7, r0
 8010b08:	d0f3      	beq.n	8010af2 <floor+0x9a>
 8010b0a:	a311      	add	r3, pc, #68	; (adr r3, 8010b50 <floor+0xf8>)
 8010b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b10:	f7ef fbbc 	bl	800028c <__adddf3>
 8010b14:	2200      	movs	r2, #0
 8010b16:	2300      	movs	r3, #0
 8010b18:	f7ef fffe 	bl	8000b18 <__aeabi_dcmpgt>
 8010b1c:	2800      	cmp	r0, #0
 8010b1e:	d0bf      	beq.n	8010aa0 <floor+0x48>
 8010b20:	2c00      	cmp	r4, #0
 8010b22:	da02      	bge.n	8010b2a <floor+0xd2>
 8010b24:	2e14      	cmp	r6, #20
 8010b26:	d103      	bne.n	8010b30 <floor+0xd8>
 8010b28:	3401      	adds	r4, #1
 8010b2a:	ea25 0507 	bic.w	r5, r5, r7
 8010b2e:	e7b7      	b.n	8010aa0 <floor+0x48>
 8010b30:	2301      	movs	r3, #1
 8010b32:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8010b36:	fa03 f606 	lsl.w	r6, r3, r6
 8010b3a:	4435      	add	r5, r6
 8010b3c:	4545      	cmp	r5, r8
 8010b3e:	bf38      	it	cc
 8010b40:	18e4      	addcc	r4, r4, r3
 8010b42:	e7f2      	b.n	8010b2a <floor+0xd2>
 8010b44:	2500      	movs	r5, #0
 8010b46:	462c      	mov	r4, r5
 8010b48:	e7aa      	b.n	8010aa0 <floor+0x48>
 8010b4a:	bf00      	nop
 8010b4c:	f3af 8000 	nop.w
 8010b50:	8800759c 	.word	0x8800759c
 8010b54:	7e37e43c 	.word	0x7e37e43c
 8010b58:	bff00000 	.word	0xbff00000
 8010b5c:	000fffff 	.word	0x000fffff

08010b60 <matherr>:
 8010b60:	2000      	movs	r0, #0
 8010b62:	4770      	bx	lr
 8010b64:	0000      	movs	r0, r0
	...

08010b68 <scalbn>:
 8010b68:	b570      	push	{r4, r5, r6, lr}
 8010b6a:	ec55 4b10 	vmov	r4, r5, d0
 8010b6e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010b72:	4606      	mov	r6, r0
 8010b74:	462b      	mov	r3, r5
 8010b76:	b9aa      	cbnz	r2, 8010ba4 <scalbn+0x3c>
 8010b78:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010b7c:	4323      	orrs	r3, r4
 8010b7e:	d03b      	beq.n	8010bf8 <scalbn+0x90>
 8010b80:	4b31      	ldr	r3, [pc, #196]	; (8010c48 <scalbn+0xe0>)
 8010b82:	4629      	mov	r1, r5
 8010b84:	2200      	movs	r2, #0
 8010b86:	ee10 0a10 	vmov	r0, s0
 8010b8a:	f7ef fd35 	bl	80005f8 <__aeabi_dmul>
 8010b8e:	4b2f      	ldr	r3, [pc, #188]	; (8010c4c <scalbn+0xe4>)
 8010b90:	429e      	cmp	r6, r3
 8010b92:	4604      	mov	r4, r0
 8010b94:	460d      	mov	r5, r1
 8010b96:	da12      	bge.n	8010bbe <scalbn+0x56>
 8010b98:	a327      	add	r3, pc, #156	; (adr r3, 8010c38 <scalbn+0xd0>)
 8010b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b9e:	f7ef fd2b 	bl	80005f8 <__aeabi_dmul>
 8010ba2:	e009      	b.n	8010bb8 <scalbn+0x50>
 8010ba4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010ba8:	428a      	cmp	r2, r1
 8010baa:	d10c      	bne.n	8010bc6 <scalbn+0x5e>
 8010bac:	ee10 2a10 	vmov	r2, s0
 8010bb0:	4620      	mov	r0, r4
 8010bb2:	4629      	mov	r1, r5
 8010bb4:	f7ef fb6a 	bl	800028c <__adddf3>
 8010bb8:	4604      	mov	r4, r0
 8010bba:	460d      	mov	r5, r1
 8010bbc:	e01c      	b.n	8010bf8 <scalbn+0x90>
 8010bbe:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010bc2:	460b      	mov	r3, r1
 8010bc4:	3a36      	subs	r2, #54	; 0x36
 8010bc6:	4432      	add	r2, r6
 8010bc8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010bcc:	428a      	cmp	r2, r1
 8010bce:	dd0b      	ble.n	8010be8 <scalbn+0x80>
 8010bd0:	ec45 4b11 	vmov	d1, r4, r5
 8010bd4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8010c40 <scalbn+0xd8>
 8010bd8:	f000 f83c 	bl	8010c54 <copysign>
 8010bdc:	a318      	add	r3, pc, #96	; (adr r3, 8010c40 <scalbn+0xd8>)
 8010bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be2:	ec51 0b10 	vmov	r0, r1, d0
 8010be6:	e7da      	b.n	8010b9e <scalbn+0x36>
 8010be8:	2a00      	cmp	r2, #0
 8010bea:	dd08      	ble.n	8010bfe <scalbn+0x96>
 8010bec:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010bf0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010bf4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010bf8:	ec45 4b10 	vmov	d0, r4, r5
 8010bfc:	bd70      	pop	{r4, r5, r6, pc}
 8010bfe:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010c02:	da0d      	bge.n	8010c20 <scalbn+0xb8>
 8010c04:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010c08:	429e      	cmp	r6, r3
 8010c0a:	ec45 4b11 	vmov	d1, r4, r5
 8010c0e:	dce1      	bgt.n	8010bd4 <scalbn+0x6c>
 8010c10:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8010c38 <scalbn+0xd0>
 8010c14:	f000 f81e 	bl	8010c54 <copysign>
 8010c18:	a307      	add	r3, pc, #28	; (adr r3, 8010c38 <scalbn+0xd0>)
 8010c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c1e:	e7e0      	b.n	8010be2 <scalbn+0x7a>
 8010c20:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010c24:	3236      	adds	r2, #54	; 0x36
 8010c26:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010c2a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010c2e:	4620      	mov	r0, r4
 8010c30:	4629      	mov	r1, r5
 8010c32:	2200      	movs	r2, #0
 8010c34:	4b06      	ldr	r3, [pc, #24]	; (8010c50 <scalbn+0xe8>)
 8010c36:	e7b2      	b.n	8010b9e <scalbn+0x36>
 8010c38:	c2f8f359 	.word	0xc2f8f359
 8010c3c:	01a56e1f 	.word	0x01a56e1f
 8010c40:	8800759c 	.word	0x8800759c
 8010c44:	7e37e43c 	.word	0x7e37e43c
 8010c48:	43500000 	.word	0x43500000
 8010c4c:	ffff3cb0 	.word	0xffff3cb0
 8010c50:	3c900000 	.word	0x3c900000

08010c54 <copysign>:
 8010c54:	ec51 0b10 	vmov	r0, r1, d0
 8010c58:	ee11 0a90 	vmov	r0, s3
 8010c5c:	ee10 2a10 	vmov	r2, s0
 8010c60:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010c64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8010c68:	ea41 0300 	orr.w	r3, r1, r0
 8010c6c:	ec43 2b10 	vmov	d0, r2, r3
 8010c70:	4770      	bx	lr
	...

08010c74 <_init>:
 8010c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c76:	bf00      	nop
 8010c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c7a:	bc08      	pop	{r3}
 8010c7c:	469e      	mov	lr, r3
 8010c7e:	4770      	bx	lr

08010c80 <_fini>:
 8010c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010c82:	bf00      	nop
 8010c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010c86:	bc08      	pop	{r3}
 8010c88:	469e      	mov	lr, r3
 8010c8a:	4770      	bx	lr
