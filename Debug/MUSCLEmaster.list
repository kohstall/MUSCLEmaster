
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001238c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000780  08012520  08012520  00022520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012ca0  08012ca0  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  08012ca0  08012ca0  00022ca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012ca8  08012ca8  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012ca8  08012ca8  00022ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012cac  08012cac  00022cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  08012cb0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000257c  20000218  08012ec8  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002794  08012ec8  00032794  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a888  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eba  00000000  00000000  0004aad0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018d0  00000000  00000000  0004d990  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017a0  00000000  00000000  0004f260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022ccd  00000000  00000000  00050a00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012796  00000000  00000000  000736cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3edb  00000000  00000000  00085e63  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159d3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007ca0  00000000  00000000  00159dbc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08012504 	.word	0x08012504

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08012504 	.word	0x08012504

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f001 fddf 	bl	8002b74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f00b fc0a 	bl	800c7d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fdf7 	bl	8002bde <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f001 fdbf 	bl	8002b8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000040 	.word	0x20000040
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	200002e4 	.word	0x200002e4

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200002e4 	.word	0x200002e4

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f00b fba8 	bl	800c824 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fb94 	bl	8001830 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b02      	cmp	r3, #2
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b20      	cmp	r3, #32
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d049      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d046      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d12b      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d127      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d119      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0220 	bic.w	r2, r2, #32
 80011d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f000 f9cd 	bl	800159c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f06f 0212 	mvn.w	r2, #18
 800120a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122c:	2b80      	cmp	r3, #128	; 0x80
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d057      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d054      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d139      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001270:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001282:	2b00      	cmp	r3, #0
 8001284:	d12b      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d124      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11d      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d119      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fd1a 	bl	8001d18 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f06f 020c 	mvn.w	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d017      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d014      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f93f 	bl	80015c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0201 	mvn.w	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	2b20      	cmp	r3, #32
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 0220 	mvn.w	r2, #32
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f919 	bl	80015d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f06f 0220 	mvn.w	r2, #32
 80013ae:	601a      	str	r2, [r3, #0]
  }
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Start_DMA+0x1e>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e0cc      	b.n	8001570 <HAL_ADC_Start_DMA+0x1b8>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d018      	beq.n	800141e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013fc:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_ADC_Start_DMA+0x1c0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HAL_ADC_Start_DMA+0x1c4>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9a      	lsrs	r2, r3, #18
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3b01      	subs	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 80a0 	bne.w	800156e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001458:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146c:	d106      	bne.n	800147c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f023 0206 	bic.w	r2, r3, #6
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
 800147a:	e002      	b.n	8001482 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 800148c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	4a3c      	ldr	r2, [pc, #240]	; (8001584 <HAL_ADC_Start_DMA+0x1cc>)
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_ADC_Start_DMA+0x1d0>)
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_ADC_Start_DMA+0x1d4>)
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	334c      	adds	r3, #76	; 0x4c
 80014da:	4619      	mov	r1, r3
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f001 fc38 	bl	8002d54 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12a      	bne.n	8001546 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_ADC_Start_DMA+0x1d8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d015      	beq.n	8001526 <HAL_ADC_Start_DMA+0x16e>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_ADC_Start_DMA+0x1dc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d105      	bne.n	8001510 <HAL_ADC_Start_DMA+0x158>
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_ADC_Start_DMA+0x1e0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d129      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d823      	bhi.n	800156e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d11c      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e013      	b.n	800156e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_ADC_Start_DMA+0x1d8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d10e      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d107      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800156c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000040 	.word	0x20000040
 800157c:	431bde83 	.word	0x431bde83
 8001580:	40012300 	.word	0x40012300
 8001584:	08001a29 	.word	0x08001a29
 8001588:	08001ae3 	.word	0x08001ae3
 800158c:	08001aff 	.word	0x08001aff
 8001590:	40012000 	.word	0x40012000
 8001594:	40012100 	.word	0x40012100
 8001598:	40012200 	.word	0x40012200

0800159c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015cc:	bf00      	nop
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b085      	sub	sp, #20
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001600:	2b01      	cmp	r3, #1
 8001602:	d101      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x1c>
 8001604:	2302      	movs	r3, #2
 8001606:	e105      	b.n	8001814 <HAL_ADC_ConfigChannel+0x228>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2b09      	cmp	r3, #9
 8001616:	d925      	bls.n	8001664 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	68d9      	ldr	r1, [r3, #12]
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	b29b      	uxth	r3, r3
 8001624:	461a      	mov	r2, r3
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	3b1e      	subs	r3, #30
 800162e:	2207      	movs	r2, #7
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43da      	mvns	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	400a      	ands	r2, r1
 800163c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68d9      	ldr	r1, [r3, #12]
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	689a      	ldr	r2, [r3, #8]
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	b29b      	uxth	r3, r3
 800164e:	4618      	mov	r0, r3
 8001650:	4603      	mov	r3, r0
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4403      	add	r3, r0
 8001656:	3b1e      	subs	r3, #30
 8001658:	409a      	lsls	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	e022      	b.n	80016aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6919      	ldr	r1, [r3, #16]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	2207      	movs	r2, #7
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	400a      	ands	r2, r1
 8001686:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6919      	ldr	r1, [r3, #16]
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	689a      	ldr	r2, [r3, #8]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b29b      	uxth	r3, r3
 8001698:	4618      	mov	r0, r3
 800169a:	4603      	mov	r3, r0
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	4403      	add	r3, r0
 80016a0:	409a      	lsls	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b06      	cmp	r3, #6
 80016b0:	d824      	bhi.n	80016fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685a      	ldr	r2, [r3, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	3b05      	subs	r3, #5
 80016c4:	221f      	movs	r2, #31
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	400a      	ands	r2, r1
 80016d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b05      	subs	r3, #5
 80016ee:	fa00 f203 	lsl.w	r2, r0, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	430a      	orrs	r2, r1
 80016f8:	635a      	str	r2, [r3, #52]	; 0x34
 80016fa:	e04c      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d824      	bhi.n	800174e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	4413      	add	r3, r2
 8001714:	3b23      	subs	r3, #35	; 0x23
 8001716:	221f      	movs	r2, #31
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29b      	uxth	r3, r3
 8001732:	4618      	mov	r0, r3
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	3b23      	subs	r3, #35	; 0x23
 8001740:	fa00 f203 	lsl.w	r2, r0, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	631a      	str	r2, [r3, #48]	; 0x30
 800174c:	e023      	b.n	8001796 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	4613      	mov	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	3b41      	subs	r3, #65	; 0x41
 8001760:	221f      	movs	r2, #31
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b29b      	uxth	r3, r3
 800177c:	4618      	mov	r0, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685a      	ldr	r2, [r3, #4]
 8001782:	4613      	mov	r3, r2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	4413      	add	r3, r2
 8001788:	3b41      	subs	r3, #65	; 0x41
 800178a:	fa00 f203 	lsl.w	r2, r0, r3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	430a      	orrs	r2, r1
 8001794:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001796:	4b22      	ldr	r3, [pc, #136]	; (8001820 <HAL_ADC_ConfigChannel+0x234>)
 8001798:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a21      	ldr	r2, [pc, #132]	; (8001824 <HAL_ADC_ConfigChannel+0x238>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d109      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1cc>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2b12      	cmp	r3, #18
 80017aa:	d105      	bne.n	80017b8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a19      	ldr	r2, [pc, #100]	; (8001824 <HAL_ADC_ConfigChannel+0x238>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d123      	bne.n	800180a <HAL_ADC_ConfigChannel+0x21e>
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	2b10      	cmp	r3, #16
 80017c8:	d003      	beq.n	80017d2 <HAL_ADC_ConfigChannel+0x1e6>
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2b11      	cmp	r3, #17
 80017d0:	d11b      	bne.n	800180a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b10      	cmp	r3, #16
 80017e4:	d111      	bne.n	800180a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017e6:	4b10      	ldr	r3, [pc, #64]	; (8001828 <HAL_ADC_ConfigChannel+0x23c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a10      	ldr	r2, [pc, #64]	; (800182c <HAL_ADC_ConfigChannel+0x240>)
 80017ec:	fba2 2303 	umull	r2, r3, r2, r3
 80017f0:	0c9a      	lsrs	r2, r3, #18
 80017f2:	4613      	mov	r3, r2
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	4413      	add	r3, r2
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017fc:	e002      	b.n	8001804 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	3b01      	subs	r3, #1
 8001802:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d1f9      	bne.n	80017fe <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2200      	movs	r2, #0
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40012300 	.word	0x40012300
 8001824:	40012000 	.word	0x40012000
 8001828:	20000040 	.word	0x20000040
 800182c:	431bde83 	.word	0x431bde83

08001830 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001838:	4b79      	ldr	r3, [pc, #484]	; (8001a20 <ADC_Init+0x1f0>)
 800183a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	691b      	ldr	r3, [r3, #16]
 8001870:	021a      	lsls	r2, r3, #8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689a      	ldr	r2, [r3, #8]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	689a      	ldr	r2, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6899      	ldr	r1, [r3, #8]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c2:	4a58      	ldr	r2, [pc, #352]	; (8001a24 <ADC_Init+0x1f4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d022      	beq.n	800190e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	689a      	ldr	r2, [r3, #8]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6899      	ldr	r1, [r3, #8]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	6899      	ldr	r1, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	430a      	orrs	r2, r1
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	e00f      	b.n	800192e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800192c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f022 0202 	bic.w	r2, r2, #2
 800193c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6899      	ldr	r1, [r3, #8]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	7e1b      	ldrb	r3, [r3, #24]
 8001948:	005a      	lsls	r2, r3, #1
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d01b      	beq.n	8001994 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800196a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800197a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6859      	ldr	r1, [r3, #4]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001986:	3b01      	subs	r3, #1
 8001988:	035a      	lsls	r2, r3, #13
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	430a      	orrs	r2, r1
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	e007      	b.n	80019a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69db      	ldr	r3, [r3, #28]
 80019be:	3b01      	subs	r3, #1
 80019c0:	051a      	lsls	r2, r3, #20
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	689a      	ldr	r2, [r3, #8]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6899      	ldr	r1, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019e6:	025a      	lsls	r2, r3, #9
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6899      	ldr	r1, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	029a      	lsls	r2, r3, #10
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40012300 	.word	0x40012300
 8001a24:	0f000001 	.word	0x0f000001

08001a28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d13c      	bne.n	8001abc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d12b      	bne.n	8001ab4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d127      	bne.n	8001ab4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d119      	bne.n	8001ab4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	685a      	ldr	r2, [r3, #4]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0220 	bic.w	r2, r2, #32
 8001a8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d105      	bne.n	8001ab4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aac:	f043 0201 	orr.w	r2, r3, #1
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fd71 	bl	800159c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001aba:	e00e      	b.n	8001ada <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f7ff fd85 	bl	80015d8 <HAL_ADC_ErrorCallback>
}
 8001ace:	e004      	b.n	8001ada <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	4798      	blx	r3
}
 8001ada:	bf00      	nop
 8001adc:	3710      	adds	r7, #16
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001af0:	68f8      	ldr	r0, [r7, #12]
 8001af2:	f7ff fd5d 	bl	80015b0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001af6:	bf00      	nop
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b084      	sub	sp, #16
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	f043 0204 	orr.w	r2, r3, #4
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f7ff fd5a 	bl	80015d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b24:	bf00      	nop
 8001b26:	3710      	adds	r7, #16
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b087      	sub	sp, #28
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADCEx_InjectedStart+0x22>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e09d      	b.n	8001c8a <HAL_ADCEx_InjectedStart+0x15e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d018      	beq.n	8001b96 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 0201 	orr.w	r2, r2, #1
 8001b72:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b74:	4b48      	ldr	r3, [pc, #288]	; (8001c98 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a48      	ldr	r2, [pc, #288]	; (8001c9c <HAL_ADCEx_InjectedStart+0x170>)
 8001b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b7e:	0c9a      	lsrs	r2, r3, #18
 8001b80:	4613      	mov	r3, r2
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	4413      	add	r3, r2
 8001b86:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b88:	e002      	b.n	8001b90 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f9      	bne.n	8001b8a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d171      	bne.n	8001c88 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d102      	bne.n	8001bca <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f06f 0204 	mvn.w	r2, #4
 8001bda:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bdc:	4b30      	ldr	r3, [pc, #192]	; (8001ca0 <HAL_ADCEx_InjectedStart+0x174>)
 8001bde:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d124      	bne.n	8001c36 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	bf0c      	ite	eq
 8001bfa:	2301      	moveq	r3, #1
 8001bfc:	2300      	movne	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d034      	beq.n	8001c88 <HAL_ADCEx_InjectedStart+0x15c>
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d031      	beq.n	8001c88 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	e028      	b.n	8001c88 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	bf0c      	ite	eq
 8001c44:	2301      	moveq	r3, #1
 8001c46:	2300      	movne	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	bf0c      	ite	eq
 8001c5a:	2301      	moveq	r3, #1
 8001c5c:	2300      	movne	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_ADCEx_InjectedStart+0x178>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d10d      	bne.n	8001c88 <HAL_ADCEx_InjectedStart+0x15c>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <HAL_ADCEx_InjectedStart+0x15c>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d007      	beq.n	8001c88 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c86:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	371c      	adds	r7, #28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	20000040 	.word	0x20000040
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	40012300 	.word	0x40012300
 8001ca4:	40012000 	.word	0x40012000

08001ca8 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0204 	mvn.w	r2, #4
 8001cbe:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d81f      	bhi.n	8001d08 <HAL_ADCEx_InjectedGetValue+0x60>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001cff 	.word	0x08001cff
 8001cd4:	08001cf5 	.word	0x08001cf5
 8001cd8:	08001ceb 	.word	0x08001ceb
 8001cdc:	08001ce1 	.word	0x08001ce1
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce6:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001ce8:	e00f      	b.n	8001d0a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cf2:	e00a      	b.n	8001d0a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfa:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cfc:	e005      	b.n	8001d0a <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d04:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001d06:	e000      	b.n	8001d0a <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001d08:	bf00      	nop
  }
  return tmp;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3714      	adds	r7, #20
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d101      	bne.n	8001d44 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001d40:	2302      	movs	r3, #2
 8001d42:	e17a      	b.n	800203a <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d925      	bls.n	8001da0 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68d9      	ldr	r1, [r3, #12]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	461a      	mov	r2, r3
 8001d62:	4613      	mov	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	3b1e      	subs	r3, #30
 8001d6a:	2207      	movs	r2, #7
 8001d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d70:	43da      	mvns	r2, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	400a      	ands	r2, r1
 8001d78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68d9      	ldr	r1, [r3, #12]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	4403      	add	r3, r0
 8001d92:	3b1e      	subs	r3, #30
 8001d94:	409a      	lsls	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	e022      	b.n	8001de6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6919      	ldr	r1, [r3, #16]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	461a      	mov	r2, r3
 8001dae:	4613      	mov	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4413      	add	r3, r2
 8001db4:	2207      	movs	r2, #7
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43da      	mvns	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	400a      	ands	r2, r1
 8001dc2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6919      	ldr	r1, [r3, #16]
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	689a      	ldr	r2, [r3, #8]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4403      	add	r3, r0
 8001ddc:	409a      	lsls	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001df4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	3b01      	subs	r3, #1
 8001e02:	051a      	lsls	r2, r3, #20
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	b2da      	uxtb	r2, r3
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3303      	adds	r3, #3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	461a      	mov	r2, r3
 8001e28:	4613      	mov	r3, r2
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	221f      	movs	r2, #31
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43da      	mvns	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	400a      	ands	r2, r1
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	b29b      	uxth	r3, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	4613      	mov	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	4413      	add	r3, r2
 8001e68:	fa00 f203 	lsl.w	r2, r0, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	699b      	ldr	r3, [r3, #24]
 8001e78:	4a73      	ldr	r2, [pc, #460]	; (8002048 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d022      	beq.n	8001ec4 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689a      	ldr	r2, [r3, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6899      	ldr	r1, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	699a      	ldr	r2, [r3, #24]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	430a      	orrs	r2, r1
 8001e9e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001eae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6899      	ldr	r1, [r3, #8]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	69da      	ldr	r2, [r3, #28]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	609a      	str	r2, [r3, #8]
 8001ec2:	e00f      	b.n	8001ee4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001ed2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	689a      	ldr	r2, [r3, #8]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ee2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	7d5b      	ldrb	r3, [r3, #21]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	685a      	ldr	r2, [r3, #4]
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	e007      	b.n	8001f0e <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f0c:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	7d1b      	ldrb	r3, [r3, #20]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d008      	beq.n	8001f28 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	685a      	ldr	r2, [r3, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001f24:	605a      	str	r2, [r3, #4]
 8001f26:	e007      	b.n	8001f38 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f36:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d017      	beq.n	8001f70 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	d029      	beq.n	8001f98 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d13b      	bne.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	695b      	ldr	r3, [r3, #20]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f56:	f023 030f 	bic.w	r3, r3, #15
 8001f5a:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6959      	ldr	r1, [r3, #20]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	615a      	str	r2, [r3, #20]
      break;
 8001f6e:	e03b      	b.n	8001fe8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f7e:	f023 030f 	bic.w	r3, r3, #15
 8001f82:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	6999      	ldr	r1, [r3, #24]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	619a      	str	r2, [r3, #24]
      break;
 8001f96:	e027      	b.n	8001fe8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001fa6:	f023 030f 	bic.w	r3, r3, #15
 8001faa:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69d9      	ldr	r1, [r3, #28]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	61da      	str	r2, [r3, #28]
      break;
 8001fbe:	e013      	b.n	8001fe8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6a1b      	ldr	r3, [r3, #32]
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001fce:	f023 030f 	bic.w	r3, r3, #15
 8001fd2:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	6a19      	ldr	r1, [r3, #32]
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	621a      	str	r2, [r3, #32]
      break;
 8001fe6:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fe8:	4b18      	ldr	r3, [pc, #96]	; (800204c <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001fea:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a17      	ldr	r2, [pc, #92]	; (8002050 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d109      	bne.n	800200a <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b12      	cmp	r3, #18
 8001ffc:	d105      	bne.n	800200a <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a10      	ldr	r2, [pc, #64]	; (8002050 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d10d      	bne.n	8002030 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2b10      	cmp	r3, #16
 800201a:	d003      	beq.n	8002024 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2b11      	cmp	r3, #17
 8002022:	d105      	bne.n	8002030 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	000f0001 	.word	0x000f0001
 800204c:	40012300 	.word	0x40012300
 8002050:	40012000 	.word	0x40012000

08002054 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002068:	2302      	movs	r3, #2
 800206a:	e031      	b.n	80020d0 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002074:	4b19      	ldr	r3, [pc, #100]	; (80020dc <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002076:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 021f 	bic.w	r2, r3, #31
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685a      	ldr	r2, [r3, #4]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	431a      	orrs	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3714      	adds	r7, #20
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr
 80020dc:	40012300 	.word	0x40012300

080020e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0ed      	b.n	80022ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020f8:	b2db      	uxtb	r3, r3
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f00a fd7c 	bl	800cbfc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f022 0202 	bic.w	r2, r2, #2
 8002112:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002114:	f7fe ff9e 	bl	8001054 <HAL_GetTick>
 8002118:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800211a:	e012      	b.n	8002142 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800211c:	f7fe ff9a 	bl	8001054 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b0a      	cmp	r3, #10
 8002128:	d90b      	bls.n	8002142 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2205      	movs	r2, #5
 800213a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e0c5      	b.n	80022ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1e5      	bne.n	800211c <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002160:	f7fe ff78 	bl	8001054 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002166:	e012      	b.n	800218e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002168:	f7fe ff74 	bl	8001054 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b0a      	cmp	r3, #10
 8002174:	d90b      	bls.n	800218e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2205      	movs	r2, #5
 8002186:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e09f      	b.n	80022ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0e5      	beq.n	8002168 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7e1b      	ldrb	r3, [r3, #24]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d108      	bne.n	80021b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021b2:	601a      	str	r2, [r3, #0]
 80021b4:	e007      	b.n	80021c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	681a      	ldr	r2, [r3, #0]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	7e5b      	ldrb	r3, [r3, #25]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d108      	bne.n	80021e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021dc:	601a      	str	r2, [r3, #0]
 80021de:	e007      	b.n	80021f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	7e9b      	ldrb	r3, [r3, #26]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d108      	bne.n	800220a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f042 0220 	orr.w	r2, r2, #32
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	e007      	b.n	800221a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0220 	bic.w	r2, r2, #32
 8002218:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	7edb      	ldrb	r3, [r3, #27]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d108      	bne.n	8002234 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 0210 	bic.w	r2, r2, #16
 8002230:	601a      	str	r2, [r3, #0]
 8002232:	e007      	b.n	8002244 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f042 0210 	orr.w	r2, r2, #16
 8002242:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	7f1b      	ldrb	r3, [r3, #28]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d108      	bne.n	800225e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0208 	orr.w	r2, r2, #8
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	e007      	b.n	800226e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0208 	bic.w	r2, r2, #8
 800226c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7f5b      	ldrb	r3, [r3, #29]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d108      	bne.n	8002288 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f042 0204 	orr.w	r2, r2, #4
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	e007      	b.n	8002298 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f022 0204 	bic.w	r2, r2, #4
 8002296:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	695b      	ldr	r3, [r3, #20]
 80022ac:	ea42 0103 	orr.w	r1, r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	1e5a      	subs	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	430a      	orrs	r2, r1
 80022bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d003      	beq.n	80022fe <HAL_CAN_ConfigFilter+0x26>
 80022f6:	7cfb      	ldrb	r3, [r7, #19]
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	f040 80be 	bne.w	800247a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80022fe:	4b65      	ldr	r3, [pc, #404]	; (8002494 <HAL_CAN_ConfigFilter+0x1bc>)
 8002300:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002318:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800232c:	021b      	lsls	r3, r3, #8
 800232e:	431a      	orrs	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	2201      	movs	r2, #1
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	43db      	mvns	r3, r3
 8002350:	401a      	ands	r2, r3
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	69db      	ldr	r3, [r3, #28]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d123      	bne.n	80023a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	43db      	mvns	r3, r3
 800236a:	401a      	ands	r2, r3
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002382:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3248      	adds	r2, #72	; 0x48
 8002388:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800239c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800239e:	6979      	ldr	r1, [r7, #20]
 80023a0:	3348      	adds	r3, #72	; 0x48
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	440b      	add	r3, r1
 80023a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	69db      	ldr	r3, [r3, #28]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d122      	bne.n	80023f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	3248      	adds	r2, #72	; 0x48
 80023d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ec:	6979      	ldr	r1, [r7, #20]
 80023ee:	3348      	adds	r3, #72	; 0x48
 80023f0:	00db      	lsls	r3, r3, #3
 80023f2:	440b      	add	r3, r1
 80023f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	699b      	ldr	r3, [r3, #24]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d109      	bne.n	8002412 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	43db      	mvns	r3, r3
 8002408:	401a      	ands	r2, r3
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002410:	e007      	b.n	8002422 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	431a      	orrs	r2, r3
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	43db      	mvns	r3, r3
 8002434:	401a      	ands	r2, r3
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800243c:	e007      	b.n	800244e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	431a      	orrs	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d107      	bne.n	8002466 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	431a      	orrs	r2, r3
 8002460:	697b      	ldr	r3, [r7, #20]
 8002462:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800246c:	f023 0201 	bic.w	r2, r3, #1
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002476:	2300      	movs	r3, #0
 8002478:	e006      	b.n	8002488 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
  }
}
 8002488:	4618      	mov	r0, r3
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr
 8002494:	40006400 	.word	0x40006400

08002498 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d12e      	bne.n	800250a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2202      	movs	r2, #2
 80024b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681a      	ldr	r2, [r3, #0]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 0201 	bic.w	r2, r2, #1
 80024c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024c4:	f7fe fdc6 	bl	8001054 <HAL_GetTick>
 80024c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ca:	e012      	b.n	80024f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024cc:	f7fe fdc2 	bl	8001054 <HAL_GetTick>
 80024d0:	4602      	mov	r2, r0
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b0a      	cmp	r3, #10
 80024d8:	d90b      	bls.n	80024f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2205      	movs	r2, #5
 80024ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e012      	b.n	8002518 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 0301 	and.w	r3, r3, #1
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e5      	bne.n	80024cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002506:	2300      	movs	r3, #0
 8002508:	e006      	b.n	8002518 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
  }
}
 8002518:	4618      	mov	r0, r3
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002530:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d002      	beq.n	800253e <HAL_CAN_ActivateNotification+0x1e>
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b02      	cmp	r3, #2
 800253c:	d109      	bne.n	8002552 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6959      	ldr	r1, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	430a      	orrs	r2, r1
 800254c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e006      	b.n	8002560 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3714      	adds	r7, #20
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002574:	2300      	movs	r3, #0
 8002576:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d07c      	beq.n	80026ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d023      	beq.n	8002604 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2201      	movs	r2, #1
 80025c2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f97d 	bl	80028ce <HAL_CAN_TxMailbox0CompleteCallback>
 80025d4:	e016      	b.n	8002604 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	f003 0304 	and.w	r3, r3, #4
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d004      	beq.n	80025ea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025e6:	627b      	str	r3, [r7, #36]	; 0x24
 80025e8:	e00c      	b.n	8002604 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	e002      	b.n	8002604 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f983 	bl	800290a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d024      	beq.n	8002658 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002616:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f95d 	bl	80028e2 <HAL_CAN_TxMailbox1CompleteCallback>
 8002628:	e016      	b.n	8002658 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800262a:	69bb      	ldr	r3, [r7, #24]
 800262c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002630:	2b00      	cmp	r3, #0
 8002632:	d004      	beq.n	800263e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002636:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800263a:	627b      	str	r3, [r7, #36]	; 0x24
 800263c:	e00c      	b.n	8002658 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	e002      	b.n	8002658 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f963 	bl	800291e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002658:	69bb      	ldr	r3, [r7, #24]
 800265a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d024      	beq.n	80026ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800266a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800266c:	69bb      	ldr	r3, [r7, #24]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f93d 	bl	80028f6 <HAL_CAN_TxMailbox2CompleteCallback>
 800267c:	e016      	b.n	80026ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800267e:	69bb      	ldr	r3, [r7, #24]
 8002680:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d004      	beq.n	8002692 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800268e:	627b      	str	r3, [r7, #36]	; 0x24
 8002690:	e00c      	b.n	80026ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e002      	b.n	80026ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80026a6:	6878      	ldr	r0, [r7, #4]
 80026a8:	f000 f943 	bl	8002932 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	f003 0308 	and.w	r3, r3, #8
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d00c      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f003 0310 	and.w	r3, r3, #16
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80026c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2210      	movs	r2, #16
 80026ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00b      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f003 0308 	and.w	r3, r3, #8
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d006      	beq.n	80026f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2208      	movs	r2, #8
 80026ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f934 	bl	800295a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026f2:	6a3b      	ldr	r3, [r7, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d009      	beq.n	8002710 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d002      	beq.n	8002710 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 f91b 	bl	8002946 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002710:	6a3b      	ldr	r3, [r7, #32]
 8002712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00c      	beq.n	8002734 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d007      	beq.n	8002734 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002726:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800272a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2210      	movs	r2, #16
 8002732:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f003 0320 	and.w	r3, r3, #32
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2208      	movs	r2, #8
 800274e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f916 	bl	8002982 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d009      	beq.n	8002774 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f8fd 	bl	800296e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00b      	beq.n	8002796 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f003 0310 	and.w	r3, r3, #16
 8002784:	2b00      	cmp	r3, #0
 8002786:	d006      	beq.n	8002796 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	2210      	movs	r2, #16
 800278e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	f000 f900 	bl	8002996 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002796:	6a3b      	ldr	r3, [r7, #32]
 8002798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00b      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d006      	beq.n	80027b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2208      	movs	r2, #8
 80027b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f8f9 	bl	80029aa <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80027b8:	6a3b      	ldr	r3, [r7, #32]
 80027ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d075      	beq.n	80028ae <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d06c      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d008      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d003      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e2:	f043 0301 	orr.w	r3, r3, #1
 80027e6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027e8:	6a3b      	ldr	r3, [r7, #32]
 80027ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d008      	beq.n	8002804 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	f043 0302 	orr.w	r3, r3, #2
 8002802:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002804:	6a3b      	ldr	r3, [r7, #32]
 8002806:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800280a:	2b00      	cmp	r3, #0
 800280c:	d008      	beq.n	8002820 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d003      	beq.n	8002820 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	f043 0304 	orr.w	r3, r3, #4
 800281e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002826:	2b00      	cmp	r3, #0
 8002828:	d03d      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d038      	beq.n	80028a6 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800283a:	2b30      	cmp	r3, #48	; 0x30
 800283c:	d017      	beq.n	800286e <HAL_CAN_IRQHandler+0x302>
 800283e:	2b30      	cmp	r3, #48	; 0x30
 8002840:	d804      	bhi.n	800284c <HAL_CAN_IRQHandler+0x2e0>
 8002842:	2b10      	cmp	r3, #16
 8002844:	d009      	beq.n	800285a <HAL_CAN_IRQHandler+0x2ee>
 8002846:	2b20      	cmp	r3, #32
 8002848:	d00c      	beq.n	8002864 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800284a:	e024      	b.n	8002896 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800284c:	2b50      	cmp	r3, #80	; 0x50
 800284e:	d018      	beq.n	8002882 <HAL_CAN_IRQHandler+0x316>
 8002850:	2b60      	cmp	r3, #96	; 0x60
 8002852:	d01b      	beq.n	800288c <HAL_CAN_IRQHandler+0x320>
 8002854:	2b40      	cmp	r3, #64	; 0x40
 8002856:	d00f      	beq.n	8002878 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002858:	e01d      	b.n	8002896 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	f043 0308 	orr.w	r3, r3, #8
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002862:	e018      	b.n	8002896 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	f043 0310 	orr.w	r3, r3, #16
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800286c:	e013      	b.n	8002896 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	f043 0320 	orr.w	r3, r3, #32
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002876:	e00e      	b.n	8002896 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002880:	e009      	b.n	8002896 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002888:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800288a:	e004      	b.n	8002896 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002894:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699a      	ldr	r2, [r3, #24]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80028a4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	2204      	movs	r2, #4
 80028ac:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80028ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d008      	beq.n	80028c6 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f87c 	bl	80029be <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80028c6:	bf00      	nop
 80028c8:	3728      	adds	r7, #40	; 0x28
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr

080029aa <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80029aa:	b480      	push	{r7}
 80029ac:	b083      	sub	sp, #12
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr

080029be <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80029be:	b480      	push	{r7}
 80029c0:	b083      	sub	sp, #12
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029e4:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029f0:	4013      	ands	r3, r2
 80029f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a06:	4a04      	ldr	r2, [pc, #16]	; (8002a18 <__NVIC_SetPriorityGrouping+0x44>)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	60d3      	str	r3, [r2, #12]
}
 8002a0c:	bf00      	nop
 8002a0e:	3714      	adds	r7, #20
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	e000ed00 	.word	0xe000ed00

08002a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a20:	4b04      	ldr	r3, [pc, #16]	; (8002a34 <__NVIC_GetPriorityGrouping+0x18>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	0a1b      	lsrs	r3, r3, #8
 8002a26:	f003 0307 	and.w	r3, r3, #7
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	db0b      	blt.n	8002a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4a:	79fb      	ldrb	r3, [r7, #7]
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	4907      	ldr	r1, [pc, #28]	; (8002a70 <__NVIC_EnableIRQ+0x38>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	2001      	movs	r0, #1
 8002a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	6039      	str	r1, [r7, #0]
 8002a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	db0a      	blt.n	8002a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	b2da      	uxtb	r2, r3
 8002a8c:	490c      	ldr	r1, [pc, #48]	; (8002ac0 <__NVIC_SetPriority+0x4c>)
 8002a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a92:	0112      	lsls	r2, r2, #4
 8002a94:	b2d2      	uxtb	r2, r2
 8002a96:	440b      	add	r3, r1
 8002a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a9c:	e00a      	b.n	8002ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4908      	ldr	r1, [pc, #32]	; (8002ac4 <__NVIC_SetPriority+0x50>)
 8002aa4:	79fb      	ldrb	r3, [r7, #7]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	3b04      	subs	r3, #4
 8002aac:	0112      	lsls	r2, r2, #4
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	761a      	strb	r2, [r3, #24]
}
 8002ab4:	bf00      	nop
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	e000e100 	.word	0xe000e100
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b089      	sub	sp, #36	; 0x24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f1c3 0307 	rsb	r3, r3, #7
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	bf28      	it	cs
 8002ae6:	2304      	movcs	r3, #4
 8002ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2b06      	cmp	r3, #6
 8002af0:	d902      	bls.n	8002af8 <NVIC_EncodePriority+0x30>
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	3b03      	subs	r3, #3
 8002af6:	e000      	b.n	8002afa <NVIC_EncodePriority+0x32>
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002afc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	43da      	mvns	r2, r3
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1a:	43d9      	mvns	r1, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b20:	4313      	orrs	r3, r2
         );
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3724      	adds	r7, #36	; 0x24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
	...

08002b30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b40:	d301      	bcc.n	8002b46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b42:	2301      	movs	r3, #1
 8002b44:	e00f      	b.n	8002b66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <SysTick_Config+0x40>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b4e:	210f      	movs	r1, #15
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b54:	f7ff ff8e 	bl	8002a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b58:	4b05      	ldr	r3, [pc, #20]	; (8002b70 <SysTick_Config+0x40>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b5e:	4b04      	ldr	r3, [pc, #16]	; (8002b70 <SysTick_Config+0x40>)
 8002b60:	2207      	movs	r2, #7
 8002b62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	e000e010 	.word	0xe000e010

08002b74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f7ff ff29 	bl	80029d4 <__NVIC_SetPriorityGrouping>
}
 8002b82:	bf00      	nop
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
 8002b96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b9c:	f7ff ff3e 	bl	8002a1c <__NVIC_GetPriorityGrouping>
 8002ba0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	68b9      	ldr	r1, [r7, #8]
 8002ba6:	6978      	ldr	r0, [r7, #20]
 8002ba8:	f7ff ff8e 	bl	8002ac8 <NVIC_EncodePriority>
 8002bac:	4602      	mov	r2, r0
 8002bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff ff5d 	bl	8002a74 <__NVIC_SetPriority>
}
 8002bba:	bf00      	nop
 8002bbc:	3718      	adds	r7, #24
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b082      	sub	sp, #8
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	4603      	mov	r3, r0
 8002bca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff ff31 	bl	8002a38 <__NVIC_EnableIRQ>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b082      	sub	sp, #8
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ffa2 	bl	8002b30 <SysTick_Config>
 8002bec:	4603      	mov	r3, r0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3708      	adds	r7, #8
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002c04:	f7fe fa26 	bl	8001054 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e099      	b.n	8002d48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 0201 	bic.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c34:	e00f      	b.n	8002c56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c36:	f7fe fa0d 	bl	8001054 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b05      	cmp	r3, #5
 8002c42:	d908      	bls.n	8002c56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2220      	movs	r2, #32
 8002c48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e078      	b.n	8002d48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1e8      	bne.n	8002c36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	4b38      	ldr	r3, [pc, #224]	; (8002d50 <HAL_DMA_Init+0x158>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d107      	bne.n	8002cc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0307 	bic.w	r3, r3, #7
 8002cd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d117      	bne.n	8002d1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00e      	beq.n	8002d1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f000 fae5 	bl	80032cc <DMA_CheckFifoParam>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d008      	beq.n	8002d1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2240      	movs	r2, #64	; 0x40
 8002d0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2201      	movs	r2, #1
 8002d12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002d16:	2301      	movs	r3, #1
 8002d18:	e016      	b.n	8002d48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa9c 	bl	8003260 <DMA_CalcBaseAndBitshift>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	223f      	movs	r2, #63	; 0x3f
 8002d32:	409a      	lsls	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	f010803f 	.word	0xf010803f

08002d54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
 8002d60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d101      	bne.n	8002d7a <HAL_DMA_Start_IT+0x26>
 8002d76:	2302      	movs	r3, #2
 8002d78:	e040      	b.n	8002dfc <HAL_DMA_Start_IT+0xa8>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d12f      	bne.n	8002dee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2202      	movs	r2, #2
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68b9      	ldr	r1, [r7, #8]
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f000 fa2e 	bl	8003204 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dac:	223f      	movs	r2, #63	; 0x3f
 8002dae:	409a      	lsls	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0216 	orr.w	r2, r2, #22
 8002dc2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d007      	beq.n	8002ddc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0208 	orr.w	r2, r2, #8
 8002dda:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f042 0201 	orr.w	r2, r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	e005      	b.n	8002dfa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2200      	movs	r2, #0
 8002df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002df6:	2302      	movs	r3, #2
 8002df8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3718      	adds	r7, #24
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d004      	beq.n	8002e22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2280      	movs	r2, #128	; 0x80
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00c      	b.n	8002e3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2205      	movs	r2, #5
 8002e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f022 0201 	bic.w	r2, r2, #1
 8002e38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e54:	4b92      	ldr	r3, [pc, #584]	; (80030a0 <HAL_DMA_IRQHandler+0x258>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a92      	ldr	r2, [pc, #584]	; (80030a4 <HAL_DMA_IRQHandler+0x25c>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0a9b      	lsrs	r3, r3, #10
 8002e60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	2208      	movs	r2, #8
 8002e74:	409a      	lsls	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01a      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea0:	2208      	movs	r2, #8
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eac:	f043 0201 	orr.w	r2, r3, #1
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb8:	2201      	movs	r2, #1
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d012      	beq.n	8002eea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	409a      	lsls	r2, r3
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee2:	f043 0202 	orr.w	r2, r3, #2
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	2204      	movs	r2, #4
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d012      	beq.n	8002f20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00b      	beq.n	8002f20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	409a      	lsls	r2, r3
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f18:	f043 0204 	orr.w	r2, r3, #4
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f24:	2210      	movs	r2, #16
 8002f26:	409a      	lsls	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d043      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d03c      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f42:	2210      	movs	r2, #16
 8002f44:	409a      	lsls	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d018      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d108      	bne.n	8002f78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d024      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
 8002f76:	e01f      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d01b      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	4798      	blx	r3
 8002f88:	e016      	b.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d107      	bne.n	8002fa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0208 	bic.w	r2, r2, #8
 8002fa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	6878      	ldr	r0, [r7, #4]
 8002fb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fbc:	2220      	movs	r2, #32
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 808e 	beq.w	80030e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0310 	and.w	r3, r3, #16
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8086 	beq.w	80030e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fde:	2220      	movs	r2, #32
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d136      	bne.n	8003060 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0216 	bic.w	r2, r2, #22
 8003000:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003010:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_DMA_IRQHandler+0x1da>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0208 	bic.w	r2, r2, #8
 8003030:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	223f      	movs	r2, #63	; 0x3f
 8003038:	409a      	lsls	r2, r3
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2201      	movs	r2, #1
 800304a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003052:	2b00      	cmp	r3, #0
 8003054:	d07d      	beq.n	8003152 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
        }
        return;
 800305e:	e078      	b.n	8003152 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d01c      	beq.n	80030a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d108      	bne.n	800308e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	2b00      	cmp	r3, #0
 8003082:	d030      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	4798      	blx	r3
 800308c:	e02b      	b.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d027      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	4798      	blx	r3
 800309e:	e022      	b.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
 80030a0:	20000040 	.word	0x20000040
 80030a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d10f      	bne.n	80030d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 0210 	bic.w	r2, r2, #16
 80030c4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d032      	beq.n	8003154 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d022      	beq.n	8003140 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2205      	movs	r2, #5
 80030fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	3301      	adds	r3, #1
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	429a      	cmp	r2, r3
 800311c:	d307      	bcc.n	800312e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1f2      	bne.n	8003112 <HAL_DMA_IRQHandler+0x2ca>
 800312c:	e000      	b.n	8003130 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800312e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2201      	movs	r2, #1
 800313c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
 8003150:	e000      	b.n	8003154 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003152:	bf00      	nop
    }
  }
}
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop

0800315c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800315c:	b480      	push	{r7}
 800315e:	b087      	sub	sp, #28
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	460b      	mov	r3, r1
 8003166:	607a      	str	r2, [r7, #4]
 8003168:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800316a:	2300      	movs	r3, #0
 800316c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003174:	2b01      	cmp	r3, #1
 8003176:	d101      	bne.n	800317c <HAL_DMA_RegisterCallback+0x20>
 8003178:	2302      	movs	r3, #2
 800317a:	e03c      	b.n	80031f6 <HAL_DMA_RegisterCallback+0x9a>
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d129      	bne.n	80031e4 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003190:	7afb      	ldrb	r3, [r7, #11]
 8003192:	2b05      	cmp	r3, #5
 8003194:	d829      	bhi.n	80031ea <HAL_DMA_RegisterCallback+0x8e>
 8003196:	a201      	add	r2, pc, #4	; (adr r2, 800319c <HAL_DMA_RegisterCallback+0x40>)
 8003198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800319c:	080031b5 	.word	0x080031b5
 80031a0:	080031bd 	.word	0x080031bd
 80031a4:	080031c5 	.word	0x080031c5
 80031a8:	080031cd 	.word	0x080031cd
 80031ac:	080031d5 	.word	0x080031d5
 80031b0:	080031dd 	.word	0x080031dd
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 80031ba:	e017      	b.n	80031ec <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80031c2:	e013      	b.n	80031ec <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80031ca:	e00f      	b.n	80031ec <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80031d2:	e00b      	b.n	80031ec <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80031da:	e007      	b.n	80031ec <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031e2:	e003      	b.n	80031ec <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	75fb      	strb	r3, [r7, #23]
 80031e8:	e000      	b.n	80031ec <HAL_DMA_RegisterCallback+0x90>
      break;
 80031ea:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80031f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop

08003204 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003220:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	683a      	ldr	r2, [r7, #0]
 8003228:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	2b40      	cmp	r3, #64	; 0x40
 8003230:	d108      	bne.n	8003244 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68ba      	ldr	r2, [r7, #8]
 8003240:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003242:	e007      	b.n	8003254 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]
}
 8003254:	bf00      	nop
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	3b10      	subs	r3, #16
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	091b      	lsrs	r3, r3, #4
 8003278:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800327a:	4a13      	ldr	r2, [pc, #76]	; (80032c8 <DMA_CalcBaseAndBitshift+0x68>)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4413      	add	r3, r2
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	461a      	mov	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b03      	cmp	r3, #3
 800328c:	d909      	bls.n	80032a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	1d1a      	adds	r2, r3, #4
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	659a      	str	r2, [r3, #88]	; 0x58
 80032a0:	e007      	b.n	80032b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032aa:	f023 0303 	bic.w	r3, r3, #3
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3714      	adds	r7, #20
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	aaaaaaab 	.word	0xaaaaaaab
 80032c8:	080127e8 	.word	0x080127e8

080032cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11f      	bne.n	8003326 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2b03      	cmp	r3, #3
 80032ea:	d855      	bhi.n	8003398 <DMA_CheckFifoParam+0xcc>
 80032ec:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <DMA_CheckFifoParam+0x28>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003305 	.word	0x08003305
 80032f8:	08003317 	.word	0x08003317
 80032fc:	08003305 	.word	0x08003305
 8003300:	08003399 	.word	0x08003399
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d045      	beq.n	800339c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003314:	e042      	b.n	800339c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800331a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800331e:	d13f      	bne.n	80033a0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003324:	e03c      	b.n	80033a0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800332e:	d121      	bne.n	8003374 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b03      	cmp	r3, #3
 8003334:	d836      	bhi.n	80033a4 <DMA_CheckFifoParam+0xd8>
 8003336:	a201      	add	r2, pc, #4	; (adr r2, 800333c <DMA_CheckFifoParam+0x70>)
 8003338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800333c:	0800334d 	.word	0x0800334d
 8003340:	08003353 	.word	0x08003353
 8003344:	0800334d 	.word	0x0800334d
 8003348:	08003365 	.word	0x08003365
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      break;
 8003350:	e02f      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d024      	beq.n	80033a8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003362:	e021      	b.n	80033a8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800336c:	d11e      	bne.n	80033ac <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003372:	e01b      	b.n	80033ac <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b02      	cmp	r3, #2
 8003378:	d902      	bls.n	8003380 <DMA_CheckFifoParam+0xb4>
 800337a:	2b03      	cmp	r3, #3
 800337c:	d003      	beq.n	8003386 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800337e:	e018      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	73fb      	strb	r3, [r7, #15]
      break;
 8003384:	e015      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d00e      	beq.n	80033b0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      break;
 8003396:	e00b      	b.n	80033b0 <DMA_CheckFifoParam+0xe4>
      break;
 8003398:	bf00      	nop
 800339a:	e00a      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 800339c:	bf00      	nop
 800339e:	e008      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 80033a0:	bf00      	nop
 80033a2:	e006      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 80033a4:	bf00      	nop
 80033a6:	e004      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 80033a8:	bf00      	nop
 80033aa:	e002      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;   
 80033ac:	bf00      	nop
 80033ae:	e000      	b.n	80033b2 <DMA_CheckFifoParam+0xe6>
      break;
 80033b0:	bf00      	nop
    }
  } 
  
  return status; 
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	; 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033d6:	2300      	movs	r3, #0
 80033d8:	61fb      	str	r3, [r7, #28]
 80033da:	e16b      	b.n	80036b4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033dc:	2201      	movs	r2, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	697a      	ldr	r2, [r7, #20]
 80033ec:	4013      	ands	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	429a      	cmp	r2, r3
 80033f6:	f040 815a 	bne.w	80036ae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d00b      	beq.n	800341a <HAL_GPIO_Init+0x5a>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b02      	cmp	r3, #2
 8003408:	d007      	beq.n	800341a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800340e:	2b11      	cmp	r3, #17
 8003410:	d003      	beq.n	800341a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b12      	cmp	r3, #18
 8003418:	d130      	bne.n	800347c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	005b      	lsls	r3, r3, #1
 8003424:	2203      	movs	r2, #3
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43db      	mvns	r3, r3
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	4013      	ands	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4313      	orrs	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69ba      	ldr	r2, [r7, #24]
 8003448:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003450:	2201      	movs	r2, #1
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	091b      	lsrs	r3, r3, #4
 8003466:	f003 0201 	and.w	r2, r3, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	2203      	movs	r2, #3
 8003488:	fa02 f303 	lsl.w	r3, r2, r3
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4313      	orrs	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d003      	beq.n	80034bc <HAL_GPIO_Init+0xfc>
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b12      	cmp	r3, #18
 80034ba:	d123      	bne.n	8003504 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	08da      	lsrs	r2, r3, #3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	3208      	adds	r2, #8
 80034c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	220f      	movs	r2, #15
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	43db      	mvns	r3, r3
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4013      	ands	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	fa02 f303 	lsl.w	r3, r2, r3
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	08da      	lsrs	r2, r3, #3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3208      	adds	r2, #8
 80034fe:	69b9      	ldr	r1, [r7, #24]
 8003500:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	2203      	movs	r2, #3
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43db      	mvns	r3, r3
 8003516:	69ba      	ldr	r2, [r7, #24]
 8003518:	4013      	ands	r3, r2
 800351a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 0203 	and.w	r2, r3, #3
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	005b      	lsls	r3, r3, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4313      	orrs	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80b4 	beq.w	80036ae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	60fb      	str	r3, [r7, #12]
 800354a:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_GPIO_Init+0x308>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800354e:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_GPIO_Init+0x308>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003554:	6453      	str	r3, [r2, #68]	; 0x44
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_GPIO_Init+0x308>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003562:	4a5a      	ldr	r2, [pc, #360]	; (80036cc <HAL_GPIO_Init+0x30c>)
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	089b      	lsrs	r3, r3, #2
 8003568:	3302      	adds	r3, #2
 800356a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f003 0303 	and.w	r3, r3, #3
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	220f      	movs	r2, #15
 800357a:	fa02 f303 	lsl.w	r3, r2, r3
 800357e:	43db      	mvns	r3, r3
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	4013      	ands	r3, r2
 8003584:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a51      	ldr	r2, [pc, #324]	; (80036d0 <HAL_GPIO_Init+0x310>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d02b      	beq.n	80035e6 <HAL_GPIO_Init+0x226>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a50      	ldr	r2, [pc, #320]	; (80036d4 <HAL_GPIO_Init+0x314>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d025      	beq.n	80035e2 <HAL_GPIO_Init+0x222>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4f      	ldr	r2, [pc, #316]	; (80036d8 <HAL_GPIO_Init+0x318>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01f      	beq.n	80035de <HAL_GPIO_Init+0x21e>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a4e      	ldr	r2, [pc, #312]	; (80036dc <HAL_GPIO_Init+0x31c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d019      	beq.n	80035da <HAL_GPIO_Init+0x21a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a4d      	ldr	r2, [pc, #308]	; (80036e0 <HAL_GPIO_Init+0x320>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_GPIO_Init+0x216>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a4c      	ldr	r2, [pc, #304]	; (80036e4 <HAL_GPIO_Init+0x324>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d00d      	beq.n	80035d2 <HAL_GPIO_Init+0x212>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a4b      	ldr	r2, [pc, #300]	; (80036e8 <HAL_GPIO_Init+0x328>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <HAL_GPIO_Init+0x20e>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a4a      	ldr	r2, [pc, #296]	; (80036ec <HAL_GPIO_Init+0x32c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d101      	bne.n	80035ca <HAL_GPIO_Init+0x20a>
 80035c6:	2307      	movs	r3, #7
 80035c8:	e00e      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035ca:	2308      	movs	r3, #8
 80035cc:	e00c      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035ce:	2306      	movs	r3, #6
 80035d0:	e00a      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035d2:	2305      	movs	r3, #5
 80035d4:	e008      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e006      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035da:	2303      	movs	r3, #3
 80035dc:	e004      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035de:	2302      	movs	r3, #2
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_GPIO_Init+0x228>
 80035e6:	2300      	movs	r3, #0
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	f002 0203 	and.w	r2, r2, #3
 80035ee:	0092      	lsls	r2, r2, #2
 80035f0:	4093      	lsls	r3, r2
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035f8:	4934      	ldr	r1, [pc, #208]	; (80036cc <HAL_GPIO_Init+0x30c>)
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	089b      	lsrs	r3, r3, #2
 80035fe:	3302      	adds	r3, #2
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003606:	4b3a      	ldr	r3, [pc, #232]	; (80036f0 <HAL_GPIO_Init+0x330>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	4313      	orrs	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800362a:	4a31      	ldr	r2, [pc, #196]	; (80036f0 <HAL_GPIO_Init+0x330>)
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003630:	4b2f      	ldr	r3, [pc, #188]	; (80036f0 <HAL_GPIO_Init+0x330>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	43db      	mvns	r3, r3
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	4013      	ands	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d003      	beq.n	8003654 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003654:	4a26      	ldr	r2, [pc, #152]	; (80036f0 <HAL_GPIO_Init+0x330>)
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800365a:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_GPIO_Init+0x330>)
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	43db      	mvns	r3, r3
 8003664:	69ba      	ldr	r2, [r7, #24]
 8003666:	4013      	ands	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003676:	69ba      	ldr	r2, [r7, #24]
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4313      	orrs	r3, r2
 800367c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800367e:	4a1c      	ldr	r2, [pc, #112]	; (80036f0 <HAL_GPIO_Init+0x330>)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003684:	4b1a      	ldr	r3, [pc, #104]	; (80036f0 <HAL_GPIO_Init+0x330>)
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	43db      	mvns	r3, r3
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	4013      	ands	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036a0:	69ba      	ldr	r2, [r7, #24]
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80036a8:	4a11      	ldr	r2, [pc, #68]	; (80036f0 <HAL_GPIO_Init+0x330>)
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	3301      	adds	r3, #1
 80036b2:	61fb      	str	r3, [r7, #28]
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	f67f ae90 	bls.w	80033dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036bc:	bf00      	nop
 80036be:	3724      	adds	r7, #36	; 0x24
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40013800 	.word	0x40013800
 80036d0:	40020000 	.word	0x40020000
 80036d4:	40020400 	.word	0x40020400
 80036d8:	40020800 	.word	0x40020800
 80036dc:	40020c00 	.word	0x40020c00
 80036e0:	40021000 	.word	0x40021000
 80036e4:	40021400 	.word	0x40021400
 80036e8:	40021800 	.word	0x40021800
 80036ec:	40021c00 	.word	0x40021c00
 80036f0:	40013c00 	.word	0x40013c00

080036f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	460b      	mov	r3, r1
 80036fe:	807b      	strh	r3, [r7, #2]
 8003700:	4613      	mov	r3, r2
 8003702:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003704:	787b      	ldrb	r3, [r7, #1]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d003      	beq.n	8003712 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003710:	e003      	b.n	800371a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	041a      	lsls	r2, r3, #16
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	4603      	mov	r3, r0
 8003730:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003732:	4b08      	ldr	r3, [pc, #32]	; (8003754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003734:	695a      	ldr	r2, [r3, #20]
 8003736:	88fb      	ldrh	r3, [r7, #6]
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d006      	beq.n	800374c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800373e:	4a05      	ldr	r2, [pc, #20]	; (8003754 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003744:	88fb      	ldrh	r3, [r7, #6]
 8003746:	4618      	mov	r0, r3
 8003748:	f007 fb2a 	bl	800ada0 <HAL_GPIO_EXTI_Callback>
  }
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e11f      	b.n	80039aa <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f009 fa8c 	bl	800cc9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037bc:	f001 fcb6 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a7b      	ldr	r2, [pc, #492]	; (80039b4 <HAL_I2C_Init+0x25c>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d807      	bhi.n	80037dc <HAL_I2C_Init+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a7a      	ldr	r2, [pc, #488]	; (80039b8 <HAL_I2C_Init+0x260>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf94      	ite	ls
 80037d4:	2301      	movls	r3, #1
 80037d6:	2300      	movhi	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e006      	b.n	80037ea <HAL_I2C_Init+0x92>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a77      	ldr	r2, [pc, #476]	; (80039bc <HAL_I2C_Init+0x264>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0db      	b.n	80039aa <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a72      	ldr	r2, [pc, #456]	; (80039c0 <HAL_I2C_Init+0x268>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a64      	ldr	r2, [pc, #400]	; (80039b4 <HAL_I2C_Init+0x25c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d802      	bhi.n	800382c <HAL_I2C_Init+0xd4>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	e009      	b.n	8003840 <HAL_I2C_Init+0xe8>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a63      	ldr	r2, [pc, #396]	; (80039c4 <HAL_I2C_Init+0x26c>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003852:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4956      	ldr	r1, [pc, #344]	; (80039b4 <HAL_I2C_Init+0x25c>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d80d      	bhi.n	800387c <HAL_I2C_Init+0x124>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e59      	subs	r1, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fbb1 f3f3 	udiv	r3, r1, r3
 800386e:	3301      	adds	r3, #1
 8003870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003874:	2b04      	cmp	r3, #4
 8003876:	bf38      	it	cc
 8003878:	2304      	movcc	r3, #4
 800387a:	e04f      	b.n	800391c <HAL_I2C_Init+0x1c4>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d111      	bne.n	80038a8 <HAL_I2C_Init+0x150>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e58      	subs	r0, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6859      	ldr	r1, [r3, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	440b      	add	r3, r1
 8003892:	fbb0 f3f3 	udiv	r3, r0, r3
 8003896:	3301      	adds	r3, #1
 8003898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389c:	2b00      	cmp	r3, #0
 800389e:	bf0c      	ite	eq
 80038a0:	2301      	moveq	r3, #1
 80038a2:	2300      	movne	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e012      	b.n	80038ce <HAL_I2C_Init+0x176>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1e58      	subs	r0, r3, #1
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6859      	ldr	r1, [r3, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	0099      	lsls	r1, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80038be:	3301      	adds	r3, #1
 80038c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	bf0c      	ite	eq
 80038c8:	2301      	moveq	r3, #1
 80038ca:	2300      	movne	r3, #0
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_I2C_Init+0x17e>
 80038d2:	2301      	movs	r3, #1
 80038d4:	e022      	b.n	800391c <HAL_I2C_Init+0x1c4>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10e      	bne.n	80038fc <HAL_I2C_Init+0x1a4>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1e58      	subs	r0, r3, #1
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6859      	ldr	r1, [r3, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	005b      	lsls	r3, r3, #1
 80038ea:	440b      	add	r3, r1
 80038ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038fa:	e00f      	b.n	800391c <HAL_I2C_Init+0x1c4>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1e58      	subs	r0, r3, #1
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	440b      	add	r3, r1
 800390a:	0099      	lsls	r1, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003912:	3301      	adds	r3, #1
 8003914:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	6809      	ldr	r1, [r1, #0]
 8003920:	4313      	orrs	r3, r2
 8003922:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	69da      	ldr	r2, [r3, #28]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	430a      	orrs	r2, r1
 800393e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800394a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	6911      	ldr	r1, [r2, #16]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	68d2      	ldr	r2, [r2, #12]
 8003956:	4311      	orrs	r1, r2
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6812      	ldr	r2, [r2, #0]
 800395c:	430b      	orrs	r3, r1
 800395e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	695a      	ldr	r2, [r3, #20]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f042 0201 	orr.w	r2, r2, #1
 800398a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2220      	movs	r2, #32
 8003996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a8:	2300      	movs	r3, #0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	000186a0 	.word	0x000186a0
 80039b8:	001e847f 	.word	0x001e847f
 80039bc:	003d08ff 	.word	0x003d08ff
 80039c0:	431bde83 	.word	0x431bde83
 80039c4:	10624dd3 	.word	0x10624dd3

080039c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	461a      	mov	r2, r3
 80039d4:	460b      	mov	r3, r1
 80039d6:	817b      	strh	r3, [r7, #10]
 80039d8:	4613      	mov	r3, r2
 80039da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039dc:	f7fd fb3a 	bl	8001054 <HAL_GetTick>
 80039e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	f040 80e0 	bne.w	8003bb0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	9300      	str	r3, [sp, #0]
 80039f4:	2319      	movs	r3, #25
 80039f6:	2201      	movs	r2, #1
 80039f8:	4970      	ldr	r1, [pc, #448]	; (8003bbc <HAL_I2C_Master_Transmit+0x1f4>)
 80039fa:	68f8      	ldr	r0, [r7, #12]
 80039fc:	f000 fc56 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a06:	2302      	movs	r3, #2
 8003a08:	e0d3      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_I2C_Master_Transmit+0x50>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0cc      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d007      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a4c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2221      	movs	r2, #33	; 0x21
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2210      	movs	r2, #16
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	2200      	movs	r2, #0
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	893a      	ldrh	r2, [r7, #8]
 8003a6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4a50      	ldr	r2, [pc, #320]	; (8003bc0 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a80:	8979      	ldrh	r1, [r7, #10]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fac2 	bl	8004010 <I2C_MasterRequestWrite>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e08d      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003aac:	e066      	b.n	8003b7c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	6a39      	ldr	r1, [r7, #32]
 8003ab2:	68f8      	ldr	r0, [r7, #12]
 8003ab4:	f000 fcd0 	bl	8004458 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00d      	beq.n	8003ada <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d107      	bne.n	8003ad6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ad4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e06b      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	781a      	ldrb	r2, [r3, #0]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d11b      	bne.n	8003b50 <HAL_I2C_Master_Transmit+0x188>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d017      	beq.n	8003b50 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	781a      	ldrb	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	1c5a      	adds	r2, r3, #1
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b50:	697a      	ldr	r2, [r7, #20]
 8003b52:	6a39      	ldr	r1, [r7, #32]
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f000 fcc0 	bl	80044da <I2C_WaitOnBTFFlagUntilTimeout>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00d      	beq.n	8003b7c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	2b04      	cmp	r3, #4
 8003b66:	d107      	bne.n	8003b78 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b76:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e01a      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d194      	bne.n	8003aae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2220      	movs	r2, #32
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	e000      	b.n	8003bb2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bb0:	2302      	movs	r3, #2
  }
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	3718      	adds	r7, #24
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	00100002 	.word	0x00100002
 8003bc0:	ffff0000 	.word	0xffff0000

08003bc4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b08c      	sub	sp, #48	; 0x30
 8003bc8:	af02      	add	r7, sp, #8
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	817b      	strh	r3, [r7, #10]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bd8:	f7fd fa3c 	bl	8001054 <HAL_GetTick>
 8003bdc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	2b20      	cmp	r3, #32
 8003be8:	f040 820b 	bne.w	8004002 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	2319      	movs	r3, #25
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	497c      	ldr	r1, [pc, #496]	; (8003de8 <HAL_I2C_Master_Receive+0x224>)
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb58 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c02:	2302      	movs	r3, #2
 8003c04:	e1fe      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_I2C_Master_Receive+0x50>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e1f7      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	2b01      	cmp	r3, #1
 8003c28:	d007      	beq.n	8003c3a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0201 	orr.w	r2, r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c48:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	2222      	movs	r2, #34	; 0x22
 8003c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2210      	movs	r2, #16
 8003c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	893a      	ldrh	r2, [r7, #8]
 8003c6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29a      	uxth	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4a5c      	ldr	r2, [pc, #368]	; (8003dec <HAL_I2C_Master_Receive+0x228>)
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c7c:	8979      	ldrh	r1, [r7, #10]
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 fa46 	bl	8004114 <I2C_MasterRequestRead>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d001      	beq.n	8003c92 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	e1b8      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d113      	bne.n	8003cc2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	623b      	str	r3, [r7, #32]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	695b      	ldr	r3, [r3, #20]
 8003ca4:	623b      	str	r3, [r7, #32]
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	623b      	str	r3, [r7, #32]
 8003cae:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	e18c      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d11b      	bne.n	8003d02 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	699b      	ldr	r3, [r3, #24]
 8003cec:	61fb      	str	r3, [r7, #28]
 8003cee:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	e16c      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d11b      	bne.n	8003d42 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d18:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	699b      	ldr	r3, [r3, #24]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	e14c      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d52:	2300      	movs	r3, #0
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	617b      	str	r3, [r7, #20]
 8003d66:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d68:	e138      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	f200 80f1 	bhi.w	8003f56 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d123      	bne.n	8003dc4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 fbeb 	bl	800455c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e139      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691a      	ldr	r2, [r3, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	1c5a      	adds	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dc2:	e10b      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d14e      	bne.n	8003e6a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	4906      	ldr	r1, [pc, #24]	; (8003df0 <HAL_I2C_Master_Receive+0x22c>)
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f000 fa68 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d008      	beq.n	8003df4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e10e      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
 8003de6:	bf00      	nop
 8003de8:	00100002 	.word	0x00100002
 8003dec:	ffff0000 	.word	0xffff0000
 8003df0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e68:	e0b8      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e70:	2200      	movs	r2, #0
 8003e72:	4966      	ldr	r1, [pc, #408]	; (800400c <HAL_I2C_Master_Receive+0x448>)
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 fa19 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d001      	beq.n	8003e84 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e0bf      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691a      	ldr	r2, [r3, #16]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	b2d2      	uxtb	r2, r2
 8003ea0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb0:	3b01      	subs	r3, #1
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ecc:	2200      	movs	r2, #0
 8003ece:	494f      	ldr	r1, [pc, #316]	; (800400c <HAL_I2C_Master_Receive+0x448>)
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f9eb 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	e091      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	691a      	ldr	r2, [r3, #16]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	b2d2      	uxtb	r2, r2
 8003f2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3e:	3b01      	subs	r3, #1
 8003f40:	b29a      	uxth	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f54:	e042      	b.n	8003fdc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fafe 	bl	800455c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e04c      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	691a      	ldr	r2, [r3, #16]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f74:	b2d2      	uxtb	r2, r2
 8003f76:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d118      	bne.n	8003fdc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f47f aec2 	bne.w	8003d6a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
 8004000:	e000      	b.n	8004004 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	00010004 	.word	0x00010004

08004010 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af02      	add	r7, sp, #8
 8004016:	60f8      	str	r0, [r7, #12]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	603b      	str	r3, [r7, #0]
 800401c:	460b      	mov	r3, r1
 800401e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	2b08      	cmp	r3, #8
 800402a:	d006      	beq.n	800403a <I2C_MasterRequestWrite+0x2a>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2b01      	cmp	r3, #1
 8004030:	d003      	beq.n	800403a <I2C_MasterRequestWrite+0x2a>
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004038:	d108      	bne.n	800404c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	e00b      	b.n	8004064 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004050:	2b12      	cmp	r3, #18
 8004052:	d107      	bne.n	8004064 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f91b 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00c      	beq.n	8004096 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	2b00      	cmp	r3, #0
 8004088:	d003      	beq.n	8004092 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004090:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e035      	b.n	8004102 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800409e:	d108      	bne.n	80040b2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040a0:	897b      	ldrh	r3, [r7, #10]
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	461a      	mov	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040ae:	611a      	str	r2, [r3, #16]
 80040b0:	e01b      	b.n	80040ea <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040b2:	897b      	ldrh	r3, [r7, #10]
 80040b4:	11db      	asrs	r3, r3, #7
 80040b6:	b2db      	uxtb	r3, r3
 80040b8:	f003 0306 	and.w	r3, r3, #6
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f063 030f 	orn	r3, r3, #15
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	490f      	ldr	r1, [pc, #60]	; (800410c <I2C_MasterRequestWrite+0xfc>)
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f942 	bl	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e010      	b.n	8004102 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040e0:	897b      	ldrh	r3, [r7, #10]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4908      	ldr	r1, [pc, #32]	; (8004110 <I2C_MasterRequestWrite+0x100>)
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f932 	bl	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d001      	beq.n	8004100 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e000      	b.n	8004102 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3718      	adds	r7, #24
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	00010008 	.word	0x00010008
 8004110:	00010002 	.word	0x00010002

08004114 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b088      	sub	sp, #32
 8004118:	af02      	add	r7, sp, #8
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	607a      	str	r2, [r7, #4]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	460b      	mov	r3, r1
 8004122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004138:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b08      	cmp	r3, #8
 800413e:	d006      	beq.n	800414e <I2C_MasterRequestRead+0x3a>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d003      	beq.n	800414e <I2C_MasterRequestRead+0x3a>
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800414c:	d108      	bne.n	8004160 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	e00b      	b.n	8004178 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004164:	2b11      	cmp	r3, #17
 8004166:	d107      	bne.n	8004178 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004176:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f000 f891 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e078      	b.n	800429c <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041b2:	d108      	bne.n	80041c6 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041b4:	897b      	ldrh	r3, [r7, #10]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	f043 0301 	orr.w	r3, r3, #1
 80041bc:	b2da      	uxtb	r2, r3
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	611a      	str	r2, [r3, #16]
 80041c4:	e05e      	b.n	8004284 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	11db      	asrs	r3, r3, #7
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	f003 0306 	and.w	r3, r3, #6
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f063 030f 	orn	r3, r3, #15
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4930      	ldr	r1, [pc, #192]	; (80042a4 <I2C_MasterRequestRead+0x190>)
 80041e4:	68f8      	ldr	r0, [r7, #12]
 80041e6:	f000 f8b8 	bl	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d001      	beq.n	80041f4 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	e053      	b.n	800429c <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041f4:	897b      	ldrh	r3, [r7, #10]
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	4929      	ldr	r1, [pc, #164]	; (80042a8 <I2C_MasterRequestRead+0x194>)
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f8a8 	bl	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e043      	b.n	800429c <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004214:	2300      	movs	r3, #0
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	695b      	ldr	r3, [r3, #20]
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	613b      	str	r3, [r7, #16]
 8004228:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004238:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	9300      	str	r3, [sp, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004246:	68f8      	ldr	r0, [r7, #12]
 8004248:	f000 f830 	bl	80042ac <I2C_WaitOnFlagUntilTimeout>
 800424c:	4603      	mov	r3, r0
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00c      	beq.n	800426c <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004266:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e017      	b.n	800429c <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800426c:	897b      	ldrh	r3, [r7, #10]
 800426e:	11db      	asrs	r3, r3, #7
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 0306 	and.w	r3, r3, #6
 8004276:	b2db      	uxtb	r3, r3
 8004278:	f063 030e 	orn	r3, r3, #14
 800427c:	b2da      	uxtb	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	687a      	ldr	r2, [r7, #4]
 8004288:	4907      	ldr	r1, [pc, #28]	; (80042a8 <I2C_MasterRequestRead+0x194>)
 800428a:	68f8      	ldr	r0, [r7, #12]
 800428c:	f000 f865 	bl	800435a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	00010008 	.word	0x00010008
 80042a8:	00010002 	.word	0x00010002

080042ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042bc:	e025      	b.n	800430a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042c4:	d021      	beq.n	800430a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c6:	f7fc fec5 	bl	8001054 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	683a      	ldr	r2, [r7, #0]
 80042d2:	429a      	cmp	r2, r3
 80042d4:	d302      	bcc.n	80042dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d116      	bne.n	800430a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2220      	movs	r2, #32
 80042e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	f043 0220 	orr.w	r2, r3, #32
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e023      	b.n	8004352 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	0c1b      	lsrs	r3, r3, #16
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d10d      	bne.n	8004330 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	43da      	mvns	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4013      	ands	r3, r2
 8004320:	b29b      	uxth	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	bf0c      	ite	eq
 8004326:	2301      	moveq	r3, #1
 8004328:	2300      	movne	r3, #0
 800432a:	b2db      	uxtb	r3, r3
 800432c:	461a      	mov	r2, r3
 800432e:	e00c      	b.n	800434a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	43da      	mvns	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4013      	ands	r3, r2
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	bf0c      	ite	eq
 8004342:	2301      	moveq	r3, #1
 8004344:	2300      	movne	r3, #0
 8004346:	b2db      	uxtb	r3, r3
 8004348:	461a      	mov	r2, r3
 800434a:	79fb      	ldrb	r3, [r7, #7]
 800434c:	429a      	cmp	r2, r3
 800434e:	d0b6      	beq.n	80042be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800435a:	b580      	push	{r7, lr}
 800435c:	b084      	sub	sp, #16
 800435e:	af00      	add	r7, sp, #0
 8004360:	60f8      	str	r0, [r7, #12]
 8004362:	60b9      	str	r1, [r7, #8]
 8004364:	607a      	str	r2, [r7, #4]
 8004366:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004368:	e051      	b.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695b      	ldr	r3, [r3, #20]
 8004370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004378:	d123      	bne.n	80043c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004388:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004392:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	f043 0204 	orr.w	r2, r3, #4
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e046      	b.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c8:	d021      	beq.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fc fe43 	bl	8001054 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d116      	bne.n	800440e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e020      	b.n	8004450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d10c      	bne.n	8004432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf14      	ite	ne
 800442a:	2301      	movne	r3, #1
 800442c:	2300      	moveq	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	e00b      	b.n	800444a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	43da      	mvns	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	4013      	ands	r3, r2
 800443e:	b29b      	uxth	r3, r3
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf14      	ite	ne
 8004444:	2301      	movne	r3, #1
 8004446:	2300      	moveq	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d18d      	bne.n	800436a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	60f8      	str	r0, [r7, #12]
 8004460:	60b9      	str	r1, [r7, #8]
 8004462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004464:	e02d      	b.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 f8ce 	bl	8004608 <I2C_IsAcknowledgeFailed>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e02d      	b.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800447c:	d021      	beq.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800447e:	f7fc fde9 	bl	8001054 <HAL_GetTick>
 8004482:	4602      	mov	r2, r0
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	1ad3      	subs	r3, r2, r3
 8004488:	68ba      	ldr	r2, [r7, #8]
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d116      	bne.n	80044c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2220      	movs	r2, #32
 800449e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f043 0220 	orr.w	r2, r3, #32
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e007      	b.n	80044d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044cc:	2b80      	cmp	r3, #128	; 0x80
 80044ce:	d1ca      	bne.n	8004466 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044e6:	e02d      	b.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 f88d 	bl	8004608 <I2C_IsAcknowledgeFailed>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e02d      	b.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044fe:	d021      	beq.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004500:	f7fc fda8 	bl	8001054 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	68ba      	ldr	r2, [r7, #8]
 800450c:	429a      	cmp	r2, r3
 800450e:	d302      	bcc.n	8004516 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d116      	bne.n	8004544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004530:	f043 0220 	orr.w	r2, r3, #32
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	e007      	b.n	8004554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	695b      	ldr	r3, [r3, #20]
 800454a:	f003 0304 	and.w	r3, r3, #4
 800454e:	2b04      	cmp	r3, #4
 8004550:	d1ca      	bne.n	80044e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004568:	e042      	b.n	80045f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b10      	cmp	r3, #16
 8004576:	d119      	bne.n	80045ac <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f06f 0210 	mvn.w	r2, #16
 8004580:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e029      	b.n	8004600 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ac:	f7fc fd52 	bl	8001054 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d302      	bcc.n	80045c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d116      	bne.n	80045f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2220      	movs	r2, #32
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045dc:	f043 0220 	orr.w	r2, r3, #32
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e007      	b.n	8004600 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fa:	2b40      	cmp	r3, #64	; 0x40
 80045fc:	d1b5      	bne.n	800456a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	695b      	ldr	r3, [r3, #20]
 8004616:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461e:	d11b      	bne.n	8004658 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004628:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004644:	f043 0204 	orr.w	r2, r3, #4
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e000      	b.n	800465a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr

08004666 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004666:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004668:	b08f      	sub	sp, #60	; 0x3c
 800466a:	af0a      	add	r7, sp, #40	; 0x28
 800466c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d101      	bne.n	8004678 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004674:	2301      	movs	r3, #1
 8004676:	e10f      	b.n	8004898 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f008 fe5e 	bl	800d354 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2203      	movs	r2, #3
 800469c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f004 f847 	bl	800874a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	603b      	str	r3, [r7, #0]
 80046c2:	687e      	ldr	r6, [r7, #4]
 80046c4:	466d      	mov	r5, sp
 80046c6:	f106 0410 	add.w	r4, r6, #16
 80046ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80046da:	1d33      	adds	r3, r6, #4
 80046dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046de:	6838      	ldr	r0, [r7, #0]
 80046e0:	f003 ffd2 	bl	8008688 <USB_CoreInit>
 80046e4:	4603      	mov	r3, r0
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e0d0      	b.n	8004898 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2100      	movs	r1, #0
 80046fc:	4618      	mov	r0, r3
 80046fe:	f004 f835 	bl	800876c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004702:	2300      	movs	r3, #0
 8004704:	73fb      	strb	r3, [r7, #15]
 8004706:	e04a      	b.n	800479e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	333d      	adds	r3, #61	; 0x3d
 8004718:	2201      	movs	r2, #1
 800471a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	6879      	ldr	r1, [r7, #4]
 8004720:	4613      	mov	r3, r2
 8004722:	00db      	lsls	r3, r3, #3
 8004724:	1a9b      	subs	r3, r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	440b      	add	r3, r1
 800472a:	333c      	adds	r3, #60	; 0x3c
 800472c:	7bfa      	ldrb	r2, [r7, #15]
 800472e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004730:	7bfa      	ldrb	r2, [r7, #15]
 8004732:	7bfb      	ldrb	r3, [r7, #15]
 8004734:	b298      	uxth	r0, r3
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	1a9b      	subs	r3, r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3342      	adds	r3, #66	; 0x42
 8004744:	4602      	mov	r2, r0
 8004746:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	333f      	adds	r3, #63	; 0x3f
 8004758:	2200      	movs	r2, #0
 800475a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800475c:	7bfa      	ldrb	r2, [r7, #15]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	1a9b      	subs	r3, r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	3344      	adds	r3, #68	; 0x44
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004770:	7bfa      	ldrb	r2, [r7, #15]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3348      	adds	r3, #72	; 0x48
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004784:	7bfa      	ldrb	r2, [r7, #15]
 8004786:	6879      	ldr	r1, [r7, #4]
 8004788:	4613      	mov	r3, r2
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	1a9b      	subs	r3, r3, r2
 800478e:	009b      	lsls	r3, r3, #2
 8004790:	440b      	add	r3, r1
 8004792:	3350      	adds	r3, #80	; 0x50
 8004794:	2200      	movs	r2, #0
 8004796:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004798:	7bfb      	ldrb	r3, [r7, #15]
 800479a:	3301      	adds	r3, #1
 800479c:	73fb      	strb	r3, [r7, #15]
 800479e:	7bfa      	ldrb	r2, [r7, #15]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d3af      	bcc.n	8004708 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a8:	2300      	movs	r3, #0
 80047aa:	73fb      	strb	r3, [r7, #15]
 80047ac:	e044      	b.n	8004838 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047ae:	7bfa      	ldrb	r2, [r7, #15]
 80047b0:	6879      	ldr	r1, [r7, #4]
 80047b2:	4613      	mov	r3, r2
 80047b4:	00db      	lsls	r3, r3, #3
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80047c0:	2200      	movs	r2, #0
 80047c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047c4:	7bfa      	ldrb	r2, [r7, #15]
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	4613      	mov	r3, r2
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	1a9b      	subs	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	440b      	add	r3, r1
 80047d2:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047d6:	7bfa      	ldrb	r2, [r7, #15]
 80047d8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047da:	7bfa      	ldrb	r2, [r7, #15]
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047f0:	7bfa      	ldrb	r2, [r7, #15]
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	4613      	mov	r3, r2
 80047f6:	00db      	lsls	r3, r3, #3
 80047f8:	1a9b      	subs	r3, r3, r2
 80047fa:	009b      	lsls	r3, r3, #2
 80047fc:	440b      	add	r3, r1
 80047fe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004806:	7bfa      	ldrb	r2, [r7, #15]
 8004808:	6879      	ldr	r1, [r7, #4]
 800480a:	4613      	mov	r3, r2
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	1a9b      	subs	r3, r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800481c:	7bfa      	ldrb	r2, [r7, #15]
 800481e:	6879      	ldr	r1, [r7, #4]
 8004820:	4613      	mov	r3, r2
 8004822:	00db      	lsls	r3, r3, #3
 8004824:	1a9b      	subs	r3, r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	440b      	add	r3, r1
 800482a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800482e:	2200      	movs	r2, #0
 8004830:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004832:	7bfb      	ldrb	r3, [r7, #15]
 8004834:	3301      	adds	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
 8004838:	7bfa      	ldrb	r2, [r7, #15]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	429a      	cmp	r2, r3
 8004840:	d3b5      	bcc.n	80047ae <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	603b      	str	r3, [r7, #0]
 8004848:	687e      	ldr	r6, [r7, #4]
 800484a:	466d      	mov	r5, sp
 800484c:	f106 0410 	add.w	r4, r6, #16
 8004850:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004852:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004858:	e894 0003 	ldmia.w	r4, {r0, r1}
 800485c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004860:	1d33      	adds	r3, r6, #4
 8004862:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004864:	6838      	ldr	r0, [r7, #0]
 8004866:	f003 ffab 	bl	80087c0 <USB_DevInit>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2202      	movs	r2, #2
 8004874:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e00d      	b.n	8004898 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4618      	mov	r0, r3
 8004892:	f004 f968 	bl	8008b66 <USB_DevDisconnect>

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b086      	sub	sp, #24
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e25b      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d075      	beq.n	80049aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048be:	4ba3      	ldr	r3, [pc, #652]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d00c      	beq.n	80048e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ca:	4ba0      	ldr	r3, [pc, #640]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d112      	bne.n	80048fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d6:	4b9d      	ldr	r3, [pc, #628]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048e2:	d10b      	bne.n	80048fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048e4:	4b99      	ldr	r3, [pc, #612]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d05b      	beq.n	80049a8 <HAL_RCC_OscConfig+0x108>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d157      	bne.n	80049a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e236      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004904:	d106      	bne.n	8004914 <HAL_RCC_OscConfig+0x74>
 8004906:	4b91      	ldr	r3, [pc, #580]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a90      	ldr	r2, [pc, #576]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 800490c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004910:	6013      	str	r3, [r2, #0]
 8004912:	e01d      	b.n	8004950 <HAL_RCC_OscConfig+0xb0>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800491c:	d10c      	bne.n	8004938 <HAL_RCC_OscConfig+0x98>
 800491e:	4b8b      	ldr	r3, [pc, #556]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a8a      	ldr	r2, [pc, #552]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004924:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	4b88      	ldr	r3, [pc, #544]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a87      	ldr	r2, [pc, #540]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004930:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	e00b      	b.n	8004950 <HAL_RCC_OscConfig+0xb0>
 8004938:	4b84      	ldr	r3, [pc, #528]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a83      	ldr	r2, [pc, #524]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 800493e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004942:	6013      	str	r3, [r2, #0]
 8004944:	4b81      	ldr	r3, [pc, #516]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a80      	ldr	r2, [pc, #512]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 800494a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d013      	beq.n	8004980 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004958:	f7fc fb7c 	bl	8001054 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004960:	f7fc fb78 	bl	8001054 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b64      	cmp	r3, #100	; 0x64
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e1fb      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004972:	4b76      	ldr	r3, [pc, #472]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0xc0>
 800497e:	e014      	b.n	80049aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fc fb68 	bl	8001054 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004988:	f7fc fb64 	bl	8001054 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	; 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e1e7      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800499a:	4b6c      	ldr	r3, [pc, #432]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d1f0      	bne.n	8004988 <HAL_RCC_OscConfig+0xe8>
 80049a6:	e000      	b.n	80049aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f003 0302 	and.w	r3, r3, #2
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d063      	beq.n	8004a7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049b6:	4b65      	ldr	r3, [pc, #404]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00b      	beq.n	80049da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c2:	4b62      	ldr	r3, [pc, #392]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049ca:	2b08      	cmp	r3, #8
 80049cc:	d11c      	bne.n	8004a08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ce:	4b5f      	ldr	r3, [pc, #380]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d116      	bne.n	8004a08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049da:	4b5c      	ldr	r3, [pc, #368]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d005      	beq.n	80049f2 <HAL_RCC_OscConfig+0x152>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d001      	beq.n	80049f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e1bb      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f2:	4b56      	ldr	r3, [pc, #344]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4952      	ldr	r1, [pc, #328]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a06:	e03a      	b.n	8004a7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d020      	beq.n	8004a52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a10:	4b4f      	ldr	r3, [pc, #316]	; (8004b50 <HAL_RCC_OscConfig+0x2b0>)
 8004a12:	2201      	movs	r2, #1
 8004a14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fc fb1d 	bl	8001054 <HAL_GetTick>
 8004a1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a1c:	e008      	b.n	8004a30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a1e:	f7fc fb19 	bl	8001054 <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	693b      	ldr	r3, [r7, #16]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	2b02      	cmp	r3, #2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e19c      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a30:	4b46      	ldr	r3, [pc, #280]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d0f0      	beq.n	8004a1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a3c:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	4940      	ldr	r1, [pc, #256]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	600b      	str	r3, [r1, #0]
 8004a50:	e015      	b.n	8004a7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a52:	4b3f      	ldr	r3, [pc, #252]	; (8004b50 <HAL_RCC_OscConfig+0x2b0>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fc fafc 	bl	8001054 <HAL_GetTick>
 8004a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a60:	f7fc faf8 	bl	8001054 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e17b      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	4b36      	ldr	r3, [pc, #216]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1f0      	bne.n	8004a60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0308 	and.w	r3, r3, #8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d030      	beq.n	8004aec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d016      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a92:	4b30      	ldr	r3, [pc, #192]	; (8004b54 <HAL_RCC_OscConfig+0x2b4>)
 8004a94:	2201      	movs	r2, #1
 8004a96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fc fadc 	bl	8001054 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa0:	f7fc fad8 	bl	8001054 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e15b      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab2:	4b26      	ldr	r3, [pc, #152]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004ab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab6:	f003 0302 	and.w	r3, r3, #2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0f0      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x200>
 8004abe:	e015      	b.n	8004aec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac0:	4b24      	ldr	r3, [pc, #144]	; (8004b54 <HAL_RCC_OscConfig+0x2b4>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ac6:	f7fc fac5 	bl	8001054 <HAL_GetTick>
 8004aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004acc:	e008      	b.n	8004ae0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ace:	f7fc fac1 	bl	8001054 <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e144      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ae0:	4b1a      	ldr	r3, [pc, #104]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004ae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f0      	bne.n	8004ace <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 80a0 	beq.w	8004c3a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004afa:	2300      	movs	r3, #0
 8004afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d10f      	bne.n	8004b2a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	60bb      	str	r3, [r7, #8]
 8004b0e:	4b0f      	ldr	r3, [pc, #60]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	60bb      	str	r3, [r7, #8]
 8004b24:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b26:	2301      	movs	r3, #1
 8004b28:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2a:	4b0b      	ldr	r3, [pc, #44]	; (8004b58 <HAL_RCC_OscConfig+0x2b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d121      	bne.n	8004b7a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCC_OscConfig+0x2b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a07      	ldr	r2, [pc, #28]	; (8004b58 <HAL_RCC_OscConfig+0x2b8>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b42:	f7fc fa87 	bl	8001054 <HAL_GetTick>
 8004b46:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b48:	e011      	b.n	8004b6e <HAL_RCC_OscConfig+0x2ce>
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	42470000 	.word	0x42470000
 8004b54:	42470e80 	.word	0x42470e80
 8004b58:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b5c:	f7fc fa7a 	bl	8001054 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e0fd      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b6e:	4b81      	ldr	r3, [pc, #516]	; (8004d74 <HAL_RCC_OscConfig+0x4d4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d0f0      	beq.n	8004b5c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d106      	bne.n	8004b90 <HAL_RCC_OscConfig+0x2f0>
 8004b82:	4b7d      	ldr	r3, [pc, #500]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	4a7c      	ldr	r2, [pc, #496]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004b88:	f043 0301 	orr.w	r3, r3, #1
 8004b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8e:	e01c      	b.n	8004bca <HAL_RCC_OscConfig+0x32a>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d10c      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x312>
 8004b98:	4b77      	ldr	r3, [pc, #476]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a76      	ldr	r2, [pc, #472]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004b9e:	f043 0304 	orr.w	r3, r3, #4
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	4b74      	ldr	r3, [pc, #464]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a73      	ldr	r2, [pc, #460]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	e00b      	b.n	8004bca <HAL_RCC_OscConfig+0x32a>
 8004bb2:	4b71      	ldr	r3, [pc, #452]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a70      	ldr	r2, [pc, #448]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004bb8:	f023 0301 	bic.w	r3, r3, #1
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbe:	4b6e      	ldr	r3, [pc, #440]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a6d      	ldr	r2, [pc, #436]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d015      	beq.n	8004bfe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd2:	f7fc fa3f 	bl	8001054 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bd8:	e00a      	b.n	8004bf0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bda:	f7fc fa3b 	bl	8001054 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d901      	bls.n	8004bf0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e0bc      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf0:	4b61      	ldr	r3, [pc, #388]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf4:	f003 0302 	and.w	r3, r3, #2
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d0ee      	beq.n	8004bda <HAL_RCC_OscConfig+0x33a>
 8004bfc:	e014      	b.n	8004c28 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bfe:	f7fc fa29 	bl	8001054 <HAL_GetTick>
 8004c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c04:	e00a      	b.n	8004c1c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c06:	f7fc fa25 	bl	8001054 <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d901      	bls.n	8004c1c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e0a6      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1c:	4b56      	ldr	r3, [pc, #344]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c20:	f003 0302 	and.w	r3, r3, #2
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1ee      	bne.n	8004c06 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c28:	7dfb      	ldrb	r3, [r7, #23]
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d105      	bne.n	8004c3a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c2e:	4b52      	ldr	r3, [pc, #328]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	4a51      	ldr	r2, [pc, #324]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004c34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c38:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	699b      	ldr	r3, [r3, #24]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f000 8092 	beq.w	8004d68 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c44:	4b4c      	ldr	r3, [pc, #304]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d05c      	beq.n	8004d0a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d141      	bne.n	8004cdc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c58:	4b48      	ldr	r3, [pc, #288]	; (8004d7c <HAL_RCC_OscConfig+0x4dc>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5e:	f7fc f9f9 	bl	8001054 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c66:	f7fc f9f5 	bl	8001054 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e078      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c78:	4b3f      	ldr	r3, [pc, #252]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1f0      	bne.n	8004c66 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	69da      	ldr	r2, [r3, #28]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	431a      	orrs	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	019b      	lsls	r3, r3, #6
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	041b      	lsls	r3, r3, #16
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca6:	061b      	lsls	r3, r3, #24
 8004ca8:	4933      	ldr	r1, [pc, #204]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004caa:	4313      	orrs	r3, r2
 8004cac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cae:	4b33      	ldr	r3, [pc, #204]	; (8004d7c <HAL_RCC_OscConfig+0x4dc>)
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cb4:	f7fc f9ce 	bl	8001054 <HAL_GetTick>
 8004cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cba:	e008      	b.n	8004cce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cbc:	f7fc f9ca 	bl	8001054 <HAL_GetTick>
 8004cc0:	4602      	mov	r2, r0
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	1ad3      	subs	r3, r2, r3
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d901      	bls.n	8004cce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e04d      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cce:	4b2a      	ldr	r3, [pc, #168]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0f0      	beq.n	8004cbc <HAL_RCC_OscConfig+0x41c>
 8004cda:	e045      	b.n	8004d68 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cdc:	4b27      	ldr	r3, [pc, #156]	; (8004d7c <HAL_RCC_OscConfig+0x4dc>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ce2:	f7fc f9b7 	bl	8001054 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cea:	f7fc f9b3 	bl	8001054 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e036      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x44a>
 8004d08:	e02e      	b.n	8004d68 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e029      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d16:	4b18      	ldr	r3, [pc, #96]	; (8004d78 <HAL_RCC_OscConfig+0x4d8>)
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d11c      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d34:	429a      	cmp	r2, r3
 8004d36:	d115      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d3e:	4013      	ands	r3, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d10d      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d106      	bne.n	8004d64 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d001      	beq.n	8004d68 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e000      	b.n	8004d6a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3718      	adds	r7, #24
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40007000 	.word	0x40007000
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	42470060 	.word	0x42470060

08004d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b084      	sub	sp, #16
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d101      	bne.n	8004d94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	e0cc      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d94:	4b68      	ldr	r3, [pc, #416]	; (8004f38 <HAL_RCC_ClockConfig+0x1b8>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 030f 	and.w	r3, r3, #15
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d90c      	bls.n	8004dbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da2:	4b65      	ldr	r3, [pc, #404]	; (8004f38 <HAL_RCC_ClockConfig+0x1b8>)
 8004da4:	683a      	ldr	r2, [r7, #0]
 8004da6:	b2d2      	uxtb	r2, r2
 8004da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004daa:	4b63      	ldr	r3, [pc, #396]	; (8004f38 <HAL_RCC_ClockConfig+0x1b8>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 030f 	and.w	r3, r3, #15
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d001      	beq.n	8004dbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e0b8      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d020      	beq.n	8004e0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d005      	beq.n	8004de0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dd4:	4b59      	ldr	r3, [pc, #356]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	4a58      	ldr	r2, [pc, #352]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004dda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d005      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004dec:	4b53      	ldr	r3, [pc, #332]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	4a52      	ldr	r2, [pc, #328]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004df2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004df6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df8:	4b50      	ldr	r3, [pc, #320]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	494d      	ldr	r1, [pc, #308]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d044      	beq.n	8004ea0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d107      	bne.n	8004e2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e1e:	4b47      	ldr	r3, [pc, #284]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d119      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e07f      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d003      	beq.n	8004e3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3a:	2b03      	cmp	r3, #3
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3e:	4b3f      	ldr	r3, [pc, #252]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d109      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e06f      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4e:	4b3b      	ldr	r3, [pc, #236]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e067      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e5e:	4b37      	ldr	r3, [pc, #220]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	f023 0203 	bic.w	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	4934      	ldr	r1, [pc, #208]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e70:	f7fc f8f0 	bl	8001054 <HAL_GetTick>
 8004e74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e76:	e00a      	b.n	8004e8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e78:	f7fc f8ec 	bl	8001054 <HAL_GetTick>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d901      	bls.n	8004e8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e04f      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e8e:	4b2b      	ldr	r3, [pc, #172]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f003 020c 	and.w	r2, r3, #12
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d1eb      	bne.n	8004e78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b25      	ldr	r3, [pc, #148]	; (8004f38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d20c      	bcs.n	8004ec8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b22      	ldr	r3, [pc, #136]	; (8004f38 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eb6:	4b20      	ldr	r3, [pc, #128]	; (8004f38 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	683a      	ldr	r2, [r7, #0]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d001      	beq.n	8004ec8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e032      	b.n	8004f2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ed4:	4b19      	ldr	r3, [pc, #100]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	4916      	ldr	r1, [pc, #88]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0308 	and.w	r3, r3, #8
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d009      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ef2:	4b12      	ldr	r3, [pc, #72]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	00db      	lsls	r3, r3, #3
 8004f00:	490e      	ldr	r1, [pc, #56]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f06:	f000 f82d 	bl	8004f64 <HAL_RCC_GetSysClockFreq>
 8004f0a:	4601      	mov	r1, r0
 8004f0c:	4b0b      	ldr	r3, [pc, #44]	; (8004f3c <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	091b      	lsrs	r3, r3, #4
 8004f12:	f003 030f 	and.w	r3, r3, #15
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <HAL_RCC_ClockConfig+0x1c0>)
 8004f18:	5cd3      	ldrb	r3, [r2, r3]
 8004f1a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <HAL_RCC_ClockConfig+0x1c4>)
 8004f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <HAL_RCC_ClockConfig+0x1c8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fc f850 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3710      	adds	r7, #16
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40023c00 	.word	0x40023c00
 8004f3c:	40023800 	.word	0x40023800
 8004f40:	080127f0 	.word	0x080127f0
 8004f44:	20000040 	.word	0x20000040
 8004f48:	20000000 	.word	0x20000000

08004f4c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004f50:	4b03      	ldr	r3, [pc, #12]	; (8004f60 <HAL_RCC_EnableCSS+0x14>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	601a      	str	r2, [r3, #0]
}
 8004f56:	bf00      	nop
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	4247004c 	.word	0x4247004c

08004f64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	607b      	str	r3, [r7, #4]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	2300      	movs	r3, #0
 8004f74:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f7a:	4b63      	ldr	r3, [pc, #396]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f003 030c 	and.w	r3, r3, #12
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	d007      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0x32>
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d008      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0x38>
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f040 80b4 	bne.w	80050f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f90:	4b5e      	ldr	r3, [pc, #376]	; (800510c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f92:	60bb      	str	r3, [r7, #8]
       break;
 8004f94:	e0b3      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f96:	4b5e      	ldr	r3, [pc, #376]	; (8005110 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f98:	60bb      	str	r3, [r7, #8]
      break;
 8004f9a:	e0b0      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f9c:	4b5a      	ldr	r3, [pc, #360]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fa4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fa6:	4b58      	ldr	r3, [pc, #352]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d04a      	beq.n	8005048 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fb2:	4b55      	ldr	r3, [pc, #340]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	099b      	lsrs	r3, r3, #6
 8004fb8:	f04f 0400 	mov.w	r4, #0
 8004fbc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fc0:	f04f 0200 	mov.w	r2, #0
 8004fc4:	ea03 0501 	and.w	r5, r3, r1
 8004fc8:	ea04 0602 	and.w	r6, r4, r2
 8004fcc:	4629      	mov	r1, r5
 8004fce:	4632      	mov	r2, r6
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	f04f 0400 	mov.w	r4, #0
 8004fd8:	0154      	lsls	r4, r2, #5
 8004fda:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fde:	014b      	lsls	r3, r1, #5
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	1b49      	subs	r1, r1, r5
 8004fe6:	eb62 0206 	sbc.w	r2, r2, r6
 8004fea:	f04f 0300 	mov.w	r3, #0
 8004fee:	f04f 0400 	mov.w	r4, #0
 8004ff2:	0194      	lsls	r4, r2, #6
 8004ff4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ff8:	018b      	lsls	r3, r1, #6
 8004ffa:	1a5b      	subs	r3, r3, r1
 8004ffc:	eb64 0402 	sbc.w	r4, r4, r2
 8005000:	f04f 0100 	mov.w	r1, #0
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	00e2      	lsls	r2, r4, #3
 800500a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800500e:	00d9      	lsls	r1, r3, #3
 8005010:	460b      	mov	r3, r1
 8005012:	4614      	mov	r4, r2
 8005014:	195b      	adds	r3, r3, r5
 8005016:	eb44 0406 	adc.w	r4, r4, r6
 800501a:	f04f 0100 	mov.w	r1, #0
 800501e:	f04f 0200 	mov.w	r2, #0
 8005022:	0262      	lsls	r2, r4, #9
 8005024:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005028:	0259      	lsls	r1, r3, #9
 800502a:	460b      	mov	r3, r1
 800502c:	4614      	mov	r4, r2
 800502e:	4618      	mov	r0, r3
 8005030:	4621      	mov	r1, r4
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f04f 0400 	mov.w	r4, #0
 8005038:	461a      	mov	r2, r3
 800503a:	4623      	mov	r3, r4
 800503c:	f7fb fe24 	bl	8000c88 <__aeabi_uldivmod>
 8005040:	4603      	mov	r3, r0
 8005042:	460c      	mov	r4, r1
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e049      	b.n	80050dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005048:	4b2f      	ldr	r3, [pc, #188]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	099b      	lsrs	r3, r3, #6
 800504e:	f04f 0400 	mov.w	r4, #0
 8005052:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005056:	f04f 0200 	mov.w	r2, #0
 800505a:	ea03 0501 	and.w	r5, r3, r1
 800505e:	ea04 0602 	and.w	r6, r4, r2
 8005062:	4629      	mov	r1, r5
 8005064:	4632      	mov	r2, r6
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	f04f 0400 	mov.w	r4, #0
 800506e:	0154      	lsls	r4, r2, #5
 8005070:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005074:	014b      	lsls	r3, r1, #5
 8005076:	4619      	mov	r1, r3
 8005078:	4622      	mov	r2, r4
 800507a:	1b49      	subs	r1, r1, r5
 800507c:	eb62 0206 	sbc.w	r2, r2, r6
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	f04f 0400 	mov.w	r4, #0
 8005088:	0194      	lsls	r4, r2, #6
 800508a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800508e:	018b      	lsls	r3, r1, #6
 8005090:	1a5b      	subs	r3, r3, r1
 8005092:	eb64 0402 	sbc.w	r4, r4, r2
 8005096:	f04f 0100 	mov.w	r1, #0
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	00e2      	lsls	r2, r4, #3
 80050a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050a4:	00d9      	lsls	r1, r3, #3
 80050a6:	460b      	mov	r3, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	195b      	adds	r3, r3, r5
 80050ac:	eb44 0406 	adc.w	r4, r4, r6
 80050b0:	f04f 0100 	mov.w	r1, #0
 80050b4:	f04f 0200 	mov.w	r2, #0
 80050b8:	02a2      	lsls	r2, r4, #10
 80050ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050be:	0299      	lsls	r1, r3, #10
 80050c0:	460b      	mov	r3, r1
 80050c2:	4614      	mov	r4, r2
 80050c4:	4618      	mov	r0, r3
 80050c6:	4621      	mov	r1, r4
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f04f 0400 	mov.w	r4, #0
 80050ce:	461a      	mov	r2, r3
 80050d0:	4623      	mov	r3, r4
 80050d2:	f7fb fdd9 	bl	8000c88 <__aeabi_uldivmod>
 80050d6:	4603      	mov	r3, r0
 80050d8:	460c      	mov	r4, r1
 80050da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050dc:	4b0a      	ldr	r3, [pc, #40]	; (8005108 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	0c1b      	lsrs	r3, r3, #16
 80050e2:	f003 0303 	and.w	r3, r3, #3
 80050e6:	3301      	adds	r3, #1
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	60bb      	str	r3, [r7, #8]
      break;
 80050f6:	e002      	b.n	80050fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f8:	4b04      	ldr	r3, [pc, #16]	; (800510c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050fa:	60bb      	str	r3, [r7, #8]
      break;
 80050fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fe:	68bb      	ldr	r3, [r7, #8]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	00f42400 	.word	0x00f42400
 8005110:	007a1200 	.word	0x007a1200

08005114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <HAL_RCC_GetHCLKFreq+0x14>)
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000040 	.word	0x20000040

0800512c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005130:	f7ff fff0 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8005134:	4601      	mov	r1, r0
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0a9b      	lsrs	r3, r3, #10
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4a03      	ldr	r2, [pc, #12]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005142:	5cd3      	ldrb	r3, [r2, r3]
 8005144:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40023800 	.word	0x40023800
 8005150:	08012800 	.word	0x08012800

08005154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005158:	f7ff ffdc 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 800515c:	4601      	mov	r1, r0
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	0b5b      	lsrs	r3, r3, #13
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4a03      	ldr	r2, [pc, #12]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800516a:	5cd3      	ldrb	r3, [r2, r3]
 800516c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40023800 	.word	0x40023800
 8005178:	08012800 	.word	0x08012800

0800517c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b086      	sub	sp, #24
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d105      	bne.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d035      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051a4:	4b62      	ldr	r3, [pc, #392]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051aa:	f7fb ff53 	bl	8001054 <HAL_GetTick>
 80051ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b0:	e008      	b.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051b2:	f7fb ff4f 	bl	8001054 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d901      	bls.n	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051c0:	2303      	movs	r3, #3
 80051c2:	e0b0      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051c4:	4b5b      	ldr	r3, [pc, #364]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1f0      	bne.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	019a      	lsls	r2, r3, #6
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	071b      	lsls	r3, r3, #28
 80051dc:	4955      	ldr	r1, [pc, #340]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051e4:	4b52      	ldr	r3, [pc, #328]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051e6:	2201      	movs	r2, #1
 80051e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051ea:	f7fb ff33 	bl	8001054 <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f0:	e008      	b.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051f2:	f7fb ff2f 	bl	8001054 <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	2b02      	cmp	r3, #2
 80051fe:	d901      	bls.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e090      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005204:	4b4b      	ldr	r3, [pc, #300]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d0f0      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 8083 	beq.w	8005324 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	4b44      	ldr	r3, [pc, #272]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	4a43      	ldr	r2, [pc, #268]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800522c:	6413      	str	r3, [r2, #64]	; 0x40
 800522e:	4b41      	ldr	r3, [pc, #260]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800523a:	4b3f      	ldr	r3, [pc, #252]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a3e      	ldr	r2, [pc, #248]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005240:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005244:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005246:	f7fb ff05 	bl	8001054 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800524c:	e008      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800524e:	f7fb ff01 	bl	8001054 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e062      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005260:	4b35      	ldr	r3, [pc, #212]	; (8005338 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0f0      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800526c:	4b31      	ldr	r3, [pc, #196]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800526e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005274:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d02f      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	429a      	cmp	r2, r3
 8005288:	d028      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800528a:	4b2a      	ldr	r3, [pc, #168]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005294:	4b29      	ldr	r3, [pc, #164]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800529a:	4b28      	ldr	r3, [pc, #160]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800529c:	2200      	movs	r2, #0
 800529e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052a0:	4a24      	ldr	r2, [pc, #144]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052a6:	4b23      	ldr	r3, [pc, #140]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d114      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052b2:	f7fb fecf 	bl	8001054 <HAL_GetTick>
 80052b6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052b8:	e00a      	b.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ba:	f7fb fecb 	bl	8001054 <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e02a      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d0:	4b18      	ldr	r3, [pc, #96]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ee      	beq.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052e8:	d10d      	bne.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052ea:	4b12      	ldr	r3, [pc, #72]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	68db      	ldr	r3, [r3, #12]
 80052f6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052fe:	490d      	ldr	r1, [pc, #52]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005300:	4313      	orrs	r3, r2
 8005302:	608b      	str	r3, [r1, #8]
 8005304:	e005      	b.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	4a0a      	ldr	r2, [pc, #40]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005310:	6093      	str	r3, [r2, #8]
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005314:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800531e:	4905      	ldr	r1, [pc, #20]	; (8005334 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005320:	4313      	orrs	r3, r2
 8005322:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3718      	adds	r7, #24
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	42470068 	.word	0x42470068
 8005334:	40023800 	.word	0x40023800
 8005338:	40007000 	.word	0x40007000
 800533c:	42470e40 	.word	0x42470e40

08005340 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e083      	b.n	800545a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	7f5b      	ldrb	r3, [r3, #29]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b00      	cmp	r3, #0
 800535a:	d105      	bne.n	8005368 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f007 fd16 	bl	800cd94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	22ca      	movs	r2, #202	; 0xca
 8005374:	625a      	str	r2, [r3, #36]	; 0x24
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2253      	movs	r2, #83	; 0x53
 800537c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f897 	bl	80054b2 <RTC_EnterInitMode>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	22ff      	movs	r2, #255	; 0xff
 8005390:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2204      	movs	r2, #4
 8005396:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	e05e      	b.n	800545a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6812      	ldr	r2, [r2, #0]
 80053a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ae:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6899      	ldr	r1, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	431a      	orrs	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	431a      	orrs	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	68d2      	ldr	r2, [r2, #12]
 80053d6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6919      	ldr	r1, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	041a      	lsls	r2, r3, #16
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	430a      	orrs	r2, r1
 80053ea:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10e      	bne.n	8005428 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 f829 	bl	8005462 <HAL_RTC_WaitForSynchro>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d008      	beq.n	8005428 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	22ff      	movs	r2, #255	; 0xff
 800541c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2204      	movs	r2, #4
 8005422:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e018      	b.n	800545a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005436:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	699a      	ldr	r2, [r3, #24]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	22ff      	movs	r2, #255	; 0xff
 8005450:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2201      	movs	r2, #1
 8005456:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005458:	2300      	movs	r3, #0
  }
}
 800545a:	4618      	mov	r0, r3
 800545c:	3708      	adds	r7, #8
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	68da      	ldr	r2, [r3, #12]
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800547c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800547e:	f7fb fde9 	bl	8001054 <HAL_GetTick>
 8005482:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005484:	e009      	b.n	800549a <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005486:	f7fb fde5 	bl	8001054 <HAL_GetTick>
 800548a:	4602      	mov	r2, r0
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005494:	d901      	bls.n	800549a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e007      	b.n	80054aa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0ee      	beq.n	8005486 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054ba:	2300      	movs	r3, #0
 80054bc:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d119      	bne.n	8005500 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054d4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054d6:	f7fb fdbd 	bl	8001054 <HAL_GetTick>
 80054da:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054dc:	e009      	b.n	80054f2 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054de:	f7fb fdb9 	bl	8001054 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054ec:	d901      	bls.n	80054f2 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e007      	b.n	8005502 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0ee      	beq.n	80054de <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800550a:	b580      	push	{r7, lr}
 800550c:	b082      	sub	sp, #8
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e056      	b.n	80055ca <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	d106      	bne.n	800553c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f007 fc42 	bl	800cdc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2202      	movs	r2, #2
 8005540:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005552:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	691b      	ldr	r3, [r3, #16]
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	699b      	ldr	r3, [r3, #24]
 8005574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005578:	431a      	orrs	r2, r3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	431a      	orrs	r2, r3
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	ea42 0103 	orr.w	r1, r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	430a      	orrs	r2, r1
 8005592:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	0c1b      	lsrs	r3, r3, #16
 800559a:	f003 0104 	and.w	r1, r3, #4
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	430a      	orrs	r2, r1
 80055a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	69da      	ldr	r2, [r3, #28]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055c8:	2300      	movs	r3, #0
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3708      	adds	r7, #8
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b088      	sub	sp, #32
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	60f8      	str	r0, [r7, #12]
 80055da:	60b9      	str	r1, [r7, #8]
 80055dc:	603b      	str	r3, [r7, #0]
 80055de:	4613      	mov	r3, r2
 80055e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_SPI_Transmit+0x22>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e11e      	b.n	8005832 <HAL_SPI_Transmit+0x260>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055fc:	f7fb fd2a 	bl	8001054 <HAL_GetTick>
 8005600:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005602:	88fb      	ldrh	r3, [r7, #6]
 8005604:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b01      	cmp	r3, #1
 8005610:	d002      	beq.n	8005618 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005612:	2302      	movs	r3, #2
 8005614:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005616:	e103      	b.n	8005820 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Transmit+0x52>
 800561e:	88fb      	ldrh	r3, [r7, #6]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d102      	bne.n	800562a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005628:	e0fa      	b.n	8005820 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2203      	movs	r2, #3
 800562e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	68ba      	ldr	r2, [r7, #8]
 800563c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	88fa      	ldrh	r2, [r7, #6]
 8005642:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	88fa      	ldrh	r2, [r7, #6]
 8005648:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005670:	d107      	bne.n	8005682 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005680:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568c:	2b40      	cmp	r3, #64	; 0x40
 800568e:	d007      	beq.n	80056a0 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800569e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68db      	ldr	r3, [r3, #12]
 80056a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a8:	d14b      	bne.n	8005742 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d002      	beq.n	80056b8 <HAL_SPI_Transmit+0xe6>
 80056b2:	8afb      	ldrh	r3, [r7, #22]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d13e      	bne.n	8005736 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	881a      	ldrh	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	1c9a      	adds	r2, r3, #2
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	3b01      	subs	r3, #1
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056dc:	e02b      	b.n	8005736 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d112      	bne.n	8005712 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	881a      	ldrh	r2, [r3, #0]
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	1c9a      	adds	r2, r3, #2
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005706:	b29b      	uxth	r3, r3
 8005708:	3b01      	subs	r3, #1
 800570a:	b29a      	uxth	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005710:	e011      	b.n	8005736 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005712:	f7fb fc9f 	bl	8001054 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	69bb      	ldr	r3, [r7, #24]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	429a      	cmp	r2, r3
 8005720:	d803      	bhi.n	800572a <HAL_SPI_Transmit+0x158>
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005728:	d102      	bne.n	8005730 <HAL_SPI_Transmit+0x15e>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d102      	bne.n	8005736 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005734:	e074      	b.n	8005820 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ce      	bne.n	80056de <HAL_SPI_Transmit+0x10c>
 8005740:	e04c      	b.n	80057dc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	685b      	ldr	r3, [r3, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_SPI_Transmit+0x17e>
 800574a:	8afb      	ldrh	r3, [r7, #22]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d140      	bne.n	80057d2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	7812      	ldrb	r2, [r2, #0]
 800575c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800576c:	b29b      	uxth	r3, r3
 800576e:	3b01      	subs	r3, #1
 8005770:	b29a      	uxth	r2, r3
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005776:	e02c      	b.n	80057d2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f003 0302 	and.w	r3, r3, #2
 8005782:	2b02      	cmp	r3, #2
 8005784:	d113      	bne.n	80057ae <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	330c      	adds	r3, #12
 8005790:	7812      	ldrb	r2, [r2, #0]
 8005792:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005798:	1c5a      	adds	r2, r3, #1
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	3b01      	subs	r3, #1
 80057a6:	b29a      	uxth	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	86da      	strh	r2, [r3, #54]	; 0x36
 80057ac:	e011      	b.n	80057d2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ae:	f7fb fc51 	bl	8001054 <HAL_GetTick>
 80057b2:	4602      	mov	r2, r0
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d803      	bhi.n	80057c6 <HAL_SPI_Transmit+0x1f4>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c4:	d102      	bne.n	80057cc <HAL_SPI_Transmit+0x1fa>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057d0:	e026      	b.n	8005820 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1cd      	bne.n	8005778 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057dc:	69ba      	ldr	r2, [r7, #24]
 80057de:	6839      	ldr	r1, [r7, #0]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f000 fcc3 	bl	800616c <SPI_EndRxTxTransaction>
 80057e6:	4603      	mov	r3, r0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2220      	movs	r2, #32
 80057f0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057fa:	2300      	movs	r3, #0
 80057fc:	613b      	str	r3, [r7, #16]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	613b      	str	r3, [r7, #16]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	613b      	str	r3, [r7, #16]
 800580e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	2b00      	cmp	r3, #0
 8005816:	d002      	beq.n	800581e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	77fb      	strb	r3, [r7, #31]
 800581c:	e000      	b.n	8005820 <HAL_SPI_Transmit+0x24e>
  }

error:
 800581e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005830:	7ffb      	ldrb	r3, [r7, #31]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3720      	adds	r7, #32
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b088      	sub	sp, #32
 800583e:	af02      	add	r7, sp, #8
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005856:	d112      	bne.n	800587e <HAL_SPI_Receive+0x44>
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d10e      	bne.n	800587e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2204      	movs	r2, #4
 8005864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005868:	88fa      	ldrh	r2, [r7, #6]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	68ba      	ldr	r2, [r7, #8]
 8005872:	68b9      	ldr	r1, [r7, #8]
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f8e9 	bl	8005a4c <HAL_SPI_TransmitReceive>
 800587a:	4603      	mov	r3, r0
 800587c:	e0e2      	b.n	8005a44 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_SPI_Receive+0x52>
 8005888:	2302      	movs	r3, #2
 800588a:	e0db      	b.n	8005a44 <HAL_SPI_Receive+0x20a>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005894:	f7fb fbde 	bl	8001054 <HAL_GetTick>
 8005898:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058a6:	2302      	movs	r3, #2
 80058a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058aa:	e0c2      	b.n	8005a32 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80058ac:	68bb      	ldr	r3, [r7, #8]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Receive+0x7e>
 80058b2:	88fb      	ldrh	r3, [r7, #6]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d102      	bne.n	80058be <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058bc:	e0b9      	b.n	8005a32 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2204      	movs	r2, #4
 80058c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	2200      	movs	r2, #0
 80058ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68ba      	ldr	r2, [r7, #8]
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	88fa      	ldrh	r2, [r7, #6]
 80058d6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	88fa      	ldrh	r2, [r7, #6]
 80058dc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005904:	d107      	bne.n	8005916 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005914:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d007      	beq.n	8005934 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005932:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d162      	bne.n	8005a02 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800593c:	e02e      	b.n	800599c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	d115      	bne.n	8005978 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f103 020c 	add.w	r2, r3, #12
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005958:	7812      	ldrb	r2, [r2, #0]
 800595a:	b2d2      	uxtb	r2, r2
 800595c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005976:	e011      	b.n	800599c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005978:	f7fb fb6c 	bl	8001054 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	429a      	cmp	r2, r3
 8005986:	d803      	bhi.n	8005990 <HAL_SPI_Receive+0x156>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800598e:	d102      	bne.n	8005996 <HAL_SPI_Receive+0x15c>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d102      	bne.n	800599c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	75fb      	strb	r3, [r7, #23]
          goto error;
 800599a:	e04a      	b.n	8005a32 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1cb      	bne.n	800593e <HAL_SPI_Receive+0x104>
 80059a6:	e031      	b.n	8005a0c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d113      	bne.n	80059de <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c0:	b292      	uxth	r2, r2
 80059c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	1c9a      	adds	r2, r3, #2
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059d2:	b29b      	uxth	r3, r3
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b29a      	uxth	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059dc:	e011      	b.n	8005a02 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059de:	f7fb fb39 	bl	8001054 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d803      	bhi.n	80059f6 <HAL_SPI_Receive+0x1bc>
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059f4:	d102      	bne.n	80059fc <HAL_SPI_Receive+0x1c2>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d102      	bne.n	8005a02 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a00:	e017      	b.n	8005a32 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1cd      	bne.n	80059a8 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a0c:	693a      	ldr	r2, [r7, #16]
 8005a0e:	6839      	ldr	r1, [r7, #0]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fb45 	bl	80060a0 <SPI_EndRxTransaction>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d002      	beq.n	8005a22 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	75fb      	strb	r3, [r7, #23]
 8005a2e:	e000      	b.n	8005a32 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005a30:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a42:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a44:	4618      	mov	r0, r3
 8005a46:	3718      	adds	r7, #24
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08c      	sub	sp, #48	; 0x30
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d101      	bne.n	8005a72 <HAL_SPI_TransmitReceive+0x26>
 8005a6e:	2302      	movs	r3, #2
 8005a70:	e18a      	b.n	8005d88 <HAL_SPI_TransmitReceive+0x33c>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2201      	movs	r2, #1
 8005a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a7a:	f7fb faeb 	bl	8001054 <HAL_GetTick>
 8005a7e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a90:	887b      	ldrh	r3, [r7, #2]
 8005a92:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d00f      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x70>
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aa2:	d107      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d103      	bne.n	8005ab4 <HAL_SPI_TransmitReceive+0x68>
 8005aac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005ab0:	2b04      	cmp	r3, #4
 8005ab2:	d003      	beq.n	8005abc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
 8005ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005aba:	e15b      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d005      	beq.n	8005ace <HAL_SPI_TransmitReceive+0x82>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <HAL_SPI_TransmitReceive+0x82>
 8005ac8:	887b      	ldrh	r3, [r7, #2]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d103      	bne.n	8005ad6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ad4:	e14e      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b04      	cmp	r3, #4
 8005ae0:	d003      	beq.n	8005aea <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2205      	movs	r2, #5
 8005ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	687a      	ldr	r2, [r7, #4]
 8005af4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	887a      	ldrh	r2, [r7, #2]
 8005afa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	887a      	ldrh	r2, [r7, #2]
 8005b0c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	887a      	ldrh	r2, [r7, #2]
 8005b12:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2200      	movs	r2, #0
 8005b18:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b2a:	2b40      	cmp	r3, #64	; 0x40
 8005b2c:	d007      	beq.n	8005b3e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681a      	ldr	r2, [r3, #0]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b46:	d178      	bne.n	8005c3a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d002      	beq.n	8005b56 <HAL_SPI_TransmitReceive+0x10a>
 8005b50:	8b7b      	ldrh	r3, [r7, #26]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d166      	bne.n	8005c24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	881a      	ldrh	r2, [r3, #0]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	1c9a      	adds	r2, r3, #2
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7a:	e053      	b.n	8005c24 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d11b      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x176>
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d016      	beq.n	8005bc2 <HAL_SPI_TransmitReceive+0x176>
 8005b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d113      	bne.n	8005bc2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	881a      	ldrh	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	1c9a      	adds	r2, r3, #2
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	3b01      	subs	r3, #1
 8005bb8:	b29a      	uxth	r2, r3
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f003 0301 	and.w	r3, r3, #1
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d119      	bne.n	8005c04 <HAL_SPI_TransmitReceive+0x1b8>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d014      	beq.n	8005c04 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68da      	ldr	r2, [r3, #12]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be4:	b292      	uxth	r2, r2
 8005be6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	1c9a      	adds	r2, r3, #2
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	b29a      	uxth	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c00:	2301      	movs	r3, #1
 8005c02:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c04:	f7fb fa26 	bl	8001054 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d807      	bhi.n	8005c24 <HAL_SPI_TransmitReceive+0x1d8>
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c1a:	d003      	beq.n	8005c24 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c1c:	2303      	movs	r3, #3
 8005c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c22:	e0a7      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1a6      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x130>
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1a1      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x130>
 8005c38:	e07c      	b.n	8005d34 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d002      	beq.n	8005c48 <HAL_SPI_TransmitReceive+0x1fc>
 8005c42:	8b7b      	ldrh	r3, [r7, #26]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d16b      	bne.n	8005d20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	330c      	adds	r3, #12
 8005c52:	7812      	ldrb	r2, [r2, #0]
 8005c54:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	3b01      	subs	r3, #1
 8005c68:	b29a      	uxth	r2, r3
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c6e:	e057      	b.n	8005d20 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d11c      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x26c>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d017      	beq.n	8005cb8 <HAL_SPI_TransmitReceive+0x26c>
 8005c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d114      	bne.n	8005cb8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	330c      	adds	r3, #12
 8005c98:	7812      	ldrb	r2, [r2, #0]
 8005c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	3b01      	subs	r3, #1
 8005cae:	b29a      	uxth	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	f003 0301 	and.w	r3, r3, #1
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d119      	bne.n	8005cfa <HAL_SPI_TransmitReceive+0x2ae>
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d014      	beq.n	8005cfa <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	b2d2      	uxtb	r2, r2
 8005cdc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cec:	b29b      	uxth	r3, r3
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b29a      	uxth	r2, r3
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cfa:	f7fb f9ab 	bl	8001054 <HAL_GetTick>
 8005cfe:	4602      	mov	r2, r0
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d06:	429a      	cmp	r2, r3
 8005d08:	d803      	bhi.n	8005d12 <HAL_SPI_TransmitReceive+0x2c6>
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d10:	d102      	bne.n	8005d18 <HAL_SPI_TransmitReceive+0x2cc>
 8005d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d103      	bne.n	8005d20 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d1e:	e029      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1a2      	bne.n	8005c70 <HAL_SPI_TransmitReceive+0x224>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d19d      	bne.n	8005c70 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d36:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 fa17 	bl	800616c <SPI_EndRxTxTransaction>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d006      	beq.n	8005d52 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d50:	e010      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d10b      	bne.n	8005d72 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	617b      	str	r3, [r7, #20]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	617b      	str	r3, [r7, #20]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	e000      	b.n	8005d74 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2201      	movs	r2, #1
 8005d78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d84:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3730      	adds	r7, #48	; 0x30
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	099b      	lsrs	r3, r3, #6
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d10f      	bne.n	8005dd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d00a      	beq.n	8005dd4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	099b      	lsrs	r3, r3, #6
 8005dc2:	f003 0301 	and.w	r3, r3, #1
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d004      	beq.n	8005dd4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	4798      	blx	r3
    return;
 8005dd2:	e0d8      	b.n	8005f86 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	085b      	lsrs	r3, r3, #1
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00a      	beq.n	8005df6 <HAL_SPI_IRQHandler+0x66>
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	09db      	lsrs	r3, r3, #7
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d004      	beq.n	8005df6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	4798      	blx	r3
    return;
 8005df4:	e0c7      	b.n	8005f86 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	095b      	lsrs	r3, r3, #5
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10c      	bne.n	8005e1c <HAL_SPI_IRQHandler+0x8c>
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	099b      	lsrs	r3, r3, #6
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d106      	bne.n	8005e1c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	0a1b      	lsrs	r3, r3, #8
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f000 80b5 	beq.w	8005f86 <HAL_SPI_IRQHandler+0x1f6>
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 80ae 	beq.w	8005f86 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	099b      	lsrs	r3, r3, #6
 8005e2e:	f003 0301 	and.w	r3, r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d023      	beq.n	8005e7e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b03      	cmp	r3, #3
 8005e40:	d011      	beq.n	8005e66 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	f043 0204 	orr.w	r2, r3, #4
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e4e:	2300      	movs	r3, #0
 8005e50:	617b      	str	r3, [r7, #20]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	617b      	str	r3, [r7, #20]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	e00b      	b.n	8005e7e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e66:	2300      	movs	r3, #0
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	613b      	str	r3, [r7, #16]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	613b      	str	r3, [r7, #16]
 8005e7a:	693b      	ldr	r3, [r7, #16]
        return;
 8005e7c:	e083      	b.n	8005f86 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	f003 0301 	and.w	r3, r3, #1
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d014      	beq.n	8005eb4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e8e:	f043 0201 	orr.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e96:	2300      	movs	r3, #0
 8005e98:	60fb      	str	r3, [r7, #12]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	60fb      	str	r3, [r7, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eb0:	601a      	str	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005eb4:	69bb      	ldr	r3, [r7, #24]
 8005eb6:	0a1b      	lsrs	r3, r3, #8
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00c      	beq.n	8005eda <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec4:	f043 0208 	orr.w	r2, r3, #8
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60bb      	str	r3, [r7, #8]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	60bb      	str	r3, [r7, #8]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d050      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ef0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f003 0302 	and.w	r3, r3, #2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d104      	bne.n	8005f0e <HAL_SPI_IRQHandler+0x17e>
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	f003 0301 	and.w	r3, r3, #1
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d034      	beq.n	8005f78 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0203 	bic.w	r2, r2, #3
 8005f1c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d011      	beq.n	8005f4a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2a:	4a18      	ldr	r2, [pc, #96]	; (8005f8c <HAL_SPI_IRQHandler+0x1fc>)
 8005f2c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fc ff66 	bl	8002e04 <HAL_DMA_Abort_IT>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d005      	beq.n	8005f4a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f42:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d016      	beq.n	8005f80 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f56:	4a0d      	ldr	r2, [pc, #52]	; (8005f8c <HAL_SPI_IRQHandler+0x1fc>)
 8005f58:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7fc ff50 	bl	8002e04 <HAL_DMA_Abort_IT>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f76:	e003      	b.n	8005f80 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f78:	6878      	ldr	r0, [r7, #4]
 8005f7a:	f000 f809 	bl	8005f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f7e:	e000      	b.n	8005f82 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f80:	bf00      	nop
    return;
 8005f82:	bf00      	nop
 8005f84:	bf00      	nop
  }
}
 8005f86:	3720      	adds	r7, #32
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	08005fa5 	.word	0x08005fa5

08005f90 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fbe:	68f8      	ldr	r0, [r7, #12]
 8005fc0:	f7ff ffe6 	bl	8005f90 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fc4:	bf00      	nop
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fdc:	e04c      	b.n	8006078 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe4:	d048      	beq.n	8006078 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005fe6:	f7fb f835 	bl	8001054 <HAL_GetTick>
 8005fea:	4602      	mov	r2, r0
 8005fec:	69bb      	ldr	r3, [r7, #24]
 8005fee:	1ad3      	subs	r3, r2, r3
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d902      	bls.n	8005ffc <SPI_WaitFlagStateUntilTimeout+0x30>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d13d      	bne.n	8006078 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	685a      	ldr	r2, [r3, #4]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800600a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006014:	d111      	bne.n	800603a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800601e:	d004      	beq.n	800602a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006028:	d107      	bne.n	800603a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006038:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800603e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006042:	d10f      	bne.n	8006064 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681a      	ldr	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006062:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006074:	2303      	movs	r3, #3
 8006076:	e00f      	b.n	8006098 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	689a      	ldr	r2, [r3, #8]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	4013      	ands	r3, r2
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	429a      	cmp	r2, r3
 8006086:	bf0c      	ite	eq
 8006088:	2301      	moveq	r3, #1
 800608a:	2300      	movne	r3, #0
 800608c:	b2db      	uxtb	r3, r3
 800608e:	461a      	mov	r2, r3
 8006090:	79fb      	ldrb	r3, [r7, #7]
 8006092:	429a      	cmp	r2, r3
 8006094:	d1a3      	bne.n	8005fde <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af02      	add	r7, sp, #8
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b4:	d111      	bne.n	80060da <SPI_EndRxTransaction+0x3a>
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060be:	d004      	beq.n	80060ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c8:	d107      	bne.n	80060da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e2:	d12a      	bne.n	800613a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ec:	d012      	beq.n	8006114 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	9300      	str	r3, [sp, #0]
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2200      	movs	r2, #0
 80060f6:	2180      	movs	r1, #128	; 0x80
 80060f8:	68f8      	ldr	r0, [r7, #12]
 80060fa:	f7ff ff67 	bl	8005fcc <SPI_WaitFlagStateUntilTimeout>
 80060fe:	4603      	mov	r3, r0
 8006100:	2b00      	cmp	r3, #0
 8006102:	d02d      	beq.n	8006160 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006108:	f043 0220 	orr.w	r2, r3, #32
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e026      	b.n	8006162 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	9300      	str	r3, [sp, #0]
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2200      	movs	r2, #0
 800611c:	2101      	movs	r1, #1
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff ff54 	bl	8005fcc <SPI_WaitFlagStateUntilTimeout>
 8006124:	4603      	mov	r3, r0
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01a      	beq.n	8006160 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	f043 0220 	orr.w	r2, r3, #32
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006136:	2303      	movs	r3, #3
 8006138:	e013      	b.n	8006162 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2200      	movs	r2, #0
 8006142:	2101      	movs	r1, #1
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff ff41 	bl	8005fcc <SPI_WaitFlagStateUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e000      	b.n	8006162 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006160:	2300      	movs	r3, #0
}
 8006162:	4618      	mov	r0, r3
 8006164:	3710      	adds	r7, #16
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
	...

0800616c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af02      	add	r7, sp, #8
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006178:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <SPI_EndRxTxTransaction+0x7c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a1b      	ldr	r2, [pc, #108]	; (80061ec <SPI_EndRxTxTransaction+0x80>)
 800617e:	fba2 2303 	umull	r2, r3, r2, r3
 8006182:	0d5b      	lsrs	r3, r3, #21
 8006184:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006188:	fb02 f303 	mul.w	r3, r2, r3
 800618c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006196:	d112      	bne.n	80061be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	9300      	str	r3, [sp, #0]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2200      	movs	r2, #0
 80061a0:	2180      	movs	r1, #128	; 0x80
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff ff12 	bl	8005fcc <SPI_WaitFlagStateUntilTimeout>
 80061a8:	4603      	mov	r3, r0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d016      	beq.n	80061dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b2:	f043 0220 	orr.w	r2, r3, #32
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061ba:	2303      	movs	r3, #3
 80061bc:	e00f      	b.n	80061de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d00a      	beq.n	80061da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d4:	2b80      	cmp	r3, #128	; 0x80
 80061d6:	d0f2      	beq.n	80061be <SPI_EndRxTxTransaction+0x52>
 80061d8:	e000      	b.n	80061dc <SPI_EndRxTxTransaction+0x70>
        break;
 80061da:	bf00      	nop
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3718      	adds	r7, #24
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20000040 	.word	0x20000040
 80061ec:	165e9f81 	.word	0x165e9f81

080061f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d101      	bne.n	8006202 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e01d      	b.n	800623e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f006 fe22 	bl	800ce60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3304      	adds	r3, #4
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f000 fe60 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3708      	adds	r7, #8
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006246:	b480      	push	{r7}
 8006248:	b085      	sub	sp, #20
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2202      	movs	r2, #2
 8006252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	f003 0307 	and.w	r3, r3, #7
 8006260:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b06      	cmp	r3, #6
 8006266:	d007      	beq.n	8006278 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f042 0201 	orr.w	r2, r2, #1
 8006276:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3714      	adds	r7, #20
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800628e:	b480      	push	{r7}
 8006290:	b085      	sub	sp, #20
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68da      	ldr	r2, [r3, #12]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f042 0201 	orr.w	r2, r2, #1
 80062a4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b06      	cmp	r3, #6
 80062b6:	d007      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681a      	ldr	r2, [r3, #0]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3714      	adds	r7, #20
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b082      	sub	sp, #8
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e01d      	b.n	8006324 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d106      	bne.n	8006302 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 f815 	bl	800632c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2202      	movs	r2, #2
 8006306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	3304      	adds	r3, #4
 8006312:	4619      	mov	r1, r3
 8006314:	4610      	mov	r0, r2
 8006316:	f000 fded 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006322:	2300      	movs	r3, #0
}
 8006324:	4618      	mov	r0, r3
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006334:	bf00      	nop
 8006336:	370c      	adds	r7, #12
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	2201      	movs	r2, #1
 8006350:	6839      	ldr	r1, [r7, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f001 f9e2 	bl	800771c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a15      	ldr	r2, [pc, #84]	; (80063b4 <HAL_TIM_OC_Start+0x74>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d004      	beq.n	800636c <HAL_TIM_OC_Start+0x2c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a14      	ldr	r2, [pc, #80]	; (80063b8 <HAL_TIM_OC_Start+0x78>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d101      	bne.n	8006370 <HAL_TIM_OC_Start+0x30>
 800636c:	2301      	movs	r3, #1
 800636e:	e000      	b.n	8006372 <HAL_TIM_OC_Start+0x32>
 8006370:	2300      	movs	r3, #0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d007      	beq.n	8006386 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006384:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b06      	cmp	r3, #6
 8006396:	d007      	beq.n	80063a8 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	681a      	ldr	r2, [r3, #0]
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f042 0201 	orr.w	r2, r2, #1
 80063a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	40010000 	.word	0x40010000
 80063b8:	40010400 	.word	0x40010400

080063bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b082      	sub	sp, #8
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e01d      	b.n	800640a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d4:	b2db      	uxtb	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2200      	movs	r2, #0
 80063de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 f815 	bl	8006412 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2202      	movs	r2, #2
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	3304      	adds	r3, #4
 80063f8:	4619      	mov	r1, r3
 80063fa:	4610      	mov	r0, r2
 80063fc:	f000 fd7a 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
	...

08006428 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2201      	movs	r2, #1
 8006438:	6839      	ldr	r1, [r7, #0]
 800643a:	4618      	mov	r0, r3
 800643c:	f001 f96e 	bl	800771c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4a15      	ldr	r2, [pc, #84]	; (800649c <HAL_TIM_PWM_Start+0x74>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d004      	beq.n	8006454 <HAL_TIM_PWM_Start+0x2c>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a14      	ldr	r2, [pc, #80]	; (80064a0 <HAL_TIM_PWM_Start+0x78>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d101      	bne.n	8006458 <HAL_TIM_PWM_Start+0x30>
 8006454:	2301      	movs	r3, #1
 8006456:	e000      	b.n	800645a <HAL_TIM_PWM_Start+0x32>
 8006458:	2300      	movs	r3, #0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d007      	beq.n	800646e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800646c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 0307 	and.w	r3, r3, #7
 8006478:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	2b06      	cmp	r3, #6
 800647e:	d007      	beq.n	8006490 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f042 0201 	orr.w	r2, r2, #1
 800648e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40010000 	.word	0x40010000
 80064a0:	40010400 	.word	0x40010400

080064a4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b082      	sub	sp, #8
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d101      	bne.n	80064b6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e01d      	b.n	80064f2 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2200      	movs	r2, #0
 80064c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f815 	bl	80064fa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	3304      	adds	r3, #4
 80064e0:	4619      	mov	r1, r3
 80064e2:	4610      	mov	r0, r2
 80064e4:	f000 fd06 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006502:	bf00      	nop
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
	...

08006510 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b0c      	cmp	r3, #12
 800651e:	d841      	bhi.n	80065a4 <HAL_TIM_IC_Start_IT+0x94>
 8006520:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <HAL_TIM_IC_Start_IT+0x18>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	0800655d 	.word	0x0800655d
 800652c:	080065a5 	.word	0x080065a5
 8006530:	080065a5 	.word	0x080065a5
 8006534:	080065a5 	.word	0x080065a5
 8006538:	0800656f 	.word	0x0800656f
 800653c:	080065a5 	.word	0x080065a5
 8006540:	080065a5 	.word	0x080065a5
 8006544:	080065a5 	.word	0x080065a5
 8006548:	08006581 	.word	0x08006581
 800654c:	080065a5 	.word	0x080065a5
 8006550:	080065a5 	.word	0x080065a5
 8006554:	080065a5 	.word	0x080065a5
 8006558:	08006593 	.word	0x08006593
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	68da      	ldr	r2, [r3, #12]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0202 	orr.w	r2, r2, #2
 800656a:	60da      	str	r2, [r3, #12]
      break;
 800656c:	e01b      	b.n	80065a6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0204 	orr.w	r2, r2, #4
 800657c:	60da      	str	r2, [r3, #12]
      break;
 800657e:	e012      	b.n	80065a6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	68da      	ldr	r2, [r3, #12]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f042 0208 	orr.w	r2, r2, #8
 800658e:	60da      	str	r2, [r3, #12]
      break;
 8006590:	e009      	b.n	80065a6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f042 0210 	orr.w	r2, r2, #16
 80065a0:	60da      	str	r2, [r3, #12]
      break;
 80065a2:	e000      	b.n	80065a6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80065a4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2201      	movs	r2, #1
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 f8b4 	bl	800771c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f003 0307 	and.w	r3, r3, #7
 80065be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2b06      	cmp	r3, #6
 80065c4:	d007      	beq.n	80065d6 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f042 0201 	orr.w	r2, r2, #1
 80065d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065d6:	2300      	movs	r3, #0
}
 80065d8:	4618      	mov	r0, r3
 80065da:	3710      	adds	r7, #16
 80065dc:	46bd      	mov	sp, r7
 80065de:	bd80      	pop	{r7, pc}

080065e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b086      	sub	sp, #24
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
 80065e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d101      	bne.n	80065f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065f0:	2301      	movs	r3, #1
 80065f2:	e083      	b.n	80066fc <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fa:	b2db      	uxtb	r3, r3
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d106      	bne.n	800660e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f006 fd59 	bl	800d0c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2202      	movs	r2, #2
 8006612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	689b      	ldr	r3, [r3, #8]
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	6812      	ldr	r2, [r2, #0]
 8006620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006624:	f023 0307 	bic.w	r3, r3, #7
 8006628:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	3304      	adds	r3, #4
 8006632:	4619      	mov	r1, r3
 8006634:	4610      	mov	r0, r2
 8006636:	f000 fc5d 	bl	8006ef4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6a1b      	ldr	r3, [r3, #32]
 8006650:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	697a      	ldr	r2, [r7, #20]
 8006658:	4313      	orrs	r3, r2
 800665a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	689a      	ldr	r2, [r3, #8]
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	699b      	ldr	r3, [r3, #24]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	4313      	orrs	r3, r2
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	4313      	orrs	r3, r2
 8006678:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006680:	f023 030c 	bic.w	r3, r3, #12
 8006684:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800668c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	68da      	ldr	r2, [r3, #12]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	69db      	ldr	r3, [r3, #28]
 800669a:	021b      	lsls	r3, r3, #8
 800669c:	4313      	orrs	r3, r2
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	011a      	lsls	r2, r3, #4
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	031b      	lsls	r3, r3, #12
 80066b0:	4313      	orrs	r3, r2
 80066b2:	693a      	ldr	r2, [r7, #16]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80066be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80066c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	685a      	ldr	r2, [r3, #4]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	4313      	orrs	r3, r2
 80066d4:	68fa      	ldr	r2, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	697a      	ldr	r2, [r7, #20]
 80066e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	693a      	ldr	r2, [r7, #16]
 80066e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68fa      	ldr	r2, [r7, #12]
 80066f0:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
 800670c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d002      	beq.n	800671a <HAL_TIM_Encoder_Start_IT+0x16>
 8006714:	2b04      	cmp	r3, #4
 8006716:	d010      	beq.n	800673a <HAL_TIM_Encoder_Start_IT+0x36>
 8006718:	e01f      	b.n	800675a <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2201      	movs	r2, #1
 8006720:	2100      	movs	r1, #0
 8006722:	4618      	mov	r0, r3
 8006724:	f000 fffa 	bl	800771c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f042 0202 	orr.w	r2, r2, #2
 8006736:	60da      	str	r2, [r3, #12]
      break;
 8006738:	e02e      	b.n	8006798 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2201      	movs	r2, #1
 8006740:	2104      	movs	r1, #4
 8006742:	4618      	mov	r0, r3
 8006744:	f000 ffea 	bl	800771c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68da      	ldr	r2, [r3, #12]
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f042 0204 	orr.w	r2, r2, #4
 8006756:	60da      	str	r2, [r3, #12]
      break;
 8006758:	e01e      	b.n	8006798 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2201      	movs	r2, #1
 8006760:	2100      	movs	r1, #0
 8006762:	4618      	mov	r0, r3
 8006764:	f000 ffda 	bl	800771c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2201      	movs	r2, #1
 800676e:	2104      	movs	r1, #4
 8006770:	4618      	mov	r0, r3
 8006772:	f000 ffd3 	bl	800771c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68da      	ldr	r2, [r3, #12]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0202 	orr.w	r2, r2, #2
 8006784:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68da      	ldr	r2, [r3, #12]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f042 0204 	orr.w	r2, r2, #4
 8006794:	60da      	str	r2, [r3, #12]
      break;
 8006796:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0201 	orr.w	r2, r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3708      	adds	r7, #8
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b082      	sub	sp, #8
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	f003 0302 	and.w	r3, r3, #2
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d122      	bne.n	800680e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d11b      	bne.n	800680e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f06f 0202 	mvn.w	r2, #2
 80067de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2201      	movs	r2, #1
 80067e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	699b      	ldr	r3, [r3, #24]
 80067ec:	f003 0303 	and.w	r3, r3, #3
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d003      	beq.n	80067fc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f004 ff39 	bl	800b66c <HAL_TIM_IC_CaptureCallback>
 80067fa:	e005      	b.n	8006808 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f004 fb31 	bl	800ae64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fb61 	bl	8006eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0304 	and.w	r3, r3, #4
 8006818:	2b04      	cmp	r3, #4
 800681a:	d122      	bne.n	8006862 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0304 	and.w	r3, r3, #4
 8006826:	2b04      	cmp	r3, #4
 8006828:	d11b      	bne.n	8006862 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f06f 0204 	mvn.w	r2, #4
 8006832:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2202      	movs	r2, #2
 8006838:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	699b      	ldr	r3, [r3, #24]
 8006840:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006844:	2b00      	cmp	r3, #0
 8006846:	d003      	beq.n	8006850 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f004 ff0f 	bl	800b66c <HAL_TIM_IC_CaptureCallback>
 800684e:	e005      	b.n	800685c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f004 fb07 	bl	800ae64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 fb37 	bl	8006eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	691b      	ldr	r3, [r3, #16]
 8006868:	f003 0308 	and.w	r3, r3, #8
 800686c:	2b08      	cmp	r3, #8
 800686e:	d122      	bne.n	80068b6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	f003 0308 	and.w	r3, r3, #8
 800687a:	2b08      	cmp	r3, #8
 800687c:	d11b      	bne.n	80068b6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f06f 0208 	mvn.w	r2, #8
 8006886:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2204      	movs	r2, #4
 800688c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	2b00      	cmp	r3, #0
 800689a:	d003      	beq.n	80068a4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f004 fee5 	bl	800b66c <HAL_TIM_IC_CaptureCallback>
 80068a2:	e005      	b.n	80068b0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f004 fadd 	bl	800ae64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fb0d 	bl	8006eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f003 0310 	and.w	r3, r3, #16
 80068c0:	2b10      	cmp	r3, #16
 80068c2:	d122      	bne.n	800690a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	68db      	ldr	r3, [r3, #12]
 80068ca:	f003 0310 	and.w	r3, r3, #16
 80068ce:	2b10      	cmp	r3, #16
 80068d0:	d11b      	bne.n	800690a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f06f 0210 	mvn.w	r2, #16
 80068da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2208      	movs	r2, #8
 80068e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	69db      	ldr	r3, [r3, #28]
 80068e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d003      	beq.n	80068f8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f004 febb 	bl	800b66c <HAL_TIM_IC_CaptureCallback>
 80068f6:	e005      	b.n	8006904 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f004 fab3 	bl	800ae64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f000 fae3 	bl	8006eca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b01      	cmp	r3, #1
 8006916:	d10e      	bne.n	8006936 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	68db      	ldr	r3, [r3, #12]
 800691e:	f003 0301 	and.w	r3, r3, #1
 8006922:	2b01      	cmp	r3, #1
 8006924:	d107      	bne.n	8006936 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f06f 0201 	mvn.w	r2, #1
 800692e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006930:	6878      	ldr	r0, [r7, #4]
 8006932:	f000 fac0 	bl	8006eb6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006940:	2b80      	cmp	r3, #128	; 0x80
 8006942:	d10e      	bne.n	8006962 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694e:	2b80      	cmp	r3, #128	; 0x80
 8006950:	d107      	bne.n	8006962 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800695a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f001 f805 	bl	800796c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696c:	2b40      	cmp	r3, #64	; 0x40
 800696e:	d10e      	bne.n	800698e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697a:	2b40      	cmp	r3, #64	; 0x40
 800697c:	d107      	bne.n	800698e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f000 faa8 	bl	8006ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	691b      	ldr	r3, [r3, #16]
 8006994:	f003 0320 	and.w	r3, r3, #32
 8006998:	2b20      	cmp	r3, #32
 800699a:	d10e      	bne.n	80069ba <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d107      	bne.n	80069ba <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f06f 0220 	mvn.w	r2, #32
 80069b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 ffcf 	bl	8007958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069ba:	bf00      	nop
 80069bc:	3708      	adds	r7, #8
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}
	...

080069c4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <HAL_TIM_OC_ConfigChannel+0x1a>
 80069da:	2302      	movs	r3, #2
 80069dc:	e04e      	b.n	8006a7c <HAL_TIM_OC_ConfigChannel+0xb8>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	d839      	bhi.n	8006a68 <HAL_TIM_OC_ConfigChannel+0xa4>
 80069f4:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <HAL_TIM_OC_ConfigChannel+0x38>)
 80069f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fa:	bf00      	nop
 80069fc:	08006a31 	.word	0x08006a31
 8006a00:	08006a69 	.word	0x08006a69
 8006a04:	08006a69 	.word	0x08006a69
 8006a08:	08006a69 	.word	0x08006a69
 8006a0c:	08006a3f 	.word	0x08006a3f
 8006a10:	08006a69 	.word	0x08006a69
 8006a14:	08006a69 	.word	0x08006a69
 8006a18:	08006a69 	.word	0x08006a69
 8006a1c:	08006a4d 	.word	0x08006a4d
 8006a20:	08006a69 	.word	0x08006a69
 8006a24:	08006a69 	.word	0x08006a69
 8006a28:	08006a69 	.word	0x08006a69
 8006a2c:	08006a5b 	.word	0x08006a5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fafc 	bl	8007034 <TIM_OC1_SetConfig>
      break;
 8006a3c:	e015      	b.n	8006a6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68b9      	ldr	r1, [r7, #8]
 8006a44:	4618      	mov	r0, r3
 8006a46:	f000 fb65 	bl	8007114 <TIM_OC2_SetConfig>
      break;
 8006a4a:	e00e      	b.n	8006a6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	68b9      	ldr	r1, [r7, #8]
 8006a52:	4618      	mov	r0, r3
 8006a54:	f000 fbd4 	bl	8007200 <TIM_OC3_SetConfig>
      break;
 8006a58:	e007      	b.n	8006a6a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68b9      	ldr	r1, [r7, #8]
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fc41 	bl	80072e8 <TIM_OC4_SetConfig>
      break;
 8006a66:	e000      	b.n	8006a6a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006a68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3710      	adds	r7, #16
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d101      	bne.n	8006a9e <HAL_TIM_IC_ConfigChannel+0x1a>
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	e08a      	b.n	8006bb4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2202      	movs	r2, #2
 8006aaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d11b      	bne.n	8006aec <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	6819      	ldr	r1, [r3, #0]
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	685a      	ldr	r2, [r3, #4]
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	f000 fc66 	bl	8007394 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699a      	ldr	r2, [r3, #24]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 020c 	bic.w	r2, r2, #12
 8006ad6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6999      	ldr	r1, [r3, #24]
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	689a      	ldr	r2, [r3, #8]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	619a      	str	r2, [r3, #24]
 8006aea:	e05a      	b.n	8006ba2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d11c      	bne.n	8006b2c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	6819      	ldr	r1, [r3, #0]
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	685a      	ldr	r2, [r3, #4]
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	68db      	ldr	r3, [r3, #12]
 8006b02:	f000 fcea 	bl	80074da <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699a      	ldr	r2, [r3, #24]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b14:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	6999      	ldr	r1, [r3, #24]
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	021a      	lsls	r2, r3, #8
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	619a      	str	r2, [r3, #24]
 8006b2a:	e03a      	b.n	8006ba2 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2b08      	cmp	r3, #8
 8006b30:	d11b      	bne.n	8006b6a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	6818      	ldr	r0, [r3, #0]
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	6819      	ldr	r1, [r3, #0]
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f000 fd37 	bl	80075b4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	69da      	ldr	r2, [r3, #28]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 020c 	bic.w	r2, r2, #12
 8006b54:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	69d9      	ldr	r1, [r3, #28]
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	689a      	ldr	r2, [r3, #8]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	430a      	orrs	r2, r1
 8006b66:	61da      	str	r2, [r3, #28]
 8006b68:	e01b      	b.n	8006ba2 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6818      	ldr	r0, [r3, #0]
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	6819      	ldr	r1, [r3, #0]
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	685a      	ldr	r2, [r3, #4]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	f000 fd57 	bl	800762c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	69da      	ldr	r2, [r3, #28]
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	69d9      	ldr	r1, [r3, #28]
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	021a      	lsls	r2, r3, #8
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	430a      	orrs	r2, r1
 8006ba0:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e0b4      	b.n	8006d40 <HAL_TIM_PWM_ConfigChannel+0x184>
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2b0c      	cmp	r3, #12
 8006bea:	f200 809f 	bhi.w	8006d2c <HAL_TIM_PWM_ConfigChannel+0x170>
 8006bee:	a201      	add	r2, pc, #4	; (adr r2, 8006bf4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf4:	08006c29 	.word	0x08006c29
 8006bf8:	08006d2d 	.word	0x08006d2d
 8006bfc:	08006d2d 	.word	0x08006d2d
 8006c00:	08006d2d 	.word	0x08006d2d
 8006c04:	08006c69 	.word	0x08006c69
 8006c08:	08006d2d 	.word	0x08006d2d
 8006c0c:	08006d2d 	.word	0x08006d2d
 8006c10:	08006d2d 	.word	0x08006d2d
 8006c14:	08006cab 	.word	0x08006cab
 8006c18:	08006d2d 	.word	0x08006d2d
 8006c1c:	08006d2d 	.word	0x08006d2d
 8006c20:	08006d2d 	.word	0x08006d2d
 8006c24:	08006ceb 	.word	0x08006ceb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	68b9      	ldr	r1, [r7, #8]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f000 fa00 	bl	8007034 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	699a      	ldr	r2, [r3, #24]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f042 0208 	orr.w	r2, r2, #8
 8006c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 0204 	bic.w	r2, r2, #4
 8006c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6999      	ldr	r1, [r3, #24]
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	691a      	ldr	r2, [r3, #16]
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	619a      	str	r2, [r3, #24]
      break;
 8006c66:	e062      	b.n	8006d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68b9      	ldr	r1, [r7, #8]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 fa50 	bl	8007114 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	699a      	ldr	r2, [r3, #24]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6999      	ldr	r1, [r3, #24]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	021a      	lsls	r2, r3, #8
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	430a      	orrs	r2, r1
 8006ca6:	619a      	str	r2, [r3, #24]
      break;
 8006ca8:	e041      	b.n	8006d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	68b9      	ldr	r1, [r7, #8]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f000 faa5 	bl	8007200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	69da      	ldr	r2, [r3, #28]
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f042 0208 	orr.w	r2, r2, #8
 8006cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	69da      	ldr	r2, [r3, #28]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f022 0204 	bic.w	r2, r2, #4
 8006cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	69d9      	ldr	r1, [r3, #28]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	691a      	ldr	r2, [r3, #16]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	61da      	str	r2, [r3, #28]
      break;
 8006ce8:	e021      	b.n	8006d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68b9      	ldr	r1, [r7, #8]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f000 faf9 	bl	80072e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	69da      	ldr	r2, [r3, #28]
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	69da      	ldr	r2, [r3, #28]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	69d9      	ldr	r1, [r3, #28]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	021a      	lsls	r2, r3, #8
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	61da      	str	r2, [r3, #28]
      break;
 8006d2a:	e000      	b.n	8006d2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d2c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3710      	adds	r7, #16
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_TIM_ConfigClockSource+0x18>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e0a6      	b.n	8006eae <HAL_TIM_ConfigClockSource+0x166>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d86:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b40      	cmp	r3, #64	; 0x40
 8006d96:	d067      	beq.n	8006e68 <HAL_TIM_ConfigClockSource+0x120>
 8006d98:	2b40      	cmp	r3, #64	; 0x40
 8006d9a:	d80b      	bhi.n	8006db4 <HAL_TIM_ConfigClockSource+0x6c>
 8006d9c:	2b10      	cmp	r3, #16
 8006d9e:	d073      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x140>
 8006da0:	2b10      	cmp	r3, #16
 8006da2:	d802      	bhi.n	8006daa <HAL_TIM_ConfigClockSource+0x62>
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d06f      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006da8:	e078      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006daa:	2b20      	cmp	r3, #32
 8006dac:	d06c      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x140>
 8006dae:	2b30      	cmp	r3, #48	; 0x30
 8006db0:	d06a      	beq.n	8006e88 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006db2:	e073      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006db4:	2b70      	cmp	r3, #112	; 0x70
 8006db6:	d00d      	beq.n	8006dd4 <HAL_TIM_ConfigClockSource+0x8c>
 8006db8:	2b70      	cmp	r3, #112	; 0x70
 8006dba:	d804      	bhi.n	8006dc6 <HAL_TIM_ConfigClockSource+0x7e>
 8006dbc:	2b50      	cmp	r3, #80	; 0x50
 8006dbe:	d033      	beq.n	8006e28 <HAL_TIM_ConfigClockSource+0xe0>
 8006dc0:	2b60      	cmp	r3, #96	; 0x60
 8006dc2:	d041      	beq.n	8006e48 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006dc4:	e06a      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dca:	d066      	beq.n	8006e9a <HAL_TIM_ConfigClockSource+0x152>
 8006dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd0:	d017      	beq.n	8006e02 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006dd2:	e063      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6818      	ldr	r0, [r3, #0]
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	6899      	ldr	r1, [r3, #8]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685a      	ldr	r2, [r3, #4]
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	f000 fc7a 	bl	80076dc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006df6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	609a      	str	r2, [r3, #8]
      break;
 8006e00:	e04c      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6818      	ldr	r0, [r3, #0]
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	6899      	ldr	r1, [r3, #8]
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	68db      	ldr	r3, [r3, #12]
 8006e12:	f000 fc63 	bl	80076dc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689a      	ldr	r2, [r3, #8]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e24:	609a      	str	r2, [r3, #8]
      break;
 8006e26:	e039      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6818      	ldr	r0, [r3, #0]
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	6859      	ldr	r1, [r3, #4]
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	461a      	mov	r2, r3
 8006e36:	f000 fb21 	bl	800747c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2150      	movs	r1, #80	; 0x50
 8006e40:	4618      	mov	r0, r3
 8006e42:	f000 fc30 	bl	80076a6 <TIM_ITRx_SetConfig>
      break;
 8006e46:	e029      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	6859      	ldr	r1, [r3, #4]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	68db      	ldr	r3, [r3, #12]
 8006e54:	461a      	mov	r2, r3
 8006e56:	f000 fb7d 	bl	8007554 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2160      	movs	r1, #96	; 0x60
 8006e60:	4618      	mov	r0, r3
 8006e62:	f000 fc20 	bl	80076a6 <TIM_ITRx_SetConfig>
      break;
 8006e66:	e019      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6818      	ldr	r0, [r3, #0]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	6859      	ldr	r1, [r3, #4]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	461a      	mov	r2, r3
 8006e76:	f000 fb01 	bl	800747c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	2140      	movs	r1, #64	; 0x40
 8006e80:	4618      	mov	r0, r3
 8006e82:	f000 fc10 	bl	80076a6 <TIM_ITRx_SetConfig>
      break;
 8006e86:	e009      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681a      	ldr	r2, [r3, #0]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	4619      	mov	r1, r3
 8006e92:	4610      	mov	r0, r2
 8006e94:	f000 fc07 	bl	80076a6 <TIM_ITRx_SetConfig>
      break;
 8006e98:	e000      	b.n	8006e9c <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006e9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}

08006eb6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006ebe:	bf00      	nop
 8006ec0:	370c      	adds	r7, #12
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec8:	4770      	bx	lr

08006eca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006eca:	b480      	push	{r7}
 8006ecc:	b083      	sub	sp, #12
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006ed2:	bf00      	nop
 8006ed4:	370c      	adds	r7, #12
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr

08006ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ede:	b480      	push	{r7}
 8006ee0:	b083      	sub	sp, #12
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ee6:	bf00      	nop
 8006ee8:	370c      	adds	r7, #12
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
	...

08006ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b085      	sub	sp, #20
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	4a40      	ldr	r2, [pc, #256]	; (8007008 <TIM_Base_SetConfig+0x114>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d013      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f12:	d00f      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3d      	ldr	r2, [pc, #244]	; (800700c <TIM_Base_SetConfig+0x118>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d00b      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a3c      	ldr	r2, [pc, #240]	; (8007010 <TIM_Base_SetConfig+0x11c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d007      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a3b      	ldr	r2, [pc, #236]	; (8007014 <TIM_Base_SetConfig+0x120>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d003      	beq.n	8006f34 <TIM_Base_SetConfig+0x40>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a3a      	ldr	r2, [pc, #232]	; (8007018 <TIM_Base_SetConfig+0x124>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d108      	bne.n	8006f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a2f      	ldr	r2, [pc, #188]	; (8007008 <TIM_Base_SetConfig+0x114>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d02b      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f54:	d027      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2c      	ldr	r2, [pc, #176]	; (800700c <TIM_Base_SetConfig+0x118>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d023      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2b      	ldr	r2, [pc, #172]	; (8007010 <TIM_Base_SetConfig+0x11c>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01f      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a2a      	ldr	r2, [pc, #168]	; (8007014 <TIM_Base_SetConfig+0x120>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01b      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a29      	ldr	r2, [pc, #164]	; (8007018 <TIM_Base_SetConfig+0x124>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d017      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a28      	ldr	r2, [pc, #160]	; (800701c <TIM_Base_SetConfig+0x128>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d013      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a27      	ldr	r2, [pc, #156]	; (8007020 <TIM_Base_SetConfig+0x12c>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00f      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a26      	ldr	r2, [pc, #152]	; (8007024 <TIM_Base_SetConfig+0x130>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d00b      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a25      	ldr	r2, [pc, #148]	; (8007028 <TIM_Base_SetConfig+0x134>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d007      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a24      	ldr	r2, [pc, #144]	; (800702c <TIM_Base_SetConfig+0x138>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d003      	beq.n	8006fa6 <TIM_Base_SetConfig+0xb2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a23      	ldr	r2, [pc, #140]	; (8007030 <TIM_Base_SetConfig+0x13c>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d108      	bne.n	8006fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a0a      	ldr	r2, [pc, #40]	; (8007008 <TIM_Base_SetConfig+0x114>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d003      	beq.n	8006fec <TIM_Base_SetConfig+0xf8>
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a0c      	ldr	r2, [pc, #48]	; (8007018 <TIM_Base_SetConfig+0x124>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d103      	bne.n	8006ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	691a      	ldr	r2, [r3, #16]
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	615a      	str	r2, [r3, #20]
}
 8006ffa:	bf00      	nop
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40010000 	.word	0x40010000
 800700c:	40000400 	.word	0x40000400
 8007010:	40000800 	.word	0x40000800
 8007014:	40000c00 	.word	0x40000c00
 8007018:	40010400 	.word	0x40010400
 800701c:	40014000 	.word	0x40014000
 8007020:	40014400 	.word	0x40014400
 8007024:	40014800 	.word	0x40014800
 8007028:	40001800 	.word	0x40001800
 800702c:	40001c00 	.word	0x40001c00
 8007030:	40002000 	.word	0x40002000

08007034 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007034:	b480      	push	{r7}
 8007036:	b087      	sub	sp, #28
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	f023 0201 	bic.w	r2, r3, #1
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	699b      	ldr	r3, [r3, #24]
 800705a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007062:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f023 0303 	bic.w	r3, r3, #3
 800706a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800706c:	683b      	ldr	r3, [r7, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	68fa      	ldr	r2, [r7, #12]
 8007072:	4313      	orrs	r3, r2
 8007074:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	f023 0302 	bic.w	r3, r3, #2
 800707c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	4313      	orrs	r3, r2
 8007086:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a20      	ldr	r2, [pc, #128]	; (800710c <TIM_OC1_SetConfig+0xd8>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d003      	beq.n	8007098 <TIM_OC1_SetConfig+0x64>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a1f      	ldr	r2, [pc, #124]	; (8007110 <TIM_OC1_SetConfig+0xdc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d10c      	bne.n	80070b2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007098:	697b      	ldr	r3, [r7, #20]
 800709a:	f023 0308 	bic.w	r3, r3, #8
 800709e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	697a      	ldr	r2, [r7, #20]
 80070a6:	4313      	orrs	r3, r2
 80070a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	f023 0304 	bic.w	r3, r3, #4
 80070b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a15      	ldr	r2, [pc, #84]	; (800710c <TIM_OC1_SetConfig+0xd8>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d003      	beq.n	80070c2 <TIM_OC1_SetConfig+0x8e>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	4a14      	ldr	r2, [pc, #80]	; (8007110 <TIM_OC1_SetConfig+0xdc>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	d111      	bne.n	80070e6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	695b      	ldr	r3, [r3, #20]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	699b      	ldr	r3, [r3, #24]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	693a      	ldr	r2, [r7, #16]
 80070ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	68fa      	ldr	r2, [r7, #12]
 80070f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	697a      	ldr	r2, [r7, #20]
 80070fe:	621a      	str	r2, [r3, #32]
}
 8007100:	bf00      	nop
 8007102:	371c      	adds	r7, #28
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	40010000 	.word	0x40010000
 8007110:	40010400 	.word	0x40010400

08007114 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007114:	b480      	push	{r7}
 8007116:	b087      	sub	sp, #28
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	f023 0210 	bic.w	r2, r3, #16
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6a1b      	ldr	r3, [r3, #32]
 800712e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	021b      	lsls	r3, r3, #8
 8007152:	68fa      	ldr	r2, [r7, #12]
 8007154:	4313      	orrs	r3, r2
 8007156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f023 0320 	bic.w	r3, r3, #32
 800715e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	011b      	lsls	r3, r3, #4
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a22      	ldr	r2, [pc, #136]	; (80071f8 <TIM_OC2_SetConfig+0xe4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC2_SetConfig+0x68>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a21      	ldr	r2, [pc, #132]	; (80071fc <TIM_OC2_SetConfig+0xe8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d10d      	bne.n	8007198 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	011b      	lsls	r3, r3, #4
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007196:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a17      	ldr	r2, [pc, #92]	; (80071f8 <TIM_OC2_SetConfig+0xe4>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d003      	beq.n	80071a8 <TIM_OC2_SetConfig+0x94>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a16      	ldr	r2, [pc, #88]	; (80071fc <TIM_OC2_SetConfig+0xe8>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d113      	bne.n	80071d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	4313      	orrs	r3, r2
 80071c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	699b      	ldr	r3, [r3, #24]
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	68fa      	ldr	r2, [r7, #12]
 80071da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	685a      	ldr	r2, [r3, #4]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	697a      	ldr	r2, [r7, #20]
 80071e8:	621a      	str	r2, [r3, #32]
}
 80071ea:	bf00      	nop
 80071ec:	371c      	adds	r7, #28
 80071ee:	46bd      	mov	sp, r7
 80071f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f4:	4770      	bx	lr
 80071f6:	bf00      	nop
 80071f8:	40010000 	.word	0x40010000
 80071fc:	40010400 	.word	0x40010400

08007200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007200:	b480      	push	{r7}
 8007202:	b087      	sub	sp, #28
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	69db      	ldr	r3, [r3, #28]
 8007226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800722e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0303 	bic.w	r3, r3, #3
 8007236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	4313      	orrs	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a21      	ldr	r2, [pc, #132]	; (80072e0 <TIM_OC3_SetConfig+0xe0>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d003      	beq.n	8007266 <TIM_OC3_SetConfig+0x66>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	4a20      	ldr	r2, [pc, #128]	; (80072e4 <TIM_OC3_SetConfig+0xe4>)
 8007262:	4293      	cmp	r3, r2
 8007264:	d10d      	bne.n	8007282 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800726c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	021b      	lsls	r3, r3, #8
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	4313      	orrs	r3, r2
 8007278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a16      	ldr	r2, [pc, #88]	; (80072e0 <TIM_OC3_SetConfig+0xe0>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d003      	beq.n	8007292 <TIM_OC3_SetConfig+0x92>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <TIM_OC3_SetConfig+0xe4>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d113      	bne.n	80072ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007298:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	695b      	ldr	r3, [r3, #20]
 80072a6:	011b      	lsls	r3, r3, #4
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	4313      	orrs	r3, r2
 80072ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	011b      	lsls	r3, r3, #4
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	693a      	ldr	r2, [r7, #16]
 80072be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68fa      	ldr	r2, [r7, #12]
 80072c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	685a      	ldr	r2, [r3, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	697a      	ldr	r2, [r7, #20]
 80072d2:	621a      	str	r2, [r3, #32]
}
 80072d4:	bf00      	nop
 80072d6:	371c      	adds	r7, #28
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr
 80072e0:	40010000 	.word	0x40010000
 80072e4:	40010400 	.word	0x40010400

080072e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a1b      	ldr	r3, [r3, #32]
 80072f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6a1b      	ldr	r3, [r3, #32]
 8007302:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800731e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	021b      	lsls	r3, r3, #8
 8007326:	68fa      	ldr	r2, [r7, #12]
 8007328:	4313      	orrs	r3, r2
 800732a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007332:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	031b      	lsls	r3, r3, #12
 800733a:	693a      	ldr	r2, [r7, #16]
 800733c:	4313      	orrs	r3, r2
 800733e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a12      	ldr	r2, [pc, #72]	; (800738c <TIM_OC4_SetConfig+0xa4>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d003      	beq.n	8007350 <TIM_OC4_SetConfig+0x68>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	4a11      	ldr	r2, [pc, #68]	; (8007390 <TIM_OC4_SetConfig+0xa8>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d109      	bne.n	8007364 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	695b      	ldr	r3, [r3, #20]
 800735c:	019b      	lsls	r3, r3, #6
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	4313      	orrs	r3, r2
 8007362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	693a      	ldr	r2, [r7, #16]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40010000 	.word	0x40010000
 8007390:	40010400 	.word	0x40010400

08007394 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	f023 0201 	bic.w	r2, r3, #1
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	699b      	ldr	r3, [r3, #24]
 80073b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	4a28      	ldr	r2, [pc, #160]	; (8007460 <TIM_TI1_SetConfig+0xcc>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01b      	beq.n	80073fa <TIM_TI1_SetConfig+0x66>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c8:	d017      	beq.n	80073fa <TIM_TI1_SetConfig+0x66>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a25      	ldr	r2, [pc, #148]	; (8007464 <TIM_TI1_SetConfig+0xd0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d013      	beq.n	80073fa <TIM_TI1_SetConfig+0x66>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a24      	ldr	r2, [pc, #144]	; (8007468 <TIM_TI1_SetConfig+0xd4>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00f      	beq.n	80073fa <TIM_TI1_SetConfig+0x66>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a23      	ldr	r2, [pc, #140]	; (800746c <TIM_TI1_SetConfig+0xd8>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d00b      	beq.n	80073fa <TIM_TI1_SetConfig+0x66>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4a22      	ldr	r2, [pc, #136]	; (8007470 <TIM_TI1_SetConfig+0xdc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d007      	beq.n	80073fa <TIM_TI1_SetConfig+0x66>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4a21      	ldr	r2, [pc, #132]	; (8007474 <TIM_TI1_SetConfig+0xe0>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_TI1_SetConfig+0x66>
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4a20      	ldr	r2, [pc, #128]	; (8007478 <TIM_TI1_SetConfig+0xe4>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d101      	bne.n	80073fe <TIM_TI1_SetConfig+0x6a>
 80073fa:	2301      	movs	r3, #1
 80073fc:	e000      	b.n	8007400 <TIM_TI1_SetConfig+0x6c>
 80073fe:	2300      	movs	r3, #0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d008      	beq.n	8007416 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	f023 0303 	bic.w	r3, r3, #3
 800740a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800740c:	697a      	ldr	r2, [r7, #20]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4313      	orrs	r3, r2
 8007412:	617b      	str	r3, [r7, #20]
 8007414:	e003      	b.n	800741e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	011b      	lsls	r3, r3, #4
 800742a:	b2db      	uxtb	r3, r3
 800742c:	697a      	ldr	r2, [r7, #20]
 800742e:	4313      	orrs	r3, r2
 8007430:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	f023 030a 	bic.w	r3, r3, #10
 8007438:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	f003 030a 	and.w	r3, r3, #10
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	4313      	orrs	r3, r2
 8007444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	621a      	str	r2, [r3, #32]
}
 8007452:	bf00      	nop
 8007454:	371c      	adds	r7, #28
 8007456:	46bd      	mov	sp, r7
 8007458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	40010000 	.word	0x40010000
 8007464:	40000400 	.word	0x40000400
 8007468:	40000800 	.word	0x40000800
 800746c:	40000c00 	.word	0x40000c00
 8007470:	40010400 	.word	0x40010400
 8007474:	40014000 	.word	0x40014000
 8007478:	40001800 	.word	0x40001800

0800747c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800747c:	b480      	push	{r7}
 800747e:	b087      	sub	sp, #28
 8007480:	af00      	add	r7, sp, #0
 8007482:	60f8      	str	r0, [r7, #12]
 8007484:	60b9      	str	r1, [r7, #8]
 8007486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a1b      	ldr	r3, [r3, #32]
 800748c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a1b      	ldr	r3, [r3, #32]
 8007492:	f023 0201 	bic.w	r2, r3, #1
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	4313      	orrs	r3, r2
 80074b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	f023 030a 	bic.w	r3, r3, #10
 80074b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074ba:	697a      	ldr	r2, [r7, #20]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	4313      	orrs	r3, r2
 80074c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	693a      	ldr	r2, [r7, #16]
 80074c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	621a      	str	r2, [r3, #32]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr

080074da <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074da:	b480      	push	{r7}
 80074dc:	b087      	sub	sp, #28
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6a1b      	ldr	r3, [r3, #32]
 80074ec:	f023 0210 	bic.w	r2, r3, #16
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007500:	697b      	ldr	r3, [r7, #20]
 8007502:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007506:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	021b      	lsls	r3, r3, #8
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007518:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	031b      	lsls	r3, r3, #12
 800751e:	b29b      	uxth	r3, r3
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	4313      	orrs	r3, r2
 8007524:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800752c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800752e:	68bb      	ldr	r3, [r7, #8]
 8007530:	011b      	lsls	r3, r3, #4
 8007532:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	4313      	orrs	r3, r2
 800753a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	697a      	ldr	r2, [r7, #20]
 8007540:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	693a      	ldr	r2, [r7, #16]
 8007546:	621a      	str	r2, [r3, #32]
}
 8007548:	bf00      	nop
 800754a:	371c      	adds	r7, #28
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr

08007554 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	f023 0210 	bic.w	r2, r3, #16
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800757e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	031b      	lsls	r3, r3, #12
 8007584:	697a      	ldr	r2, [r7, #20]
 8007586:	4313      	orrs	r3, r2
 8007588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800758a:	693b      	ldr	r3, [r7, #16]
 800758c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007590:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	011b      	lsls	r3, r3, #4
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	4313      	orrs	r3, r2
 800759a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	693a      	ldr	r2, [r7, #16]
 80075a6:	621a      	str	r2, [r3, #32]
}
 80075a8:	bf00      	nop
 80075aa:	371c      	adds	r7, #28
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b087      	sub	sp, #28
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
 80075c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f023 0303 	bic.w	r3, r3, #3
 80075e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075f0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	011b      	lsls	r3, r3, #4
 80075f6:	b2db      	uxtb	r3, r3
 80075f8:	697a      	ldr	r2, [r7, #20]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007604:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	021b      	lsls	r3, r3, #8
 800760a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800760e:	693a      	ldr	r2, [r7, #16]
 8007610:	4313      	orrs	r3, r2
 8007612:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	621a      	str	r2, [r3, #32]
}
 8007620:	bf00      	nop
 8007622:	371c      	adds	r7, #28
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800762c:	b480      	push	{r7}
 800762e:	b087      	sub	sp, #28
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6a1b      	ldr	r3, [r3, #32]
 8007650:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007658:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	021b      	lsls	r3, r3, #8
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800766a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	031b      	lsls	r3, r3, #12
 8007670:	b29b      	uxth	r3, r3
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	4313      	orrs	r3, r2
 8007676:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800767e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	031b      	lsls	r3, r3, #12
 8007684:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007688:	693a      	ldr	r2, [r7, #16]
 800768a:	4313      	orrs	r3, r2
 800768c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	621a      	str	r2, [r3, #32]
}
 800769a:	bf00      	nop
 800769c:	371c      	adds	r7, #28
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr

080076a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b085      	sub	sp, #20
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076be:	683a      	ldr	r2, [r7, #0]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	f043 0307 	orr.w	r3, r3, #7
 80076c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	3714      	adds	r7, #20
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]
 80076e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	021a      	lsls	r2, r3, #8
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	431a      	orrs	r2, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	4313      	orrs	r3, r2
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	4313      	orrs	r3, r2
 8007708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	609a      	str	r2, [r3, #8]
}
 8007710:	bf00      	nop
 8007712:	371c      	adds	r7, #28
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800771c:	b480      	push	{r7}
 800771e:	b087      	sub	sp, #28
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	f003 031f 	and.w	r3, r3, #31
 800772e:	2201      	movs	r2, #1
 8007730:	fa02 f303 	lsl.w	r3, r2, r3
 8007734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6a1a      	ldr	r2, [r3, #32]
 800773a:	697b      	ldr	r3, [r7, #20]
 800773c:	43db      	mvns	r3, r3
 800773e:	401a      	ands	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	6a1a      	ldr	r2, [r3, #32]
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	f003 031f 	and.w	r3, r3, #31
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	fa01 f303 	lsl.w	r3, r1, r3
 8007754:	431a      	orrs	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	621a      	str	r2, [r3, #32]
}
 800775a:	bf00      	nop
 800775c:	371c      	adds	r7, #28
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b084      	sub	sp, #16
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
 800776e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2204      	movs	r2, #4
 8007776:	6839      	ldr	r1, [r7, #0]
 8007778:	4618      	mov	r0, r3
 800777a:	f000 f901 	bl	8007980 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800778c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2b06      	cmp	r3, #6
 800779e:	d007      	beq.n	80077b0 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f042 0201 	orr.w	r2, r2, #1
 80077ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e05a      	b.n	800788a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2202      	movs	r2, #2
 80077e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68fa      	ldr	r2, [r7, #12]
 8007802:	4313      	orrs	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a21      	ldr	r2, [pc, #132]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d022      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007820:	d01d      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4a1d      	ldr	r2, [pc, #116]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d018      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	4a1b      	ldr	r2, [pc, #108]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d013      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a1a      	ldr	r2, [pc, #104]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d00e      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a18      	ldr	r2, [pc, #96]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d009      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a17      	ldr	r2, [pc, #92]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d004      	beq.n	800785e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a15      	ldr	r2, [pc, #84]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d10c      	bne.n	8007878 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007864:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	4313      	orrs	r3, r2
 800786e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2200      	movs	r2, #0
 8007884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3714      	adds	r7, #20
 800788e:	46bd      	mov	sp, r7
 8007890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop
 8007898:	40010000 	.word	0x40010000
 800789c:	40000400 	.word	0x40000400
 80078a0:	40000800 	.word	0x40000800
 80078a4:	40000c00 	.word	0x40000c00
 80078a8:	40010400 	.word	0x40010400
 80078ac:	40014000 	.word	0x40014000
 80078b0:	40001800 	.word	0x40001800

080078b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
 80078bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078be:	2300      	movs	r3, #0
 80078c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d101      	bne.n	80078d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078cc:	2302      	movs	r3, #2
 80078ce:	e03d      	b.n	800794c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	4313      	orrs	r3, r2
 80078f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	685b      	ldr	r3, [r3, #4]
 80078fe:	4313      	orrs	r3, r2
 8007900:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4313      	orrs	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	691b      	ldr	r3, [r3, #16]
 800791a:	4313      	orrs	r3, r2
 800791c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	695b      	ldr	r3, [r3, #20]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68fa      	ldr	r2, [r7, #12]
 8007940:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800794a:	2300      	movs	r3, #0
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007958:	b480      	push	{r7}
 800795a:	b083      	sub	sp, #12
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007960:	bf00      	nop
 8007962:	370c      	adds	r7, #12
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr

0800796c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007980:	b480      	push	{r7}
 8007982:	b087      	sub	sp, #28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	f003 031f 	and.w	r3, r3, #31
 8007992:	2204      	movs	r2, #4
 8007994:	fa02 f303 	lsl.w	r3, r2, r3
 8007998:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6a1a      	ldr	r2, [r3, #32]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	43db      	mvns	r3, r3
 80079a2:	401a      	ands	r2, r3
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	6a1a      	ldr	r2, [r3, #32]
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f003 031f 	and.w	r3, r3, #31
 80079b2:	6879      	ldr	r1, [r7, #4]
 80079b4:	fa01 f303 	lsl.w	r3, r1, r3
 80079b8:	431a      	orrs	r2, r3
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	621a      	str	r2, [r3, #32]
}
 80079be:	bf00      	nop
 80079c0:	371c      	adds	r7, #28
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr

080079ca <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	e03f      	b.n	8007a5c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d106      	bne.n	80079f6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f005 fc2d 	bl	800d250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2224      	movs	r2, #36	; 0x24
 80079fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68da      	ldr	r2, [r3, #12]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a0c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fabe 	bl	8007f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	691a      	ldr	r2, [r3, #16]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a22:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	695a      	ldr	r2, [r3, #20]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a32:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	68da      	ldr	r2, [r3, #12]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a42:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2220      	movs	r2, #32
 8007a56:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007a5a:	2300      	movs	r3, #0
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3708      	adds	r7, #8
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b085      	sub	sp, #20
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d140      	bne.n	8007b00 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_UART_Receive_IT+0x26>
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e039      	b.n	8007b02 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_UART_Receive_IT+0x38>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e032      	b.n	8007b02 <HAL_UART_Receive_IT+0x9e>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	68ba      	ldr	r2, [r7, #8]
 8007aa8:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	88fa      	ldrh	r2, [r7, #6]
 8007aae:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	88fa      	ldrh	r2, [r7, #6]
 8007ab4:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2222      	movs	r2, #34	; 0x22
 8007ac0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68da      	ldr	r2, [r3, #12]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ada:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	695a      	ldr	r2, [r3, #20]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f042 0201 	orr.w	r2, r2, #1
 8007aea:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68da      	ldr	r2, [r3, #12]
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	f042 0220 	orr.w	r2, r2, #32
 8007afa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e000      	b.n	8007b02 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007b00:	2302      	movs	r3, #2
  }
}
 8007b02:	4618      	mov	r0, r3
 8007b04:	3714      	adds	r7, #20
 8007b06:	46bd      	mov	sp, r7
 8007b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0c:	4770      	bx	lr
	...

08007b10 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b088      	sub	sp, #32
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	695b      	ldr	r3, [r3, #20]
 8007b2e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	f003 030f 	and.w	r3, r3, #15
 8007b3e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d10d      	bne.n	8007b62 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	f003 0320 	and.w	r3, r3, #32
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <HAL_UART_IRQHandler+0x52>
 8007b50:	69bb      	ldr	r3, [r7, #24]
 8007b52:	f003 0320 	and.w	r3, r3, #32
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d003      	beq.n	8007b62 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 f996 	bl	8007e8c <UART_Receive_IT>
      return;
 8007b60:	e0d1      	b.n	8007d06 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f000 80b0 	beq.w	8007cca <HAL_UART_IRQHandler+0x1ba>
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d105      	bne.n	8007b80 <HAL_UART_IRQHandler+0x70>
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	f000 80a5 	beq.w	8007cca <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00a      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x90>
 8007b8a:	69bb      	ldr	r3, [r7, #24]
 8007b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d005      	beq.n	8007ba0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b98:	f043 0201 	orr.w	r2, r3, #1
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	f003 0304 	and.w	r3, r3, #4
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <HAL_UART_IRQHandler+0xb0>
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	f003 0301 	and.w	r3, r3, #1
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d005      	beq.n	8007bc0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb8:	f043 0202 	orr.w	r2, r3, #2
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d00a      	beq.n	8007be0 <HAL_UART_IRQHandler+0xd0>
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d005      	beq.n	8007be0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd8:	f043 0204 	orr.w	r2, r3, #4
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007be0:	69fb      	ldr	r3, [r7, #28]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00f      	beq.n	8007c0a <HAL_UART_IRQHandler+0xfa>
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	f003 0320 	and.w	r3, r3, #32
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d104      	bne.n	8007bfe <HAL_UART_IRQHandler+0xee>
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	f003 0301 	and.w	r3, r3, #1
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d005      	beq.n	8007c0a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c02:	f043 0208 	orr.w	r2, r3, #8
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d078      	beq.n	8007d04 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c12:	69fb      	ldr	r3, [r7, #28]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d007      	beq.n	8007c2c <HAL_UART_IRQHandler+0x11c>
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	f003 0320 	and.w	r3, r3, #32
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d002      	beq.n	8007c2c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007c26:	6878      	ldr	r0, [r7, #4]
 8007c28:	f000 f930 	bl	8007e8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c36:	2b40      	cmp	r3, #64	; 0x40
 8007c38:	bf0c      	ite	eq
 8007c3a:	2301      	moveq	r3, #1
 8007c3c:	2300      	movne	r3, #0
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c46:	f003 0308 	and.w	r3, r3, #8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d102      	bne.n	8007c54 <HAL_UART_IRQHandler+0x144>
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d031      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 f879 	bl	8007d4c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	695b      	ldr	r3, [r3, #20]
 8007c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c64:	2b40      	cmp	r3, #64	; 0x40
 8007c66:	d123      	bne.n	8007cb0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	695a      	ldr	r2, [r3, #20]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c76:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d013      	beq.n	8007ca8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c84:	4a21      	ldr	r2, [pc, #132]	; (8007d0c <HAL_UART_IRQHandler+0x1fc>)
 8007c86:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f7fb f8b9 	bl	8002e04 <HAL_DMA_Abort_IT>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d016      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca6:	e00e      	b.n	8007cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f845 	bl	8007d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cae:	e00a      	b.n	8007cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f841 	bl	8007d38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb6:	e006      	b.n	8007cc6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f000 f83d 	bl	8007d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007cc4:	e01e      	b.n	8007d04 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc6:	bf00      	nop
    return;
 8007cc8:	e01c      	b.n	8007d04 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d008      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x1d6>
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d003      	beq.n	8007ce6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 f866 	bl	8007db0 <UART_Transmit_IT>
    return;
 8007ce4:	e00f      	b.n	8007d06 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ce6:	69fb      	ldr	r3, [r7, #28]
 8007ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00a      	beq.n	8007d06 <HAL_UART_IRQHandler+0x1f6>
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d005      	beq.n	8007d06 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f8ae 	bl	8007e5c <UART_EndTransmit_IT>
    return;
 8007d00:	bf00      	nop
 8007d02:	e000      	b.n	8007d06 <HAL_UART_IRQHandler+0x1f6>
    return;
 8007d04:	bf00      	nop
  }
}
 8007d06:	3720      	adds	r7, #32
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	08007d89 	.word	0x08007d89

08007d10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d18:	bf00      	nop
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d2c:	bf00      	nop
 8007d2e:	370c      	adds	r7, #12
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d40:	bf00      	nop
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b083      	sub	sp, #12
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	68da      	ldr	r2, [r3, #12]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d62:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695a      	ldr	r2, [r3, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f022 0201 	bic.w	r2, r2, #1
 8007d72:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2220      	movs	r2, #32
 8007d78:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007d7c:	bf00      	nop
 8007d7e:	370c      	adds	r7, #12
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f7ff ffc8 	bl	8007d38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b085      	sub	sp, #20
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007dbe:	b2db      	uxtb	r3, r3
 8007dc0:	2b21      	cmp	r3, #33	; 0x21
 8007dc2:	d144      	bne.n	8007e4e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dcc:	d11a      	bne.n	8007e04 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	881b      	ldrh	r3, [r3, #0]
 8007dd8:	461a      	mov	r2, r3
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007de2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d105      	bne.n	8007df8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a1b      	ldr	r3, [r3, #32]
 8007df0:	1c9a      	adds	r2, r3, #2
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	621a      	str	r2, [r3, #32]
 8007df6:	e00e      	b.n	8007e16 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6a1b      	ldr	r3, [r3, #32]
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	621a      	str	r2, [r3, #32]
 8007e02:	e008      	b.n	8007e16 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	1c59      	adds	r1, r3, #1
 8007e0a:	687a      	ldr	r2, [r7, #4]
 8007e0c:	6211      	str	r1, [r2, #32]
 8007e0e:	781a      	ldrb	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	b29b      	uxth	r3, r3
 8007e20:	687a      	ldr	r2, [r7, #4]
 8007e22:	4619      	mov	r1, r3
 8007e24:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d10f      	bne.n	8007e4a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	68da      	ldr	r2, [r3, #12]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	68da      	ldr	r2, [r3, #12]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	e000      	b.n	8007e50 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e4e:	2302      	movs	r3, #2
  }
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b082      	sub	sp, #8
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2220      	movs	r2, #32
 8007e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff ff47 	bl	8007d10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e82:	2300      	movs	r3, #0
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	3708      	adds	r7, #8
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	bd80      	pop	{r7, pc}

08007e8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b084      	sub	sp, #16
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	2b22      	cmp	r3, #34	; 0x22
 8007e9e:	d171      	bne.n	8007f84 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea8:	d123      	bne.n	8007ef2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eae:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10e      	bne.n	8007ed6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec4:	b29a      	uxth	r2, r3
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ece:	1c9a      	adds	r2, r3, #2
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	629a      	str	r2, [r3, #40]	; 0x28
 8007ed4:	e029      	b.n	8007f2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	b29a      	uxth	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eea:	1c5a      	adds	r2, r3, #1
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	629a      	str	r2, [r3, #40]	; 0x28
 8007ef0:	e01b      	b.n	8007f2a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	691b      	ldr	r3, [r3, #16]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d10a      	bne.n	8007f10 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	6858      	ldr	r0, [r3, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f04:	1c59      	adds	r1, r3, #1
 8007f06:	687a      	ldr	r2, [r7, #4]
 8007f08:	6291      	str	r1, [r2, #40]	; 0x28
 8007f0a:	b2c2      	uxtb	r2, r0
 8007f0c:	701a      	strb	r2, [r3, #0]
 8007f0e:	e00c      	b.n	8007f2a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	685b      	ldr	r3, [r3, #4]
 8007f16:	b2da      	uxtb	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1c:	1c58      	adds	r0, r3, #1
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	6288      	str	r0, [r1, #40]	; 0x28
 8007f22:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f26:	b2d2      	uxtb	r2, r2
 8007f28:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f2e:	b29b      	uxth	r3, r3
 8007f30:	3b01      	subs	r3, #1
 8007f32:	b29b      	uxth	r3, r3
 8007f34:	687a      	ldr	r2, [r7, #4]
 8007f36:	4619      	mov	r1, r3
 8007f38:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d120      	bne.n	8007f80 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0220 	bic.w	r2, r2, #32
 8007f4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	68da      	ldr	r2, [r3, #12]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	695a      	ldr	r2, [r3, #20]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff fed4 	bl	8007d24 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e002      	b.n	8007f86 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	e000      	b.n	8007f86 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007f84:	2302      	movs	r3, #2
  }
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
	...

08007f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f94:	b085      	sub	sp, #20
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	691b      	ldr	r3, [r3, #16]
 8007fa0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68da      	ldr	r2, [r3, #12]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	430a      	orrs	r2, r1
 8007fae:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	431a      	orrs	r2, r3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	431a      	orrs	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	69db      	ldr	r3, [r3, #28]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007fd2:	f023 030c 	bic.w	r3, r3, #12
 8007fd6:	687a      	ldr	r2, [r7, #4]
 8007fd8:	6812      	ldr	r2, [r2, #0]
 8007fda:	68f9      	ldr	r1, [r7, #12]
 8007fdc:	430b      	orrs	r3, r1
 8007fde:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	695b      	ldr	r3, [r3, #20]
 8007fe6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	699a      	ldr	r2, [r3, #24]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	430a      	orrs	r2, r1
 8007ff4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ffe:	f040 818b 	bne.w	8008318 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4ac1      	ldr	r2, [pc, #772]	; (800830c <UART_SetConfig+0x37c>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d005      	beq.n	8008018 <UART_SetConfig+0x88>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4abf      	ldr	r2, [pc, #764]	; (8008310 <UART_SetConfig+0x380>)
 8008012:	4293      	cmp	r3, r2
 8008014:	f040 80bd 	bne.w	8008192 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008018:	f7fd f89c 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 800801c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	461d      	mov	r5, r3
 8008022:	f04f 0600 	mov.w	r6, #0
 8008026:	46a8      	mov	r8, r5
 8008028:	46b1      	mov	r9, r6
 800802a:	eb18 0308 	adds.w	r3, r8, r8
 800802e:	eb49 0409 	adc.w	r4, r9, r9
 8008032:	4698      	mov	r8, r3
 8008034:	46a1      	mov	r9, r4
 8008036:	eb18 0805 	adds.w	r8, r8, r5
 800803a:	eb49 0906 	adc.w	r9, r9, r6
 800803e:	f04f 0100 	mov.w	r1, #0
 8008042:	f04f 0200 	mov.w	r2, #0
 8008046:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800804a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800804e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008052:	4688      	mov	r8, r1
 8008054:	4691      	mov	r9, r2
 8008056:	eb18 0005 	adds.w	r0, r8, r5
 800805a:	eb49 0106 	adc.w	r1, r9, r6
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	461d      	mov	r5, r3
 8008064:	f04f 0600 	mov.w	r6, #0
 8008068:	196b      	adds	r3, r5, r5
 800806a:	eb46 0406 	adc.w	r4, r6, r6
 800806e:	461a      	mov	r2, r3
 8008070:	4623      	mov	r3, r4
 8008072:	f7f8 fe09 	bl	8000c88 <__aeabi_uldivmod>
 8008076:	4603      	mov	r3, r0
 8008078:	460c      	mov	r4, r1
 800807a:	461a      	mov	r2, r3
 800807c:	4ba5      	ldr	r3, [pc, #660]	; (8008314 <UART_SetConfig+0x384>)
 800807e:	fba3 2302 	umull	r2, r3, r3, r2
 8008082:	095b      	lsrs	r3, r3, #5
 8008084:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	461d      	mov	r5, r3
 800808c:	f04f 0600 	mov.w	r6, #0
 8008090:	46a9      	mov	r9, r5
 8008092:	46b2      	mov	sl, r6
 8008094:	eb19 0309 	adds.w	r3, r9, r9
 8008098:	eb4a 040a 	adc.w	r4, sl, sl
 800809c:	4699      	mov	r9, r3
 800809e:	46a2      	mov	sl, r4
 80080a0:	eb19 0905 	adds.w	r9, r9, r5
 80080a4:	eb4a 0a06 	adc.w	sl, sl, r6
 80080a8:	f04f 0100 	mov.w	r1, #0
 80080ac:	f04f 0200 	mov.w	r2, #0
 80080b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080b4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080b8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080bc:	4689      	mov	r9, r1
 80080be:	4692      	mov	sl, r2
 80080c0:	eb19 0005 	adds.w	r0, r9, r5
 80080c4:	eb4a 0106 	adc.w	r1, sl, r6
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	461d      	mov	r5, r3
 80080ce:	f04f 0600 	mov.w	r6, #0
 80080d2:	196b      	adds	r3, r5, r5
 80080d4:	eb46 0406 	adc.w	r4, r6, r6
 80080d8:	461a      	mov	r2, r3
 80080da:	4623      	mov	r3, r4
 80080dc:	f7f8 fdd4 	bl	8000c88 <__aeabi_uldivmod>
 80080e0:	4603      	mov	r3, r0
 80080e2:	460c      	mov	r4, r1
 80080e4:	461a      	mov	r2, r3
 80080e6:	4b8b      	ldr	r3, [pc, #556]	; (8008314 <UART_SetConfig+0x384>)
 80080e8:	fba3 1302 	umull	r1, r3, r3, r2
 80080ec:	095b      	lsrs	r3, r3, #5
 80080ee:	2164      	movs	r1, #100	; 0x64
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	3332      	adds	r3, #50	; 0x32
 80080fa:	4a86      	ldr	r2, [pc, #536]	; (8008314 <UART_SetConfig+0x384>)
 80080fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	005b      	lsls	r3, r3, #1
 8008104:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008108:	4498      	add	r8, r3
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	461d      	mov	r5, r3
 800810e:	f04f 0600 	mov.w	r6, #0
 8008112:	46a9      	mov	r9, r5
 8008114:	46b2      	mov	sl, r6
 8008116:	eb19 0309 	adds.w	r3, r9, r9
 800811a:	eb4a 040a 	adc.w	r4, sl, sl
 800811e:	4699      	mov	r9, r3
 8008120:	46a2      	mov	sl, r4
 8008122:	eb19 0905 	adds.w	r9, r9, r5
 8008126:	eb4a 0a06 	adc.w	sl, sl, r6
 800812a:	f04f 0100 	mov.w	r1, #0
 800812e:	f04f 0200 	mov.w	r2, #0
 8008132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008136:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800813a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800813e:	4689      	mov	r9, r1
 8008140:	4692      	mov	sl, r2
 8008142:	eb19 0005 	adds.w	r0, r9, r5
 8008146:	eb4a 0106 	adc.w	r1, sl, r6
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	461d      	mov	r5, r3
 8008150:	f04f 0600 	mov.w	r6, #0
 8008154:	196b      	adds	r3, r5, r5
 8008156:	eb46 0406 	adc.w	r4, r6, r6
 800815a:	461a      	mov	r2, r3
 800815c:	4623      	mov	r3, r4
 800815e:	f7f8 fd93 	bl	8000c88 <__aeabi_uldivmod>
 8008162:	4603      	mov	r3, r0
 8008164:	460c      	mov	r4, r1
 8008166:	461a      	mov	r2, r3
 8008168:	4b6a      	ldr	r3, [pc, #424]	; (8008314 <UART_SetConfig+0x384>)
 800816a:	fba3 1302 	umull	r1, r3, r3, r2
 800816e:	095b      	lsrs	r3, r3, #5
 8008170:	2164      	movs	r1, #100	; 0x64
 8008172:	fb01 f303 	mul.w	r3, r1, r3
 8008176:	1ad3      	subs	r3, r2, r3
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	3332      	adds	r3, #50	; 0x32
 800817c:	4a65      	ldr	r2, [pc, #404]	; (8008314 <UART_SetConfig+0x384>)
 800817e:	fba2 2303 	umull	r2, r3, r2, r3
 8008182:	095b      	lsrs	r3, r3, #5
 8008184:	f003 0207 	and.w	r2, r3, #7
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4442      	add	r2, r8
 800818e:	609a      	str	r2, [r3, #8]
 8008190:	e26f      	b.n	8008672 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008192:	f7fc ffcb 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 8008196:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	461d      	mov	r5, r3
 800819c:	f04f 0600 	mov.w	r6, #0
 80081a0:	46a8      	mov	r8, r5
 80081a2:	46b1      	mov	r9, r6
 80081a4:	eb18 0308 	adds.w	r3, r8, r8
 80081a8:	eb49 0409 	adc.w	r4, r9, r9
 80081ac:	4698      	mov	r8, r3
 80081ae:	46a1      	mov	r9, r4
 80081b0:	eb18 0805 	adds.w	r8, r8, r5
 80081b4:	eb49 0906 	adc.w	r9, r9, r6
 80081b8:	f04f 0100 	mov.w	r1, #0
 80081bc:	f04f 0200 	mov.w	r2, #0
 80081c0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081c4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081c8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081cc:	4688      	mov	r8, r1
 80081ce:	4691      	mov	r9, r2
 80081d0:	eb18 0005 	adds.w	r0, r8, r5
 80081d4:	eb49 0106 	adc.w	r1, r9, r6
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	685b      	ldr	r3, [r3, #4]
 80081dc:	461d      	mov	r5, r3
 80081de:	f04f 0600 	mov.w	r6, #0
 80081e2:	196b      	adds	r3, r5, r5
 80081e4:	eb46 0406 	adc.w	r4, r6, r6
 80081e8:	461a      	mov	r2, r3
 80081ea:	4623      	mov	r3, r4
 80081ec:	f7f8 fd4c 	bl	8000c88 <__aeabi_uldivmod>
 80081f0:	4603      	mov	r3, r0
 80081f2:	460c      	mov	r4, r1
 80081f4:	461a      	mov	r2, r3
 80081f6:	4b47      	ldr	r3, [pc, #284]	; (8008314 <UART_SetConfig+0x384>)
 80081f8:	fba3 2302 	umull	r2, r3, r3, r2
 80081fc:	095b      	lsrs	r3, r3, #5
 80081fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	461d      	mov	r5, r3
 8008206:	f04f 0600 	mov.w	r6, #0
 800820a:	46a9      	mov	r9, r5
 800820c:	46b2      	mov	sl, r6
 800820e:	eb19 0309 	adds.w	r3, r9, r9
 8008212:	eb4a 040a 	adc.w	r4, sl, sl
 8008216:	4699      	mov	r9, r3
 8008218:	46a2      	mov	sl, r4
 800821a:	eb19 0905 	adds.w	r9, r9, r5
 800821e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008222:	f04f 0100 	mov.w	r1, #0
 8008226:	f04f 0200 	mov.w	r2, #0
 800822a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800822e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008232:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008236:	4689      	mov	r9, r1
 8008238:	4692      	mov	sl, r2
 800823a:	eb19 0005 	adds.w	r0, r9, r5
 800823e:	eb4a 0106 	adc.w	r1, sl, r6
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	685b      	ldr	r3, [r3, #4]
 8008246:	461d      	mov	r5, r3
 8008248:	f04f 0600 	mov.w	r6, #0
 800824c:	196b      	adds	r3, r5, r5
 800824e:	eb46 0406 	adc.w	r4, r6, r6
 8008252:	461a      	mov	r2, r3
 8008254:	4623      	mov	r3, r4
 8008256:	f7f8 fd17 	bl	8000c88 <__aeabi_uldivmod>
 800825a:	4603      	mov	r3, r0
 800825c:	460c      	mov	r4, r1
 800825e:	461a      	mov	r2, r3
 8008260:	4b2c      	ldr	r3, [pc, #176]	; (8008314 <UART_SetConfig+0x384>)
 8008262:	fba3 1302 	umull	r1, r3, r3, r2
 8008266:	095b      	lsrs	r3, r3, #5
 8008268:	2164      	movs	r1, #100	; 0x64
 800826a:	fb01 f303 	mul.w	r3, r1, r3
 800826e:	1ad3      	subs	r3, r2, r3
 8008270:	00db      	lsls	r3, r3, #3
 8008272:	3332      	adds	r3, #50	; 0x32
 8008274:	4a27      	ldr	r2, [pc, #156]	; (8008314 <UART_SetConfig+0x384>)
 8008276:	fba2 2303 	umull	r2, r3, r2, r3
 800827a:	095b      	lsrs	r3, r3, #5
 800827c:	005b      	lsls	r3, r3, #1
 800827e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008282:	4498      	add	r8, r3
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	461d      	mov	r5, r3
 8008288:	f04f 0600 	mov.w	r6, #0
 800828c:	46a9      	mov	r9, r5
 800828e:	46b2      	mov	sl, r6
 8008290:	eb19 0309 	adds.w	r3, r9, r9
 8008294:	eb4a 040a 	adc.w	r4, sl, sl
 8008298:	4699      	mov	r9, r3
 800829a:	46a2      	mov	sl, r4
 800829c:	eb19 0905 	adds.w	r9, r9, r5
 80082a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80082a4:	f04f 0100 	mov.w	r1, #0
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082b8:	4689      	mov	r9, r1
 80082ba:	4692      	mov	sl, r2
 80082bc:	eb19 0005 	adds.w	r0, r9, r5
 80082c0:	eb4a 0106 	adc.w	r1, sl, r6
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	461d      	mov	r5, r3
 80082ca:	f04f 0600 	mov.w	r6, #0
 80082ce:	196b      	adds	r3, r5, r5
 80082d0:	eb46 0406 	adc.w	r4, r6, r6
 80082d4:	461a      	mov	r2, r3
 80082d6:	4623      	mov	r3, r4
 80082d8:	f7f8 fcd6 	bl	8000c88 <__aeabi_uldivmod>
 80082dc:	4603      	mov	r3, r0
 80082de:	460c      	mov	r4, r1
 80082e0:	461a      	mov	r2, r3
 80082e2:	4b0c      	ldr	r3, [pc, #48]	; (8008314 <UART_SetConfig+0x384>)
 80082e4:	fba3 1302 	umull	r1, r3, r3, r2
 80082e8:	095b      	lsrs	r3, r3, #5
 80082ea:	2164      	movs	r1, #100	; 0x64
 80082ec:	fb01 f303 	mul.w	r3, r1, r3
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	00db      	lsls	r3, r3, #3
 80082f4:	3332      	adds	r3, #50	; 0x32
 80082f6:	4a07      	ldr	r2, [pc, #28]	; (8008314 <UART_SetConfig+0x384>)
 80082f8:	fba2 2303 	umull	r2, r3, r2, r3
 80082fc:	095b      	lsrs	r3, r3, #5
 80082fe:	f003 0207 	and.w	r2, r3, #7
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4442      	add	r2, r8
 8008308:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800830a:	e1b2      	b.n	8008672 <UART_SetConfig+0x6e2>
 800830c:	40011000 	.word	0x40011000
 8008310:	40011400 	.word	0x40011400
 8008314:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4ad7      	ldr	r2, [pc, #860]	; (800867c <UART_SetConfig+0x6ec>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d005      	beq.n	800832e <UART_SetConfig+0x39e>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4ad6      	ldr	r2, [pc, #856]	; (8008680 <UART_SetConfig+0x6f0>)
 8008328:	4293      	cmp	r3, r2
 800832a:	f040 80d1 	bne.w	80084d0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800832e:	f7fc ff11 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 8008332:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	469a      	mov	sl, r3
 8008338:	f04f 0b00 	mov.w	fp, #0
 800833c:	46d0      	mov	r8, sl
 800833e:	46d9      	mov	r9, fp
 8008340:	eb18 0308 	adds.w	r3, r8, r8
 8008344:	eb49 0409 	adc.w	r4, r9, r9
 8008348:	4698      	mov	r8, r3
 800834a:	46a1      	mov	r9, r4
 800834c:	eb18 080a 	adds.w	r8, r8, sl
 8008350:	eb49 090b 	adc.w	r9, r9, fp
 8008354:	f04f 0100 	mov.w	r1, #0
 8008358:	f04f 0200 	mov.w	r2, #0
 800835c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008360:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008364:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008368:	4688      	mov	r8, r1
 800836a:	4691      	mov	r9, r2
 800836c:	eb1a 0508 	adds.w	r5, sl, r8
 8008370:	eb4b 0609 	adc.w	r6, fp, r9
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	4619      	mov	r1, r3
 800837a:	f04f 0200 	mov.w	r2, #0
 800837e:	f04f 0300 	mov.w	r3, #0
 8008382:	f04f 0400 	mov.w	r4, #0
 8008386:	0094      	lsls	r4, r2, #2
 8008388:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800838c:	008b      	lsls	r3, r1, #2
 800838e:	461a      	mov	r2, r3
 8008390:	4623      	mov	r3, r4
 8008392:	4628      	mov	r0, r5
 8008394:	4631      	mov	r1, r6
 8008396:	f7f8 fc77 	bl	8000c88 <__aeabi_uldivmod>
 800839a:	4603      	mov	r3, r0
 800839c:	460c      	mov	r4, r1
 800839e:	461a      	mov	r2, r3
 80083a0:	4bb8      	ldr	r3, [pc, #736]	; (8008684 <UART_SetConfig+0x6f4>)
 80083a2:	fba3 2302 	umull	r2, r3, r3, r2
 80083a6:	095b      	lsrs	r3, r3, #5
 80083a8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	469b      	mov	fp, r3
 80083b0:	f04f 0c00 	mov.w	ip, #0
 80083b4:	46d9      	mov	r9, fp
 80083b6:	46e2      	mov	sl, ip
 80083b8:	eb19 0309 	adds.w	r3, r9, r9
 80083bc:	eb4a 040a 	adc.w	r4, sl, sl
 80083c0:	4699      	mov	r9, r3
 80083c2:	46a2      	mov	sl, r4
 80083c4:	eb19 090b 	adds.w	r9, r9, fp
 80083c8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083cc:	f04f 0100 	mov.w	r1, #0
 80083d0:	f04f 0200 	mov.w	r2, #0
 80083d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083d8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083dc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083e0:	4689      	mov	r9, r1
 80083e2:	4692      	mov	sl, r2
 80083e4:	eb1b 0509 	adds.w	r5, fp, r9
 80083e8:	eb4c 060a 	adc.w	r6, ip, sl
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	4619      	mov	r1, r3
 80083f2:	f04f 0200 	mov.w	r2, #0
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	f04f 0400 	mov.w	r4, #0
 80083fe:	0094      	lsls	r4, r2, #2
 8008400:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008404:	008b      	lsls	r3, r1, #2
 8008406:	461a      	mov	r2, r3
 8008408:	4623      	mov	r3, r4
 800840a:	4628      	mov	r0, r5
 800840c:	4631      	mov	r1, r6
 800840e:	f7f8 fc3b 	bl	8000c88 <__aeabi_uldivmod>
 8008412:	4603      	mov	r3, r0
 8008414:	460c      	mov	r4, r1
 8008416:	461a      	mov	r2, r3
 8008418:	4b9a      	ldr	r3, [pc, #616]	; (8008684 <UART_SetConfig+0x6f4>)
 800841a:	fba3 1302 	umull	r1, r3, r3, r2
 800841e:	095b      	lsrs	r3, r3, #5
 8008420:	2164      	movs	r1, #100	; 0x64
 8008422:	fb01 f303 	mul.w	r3, r1, r3
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	011b      	lsls	r3, r3, #4
 800842a:	3332      	adds	r3, #50	; 0x32
 800842c:	4a95      	ldr	r2, [pc, #596]	; (8008684 <UART_SetConfig+0x6f4>)
 800842e:	fba2 2303 	umull	r2, r3, r2, r3
 8008432:	095b      	lsrs	r3, r3, #5
 8008434:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008438:	4498      	add	r8, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	469b      	mov	fp, r3
 800843e:	f04f 0c00 	mov.w	ip, #0
 8008442:	46d9      	mov	r9, fp
 8008444:	46e2      	mov	sl, ip
 8008446:	eb19 0309 	adds.w	r3, r9, r9
 800844a:	eb4a 040a 	adc.w	r4, sl, sl
 800844e:	4699      	mov	r9, r3
 8008450:	46a2      	mov	sl, r4
 8008452:	eb19 090b 	adds.w	r9, r9, fp
 8008456:	eb4a 0a0c 	adc.w	sl, sl, ip
 800845a:	f04f 0100 	mov.w	r1, #0
 800845e:	f04f 0200 	mov.w	r2, #0
 8008462:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008466:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800846a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800846e:	4689      	mov	r9, r1
 8008470:	4692      	mov	sl, r2
 8008472:	eb1b 0509 	adds.w	r5, fp, r9
 8008476:	eb4c 060a 	adc.w	r6, ip, sl
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	4619      	mov	r1, r3
 8008480:	f04f 0200 	mov.w	r2, #0
 8008484:	f04f 0300 	mov.w	r3, #0
 8008488:	f04f 0400 	mov.w	r4, #0
 800848c:	0094      	lsls	r4, r2, #2
 800848e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008492:	008b      	lsls	r3, r1, #2
 8008494:	461a      	mov	r2, r3
 8008496:	4623      	mov	r3, r4
 8008498:	4628      	mov	r0, r5
 800849a:	4631      	mov	r1, r6
 800849c:	f7f8 fbf4 	bl	8000c88 <__aeabi_uldivmod>
 80084a0:	4603      	mov	r3, r0
 80084a2:	460c      	mov	r4, r1
 80084a4:	461a      	mov	r2, r3
 80084a6:	4b77      	ldr	r3, [pc, #476]	; (8008684 <UART_SetConfig+0x6f4>)
 80084a8:	fba3 1302 	umull	r1, r3, r3, r2
 80084ac:	095b      	lsrs	r3, r3, #5
 80084ae:	2164      	movs	r1, #100	; 0x64
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	3332      	adds	r3, #50	; 0x32
 80084ba:	4a72      	ldr	r2, [pc, #456]	; (8008684 <UART_SetConfig+0x6f4>)
 80084bc:	fba2 2303 	umull	r2, r3, r2, r3
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	f003 020f 	and.w	r2, r3, #15
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4442      	add	r2, r8
 80084cc:	609a      	str	r2, [r3, #8]
 80084ce:	e0d0      	b.n	8008672 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80084d0:	f7fc fe2c 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 80084d4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	469a      	mov	sl, r3
 80084da:	f04f 0b00 	mov.w	fp, #0
 80084de:	46d0      	mov	r8, sl
 80084e0:	46d9      	mov	r9, fp
 80084e2:	eb18 0308 	adds.w	r3, r8, r8
 80084e6:	eb49 0409 	adc.w	r4, r9, r9
 80084ea:	4698      	mov	r8, r3
 80084ec:	46a1      	mov	r9, r4
 80084ee:	eb18 080a 	adds.w	r8, r8, sl
 80084f2:	eb49 090b 	adc.w	r9, r9, fp
 80084f6:	f04f 0100 	mov.w	r1, #0
 80084fa:	f04f 0200 	mov.w	r2, #0
 80084fe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008502:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008506:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800850a:	4688      	mov	r8, r1
 800850c:	4691      	mov	r9, r2
 800850e:	eb1a 0508 	adds.w	r5, sl, r8
 8008512:	eb4b 0609 	adc.w	r6, fp, r9
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	4619      	mov	r1, r3
 800851c:	f04f 0200 	mov.w	r2, #0
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	f04f 0400 	mov.w	r4, #0
 8008528:	0094      	lsls	r4, r2, #2
 800852a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800852e:	008b      	lsls	r3, r1, #2
 8008530:	461a      	mov	r2, r3
 8008532:	4623      	mov	r3, r4
 8008534:	4628      	mov	r0, r5
 8008536:	4631      	mov	r1, r6
 8008538:	f7f8 fba6 	bl	8000c88 <__aeabi_uldivmod>
 800853c:	4603      	mov	r3, r0
 800853e:	460c      	mov	r4, r1
 8008540:	461a      	mov	r2, r3
 8008542:	4b50      	ldr	r3, [pc, #320]	; (8008684 <UART_SetConfig+0x6f4>)
 8008544:	fba3 2302 	umull	r2, r3, r3, r2
 8008548:	095b      	lsrs	r3, r3, #5
 800854a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	469b      	mov	fp, r3
 8008552:	f04f 0c00 	mov.w	ip, #0
 8008556:	46d9      	mov	r9, fp
 8008558:	46e2      	mov	sl, ip
 800855a:	eb19 0309 	adds.w	r3, r9, r9
 800855e:	eb4a 040a 	adc.w	r4, sl, sl
 8008562:	4699      	mov	r9, r3
 8008564:	46a2      	mov	sl, r4
 8008566:	eb19 090b 	adds.w	r9, r9, fp
 800856a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800856e:	f04f 0100 	mov.w	r1, #0
 8008572:	f04f 0200 	mov.w	r2, #0
 8008576:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800857a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800857e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008582:	4689      	mov	r9, r1
 8008584:	4692      	mov	sl, r2
 8008586:	eb1b 0509 	adds.w	r5, fp, r9
 800858a:	eb4c 060a 	adc.w	r6, ip, sl
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	4619      	mov	r1, r3
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 0300 	mov.w	r3, #0
 800859c:	f04f 0400 	mov.w	r4, #0
 80085a0:	0094      	lsls	r4, r2, #2
 80085a2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80085a6:	008b      	lsls	r3, r1, #2
 80085a8:	461a      	mov	r2, r3
 80085aa:	4623      	mov	r3, r4
 80085ac:	4628      	mov	r0, r5
 80085ae:	4631      	mov	r1, r6
 80085b0:	f7f8 fb6a 	bl	8000c88 <__aeabi_uldivmod>
 80085b4:	4603      	mov	r3, r0
 80085b6:	460c      	mov	r4, r1
 80085b8:	461a      	mov	r2, r3
 80085ba:	4b32      	ldr	r3, [pc, #200]	; (8008684 <UART_SetConfig+0x6f4>)
 80085bc:	fba3 1302 	umull	r1, r3, r3, r2
 80085c0:	095b      	lsrs	r3, r3, #5
 80085c2:	2164      	movs	r1, #100	; 0x64
 80085c4:	fb01 f303 	mul.w	r3, r1, r3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	3332      	adds	r3, #50	; 0x32
 80085ce:	4a2d      	ldr	r2, [pc, #180]	; (8008684 <UART_SetConfig+0x6f4>)
 80085d0:	fba2 2303 	umull	r2, r3, r2, r3
 80085d4:	095b      	lsrs	r3, r3, #5
 80085d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085da:	4498      	add	r8, r3
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	469b      	mov	fp, r3
 80085e0:	f04f 0c00 	mov.w	ip, #0
 80085e4:	46d9      	mov	r9, fp
 80085e6:	46e2      	mov	sl, ip
 80085e8:	eb19 0309 	adds.w	r3, r9, r9
 80085ec:	eb4a 040a 	adc.w	r4, sl, sl
 80085f0:	4699      	mov	r9, r3
 80085f2:	46a2      	mov	sl, r4
 80085f4:	eb19 090b 	adds.w	r9, r9, fp
 80085f8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80085fc:	f04f 0100 	mov.w	r1, #0
 8008600:	f04f 0200 	mov.w	r2, #0
 8008604:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008608:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800860c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008610:	4689      	mov	r9, r1
 8008612:	4692      	mov	sl, r2
 8008614:	eb1b 0509 	adds.w	r5, fp, r9
 8008618:	eb4c 060a 	adc.w	r6, ip, sl
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	4619      	mov	r1, r3
 8008622:	f04f 0200 	mov.w	r2, #0
 8008626:	f04f 0300 	mov.w	r3, #0
 800862a:	f04f 0400 	mov.w	r4, #0
 800862e:	0094      	lsls	r4, r2, #2
 8008630:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008634:	008b      	lsls	r3, r1, #2
 8008636:	461a      	mov	r2, r3
 8008638:	4623      	mov	r3, r4
 800863a:	4628      	mov	r0, r5
 800863c:	4631      	mov	r1, r6
 800863e:	f7f8 fb23 	bl	8000c88 <__aeabi_uldivmod>
 8008642:	4603      	mov	r3, r0
 8008644:	460c      	mov	r4, r1
 8008646:	461a      	mov	r2, r3
 8008648:	4b0e      	ldr	r3, [pc, #56]	; (8008684 <UART_SetConfig+0x6f4>)
 800864a:	fba3 1302 	umull	r1, r3, r3, r2
 800864e:	095b      	lsrs	r3, r3, #5
 8008650:	2164      	movs	r1, #100	; 0x64
 8008652:	fb01 f303 	mul.w	r3, r1, r3
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	3332      	adds	r3, #50	; 0x32
 800865c:	4a09      	ldr	r2, [pc, #36]	; (8008684 <UART_SetConfig+0x6f4>)
 800865e:	fba2 2303 	umull	r2, r3, r2, r3
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	f003 020f 	and.w	r2, r3, #15
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4442      	add	r2, r8
 800866e:	609a      	str	r2, [r3, #8]
}
 8008670:	e7ff      	b.n	8008672 <UART_SetConfig+0x6e2>
 8008672:	bf00      	nop
 8008674:	3714      	adds	r7, #20
 8008676:	46bd      	mov	sp, r7
 8008678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800867c:	40011000 	.word	0x40011000
 8008680:	40011400 	.word	0x40011400
 8008684:	51eb851f 	.word	0x51eb851f

08008688 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008688:	b084      	sub	sp, #16
 800868a:	b580      	push	{r7, lr}
 800868c:	b084      	sub	sp, #16
 800868e:	af00      	add	r7, sp, #0
 8008690:	6078      	str	r0, [r7, #4]
 8008692:	f107 001c 	add.w	r0, r7, #28
 8008696:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800869a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800869c:	2b01      	cmp	r3, #1
 800869e:	d122      	bne.n	80086e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	68db      	ldr	r3, [r3, #12]
 80086c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d105      	bne.n	80086da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fa5c 	bl	8008b98 <USB_CoreReset>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73fb      	strb	r3, [r7, #15]
 80086e4:	e01a      	b.n	800871c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	68db      	ldr	r3, [r3, #12]
 80086ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa50 	bl	8008b98 <USB_CoreReset>
 80086f8:	4603      	mov	r3, r0
 80086fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	639a      	str	r2, [r3, #56]	; 0x38
 800870e:	e005      	b.n	800871c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800871c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871e:	2b01      	cmp	r3, #1
 8008720:	d10b      	bne.n	800873a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	f043 0206 	orr.w	r2, r3, #6
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	689b      	ldr	r3, [r3, #8]
 8008732:	f043 0220 	orr.w	r2, r3, #32
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800873a:	7bfb      	ldrb	r3, [r7, #15]
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008746:	b004      	add	sp, #16
 8008748:	4770      	bx	lr

0800874a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800874a:	b480      	push	{r7}
 800874c:	b083      	sub	sp, #12
 800874e:	af00      	add	r7, sp, #0
 8008750:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f023 0201 	bic.w	r2, r3, #1
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	370c      	adds	r7, #12
 8008764:	46bd      	mov	sp, r7
 8008766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876a:	4770      	bx	lr

0800876c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008784:	78fb      	ldrb	r3, [r7, #3]
 8008786:	2b01      	cmp	r3, #1
 8008788:	d106      	bne.n	8008798 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	68db      	ldr	r3, [r3, #12]
 800878e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	60da      	str	r2, [r3, #12]
 8008796:	e00b      	b.n	80087b0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008798:	78fb      	ldrb	r3, [r7, #3]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d106      	bne.n	80087ac <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	60da      	str	r2, [r3, #12]
 80087aa:	e001      	b.n	80087b0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e003      	b.n	80087b8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80087b0:	2032      	movs	r0, #50	; 0x32
 80087b2:	f7f8 fc5b 	bl	800106c <HAL_Delay>

  return HAL_OK;
 80087b6:	2300      	movs	r3, #0
}
 80087b8:	4618      	mov	r0, r3
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087c0:	b084      	sub	sp, #16
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b086      	sub	sp, #24
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
 80087ca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087d2:	2300      	movs	r3, #0
 80087d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087da:	2300      	movs	r3, #0
 80087dc:	613b      	str	r3, [r7, #16]
 80087de:	e009      	b.n	80087f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	3340      	adds	r3, #64	; 0x40
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	2200      	movs	r2, #0
 80087ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	3301      	adds	r3, #1
 80087f2:	613b      	str	r3, [r7, #16]
 80087f4:	693b      	ldr	r3, [r7, #16]
 80087f6:	2b0e      	cmp	r3, #14
 80087f8:	d9f2      	bls.n	80087e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d112      	bne.n	8008826 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008810:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800881c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	639a      	str	r2, [r3, #56]	; 0x38
 8008824:	e00b      	b.n	800883e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008836:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008844:	461a      	mov	r2, r3
 8008846:	2300      	movs	r3, #0
 8008848:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008850:	4619      	mov	r1, r3
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008858:	461a      	mov	r2, r3
 800885a:	680b      	ldr	r3, [r1, #0]
 800885c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800885e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008860:	2b01      	cmp	r3, #1
 8008862:	d10c      	bne.n	800887e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008866:	2b00      	cmp	r3, #0
 8008868:	d104      	bne.n	8008874 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800886a:	2100      	movs	r1, #0
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f961 	bl	8008b34 <USB_SetDevSpeed>
 8008872:	e008      	b.n	8008886 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008874:	2101      	movs	r1, #1
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 f95c 	bl	8008b34 <USB_SetDevSpeed>
 800887c:	e003      	b.n	8008886 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800887e:	2103      	movs	r1, #3
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f957 	bl	8008b34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008886:	2110      	movs	r1, #16
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 f90b 	bl	8008aa4 <USB_FlushTxFifo>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8008894:	2301      	movs	r3, #1
 8008896:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 f929 	bl	8008af0 <USB_FlushRxFifo>
 800889e:	4603      	mov	r3, r0
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d001      	beq.n	80088a8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ae:	461a      	mov	r2, r3
 80088b0:	2300      	movs	r3, #0
 80088b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ba:	461a      	mov	r2, r3
 80088bc:	2300      	movs	r3, #0
 80088be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c6:	461a      	mov	r2, r3
 80088c8:	2300      	movs	r3, #0
 80088ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088cc:	2300      	movs	r3, #0
 80088ce:	613b      	str	r3, [r7, #16]
 80088d0:	e043      	b.n	800895a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	015a      	lsls	r2, r3, #5
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	4413      	add	r3, r2
 80088da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088e8:	d118      	bne.n	800891c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d10a      	bne.n	8008906 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	015a      	lsls	r2, r3, #5
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	4413      	add	r3, r2
 80088f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088fc:	461a      	mov	r2, r3
 80088fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008902:	6013      	str	r3, [r2, #0]
 8008904:	e013      	b.n	800892e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	015a      	lsls	r2, r3, #5
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	4413      	add	r3, r2
 800890e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008912:	461a      	mov	r2, r3
 8008914:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	e008      	b.n	800892e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	015a      	lsls	r2, r3, #5
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	4413      	add	r3, r2
 8008924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008928:	461a      	mov	r2, r3
 800892a:	2300      	movs	r3, #0
 800892c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	015a      	lsls	r2, r3, #5
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	4413      	add	r3, r2
 8008936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800893a:	461a      	mov	r2, r3
 800893c:	2300      	movs	r3, #0
 800893e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	015a      	lsls	r2, r3, #5
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	4413      	add	r3, r2
 8008948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800894c:	461a      	mov	r2, r3
 800894e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008952:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	3301      	adds	r3, #1
 8008958:	613b      	str	r3, [r7, #16]
 800895a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895c:	693a      	ldr	r2, [r7, #16]
 800895e:	429a      	cmp	r2, r3
 8008960:	d3b7      	bcc.n	80088d2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008962:	2300      	movs	r3, #0
 8008964:	613b      	str	r3, [r7, #16]
 8008966:	e043      	b.n	80089f0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008968:	693b      	ldr	r3, [r7, #16]
 800896a:	015a      	lsls	r2, r3, #5
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4413      	add	r3, r2
 8008970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800897a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800897e:	d118      	bne.n	80089b2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d10a      	bne.n	800899c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	015a      	lsls	r2, r3, #5
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	4413      	add	r3, r2
 800898e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008992:	461a      	mov	r2, r3
 8008994:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008998:	6013      	str	r3, [r2, #0]
 800899a:	e013      	b.n	80089c4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	015a      	lsls	r2, r3, #5
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a8:	461a      	mov	r2, r3
 80089aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089ae:	6013      	str	r3, [r2, #0]
 80089b0:	e008      	b.n	80089c4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089be:	461a      	mov	r2, r3
 80089c0:	2300      	movs	r3, #0
 80089c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	015a      	lsls	r2, r3, #5
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d0:	461a      	mov	r2, r3
 80089d2:	2300      	movs	r3, #0
 80089d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	015a      	lsls	r2, r3, #5
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	4413      	add	r3, r2
 80089de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e2:	461a      	mov	r2, r3
 80089e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	3301      	adds	r3, #1
 80089ee:	613b      	str	r3, [r7, #16]
 80089f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f2:	693a      	ldr	r2, [r7, #16]
 80089f4:	429a      	cmp	r2, r3
 80089f6:	d3b7      	bcc.n	8008968 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	68fa      	ldr	r2, [r7, #12]
 8008a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a0a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d111      	bne.n	8008a36 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a18:	461a      	mov	r2, r3
 8008a1a:	4b20      	ldr	r3, [pc, #128]	; (8008a9c <USB_DevInit+0x2dc>)
 8008a1c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a30:	f043 0303 	orr.w	r3, r3, #3
 8008a34:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a42:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d105      	bne.n	8008a56 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	699b      	ldr	r3, [r3, #24]
 8008a4e:	f043 0210 	orr.w	r2, r3, #16
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	699a      	ldr	r2, [r3, #24]
 8008a5a:	4b11      	ldr	r3, [pc, #68]	; (8008aa0 <USB_DevInit+0x2e0>)
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	687a      	ldr	r2, [r7, #4]
 8008a60:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d005      	beq.n	8008a74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	699b      	ldr	r3, [r3, #24]
 8008a6c:	f043 0208 	orr.w	r2, r3, #8
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a76:	2b01      	cmp	r3, #1
 8008a78:	d107      	bne.n	8008a8a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a82:	f043 0304 	orr.w	r3, r3, #4
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3718      	adds	r7, #24
 8008a90:	46bd      	mov	sp, r7
 8008a92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a96:	b004      	add	sp, #16
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	00800100 	.word	0x00800100
 8008aa0:	803c3800 	.word	0x803c3800

08008aa4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b085      	sub	sp, #20
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	019b      	lsls	r3, r3, #6
 8008ab6:	f043 0220 	orr.w	r2, r3, #32
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	3301      	adds	r3, #1
 8008ac2:	60fb      	str	r3, [r7, #12]
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	4a09      	ldr	r2, [pc, #36]	; (8008aec <USB_FlushTxFifo+0x48>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d901      	bls.n	8008ad0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008acc:	2303      	movs	r3, #3
 8008ace:	e006      	b.n	8008ade <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f003 0320 	and.w	r3, r3, #32
 8008ad8:	2b20      	cmp	r3, #32
 8008ada:	d0f0      	beq.n	8008abe <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	00030d40 	.word	0x00030d40

08008af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008af8:	2300      	movs	r3, #0
 8008afa:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2210      	movs	r2, #16
 8008b00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	3301      	adds	r3, #1
 8008b06:	60fb      	str	r3, [r7, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4a09      	ldr	r2, [pc, #36]	; (8008b30 <USB_FlushRxFifo+0x40>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d901      	bls.n	8008b14 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008b10:	2303      	movs	r3, #3
 8008b12:	e006      	b.n	8008b22 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	691b      	ldr	r3, [r3, #16]
 8008b18:	f003 0310 	and.w	r3, r3, #16
 8008b1c:	2b10      	cmp	r3, #16
 8008b1e:	d0f0      	beq.n	8008b02 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008b20:	2300      	movs	r3, #0
}
 8008b22:	4618      	mov	r0, r3
 8008b24:	3714      	adds	r7, #20
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	00030d40 	.word	0x00030d40

08008b34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b085      	sub	sp, #20
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b4a:	681a      	ldr	r2, [r3, #0]
 8008b4c:	78fb      	ldrb	r3, [r7, #3]
 8008b4e:	68f9      	ldr	r1, [r7, #12]
 8008b50:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b54:	4313      	orrs	r3, r2
 8008b56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b58:	2300      	movs	r3, #0
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3714      	adds	r7, #20
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b64:	4770      	bx	lr

08008b66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b66:	b580      	push	{r7, lr}
 8008b68:	b084      	sub	sp, #16
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b78:	685b      	ldr	r3, [r3, #4]
 8008b7a:	68fa      	ldr	r2, [r7, #12]
 8008b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b80:	f043 0302 	orr.w	r3, r3, #2
 8008b84:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008b86:	2003      	movs	r0, #3
 8008b88:	f7f8 fa70 	bl	800106c <HAL_Delay>

  return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
}
 8008b8e:	4618      	mov	r0, r3
 8008b90:	3710      	adds	r7, #16
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
	...

08008b98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	3301      	adds	r3, #1
 8008ba8:	60fb      	str	r3, [r7, #12]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	4a13      	ldr	r2, [pc, #76]	; (8008bfc <USB_CoreReset+0x64>)
 8008bae:	4293      	cmp	r3, r2
 8008bb0:	d901      	bls.n	8008bb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008bb2:	2303      	movs	r3, #3
 8008bb4:	e01b      	b.n	8008bee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	daf2      	bge.n	8008ba4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	691b      	ldr	r3, [r3, #16]
 8008bc6:	f043 0201 	orr.w	r2, r3, #1
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	60fb      	str	r3, [r7, #12]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4a09      	ldr	r2, [pc, #36]	; (8008bfc <USB_CoreReset+0x64>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d901      	bls.n	8008be0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bdc:	2303      	movs	r3, #3
 8008bde:	e006      	b.n	8008bee <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	691b      	ldr	r3, [r3, #16]
 8008be4:	f003 0301 	and.w	r3, r3, #1
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	d0f0      	beq.n	8008bce <USB_CoreReset+0x36>

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3714      	adds	r7, #20
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf8:	4770      	bx	lr
 8008bfa:	bf00      	nop
 8008bfc:	00030d40 	.word	0x00030d40

08008c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008c00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008c04:	b092      	sub	sp, #72	; 0x48
 8008c06:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c08:	f7f8 f9be 	bl	8000f88 <HAL_Init>
	// todo transfer init part of code here

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c0c:	f000 fc5c 	bl	80094c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c10:	f001 fcca 	bl	800a5a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8008c14:	f001 fc82 	bl	800a51c <MX_DMA_Init>
  MX_TIM9_Init();
 8008c18:	f001 fb10 	bl	800a23c <MX_TIM9_Init>
  MX_SPI2_Init();
 8008c1c:	f001 f842 	bl	8009ca4 <MX_SPI2_Init>
  MX_ADC1_Init();
 8008c20:	f000 fcd6 	bl	80095d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8008c24:	f000 fdfe 	bl	8009824 <MX_ADC2_Init>
  MX_CAN1_Init();
 8008c28:	f000 ff84 	bl	8009b34 <MX_CAN1_Init>
  MX_I2C1_Init();
 8008c2c:	f000 ffb8 	bl	8009ba0 <MX_I2C1_Init>
  MX_I2C2_Init();
 8008c30:	f000 ffe4 	bl	8009bfc <MX_I2C2_Init>
  MX_TIM1_Init();
 8008c34:	f001 f86e 	bl	8009d14 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8008c38:	f001 fc18 	bl	800a46c <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8008c3c:	f001 faa6 	bl	800a18c <MX_TIM8_Init>
  MX_TIM13_Init();
 8008c40:	f001 fbce 	bl	800a3e0 <MX_TIM13_Init>
  MX_TIM12_Init();
 8008c44:	f001 fb6c 	bl	800a320 <MX_TIM12_Init>
  MX_TIM2_Init();
 8008c48:	f001 f936 	bl	8009eb8 <MX_TIM2_Init>
  MX_ADC3_Init();
 8008c4c:	f000 feb4 	bl	80099b8 <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8008c50:	f001 fc36 	bl	800a4c0 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8008c54:	f001 f800 	bl	8009c58 <MX_RTC_Init>
  MX_TIM6_Init();
 8008c58:	f001 fa62 	bl	800a120 <MX_TIM6_Init>
  MX_TIM3_Init();
 8008c5c:	f001 f99e 	bl	8009f9c <MX_TIM3_Init>
  MX_TIM5_Init();
 8008c60:	f001 fa10 	bl	800a084 <MX_TIM5_Init>
	 *    LOOKUPS
	 *                                                                           *
	 *****************************************************************************
	 */

	calc_lookup(lookup);
 8008c64:	485b      	ldr	r0, [pc, #364]	; (8008dd4 <main+0x1d4>)
 8008c66:	f001 ffc3 	bl	800abf0 <calc_lookup>
	calc_sin_lookup(sin_lookup);
 8008c6a:	485b      	ldr	r0, [pc, #364]	; (8008dd8 <main+0x1d8>)
 8008c6c:	f002 f820 	bl	800acb0 <calc_sin_lookup>
	calc_cos_lookup(cos_lookup);
 8008c70:	485a      	ldr	r0, [pc, #360]	; (8008ddc <main+0x1dc>)
 8008c72:	f002 f84f 	bl	800ad14 <calc_cos_lookup>
	 *                                                                           *
	 *    LEDS
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1); //todo clean up timers
 8008c76:	2100      	movs	r1, #0
 8008c78:	4859      	ldr	r0, [pc, #356]	; (8008de0 <main+0x1e0>)
 8008c7a:	f7fd fbd5 	bl	8006428 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2); //todo check versus pwm
 8008c7e:	2104      	movs	r1, #4
 8008c80:	4857      	ldr	r0, [pc, #348]	; (8008de0 <main+0x1e0>)
 8008c82:	f7fd fb5d 	bl	8006340 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim12, TIM_CHANNEL_1);
 8008c86:	2100      	movs	r1, #0
 8008c88:	4856      	ldr	r0, [pc, #344]	; (8008de4 <main+0x1e4>)
 8008c8a:	f7fd fb59 	bl	8006340 <HAL_TIM_OC_Start>
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8008c8e:	2100      	movs	r1, #0
 8008c90:	4855      	ldr	r0, [pc, #340]	; (8008de8 <main+0x1e8>)
 8008c92:	f7fd fb55 	bl	8006340 <HAL_TIM_OC_Start>

	int16_t blink_duration = 100;
 8008c96:	2364      	movs	r3, #100	; 0x64
 8008c98:	85fb      	strh	r3, [r7, #46]	; 0x2e
	TIM9->CCR1 = blink_duration;
 8008c9a:	4a54      	ldr	r2, [pc, #336]	; (8008dec <main+0x1ec>)
 8008c9c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008ca0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 8008ca2:	4a52      	ldr	r2, [pc, #328]	; (8008dec <main+0x1ec>)
 8008ca4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8008ca8:	6393      	str	r3, [r2, #56]	; 0x38

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8008caa:	4b51      	ldr	r3, [pc, #324]	; (8008df0 <main+0x1f0>)
 8008cac:	2210      	movs	r2, #16
 8008cae:	619a      	str	r2, [r3, #24]

	SCB->CPACR |= 0xf00000; //todo understand
 8008cb0:	4b50      	ldr	r3, [pc, #320]	; (8008df4 <main+0x1f4>)
 8008cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cb6:	4a4f      	ldr	r2, [pc, #316]	; (8008df4 <main+0x1f4>)
 8008cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 *                                                                           *
	 *    DRV DRIVER
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	484d      	ldr	r0, [pc, #308]	; (8008df8 <main+0x1f8>)
 8008cc4:	f7fd fbb0 	bl	8006428 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8008cc8:	2100      	movs	r1, #0
 8008cca:	484b      	ldr	r0, [pc, #300]	; (8008df8 <main+0x1f8>)
 8008ccc:	f7fe fd4b 	bl	8007766 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008cd0:	2104      	movs	r1, #4
 8008cd2:	4849      	ldr	r0, [pc, #292]	; (8008df8 <main+0x1f8>)
 8008cd4:	f7fd fba8 	bl	8006428 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8008cd8:	2104      	movs	r1, #4
 8008cda:	4847      	ldr	r0, [pc, #284]	; (8008df8 <main+0x1f8>)
 8008cdc:	f7fe fd43 	bl	8007766 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008ce0:	2108      	movs	r1, #8
 8008ce2:	4845      	ldr	r0, [pc, #276]	; (8008df8 <main+0x1f8>)
 8008ce4:	f7fd fba0 	bl	8006428 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8008ce8:	2108      	movs	r1, #8
 8008cea:	4843      	ldr	r0, [pc, #268]	; (8008df8 <main+0x1f8>)
 8008cec:	f7fe fd3b 	bl	8007766 <HAL_TIMEx_PWMN_Start>

	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8008cf0:	210c      	movs	r1, #12
 8008cf2:	4841      	ldr	r0, [pc, #260]	; (8008df8 <main+0x1f8>)
 8008cf4:	f7fd fb24 	bl	8006340 <HAL_TIM_OC_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);//todo check OC versus IC
 8008cf8:	210c      	movs	r1, #12
 8008cfa:	483f      	ldr	r0, [pc, #252]	; (8008df8 <main+0x1f8>)
 8008cfc:	f7fd fc08 	bl	8006510 <HAL_TIM_IC_Start_IT>

	// --- ENABLE DRV
	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8008d00:	2201      	movs	r2, #1
 8008d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d06:	483a      	ldr	r0, [pc, #232]	; (8008df0 <main+0x1f0>)
 8008d08:	f7fa fcf4 	bl	80036f4 <HAL_GPIO_WritePin>
	 *    TIMERS
	 *                                                                           *
	 *****************************************************************************
	 */
	// todo check timers
	HAL_TIM_Base_Start_IT(&htim3);
 8008d0c:	483b      	ldr	r0, [pc, #236]	; (8008dfc <main+0x1fc>)
 8008d0e:	f7fd fabe 	bl	800628e <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim5);
 8008d12:	483b      	ldr	r0, [pc, #236]	; (8008e00 <main+0x200>)
 8008d14:	f7fd fa97 	bl	8006246 <HAL_TIM_Base_Start>
	uint8_t accel8l;
	uint8_t accel8h;

	char accel_char[20];

	buf[0] = 0x6B; //power register
 8008d18:	4b3a      	ldr	r3, [pc, #232]	; (8008e04 <main+0x204>)
 8008d1a:	226b      	movs	r2, #107	; 0x6b
 8008d1c:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 8008d1e:	4b39      	ldr	r3, [pc, #228]	; (8008e04 <main+0x204>)
 8008d20:	2200      	movs	r2, #0
 8008d22:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8008d24:	23d0      	movs	r3, #208	; 0xd0
 8008d26:	b299      	uxth	r1, r3
 8008d28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d2c:	9300      	str	r3, [sp, #0]
 8008d2e:	2302      	movs	r3, #2
 8008d30:	4a34      	ldr	r2, [pc, #208]	; (8008e04 <main+0x204>)
 8008d32:	4835      	ldr	r0, [pc, #212]	; (8008e08 <main+0x208>)
 8008d34:	f7fa fe48 	bl	80039c8 <HAL_I2C_Master_Transmit>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (ret != HAL_OK){
 8008d3e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d009      	beq.n	8008d5a <main+0x15a>
		strcpy((char*)buf, "Error IMU T\r\n");
 8008d46:	4a2f      	ldr	r2, [pc, #188]	; (8008e04 <main+0x204>)
 8008d48:	4b30      	ldr	r3, [pc, #192]	; (8008e0c <main+0x20c>)
 8008d4a:	4614      	mov	r4, r2
 8008d4c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d4e:	6020      	str	r0, [r4, #0]
 8008d50:	6061      	str	r1, [r4, #4]
 8008d52:	60a2      	str	r2, [r4, #8]
 8008d54:	881b      	ldrh	r3, [r3, #0]
 8008d56:	81a3      	strh	r3, [r4, #12]
 8008d58:	e002      	b.n	8008d60 <main+0x160>
	} else {
		buf[0] = 0x00;
 8008d5a:	4b2a      	ldr	r3, [pc, #168]	; (8008e04 <main+0x204>)
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 8008d60:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <main+0x204>)
 8008d62:	223b      	movs	r2, #59	; 0x3b
 8008d64:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8008d66:	23d0      	movs	r3, #208	; 0xd0
 8008d68:	b299      	uxth	r1, r3
 8008d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d6e:	9300      	str	r3, [sp, #0]
 8008d70:	2301      	movs	r3, #1
 8008d72:	4a24      	ldr	r2, [pc, #144]	; (8008e04 <main+0x204>)
 8008d74:	4824      	ldr	r0, [pc, #144]	; (8008e08 <main+0x208>)
 8008d76:	f7fa fe27 	bl	80039c8 <HAL_I2C_Master_Transmit>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (ret != HAL_OK){
 8008d80:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d009      	beq.n	8008d9c <main+0x19c>
		strcpy((char*)buf, "Error IMU T\r\n");
 8008d88:	4a1e      	ldr	r2, [pc, #120]	; (8008e04 <main+0x204>)
 8008d8a:	4b20      	ldr	r3, [pc, #128]	; (8008e0c <main+0x20c>)
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008d90:	6020      	str	r0, [r4, #0]
 8008d92:	6061      	str	r1, [r4, #4]
 8008d94:	60a2      	str	r2, [r4, #8]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	81a3      	strh	r3, [r4, #12]
 8008d9a:	e047      	b.n	8008e2c <main+0x22c>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8008d9c:	23d0      	movs	r3, #208	; 0xd0
 8008d9e:	b299      	uxth	r1, r3
 8008da0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008da4:	9300      	str	r3, [sp, #0]
 8008da6:	2301      	movs	r3, #1
 8008da8:	4a16      	ldr	r2, [pc, #88]	; (8008e04 <main+0x204>)
 8008daa:	4817      	ldr	r0, [pc, #92]	; (8008e08 <main+0x208>)
 8008dac:	f7fa ff0a 	bl	8003bc4 <HAL_I2C_Master_Receive>
 8008db0:	4603      	mov	r3, r0
 8008db2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
		if (ret != HAL_OK){
 8008db6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d02a      	beq.n	8008e14 <main+0x214>
			strcpy((char*)buf, "Error IMU R\r\n");
 8008dbe:	4a11      	ldr	r2, [pc, #68]	; (8008e04 <main+0x204>)
 8008dc0:	4b13      	ldr	r3, [pc, #76]	; (8008e10 <main+0x210>)
 8008dc2:	4614      	mov	r4, r2
 8008dc4:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008dc6:	6020      	str	r0, [r4, #0]
 8008dc8:	6061      	str	r1, [r4, #4]
 8008dca:	60a2      	str	r2, [r4, #8]
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	81a3      	strh	r3, [r4, #12]
 8008dd0:	e02c      	b.n	8008e2c <main+0x22c>
 8008dd2:	bf00      	nop
 8008dd4:	20000368 	.word	0x20000368
 8008dd8:	20001d88 	.word	0x20001d88
 8008ddc:	20001038 	.word	0x20001038
 8008de0:	20001a08 	.word	0x20001a08
 8008de4:	20001d30 	.word	0x20001d30
 8008de8:	20001c4c 	.word	0x20001c4c
 8008dec:	40014000 	.word	0x40014000
 8008df0:	40021000 	.word	0x40021000
 8008df4:	e000ed00 	.word	0xe000ed00
 8008df8:	20000fec 	.word	0x20000fec
 8008dfc:	20000d38 	.word	0x20000d38
 8008e00:	20000cf4 	.word	0x20000cf4
 8008e04:	20001ab0 	.word	0x20001ab0
 8008e08:	20000bd4 	.word	0x20000bd4
 8008e0c:	08012520 	.word	0x08012520
 8008e10:	08012530 	.word	0x08012530
		} else {
			accel8l = (int8_t)buf[0];
 8008e14:	4ba9      	ldr	r3, [pc, #676]	; (80090bc <main+0x4bc>)
 8008e16:	781b      	ldrb	r3, [r3, #0]
 8008e18:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8008e1c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8008e20:	f107 0310 	add.w	r3, r7, #16
 8008e24:	49a6      	ldr	r1, [pc, #664]	; (80090c0 <main+0x4c0>)
 8008e26:	4618      	mov	r0, r3
 8008e28:	f005 fb00 	bl	800e42c <siprintf>
	 *                                                                           *
	 *    ROTATION SENSOR
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 8008e2c:	213c      	movs	r1, #60	; 0x3c
 8008e2e:	48a5      	ldr	r0, [pc, #660]	; (80090c4 <main+0x4c4>)
 8008e30:	f7fd fc68 	bl	8006704 <HAL_TIM_Encoder_Start_IT>

	//todo UGLY BUG - Ugly FIX: now i just send the init below twice because somehow the communication of the first transaction does not seem to work-- i sse on the MISO signal the lines just pulls up to 0.5fV instead of 3V but it works fine for the next transmission so it gets initialized correctly if i sent it twice


	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 8008e34:	2300      	movs	r3, #0
 8008e36:	737b      	strb	r3, [r7, #13]
	spi_address_8[0]= 0x18;//00000000 00011000
 8008e38:	2318      	movs	r3, #24
 8008e3a:	733b      	strb	r3, [r7, #12]
	spi_value_8[1]= 0x80;
 8008e3c:	2380      	movs	r3, #128	; 0x80
 8008e3e:	727b      	strb	r3, [r7, #9]
	spi_value_8[0]= 0x80;  //10000000 10000000
 8008e40:	2380      	movs	r3, #128	; 0x80
 8008e42:	723b      	strb	r3, [r7, #8]
	delay_SPI();
 8008e44:	f001 fe84 	bl	800ab50 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008e48:	2200      	movs	r2, #0
 8008e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e4e:	489e      	ldr	r0, [pc, #632]	; (80090c8 <main+0x4c8>)
 8008e50:	f7fa fc50 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008e54:	f107 010c 	add.w	r1, r7, #12
 8008e58:	2301      	movs	r3, #1
 8008e5a:	2201      	movs	r2, #1
 8008e5c:	489b      	ldr	r0, [pc, #620]	; (80090cc <main+0x4cc>)
 8008e5e:	f7fc fbb8 	bl	80055d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008e62:	2201      	movs	r2, #1
 8008e64:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e68:	4897      	ldr	r0, [pc, #604]	; (80090c8 <main+0x4c8>)
 8008e6a:	f7fa fc43 	bl	80036f4 <HAL_GPIO_WritePin>
	delay_SPI();
 8008e6e:	f001 fe6f 	bl	800ab50 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008e72:	2200      	movs	r2, #0
 8008e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e78:	4893      	ldr	r0, [pc, #588]	; (80090c8 <main+0x4c8>)
 8008e7a:	f7fa fc3b 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008e7e:	f107 0108 	add.w	r1, r7, #8
 8008e82:	2301      	movs	r3, #1
 8008e84:	2201      	movs	r2, #1
 8008e86:	4891      	ldr	r0, [pc, #580]	; (80090cc <main+0x4cc>)
 8008e88:	f7fc fba3 	bl	80055d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e92:	488d      	ldr	r0, [pc, #564]	; (80090c8 <main+0x4c8>)
 8008e94:	f7fa fc2e 	bl	80036f4 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses //todo this sometimes seems not to work as I get 4000 steps
	spi_address_8[1]= 0x80;
 8008e98:	2380      	movs	r3, #128	; 0x80
 8008e9a:	737b      	strb	r3, [r7, #13]
	spi_address_8[0]= 0x19; //00001000 00011001
 8008e9c:	2319      	movs	r3, #25
 8008e9e:	733b      	strb	r3, [r7, #12]
	//address = AS_ADDR_SETTINGS2 | AS_WRITE ; // 0x8019
	//value = 0x0020 | AS_ODD; // 0x8020
	//value = 0x00E0 | AS_ODD;
	spi_value_8[1]= 0x00;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	727b      	strb	r3, [r7, #9]
	spi_value_8[0]= 0x00;  //was 0x80 and 0x20 10000000 00100000 to get 2000 pulses --> changed to 4000
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	723b      	strb	r3, [r7, #8]
	delay_SPI();
 8008ea8:	f001 fe52 	bl	800ab50 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008eac:	2200      	movs	r2, #0
 8008eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008eb2:	4885      	ldr	r0, [pc, #532]	; (80090c8 <main+0x4c8>)
 8008eb4:	f7fa fc1e 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008eb8:	f107 010c 	add.w	r1, r7, #12
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	4882      	ldr	r0, [pc, #520]	; (80090cc <main+0x4cc>)
 8008ec2:	f7fc fb86 	bl	80055d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ecc:	487e      	ldr	r0, [pc, #504]	; (80090c8 <main+0x4c8>)
 8008ece:	f7fa fc11 	bl	80036f4 <HAL_GPIO_WritePin>
	delay_SPI();
 8008ed2:	f001 fe3d 	bl	800ab50 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008edc:	487a      	ldr	r0, [pc, #488]	; (80090c8 <main+0x4c8>)
 8008ede:	f7fa fc09 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008ee2:	f107 0108 	add.w	r1, r7, #8
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	2201      	movs	r2, #1
 8008eea:	4878      	ldr	r0, [pc, #480]	; (80090cc <main+0x4cc>)
 8008eec:	f7fc fb71 	bl	80055d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ef6:	4874      	ldr	r0, [pc, #464]	; (80090c8 <main+0x4c8>)
 8008ef8:	f7fa fbfc 	bl	80036f4 <HAL_GPIO_WritePin>

	// --- read angle
	HAL_Delay(1);
 8008efc:	2001      	movs	r0, #1
 8008efe:	f7f8 f8b5 	bl	800106c <HAL_Delay>

	uint8_t angle8[2];
	uint16_t angle;

	//for (int i=0; i<4; i++)
	spi_address_8[1]= 0x7F;
 8008f02:	237f      	movs	r3, #127	; 0x7f
 8008f04:	737b      	strb	r3, [r7, #13]
	spi_address_8[0]= 0xFE;
 8008f06:	23fe      	movs	r3, #254	; 0xfe
 8008f08:	733b      	strb	r3, [r7, #12]
	delay_SPI();
 8008f0a:	f001 fe21 	bl	800ab50 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008f0e:	2200      	movs	r2, #0
 8008f10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f14:	486c      	ldr	r0, [pc, #432]	; (80090c8 <main+0x4c8>)
 8008f16:	f7fa fbed 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008f1a:	f107 010c 	add.w	r1, r7, #12
 8008f1e:	2301      	movs	r3, #1
 8008f20:	2201      	movs	r2, #1
 8008f22:	486a      	ldr	r0, [pc, #424]	; (80090cc <main+0x4cc>)
 8008f24:	f7fc fb55 	bl	80055d2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008f28:	2201      	movs	r2, #1
 8008f2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f2e:	4866      	ldr	r0, [pc, #408]	; (80090c8 <main+0x4c8>)
 8008f30:	f7fa fbe0 	bl	80036f4 <HAL_GPIO_WritePin>
	delay_SPI();
 8008f34:	f001 fe0c 	bl	800ab50 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008f38:	2200      	movs	r2, #0
 8008f3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f3e:	4862      	ldr	r0, [pc, #392]	; (80090c8 <main+0x4c8>)
 8008f40:	f7fa fbd8 	bl	80036f4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8008f44:	1d39      	adds	r1, r7, #4
 8008f46:	2301      	movs	r3, #1
 8008f48:	2201      	movs	r2, #1
 8008f4a:	4860      	ldr	r0, [pc, #384]	; (80090cc <main+0x4cc>)
 8008f4c:	f7fc fc75 	bl	800583a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008f50:	2201      	movs	r2, #1
 8008f52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f56:	485c      	ldr	r0, [pc, #368]	; (80090c8 <main+0x4c8>)
 8008f58:	f7fa fbcc 	bl	80036f4 <HAL_GPIO_WritePin>

	angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 8008f5c:	793b      	ldrb	r3, [r7, #4]
 8008f5e:	b21a      	sxth	r2, r3
 8008f60:	797b      	ldrb	r3, [r7, #5]
 8008f62:	021b      	lsls	r3, r3, #8
 8008f64:	b21b      	sxth	r3, r3
 8008f66:	4313      	orrs	r3, r2
 8008f68:	b21b      	sxth	r3, r3
 8008f6a:	857b      	strh	r3, [r7, #42]	; 0x2a
	angle &= AS_DATA_MASK;
 8008f6c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f6e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008f72:	857b      	strh	r3, [r7, #42]	; 0x2a


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	//angle &= AS_DATA_MASK;
	init_EncVal = (uint16_t) ((float)angle /16384.0f * ENC_STEPS_F);
 8008f74:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f76:	ee07 3a90 	vmov	s15, r3
 8008f7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008f7e:	eddf 6a54 	vldr	s13, [pc, #336]	; 80090d0 <main+0x4d0>
 8008f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008f86:	ed9f 7a53 	vldr	s14, [pc, #332]	; 80090d4 <main+0x4d4>
 8008f8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008f8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f92:	ee17 3a90 	vmov	r3, s15
 8008f96:	b29b      	uxth	r3, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	4b4f      	ldr	r3, [pc, #316]	; (80090d8 <main+0x4d8>)
 8008f9c:	601a      	str	r2, [r3, #0]
	last_EncVal_omegaEnc = init_EncVal;
 8008f9e:	4b4e      	ldr	r3, [pc, #312]	; (80090d8 <main+0x4d8>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a4e      	ldr	r2, [pc, #312]	; (80090dc <main+0x4dc>)
 8008fa4:	6013      	str	r3, [r2, #0]
	last_EncVal_pwm = init_EncVal;
 8008fa6:	4b4c      	ldr	r3, [pc, #304]	; (80090d8 <main+0x4d8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a4d      	ldr	r2, [pc, #308]	; (80090e0 <main+0x4e0>)
 8008fac:	6013      	str	r3, [r2, #0]
	TIM8->CNT = init_EncVal;
 8008fae:	4b4a      	ldr	r3, [pc, #296]	; (80090d8 <main+0x4d8>)
 8008fb0:	681a      	ldr	r2, [r3, #0]
 8008fb2:	4b4c      	ldr	r3, [pc, #304]	; (80090e4 <main+0x4e4>)
 8008fb4:	625a      	str	r2, [r3, #36]	; 0x24
	 *                                                                           *
	 *    UART DMA
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 8008fb6:	4a4c      	ldr	r2, [pc, #304]	; (80090e8 <main+0x4e8>)
 8008fb8:	2100      	movs	r1, #0
 8008fba:	484c      	ldr	r0, [pc, #304]	; (80090ec <main+0x4ec>)
 8008fbc:	f7fa f8ce 	bl	800315c <HAL_DMA_RegisterCallback>
	 *                                                                           *
	 *    ADC DMA and INJECTED
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC1_BUF_LEN); // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 8008fc0:	2208      	movs	r2, #8
 8008fc2:	494b      	ldr	r1, [pc, #300]	; (80090f0 <main+0x4f0>)
 8008fc4:	484b      	ldr	r0, [pc, #300]	; (80090f4 <main+0x4f4>)
 8008fc6:	f7f8 f9f7 	bl	80013b8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC2_BUF_LEN); // TODO enabling this only leads to no change all values stay zero
 8008fca:	2204      	movs	r2, #4
 8008fcc:	494a      	ldr	r1, [pc, #296]	; (80090f8 <main+0x4f8>)
 8008fce:	484b      	ldr	r0, [pc, #300]	; (80090fc <main+0x4fc>)
 8008fd0:	f7f8 f9f2 	bl	80013b8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC3_BUF_LEN); // TODO enabling this breaks transmission entirely
 8008fd4:	2204      	movs	r2, #4
 8008fd6:	494a      	ldr	r1, [pc, #296]	; (8009100 <main+0x500>)
 8008fd8:	484a      	ldr	r0, [pc, #296]	; (8009104 <main+0x504>)
 8008fda:	f7f8 f9ed 	bl	80013b8 <HAL_ADC_Start_DMA>

	HAL_ADCEx_InjectedStart (&hadc1);
 8008fde:	4845      	ldr	r0, [pc, #276]	; (80090f4 <main+0x4f4>)
 8008fe0:	f7f8 fda4 	bl	8001b2c <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 8008fe4:	4845      	ldr	r0, [pc, #276]	; (80090fc <main+0x4fc>)
 8008fe6:	f7f8 fda1 	bl	8001b2c <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3);
 8008fea:	4846      	ldr	r0, [pc, #280]	; (8009104 <main+0x504>)
 8008fec:	f7f8 fd9e 	bl	8001b2c <HAL_ADCEx_InjectedStart>
	 *                                                                           *
	 *    CAN COMMUNICATION
	 *                                                                           *
	 *****************************************************************************
	 */
	pHeader.DLC =6;
 8008ff0:	4b45      	ldr	r3, [pc, #276]	; (8009108 <main+0x508>)
 8008ff2:	2206      	movs	r2, #6
 8008ff4:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 8008ff6:	4b44      	ldr	r3, [pc, #272]	; (8009108 <main+0x508>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 8008ffc:	4b42      	ldr	r3, [pc, #264]	; (8009108 <main+0x508>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x001;
 8009002:	4b41      	ldr	r3, [pc, #260]	; (8009108 <main+0x508>)
 8009004:	2201      	movs	r2, #1
 8009006:	601a      	str	r2, [r3, #0]

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8009008:	4b40      	ldr	r3, [pc, #256]	; (800910c <main+0x50c>)
 800900a:	2200      	movs	r2, #0
 800900c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = CAN_ID<<5;
 800900e:	4b3f      	ldr	r3, [pc, #252]	; (800910c <main+0x50c>)
 8009010:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009014:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8009016:	4b3d      	ldr	r3, [pc, #244]	; (800910c <main+0x50c>)
 8009018:	2200      	movs	r2, #0
 800901a:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 800901c:	4b3b      	ldr	r3, [pc, #236]	; (800910c <main+0x50c>)
 800901e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009022:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0xFFFF;
 8009024:	4b39      	ldr	r3, [pc, #228]	; (800910c <main+0x50c>)
 8009026:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800902a:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 800902c:	4b37      	ldr	r3, [pc, #220]	; (800910c <main+0x50c>)
 800902e:	2200      	movs	r2, #0
 8009030:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8009032:	4b36      	ldr	r3, [pc, #216]	; (800910c <main+0x50c>)
 8009034:	2201      	movs	r2, #1
 8009036:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8009038:	4934      	ldr	r1, [pc, #208]	; (800910c <main+0x50c>)
 800903a:	4835      	ldr	r0, [pc, #212]	; (8009110 <main+0x510>)
 800903c:	f7f9 f94c 	bl	80022d8 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8009040:	4833      	ldr	r0, [pc, #204]	; (8009110 <main+0x510>)
 8009042:	f7f9 fa29 	bl	8002498 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8009046:	2102      	movs	r1, #2
 8009048:	4831      	ldr	r0, [pc, #196]	; (8009110 <main+0x510>)
 800904a:	f7f9 fa69 	bl	8002520 <HAL_CAN_ActivateNotification>
	 *    SYSTEM CALIBRATION
	 *                                                                           *
	 *****************************************************************************
	 */

	sprintf(buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\nangle: %d init_EncVal %d \r\nangle: %u EncVal %u \r\n\r\n",
 800904e:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
 8009050:	4b21      	ldr	r3, [pc, #132]	; (80090d8 <main+0x4d8>)
 8009052:	6818      	ldr	r0, [r3, #0]
 8009054:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009056:	4a20      	ldr	r2, [pc, #128]	; (80090d8 <main+0x4d8>)
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	9201      	str	r2, [sp, #4]
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	4603      	mov	r3, r0
 8009060:	460a      	mov	r2, r1
 8009062:	492c      	ldr	r1, [pc, #176]	; (8009114 <main+0x514>)
 8009064:	4815      	ldr	r0, [pc, #84]	; (80090bc <main+0x4bc>)
 8009066:	f005 f9e1 	bl	800e42c <siprintf>
			angle, init_EncVal ,
			angle, init_EncVal );
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800906a:	4b2b      	ldr	r3, [pc, #172]	; (8009118 <main+0x518>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	695a      	ldr	r2, [r3, #20]
 8009070:	4b29      	ldr	r3, [pc, #164]	; (8009118 <main+0x518>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009078:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800907a:	4c10      	ldr	r4, [pc, #64]	; (80090bc <main+0x4bc>)
 800907c:	4b26      	ldr	r3, [pc, #152]	; (8009118 <main+0x518>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	3304      	adds	r3, #4
 8009082:	461d      	mov	r5, r3
 8009084:	480d      	ldr	r0, [pc, #52]	; (80090bc <main+0x4bc>)
 8009086:	f7f7 f8a3 	bl	80001d0 <strlen>
 800908a:	4603      	mov	r3, r0
 800908c:	462a      	mov	r2, r5
 800908e:	4621      	mov	r1, r4
 8009090:	4816      	ldr	r0, [pc, #88]	; (80090ec <main+0x4ec>)
 8009092:	f7f9 fe5f 	bl	8002d54 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 8009096:	200a      	movs	r0, #10
 8009098:	f7f7 ffe8 	bl	800106c <HAL_Delay>

	// --- find current sense offsets
	//float acc_I_A = 0.0f;
#if I_CALIB_ENABLED
	A_mean = 0;
 800909c:	4b1f      	ldr	r3, [pc, #124]	; (800911c <main+0x51c>)
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	601a      	str	r2, [r3, #0]
	B_mean = 0;
 80090a4:	4b1e      	ldr	r3, [pc, #120]	; (8009120 <main+0x520>)
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	601a      	str	r2, [r3, #0]
	C_mean = 0;
 80090ac:	4b1d      	ldr	r3, [pc, #116]	; (8009124 <main+0x524>)
 80090ae:	f04f 0200 	mov.w	r2, #0
 80090b2:	601a      	str	r2, [r3, #0]
	for (int i=0; i<I_CALIB_N; i++){
 80090b4:	2300      	movs	r3, #0
 80090b6:	637b      	str	r3, [r7, #52]	; 0x34
 80090b8:	e06c      	b.n	8009194 <main+0x594>
 80090ba:	bf00      	nop
 80090bc:	20001ab0 	.word	0x20001ab0
 80090c0:	08012540 	.word	0x08012540
 80090c4:	200006b0 	.word	0x200006b0
 80090c8:	40020c00 	.word	0x40020c00
 80090cc:	20000310 	.word	0x20000310
 80090d0:	46800000 	.word	0x46800000
 80090d4:	457a0000 	.word	0x457a0000
 80090d8:	2000278c 	.word	0x2000278c
 80090dc:	20000d34 	.word	0x20000d34
 80090e0:	20000c28 	.word	0x20000c28
 80090e4:	40010400 	.word	0x40010400
 80090e8:	0800ad79 	.word	0x0800ad79
 80090ec:	20000c94 	.word	0x20000c94
 80090f0:	20000d7c 	.word	0x20000d7c
 80090f4:	20000e5c 	.word	0x20000e5c
 80090f8:	20001c44 	.word	0x20001c44
 80090fc:	20000730 	.word	0x20000730
 8009100:	20001030 	.word	0x20001030
 8009104:	20000ea4 	.word	0x20000ea4
 8009108:	20001d70 	.word	0x20001d70
 800910c:	200002e8 	.word	0x200002e8
 8009110:	20001d08 	.word	0x20001d08
 8009114:	08012548 	.word	0x08012548
 8009118:	200006f0 	.word	0x200006f0
 800911c:	20000030 	.word	0x20000030
 8009120:	20000034 	.word	0x20000034
 8009124:	20000038 	.word	0x20000038
		A_mean += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);
 8009128:	2104      	movs	r1, #4
 800912a:	48ba      	ldr	r0, [pc, #744]	; (8009414 <main+0x814>)
 800912c:	f7f8 fdbc 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 8009130:	ee07 0a90 	vmov	s15, r0
 8009134:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009138:	4bb7      	ldr	r3, [pc, #732]	; (8009418 <main+0x818>)
 800913a:	edd3 7a00 	vldr	s15, [r3]
 800913e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009142:	4bb5      	ldr	r3, [pc, #724]	; (8009418 <main+0x818>)
 8009144:	edc3 7a00 	vstr	s15, [r3]
		B_mean += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I);
 8009148:	2104      	movs	r1, #4
 800914a:	48b4      	ldr	r0, [pc, #720]	; (800941c <main+0x81c>)
 800914c:	f7f8 fdac 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 8009150:	ee07 0a90 	vmov	s15, r0
 8009154:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009158:	4bb1      	ldr	r3, [pc, #708]	; (8009420 <main+0x820>)
 800915a:	edd3 7a00 	vldr	s15, [r3]
 800915e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009162:	4baf      	ldr	r3, [pc, #700]	; (8009420 <main+0x820>)
 8009164:	edc3 7a00 	vstr	s15, [r3]
		C_mean += HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I);
 8009168:	2104      	movs	r1, #4
 800916a:	48ae      	ldr	r0, [pc, #696]	; (8009424 <main+0x824>)
 800916c:	f7f8 fd9c 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 8009170:	ee07 0a90 	vmov	s15, r0
 8009174:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009178:	4bab      	ldr	r3, [pc, #684]	; (8009428 <main+0x828>)
 800917a:	edd3 7a00 	vldr	s15, [r3]
 800917e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009182:	4ba9      	ldr	r3, [pc, #676]	; (8009428 <main+0x828>)
 8009184:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8009188:	2001      	movs	r0, #1
 800918a:	f7f7 ff6f 	bl	800106c <HAL_Delay>
	for (int i=0; i<I_CALIB_N; i++){
 800918e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009190:	3301      	adds	r3, #1
 8009192:	637b      	str	r3, [r7, #52]	; 0x34
 8009194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009196:	2b7f      	cmp	r3, #127	; 0x7f
 8009198:	ddc6      	ble.n	8009128 <main+0x528>
	}
	A_mean /= I_CALIB_N;
 800919a:	4b9f      	ldr	r3, [pc, #636]	; (8009418 <main+0x818>)
 800919c:	ed93 7a00 	vldr	s14, [r3]
 80091a0:	eddf 6aa2 	vldr	s13, [pc, #648]	; 800942c <main+0x82c>
 80091a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091a8:	4b9b      	ldr	r3, [pc, #620]	; (8009418 <main+0x818>)
 80091aa:	edc3 7a00 	vstr	s15, [r3]
	B_mean /= I_CALIB_N;
 80091ae:	4b9c      	ldr	r3, [pc, #624]	; (8009420 <main+0x820>)
 80091b0:	ed93 7a00 	vldr	s14, [r3]
 80091b4:	eddf 6a9d 	vldr	s13, [pc, #628]	; 800942c <main+0x82c>
 80091b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091bc:	4b98      	ldr	r3, [pc, #608]	; (8009420 <main+0x820>)
 80091be:	edc3 7a00 	vstr	s15, [r3]
	C_mean /= I_CALIB_N;
 80091c2:	4b99      	ldr	r3, [pc, #612]	; (8009428 <main+0x828>)
 80091c4:	ed93 7a00 	vldr	s14, [r3]
 80091c8:	eddf 6a98 	vldr	s13, [pc, #608]	; 800942c <main+0x82c>
 80091cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80091d0:	4b95      	ldr	r3, [pc, #596]	; (8009428 <main+0x828>)
 80091d2:	edc3 7a00 	vstr	s15, [r3]

	sprintf(buf, "I_mean: %8.3f %8.3f %8.3f \n", A_mean, B_mean, C_mean );
 80091d6:	4b90      	ldr	r3, [pc, #576]	; (8009418 <main+0x818>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4618      	mov	r0, r3
 80091dc:	f7f7 f9b4 	bl	8000548 <__aeabi_f2d>
 80091e0:	4680      	mov	r8, r0
 80091e2:	4689      	mov	r9, r1
 80091e4:	4b8e      	ldr	r3, [pc, #568]	; (8009420 <main+0x820>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7f7 f9ad 	bl	8000548 <__aeabi_f2d>
 80091ee:	4604      	mov	r4, r0
 80091f0:	460d      	mov	r5, r1
 80091f2:	4b8d      	ldr	r3, [pc, #564]	; (8009428 <main+0x828>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7f7 f9a6 	bl	8000548 <__aeabi_f2d>
 80091fc:	4602      	mov	r2, r0
 80091fe:	460b      	mov	r3, r1
 8009200:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009204:	e9cd 4500 	strd	r4, r5, [sp]
 8009208:	4642      	mov	r2, r8
 800920a:	464b      	mov	r3, r9
 800920c:	4988      	ldr	r1, [pc, #544]	; (8009430 <main+0x830>)
 800920e:	4889      	ldr	r0, [pc, #548]	; (8009434 <main+0x834>)
 8009210:	f005 f90c 	bl	800e42c <siprintf>
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8009214:	4b88      	ldr	r3, [pc, #544]	; (8009438 <main+0x838>)
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	695a      	ldr	r2, [r3, #20]
 800921a:	4b87      	ldr	r3, [pc, #540]	; (8009438 <main+0x838>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009222:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8009224:	4c83      	ldr	r4, [pc, #524]	; (8009434 <main+0x834>)
 8009226:	4b84      	ldr	r3, [pc, #528]	; (8009438 <main+0x838>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	3304      	adds	r3, #4
 800922c:	461d      	mov	r5, r3
 800922e:	4881      	ldr	r0, [pc, #516]	; (8009434 <main+0x834>)
 8009230:	f7f6 ffce 	bl	80001d0 <strlen>
 8009234:	4603      	mov	r3, r0
 8009236:	462a      	mov	r2, r5
 8009238:	4621      	mov	r1, r4
 800923a:	4880      	ldr	r0, [pc, #512]	; (800943c <main+0x83c>)
 800923c:	f7f9 fd8a 	bl	8002d54 <HAL_DMA_Start_IT>
	HAL_Delay(10);
 8009240:	200a      	movs	r0, #10
 8009242:	f7f7 ff13 	bl	800106c <HAL_Delay>
	 *    SYSTEM CHECK
	 *                                                                           *
	 *****************************************************************************
	 */

	if (adc1_buf[RANK_CONT_Vbus-1]*CONVERT_VBUS_INT2V > VBUS_MAX){
 8009246:	4b7e      	ldr	r3, [pc, #504]	; (8009440 <main+0x840>)
 8009248:	89db      	ldrh	r3, [r3, #14]
 800924a:	ee07 3a90 	vmov	s15, r3
 800924e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009252:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8009444 <main+0x844>
 8009256:	ee67 7a87 	vmul.f32	s15, s15, s14
 800925a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800925e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009266:	dd05      	ble.n	8009274 <main+0x674>
		sys_err |= 1 << 0U;
 8009268:	4b77      	ldr	r3, [pc, #476]	; (8009448 <main+0x848>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f043 0301 	orr.w	r3, r3, #1
 8009270:	4a75      	ldr	r2, [pc, #468]	; (8009448 <main+0x848>)
 8009272:	6013      	str	r3, [r2, #0]
	}
	if (adc1_buf[RANK_CONT_Vbus-1]*CONVERT_VBUS_INT2V < VBUS_MIN){
 8009274:	4b72      	ldr	r3, [pc, #456]	; (8009440 <main+0x840>)
 8009276:	89db      	ldrh	r3, [r3, #14]
 8009278:	ee07 3a90 	vmov	s15, r3
 800927c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009280:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8009444 <main+0x844>
 8009284:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009288:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800928c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009290:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009294:	d505      	bpl.n	80092a2 <main+0x6a2>
		sys_err |= 1 << 1U;
 8009296:	4b6c      	ldr	r3, [pc, #432]	; (8009448 <main+0x848>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f043 0302 	orr.w	r3, r3, #2
 800929e:	4a6a      	ldr	r2, [pc, #424]	; (8009448 <main+0x848>)
 80092a0:	6013      	str	r3, [r2, #0]
	}

	if (A_mean < 2030.0f || A_mean > 2060.0f ||
 80092a2:	4b5d      	ldr	r3, [pc, #372]	; (8009418 <main+0x818>)
 80092a4:	edd3 7a00 	vldr	s15, [r3]
 80092a8:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800944c <main+0x84c>
 80092ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	d431      	bmi.n	800931a <main+0x71a>
 80092b6:	4b58      	ldr	r3, [pc, #352]	; (8009418 <main+0x818>)
 80092b8:	edd3 7a00 	vldr	s15, [r3]
 80092bc:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8009450 <main+0x850>
 80092c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092c8:	dc27      	bgt.n	800931a <main+0x71a>
			B_mean < 1990.0f || B_mean > 2020.0f ||
 80092ca:	4b55      	ldr	r3, [pc, #340]	; (8009420 <main+0x820>)
 80092cc:	edd3 7a00 	vldr	s15, [r3]
	if (A_mean < 2030.0f || A_mean > 2060.0f ||
 80092d0:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8009454 <main+0x854>
 80092d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092dc:	d41d      	bmi.n	800931a <main+0x71a>
			B_mean < 1990.0f || B_mean > 2020.0f ||
 80092de:	4b50      	ldr	r3, [pc, #320]	; (8009420 <main+0x820>)
 80092e0:	edd3 7a00 	vldr	s15, [r3]
 80092e4:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8009458 <main+0x858>
 80092e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80092ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092f0:	dc13      	bgt.n	800931a <main+0x71a>
			C_mean < 1990.0f || C_mean > 2020.0f ){
 80092f2:	4b4d      	ldr	r3, [pc, #308]	; (8009428 <main+0x828>)
 80092f4:	edd3 7a00 	vldr	s15, [r3]
			B_mean < 1990.0f || B_mean > 2020.0f ||
 80092f8:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8009454 <main+0x854>
 80092fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009304:	d409      	bmi.n	800931a <main+0x71a>
			C_mean < 1990.0f || C_mean > 2020.0f ){
 8009306:	4b48      	ldr	r3, [pc, #288]	; (8009428 <main+0x828>)
 8009308:	edd3 7a00 	vldr	s15, [r3]
 800930c:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8009458 <main+0x858>
 8009310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009318:	dd05      	ble.n	8009326 <main+0x726>
		sys_err |= 1 << 2U;
 800931a:	4b4b      	ldr	r3, [pc, #300]	; (8009448 <main+0x848>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f043 0304 	orr.w	r3, r3, #4
 8009322:	4a49      	ldr	r2, [pc, #292]	; (8009448 <main+0x848>)
 8009324:	6013      	str	r3, [r2, #0]
	 *    WELCOME
	 *                                                                           *
	 *****************************************************************************
	 */

	sprintf(buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\n angle: %u EncVal %u \r\n error %d \r\n",
 8009326:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8009328:	4b4c      	ldr	r3, [pc, #304]	; (800945c <main+0x85c>)
 800932a:	6819      	ldr	r1, [r3, #0]
 800932c:	4b46      	ldr	r3, [pc, #280]	; (8009448 <main+0x848>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	460b      	mov	r3, r1
 8009334:	494a      	ldr	r1, [pc, #296]	; (8009460 <main+0x860>)
 8009336:	483f      	ldr	r0, [pc, #252]	; (8009434 <main+0x834>)
 8009338:	f005 f878 	bl	800e42c <siprintf>
			angle, init_EncVal ,
			sys_err);
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800933c:	4b3e      	ldr	r3, [pc, #248]	; (8009438 <main+0x838>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	695a      	ldr	r2, [r3, #20]
 8009342:	4b3d      	ldr	r3, [pc, #244]	; (8009438 <main+0x838>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800934a:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800934c:	4c39      	ldr	r4, [pc, #228]	; (8009434 <main+0x834>)
 800934e:	4b3a      	ldr	r3, [pc, #232]	; (8009438 <main+0x838>)
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	3304      	adds	r3, #4
 8009354:	461d      	mov	r5, r3
 8009356:	4837      	ldr	r0, [pc, #220]	; (8009434 <main+0x834>)
 8009358:	f7f6 ff3a 	bl	80001d0 <strlen>
 800935c:	4603      	mov	r3, r0
 800935e:	462a      	mov	r2, r5
 8009360:	4621      	mov	r1, r4
 8009362:	4836      	ldr	r0, [pc, #216]	; (800943c <main+0x83c>)
 8009364:	f7f9 fcf6 	bl	8002d54 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 8009368:	200a      	movs	r0, #10
 800936a:	f7f7 fe7f 	bl	800106c <HAL_Delay>
	 *                                                                           *
	 *    SYSTEM START
	 *                                                                           *
	 *****************************************************************************
	 */
	playSound( 3, 100, 20);
 800936e:	2214      	movs	r2, #20
 8009370:	2164      	movs	r1, #100	; 0x64
 8009372:	2003      	movs	r0, #3
 8009374:	f001 fc04 	bl	800ab80 <playSound>
	playSound( 2, 100, 40);
 8009378:	2228      	movs	r2, #40	; 0x28
 800937a:	2164      	movs	r1, #100	; 0x64
 800937c:	2002      	movs	r0, #2
 800937e:	f001 fbff 	bl	800ab80 <playSound>
	playSound( 1, 100, 80);
 8009382:	2250      	movs	r2, #80	; 0x50
 8009384:	2164      	movs	r1, #100	; 0x64
 8009386:	2001      	movs	r0, #1
 8009388:	f001 fbfa 	bl	800ab80 <playSound>
	HAL_Delay(100); // So the system stops vibrating
 800938c:	2064      	movs	r0, #100	; 0x64
 800938e:	f7f7 fe6d 	bl	800106c <HAL_Delay>

	sw_enable_pwm = true;
 8009392:	4b34      	ldr	r3, [pc, #208]	; (8009464 <main+0x864>)
 8009394:	2201      	movs	r2, #1
 8009396:	701a      	strb	r2, [r3, #0]
	amp = 0.01f;
 8009398:	4b33      	ldr	r3, [pc, #204]	; (8009468 <main+0x868>)
 800939a:	4a34      	ldr	r2, [pc, #208]	; (800946c <main+0x86c>)
 800939c:	601a      	str	r2, [r3, #0]
		 *****************************************************************************
		 *****************************************************************************
		 */

		// --- calling fast control task
		if (analog_samples_counter >= ANALOG_SAMPLES_N){
 800939e:	4b34      	ldr	r3, [pc, #208]	; (8009470 <main+0x870>)
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	2b1f      	cmp	r3, #31
 80093a4:	d913      	bls.n	80093ce <main+0x7ce>
			fast_control_task();
 80093a6:	f002 fa2f 	bl	800b808 <fast_control_task>
			print_prep_task(prep_counter);
 80093aa:	4b32      	ldr	r3, [pc, #200]	; (8009474 <main+0x874>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f002 fe8c 	bl	800c0cc <print_prep_task>

			analog_samples_counter = 0;
 80093b4:	4b2e      	ldr	r3, [pc, #184]	; (8009470 <main+0x870>)
 80093b6:	2200      	movs	r2, #0
 80093b8:	601a      	str	r2, [r3, #0]
			fast_control_task_counter ++;
 80093ba:	4b2f      	ldr	r3, [pc, #188]	; (8009478 <main+0x878>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	3301      	adds	r3, #1
 80093c0:	4a2d      	ldr	r2, [pc, #180]	; (8009478 <main+0x878>)
 80093c2:	6013      	str	r3, [r2, #0]
			prep_counter ++;
 80093c4:	4b2b      	ldr	r3, [pc, #172]	; (8009474 <main+0x874>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	3301      	adds	r3, #1
 80093ca:	4a2a      	ldr	r2, [pc, #168]	; (8009474 <main+0x874>)
 80093cc:	6013      	str	r3, [r2, #0]
		}

		// --- calling slow control task
		if(fast_control_task_counter >= FAST_PER_SLOW){
 80093ce:	4b2a      	ldr	r3, [pc, #168]	; (8009478 <main+0x878>)
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	2b07      	cmp	r3, #7
 80093d4:	d909      	bls.n	80093ea <main+0x7ea>
			slow_control_task();
 80093d6:	f002 fc35 	bl	800bc44 <slow_control_task>

			fast_control_task_counter = 0;
 80093da:	4b27      	ldr	r3, [pc, #156]	; (8009478 <main+0x878>)
 80093dc:	2200      	movs	r2, #0
 80093de:	601a      	str	r2, [r3, #0]
			slow_control_task_counter ++;
 80093e0:	4b26      	ldr	r3, [pc, #152]	; (800947c <main+0x87c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a25      	ldr	r2, [pc, #148]	; (800947c <main+0x87c>)
 80093e8:	6013      	str	r3, [r2, #0]
		}

		// --- calling print task
		static uint32_t last_ui_task_cnt = 0;
		uint32_t t_since_last_ui_task = TIM5->CNT - last_ui_task_cnt; //TIM5 100kHz = 10mus
 80093ea:	4b25      	ldr	r3, [pc, #148]	; (8009480 <main+0x880>)
 80093ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093ee:	4b25      	ldr	r3, [pc, #148]	; (8009484 <main+0x884>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	1ad3      	subs	r3, r2, r3
 80093f4:	633b      	str	r3, [r7, #48]	; 0x30
		if (t_since_last_ui_task > 2000000000){
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	4a23      	ldr	r2, [pc, #140]	; (8009488 <main+0x888>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d902      	bls.n	8009404 <main+0x804>
			t_since_last_ui_task -= 0xFFFFFFFF; // TODO needs to be checked
 80093fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009400:	3301      	adds	r3, #1
 8009402:	633b      	str	r3, [r7, #48]	; 0x30
		}
		if(t_since_last_ui_task > 20000){ //5Hz
 8009404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009406:	f644 6220 	movw	r2, #20000	; 0x4e20
 800940a:	4293      	cmp	r3, r2
 800940c:	d9c7      	bls.n	800939e <main+0x79e>
			last_ui_task_cnt = TIM5->CNT;
 800940e:	4b1c      	ldr	r3, [pc, #112]	; (8009480 <main+0x880>)
 8009410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009412:	e03b      	b.n	800948c <main+0x88c>
 8009414:	20000e5c 	.word	0x20000e5c
 8009418:	20000030 	.word	0x20000030
 800941c:	20000730 	.word	0x20000730
 8009420:	20000034 	.word	0x20000034
 8009424:	20000ea4 	.word	0x20000ea4
 8009428:	20000038 	.word	0x20000038
 800942c:	43000000 	.word	0x43000000
 8009430:	0801259c 	.word	0x0801259c
 8009434:	20001ab0 	.word	0x20001ab0
 8009438:	200006f0 	.word	0x200006f0
 800943c:	20000c94 	.word	0x20000c94
 8009440:	20000d7c 	.word	0x20000d7c
 8009444:	3c872b02 	.word	0x3c872b02
 8009448:	200002b0 	.word	0x200002b0
 800944c:	44fdc000 	.word	0x44fdc000
 8009450:	4500c000 	.word	0x4500c000
 8009454:	44f8c000 	.word	0x44f8c000
 8009458:	44fc8000 	.word	0x44fc8000
 800945c:	2000278c 	.word	0x2000278c
 8009460:	080125b8 	.word	0x080125b8
 8009464:	2000023d 	.word	0x2000023d
 8009468:	20000240 	.word	0x20000240
 800946c:	3c23d70a 	.word	0x3c23d70a
 8009470:	200002a0 	.word	0x200002a0
 8009474:	200002ac 	.word	0x200002ac
 8009478:	200002a4 	.word	0x200002a4
 800947c:	200002a8 	.word	0x200002a8
 8009480:	40000c00 	.word	0x40000c00
 8009484:	200002b4 	.word	0x200002b4
 8009488:	77359400 	.word	0x77359400
 800948c:	4a09      	ldr	r2, [pc, #36]	; (80094b4 <main+0x8b4>)
 800948e:	6013      	str	r3, [r2, #0]
			uint32_t time10mus = TIM5->CNT;
 8009490:	4b09      	ldr	r3, [pc, #36]	; (80094b8 <main+0x8b8>)
 8009492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009494:	627b      	str	r3, [r7, #36]	; 0x24

			keyboard_intake();
 8009496:	f002 fbdd 	bl	800bc54 <keyboard_intake>

			if (print2uart){
 800949a:	4b08      	ldr	r3, [pc, #32]	; (80094bc <main+0x8bc>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d001      	beq.n	80094a6 <main+0x8a6>
				print_task();
 80094a2:	f003 f961 	bl	800c768 <print_task>
			}
			prep_counter = 0;
 80094a6:	4b06      	ldr	r3, [pc, #24]	; (80094c0 <main+0x8c0>)
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
			ch='.';
 80094ac:	4b05      	ldr	r3, [pc, #20]	; (80094c4 <main+0x8c4>)
 80094ae:	222e      	movs	r2, #46	; 0x2e
 80094b0:	701a      	strb	r2, [r3, #0]
	{
 80094b2:	e774      	b.n	800939e <main+0x79e>
 80094b4:	200002b4 	.word	0x200002b4
 80094b8:	40000c00 	.word	0x40000c00
 80094bc:	2000000e 	.word	0x2000000e
 80094c0:	200002ac 	.word	0x200002ac
 80094c4:	2000003c 	.word	0x2000003c

080094c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b098      	sub	sp, #96	; 0x60
 80094cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80094ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80094d2:	2230      	movs	r2, #48	; 0x30
 80094d4:	2100      	movs	r1, #0
 80094d6:	4618      	mov	r0, r3
 80094d8:	f004 f928 	bl	800d72c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80094dc:	f107 031c 	add.w	r3, r7, #28
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	605a      	str	r2, [r3, #4]
 80094e6:	609a      	str	r2, [r3, #8]
 80094e8:	60da      	str	r2, [r3, #12]
 80094ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80094ec:	f107 030c 	add.w	r3, r7, #12
 80094f0:	2200      	movs	r2, #0
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	605a      	str	r2, [r3, #4]
 80094f6:	609a      	str	r2, [r3, #8]
 80094f8:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80094fa:	2300      	movs	r3, #0
 80094fc:	60bb      	str	r3, [r7, #8]
 80094fe:	4b32      	ldr	r3, [pc, #200]	; (80095c8 <SystemClock_Config+0x100>)
 8009500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009502:	4a31      	ldr	r2, [pc, #196]	; (80095c8 <SystemClock_Config+0x100>)
 8009504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009508:	6413      	str	r3, [r2, #64]	; 0x40
 800950a:	4b2f      	ldr	r3, [pc, #188]	; (80095c8 <SystemClock_Config+0x100>)
 800950c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009512:	60bb      	str	r3, [r7, #8]
 8009514:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009516:	2300      	movs	r3, #0
 8009518:	607b      	str	r3, [r7, #4]
 800951a:	4b2c      	ldr	r3, [pc, #176]	; (80095cc <SystemClock_Config+0x104>)
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a2b      	ldr	r2, [pc, #172]	; (80095cc <SystemClock_Config+0x104>)
 8009520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009524:	6013      	str	r3, [r2, #0]
 8009526:	4b29      	ldr	r3, [pc, #164]	; (80095cc <SystemClock_Config+0x104>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800952e:	607b      	str	r3, [r7, #4]
 8009530:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009532:	2309      	movs	r3, #9
 8009534:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800953a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800953c:	2301      	movs	r3, #1
 800953e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009540:	2302      	movs	r3, #2
 8009542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009544:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009548:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800954a:	2304      	movs	r3, #4
 800954c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 800954e:	23a8      	movs	r3, #168	; 0xa8
 8009550:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009552:	2302      	movs	r3, #2
 8009554:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8009556:	2307      	movs	r3, #7
 8009558:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800955a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800955e:	4618      	mov	r0, r3
 8009560:	f7fb f99e 	bl	80048a0 <HAL_RCC_OscConfig>
 8009564:	4603      	mov	r3, r0
 8009566:	2b00      	cmp	r3, #0
 8009568:	d001      	beq.n	800956e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800956a:	f003 f92b 	bl	800c7c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800956e:	230f      	movs	r3, #15
 8009570:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009572:	2302      	movs	r3, #2
 8009574:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009576:	2300      	movs	r3, #0
 8009578:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800957a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800957e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8009586:	f107 031c 	add.w	r3, r7, #28
 800958a:	2105      	movs	r1, #5
 800958c:	4618      	mov	r0, r3
 800958e:	f7fb fbf7 	bl	8004d80 <HAL_RCC_ClockConfig>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d001      	beq.n	800959c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8009598:	f003 f914 	bl	800c7c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800959c:	2302      	movs	r3, #2
 800959e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80095a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80095a4:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80095a6:	f107 030c 	add.w	r3, r7, #12
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7fb fde6 	bl	800517c <HAL_RCCEx_PeriphCLKConfig>
 80095b0:	4603      	mov	r3, r0
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d001      	beq.n	80095ba <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80095b6:	f003 f905 	bl	800c7c4 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 80095ba:	f7fb fcc7 	bl	8004f4c <HAL_RCC_EnableCSS>
}
 80095be:	bf00      	nop
 80095c0:	3760      	adds	r7, #96	; 0x60
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	40023800 	.word	0x40023800
 80095cc:	40007000 	.word	0x40007000

080095d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b090      	sub	sp, #64	; 0x40
 80095d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80095d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80095da:	2200      	movs	r2, #0
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	605a      	str	r2, [r3, #4]
 80095e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80095e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]
 80095ea:	605a      	str	r2, [r3, #4]
 80095ec:	609a      	str	r2, [r3, #8]
 80095ee:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80095f0:	1d3b      	adds	r3, r7, #4
 80095f2:	2220      	movs	r2, #32
 80095f4:	2100      	movs	r1, #0
 80095f6:	4618      	mov	r0, r3
 80095f8:	f004 f898 	bl	800d72c <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80095fc:	4b86      	ldr	r3, [pc, #536]	; (8009818 <MX_ADC1_Init+0x248>)
 80095fe:	4a87      	ldr	r2, [pc, #540]	; (800981c <MX_ADC1_Init+0x24c>)
 8009600:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009602:	4b85      	ldr	r3, [pc, #532]	; (8009818 <MX_ADC1_Init+0x248>)
 8009604:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800960a:	4b83      	ldr	r3, [pc, #524]	; (8009818 <MX_ADC1_Init+0x248>)
 800960c:	2200      	movs	r2, #0
 800960e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8009610:	4b81      	ldr	r3, [pc, #516]	; (8009818 <MX_ADC1_Init+0x248>)
 8009612:	2201      	movs	r2, #1
 8009614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8009616:	4b80      	ldr	r3, [pc, #512]	; (8009818 <MX_ADC1_Init+0x248>)
 8009618:	2201      	movs	r2, #1
 800961a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800961c:	4b7e      	ldr	r3, [pc, #504]	; (8009818 <MX_ADC1_Init+0x248>)
 800961e:	2200      	movs	r2, #0
 8009620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8009624:	4b7c      	ldr	r3, [pc, #496]	; (8009818 <MX_ADC1_Init+0x248>)
 8009626:	2200      	movs	r2, #0
 8009628:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800962a:	4b7b      	ldr	r3, [pc, #492]	; (8009818 <MX_ADC1_Init+0x248>)
 800962c:	4a7c      	ldr	r2, [pc, #496]	; (8009820 <MX_ADC1_Init+0x250>)
 800962e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009630:	4b79      	ldr	r3, [pc, #484]	; (8009818 <MX_ADC1_Init+0x248>)
 8009632:	2200      	movs	r2, #0
 8009634:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8009636:	4b78      	ldr	r3, [pc, #480]	; (8009818 <MX_ADC1_Init+0x248>)
 8009638:	2208      	movs	r2, #8
 800963a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800963c:	4b76      	ldr	r3, [pc, #472]	; (8009818 <MX_ADC1_Init+0x248>)
 800963e:	2201      	movs	r2, #1
 8009640:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8009644:	4b74      	ldr	r3, [pc, #464]	; (8009818 <MX_ADC1_Init+0x248>)
 8009646:	2200      	movs	r2, #0
 8009648:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800964a:	4873      	ldr	r0, [pc, #460]	; (8009818 <MX_ADC1_Init+0x248>)
 800964c:	f7f7 fd30 	bl	80010b0 <HAL_ADC_Init>
 8009650:	4603      	mov	r3, r0
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8009656:	f003 f8b5 	bl	800c7c4 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_INJECSIMULT;
 800965a:	2315      	movs	r3, #21
 800965c:	637b      	str	r3, [r7, #52]	; 0x34
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800965e:	2300      	movs	r3, #0
 8009660:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009662:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009666:	4619      	mov	r1, r3
 8009668:	486b      	ldr	r0, [pc, #428]	; (8009818 <MX_ADC1_Init+0x248>)
 800966a:	f7f8 fcf3 	bl	8002054 <HAL_ADCEx_MultiModeConfigChannel>
 800966e:	4603      	mov	r3, r0
 8009670:	2b00      	cmp	r3, #0
 8009672:	d001      	beq.n	8009678 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8009674:	f003 f8a6 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8009678:	230b      	movs	r3, #11
 800967a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 1;
 800967c:	2301      	movs	r3, #1
 800967e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009680:	2300      	movs	r3, #0
 8009682:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009688:	4619      	mov	r1, r3
 800968a:	4863      	ldr	r0, [pc, #396]	; (8009818 <MX_ADC1_Init+0x248>)
 800968c:	f7f7 ffae 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009690:	4603      	mov	r3, r0
 8009692:	2b00      	cmp	r3, #0
 8009694:	d001      	beq.n	800969a <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8009696:	f003 f895 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800969a:	2305      	movs	r3, #5
 800969c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 2;
 800969e:	2302      	movs	r3, #2
 80096a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80096a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096a6:	4619      	mov	r1, r3
 80096a8:	485b      	ldr	r0, [pc, #364]	; (8009818 <MX_ADC1_Init+0x248>)
 80096aa:	f7f7 ff9f 	bl	80015ec <HAL_ADC_ConfigChannel>
 80096ae:	4603      	mov	r3, r0
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 80096b4:	f003 f886 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80096b8:	230e      	movs	r3, #14
 80096ba:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 3;
 80096bc:	2303      	movs	r3, #3
 80096be:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80096c0:	2301      	movs	r3, #1
 80096c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80096c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096c8:	4619      	mov	r1, r3
 80096ca:	4853      	ldr	r0, [pc, #332]	; (8009818 <MX_ADC1_Init+0x248>)
 80096cc:	f7f7 ff8e 	bl	80015ec <HAL_ADC_ConfigChannel>
 80096d0:	4603      	mov	r3, r0
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d001      	beq.n	80096da <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 80096d6:	f003 f875 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80096da:	2301      	movs	r3, #1
 80096dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 4;
 80096de:	2304      	movs	r3, #4
 80096e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80096e2:	2300      	movs	r3, #0
 80096e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80096e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096ea:	4619      	mov	r1, r3
 80096ec:	484a      	ldr	r0, [pc, #296]	; (8009818 <MX_ADC1_Init+0x248>)
 80096ee:	f7f7 ff7d 	bl	80015ec <HAL_ADC_ConfigChannel>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d001      	beq.n	80096fc <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 80096f8:	f003 f864 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80096fc:	2310      	movs	r3, #16
 80096fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 5;
 8009700:	2305      	movs	r3, #5
 8009702:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009704:	2301      	movs	r3, #1
 8009706:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009708:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800970c:	4619      	mov	r1, r3
 800970e:	4842      	ldr	r0, [pc, #264]	; (8009818 <MX_ADC1_Init+0x248>)
 8009710:	f7f7 ff6c 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009714:	4603      	mov	r3, r0
 8009716:	2b00      	cmp	r3, #0
 8009718:	d001      	beq.n	800971e <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 800971a:	f003 f853 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800971e:	2311      	movs	r3, #17
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 6;
 8009722:	2306      	movs	r3, #6
 8009724:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009726:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800972a:	4619      	mov	r1, r3
 800972c:	483a      	ldr	r0, [pc, #232]	; (8009818 <MX_ADC1_Init+0x248>)
 800972e:	f7f7 ff5d 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009732:	4603      	mov	r3, r0
 8009734:	2b00      	cmp	r3, #0
 8009736:	d001      	beq.n	800973c <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 8009738:	f003 f844 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 800973c:	2312      	movs	r3, #18
 800973e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 7;
 8009740:	2307      	movs	r3, #7
 8009742:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009748:	4619      	mov	r1, r3
 800974a:	4833      	ldr	r0, [pc, #204]	; (8009818 <MX_ADC1_Init+0x248>)
 800974c:	f7f7 ff4e 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009750:	4603      	mov	r3, r0
 8009752:	2b00      	cmp	r3, #0
 8009754:	d001      	beq.n	800975a <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 8009756:	f003 f835 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800975a:	2308      	movs	r3, #8
 800975c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 8;
 800975e:	2308      	movs	r3, #8
 8009760:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009766:	4619      	mov	r1, r3
 8009768:	482b      	ldr	r0, [pc, #172]	; (8009818 <MX_ADC1_Init+0x248>)
 800976a:	f7f7 ff3f 	bl	80015ec <HAL_ADC_ConfigChannel>
 800976e:	4603      	mov	r3, r0
 8009770:	2b00      	cmp	r3, #0
 8009772:	d001      	beq.n	8009778 <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8009774:	f003 f826 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8009778:	230b      	movs	r3, #11
 800977a:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 1;
 800977c:	2301      	movs	r3, #1
 800977e:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8009780:	2304      	movs	r3, #4
 8009782:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009784:	2300      	movs	r3, #0
 8009786:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 8009788:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800978c:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800978e:	2300      	movs	r3, #0
 8009790:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8009792:	2300      	movs	r3, #0
 8009794:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8009796:	2300      	movs	r3, #0
 8009798:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800979a:	2300      	movs	r3, #0
 800979c:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800979e:	1d3b      	adds	r3, r7, #4
 80097a0:	4619      	mov	r1, r3
 80097a2:	481d      	ldr	r0, [pc, #116]	; (8009818 <MX_ADC1_Init+0x248>)
 80097a4:	f7f8 fac2 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d001      	beq.n	80097b2 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 80097ae:	f003 f809 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 80097b2:	2305      	movs	r3, #5
 80097b4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 2;
 80097b6:	2302      	movs	r3, #2
 80097b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80097ba:	1d3b      	adds	r3, r7, #4
 80097bc:	4619      	mov	r1, r3
 80097be:	4816      	ldr	r0, [pc, #88]	; (8009818 <MX_ADC1_Init+0x248>)
 80097c0:	f7f8 fab4 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 80097c4:	4603      	mov	r3, r0
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 80097ca:	f002 fffb 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 80097ce:	230e      	movs	r3, #14
 80097d0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 3;
 80097d2:	2303      	movs	r3, #3
 80097d4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80097d6:	2301      	movs	r3, #1
 80097d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80097da:	1d3b      	adds	r3, r7, #4
 80097dc:	4619      	mov	r1, r3
 80097de:	480e      	ldr	r0, [pc, #56]	; (8009818 <MX_ADC1_Init+0x248>)
 80097e0:	f7f8 faa4 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <MX_ADC1_Init+0x21e>
  {
    Error_Handler();
 80097ea:	f002 ffeb 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 80097ee:	2301      	movs	r3, #1
 80097f0:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 4;
 80097f2:	2304      	movs	r3, #4
 80097f4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80097f6:	2300      	movs	r3, #0
 80097f8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80097fa:	1d3b      	adds	r3, r7, #4
 80097fc:	4619      	mov	r1, r3
 80097fe:	4806      	ldr	r0, [pc, #24]	; (8009818 <MX_ADC1_Init+0x248>)
 8009800:	f7f8 fa94 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d001      	beq.n	800980e <MX_ADC1_Init+0x23e>
  {
    Error_Handler();
 800980a:	f002 ffdb 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800980e:	bf00      	nop
 8009810:	3740      	adds	r7, #64	; 0x40
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	20000e5c 	.word	0x20000e5c
 800981c:	40012000 	.word	0x40012000
 8009820:	0f000001 	.word	0x0f000001

08009824 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b08c      	sub	sp, #48	; 0x30
 8009828:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800982a:	f107 0320 	add.w	r3, r7, #32
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	605a      	str	r2, [r3, #4]
 8009834:	609a      	str	r2, [r3, #8]
 8009836:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009838:	463b      	mov	r3, r7
 800983a:	2220      	movs	r2, #32
 800983c:	2100      	movs	r1, #0
 800983e:	4618      	mov	r0, r3
 8009840:	f003 ff74 	bl	800d72c <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8009844:	4b5a      	ldr	r3, [pc, #360]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009846:	4a5b      	ldr	r2, [pc, #364]	; (80099b4 <MX_ADC2_Init+0x190>)
 8009848:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800984a:	4b59      	ldr	r3, [pc, #356]	; (80099b0 <MX_ADC2_Init+0x18c>)
 800984c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009850:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8009852:	4b57      	ldr	r3, [pc, #348]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009854:	2200      	movs	r2, #0
 8009856:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 8009858:	4b55      	ldr	r3, [pc, #340]	; (80099b0 <MX_ADC2_Init+0x18c>)
 800985a:	2201      	movs	r2, #1
 800985c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 800985e:	4b54      	ldr	r3, [pc, #336]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009860:	2201      	movs	r2, #1
 8009862:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8009864:	4b52      	ldr	r3, [pc, #328]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800986c:	4b50      	ldr	r3, [pc, #320]	; (80099b0 <MX_ADC2_Init+0x18c>)
 800986e:	2200      	movs	r2, #0
 8009870:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8009872:	4b4f      	ldr	r3, [pc, #316]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009874:	2204      	movs	r2, #4
 8009876:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8009878:	4b4d      	ldr	r3, [pc, #308]	; (80099b0 <MX_ADC2_Init+0x18c>)
 800987a:	2201      	movs	r2, #1
 800987c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8009880:	4b4b      	ldr	r3, [pc, #300]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009882:	2200      	movs	r2, #0
 8009884:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8009886:	484a      	ldr	r0, [pc, #296]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009888:	f7f7 fc12 	bl	80010b0 <HAL_ADC_Init>
 800988c:	4603      	mov	r3, r0
 800988e:	2b00      	cmp	r3, #0
 8009890:	d001      	beq.n	8009896 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8009892:	f002 ff97 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8009896:	230c      	movs	r3, #12
 8009898:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800989a:	2301      	movs	r3, #1
 800989c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800989e:	2300      	movs	r3, #0
 80098a0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80098a2:	f107 0320 	add.w	r3, r7, #32
 80098a6:	4619      	mov	r1, r3
 80098a8:	4841      	ldr	r0, [pc, #260]	; (80099b0 <MX_ADC2_Init+0x18c>)
 80098aa:	f7f7 fe9f 	bl	80015ec <HAL_ADC_ConfigChannel>
 80098ae:	4603      	mov	r3, r0
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d001      	beq.n	80098b8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 80098b4:	f002 ff86 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80098b8:	2304      	movs	r3, #4
 80098ba:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 80098bc:	2302      	movs	r3, #2
 80098be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80098c0:	f107 0320 	add.w	r3, r7, #32
 80098c4:	4619      	mov	r1, r3
 80098c6:	483a      	ldr	r0, [pc, #232]	; (80099b0 <MX_ADC2_Init+0x18c>)
 80098c8:	f7f7 fe90 	bl	80015ec <HAL_ADC_ConfigChannel>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 80098d2:	f002 ff77 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80098d6:	230f      	movs	r3, #15
 80098d8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 80098da:	2303      	movs	r3, #3
 80098dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80098de:	2301      	movs	r3, #1
 80098e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80098e2:	f107 0320 	add.w	r3, r7, #32
 80098e6:	4619      	mov	r1, r3
 80098e8:	4831      	ldr	r0, [pc, #196]	; (80099b0 <MX_ADC2_Init+0x18c>)
 80098ea:	f7f7 fe7f 	bl	80015ec <HAL_ADC_ConfigChannel>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 80098f4:	f002 ff66 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80098f8:	2302      	movs	r3, #2
 80098fa:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 80098fc:	2304      	movs	r3, #4
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009900:	2300      	movs	r3, #0
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009904:	f107 0320 	add.w	r3, r7, #32
 8009908:	4619      	mov	r1, r3
 800990a:	4829      	ldr	r0, [pc, #164]	; (80099b0 <MX_ADC2_Init+0x18c>)
 800990c:	f7f7 fe6e 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <MX_ADC2_Init+0xf6>
  {
    Error_Handler();
 8009916:	f002 ff55 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800991a:	230c      	movs	r3, #12
 800991c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800991e:	2301      	movs	r3, #1
 8009920:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8009922:	2304      	movs	r3, #4
 8009924:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009926:	2300      	movs	r3, #0
 8009928:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800992a:	2300      	movs	r3, #0
 800992c:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800992e:	2300      	movs	r3, #0
 8009930:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8009936:	463b      	mov	r3, r7
 8009938:	4619      	mov	r1, r3
 800993a:	481d      	ldr	r0, [pc, #116]	; (80099b0 <MX_ADC2_Init+0x18c>)
 800993c:	f7f8 f9f6 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 8009940:	4603      	mov	r3, r0
 8009942:	2b00      	cmp	r3, #0
 8009944:	d001      	beq.n	800994a <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 8009946:	f002 ff3d 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800994a:	2304      	movs	r3, #4
 800994c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800994e:	2302      	movs	r3, #2
 8009950:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8009952:	463b      	mov	r3, r7
 8009954:	4619      	mov	r1, r3
 8009956:	4816      	ldr	r0, [pc, #88]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009958:	f7f8 f9e8 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 800995c:	4603      	mov	r3, r0
 800995e:	2b00      	cmp	r3, #0
 8009960:	d001      	beq.n	8009966 <MX_ADC2_Init+0x142>
  {
    Error_Handler();
 8009962:	f002 ff2f 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 8009966:	230f      	movs	r3, #15
 8009968:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800996a:	2303      	movs	r3, #3
 800996c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 800996e:	2301      	movs	r3, #1
 8009970:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8009972:	463b      	mov	r3, r7
 8009974:	4619      	mov	r1, r3
 8009976:	480e      	ldr	r0, [pc, #56]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009978:	f7f8 f9d8 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 800997c:	4603      	mov	r3, r0
 800997e:	2b00      	cmp	r3, #0
 8009980:	d001      	beq.n	8009986 <MX_ADC2_Init+0x162>
  {
    Error_Handler();
 8009982:	f002 ff1f 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 8009986:	2302      	movs	r3, #2
 8009988:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800998a:	2304      	movs	r3, #4
 800998c:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800998e:	2300      	movs	r3, #0
 8009990:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8009992:	463b      	mov	r3, r7
 8009994:	4619      	mov	r1, r3
 8009996:	4806      	ldr	r0, [pc, #24]	; (80099b0 <MX_ADC2_Init+0x18c>)
 8009998:	f7f8 f9c8 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 80099a2:	f002 ff0f 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80099a6:	bf00      	nop
 80099a8:	3730      	adds	r7, #48	; 0x30
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	20000730 	.word	0x20000730
 80099b4:	40012100 	.word	0x40012100

080099b8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b08c      	sub	sp, #48	; 0x30
 80099bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80099be:	f107 0320 	add.w	r3, r7, #32
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
 80099c6:	605a      	str	r2, [r3, #4]
 80099c8:	609a      	str	r2, [r3, #8]
 80099ca:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80099cc:	463b      	mov	r3, r7
 80099ce:	2220      	movs	r2, #32
 80099d0:	2100      	movs	r1, #0
 80099d2:	4618      	mov	r0, r3
 80099d4:	f003 feaa 	bl	800d72c <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80099d8:	4b54      	ldr	r3, [pc, #336]	; (8009b2c <MX_ADC3_Init+0x174>)
 80099da:	4a55      	ldr	r2, [pc, #340]	; (8009b30 <MX_ADC3_Init+0x178>)
 80099dc:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80099de:	4b53      	ldr	r3, [pc, #332]	; (8009b2c <MX_ADC3_Init+0x174>)
 80099e0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80099e4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80099e6:	4b51      	ldr	r3, [pc, #324]	; (8009b2c <MX_ADC3_Init+0x174>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 80099ec:	4b4f      	ldr	r3, [pc, #316]	; (8009b2c <MX_ADC3_Init+0x174>)
 80099ee:	2201      	movs	r2, #1
 80099f0:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80099f2:	4b4e      	ldr	r3, [pc, #312]	; (8009b2c <MX_ADC3_Init+0x174>)
 80099f4:	2201      	movs	r2, #1
 80099f6:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80099f8:	4b4c      	ldr	r3, [pc, #304]	; (8009b2c <MX_ADC3_Init+0x174>)
 80099fa:	2200      	movs	r2, #0
 80099fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009a00:	4b4a      	ldr	r3, [pc, #296]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a02:	2200      	movs	r2, #0
 8009a04:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 8009a06:	4b49      	ldr	r3, [pc, #292]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a08:	2204      	movs	r2, #4
 8009a0a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8009a0c:	4b47      	ldr	r3, [pc, #284]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8009a14:	4b45      	ldr	r3, [pc, #276]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a16:	2200      	movs	r2, #0
 8009a18:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8009a1a:	4844      	ldr	r0, [pc, #272]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a1c:	f7f7 fb48 	bl	80010b0 <HAL_ADC_Init>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 8009a26:	f002 fecd 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8009a2a:	230d      	movs	r3, #13
 8009a2c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009a32:	2301      	movs	r3, #1
 8009a34:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009a36:	f107 0320 	add.w	r3, r7, #32
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	483b      	ldr	r0, [pc, #236]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a3e:	f7f7 fdd5 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d001      	beq.n	8009a4c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 8009a48:	f002 febc 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 2;
 8009a4c:	2302      	movs	r3, #2
 8009a4e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009a50:	f107 0320 	add.w	r3, r7, #32
 8009a54:	4619      	mov	r1, r3
 8009a56:	4835      	ldr	r0, [pc, #212]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a58:	f7f7 fdc8 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d001      	beq.n	8009a66 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8009a62:	f002 feaf 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8009a66:	2303      	movs	r3, #3
 8009a68:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 8009a6a:	2303      	movs	r3, #3
 8009a6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009a6e:	f107 0320 	add.w	r3, r7, #32
 8009a72:	4619      	mov	r1, r3
 8009a74:	482d      	ldr	r0, [pc, #180]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a76:	f7f7 fdb9 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009a7a:	4603      	mov	r3, r0
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8009a80:	f002 fea0 	bl	800c7c4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 4;
 8009a84:	2304      	movs	r3, #4
 8009a86:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009a88:	f107 0320 	add.w	r3, r7, #32
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	4827      	ldr	r0, [pc, #156]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009a90:	f7f7 fdac 	bl	80015ec <HAL_ADC_ConfigChannel>
 8009a94:	4603      	mov	r3, r0
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d001      	beq.n	8009a9e <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 8009a9a:	f002 fe93 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8009a9e:	230d      	movs	r3, #13
 8009aa0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8009aa6:	2304      	movs	r3, #4
 8009aa8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8009aae:	2300      	movs	r3, #0
 8009ab0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009aba:	463b      	mov	r3, r7
 8009abc:	4619      	mov	r1, r3
 8009abe:	481b      	ldr	r0, [pc, #108]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009ac0:	f7f8 f934 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 8009aca:	f002 fe7b 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedRank = 2;
 8009ace:	2302      	movs	r3, #2
 8009ad0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009ad2:	463b      	mov	r3, r7
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	4815      	ldr	r0, [pc, #84]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009ad8:	f7f8 f928 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 8009adc:	4603      	mov	r3, r0
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d001      	beq.n	8009ae6 <MX_ADC3_Init+0x12e>
  {
    Error_Handler();
 8009ae2:	f002 fe6f 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8009ae6:	2303      	movs	r3, #3
 8009ae8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 8009aea:	2303      	movs	r3, #3
 8009aec:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009aee:	2301      	movs	r3, #1
 8009af0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009af2:	463b      	mov	r3, r7
 8009af4:	4619      	mov	r1, r3
 8009af6:	480d      	ldr	r0, [pc, #52]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009af8:	f7f8 f918 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 8009afc:	4603      	mov	r3, r0
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d001      	beq.n	8009b06 <MX_ADC3_Init+0x14e>
  {
    Error_Handler();
 8009b02:	f002 fe5f 	bl	800c7c4 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedRank = 4;
 8009b06:	2304      	movs	r3, #4
 8009b08:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009b0e:	463b      	mov	r3, r7
 8009b10:	4619      	mov	r1, r3
 8009b12:	4806      	ldr	r0, [pc, #24]	; (8009b2c <MX_ADC3_Init+0x174>)
 8009b14:	f7f8 f90a 	bl	8001d2c <HAL_ADCEx_InjectedConfigChannel>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d001      	beq.n	8009b22 <MX_ADC3_Init+0x16a>
  {
    Error_Handler();
 8009b1e:	f002 fe51 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8009b22:	bf00      	nop
 8009b24:	3730      	adds	r7, #48	; 0x30
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	20000ea4 	.word	0x20000ea4
 8009b30:	40012200 	.word	0x40012200

08009b34 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8009b38:	4b17      	ldr	r3, [pc, #92]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b3a:	4a18      	ldr	r2, [pc, #96]	; (8009b9c <MX_CAN1_Init+0x68>)
 8009b3c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8009b3e:	4b16      	ldr	r3, [pc, #88]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b40:	2203      	movs	r2, #3
 8009b42:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8009b44:	4b14      	ldr	r3, [pc, #80]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b46:	2200      	movs	r2, #0
 8009b48:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8009b4a:	4b13      	ldr	r3, [pc, #76]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8009b50:	4b11      	ldr	r3, [pc, #68]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b52:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8009b56:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8009b58:	4b0f      	ldr	r3, [pc, #60]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b5a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009b5e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009b60:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b62:	2200      	movs	r2, #0
 8009b64:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8009b66:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b68:	2200      	movs	r2, #0
 8009b6a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009b6c:	4b0a      	ldr	r3, [pc, #40]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b6e:	2200      	movs	r2, #0
 8009b70:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8009b72:	4b09      	ldr	r3, [pc, #36]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b74:	2200      	movs	r2, #0
 8009b76:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8009b78:	4b07      	ldr	r3, [pc, #28]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8009b7e:	4b06      	ldr	r3, [pc, #24]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009b84:	4804      	ldr	r0, [pc, #16]	; (8009b98 <MX_CAN1_Init+0x64>)
 8009b86:	f7f8 faab 	bl	80020e0 <HAL_CAN_Init>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8009b90:	f002 fe18 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8009b94:	bf00      	nop
 8009b96:	bd80      	pop	{r7, pc}
 8009b98:	20001d08 	.word	0x20001d08
 8009b9c:	40006400 	.word	0x40006400

08009ba0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009ba4:	4b12      	ldr	r3, [pc, #72]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009ba6:	4a13      	ldr	r2, [pc, #76]	; (8009bf4 <MX_I2C1_Init+0x54>)
 8009ba8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8009baa:	4b11      	ldr	r3, [pc, #68]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bac:	4a12      	ldr	r2, [pc, #72]	; (8009bf8 <MX_I2C1_Init+0x58>)
 8009bae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009bb0:	4b0f      	ldr	r3, [pc, #60]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8009bb6:	4b0e      	ldr	r3, [pc, #56]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009bbc:	4b0c      	ldr	r3, [pc, #48]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009bc2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009bc4:	4b0a      	ldr	r3, [pc, #40]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8009bca:	4b09      	ldr	r3, [pc, #36]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bcc:	2200      	movs	r2, #0
 8009bce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009bd0:	4b07      	ldr	r3, [pc, #28]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009bd6:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009bdc:	4804      	ldr	r0, [pc, #16]	; (8009bf0 <MX_I2C1_Init+0x50>)
 8009bde:	f7f9 fdbb 	bl	8003758 <HAL_I2C_Init>
 8009be2:	4603      	mov	r3, r0
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d001      	beq.n	8009bec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8009be8:	f002 fdec 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009bec:	bf00      	nop
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	20000778 	.word	0x20000778
 8009bf4:	40005400 	.word	0x40005400
 8009bf8:	000186a0 	.word	0x000186a0

08009bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009c00:	4b12      	ldr	r3, [pc, #72]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c02:	4a13      	ldr	r2, [pc, #76]	; (8009c50 <MX_I2C2_Init+0x54>)
 8009c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8009c06:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c08:	4a12      	ldr	r2, [pc, #72]	; (8009c54 <MX_I2C2_Init+0x58>)
 8009c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009c0c:	4b0f      	ldr	r3, [pc, #60]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8009c12:	4b0e      	ldr	r3, [pc, #56]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009c18:	4b0c      	ldr	r3, [pc, #48]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c1a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009c20:	4b0a      	ldr	r3, [pc, #40]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8009c26:	4b09      	ldr	r3, [pc, #36]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009c2c:	4b07      	ldr	r3, [pc, #28]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009c32:	4b06      	ldr	r3, [pc, #24]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009c38:	4804      	ldr	r0, [pc, #16]	; (8009c4c <MX_I2C2_Init+0x50>)
 8009c3a:	f7f9 fd8d 	bl	8003758 <HAL_I2C_Init>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8009c44:	f002 fdbe 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009c48:	bf00      	nop
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20000bd4 	.word	0x20000bd4
 8009c50:	40005800 	.word	0x40005800
 8009c54:	000186a0 	.word	0x000186a0

08009c58 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8009c5c:	4b0f      	ldr	r3, [pc, #60]	; (8009c9c <MX_RTC_Init+0x44>)
 8009c5e:	4a10      	ldr	r2, [pc, #64]	; (8009ca0 <MX_RTC_Init+0x48>)
 8009c60:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009c62:	4b0e      	ldr	r3, [pc, #56]	; (8009c9c <MX_RTC_Init+0x44>)
 8009c64:	2200      	movs	r2, #0
 8009c66:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8009c68:	4b0c      	ldr	r3, [pc, #48]	; (8009c9c <MX_RTC_Init+0x44>)
 8009c6a:	227f      	movs	r2, #127	; 0x7f
 8009c6c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009c6e:	4b0b      	ldr	r3, [pc, #44]	; (8009c9c <MX_RTC_Init+0x44>)
 8009c70:	22ff      	movs	r2, #255	; 0xff
 8009c72:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009c74:	4b09      	ldr	r3, [pc, #36]	; (8009c9c <MX_RTC_Init+0x44>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8009c7a:	4b08      	ldr	r3, [pc, #32]	; (8009c9c <MX_RTC_Init+0x44>)
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009c80:	4b06      	ldr	r3, [pc, #24]	; (8009c9c <MX_RTC_Init+0x44>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8009c86:	4805      	ldr	r0, [pc, #20]	; (8009c9c <MX_RTC_Init+0x44>)
 8009c88:	f7fb fb5a 	bl	8005340 <HAL_RTC_Init>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d001      	beq.n	8009c96 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8009c92:	f002 fd97 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8009c96:	bf00      	nop
 8009c98:	bd80      	pop	{r7, pc}
 8009c9a:	bf00      	nop
 8009c9c:	20000f8c 	.word	0x20000f8c
 8009ca0:	40002800 	.word	0x40002800

08009ca4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8009ca8:	4b18      	ldr	r3, [pc, #96]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009caa:	4a19      	ldr	r2, [pc, #100]	; (8009d10 <MX_SPI2_Init+0x6c>)
 8009cac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009cae:	4b17      	ldr	r3, [pc, #92]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009cb4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8009cb6:	4b15      	ldr	r3, [pc, #84]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cb8:	2200      	movs	r2, #0
 8009cba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8009cbc:	4b13      	ldr	r3, [pc, #76]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cc2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009cc4:	4b11      	ldr	r3, [pc, #68]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009cca:	4b10      	ldr	r3, [pc, #64]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009ccc:	2201      	movs	r2, #1
 8009cce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009cd0:	4b0e      	ldr	r3, [pc, #56]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cd2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009cd6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009cd8:	4b0c      	ldr	r3, [pc, #48]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cda:	2220      	movs	r2, #32
 8009cdc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009cde:	4b0b      	ldr	r3, [pc, #44]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009ce4:	4b09      	ldr	r3, [pc, #36]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009cea:	4b08      	ldr	r3, [pc, #32]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cec:	2200      	movs	r2, #0
 8009cee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009cf0:	4b06      	ldr	r3, [pc, #24]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cf2:	220a      	movs	r2, #10
 8009cf4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8009cf6:	4805      	ldr	r0, [pc, #20]	; (8009d0c <MX_SPI2_Init+0x68>)
 8009cf8:	f7fb fc07 	bl	800550a <HAL_SPI_Init>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8009d02:	f002 fd5f 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8009d06:	bf00      	nop
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20000310 	.word	0x20000310
 8009d10:	40003800 	.word	0x40003800

08009d14 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b096      	sub	sp, #88	; 0x58
 8009d18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009d1a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]
 8009d22:	605a      	str	r2, [r3, #4]
 8009d24:	609a      	str	r2, [r3, #8]
 8009d26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009d28:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	601a      	str	r2, [r3, #0]
 8009d30:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d36:	2200      	movs	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]
 8009d3a:	605a      	str	r2, [r3, #4]
 8009d3c:	609a      	str	r2, [r3, #8]
 8009d3e:	60da      	str	r2, [r3, #12]
 8009d40:	611a      	str	r2, [r3, #16]
 8009d42:	615a      	str	r2, [r3, #20]
 8009d44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8009d46:	1d3b      	adds	r3, r7, #4
 8009d48:	2220      	movs	r2, #32
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f003 fced 	bl	800d72c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8009d52:	4b57      	ldr	r3, [pc, #348]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d54:	4a57      	ldr	r2, [pc, #348]	; (8009eb4 <MX_TIM1_Init+0x1a0>)
 8009d56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8009d58:	4b55      	ldr	r3, [pc, #340]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009d5e:	4b54      	ldr	r3, [pc, #336]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8009d64:	4b52      	ldr	r3, [pc, #328]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d66:	f640 72ff 	movw	r2, #4095	; 0xfff
 8009d6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009d6c:	4b50      	ldr	r3, [pc, #320]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009d72:	4b4f      	ldr	r3, [pc, #316]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d74:	2200      	movs	r2, #0
 8009d76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009d78:	4b4d      	ldr	r3, [pc, #308]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009d7e:	484c      	ldr	r0, [pc, #304]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d80:	f7fc fa36 	bl	80061f0 <HAL_TIM_Base_Init>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8009d8a:	f002 fd1b 	bl	800c7c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d92:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009d94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8009d98:	4619      	mov	r1, r3
 8009d9a:	4845      	ldr	r0, [pc, #276]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009d9c:	f7fc ffd4 	bl	8006d48 <HAL_TIM_ConfigClockSource>
 8009da0:	4603      	mov	r3, r0
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d001      	beq.n	8009daa <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8009da6:	f002 fd0d 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8009daa:	4841      	ldr	r0, [pc, #260]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009dac:	f7fc fb06 	bl	80063bc <HAL_TIM_PWM_Init>
 8009db0:	4603      	mov	r3, r0
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8009db6:	f002 fd05 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8009dba:	483d      	ldr	r0, [pc, #244]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009dbc:	f7fc fa8b 	bl	80062d6 <HAL_TIM_OC_Init>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d001      	beq.n	8009dca <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 8009dc6:	f002 fcfd 	bl	800c7c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009dd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	4835      	ldr	r0, [pc, #212]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009dda:	f7fd fcef 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 8009dde:	4603      	mov	r3, r0
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8009de4:	f002 fcee 	bl	800c7c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009de8:	2360      	movs	r3, #96	; 0x60
 8009dea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8009dec:	2300      	movs	r3, #0
 8009dee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009df0:	2300      	movs	r3, #0
 8009df2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009df4:	2300      	movs	r3, #0
 8009df6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8009e00:	2300      	movs	r3, #0
 8009e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009e04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e08:	2200      	movs	r2, #0
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	4828      	ldr	r0, [pc, #160]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009e0e:	f7fc fed5 	bl	8006bbc <HAL_TIM_PWM_ConfigChannel>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8009e18:	f002 fcd4 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e20:	2204      	movs	r2, #4
 8009e22:	4619      	mov	r1, r3
 8009e24:	4822      	ldr	r0, [pc, #136]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009e26:	f7fc fec9 	bl	8006bbc <HAL_TIM_PWM_ConfigChannel>
 8009e2a:	4603      	mov	r3, r0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d001      	beq.n	8009e34 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8009e30:	f002 fcc8 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e38:	2208      	movs	r2, #8
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	481c      	ldr	r0, [pc, #112]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009e3e:	f7fc febd 	bl	8006bbc <HAL_TIM_PWM_ConfigChannel>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8009e48:	f002 fcbc 	bl	800c7c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8009e4c:	2330      	movs	r3, #48	; 0x30
 8009e4e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4095-1120;
 8009e50:	f640 339f 	movw	r3, #2975	; 0xb9f
 8009e54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009e5a:	220c      	movs	r2, #12
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	4814      	ldr	r0, [pc, #80]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009e60:	f7fc fdb0 	bl	80069c4 <HAL_TIM_OC_ConfigChannel>
 8009e64:	4603      	mov	r3, r0
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d001      	beq.n	8009e6e <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8009e6a:	f002 fcab 	bl	800c7c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009e72:	2300      	movs	r3, #0
 8009e74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009e76:	2300      	movs	r3, #0
 8009e78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009e7a:	2300      	movs	r3, #0
 8009e7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009e82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009e86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009e8c:	1d3b      	adds	r3, r7, #4
 8009e8e:	4619      	mov	r1, r3
 8009e90:	4807      	ldr	r0, [pc, #28]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009e92:	f7fd fd0f 	bl	80078b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8009e96:	4603      	mov	r3, r0
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d001      	beq.n	8009ea0 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8009e9c:	f002 fc92 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009ea0:	4803      	ldr	r0, [pc, #12]	; (8009eb0 <MX_TIM1_Init+0x19c>)
 8009ea2:	f003 f975 	bl	800d190 <HAL_TIM_MspPostInit>

}
 8009ea6:	bf00      	nop
 8009ea8:	3758      	adds	r7, #88	; 0x58
 8009eaa:	46bd      	mov	sp, r7
 8009eac:	bd80      	pop	{r7, pc}
 8009eae:	bf00      	nop
 8009eb0:	20000fec 	.word	0x20000fec
 8009eb4:	40010000 	.word	0x40010000

08009eb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b08e      	sub	sp, #56	; 0x38
 8009ebc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009ebe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	601a      	str	r2, [r3, #0]
 8009ec6:	605a      	str	r2, [r3, #4]
 8009ec8:	609a      	str	r2, [r3, #8]
 8009eca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ecc:	f107 0320 	add.w	r3, r7, #32
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	601a      	str	r2, [r3, #0]
 8009ed4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ed6:	1d3b      	adds	r3, r7, #4
 8009ed8:	2200      	movs	r2, #0
 8009eda:	601a      	str	r2, [r3, #0]
 8009edc:	605a      	str	r2, [r3, #4]
 8009ede:	609a      	str	r2, [r3, #8]
 8009ee0:	60da      	str	r2, [r3, #12]
 8009ee2:	611a      	str	r2, [r3, #16]
 8009ee4:	615a      	str	r2, [r3, #20]
 8009ee6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009ee8:	4b2b      	ldr	r3, [pc, #172]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009eea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009eee:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009ef0:	4b29      	ldr	r3, [pc, #164]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ef6:	4b28      	ldr	r3, [pc, #160]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009ef8:	2200      	movs	r2, #0
 8009efa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8009efc:	4b26      	ldr	r3, [pc, #152]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009efe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009f02:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009f04:	4b24      	ldr	r3, [pc, #144]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009f0a:	4b23      	ldr	r3, [pc, #140]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009f10:	4821      	ldr	r0, [pc, #132]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009f12:	f7fc f96d 	bl	80061f0 <HAL_TIM_Base_Init>
 8009f16:	4603      	mov	r3, r0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d001      	beq.n	8009f20 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8009f1c:	f002 fc52 	bl	800c7c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009f20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f24:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009f26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009f2a:	4619      	mov	r1, r3
 8009f2c:	481a      	ldr	r0, [pc, #104]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009f2e:	f7fc ff0b 	bl	8006d48 <HAL_TIM_ConfigClockSource>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d001      	beq.n	8009f3c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8009f38:	f002 fc44 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8009f3c:	4816      	ldr	r0, [pc, #88]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009f3e:	f7fc f9ca 	bl	80062d6 <HAL_TIM_OC_Init>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009f48:	f002 fc3c 	bl	800c7c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009f50:	2300      	movs	r3, #0
 8009f52:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009f54:	f107 0320 	add.w	r3, r7, #32
 8009f58:	4619      	mov	r1, r3
 8009f5a:	480f      	ldr	r0, [pc, #60]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009f5c:	f7fd fc2e 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 8009f60:	4603      	mov	r3, r0
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d001      	beq.n	8009f6a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009f66:	f002 fc2d 	bl	800c7c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009f72:	2300      	movs	r3, #0
 8009f74:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009f7a:	1d3b      	adds	r3, r7, #4
 8009f7c:	2200      	movs	r2, #0
 8009f7e:	4619      	mov	r1, r3
 8009f80:	4805      	ldr	r0, [pc, #20]	; (8009f98 <MX_TIM2_Init+0xe0>)
 8009f82:	f7fc fd1f 	bl	80069c4 <HAL_TIM_OC_ConfigChannel>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8009f8c:	f002 fc1a 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009f90:	bf00      	nop
 8009f92:	3738      	adds	r7, #56	; 0x38
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}
 8009f98:	20001c4c 	.word	0x20001c4c

08009f9c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b08e      	sub	sp, #56	; 0x38
 8009fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	601a      	str	r2, [r3, #0]
 8009faa:	605a      	str	r2, [r3, #4]
 8009fac:	609a      	str	r2, [r3, #8]
 8009fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009fb0:	f107 0320 	add.w	r3, r7, #32
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009fba:	1d3b      	adds	r3, r7, #4
 8009fbc:	2200      	movs	r2, #0
 8009fbe:	601a      	str	r2, [r3, #0]
 8009fc0:	605a      	str	r2, [r3, #4]
 8009fc2:	609a      	str	r2, [r3, #8]
 8009fc4:	60da      	str	r2, [r3, #12]
 8009fc6:	611a      	str	r2, [r3, #16]
 8009fc8:	615a      	str	r2, [r3, #20]
 8009fca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8009fcc:	4b2b      	ldr	r3, [pc, #172]	; (800a07c <MX_TIM3_Init+0xe0>)
 8009fce:	4a2c      	ldr	r2, [pc, #176]	; (800a080 <MX_TIM3_Init+0xe4>)
 8009fd0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8009fd2:	4b2a      	ldr	r3, [pc, #168]	; (800a07c <MX_TIM3_Init+0xe0>)
 8009fd4:	2253      	movs	r2, #83	; 0x53
 8009fd6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009fd8:	4b28      	ldr	r3, [pc, #160]	; (800a07c <MX_TIM3_Init+0xe0>)
 8009fda:	2200      	movs	r2, #0
 8009fdc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8009fde:	4b27      	ldr	r3, [pc, #156]	; (800a07c <MX_TIM3_Init+0xe0>)
 8009fe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009fe4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009fe6:	4b25      	ldr	r3, [pc, #148]	; (800a07c <MX_TIM3_Init+0xe0>)
 8009fe8:	2200      	movs	r2, #0
 8009fea:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009fec:	4b23      	ldr	r3, [pc, #140]	; (800a07c <MX_TIM3_Init+0xe0>)
 8009fee:	2200      	movs	r2, #0
 8009ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8009ff2:	4822      	ldr	r0, [pc, #136]	; (800a07c <MX_TIM3_Init+0xe0>)
 8009ff4:	f7fc f8fc 	bl	80061f0 <HAL_TIM_Base_Init>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d001      	beq.n	800a002 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8009ffe:	f002 fbe1 	bl	800c7c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a002:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a006:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800a008:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a00c:	4619      	mov	r1, r3
 800a00e:	481b      	ldr	r0, [pc, #108]	; (800a07c <MX_TIM3_Init+0xe0>)
 800a010:	f7fc fe9a 	bl	8006d48 <HAL_TIM_ConfigClockSource>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800a01a:	f002 fbd3 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800a01e:	4817      	ldr	r0, [pc, #92]	; (800a07c <MX_TIM3_Init+0xe0>)
 800a020:	f7fc f959 	bl	80062d6 <HAL_TIM_OC_Init>
 800a024:	4603      	mov	r3, r0
 800a026:	2b00      	cmp	r3, #0
 800a028:	d001      	beq.n	800a02e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800a02a:	f002 fbcb 	bl	800c7c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a02e:	2300      	movs	r3, #0
 800a030:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a032:	2300      	movs	r3, #0
 800a034:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800a036:	f107 0320 	add.w	r3, r7, #32
 800a03a:	4619      	mov	r1, r3
 800a03c:	480f      	ldr	r0, [pc, #60]	; (800a07c <MX_TIM3_Init+0xe0>)
 800a03e:	f7fd fbbd 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d001      	beq.n	800a04c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800a048:	f002 fbbc 	bl	800c7c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a04c:	2330      	movs	r3, #48	; 0x30
 800a04e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a050:	2300      	movs	r3, #0
 800a052:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a054:	2300      	movs	r3, #0
 800a056:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a058:	2300      	movs	r3, #0
 800a05a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a05c:	1d3b      	adds	r3, r7, #4
 800a05e:	2200      	movs	r2, #0
 800a060:	4619      	mov	r1, r3
 800a062:	4806      	ldr	r0, [pc, #24]	; (800a07c <MX_TIM3_Init+0xe0>)
 800a064:	f7fc fcae 	bl	80069c4 <HAL_TIM_OC_ConfigChannel>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d001      	beq.n	800a072 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800a06e:	f002 fba9 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800a072:	bf00      	nop
 800a074:	3738      	adds	r7, #56	; 0x38
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20000d38 	.word	0x20000d38
 800a080:	40000400 	.word	0x40000400

0800a084 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a08a:	f107 0308 	add.w	r3, r7, #8
 800a08e:	2200      	movs	r2, #0
 800a090:	601a      	str	r2, [r3, #0]
 800a092:	605a      	str	r2, [r3, #4]
 800a094:	609a      	str	r2, [r3, #8]
 800a096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a098:	463b      	mov	r3, r7
 800a09a:	2200      	movs	r2, #0
 800a09c:	601a      	str	r2, [r3, #0]
 800a09e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800a0a0:	4b1d      	ldr	r3, [pc, #116]	; (800a118 <MX_TIM5_Init+0x94>)
 800a0a2:	4a1e      	ldr	r2, [pc, #120]	; (800a11c <MX_TIM5_Init+0x98>)
 800a0a4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 800a0a6:	4b1c      	ldr	r3, [pc, #112]	; (800a118 <MX_TIM5_Init+0x94>)
 800a0a8:	f240 3247 	movw	r2, #839	; 0x347
 800a0ac:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ae:	4b1a      	ldr	r3, [pc, #104]	; (800a118 <MX_TIM5_Init+0x94>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800a0b4:	4b18      	ldr	r3, [pc, #96]	; (800a118 <MX_TIM5_Init+0x94>)
 800a0b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0ba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a0bc:	4b16      	ldr	r3, [pc, #88]	; (800a118 <MX_TIM5_Init+0x94>)
 800a0be:	2200      	movs	r2, #0
 800a0c0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0c2:	4b15      	ldr	r3, [pc, #84]	; (800a118 <MX_TIM5_Init+0x94>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800a0c8:	4813      	ldr	r0, [pc, #76]	; (800a118 <MX_TIM5_Init+0x94>)
 800a0ca:	f7fc f891 	bl	80061f0 <HAL_TIM_Base_Init>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d001      	beq.n	800a0d8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800a0d4:	f002 fb76 	bl	800c7c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800a0de:	f107 0308 	add.w	r3, r7, #8
 800a0e2:	4619      	mov	r1, r3
 800a0e4:	480c      	ldr	r0, [pc, #48]	; (800a118 <MX_TIM5_Init+0x94>)
 800a0e6:	f7fc fe2f 	bl	8006d48 <HAL_TIM_ConfigClockSource>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d001      	beq.n	800a0f4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800a0f0:	f002 fb68 	bl	800c7c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800a0fc:	463b      	mov	r3, r7
 800a0fe:	4619      	mov	r1, r3
 800a100:	4805      	ldr	r0, [pc, #20]	; (800a118 <MX_TIM5_Init+0x94>)
 800a102:	f7fd fb5b 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 800a106:	4603      	mov	r3, r0
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d001      	beq.n	800a110 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800a10c:	f002 fb5a 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800a110:	bf00      	nop
 800a112:	3718      	adds	r7, #24
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}
 800a118:	20000cf4 	.word	0x20000cf4
 800a11c:	40000c00 	.word	0x40000c00

0800a120 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b082      	sub	sp, #8
 800a124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a126:	463b      	mov	r3, r7
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800a12e:	4b15      	ldr	r3, [pc, #84]	; (800a184 <MX_TIM6_Init+0x64>)
 800a130:	4a15      	ldr	r2, [pc, #84]	; (800a188 <MX_TIM6_Init+0x68>)
 800a132:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800a134:	4b13      	ldr	r3, [pc, #76]	; (800a184 <MX_TIM6_Init+0x64>)
 800a136:	2253      	movs	r2, #83	; 0x53
 800a138:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a13a:	4b12      	ldr	r3, [pc, #72]	; (800a184 <MX_TIM6_Init+0x64>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800a140:	4b10      	ldr	r3, [pc, #64]	; (800a184 <MX_TIM6_Init+0x64>)
 800a142:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a146:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a148:	4b0e      	ldr	r3, [pc, #56]	; (800a184 <MX_TIM6_Init+0x64>)
 800a14a:	2200      	movs	r2, #0
 800a14c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800a14e:	480d      	ldr	r0, [pc, #52]	; (800a184 <MX_TIM6_Init+0x64>)
 800a150:	f7fc f84e 	bl	80061f0 <HAL_TIM_Base_Init>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d001      	beq.n	800a15e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800a15a:	f002 fb33 	bl	800c7c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a15e:	2300      	movs	r3, #0
 800a160:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a162:	2300      	movs	r3, #0
 800a164:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800a166:	463b      	mov	r3, r7
 800a168:	4619      	mov	r1, r3
 800a16a:	4806      	ldr	r0, [pc, #24]	; (800a184 <MX_TIM6_Init+0x64>)
 800a16c:	f7fd fb26 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 800a170:	4603      	mov	r3, r0
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800a176:	f002 fb25 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800a17a:	bf00      	nop
 800a17c:	3708      	adds	r7, #8
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000fac 	.word	0x20000fac
 800a188:	40001000 	.word	0x40001000

0800a18c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b08c      	sub	sp, #48	; 0x30
 800a190:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800a192:	f107 030c 	add.w	r3, r7, #12
 800a196:	2224      	movs	r2, #36	; 0x24
 800a198:	2100      	movs	r1, #0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f003 fac6 	bl	800d72c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a1a0:	1d3b      	adds	r3, r7, #4
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
 800a1a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800a1a8:	4b22      	ldr	r3, [pc, #136]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a1aa:	4a23      	ldr	r2, [pc, #140]	; (800a238 <MX_TIM8_Init+0xac>)
 800a1ac:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800a1ae:	4b21      	ldr	r3, [pc, #132]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a1b4:	4b1f      	ldr	r3, [pc, #124]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3999;
 800a1ba:	4b1e      	ldr	r3, [pc, #120]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a1bc:	f640 729f 	movw	r2, #3999	; 0xf9f
 800a1c0:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a1c2:	4b1c      	ldr	r3, [pc, #112]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800a1c8:	4b1a      	ldr	r3, [pc, #104]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a1ce:	4b19      	ldr	r3, [pc, #100]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800a1d4:	2303      	movs	r3, #3
 800a1d6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800a1d8:	2300      	movs	r3, #0
 800a1da:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800a1f8:	f107 030c 	add.w	r3, r7, #12
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	480d      	ldr	r0, [pc, #52]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a200:	f7fc f9ee 	bl	80065e0 <HAL_TIM_Encoder_Init>
 800a204:	4603      	mov	r3, r0
 800a206:	2b00      	cmp	r3, #0
 800a208:	d001      	beq.n	800a20e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800a20a:	f002 fadb 	bl	800c7c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a20e:	2320      	movs	r3, #32
 800a210:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a212:	2300      	movs	r3, #0
 800a214:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800a216:	1d3b      	adds	r3, r7, #4
 800a218:	4619      	mov	r1, r3
 800a21a:	4806      	ldr	r0, [pc, #24]	; (800a234 <MX_TIM8_Init+0xa8>)
 800a21c:	f7fd face 	bl	80077bc <HAL_TIMEx_MasterConfigSynchronization>
 800a220:	4603      	mov	r3, r0
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800a226:	f002 facd 	bl	800c7c4 <Error_Handler>
	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 800a22a:	bf00      	nop
 800a22c:	3730      	adds	r7, #48	; 0x30
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
 800a232:	bf00      	nop
 800a234:	200006b0 	.word	0x200006b0
 800a238:	40010400 	.word	0x40010400

0800a23c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b08c      	sub	sp, #48	; 0x30
 800a240:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a242:	f107 0320 	add.w	r3, r7, #32
 800a246:	2200      	movs	r2, #0
 800a248:	601a      	str	r2, [r3, #0]
 800a24a:	605a      	str	r2, [r3, #4]
 800a24c:	609a      	str	r2, [r3, #8]
 800a24e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a250:	1d3b      	adds	r3, r7, #4
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
 800a256:	605a      	str	r2, [r3, #4]
 800a258:	609a      	str	r2, [r3, #8]
 800a25a:	60da      	str	r2, [r3, #12]
 800a25c:	611a      	str	r2, [r3, #16]
 800a25e:	615a      	str	r2, [r3, #20]
 800a260:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800a262:	4b2d      	ldr	r3, [pc, #180]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a264:	4a2d      	ldr	r2, [pc, #180]	; (800a31c <MX_TIM9_Init+0xe0>)
 800a266:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 800a268:	4b2b      	ldr	r3, [pc, #172]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a26a:	22a7      	movs	r2, #167	; 0xa7
 800a26c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a26e:	4b2a      	ldr	r3, [pc, #168]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a270:	2200      	movs	r2, #0
 800a272:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 800a274:	4b28      	ldr	r3, [pc, #160]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a276:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a27a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a27c:	4b26      	ldr	r3, [pc, #152]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a27e:	2200      	movs	r2, #0
 800a280:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a282:	4b25      	ldr	r3, [pc, #148]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a284:	2200      	movs	r2, #0
 800a286:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800a288:	4823      	ldr	r0, [pc, #140]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a28a:	f7fb ffb1 	bl	80061f0 <HAL_TIM_Base_Init>
 800a28e:	4603      	mov	r3, r0
 800a290:	2b00      	cmp	r3, #0
 800a292:	d001      	beq.n	800a298 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800a294:	f002 fa96 	bl	800c7c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a298:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a29c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800a29e:	f107 0320 	add.w	r3, r7, #32
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	481c      	ldr	r0, [pc, #112]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a2a6:	f7fc fd4f 	bl	8006d48 <HAL_TIM_ConfigClockSource>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d001      	beq.n	800a2b4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800a2b0:	f002 fa88 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800a2b4:	4818      	ldr	r0, [pc, #96]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a2b6:	f7fc f881 	bl	80063bc <HAL_TIM_PWM_Init>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800a2c0:	f002 fa80 	bl	800c7c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a2c4:	2360      	movs	r3, #96	; 0x60
 800a2c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800a2c8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a2cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a2d6:	1d3b      	adds	r3, r7, #4
 800a2d8:	2200      	movs	r2, #0
 800a2da:	4619      	mov	r1, r3
 800a2dc:	480e      	ldr	r0, [pc, #56]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a2de:	f7fc fc6d 	bl	8006bbc <HAL_TIM_PWM_ConfigChannel>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d001      	beq.n	800a2ec <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800a2e8:	f002 fa6c 	bl	800c7c4 <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800a2ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800a2f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a2f2:	1d3b      	adds	r3, r7, #4
 800a2f4:	2204      	movs	r2, #4
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	4807      	ldr	r0, [pc, #28]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a2fa:	f7fc fc5f 	bl	8006bbc <HAL_TIM_PWM_ConfigChannel>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d001      	beq.n	800a308 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 800a304:	f002 fa5e 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800a308:	4803      	ldr	r0, [pc, #12]	; (800a318 <MX_TIM9_Init+0xdc>)
 800a30a:	f002 ff41 	bl	800d190 <HAL_TIM_MspPostInit>

}
 800a30e:	bf00      	nop
 800a310:	3730      	adds	r7, #48	; 0x30
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20001a08 	.word	0x20001a08
 800a31c:	40014000 	.word	0x40014000

0800a320 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b08c      	sub	sp, #48	; 0x30
 800a324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a326:	f107 0320 	add.w	r3, r7, #32
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	605a      	str	r2, [r3, #4]
 800a330:	609a      	str	r2, [r3, #8]
 800a332:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a334:	1d3b      	adds	r3, r7, #4
 800a336:	2200      	movs	r2, #0
 800a338:	601a      	str	r2, [r3, #0]
 800a33a:	605a      	str	r2, [r3, #4]
 800a33c:	609a      	str	r2, [r3, #8]
 800a33e:	60da      	str	r2, [r3, #12]
 800a340:	611a      	str	r2, [r3, #16]
 800a342:	615a      	str	r2, [r3, #20]
 800a344:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800a346:	4b24      	ldr	r3, [pc, #144]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a348:	4a24      	ldr	r2, [pc, #144]	; (800a3dc <MX_TIM12_Init+0xbc>)
 800a34a:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 7;
 800a34c:	4b22      	ldr	r3, [pc, #136]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a34e:	2207      	movs	r2, #7
 800a350:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a352:	4b21      	ldr	r3, [pc, #132]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a354:	2200      	movs	r2, #0
 800a356:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800a358:	4b1f      	ldr	r3, [pc, #124]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a35a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a35e:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a360:	4b1d      	ldr	r3, [pc, #116]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a362:	2200      	movs	r2, #0
 800a364:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a366:	4b1c      	ldr	r3, [pc, #112]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a368:	2200      	movs	r2, #0
 800a36a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800a36c:	481a      	ldr	r0, [pc, #104]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a36e:	f7fb ff3f 	bl	80061f0 <HAL_TIM_Base_Init>
 800a372:	4603      	mov	r3, r0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d001      	beq.n	800a37c <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800a378:	f002 fa24 	bl	800c7c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a37c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a380:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800a382:	f107 0320 	add.w	r3, r7, #32
 800a386:	4619      	mov	r1, r3
 800a388:	4813      	ldr	r0, [pc, #76]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a38a:	f7fc fcdd 	bl	8006d48 <HAL_TIM_ConfigClockSource>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d001      	beq.n	800a398 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800a394:	f002 fa16 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 800a398:	480f      	ldr	r0, [pc, #60]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a39a:	f7fb ff9c 	bl	80062d6 <HAL_TIM_OC_Init>
 800a39e:	4603      	mov	r3, r0
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d001      	beq.n	800a3a8 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800a3a4:	f002 fa0e 	bl	800c7c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a3b8:	1d3b      	adds	r3, r7, #4
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	4619      	mov	r1, r3
 800a3be:	4806      	ldr	r0, [pc, #24]	; (800a3d8 <MX_TIM12_Init+0xb8>)
 800a3c0:	f7fc fb00 	bl	80069c4 <HAL_TIM_OC_ConfigChannel>
 800a3c4:	4603      	mov	r3, r0
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d001      	beq.n	800a3ce <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800a3ca:	f002 f9fb 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800a3ce:	bf00      	nop
 800a3d0:	3730      	adds	r7, #48	; 0x30
 800a3d2:	46bd      	mov	sp, r7
 800a3d4:	bd80      	pop	{r7, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20001d30 	.word	0x20001d30
 800a3dc:	40001800 	.word	0x40001800

0800a3e0 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800a3e6:	463b      	mov	r3, r7
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	601a      	str	r2, [r3, #0]
 800a3ec:	605a      	str	r2, [r3, #4]
 800a3ee:	609a      	str	r2, [r3, #8]
 800a3f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800a3f2:	4b1c      	ldr	r3, [pc, #112]	; (800a464 <MX_TIM13_Init+0x84>)
 800a3f4:	4a1c      	ldr	r2, [pc, #112]	; (800a468 <MX_TIM13_Init+0x88>)
 800a3f6:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800a3f8:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <MX_TIM13_Init+0x84>)
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3fe:	4b19      	ldr	r3, [pc, #100]	; (800a464 <MX_TIM13_Init+0x84>)
 800a400:	2200      	movs	r2, #0
 800a402:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 800a404:	4b17      	ldr	r3, [pc, #92]	; (800a464 <MX_TIM13_Init+0x84>)
 800a406:	2200      	movs	r2, #0
 800a408:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a40a:	4b16      	ldr	r3, [pc, #88]	; (800a464 <MX_TIM13_Init+0x84>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a410:	4b14      	ldr	r3, [pc, #80]	; (800a464 <MX_TIM13_Init+0x84>)
 800a412:	2200      	movs	r2, #0
 800a414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800a416:	4813      	ldr	r0, [pc, #76]	; (800a464 <MX_TIM13_Init+0x84>)
 800a418:	f7fb feea 	bl	80061f0 <HAL_TIM_Base_Init>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d001      	beq.n	800a426 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 800a422:	f002 f9cf 	bl	800c7c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800a426:	480f      	ldr	r0, [pc, #60]	; (800a464 <MX_TIM13_Init+0x84>)
 800a428:	f7fc f83c 	bl	80064a4 <HAL_TIM_IC_Init>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 800a432:	f002 f9c7 	bl	800c7c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800a436:	2300      	movs	r3, #0
 800a438:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800a43a:	2301      	movs	r3, #1
 800a43c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800a43e:	2300      	movs	r3, #0
 800a440:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800a442:	2300      	movs	r3, #0
 800a444:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800a446:	463b      	mov	r3, r7
 800a448:	2200      	movs	r2, #0
 800a44a:	4619      	mov	r1, r3
 800a44c:	4805      	ldr	r0, [pc, #20]	; (800a464 <MX_TIM13_Init+0x84>)
 800a44e:	f7fc fb19 	bl	8006a84 <HAL_TIM_IC_ConfigChannel>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 800a458:	f002 f9b4 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800a45c:	bf00      	nop
 800a45e:	3710      	adds	r7, #16
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	20000eec 	.word	0x20000eec
 800a468:	40001c00 	.word	0x40001c00

0800a46c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800a470:	4b11      	ldr	r3, [pc, #68]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a472:	4a12      	ldr	r2, [pc, #72]	; (800a4bc <MX_USART3_UART_Init+0x50>)
 800a474:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800a476:	4b10      	ldr	r3, [pc, #64]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a478:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a47c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800a47e:	4b0e      	ldr	r3, [pc, #56]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a480:	2200      	movs	r2, #0
 800a482:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800a484:	4b0c      	ldr	r3, [pc, #48]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a486:	2200      	movs	r2, #0
 800a488:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800a48a:	4b0b      	ldr	r3, [pc, #44]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a48c:	2200      	movs	r2, #0
 800a48e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800a490:	4b09      	ldr	r3, [pc, #36]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a492:	220c      	movs	r2, #12
 800a494:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a496:	4b08      	ldr	r3, [pc, #32]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a498:	2200      	movs	r2, #0
 800a49a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800a49c:	4b06      	ldr	r3, [pc, #24]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800a4a2:	4805      	ldr	r0, [pc, #20]	; (800a4b8 <MX_USART3_UART_Init+0x4c>)
 800a4a4:	f7fd fa91 	bl	80079ca <HAL_UART_Init>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800a4ae:	f002 f989 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800a4b2:	bf00      	nop
 800a4b4:	bd80      	pop	{r7, pc}
 800a4b6:	bf00      	nop
 800a4b8:	200006f0 	.word	0x200006f0
 800a4bc:	40004800 	.word	0x40004800

0800a4c0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4c4:	4b14      	ldr	r3, [pc, #80]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4c6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4ca:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a4cc:	4b12      	ldr	r3, [pc, #72]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4ce:	2204      	movs	r2, #4
 800a4d0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4d2:	4b11      	ldr	r3, [pc, #68]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4d8:	4b0f      	ldr	r3, [pc, #60]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4de:	4b0e      	ldr	r3, [pc, #56]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4e0:	2202      	movs	r2, #2
 800a4e2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4f0:	4b09      	ldr	r3, [pc, #36]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4f6:	4b08      	ldr	r3, [pc, #32]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4fc:	4b06      	ldr	r3, [pc, #24]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a502:	4805      	ldr	r0, [pc, #20]	; (800a518 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800a504:	f7fa f8af 	bl	8004666 <HAL_PCD_Init>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800a50e:	f002 f959 	bl	800c7c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800a512:	bf00      	nop
 800a514:	bd80      	pop	{r7, pc}
 800a516:	bf00      	nop
 800a518:	200007cc 	.word	0x200007cc

0800a51c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b082      	sub	sp, #8
 800a520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a522:	2300      	movs	r3, #0
 800a524:	607b      	str	r3, [r7, #4]
 800a526:	4b1f      	ldr	r3, [pc, #124]	; (800a5a4 <MX_DMA_Init+0x88>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52a:	4a1e      	ldr	r2, [pc, #120]	; (800a5a4 <MX_DMA_Init+0x88>)
 800a52c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a530:	6313      	str	r3, [r2, #48]	; 0x30
 800a532:	4b1c      	ldr	r3, [pc, #112]	; (800a5a4 <MX_DMA_Init+0x88>)
 800a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a536:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a53a:	607b      	str	r3, [r7, #4]
 800a53c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800a53e:	2300      	movs	r3, #0
 800a540:	603b      	str	r3, [r7, #0]
 800a542:	4b18      	ldr	r3, [pc, #96]	; (800a5a4 <MX_DMA_Init+0x88>)
 800a544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a546:	4a17      	ldr	r2, [pc, #92]	; (800a5a4 <MX_DMA_Init+0x88>)
 800a548:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a54c:	6313      	str	r3, [r2, #48]	; 0x30
 800a54e:	4b15      	ldr	r3, [pc, #84]	; (800a5a4 <MX_DMA_Init+0x88>)
 800a550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a556:	603b      	str	r3, [r7, #0]
 800a558:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800a55a:	2200      	movs	r2, #0
 800a55c:	2100      	movs	r1, #0
 800a55e:	200e      	movs	r0, #14
 800a560:	f7f8 fb13 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800a564:	200e      	movs	r0, #14
 800a566:	f7f8 fb2c 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800a56a:	2200      	movs	r2, #0
 800a56c:	2100      	movs	r1, #0
 800a56e:	2038      	movs	r0, #56	; 0x38
 800a570:	f7f8 fb0b 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800a574:	2038      	movs	r0, #56	; 0x38
 800a576:	f7f8 fb24 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800a57a:	2200      	movs	r2, #0
 800a57c:	2100      	movs	r1, #0
 800a57e:	2039      	movs	r0, #57	; 0x39
 800a580:	f7f8 fb03 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800a584:	2039      	movs	r0, #57	; 0x39
 800a586:	f7f8 fb1c 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800a58a:	2200      	movs	r2, #0
 800a58c:	2100      	movs	r1, #0
 800a58e:	203a      	movs	r0, #58	; 0x3a
 800a590:	f7f8 fafb 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800a594:	203a      	movs	r0, #58	; 0x3a
 800a596:	f7f8 fb14 	bl	8002bc2 <HAL_NVIC_EnableIRQ>

}
 800a59a:	bf00      	nop
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	40023800 	.word	0x40023800

0800a5a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a5a8:	b580      	push	{r7, lr}
 800a5aa:	b08c      	sub	sp, #48	; 0x30
 800a5ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5ae:	f107 031c 	add.w	r3, r7, #28
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	601a      	str	r2, [r3, #0]
 800a5b6:	605a      	str	r2, [r3, #4]
 800a5b8:	609a      	str	r2, [r3, #8]
 800a5ba:	60da      	str	r2, [r3, #12]
 800a5bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a5be:	2300      	movs	r3, #0
 800a5c0:	61bb      	str	r3, [r7, #24]
 800a5c2:	4b61      	ldr	r3, [pc, #388]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a5c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5c6:	4a60      	ldr	r2, [pc, #384]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a5c8:	f043 0310 	orr.w	r3, r3, #16
 800a5cc:	6313      	str	r3, [r2, #48]	; 0x30
 800a5ce:	4b5e      	ldr	r3, [pc, #376]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d2:	f003 0310 	and.w	r3, r3, #16
 800a5d6:	61bb      	str	r3, [r7, #24]
 800a5d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	4b5a      	ldr	r3, [pc, #360]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a5e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e2:	4a59      	ldr	r2, [pc, #356]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a5e4:	f043 0304 	orr.w	r3, r3, #4
 800a5e8:	6313      	str	r3, [r2, #48]	; 0x30
 800a5ea:	4b57      	ldr	r3, [pc, #348]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a5ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ee:	f003 0304 	and.w	r3, r3, #4
 800a5f2:	617b      	str	r3, [r7, #20]
 800a5f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	613b      	str	r3, [r7, #16]
 800a5fa:	4b53      	ldr	r3, [pc, #332]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	4a52      	ldr	r2, [pc, #328]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a604:	6313      	str	r3, [r2, #48]	; 0x30
 800a606:	4b50      	ldr	r3, [pc, #320]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a612:	2300      	movs	r3, #0
 800a614:	60fb      	str	r3, [r7, #12]
 800a616:	4b4c      	ldr	r3, [pc, #304]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a61a:	4a4b      	ldr	r2, [pc, #300]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a61c:	f043 0301 	orr.w	r3, r3, #1
 800a620:	6313      	str	r3, [r2, #48]	; 0x30
 800a622:	4b49      	ldr	r3, [pc, #292]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a626:	f003 0301 	and.w	r3, r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]
 800a62c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a62e:	2300      	movs	r3, #0
 800a630:	60bb      	str	r3, [r7, #8]
 800a632:	4b45      	ldr	r3, [pc, #276]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	4a44      	ldr	r2, [pc, #272]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a638:	f043 0302 	orr.w	r3, r3, #2
 800a63c:	6313      	str	r3, [r2, #48]	; 0x30
 800a63e:	4b42      	ldr	r3, [pc, #264]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a642:	f003 0302 	and.w	r3, r3, #2
 800a646:	60bb      	str	r3, [r7, #8]
 800a648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800a64a:	2300      	movs	r3, #0
 800a64c:	607b      	str	r3, [r7, #4]
 800a64e:	4b3e      	ldr	r3, [pc, #248]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a652:	4a3d      	ldr	r2, [pc, #244]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a654:	f043 0308 	orr.w	r3, r3, #8
 800a658:	6313      	str	r3, [r2, #48]	; 0x30
 800a65a:	4b3b      	ldr	r3, [pc, #236]	; (800a748 <MX_GPIO_Init+0x1a0>)
 800a65c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a65e:	f003 0308 	and.w	r3, r3, #8
 800a662:	607b      	str	r3, [r7, #4]
 800a664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 800a666:	2200      	movs	r2, #0
 800a668:	f24c 0118 	movw	r1, #49176	; 0xc018
 800a66c:	4837      	ldr	r0, [pc, #220]	; (800a74c <MX_GPIO_Init+0x1a4>)
 800a66e:	f7f9 f841 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800a672:	2200      	movs	r2, #0
 800a674:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800a678:	4835      	ldr	r0, [pc, #212]	; (800a750 <MX_GPIO_Init+0x1a8>)
 800a67a:	f7f9 f83b 	bl	80036f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800a67e:	2200      	movs	r2, #0
 800a680:	f64b 0180 	movw	r1, #47232	; 0xb880
 800a684:	4833      	ldr	r0, [pc, #204]	; (800a754 <MX_GPIO_Init+0x1ac>)
 800a686:	f7f9 f835 	bl	80036f4 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 800a68a:	f24c 0318 	movw	r3, #49176	; 0xc018
 800a68e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a690:	2301      	movs	r3, #1
 800a692:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a694:	2300      	movs	r3, #0
 800a696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a698:	2300      	movs	r3, #0
 800a69a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a69c:	f107 031c 	add.w	r3, r7, #28
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	482a      	ldr	r0, [pc, #168]	; (800a74c <MX_GPIO_Init+0x1a4>)
 800a6a4:	f7f8 fe8c 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800a6a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a6ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a6ba:	f107 031c 	add.w	r3, r7, #28
 800a6be:	4619      	mov	r1, r3
 800a6c0:	4823      	ldr	r0, [pc, #140]	; (800a750 <MX_GPIO_Init+0x1a8>)
 800a6c2:	f7f8 fe7d 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800a6c6:	f64b 0380 	movw	r3, #47232	; 0xb880
 800a6ca:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a6cc:	2301      	movs	r3, #1
 800a6ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a6d8:	f107 031c 	add.w	r3, r7, #28
 800a6dc:	4619      	mov	r1, r3
 800a6de:	481d      	ldr	r0, [pc, #116]	; (800a754 <MX_GPIO_Init+0x1ac>)
 800a6e0:	f7f8 fe6e 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 800a6e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a6e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 800a6f2:	f107 031c 	add.w	r3, r7, #28
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	4816      	ldr	r0, [pc, #88]	; (800a754 <MX_GPIO_Init+0x1ac>)
 800a6fa:	f7f8 fe61 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 800a6fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a702:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a704:	4b14      	ldr	r3, [pc, #80]	; (800a758 <MX_GPIO_Init+0x1b0>)
 800a706:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a708:	2300      	movs	r3, #0
 800a70a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800a70c:	f107 031c 	add.w	r3, r7, #28
 800a710:	4619      	mov	r1, r3
 800a712:	480f      	ldr	r0, [pc, #60]	; (800a750 <MX_GPIO_Init+0x1a8>)
 800a714:	f7f8 fe54 	bl	80033c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800a718:	2370      	movs	r3, #112	; 0x70
 800a71a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a71c:	2300      	movs	r3, #0
 800a71e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a720:	2301      	movs	r3, #1
 800a722:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a724:	f107 031c 	add.w	r3, r7, #28
 800a728:	4619      	mov	r1, r3
 800a72a:	480a      	ldr	r0, [pc, #40]	; (800a754 <MX_GPIO_Init+0x1ac>)
 800a72c:	f7f8 fe48 	bl	80033c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800a730:	2200      	movs	r2, #0
 800a732:	2100      	movs	r1, #0
 800a734:	2017      	movs	r0, #23
 800a736:	f7f8 fa28 	bl	8002b8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a73a:	2017      	movs	r0, #23
 800a73c:	f7f8 fa41 	bl	8002bc2 <HAL_NVIC_EnableIRQ>

}
 800a740:	bf00      	nop
 800a742:	3730      	adds	r7, #48	; 0x30
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}
 800a748:	40023800 	.word	0x40023800
 800a74c:	40021000 	.word	0x40021000
 800a750:	40020800 	.word	0x40020800
 800a754:	40020c00 	.word	0x40020c00
 800a758:	10110000 	.word	0x10110000

0800a75c <set_pwm_off>:

/* USER CODE BEGIN 4 */

void set_pwm_off(void){
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800a760:	4b06      	ldr	r3, [pc, #24]	; (800a77c <set_pwm_off+0x20>)
 800a762:	2200      	movs	r2, #0
 800a764:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800a766:	4b05      	ldr	r3, [pc, #20]	; (800a77c <set_pwm_off+0x20>)
 800a768:	2200      	movs	r2, #0
 800a76a:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800a76c:	4b03      	ldr	r3, [pc, #12]	; (800a77c <set_pwm_off+0x20>)
 800a76e:	2200      	movs	r2, #0
 800a770:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a772:	bf00      	nop
 800a774:	46bd      	mov	sp, r7
 800a776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77a:	4770      	bx	lr
 800a77c:	40010000 	.word	0x40010000

0800a780 <step_through_pole_angles>:

float av_start_angle;
void step_through_pole_angles(void){
 800a780:	b5b0      	push	{r4, r5, r7, lr}
 800a782:	b0e0      	sub	sp, #384	; 0x180
 800a784:	af02      	add	r7, sp, #8
	uint16_t pole_angles[N_PHASES * N_POLES];
	normal_pwm_update = false;
 800a786:	4b87      	ldr	r3, [pc, #540]	; (800a9a4 <step_through_pole_angles+0x224>)
 800a788:	2200      	movs	r2, #0
 800a78a:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a78c:	f7ff ffe6 	bl	800a75c <set_pwm_off>
	HAL_Delay(100);
 800a790:	2064      	movs	r0, #100	; 0x64
 800a792:	f7f6 fc6b 	bl	800106c <HAL_Delay>
	uint32_t step_through_amp = 5 * PWM_1PERCENT;
 800a796:	23cd      	movs	r3, #205	; 0xcd
 800a798:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800a79c:	2300      	movs	r3, #0
 800a79e:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 800a7a2:	e082      	b.n	800a8aa <step_through_pole_angles+0x12a>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800a7aa:	e075      	b.n	800a898 <step_through_pole_angles+0x118>
			set_pwm_off();
 800a7ac:	f7ff ffd6 	bl	800a75c <set_pwm_off>
			if (ABC==0){
 800a7b0:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d104      	bne.n	800a7c2 <step_through_pole_angles+0x42>
				TIM1->CCR1 = step_through_amp;
 800a7b8:	4a7b      	ldr	r2, [pc, #492]	; (800a9a8 <step_through_pole_angles+0x228>)
 800a7ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800a7be:	6353      	str	r3, [r2, #52]	; 0x34
 800a7c0:	e00c      	b.n	800a7dc <step_through_pole_angles+0x5c>
			}
			else if (ABC==1){
 800a7c2:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d104      	bne.n	800a7d4 <step_through_pole_angles+0x54>
				if (INVERT){
					TIM1->CCR3 = step_through_amp;
				}
				else{
					TIM1->CCR2 = step_through_amp;
 800a7ca:	4a77      	ldr	r2, [pc, #476]	; (800a9a8 <step_through_pole_angles+0x228>)
 800a7cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800a7d0:	6393      	str	r3, [r2, #56]	; 0x38
 800a7d2:	e003      	b.n	800a7dc <step_through_pole_angles+0x5c>
			else {
				if (INVERT){
					TIM1->CCR2 = step_through_amp;
				}
				else{
					TIM1->CCR3 = step_through_amp;
 800a7d4:	4a74      	ldr	r2, [pc, #464]	; (800a9a8 <step_through_pole_angles+0x228>)
 800a7d6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800a7da:	63d3      	str	r3, [r2, #60]	; 0x3c
				}
			}
			HAL_Delay(200);
 800a7dc:	20c8      	movs	r0, #200	; 0xc8
 800a7de:	f7f6 fc45 	bl	800106c <HAL_Delay>
			pole_angles[pole * N_PHASES + ABC]=TIM8->CNT;
 800a7e2:	4b72      	ldr	r3, [pc, #456]	; (800a9ac <step_through_pole_angles+0x22c>)
 800a7e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a7e6:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 800a7ea:	4613      	mov	r3, r2
 800a7ec:	005b      	lsls	r3, r3, #1
 800a7ee:	441a      	add	r2, r3
 800a7f0:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a7f4:	4413      	add	r3, r2
 800a7f6:	b28a      	uxth	r2, r1
 800a7f8:	005b      	lsls	r3, r3, #1
 800a7fa:	f507 71bc 	add.w	r1, r7, #376	; 0x178
 800a7fe:	440b      	add	r3, r1
 800a800:	f823 2c48 	strh.w	r2, [r3, #-72]



			uint8_t buf[300];
			buf[0] = '\0';
 800a804:	1d3b      	adds	r3, r7, #4
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[step_through_pole_angles] pole: %d ABC: %d angle: %d \r\n", pole, ABC, TIM8->CNT);
 800a80a:	f897 2176 	ldrb.w	r2, [r7, #374]	; 0x176
 800a80e:	f897 1177 	ldrb.w	r1, [r7, #375]	; 0x177
 800a812:	4b66      	ldr	r3, [pc, #408]	; (800a9ac <step_through_pole_angles+0x22c>)
 800a814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a816:	9300      	str	r3, [sp, #0]
 800a818:	460b      	mov	r3, r1
 800a81a:	4965      	ldr	r1, [pc, #404]	; (800a9b0 <step_through_pole_angles+0x230>)
 800a81c:	4865      	ldr	r0, [pc, #404]	; (800a9b4 <step_through_pole_angles+0x234>)
 800a81e:	f003 fe05 	bl	800e42c <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a822:	4864      	ldr	r0, [pc, #400]	; (800a9b4 <step_through_pole_angles+0x234>)
 800a824:	f7f5 fcd4 	bl	80001d0 <strlen>
 800a828:	4604      	mov	r4, r0
 800a82a:	4863      	ldr	r0, [pc, #396]	; (800a9b8 <step_through_pole_angles+0x238>)
 800a82c:	f7f5 fcd0 	bl	80001d0 <strlen>
 800a830:	4603      	mov	r3, r0
 800a832:	4423      	add	r3, r4
 800a834:	2b63      	cmp	r3, #99	; 0x63
 800a836:	d804      	bhi.n	800a842 <step_through_pole_angles+0xc2>
				strcat(buf_msgs, buf_msg);
 800a838:	495e      	ldr	r1, [pc, #376]	; (800a9b4 <step_through_pole_angles+0x234>)
 800a83a:	485f      	ldr	r0, [pc, #380]	; (800a9b8 <step_through_pole_angles+0x238>)
 800a83c:	f003 fe16 	bl	800e46c <strcat>
 800a840:	e002      	b.n	800a848 <step_through_pole_angles+0xc8>
			}
			else {
				buf_msgs[0] = '#';
 800a842:	4b5d      	ldr	r3, [pc, #372]	; (800a9b8 <step_through_pole_angles+0x238>)
 800a844:	2223      	movs	r2, #35	; 0x23
 800a846:	701a      	strb	r2, [r3, #0]
			}
			if (buf_msgs[0] != '\0'){
 800a848:	4b5b      	ldr	r3, [pc, #364]	; (800a9b8 <step_through_pole_angles+0x238>)
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d007      	beq.n	800a860 <step_through_pole_angles+0xe0>
				strcat(buf, buf_msgs);
 800a850:	1d3b      	adds	r3, r7, #4
 800a852:	4959      	ldr	r1, [pc, #356]	; (800a9b8 <step_through_pole_angles+0x238>)
 800a854:	4618      	mov	r0, r3
 800a856:	f003 fe09 	bl	800e46c <strcat>
				buf_msgs[0] = '\0';
 800a85a:	4b57      	ldr	r3, [pc, #348]	; (800a9b8 <step_through_pole_angles+0x238>)
 800a85c:	2200      	movs	r2, #0
 800a85e:	701a      	strb	r2, [r3, #0]
			}
			//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
			huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800a860:	4b56      	ldr	r3, [pc, #344]	; (800a9bc <step_through_pole_angles+0x23c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	695a      	ldr	r2, [r3, #20]
 800a866:	4b55      	ldr	r3, [pc, #340]	; (800a9bc <step_through_pole_angles+0x23c>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a86e:	615a      	str	r2, [r3, #20]
			HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800a870:	1d3c      	adds	r4, r7, #4
 800a872:	4b52      	ldr	r3, [pc, #328]	; (800a9bc <step_through_pole_angles+0x23c>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	3304      	adds	r3, #4
 800a878:	461d      	mov	r5, r3
 800a87a:	1d3b      	adds	r3, r7, #4
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7f5 fca7 	bl	80001d0 <strlen>
 800a882:	4603      	mov	r3, r0
 800a884:	462a      	mov	r2, r5
 800a886:	4621      	mov	r1, r4
 800a888:	484d      	ldr	r0, [pc, #308]	; (800a9c0 <step_through_pole_angles+0x240>)
 800a88a:	f7f8 fa63 	bl	8002d54 <HAL_DMA_Start_IT>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800a88e:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a892:	3301      	adds	r3, #1
 800a894:	f887 3177 	strb.w	r3, [r7, #375]	; 0x177
 800a898:	f897 3177 	ldrb.w	r3, [r7, #375]	; 0x177
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d985      	bls.n	800a7ac <step_through_pole_angles+0x2c>
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800a8a0:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	f887 3176 	strb.w	r3, [r7, #374]	; 0x176
 800a8aa:	f897 3176 	ldrb.w	r3, [r7, #374]	; 0x176
 800a8ae:	2b06      	cmp	r3, #6
 800a8b0:	f67f af78 	bls.w	800a7a4 <step_through_pole_angles+0x24>

		}
	}
	set_pwm_off();
 800a8b4:	f7ff ff52 	bl	800a75c <set_pwm_off>
	normal_pwm_update = true;
 800a8b8:	4b3a      	ldr	r3, [pc, #232]	; (800a9a4 <step_through_pole_angles+0x224>)
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	701a      	strb	r2, [r3, #0]

	float sum = 0.0f;
 800a8be:	f04f 0300 	mov.w	r3, #0
 800a8c2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
	float enc_steps_per_A2B = (float)ENC_STEPS / (float)(N_POLES * N_PHASES);
 800a8c6:	4b3f      	ldr	r3, [pc, #252]	; (800a9c4 <step_through_pole_angles+0x244>)
 800a8c8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	float enc_steps_per_A2A = (float)ENC_STEPS / (float)N_POLES;
 800a8cc:	4b3e      	ldr	r3, [pc, #248]	; (800a9c8 <step_through_pole_angles+0x248>)
 800a8ce:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 800a8d8:	e05a      	b.n	800a990 <step_through_pole_angles+0x210>
		float reduced_pole_angle = pole_angles[i] - i * enc_steps_per_A2B ;//should be 95.238=ENC_STEPS/21 = ENC_STEPS/ (N_POLES * N_PHASES)
 800a8da:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a8de:	005b      	lsls	r3, r3, #1
 800a8e0:	f507 72bc 	add.w	r2, r7, #376	; 0x178
 800a8e4:	4413      	add	r3, r2
 800a8e6:	f833 3c48 	ldrh.w	r3, [r3, #-72]
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a8f2:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a8f6:	ee07 3a90 	vmov	s15, r3
 800a8fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a8fe:	edd7 7a59 	vldr	s15, [r7, #356]	; 0x164
 800a902:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a90a:	edc7 7a57 	vstr	s15, [r7, #348]	; 0x15c
		if (reduced_pole_angle > -ENC_STEPS_HALF){
 800a90e:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 800a912:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 800a9cc <step_through_pole_angles+0x24c>
 800a916:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a91a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a91e:	dd08      	ble.n	800a932 <step_through_pole_angles+0x1b2>
			sum += reduced_pole_angle;
 800a920:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 800a924:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 800a928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a92c:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
 800a930:	e00b      	b.n	800a94a <step_through_pole_angles+0x1ca>
		}
		else{
			sum += reduced_pole_angle + ENC_STEPS;
 800a932:	edd7 7a57 	vldr	s15, [r7, #348]	; 0x15c
 800a936:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800a9d0 <step_through_pole_angles+0x250>
 800a93a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a93e:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 800a942:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a946:	edc7 7a5c 	vstr	s15, [r7, #368]	; 0x170
		}
		av_start_angle = sum / (float)(N_POLES * N_PHASES);
 800a94a:	ed97 7a5c 	vldr	s14, [r7, #368]	; 0x170
 800a94e:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 800a952:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a956:	4b1f      	ldr	r3, [pc, #124]	; (800a9d4 <step_through_pole_angles+0x254>)
 800a958:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800a95c:	e009      	b.n	800a972 <step_through_pole_angles+0x1f2>
			av_start_angle -= enc_steps_per_A2A;
 800a95e:	4b1d      	ldr	r3, [pc, #116]	; (800a9d4 <step_through_pole_angles+0x254>)
 800a960:	ed93 7a00 	vldr	s14, [r3]
 800a964:	edd7 7a58 	vldr	s15, [r7, #352]	; 0x160
 800a968:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a96c:	4b19      	ldr	r3, [pc, #100]	; (800a9d4 <step_through_pole_angles+0x254>)
 800a96e:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800a972:	4b18      	ldr	r3, [pc, #96]	; (800a9d4 <step_through_pole_angles+0x254>)
 800a974:	edd3 7a00 	vldr	s15, [r3]
 800a978:	ed97 7a58 	vldr	s14, [r7, #352]	; 0x160
 800a97c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800a980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a984:	d4eb      	bmi.n	800a95e <step_through_pole_angles+0x1de>
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800a986:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a98a:	3301      	adds	r3, #1
 800a98c:	f887 316f 	strb.w	r3, [r7, #367]	; 0x16f
 800a990:	f897 316f 	ldrb.w	r3, [r7, #367]	; 0x16f
 800a994:	2b14      	cmp	r3, #20
 800a996:	d9a0      	bls.n	800a8da <step_through_pole_angles+0x15a>
		//float av_angle_first_A =

	}


}
 800a998:	bf00      	nop
 800a99a:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bdb0      	pop	{r4, r5, r7, pc}
 800a9a2:	bf00      	nop
 800a9a4:	2000000d 	.word	0x2000000d
 800a9a8:	40010000 	.word	0x40010000
 800a9ac:	40010400 	.word	0x40010400
 800a9b0:	080125fc 	.word	0x080125fc
 800a9b4:	20002758 	.word	0x20002758
 800a9b8:	20001a4c 	.word	0x20001a4c
 800a9bc:	200006f0 	.word	0x200006f0
 800a9c0:	20000c94 	.word	0x20000c94
 800a9c4:	433e79e8 	.word	0x433e79e8
 800a9c8:	440edb6e 	.word	0x440edb6e
 800a9cc:	c4fa0000 	.word	0xc4fa0000
 800a9d0:	457a0000 	.word	0x457a0000
 800a9d4:	2000102c 	.word	0x2000102c

0800a9d8 <step_through_pwm_percent>:

void step_through_pwm_percent(void){
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b08c      	sub	sp, #48	; 0x30
 800a9dc:	af00      	add	r7, sp, #0
	uint16_t pole_angle_by_amp[20];
	normal_pwm_update = false;
 800a9de:	4b1a      	ldr	r3, [pc, #104]	; (800aa48 <step_through_pwm_percent+0x70>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a9e4:	f7ff feba 	bl	800a75c <set_pwm_off>
	HAL_Delay(100);
 800a9e8:	2064      	movs	r0, #100	; 0x64
 800a9ea:	f7f6 fb3f 	bl	800106c <HAL_Delay>
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a9f4:	e01b      	b.n	800aa2e <step_through_pwm_percent+0x56>
		TIM1->CCR1 = percent * PWM_1PERCENT;
 800a9f6:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a9fa:	4613      	mov	r3, r2
 800a9fc:	009b      	lsls	r3, r3, #2
 800a9fe:	4413      	add	r3, r2
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	441a      	add	r2, r3
 800aa04:	4b11      	ldr	r3, [pc, #68]	; (800aa4c <step_through_pwm_percent+0x74>)
 800aa06:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 800aa08:	20c8      	movs	r0, #200	; 0xc8
 800aa0a:	f7f6 fb2f 	bl	800106c <HAL_Delay>
		pole_angle_by_amp[percent]=TIM8->CNT;
 800aa0e:	4b10      	ldr	r3, [pc, #64]	; (800aa50 <step_through_pwm_percent+0x78>)
 800aa10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa16:	b292      	uxth	r2, r2
 800aa18:	005b      	lsls	r3, r3, #1
 800aa1a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800aa1e:	440b      	add	r3, r1
 800aa20:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800aa24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa28:	3301      	adds	r3, #1
 800aa2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800aa2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800aa32:	2b09      	cmp	r3, #9
 800aa34:	d9df      	bls.n	800a9f6 <step_through_pwm_percent+0x1e>
	}
	set_pwm_off();
 800aa36:	f7ff fe91 	bl	800a75c <set_pwm_off>
	normal_pwm_update = true;
 800aa3a:	4b03      	ldr	r3, [pc, #12]	; (800aa48 <step_through_pwm_percent+0x70>)
 800aa3c:	2201      	movs	r2, #1
 800aa3e:	701a      	strb	r2, [r3, #0]
}
 800aa40:	bf00      	nop
 800aa42:	3730      	adds	r7, #48	; 0x30
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	2000000d 	.word	0x2000000d
 800aa4c:	40010000 	.word	0x40010000
 800aa50:	40010400 	.word	0x40010400

0800aa54 <explore_limits>:

void explore_limits(void){
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b084      	sub	sp, #16
 800aa58:	af00      	add	r7, sp, #0
	amp = 0;
 800aa5a:	4b35      	ldr	r3, [pc, #212]	; (800ab30 <explore_limits+0xdc>)
 800aa5c:	f04f 0200 	mov.w	r2, #0
 800aa60:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800aa62:	2064      	movs	r0, #100	; 0x64
 800aa64:	f7f6 fb02 	bl	800106c <HAL_Delay>
	for (int8_t dir=-1;dir<2; dir+=2){
 800aa68:	23ff      	movs	r3, #255	; 0xff
 800aa6a:	73fb      	strb	r3, [r7, #15]
 800aa6c:	e055      	b.n	800ab1a <explore_limits+0xc6>
		HAL_Delay(500);
 800aa6e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800aa72:	f7f6 fafb 	bl	800106c <HAL_Delay>
		amp= dir * 0.1f;
 800aa76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa7a:	ee07 3a90 	vmov	s15, r3
 800aa7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa82:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800ab34 <explore_limits+0xe0>
 800aa86:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa8a:	4b29      	ldr	r3, [pc, #164]	; (800ab30 <explore_limits+0xdc>)
 800aa8c:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = 0; i<50; i++){
 800aa90:	2300      	movs	r3, #0
 800aa92:	60bb      	str	r3, [r7, #8]
 800aa94:	e03a      	b.n	800ab0c <explore_limits+0xb8>
			HAL_Delay(100);
 800aa96:	2064      	movs	r0, #100	; 0x64
 800aa98:	f7f6 fae8 	bl	800106c <HAL_Delay>
			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);
 800aa9c:	2104      	movs	r1, #4
 800aa9e:	4826      	ldr	r0, [pc, #152]	; (800ab38 <explore_limits+0xe4>)
 800aaa0:	f7f7 f902 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800aaa4:	6078      	str	r0, [r7, #4]
			if (val_I > 2100 || val_I < 1980){
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f640 0234 	movw	r2, #2100	; 0x834
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d804      	bhi.n	800aaba <explore_limits+0x66>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d825      	bhi.n	800ab06 <explore_limits+0xb2>
				amp=0;
 800aaba:	4b1d      	ldr	r3, [pc, #116]	; (800ab30 <explore_limits+0xdc>)
 800aabc:	f04f 0200 	mov.w	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]
				uint32_t EncVal_lim = TIM8->CNT;
 800aac2:	4b1e      	ldr	r3, [pc, #120]	; (800ab3c <explore_limits+0xe8>)
 800aac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aac6:	603b      	str	r3, [r7, #0]
				if (dir==-1){
 800aac8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aacc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aad0:	d10c      	bne.n	800aaec <explore_limits+0x98>
					Enc_Val_total_lim_m = EncVal_lim + rotation_counter * ENC_STEPS;
 800aad2:	4b1b      	ldr	r3, [pc, #108]	; (800ab40 <explore_limits+0xec>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800aada:	fb02 f303 	mul.w	r3, r2, r3
 800aade:	461a      	mov	r2, r3
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	4413      	add	r3, r2
 800aae4:	461a      	mov	r2, r3
 800aae6:	4b17      	ldr	r3, [pc, #92]	; (800ab44 <explore_limits+0xf0>)
 800aae8:	601a      	str	r2, [r3, #0]
				else{
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;

				}

				break;
 800aaea:	e012      	b.n	800ab12 <explore_limits+0xbe>
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;
 800aaec:	4b14      	ldr	r3, [pc, #80]	; (800ab40 <explore_limits+0xec>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800aaf4:	fb02 f303 	mul.w	r3, r2, r3
 800aaf8:	461a      	mov	r2, r3
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	4413      	add	r3, r2
 800aafe:	461a      	mov	r2, r3
 800ab00:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <explore_limits+0xf4>)
 800ab02:	601a      	str	r2, [r3, #0]
				break;
 800ab04:	e005      	b.n	800ab12 <explore_limits+0xbe>
		for (int32_t i = 0; i<50; i++){
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	60bb      	str	r3, [r7, #8]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	2b31      	cmp	r3, #49	; 0x31
 800ab10:	ddc1      	ble.n	800aa96 <explore_limits+0x42>
	for (int8_t dir=-1;dir<2; dir+=2){
 800ab12:	7bfb      	ldrb	r3, [r7, #15]
 800ab14:	3302      	adds	r3, #2
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	73fb      	strb	r3, [r7, #15]
 800ab1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	dda5      	ble.n	800aa6e <explore_limits+0x1a>
			}
		}
	}

	amp = 0.01f;
 800ab22:	4b03      	ldr	r3, [pc, #12]	; (800ab30 <explore_limits+0xdc>)
 800ab24:	4a09      	ldr	r2, [pc, #36]	; (800ab4c <explore_limits+0xf8>)
 800ab26:	601a      	str	r2, [r3, #0]
}
 800ab28:	bf00      	nop
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	20000240 	.word	0x20000240
 800ab34:	3dcccccd 	.word	0x3dcccccd
 800ab38:	20000e5c 	.word	0x20000e5c
 800ab3c:	40010400 	.word	0x40010400
 800ab40:	2000024c 	.word	0x2000024c
 800ab44:	20000250 	.word	0x20000250
 800ab48:	20000254 	.word	0x20000254
 800ab4c:	3c23d70a 	.word	0x3c23d70a

0800ab50 <delay_SPI>:



void delay_SPI(void){
 800ab50:	b480      	push	{r7}
 800ab52:	b083      	sub	sp, #12
 800ab54:	af00      	add	r7, sp, #0
	int g =0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	603b      	str	r3, [r7, #0]
 800ab5e:	e005      	b.n	800ab6c <delay_SPI+0x1c>
		g++;
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	3301      	adds	r3, #1
 800ab64:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	3301      	adds	r3, #1
 800ab6a:	603b      	str	r3, [r7, #0]
 800ab6c:	683b      	ldr	r3, [r7, #0]
 800ab6e:	2b13      	cmp	r3, #19
 800ab70:	ddf6      	ble.n	800ab60 <delay_SPI+0x10>
	}
}
 800ab72:	bf00      	nop
 800ab74:	370c      	adds	r7, #12
 800ab76:	46bd      	mov	sp, r7
 800ab78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7c:	4770      	bx	lr
	...

0800ab80 <playSound>:


void playSound(uint32_t periode, uint32_t volume, uint32_t cycles){
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b086      	sub	sp, #24
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);
	normal_pwm_update = false;
 800ab8c:	4b16      	ldr	r3, [pc, #88]	; (800abe8 <playSound+0x68>)
 800ab8e:	2200      	movs	r2, #0
 800ab90:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800ab92:	f7ff fde3 	bl	800a75c <set_pwm_off>
	HAL_Delay(10);
 800ab96:	200a      	movs	r0, #10
 800ab98:	f7f6 fa68 	bl	800106c <HAL_Delay>

	for (uint32_t i=0; i<cycles; i++){
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	e014      	b.n	800abcc <playSound+0x4c>
		TIM1->CCR1 = 0; //takes<150ns
 800aba2:	4b12      	ldr	r3, [pc, #72]	; (800abec <playSound+0x6c>)
 800aba4:	2200      	movs	r2, #0
 800aba6:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800aba8:	4a10      	ldr	r2, [pc, #64]	; (800abec <playSound+0x6c>)
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f7f6 fa5c 	bl	800106c <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800abb4:	4a0d      	ldr	r2, [pc, #52]	; (800abec <playSound+0x6c>)
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 800abba:	4b0c      	ldr	r3, [pc, #48]	; (800abec <playSound+0x6c>)
 800abbc:	2200      	movs	r2, #0
 800abbe:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f7f6 fa53 	bl	800106c <HAL_Delay>
	for (uint32_t i=0; i<cycles; i++){
 800abc6:	697b      	ldr	r3, [r7, #20]
 800abc8:	3301      	adds	r3, #1
 800abca:	617b      	str	r3, [r7, #20]
 800abcc:	697a      	ldr	r2, [r7, #20]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d3e6      	bcc.n	800aba2 <playSound+0x22>
	}
	set_pwm_off();
 800abd4:	f7ff fdc2 	bl	800a75c <set_pwm_off>
	normal_pwm_update = true;
 800abd8:	4b03      	ldr	r3, [pc, #12]	; (800abe8 <playSound+0x68>)
 800abda:	2201      	movs	r2, #1
 800abdc:	701a      	strb	r2, [r3, #0]

	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 800abde:	bf00      	nop
 800abe0:	3718      	adds	r7, #24
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
 800abe6:	bf00      	nop
 800abe8:	2000000d 	.word	0x2000000d
 800abec:	40010000 	.word	0x40010000

0800abf0 <calc_lookup>:


void calc_lookup(float *lookup){
 800abf0:	b5b0      	push	{r4, r5, r7, lr}
 800abf2:	b084      	sub	sp, #16
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<210; i++){
 800abf8:	2300      	movs	r3, #0
 800abfa:	60fb      	str	r3, [r7, #12]
 800abfc:	e049      	b.n	800ac92 <calc_lookup+0xa2>
		// --- vanilla
		lookup[i] = 0.5773f * (cos((float)i/100.0f) + cos((float)i/100.0f-1.047f));
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	ee07 3a90 	vmov	s15, r3
 800ac04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ac08:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800aca8 <calc_lookup+0xb8>
 800ac0c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ac10:	ee16 0a90 	vmov	r0, s13
 800ac14:	f7f5 fc98 	bl	8000548 <__aeabi_f2d>
 800ac18:	4603      	mov	r3, r0
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	ec44 3b10 	vmov	d0, r3, r4
 800ac20:	f006 fb0a 	bl	8011238 <cos>
 800ac24:	ec55 4b10 	vmov	r4, r5, d0
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	ee07 3a90 	vmov	s15, r3
 800ac2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ac32:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800aca8 <calc_lookup+0xb8>
 800ac36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ac3a:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800acac <calc_lookup+0xbc>
 800ac3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ac42:	ee17 0a90 	vmov	r0, s15
 800ac46:	f7f5 fc7f 	bl	8000548 <__aeabi_f2d>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	ec43 2b10 	vmov	d0, r2, r3
 800ac52:	f006 faf1 	bl	8011238 <cos>
 800ac56:	ec53 2b10 	vmov	r2, r3, d0
 800ac5a:	4620      	mov	r0, r4
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f7f5 fb15 	bl	800028c <__adddf3>
 800ac62:	4603      	mov	r3, r0
 800ac64:	460c      	mov	r4, r1
 800ac66:	4618      	mov	r0, r3
 800ac68:	4621      	mov	r1, r4
 800ac6a:	a30d      	add	r3, pc, #52	; (adr r3, 800aca0 <calc_lookup+0xb0>)
 800ac6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac70:	f7f5 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ac74:	4603      	mov	r3, r0
 800ac76:	460c      	mov	r4, r1
 800ac78:	4618      	mov	r0, r3
 800ac7a:	4621      	mov	r1, r4
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	687a      	ldr	r2, [r7, #4]
 800ac82:	18d4      	adds	r4, r2, r3
 800ac84:	f7f5 ffb0 	bl	8000be8 <__aeabi_d2f>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	60fb      	str	r3, [r7, #12]
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2bd1      	cmp	r3, #209	; 0xd1
 800ac96:	ddb2      	ble.n	800abfe <calc_lookup+0xe>
		//lookup[i] = 0.5773f * (cos((float)i/100.0f)       + amp_harmonic * cos( (float)i/100.0f       * 3.0f)    +  cos((float)i/100.0f-1.047f) + amp_harmonic * cos(((float)i/100.0f-1.047f)* 3.0f)) ;// the harmonic tends to fully cancel out

		// --- power law
		//lookup[i] = 0.5773f * (pow( cos((float)i/100.0f) + cos((float)i/100.0f-1.047f),amp_harmonic)/ pow(amp_harmonic,0.5f)); //looks like 1.0 is already best in terms of overtones
	}
}
 800ac98:	bf00      	nop
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bdb0      	pop	{r4, r5, r7, pc}
 800aca0:	e0000000 	.word	0xe0000000
 800aca4:	3fe2793d 	.word	0x3fe2793d
 800aca8:	42c80000 	.word	0x42c80000
 800acac:	3f860419 	.word	0x3f860419

0800acb0 <calc_sin_lookup>:

void calc_sin_lookup(float *sin_lookup){
 800acb0:	b590      	push	{r4, r7, lr}
 800acb2:	b085      	sub	sp, #20
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	for (int i=0; i<628; i++){
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]
 800acbc:	e01f      	b.n	800acfe <calc_sin_lookup+0x4e>
		sin_lookup[i] = sin((float)i/100.0f);
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	ee07 3a90 	vmov	s15, r3
 800acc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800acc8:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ad10 <calc_sin_lookup+0x60>
 800accc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800acd0:	ee16 0a90 	vmov	r0, s13
 800acd4:	f7f5 fc38 	bl	8000548 <__aeabi_f2d>
 800acd8:	4603      	mov	r3, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	ec44 3b10 	vmov	d0, r3, r4
 800ace0:	f006 faee 	bl	80112c0 <sin>
 800ace4:	ec51 0b10 	vmov	r0, r1, d0
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	009b      	lsls	r3, r3, #2
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	18d4      	adds	r4, r2, r3
 800acf0:	f7f5 ff7a 	bl	8000be8 <__aeabi_d2f>
 800acf4:	4603      	mov	r3, r0
 800acf6:	6023      	str	r3, [r4, #0]
	for (int i=0; i<628; i++){
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	3301      	adds	r3, #1
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 800ad04:	dbdb      	blt.n	800acbe <calc_sin_lookup+0xe>
	}
}
 800ad06:	bf00      	nop
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd90      	pop	{r4, r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	42c80000 	.word	0x42c80000

0800ad14 <calc_cos_lookup>:

void calc_cos_lookup(float *cos_lookup){
 800ad14:	b590      	push	{r4, r7, lr}
 800ad16:	b085      	sub	sp, #20
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<628; i++){
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	60fb      	str	r3, [r7, #12]
 800ad20:	e01f      	b.n	800ad62 <calc_cos_lookup+0x4e>
		cos_lookup[i] = cos((float)i/100.0f);
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	ee07 3a90 	vmov	s15, r3
 800ad28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ad2c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800ad74 <calc_cos_lookup+0x60>
 800ad30:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800ad34:	ee16 0a90 	vmov	r0, s13
 800ad38:	f7f5 fc06 	bl	8000548 <__aeabi_f2d>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	ec44 3b10 	vmov	d0, r3, r4
 800ad44:	f006 fa78 	bl	8011238 <cos>
 800ad48:	ec51 0b10 	vmov	r0, r1, d0
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	18d4      	adds	r4, r2, r3
 800ad54:	f7f5 ff48 	bl	8000be8 <__aeabi_d2f>
 800ad58:	4603      	mov	r3, r0
 800ad5a:	6023      	str	r3, [r4, #0]
	for (int i=0; i<628; i++){
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3301      	adds	r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 800ad68:	dbdb      	blt.n	800ad22 <calc_cos_lookup+0xe>
	}
}
 800ad6a:	bf00      	nop
 800ad6c:	3714      	adds	r7, #20
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd90      	pop	{r4, r7, pc}
 800ad72:	bf00      	nop
 800ad74:	42c80000 	.word	0x42c80000

0800ad78 <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 800ad78:	b480      	push	{r7}
 800ad7a:	b083      	sub	sp, #12
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800ad80:	4b06      	ldr	r3, [pc, #24]	; (800ad9c <DMAUSARTTransferComplete+0x24>)
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	695a      	ldr	r2, [r3, #20]
 800ad86:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <DMAUSARTTransferComplete+0x24>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad8e:	615a      	str	r2, [r3, #20]
}
 800ad90:	bf00      	nop
 800ad92:	370c      	adds	r7, #12
 800ad94:	46bd      	mov	sp, r7
 800ad96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9a:	4770      	bx	lr
 800ad9c:	200006f0 	.word	0x200006f0

0800ada0 <HAL_GPIO_EXTI_Callback>:




// --- Callback when Encoder fires the I at zero point
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800ada0:	b590      	push	{r4, r7, lr}
 800ada2:	b085      	sub	sp, #20
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800adaa:	88fb      	ldrh	r3, [r7, #6]
 800adac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800adb0:	d147      	bne.n	800ae42 <HAL_GPIO_EXTI_Callback+0xa2>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
		uint16_t encoder_belief = TIM8->CNT;
 800adb2:	4b26      	ldr	r3, [pc, #152]	; (800ae4c <HAL_GPIO_EXTI_Callback+0xac>)
 800adb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb6:	81fb      	strh	r3, [r7, #14]

		if (counter0ing_at0crossing){
 800adb8:	4b25      	ldr	r3, [pc, #148]	; (800ae50 <HAL_GPIO_EXTI_Callback+0xb0>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d01e      	beq.n	800adfe <HAL_GPIO_EXTI_Callback+0x5e>
			TIM8->CNT = 0;     //TODO: this could lead to an offset of 1 since the CNT value may not be set yet and get incremented thereafter if this interrupt is executed before the CNT increment.
 800adc0:	4b22      	ldr	r3, [pc, #136]	; (800ae4c <HAL_GPIO_EXTI_Callback+0xac>)
 800adc2:	2200      	movs	r2, #0
 800adc4:	625a      	str	r2, [r3, #36]	; 0x24
			counter0ing_at0crossing = false;
 800adc6:	4b22      	ldr	r3, [pc, #136]	; (800ae50 <HAL_GPIO_EXTI_Callback+0xb0>)
 800adc8:	2200      	movs	r2, #0
 800adca:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at FIRST ZERO: %d \r\n", encoder_belief);
 800adcc:	89fb      	ldrh	r3, [r7, #14]
 800adce:	461a      	mov	r2, r3
 800add0:	4920      	ldr	r1, [pc, #128]	; (800ae54 <HAL_GPIO_EXTI_Callback+0xb4>)
 800add2:	4821      	ldr	r0, [pc, #132]	; (800ae58 <HAL_GPIO_EXTI_Callback+0xb8>)
 800add4:	f003 fb2a 	bl	800e42c <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800add8:	481f      	ldr	r0, [pc, #124]	; (800ae58 <HAL_GPIO_EXTI_Callback+0xb8>)
 800adda:	f7f5 f9f9 	bl	80001d0 <strlen>
 800adde:	4604      	mov	r4, r0
 800ade0:	481e      	ldr	r0, [pc, #120]	; (800ae5c <HAL_GPIO_EXTI_Callback+0xbc>)
 800ade2:	f7f5 f9f5 	bl	80001d0 <strlen>
 800ade6:	4603      	mov	r3, r0
 800ade8:	4423      	add	r3, r4
 800adea:	2b63      	cmp	r3, #99	; 0x63
 800adec:	d804      	bhi.n	800adf8 <HAL_GPIO_EXTI_Callback+0x58>
				strcat(buf_msgs, buf_msg);
 800adee:	491a      	ldr	r1, [pc, #104]	; (800ae58 <HAL_GPIO_EXTI_Callback+0xb8>)
 800adf0:	481a      	ldr	r0, [pc, #104]	; (800ae5c <HAL_GPIO_EXTI_Callback+0xbc>)
 800adf2:	f003 fb3b 	bl	800e46c <strcat>
 800adf6:	e002      	b.n	800adfe <HAL_GPIO_EXTI_Callback+0x5e>
			}
			else {
				buf_msgs[0] = '#';
 800adf8:	4b18      	ldr	r3, [pc, #96]	; (800ae5c <HAL_GPIO_EXTI_Callback+0xbc>)
 800adfa:	2223      	movs	r2, #35	; 0x23
 800adfc:	701a      	strb	r2, [r3, #0]
			}
		}
		//val_SO1_buf_index = 0;

		if (encoder_belief > ENC_TOLERANCE && encoder_belief < ENC_STEPS - ENC_TOLERANCE){
 800adfe:	89fb      	ldrh	r3, [r7, #14]
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d91f      	bls.n	800ae44 <HAL_GPIO_EXTI_Callback+0xa4>
 800ae04:	89fb      	ldrh	r3, [r7, #14]
 800ae06:	f640 729d 	movw	r2, #3997	; 0xf9d
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d81a      	bhi.n	800ae44 <HAL_GPIO_EXTI_Callback+0xa4>
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at ZERO MISMATCH: %d \r\n", encoder_belief);
 800ae0e:	89fb      	ldrh	r3, [r7, #14]
 800ae10:	461a      	mov	r2, r3
 800ae12:	4913      	ldr	r1, [pc, #76]	; (800ae60 <HAL_GPIO_EXTI_Callback+0xc0>)
 800ae14:	4810      	ldr	r0, [pc, #64]	; (800ae58 <HAL_GPIO_EXTI_Callback+0xb8>)
 800ae16:	f003 fb09 	bl	800e42c <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800ae1a:	480f      	ldr	r0, [pc, #60]	; (800ae58 <HAL_GPIO_EXTI_Callback+0xb8>)
 800ae1c:	f7f5 f9d8 	bl	80001d0 <strlen>
 800ae20:	4604      	mov	r4, r0
 800ae22:	480e      	ldr	r0, [pc, #56]	; (800ae5c <HAL_GPIO_EXTI_Callback+0xbc>)
 800ae24:	f7f5 f9d4 	bl	80001d0 <strlen>
 800ae28:	4603      	mov	r3, r0
 800ae2a:	4423      	add	r3, r4
 800ae2c:	2b63      	cmp	r3, #99	; 0x63
 800ae2e:	d804      	bhi.n	800ae3a <HAL_GPIO_EXTI_Callback+0x9a>
				strcat(buf_msgs, buf_msg);
 800ae30:	4909      	ldr	r1, [pc, #36]	; (800ae58 <HAL_GPIO_EXTI_Callback+0xb8>)
 800ae32:	480a      	ldr	r0, [pc, #40]	; (800ae5c <HAL_GPIO_EXTI_Callback+0xbc>)
 800ae34:	f003 fb1a 	bl	800e46c <strcat>
		}
	}
	else{
		__NOP();
	}
}
 800ae38:	e004      	b.n	800ae44 <HAL_GPIO_EXTI_Callback+0xa4>
				buf_msgs[0] = '#';
 800ae3a:	4b08      	ldr	r3, [pc, #32]	; (800ae5c <HAL_GPIO_EXTI_Callback+0xbc>)
 800ae3c:	2223      	movs	r2, #35	; 0x23
 800ae3e:	701a      	strb	r2, [r3, #0]
}
 800ae40:	e000      	b.n	800ae44 <HAL_GPIO_EXTI_Callback+0xa4>
		__NOP();
 800ae42:	bf00      	nop
}
 800ae44:	bf00      	nop
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	bd90      	pop	{r4, r7, pc}
 800ae4c:	40010400 	.word	0x40010400
 800ae50:	2000000f 	.word	0x2000000f
 800ae54:	08012638 	.word	0x08012638
 800ae58:	20002758 	.word	0x20002758
 800ae5c:	20001a4c 	.word	0x20001a4c
 800ae60:	08012664 	.word	0x08012664

0800ae64 <HAL_TIM_OC_DelayElapsedCallback>:

// -----------------------------------------------------------
// MAIN UPDATE STEP interrupt triggered by timer 1 channel 4 towards end of each pwm cycle
// -----------------------------------------------------------

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 800ae64:	b5b0      	push	{r4, r5, r7, lr}
 800ae66:	ed2d 8b04 	vpush	{d8-d9}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
	if (htim != &htim1){
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4abc      	ldr	r2, [pc, #752]	; (800b164 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	f040 816f 	bne.w	800b158 <HAL_TIM_OC_DelayElapsedCallback+0x2f4>
		return;
	}

#if DB_TIMING
	DB1H;
 800ae7a:	4bbb      	ldr	r3, [pc, #748]	; (800b168 <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800ae7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ae80:	619a      	str	r2, [r3, #24]
#endif

	//timing_party();

	// --- get current encoder position
	register int32_t EncVal = TIM8->CNT;
 800ae82:	4bba      	ldr	r3, [pc, #744]	; (800b16c <HAL_TIM_OC_DelayElapsedCallback+0x308>)
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	461d      	mov	r5, r3
	register int32_t delta_EncVal = (int32_t)EncVal - (int32_t)last_EncVal_pwm;
 800ae88:	4bb9      	ldr	r3, [pc, #740]	; (800b170 <HAL_TIM_OC_DelayElapsedCallback+0x30c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	1aec      	subs	r4, r5, r3
	last_EncVal_pwm = EncVal;
 800ae8e:	4bb8      	ldr	r3, [pc, #736]	; (800b170 <HAL_TIM_OC_DelayElapsedCallback+0x30c>)
 800ae90:	601d      	str	r5, [r3, #0]




	// --- determine whether 0 crossing happened and adjust rotation_counter accordingly
	if (delta_EncVal > ENC_STEPS_HALF) {
 800ae92:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 800ae96:	dd05      	ble.n	800aea4 <HAL_TIM_OC_DelayElapsedCallback+0x40>
		rotation_counter--;
 800ae98:	4bb6      	ldr	r3, [pc, #728]	; (800b174 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	4ab5      	ldr	r2, [pc, #724]	; (800b174 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800aea0:	6013      	str	r3, [r2, #0]
 800aea2:	e007      	b.n	800aeb4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	}
	else if (delta_EncVal < -ENC_STEPS_HALF){
 800aea4:	f514 6ffa 	cmn.w	r4, #2000	; 0x7d0
 800aea8:	da04      	bge.n	800aeb4 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		rotation_counter++;
 800aeaa:	4bb2      	ldr	r3, [pc, #712]	; (800b174 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	4ab0      	ldr	r2, [pc, #704]	; (800b174 <HAL_TIM_OC_DelayElapsedCallback+0x310>)
 800aeb2:	6013      	str	r3, [r2, #0]
	}// both statements 300ns



	// --- calculate the phase with respect to a pole cycle in 100x int
	pole_phase_int = (int)((PI2 * N_POLES / ENC_STEPS * (float) EncVal - phase0 + PI2) * 100.0f) % 628 ; //400ns when consolidated in one line
 800aeb4:	ee07 5a90 	vmov	s15, r5
 800aeb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aebc:	ed9f 7aae 	vldr	s14, [pc, #696]	; 800b178 <HAL_TIM_OC_DelayElapsedCallback+0x314>
 800aec0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800aec4:	4bad      	ldr	r3, [pc, #692]	; (800b17c <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800aec6:	edd3 7a00 	vldr	s15, [r3]
 800aeca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aece:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800b180 <HAL_TIM_OC_DelayElapsedCallback+0x31c>
 800aed2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aed6:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800b184 <HAL_TIM_OC_DelayElapsedCallback+0x320>
 800aeda:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aee2:	ee17 2a90 	vmov	r2, s15
 800aee6:	4ba8      	ldr	r3, [pc, #672]	; (800b188 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 800aee8:	fb83 1302 	smull	r1, r3, r3, r2
 800aeec:	11d9      	asrs	r1, r3, #7
 800aeee:	17d3      	asrs	r3, r2, #31
 800aef0:	1acb      	subs	r3, r1, r3
 800aef2:	f44f 711d 	mov.w	r1, #628	; 0x274
 800aef6:	fb01 f303 	mul.w	r3, r1, r3
 800aefa:	1ad3      	subs	r3, r2, r3
 800aefc:	4aa3      	ldr	r2, [pc, #652]	; (800b18c <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800aefe:	6013      	str	r3, [r2, #0]


	register int32_t A = HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);//500ns
 800af00:	2104      	movs	r1, #4
 800af02:	48a3      	ldr	r0, [pc, #652]	; (800b190 <HAL_TIM_OC_DelayElapsedCallback+0x32c>)
 800af04:	f7f6 fed0 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800af08:	4603      	mov	r3, r0
 800af0a:	ee09 3a10 	vmov	s18, r3
	register int32_t B = HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I);//500ns
 800af0e:	2104      	movs	r1, #4
 800af10:	48a0      	ldr	r0, [pc, #640]	; (800b194 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 800af12:	f7f6 fec9 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800af16:	4603      	mov	r3, r0
 800af18:	ee08 3a90 	vmov	s17, r3
	register int32_t C = HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I);//500ns
 800af1c:	2104      	movs	r1, #4
 800af1e:	489e      	ldr	r0, [pc, #632]	; (800b198 <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 800af20:	f7f6 fec2 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800af24:	4603      	mov	r3, r0
 800af26:	ee08 3a10 	vmov	s16, r3

	register float I_A = ((float)A - A_mean) * 0.134f;
 800af2a:	eeb8 7ac9 	vcvt.f32.s32	s14, s18
 800af2e:	4b9b      	ldr	r3, [pc, #620]	; (800b19c <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800af30:	edd3 7a00 	vldr	s15, [r3]
 800af34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af38:	ed9f 7a99 	vldr	s14, [pc, #612]	; 800b1a0 <HAL_TIM_OC_DelayElapsedCallback+0x33c>
 800af3c:	ee27 9a87 	vmul.f32	s18, s15, s14
	register float I_B = ((float)B - B_mean) * 0.189f; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134 //TODO verify SPI setting in DRV8301 the factor sqrt(2) comes out of thin air
 800af40:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
 800af44:	4b97      	ldr	r3, [pc, #604]	; (800b1a4 <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800af46:	edd3 7a00 	vldr	s15, [r3]
 800af4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af4e:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800b1a8 <HAL_TIM_OC_DelayElapsedCallback+0x344>
 800af52:	ee67 8a87 	vmul.f32	s17, s15, s14
	register float I_C = ((float)C - C_mean) * 0.189f;
 800af56:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 800af5a:	4b94      	ldr	r3, [pc, #592]	; (800b1ac <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 800af5c:	edd3 7a00 	vldr	s15, [r3]
 800af60:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af64:	ed9f 7a90 	vldr	s14, [pc, #576]	; 800b1a8 <HAL_TIM_OC_DelayElapsedCallback+0x344>
 800af68:	ee27 8a87 	vmul.f32	s16, s15, s14



	// --- accumulate analog readings till we have enough samples which is a flag for the heart beat (= all MCU internal control loops)
	if (analog_samples_counter < ANALOG_SAMPLES_N ){  // TODO: if n_samples >= 32
 800af6c:	4b90      	ldr	r3, [pc, #576]	; (800b1b0 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	2b1f      	cmp	r3, #31
 800af72:	d82c      	bhi.n	800afce <HAL_TIM_OC_DelayElapsedCallback+0x16a>
		acc_I_tot_squared += (I_A * I_A + I_B * I_B + I_C * I_C) / 1.5f; //todo check 1.5
 800af74:	ee29 7a09 	vmul.f32	s14, s18, s18
 800af78:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800af7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af80:	ee68 7a08 	vmul.f32	s15, s16, s16
 800af84:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af88:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800af8c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800af90:	4b88      	ldr	r3, [pc, #544]	; (800b1b4 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 800af92:	edd3 7a00 	vldr	s15, [r3]
 800af96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af9a:	4b86      	ldr	r3, [pc, #536]	; (800b1b4 <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 800af9c:	edc3 7a00 	vstr	s15, [r3]
		acc_STRAIN0 += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_F);
 800afa0:	2103      	movs	r1, #3
 800afa2:	487b      	ldr	r0, [pc, #492]	; (800b190 <HAL_TIM_OC_DelayElapsedCallback+0x32c>)
 800afa4:	f7f6 fe80 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800afa8:	4602      	mov	r2, r0
 800afaa:	4b83      	ldr	r3, [pc, #524]	; (800b1b8 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	4413      	add	r3, r2
 800afb0:	4a81      	ldr	r2, [pc, #516]	; (800b1b8 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800afb2:	6013      	str	r3, [r2, #0]
		acc_Vbus += adc1_buf[RANK_CONT_Vbus-1];
 800afb4:	4b81      	ldr	r3, [pc, #516]	; (800b1bc <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800afb6:	89db      	ldrh	r3, [r3, #14]
 800afb8:	461a      	mov	r2, r3
 800afba:	4b81      	ldr	r3, [pc, #516]	; (800b1c0 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4413      	add	r3, r2
 800afc0:	4a7f      	ldr	r2, [pc, #508]	; (800b1c0 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800afc2:	6013      	str	r3, [r2, #0]
#if DIFF_FORCE
		acc_STRAIN1 += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_F);
#endif
		analog_samples_counter ++;
 800afc4:	4b7a      	ldr	r3, [pc, #488]	; (800b1b0 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3301      	adds	r3, #1
 800afca:	4a79      	ldr	r2, [pc, #484]	; (800b1b0 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800afcc:	6013      	str	r3, [r2, #0]
	}//200ns when not entering presumably

	if (FOC_enabled){
 800afce:	4b7d      	ldr	r3, [pc, #500]	; (800b1c4 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 800afd0:	781b      	ldrb	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f000 80b6 	beq.w	800b144 <HAL_TIM_OC_DelayElapsedCallback+0x2e0>

		register float a;
		register float b;

		register float direct_component = 0.0f;
 800afd8:	eddf 9a7b 	vldr	s19, [pc, #492]	; 800b1c8 <HAL_TIM_OC_DelayElapsedCallback+0x364>
		register float quadrature_component = 0.0f;
 800afdc:	ed9f 9a7a 	vldr	s18, [pc, #488]	; 800b1c8 <HAL_TIM_OC_DelayElapsedCallback+0x364>

		// --- Park transform
		//a = 0.7f * ((float)A-A_mean);
		//b = INV_SQRT_3 * (a + 2.0f * ((float)B-B_mean)); //200ns thanks to precalc of SQRT
		a = I_B; // a and b derived from B and C since they have same DAC (A is on external DAC which may behave differently -- adjust phaseshift accordingly!)
		b = INV_SQRT_3 * (a + 2.0f * I_C); //200ns thanks to precalc of SQRT
 800afe0:	ee78 7a08 	vadd.f32	s15, s16, s16
 800afe4:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800afe8:	ed9f 7a78 	vldr	s14, [pc, #480]	; 800b1cc <HAL_TIM_OC_DelayElapsedCallback+0x368>
 800afec:	ee27 8a87 	vmul.f32	s16, s15, s14

		// -- Clark transform
		register uint32_t poleB_phase_int = (pole_phase_int - 209 + 628) % 628; //
 800aff0:	4b66      	ldr	r3, [pc, #408]	; (800b18c <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f203 13a3 	addw	r3, r3, #419	; 0x1a3
 800aff8:	4a63      	ldr	r2, [pc, #396]	; (800b188 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 800affa:	fb82 1203 	smull	r1, r2, r2, r3
 800affe:	11d1      	asrs	r1, r2, #7
 800b000:	17da      	asrs	r2, r3, #31
 800b002:	1a8a      	subs	r2, r1, r2
 800b004:	f44f 711d 	mov.w	r1, #628	; 0x274
 800b008:	fb01 f202 	mul.w	r2, r1, r2
 800b00c:	1a9a      	subs	r2, r3, r2
 800b00e:	4614      	mov	r4, r2
		direct_component = a * cos_lookup[poleB_phase_int] + b * sin_lookup[poleB_phase_int];
 800b010:	4a6f      	ldr	r2, [pc, #444]	; (800b1d0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800b012:	00a3      	lsls	r3, r4, #2
 800b014:	4413      	add	r3, r2
 800b016:	edd3 7a00 	vldr	s15, [r3]
 800b01a:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800b01e:	4a6d      	ldr	r2, [pc, #436]	; (800b1d4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800b020:	00a3      	lsls	r3, r4, #2
 800b022:	4413      	add	r3, r2
 800b024:	edd3 7a00 	vldr	s15, [r3]
 800b028:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b02c:	ee77 9a27 	vadd.f32	s19, s14, s15
		quadrature_component = -a * sin_lookup[poleB_phase_int] + b * cos_lookup[poleB_phase_int]; //300ns
 800b030:	eeb1 7a68 	vneg.f32	s14, s17
 800b034:	4a67      	ldr	r2, [pc, #412]	; (800b1d4 <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800b036:	00a3      	lsls	r3, r4, #2
 800b038:	4413      	add	r3, r2
 800b03a:	edd3 7a00 	vldr	s15, [r3]
 800b03e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b042:	4a63      	ldr	r2, [pc, #396]	; (800b1d0 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800b044:	00a3      	lsls	r3, r4, #2
 800b046:	4413      	add	r3, r2
 800b048:	edd3 7a00 	vldr	s15, [r3]
 800b04c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b050:	ee37 9a27 	vadd.f32	s18, s14, s15

		// --- low pass filter
		register float lp = 0.001f;
 800b054:	ed9f 8a60 	vldr	s16, [pc, #384]	; 800b1d8 <HAL_TIM_OC_DelayElapsedCallback+0x374>
		direct_component_lp = (1-lp) * direct_component_lp + lp * direct_component;
 800b058:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b05c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800b060:	4b5e      	ldr	r3, [pc, #376]	; (800b1dc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800b062:	edd3 7a00 	vldr	s15, [r3]
 800b066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b06a:	ee68 7a29 	vmul.f32	s15, s16, s19
 800b06e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b072:	4b5a      	ldr	r3, [pc, #360]	; (800b1dc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800b074:	edc3 7a00 	vstr	s15, [r3]
		quadrature_component_lp = (1-lp) * quadrature_component_lp + lp * quadrature_component;//with register 240 without register 380ns for the 3 lines
 800b078:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b07c:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800b080:	4b57      	ldr	r3, [pc, #348]	; (800b1e0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800b082:	edd3 7a00 	vldr	s15, [r3]
 800b086:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b08a:	ee68 7a09 	vmul.f32	s15, s16, s18
 800b08e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b092:	4b53      	ldr	r3, [pc, #332]	; (800b1e0 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800b094:	edc3 7a00 	vstr	s15, [r3]


		static float direct_component_lp_integral = 0.0f;
		direct_component_lp_integral += direct_component_lp;//150ns for 2lines
 800b098:	4b52      	ldr	r3, [pc, #328]	; (800b1e4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800b09a:	ed93 7a00 	vldr	s14, [r3]
 800b09e:	4b4f      	ldr	r3, [pc, #316]	; (800b1dc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800b0a0:	edd3 7a00 	vldr	s15, [r3]
 800b0a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0a8:	4b4e      	ldr	r3, [pc, #312]	; (800b1e4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800b0aa:	edc3 7a00 	vstr	s15, [r3]

		register float direct_component_lp_integral_max = 0.4f / 0.00001f;
 800b0ae:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 800b1e8 <HAL_TIM_OC_DelayElapsedCallback+0x384>
		if (direct_component_lp_integral > direct_component_lp_integral_max){
 800b0b2:	4b4c      	ldr	r3, [pc, #304]	; (800b1e4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800b0b4:	edd3 7a00 	vldr	s15, [r3]
 800b0b8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0c0:	d502      	bpl.n	800b0c8 <HAL_TIM_OC_DelayElapsedCallback+0x264>
			direct_component_lp_integral = direct_component_lp_integral_max;
 800b0c2:	4b48      	ldr	r3, [pc, #288]	; (800b1e4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800b0c4:	ed83 8a00 	vstr	s16, [r3]
		}
		if (direct_component_lp_integral < -direct_component_lp_integral_max){
 800b0c8:	eeb1 7a48 	vneg.f32	s14, s16
 800b0cc:	4b45      	ldr	r3, [pc, #276]	; (800b1e4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800b0ce:	edd3 7a00 	vldr	s15, [r3]
 800b0d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b0d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0da:	dd04      	ble.n	800b0e6 <HAL_TIM_OC_DelayElapsedCallback+0x282>
			direct_component_lp_integral = -direct_component_lp_integral_max;
 800b0dc:	eef1 7a48 	vneg.f32	s15, s16
 800b0e0:	4b40      	ldr	r3, [pc, #256]	; (800b1e4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800b0e2:	edc3 7a00 	vstr	s15, [r3]
		}


		// --- PI controller
		FOC_phase_shift = 0.005f * direct_component_lp + 0.00001f  * direct_component_lp_integral; //220ns//starts oscillating at I = 0.00008f and alternatively at P = 0.03f
 800b0e6:	4b3d      	ldr	r3, [pc, #244]	; (800b1dc <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800b0e8:	edd3 7a00 	vldr	s15, [r3]
 800b0ec:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b1ec <HAL_TIM_OC_DelayElapsedCallback+0x388>
 800b0f0:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b0f4:	4b3b      	ldr	r3, [pc, #236]	; (800b1e4 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800b0f6:	edd3 7a00 	vldr	s15, [r3]
 800b0fa:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b1f0 <HAL_TIM_OC_DelayElapsedCallback+0x38c>
 800b0fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b102:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b106:	4b3b      	ldr	r3, [pc, #236]	; (800b1f4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800b108:	edc3 7a00 	vstr	s15, [r3]


		if (FOC_phase_shift > FOC_PHASE_LIM){
 800b10c:	4b39      	ldr	r3, [pc, #228]	; (800b1f4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800b10e:	edd3 7a00 	vldr	s15, [r3]
 800b112:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800b1f8 <HAL_TIM_OC_DelayElapsedCallback+0x394>
 800b116:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b11e:	dd03      	ble.n	800b128 <HAL_TIM_OC_DelayElapsedCallback+0x2c4>
			FOC_phase_shift = FOC_PHASE_LIM;
 800b120:	4b34      	ldr	r3, [pc, #208]	; (800b1f4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800b122:	4a36      	ldr	r2, [pc, #216]	; (800b1fc <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	e010      	b.n	800b14a <HAL_TIM_OC_DelayElapsedCallback+0x2e6>
		}
		else if (FOC_phase_shift < -FOC_PHASE_LIM){
 800b128:	4b32      	ldr	r3, [pc, #200]	; (800b1f4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800b12a:	edd3 7a00 	vldr	s15, [r3]
 800b12e:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b200 <HAL_TIM_OC_DelayElapsedCallback+0x39c>
 800b132:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b13a:	d506      	bpl.n	800b14a <HAL_TIM_OC_DelayElapsedCallback+0x2e6>
			FOC_phase_shift = -FOC_PHASE_LIM;
 800b13c:	4b2d      	ldr	r3, [pc, #180]	; (800b1f4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800b13e:	4a31      	ldr	r2, [pc, #196]	; (800b204 <HAL_TIM_OC_DelayElapsedCallback+0x3a0>)
 800b140:	601a      	str	r2, [r3, #0]
 800b142:	e002      	b.n	800b14a <HAL_TIM_OC_DelayElapsedCallback+0x2e6>
		//		FOC_phase_shift = 0.0f;
		//		direct_component_lp_integral = 0.0f;
		//	}//220ns
	}
	else {
		FOC_phase_shift = 0.1f;//empirical good mean of correction
 800b144:	4b2b      	ldr	r3, [pc, #172]	; (800b1f4 <HAL_TIM_OC_DelayElapsedCallback+0x390>)
 800b146:	4a30      	ldr	r2, [pc, #192]	; (800b208 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>)
 800b148:	601a      	str	r2, [r3, #0]
	}


#if DB_TIMING
	DB1L;
 800b14a:	4b07      	ldr	r3, [pc, #28]	; (800b168 <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800b14c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b150:	619a      	str	r2, [r3, #24]
#endif


	update_pwm();
 800b152:	f000 f85b 	bl	800b20c <update_pwm>
 800b156:	e000      	b.n	800b15a <HAL_TIM_OC_DelayElapsedCallback+0x2f6>
		return;
 800b158:	bf00      	nop

}
 800b15a:	3708      	adds	r7, #8
 800b15c:	46bd      	mov	sp, r7
 800b15e:	ecbd 8b04 	vpop	{d8-d9}
 800b162:	bdb0      	pop	{r4, r5, r7, pc}
 800b164:	20000fec 	.word	0x20000fec
 800b168:	40020c00 	.word	0x40020c00
 800b16c:	40010400 	.word	0x40010400
 800b170:	20000c28 	.word	0x20000c28
 800b174:	2000024c 	.word	0x2000024c
 800b178:	3c3426be 	.word	0x3c3426be
 800b17c:	20000008 	.word	0x20000008
 800b180:	40c90fd0 	.word	0x40c90fd0
 800b184:	42c80000 	.word	0x42c80000
 800b188:	342da7f3 	.word	0x342da7f3
 800b18c:	20000d8c 	.word	0x20000d8c
 800b190:	20000e5c 	.word	0x20000e5c
 800b194:	20000730 	.word	0x20000730
 800b198:	20000ea4 	.word	0x20000ea4
 800b19c:	20000030 	.word	0x20000030
 800b1a0:	3e09374c 	.word	0x3e09374c
 800b1a4:	20000034 	.word	0x20000034
 800b1a8:	3e418937 	.word	0x3e418937
 800b1ac:	20000038 	.word	0x20000038
 800b1b0:	200002a0 	.word	0x200002a0
 800b1b4:	20000288 	.word	0x20000288
 800b1b8:	2000026c 	.word	0x2000026c
 800b1bc:	20000d7c 	.word	0x20000d7c
 800b1c0:	20000274 	.word	0x20000274
 800b1c4:	2000000c 	.word	0x2000000c
 800b1c8:	00000000 	.word	0x00000000
 800b1cc:	3f13cd36 	.word	0x3f13cd36
 800b1d0:	20001038 	.word	0x20001038
 800b1d4:	20001d88 	.word	0x20001d88
 800b1d8:	3a83126f 	.word	0x3a83126f
 800b1dc:	200002b8 	.word	0x200002b8
 800b1e0:	200002bc 	.word	0x200002bc
 800b1e4:	200002c0 	.word	0x200002c0
 800b1e8:	471c4000 	.word	0x471c4000
 800b1ec:	3ba3d70a 	.word	0x3ba3d70a
 800b1f0:	3727c5ac 	.word	0x3727c5ac
 800b1f4:	2000029c 	.word	0x2000029c
 800b1f8:	3e99999a 	.word	0x3e99999a
 800b1fc:	3e99999a 	.word	0x3e99999a
 800b200:	be99999a 	.word	0xbe99999a
 800b204:	be99999a 	.word	0xbe99999a
 800b208:	3dcccccd 	.word	0x3dcccccd

0800b20c <update_pwm>:


// -----------------------------------------------------------
// called from MAIN UPDATE STEP to calc and write pwm values to FETdriver
// -----------------------------------------------------------
void update_pwm(void){
 800b20c:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800b210:	ed2d 8b04 	vpush	{d8-d9}
 800b214:	af00      	add	r7, sp, #0

#if DB_TIMING
	DB1H;
 800b216:	4bbb      	ldr	r3, [pc, #748]	; (800b504 <update_pwm+0x2f8>)
 800b218:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b21c:	619a      	str	r2, [r3, #24]
#endif

	//register int32_t field_phase_int;
	register int32_t field_phase_int = 0;
 800b21e:	2400      	movs	r4, #0

	// --- stiffness motor
	register float u0 = amp + stiffness * omegaEnc / (float)fast_Vbus * 603.0f ;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 800b220:	4bb9      	ldr	r3, [pc, #740]	; (800b508 <update_pwm+0x2fc>)
 800b222:	ed93 7a00 	vldr	s14, [r3]
 800b226:	4bb9      	ldr	r3, [pc, #740]	; (800b50c <update_pwm+0x300>)
 800b228:	edd3 7a00 	vldr	s15, [r3]
 800b22c:	ee67 6a27 	vmul.f32	s13, s14, s15
 800b230:	4bb7      	ldr	r3, [pc, #732]	; (800b510 <update_pwm+0x304>)
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	ee07 3a90 	vmov	s15, r3
 800b238:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b23c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b240:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800b514 <update_pwm+0x308>
 800b244:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b248:	4bb3      	ldr	r3, [pc, #716]	; (800b518 <update_pwm+0x30c>)
 800b24a:	edd3 7a00 	vldr	s15, [r3]
 800b24e:	ee37 8a27 	vadd.f32	s16, s14, s15
	// -- invisible motor
	//register float modified_amp = amp + stiffness * lp_omegaEnc + lp_omegaEncDot * 0.00003f * 0.1f * generic_add;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
	//AMAZING invisible motor kind of works at generic_add = -8 BUT super unstable at <-9....with both in lp 0.1 it is stable all the way to -25

	// --- signed u0 becomes abs(u0) and direction is encoded in field_phase_int
	if (u0 > 0){
 800b252:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b25a:	dd13      	ble.n	800b284 <update_pwm+0x78>
		field_phase_int = pole_phase_int - (int32_t)((phase_shift + FOC_phase_shift) * 100.0f);
 800b25c:	4baf      	ldr	r3, [pc, #700]	; (800b51c <update_pwm+0x310>)
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4aaf      	ldr	r2, [pc, #700]	; (800b520 <update_pwm+0x314>)
 800b262:	ed92 7a00 	vldr	s14, [r2]
 800b266:	4aaf      	ldr	r2, [pc, #700]	; (800b524 <update_pwm+0x318>)
 800b268:	edd2 7a00 	vldr	s15, [r2]
 800b26c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b270:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800b528 <update_pwm+0x31c>
 800b274:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b278:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b27c:	ee17 2a90 	vmov	r2, s15
 800b280:	1a9c      	subs	r4, r3, r2
 800b282:	e014      	b.n	800b2ae <update_pwm+0xa2>
	}
	else {
		field_phase_int = pole_phase_int + (int32_t)((phase_shift + FOC_phase_shift) * 100.0f);
 800b284:	4ba6      	ldr	r3, [pc, #664]	; (800b520 <update_pwm+0x314>)
 800b286:	ed93 7a00 	vldr	s14, [r3]
 800b28a:	4ba6      	ldr	r3, [pc, #664]	; (800b524 <update_pwm+0x318>)
 800b28c:	edd3 7a00 	vldr	s15, [r3]
 800b290:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b294:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 800b528 <update_pwm+0x31c>
 800b298:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b29c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2a0:	ee17 2a90 	vmov	r2, s15
 800b2a4:	4b9d      	ldr	r3, [pc, #628]	; (800b51c <update_pwm+0x310>)
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	18d4      	adds	r4, r2, r3
		u0 = -u0;
 800b2aa:	eeb1 8a48 	vneg.f32	s16, s16
	}

	// --- clamp u0
	if (u0 > AMP_LIMIT){
 800b2ae:	eddf 7a9f 	vldr	s15, [pc, #636]	; 800b52c <update_pwm+0x320>
 800b2b2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b2b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ba:	dd01      	ble.n	800b2c0 <update_pwm+0xb4>
		u0 = AMP_LIMIT;
 800b2bc:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 800b52c <update_pwm+0x320>
	}

	if (!sw_enable_pwm){
 800b2c0:	4b9b      	ldr	r3, [pc, #620]	; (800b530 <update_pwm+0x324>)
 800b2c2:	781b      	ldrb	r3, [r3, #0]
 800b2c4:	f083 0301 	eor.w	r3, r3, #1
 800b2c8:	b2db      	uxtb	r3, r3
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d001      	beq.n	800b2d2 <update_pwm+0xc6>
		u0 = 0;
 800b2ce:	ed9f 8a99 	vldr	s16, [pc, #612]	; 800b534 <update_pwm+0x328>
	}

	acc_u0 += u0;
 800b2d2:	4b99      	ldr	r3, [pc, #612]	; (800b538 <update_pwm+0x32c>)
 800b2d4:	edd3 7a00 	vldr	s15, [r3]
 800b2d8:	ee78 7a27 	vadd.f32	s15, s16, s15
 800b2dc:	4b96      	ldr	r3, [pc, #600]	; (800b538 <update_pwm+0x32c>)
 800b2de:	edc3 7a00 	vstr	s15, [r3]

	if (field_phase_int < 0) {
 800b2e2:	2c00      	cmp	r4, #0
 800b2e4:	da02      	bge.n	800b2ec <update_pwm+0xe0>
		field_phase_int += 628;
 800b2e6:	f504 741d 	add.w	r4, r4, #628	; 0x274
 800b2ea:	e004      	b.n	800b2f6 <update_pwm+0xea>
	}
	else if (field_phase_int >= 628) {
 800b2ec:	f5b4 7f1d 	cmp.w	r4, #628	; 0x274
 800b2f0:	db01      	blt.n	800b2f6 <update_pwm+0xea>
		field_phase_int -= 628;
 800b2f2:	f5a4 741d 	sub.w	r4, r4, #628	; 0x274
	}//150ns

	register float uA = 0.0f;
 800b2f6:	eddf 8a8f 	vldr	s17, [pc, #572]	; 800b534 <update_pwm+0x328>
	register float uB = 0.0f;
 800b2fa:	eddf 9a8e 	vldr	s19, [pc, #568]	; 800b534 <update_pwm+0x328>
	register float uC = 0.0f;
 800b2fe:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 800b534 <update_pwm+0x328>

	register uint16_t pwmA = 0;
 800b302:	2500      	movs	r5, #0
	register uint16_t pwmB = 0;
 800b304:	f04f 0800 	mov.w	r8, #0
	register uint16_t pwmC = 0;
 800b308:	2600      	movs	r6, #0

	if (!normal_pwm_update){
 800b30a:	4b8c      	ldr	r3, [pc, #560]	; (800b53c <update_pwm+0x330>)
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	f083 0301 	eor.w	r3, r3, #1
 800b312:	b2db      	uxtb	r3, r3
 800b314:	2b00      	cmp	r3, #0
 800b316:	d004      	beq.n	800b322 <update_pwm+0x116>
#if DB_TIMING
		DB1L;
 800b318:	4b7a      	ldr	r3, [pc, #488]	; (800b504 <update_pwm+0x2f8>)
 800b31a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b31e:	619a      	str	r2, [r3, #24]
#endif
		return;
 800b320:	e197      	b.n	800b652 <update_pwm+0x446>
	}

	if (current_mode != freerun ){
 800b322:	4b87      	ldr	r3, [pc, #540]	; (800b540 <update_pwm+0x334>)
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	2b02      	cmp	r3, #2
 800b328:	f000 80ad 	beq.w	800b486 <update_pwm+0x27a>
		if (current_mode == sinusoidal ){
 800b32c:	4b84      	ldr	r3, [pc, #528]	; (800b540 <update_pwm+0x334>)
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	2b00      	cmp	r3, #0
 800b332:	d137      	bne.n	800b3a4 <update_pwm+0x198>

			if  (field_phase_int < 210)	{
 800b334:	2cd1      	cmp	r4, #209	; 0xd1
 800b336:	dc0e      	bgt.n	800b356 <update_pwm+0x14a>
				uA = lookup[field_phase_int]; //took<32000ns - with lookup implement it's just 2000ns
 800b338:	4a82      	ldr	r2, [pc, #520]	; (800b544 <update_pwm+0x338>)
 800b33a:	00a3      	lsls	r3, r4, #2
 800b33c:	4413      	add	r3, r2
 800b33e:	edd3 8a00 	vldr	s17, [r3]
				uB = lookup[210 - 1 - field_phase_int]; //
 800b342:	f1c4 03d1 	rsb	r3, r4, #209	; 0xd1
 800b346:	4a7f      	ldr	r2, [pc, #508]	; (800b544 <update_pwm+0x338>)
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	edd3 9a00 	vldr	s19, [r3]
				uC = 0;
 800b350:	ed9f 9a78 	vldr	s18, [pc, #480]	; 800b534 <update_pwm+0x328>
 800b354:	e06b      	b.n	800b42e <update_pwm+0x222>
			}
			else if  (field_phase_int < 420){	 //210...419
 800b356:	f5b4 7fd2 	cmp.w	r4, #420	; 0x1a4
 800b35a:	da11      	bge.n	800b380 <update_pwm+0x174>
				uA = 0;
 800b35c:	eddf 8a75 	vldr	s17, [pc, #468]	; 800b534 <update_pwm+0x328>
				uB = lookup[field_phase_int - 210];
 800b360:	f1a4 03d2 	sub.w	r3, r4, #210	; 0xd2
 800b364:	4a77      	ldr	r2, [pc, #476]	; (800b544 <update_pwm+0x338>)
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	edd3 9a00 	vldr	s19, [r3]
				uC = lookup[420 - 1 - field_phase_int];
 800b36e:	f5c4 73d1 	rsb	r3, r4, #418	; 0x1a2
 800b372:	3301      	adds	r3, #1
 800b374:	4a73      	ldr	r2, [pc, #460]	; (800b544 <update_pwm+0x338>)
 800b376:	009b      	lsls	r3, r3, #2
 800b378:	4413      	add	r3, r2
 800b37a:	ed93 9a00 	vldr	s18, [r3]
 800b37e:	e056      	b.n	800b42e <update_pwm+0x222>
			}
			else	{  //420...629
				uA = lookup[630 - 1 - field_phase_int];
 800b380:	f5c4 731d 	rsb	r3, r4, #628	; 0x274
 800b384:	3301      	adds	r3, #1
 800b386:	4a6f      	ldr	r2, [pc, #444]	; (800b544 <update_pwm+0x338>)
 800b388:	009b      	lsls	r3, r3, #2
 800b38a:	4413      	add	r3, r2
 800b38c:	edd3 8a00 	vldr	s17, [r3]
				uB = 0;
 800b390:	eddf 9a68 	vldr	s19, [pc, #416]	; 800b534 <update_pwm+0x328>
				uC = lookup[field_phase_int - 420];
 800b394:	f5a4 73d2 	sub.w	r3, r4, #420	; 0x1a4
 800b398:	4a6a      	ldr	r2, [pc, #424]	; (800b544 <update_pwm+0x338>)
 800b39a:	009b      	lsls	r3, r3, #2
 800b39c:	4413      	add	r3, r2
 800b39e:	ed93 9a00 	vldr	s18, [r3]
 800b3a2:	e044      	b.n	800b42e <update_pwm+0x222>
			}
		}//400ns

		else if (current_mode == trapezoidal){
 800b3a4:	4b66      	ldr	r3, [pc, #408]	; (800b540 <update_pwm+0x334>)
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d140      	bne.n	800b42e <update_pwm+0x222>
			if  (field_phase_int < 105-52)	{
 800b3ac:	2c34      	cmp	r4, #52	; 0x34
 800b3ae:	dc06      	bgt.n	800b3be <update_pwm+0x1b2>
				uA = 1;
 800b3b0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800b3b4:	eddf 9a5f 	vldr	s19, [pc, #380]	; 800b534 <update_pwm+0x328>
				uC = 0;
 800b3b8:	ed9f 9a5e 	vldr	s18, [pc, #376]	; 800b534 <update_pwm+0x328>
 800b3bc:	e037      	b.n	800b42e <update_pwm+0x222>
			}
			else if  (field_phase_int < 210-52)	{
 800b3be:	2c9d      	cmp	r4, #157	; 0x9d
 800b3c0:	dc06      	bgt.n	800b3d0 <update_pwm+0x1c4>
				uA = 1;
 800b3c2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 1;
 800b3c6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 0;
 800b3ca:	ed9f 9a5a 	vldr	s18, [pc, #360]	; 800b534 <update_pwm+0x328>
 800b3ce:	e02e      	b.n	800b42e <update_pwm+0x222>
			}
			else if  (field_phase_int < 315-52)	{
 800b3d0:	f5b4 7f83 	cmp.w	r4, #262	; 0x106
 800b3d4:	dc06      	bgt.n	800b3e4 <update_pwm+0x1d8>
				uA = 0;
 800b3d6:	eddf 8a57 	vldr	s17, [pc, #348]	; 800b534 <update_pwm+0x328>
				uB = 1;
 800b3da:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 0;
 800b3de:	ed9f 9a55 	vldr	s18, [pc, #340]	; 800b534 <update_pwm+0x328>
 800b3e2:	e024      	b.n	800b42e <update_pwm+0x222>
			}
			else if  (field_phase_int < 420-52)	{
 800b3e4:	f5b4 7fb8 	cmp.w	r4, #368	; 0x170
 800b3e8:	da06      	bge.n	800b3f8 <update_pwm+0x1ec>
				uA = 0;
 800b3ea:	eddf 8a52 	vldr	s17, [pc, #328]	; 800b534 <update_pwm+0x328>
				uB = 1;
 800b3ee:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 1;
 800b3f2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800b3f6:	e01a      	b.n	800b42e <update_pwm+0x222>
			}
			else if  (field_phase_int < 525-52)	{
 800b3f8:	f5b4 7fec 	cmp.w	r4, #472	; 0x1d8
 800b3fc:	dc06      	bgt.n	800b40c <update_pwm+0x200>
				uA = 0;
 800b3fe:	eddf 8a4d 	vldr	s17, [pc, #308]	; 800b534 <update_pwm+0x328>
				uB = 0;
 800b402:	eddf 9a4c 	vldr	s19, [pc, #304]	; 800b534 <update_pwm+0x328>
				uC = 1;
 800b406:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800b40a:	e010      	b.n	800b42e <update_pwm+0x222>
			}
			else if  (field_phase_int < 630-52)	{
 800b40c:	f240 2341 	movw	r3, #577	; 0x241
 800b410:	429c      	cmp	r4, r3
 800b412:	dc06      	bgt.n	800b422 <update_pwm+0x216>
				uA = 1;
 800b414:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800b418:	eddf 9a46 	vldr	s19, [pc, #280]	; 800b534 <update_pwm+0x328>
				uC = 1;
 800b41c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800b420:	e005      	b.n	800b42e <update_pwm+0x222>
			}
			else 	{ //same as first half phase
				uA = 1;
 800b422:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800b426:	eddf 9a43 	vldr	s19, [pc, #268]	; 800b534 <update_pwm+0x328>
				uC = 0;
 800b42a:	ed9f 9a42 	vldr	s18, [pc, #264]	; 800b534 <update_pwm+0x328>
			}
		}

		pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //180ns
 800b42e:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b54c <update_pwm+0x340>
 800b432:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b436:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800b43a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b43e:	ee17 3a90 	vmov	r3, s15
 800b442:	b29d      	uxth	r5, r3
		pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //180ns
 800b444:	eddf 7a41 	vldr	s15, [pc, #260]	; 800b54c <update_pwm+0x340>
 800b448:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b44c:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800b450:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b454:	ee17 3a90 	vmov	r3, s15
 800b458:	fa1f f883 	uxth.w	r8, r3
		pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //180ns
 800b45c:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800b54c <update_pwm+0x340>
 800b460:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b464:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b468:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b46c:	ee17 3a90 	vmov	r3, s15
 800b470:	b29e      	uxth	r6, r3

		// --- send out PWM pulses 0...2048

		TIM1->CCR1 = pwmA; //takes<150ns
 800b472:	4b35      	ldr	r3, [pc, #212]	; (800b548 <update_pwm+0x33c>)
 800b474:	462a      	mov	r2, r5
 800b476:	635a      	str	r2, [r3, #52]	; 0x34
		if (INVERT){
			TIM1->CCR3 = pwmB; //takes<150ns
			TIM1->CCR2 = pwmC; //takes<150ns
		}
		else {
			TIM1->CCR2 = pwmB; //takes<150ns
 800b478:	4b33      	ldr	r3, [pc, #204]	; (800b548 <update_pwm+0x33c>)
 800b47a:	4642      	mov	r2, r8
 800b47c:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = pwmC; //takes<150ns
 800b47e:	4b32      	ldr	r3, [pc, #200]	; (800b548 <update_pwm+0x33c>)
 800b480:	4632      	mov	r2, r6
 800b482:	63da      	str	r2, [r3, #60]	; 0x3c
 800b484:	e0e1      	b.n	800b64a <update_pwm+0x43e>
		}//300ns for both
	}

	else{ // NOTE this mode is still experimental
		if  (field_phase_int < 105)	{
 800b486:	2c68      	cmp	r4, #104	; 0x68
 800b488:	dc1c      	bgt.n	800b4c4 <update_pwm+0x2b8>
			uA = 1;
 800b48a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //takes<2s00ns
 800b48e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800b54c <update_pwm+0x340>
 800b492:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b496:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800b49a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b49e:	ee17 3a90 	vmov	r3, s15
 800b4a2:	b29d      	uxth	r5, r3
			TIM1->CCR1 = pwmA; //takes<150ns
 800b4a4:	4b28      	ldr	r3, [pc, #160]	; (800b548 <update_pwm+0x33c>)
 800b4a6:	462a      	mov	r2, r5
 800b4a8:	635a      	str	r2, [r3, #52]	; 0x34
			//			SET_BIT(TIM1->CCMR1, TIM_CCMR1_OC2CE);
			//			CLEAR_BIT(TIM1->CCMR1, TIM_CCMR1_OC2CE);
			//			SET_BIT(TIM1->CCMR2, TIM_CCMR2_OC3CE);
			//			CLEAR_BIT(TIM1->CCMR2, TIM_CCMR2_OC3CE);

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800b4aa:	4b27      	ldr	r3, [pc, #156]	; (800b548 <update_pwm+0x33c>)
 800b4ac:	699b      	ldr	r3, [r3, #24]
 800b4ae:	4a26      	ldr	r2, [pc, #152]	; (800b548 <update_pwm+0x33c>)
 800b4b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b4b4:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800b4b6:	4b24      	ldr	r3, [pc, #144]	; (800b548 <update_pwm+0x33c>)
 800b4b8:	699b      	ldr	r3, [r3, #24]
 800b4ba:	4a23      	ldr	r2, [pc, #140]	; (800b548 <update_pwm+0x33c>)
 800b4bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b4c0:	6193      	str	r3, [r2, #24]
 800b4c2:	e0c2      	b.n	800b64a <update_pwm+0x43e>
		}
		else if  (field_phase_int < 210)	{
 800b4c4:	2cd1      	cmp	r4, #209	; 0xd1
 800b4c6:	dc43      	bgt.n	800b550 <update_pwm+0x344>
			uB = 1;
 800b4c8:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //takes<2s00ns
 800b4cc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b54c <update_pwm+0x340>
 800b4d0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b4d4:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800b4d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b4dc:	ee17 3a90 	vmov	r3, s15
 800b4e0:	fa1f f883 	uxth.w	r8, r3
			TIM1->CCR2 = pwmB; //takes<150ns
 800b4e4:	4b18      	ldr	r3, [pc, #96]	; (800b548 <update_pwm+0x33c>)
 800b4e6:	4642      	mov	r2, r8
 800b4e8:	639a      	str	r2, [r3, #56]	; 0x38

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800b4ea:	4b17      	ldr	r3, [pc, #92]	; (800b548 <update_pwm+0x33c>)
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	4a16      	ldr	r2, [pc, #88]	; (800b548 <update_pwm+0x33c>)
 800b4f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b4f4:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800b4f6:	4b14      	ldr	r3, [pc, #80]	; (800b548 <update_pwm+0x33c>)
 800b4f8:	699b      	ldr	r3, [r3, #24]
 800b4fa:	4a13      	ldr	r2, [pc, #76]	; (800b548 <update_pwm+0x33c>)
 800b4fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b500:	6193      	str	r3, [r2, #24]
 800b502:	e0a2      	b.n	800b64a <update_pwm+0x43e>
 800b504:	40020c00 	.word	0x40020c00
 800b508:	20000014 	.word	0x20000014
 800b50c:	2000025c 	.word	0x2000025c
 800b510:	2000002c 	.word	0x2000002c
 800b514:	4416c000 	.word	0x4416c000
 800b518:	20000240 	.word	0x20000240
 800b51c:	20000d8c 	.word	0x20000d8c
 800b520:	20000010 	.word	0x20000010
 800b524:	2000029c 	.word	0x2000029c
 800b528:	42c80000 	.word	0x42c80000
 800b52c:	3f733333 	.word	0x3f733333
 800b530:	2000023d 	.word	0x2000023d
 800b534:	00000000 	.word	0x00000000
 800b538:	20000290 	.word	0x20000290
 800b53c:	2000000d 	.word	0x2000000d
 800b540:	20000234 	.word	0x20000234
 800b544:	20000368 	.word	0x20000368
 800b548:	40010000 	.word	0x40010000
 800b54c:	45800000 	.word	0x45800000
		}
		else if  (field_phase_int < 315)	{
 800b550:	f5b4 7f9d 	cmp.w	r4, #314	; 0x13a
 800b554:	dc1d      	bgt.n	800b592 <update_pwm+0x386>
			uB = 1;
 800b556:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //takes<2s00ns
 800b55a:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 800b54c <update_pwm+0x340>
 800b55e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b562:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800b566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b56a:	ee17 3a90 	vmov	r3, s15
 800b56e:	fa1f f883 	uxth.w	r8, r3
			TIM1->CCR2 = pwmB; //takes<150ns
 800b572:	4b3b      	ldr	r3, [pc, #236]	; (800b660 <update_pwm+0x454>)
 800b574:	4642      	mov	r2, r8
 800b576:	639a      	str	r2, [r3, #56]	; 0x38

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800b578:	4b39      	ldr	r3, [pc, #228]	; (800b660 <update_pwm+0x454>)
 800b57a:	699b      	ldr	r3, [r3, #24]
 800b57c:	4a38      	ldr	r2, [pc, #224]	; (800b660 <update_pwm+0x454>)
 800b57e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b582:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800b584:	4b36      	ldr	r3, [pc, #216]	; (800b660 <update_pwm+0x454>)
 800b586:	699b      	ldr	r3, [r3, #24]
 800b588:	4a35      	ldr	r2, [pc, #212]	; (800b660 <update_pwm+0x454>)
 800b58a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b58e:	6193      	str	r3, [r2, #24]
 800b590:	e05b      	b.n	800b64a <update_pwm+0x43e>
		}
		else if  (field_phase_int < 420)	{
 800b592:	f5b4 7fd2 	cmp.w	r4, #420	; 0x1a4
 800b596:	da1c      	bge.n	800b5d2 <update_pwm+0x3c6>
			uC = 1;
 800b598:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //takes<2s00ns
 800b59c:	eddf 7a31 	vldr	s15, [pc, #196]	; 800b664 <update_pwm+0x458>
 800b5a0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b5a4:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b5a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ac:	ee17 3a90 	vmov	r3, s15
 800b5b0:	b29e      	uxth	r6, r3
			TIM1->CCR3 = pwmC; //takes<150ns
 800b5b2:	4b2b      	ldr	r3, [pc, #172]	; (800b660 <update_pwm+0x454>)
 800b5b4:	4632      	mov	r2, r6
 800b5b6:	63da      	str	r2, [r3, #60]	; 0x3c

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800b5b8:	4b29      	ldr	r3, [pc, #164]	; (800b660 <update_pwm+0x454>)
 800b5ba:	699b      	ldr	r3, [r3, #24]
 800b5bc:	4a28      	ldr	r2, [pc, #160]	; (800b660 <update_pwm+0x454>)
 800b5be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b5c2:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800b5c4:	4b26      	ldr	r3, [pc, #152]	; (800b660 <update_pwm+0x454>)
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	4a25      	ldr	r2, [pc, #148]	; (800b660 <update_pwm+0x454>)
 800b5ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b5ce:	6193      	str	r3, [r2, #24]
 800b5d0:	e03b      	b.n	800b64a <update_pwm+0x43e>
		}
		else if  (field_phase_int < 525)	{
 800b5d2:	f5b4 7f03 	cmp.w	r4, #524	; 0x20c
 800b5d6:	dc1c      	bgt.n	800b612 <update_pwm+0x406>
			uC = 1;
 800b5d8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //takes<2s00ns
 800b5dc:	eddf 7a21 	vldr	s15, [pc, #132]	; 800b664 <update_pwm+0x458>
 800b5e0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b5e4:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b5e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ec:	ee17 3a90 	vmov	r3, s15
 800b5f0:	b29e      	uxth	r6, r3
			TIM1->CCR3 = pwmC; //takes<150ns
 800b5f2:	4b1b      	ldr	r3, [pc, #108]	; (800b660 <update_pwm+0x454>)
 800b5f4:	4632      	mov	r2, r6
 800b5f6:	63da      	str	r2, [r3, #60]	; 0x3c

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800b5f8:	4b19      	ldr	r3, [pc, #100]	; (800b660 <update_pwm+0x454>)
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	4a18      	ldr	r2, [pc, #96]	; (800b660 <update_pwm+0x454>)
 800b5fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b602:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800b604:	4b16      	ldr	r3, [pc, #88]	; (800b660 <update_pwm+0x454>)
 800b606:	699b      	ldr	r3, [r3, #24]
 800b608:	4a15      	ldr	r2, [pc, #84]	; (800b660 <update_pwm+0x454>)
 800b60a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b60e:	6193      	str	r3, [r2, #24]
 800b610:	e01b      	b.n	800b64a <update_pwm+0x43e>
		}
		else 	{
			uA = 1;
 800b612:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //takes<2s00ns
 800b616:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b664 <update_pwm+0x458>
 800b61a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b61e:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800b622:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b626:	ee17 3a90 	vmov	r3, s15
 800b62a:	b29d      	uxth	r5, r3
			TIM1->CCR1 = pwmA; //takes<150ns
 800b62c:	4b0c      	ldr	r3, [pc, #48]	; (800b660 <update_pwm+0x454>)
 800b62e:	462a      	mov	r2, r5
 800b630:	635a      	str	r2, [r3, #52]	; 0x34

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800b632:	4b0b      	ldr	r3, [pc, #44]	; (800b660 <update_pwm+0x454>)
 800b634:	699b      	ldr	r3, [r3, #24]
 800b636:	4a0a      	ldr	r2, [pc, #40]	; (800b660 <update_pwm+0x454>)
 800b638:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b63c:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800b63e:	4b08      	ldr	r3, [pc, #32]	; (800b660 <update_pwm+0x454>)
 800b640:	699b      	ldr	r3, [r3, #24]
 800b642:	4a07      	ldr	r2, [pc, #28]	; (800b660 <update_pwm+0x454>)
 800b644:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b648:	6193      	str	r3, [r2, #24]
		}

	}

#if DB_TIMING
	DB1L;
 800b64a:	4b07      	ldr	r3, [pc, #28]	; (800b668 <update_pwm+0x45c>)
 800b64c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b650:	619a      	str	r2, [r3, #24]
#endif

}
 800b652:	46bd      	mov	sp, r7
 800b654:	ecbd 8b04 	vpop	{d8-d9}
 800b658:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800b65c:	4770      	bx	lr
 800b65e:	bf00      	nop
 800b660:	40010000 	.word	0x40010000
 800b664:	45800000 	.word	0x45800000
 800b668:	40020c00 	.word	0x40020c00

0800b66c <HAL_TIM_IC_CaptureCallback>:



////called every second step of the quadrature encoder was used for pwm update in past

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ // see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder
 800b66c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b670:	b082      	sub	sp, #8
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8){
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a3a      	ldr	r2, [pc, #232]	; (800b764 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d16b      	bne.n	800b758 <HAL_TIM_IC_CaptureCallback+0xec>
		omegaEnc_missing_update_counter = 0;
 800b680:	4b39      	ldr	r3, [pc, #228]	; (800b768 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]

		static float omegaEnc_last = 0.0f;
		static uint32_t last_t = 0;
		register uint32_t t_now = TIM2->CNT;
 800b686:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b68a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		register int32_t delta_t;
		if (t_now > last_t){
 800b68c:	4b37      	ldr	r3, [pc, #220]	; (800b76c <HAL_TIM_IC_CaptureCallback+0x100>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	429c      	cmp	r4, r3
 800b692:	d904      	bls.n	800b69e <HAL_TIM_IC_CaptureCallback+0x32>
			delta_t = t_now - last_t;
 800b694:	4b35      	ldr	r3, [pc, #212]	; (800b76c <HAL_TIM_IC_CaptureCallback+0x100>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	1ae3      	subs	r3, r4, r3
 800b69a:	4698      	mov	r8, r3
 800b69c:	e003      	b.n	800b6a6 <HAL_TIM_IC_CaptureCallback+0x3a>
		}
		else {
			delta_t = t_now - last_t; //todo correct statement
 800b69e:	4b33      	ldr	r3, [pc, #204]	; (800b76c <HAL_TIM_IC_CaptureCallback+0x100>)
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	1ae3      	subs	r3, r4, r3
 800b6a4:	4698      	mov	r8, r3
		}

		if (delta_t > 84000){
 800b6a6:	4b32      	ldr	r3, [pc, #200]	; (800b770 <HAL_TIM_IC_CaptureCallback+0x104>)
 800b6a8:	4598      	cmp	r8, r3
 800b6aa:	dd55      	ble.n	800b758 <HAL_TIM_IC_CaptureCallback+0xec>
			register int32_t EncVal = TIM8->CNT;
 800b6ac:	4b2d      	ldr	r3, [pc, #180]	; (800b764 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6b0:	461d      	mov	r5, r3
			register int32_t delta_EncVal = (int32_t)EncVal - (int32_t)last_EncVal_omegaEnc;
 800b6b2:	4b30      	ldr	r3, [pc, #192]	; (800b774 <HAL_TIM_IC_CaptureCallback+0x108>)
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	1aee      	subs	r6, r5, r3
			last_EncVal_omegaEnc = EncVal;
 800b6b8:	4b2e      	ldr	r3, [pc, #184]	; (800b774 <HAL_TIM_IC_CaptureCallback+0x108>)
 800b6ba:	601d      	str	r5, [r3, #0]
			last_t = t_now;
 800b6bc:	4b2b      	ldr	r3, [pc, #172]	; (800b76c <HAL_TIM_IC_CaptureCallback+0x100>)
 800b6be:	601c      	str	r4, [r3, #0]

			delta_EncVal = encoder_jump_comp(delta_EncVal);
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	f000 f885 	bl	800b7d0 <encoder_jump_comp>
 800b6c6:	4606      	mov	r6, r0

			omegaEnc =  omega_division(delta_EncVal, delta_t);
 800b6c8:	4641      	mov	r1, r8
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	f000 f860 	bl	800b790 <omega_division>
 800b6d0:	eef0 7a40 	vmov.f32	s15, s0
 800b6d4:	4b28      	ldr	r3, [pc, #160]	; (800b778 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b6d6:	edc3 7a00 	vstr	s15, [r3]

			lp_omegaEnc = (1.0f - LP_OMEGA_ENC_CONST) * lp_omegaEnc + LP_OMEGA_ENC_CONST * omegaEnc;
 800b6da:	4b28      	ldr	r3, [pc, #160]	; (800b77c <HAL_TIM_IC_CaptureCallback+0x110>)
 800b6dc:	edd3 7a00 	vldr	s15, [r3]
 800b6e0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b6e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b6e8:	4b23      	ldr	r3, [pc, #140]	; (800b778 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b6ea:	edd3 7a00 	vldr	s15, [r3]
 800b6ee:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b6f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6fa:	4b20      	ldr	r3, [pc, #128]	; (800b77c <HAL_TIM_IC_CaptureCallback+0x110>)
 800b6fc:	edc3 7a00 	vstr	s15, [r3]

			omegaEncDot = (omegaEnc - omegaEnc_last) / (float)delta_t * 84000000.0f;
 800b700:	4b1d      	ldr	r3, [pc, #116]	; (800b778 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b702:	ed93 7a00 	vldr	s14, [r3]
 800b706:	4b1e      	ldr	r3, [pc, #120]	; (800b780 <HAL_TIM_IC_CaptureCallback+0x114>)
 800b708:	edd3 7a00 	vldr	s15, [r3]
 800b70c:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b710:	ee07 8a90 	vmov	s15, r8
 800b714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b718:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b71c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800b784 <HAL_TIM_IC_CaptureCallback+0x118>
 800b720:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b724:	4b18      	ldr	r3, [pc, #96]	; (800b788 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800b726:	edc3 7a00 	vstr	s15, [r3]

			lp_omegaEncDot = (1.0f - LP_OMEGA_ENC_DOT_CONST) * lp_omegaEncDot + LP_OMEGA_ENC_DOT_CONST * omegaEncDot;
 800b72a:	4b18      	ldr	r3, [pc, #96]	; (800b78c <HAL_TIM_IC_CaptureCallback+0x120>)
 800b72c:	edd3 7a00 	vldr	s15, [r3]
 800b730:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b734:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b738:	4b13      	ldr	r3, [pc, #76]	; (800b788 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800b73a:	edd3 7a00 	vldr	s15, [r3]
 800b73e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b742:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b746:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b74a:	4b10      	ldr	r3, [pc, #64]	; (800b78c <HAL_TIM_IC_CaptureCallback+0x120>)
 800b74c:	edc3 7a00 	vstr	s15, [r3]
			//alternative todo calc from t directly to save compute

			omegaEnc_last = omegaEnc;
 800b750:	4b09      	ldr	r3, [pc, #36]	; (800b778 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4a0a      	ldr	r2, [pc, #40]	; (800b780 <HAL_TIM_IC_CaptureCallback+0x114>)
 800b756:	6013      	str	r3, [r2, #0]
			// todo must be set to 0 if not updated for long otherwise it maintains value from last update forever
		}

	}
}
 800b758:	bf00      	nop
 800b75a:	3708      	adds	r7, #8
 800b75c:	46bd      	mov	sp, r7
 800b75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b762:	bf00      	nop
 800b764:	40010400 	.word	0x40010400
 800b768:	20000258 	.word	0x20000258
 800b76c:	200002c4 	.word	0x200002c4
 800b770:	00014820 	.word	0x00014820
 800b774:	20000d34 	.word	0x20000d34
 800b778:	2000025c 	.word	0x2000025c
 800b77c:	20000260 	.word	0x20000260
 800b780:	200002c8 	.word	0x200002c8
 800b784:	4ca037a0 	.word	0x4ca037a0
 800b788:	20000264 	.word	0x20000264
 800b78c:	20000268 	.word	0x20000268

0800b790 <omega_division>:


float omega_division(int32_t delta_EncVal, int32_t delta_t){
 800b790:	b480      	push	{r7}
 800b792:	b083      	sub	sp, #12
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
	return PI2 * 84000000.0f / ENC_STEPS_F * (float)(delta_EncVal) / (float)delta_t;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	ee07 3a90 	vmov	s15, r3
 800b7a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800b7cc <omega_division+0x3c>
 800b7a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b7ac:	683b      	ldr	r3, [r7, #0]
 800b7ae:	ee07 3a90 	vmov	s15, r3
 800b7b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b7ba:	eef0 7a66 	vmov.f32	s15, s13
}
 800b7be:	eeb0 0a67 	vmov.f32	s0, s15
 800b7c2:	370c      	adds	r7, #12
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	4800dab2 	.word	0x4800dab2

0800b7d0 <encoder_jump_comp>:

int32_t encoder_jump_comp(int32_t delta_EncVal){
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
	if (delta_EncVal > ENC_STEPS_HALF){ // if jump is more than a half rotation it's most likely the 0 crossing
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b7de:	dd03      	ble.n	800b7e8 <encoder_jump_comp+0x18>
		return delta_EncVal - ENC_STEPS;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800b7e6:	e008      	b.n	800b7fa <encoder_jump_comp+0x2a>
	}
	else if (delta_EncVal < -ENC_STEPS_HALF){
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800b7ee:	da03      	bge.n	800b7f8 <encoder_jump_comp+0x28>
		return delta_EncVal + ENC_STEPS;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800b7f6:	e000      	b.n	800b7fa <encoder_jump_comp+0x2a>
	}
	else {
		return delta_EncVal;
 800b7f8:	687b      	ldr	r3, [r7, #4]
	}
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr
	...

0800b808 <fast_control_task>:
 *
 *********************************************************************************************
 */


void fast_control_task(void){
 800b808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b80c:	b08e      	sub	sp, #56	; 0x38
 800b80e:	af08      	add	r7, sp, #32
#if DB_TIMING
	DB2H;
 800b810:	4b49      	ldr	r3, [pc, #292]	; (800b938 <fast_control_task+0x130>)
 800b812:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b816:	619a      	str	r2, [r3, #24]
#endif

	// --- averaging the quantities read in pwm update
	fast_STRAIN0 = acc_STRAIN0 >> ANALOG_SAMPLES_BITSHIFT;
 800b818:	4b48      	ldr	r3, [pc, #288]	; (800b93c <fast_control_task+0x134>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	095b      	lsrs	r3, r3, #5
 800b81e:	4a48      	ldr	r2, [pc, #288]	; (800b940 <fast_control_task+0x138>)
 800b820:	6013      	str	r3, [r2, #0]
	acc_STRAIN0 = 0;
 800b822:	4b46      	ldr	r3, [pc, #280]	; (800b93c <fast_control_task+0x134>)
 800b824:	2200      	movs	r2, #0
 800b826:	601a      	str	r2, [r3, #0]
	fast_Vbus = acc_Vbus >> ANALOG_SAMPLES_BITSHIFT;
 800b828:	4b46      	ldr	r3, [pc, #280]	; (800b944 <fast_control_task+0x13c>)
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	095b      	lsrs	r3, r3, #5
 800b82e:	4a46      	ldr	r2, [pc, #280]	; (800b948 <fast_control_task+0x140>)
 800b830:	6013      	str	r3, [r2, #0]
	acc_Vbus = 0;
 800b832:	4b44      	ldr	r3, [pc, #272]	; (800b944 <fast_control_task+0x13c>)
 800b834:	2200      	movs	r2, #0
 800b836:	601a      	str	r2, [r3, #0]
#if DIFF_FORCE
	fast_STRAIN1 = acc_STRAIN1 >> ANALOG_SAMPLES_BITSHIFT;
	acc_STRAIN1 = 0;
#endif

	fast_I_tot = sqrt(acc_I_tot_squared/(float)ANALOG_SAMPLES_N);
 800b838:	4b44      	ldr	r3, [pc, #272]	; (800b94c <fast_control_task+0x144>)
 800b83a:	edd3 7a00 	vldr	s15, [r3]
 800b83e:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b950 <fast_control_task+0x148>
 800b842:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b846:	ee16 0a90 	vmov	r0, s13
 800b84a:	f7f4 fe7d 	bl	8000548 <__aeabi_f2d>
 800b84e:	4603      	mov	r3, r0
 800b850:	460c      	mov	r4, r1
 800b852:	ec44 3b10 	vmov	d0, r3, r4
 800b856:	f005 fd7b 	bl	8011350 <sqrt>
 800b85a:	ec54 3b10 	vmov	r3, r4, d0
 800b85e:	4618      	mov	r0, r3
 800b860:	4621      	mov	r1, r4
 800b862:	f7f5 f9c1 	bl	8000be8 <__aeabi_d2f>
 800b866:	4602      	mov	r2, r0
 800b868:	4b3a      	ldr	r3, [pc, #232]	; (800b954 <fast_control_task+0x14c>)
 800b86a:	601a      	str	r2, [r3, #0]
	acc_I_tot_squared = 0.0f;
 800b86c:	4b37      	ldr	r3, [pc, #220]	; (800b94c <fast_control_task+0x144>)
 800b86e:	f04f 0200 	mov.w	r2, #0
 800b872:	601a      	str	r2, [r3, #0]
	fast_u0 = acc_u0 / (float)ANALOG_SAMPLES_N;
 800b874:	4b38      	ldr	r3, [pc, #224]	; (800b958 <fast_control_task+0x150>)
 800b876:	ed93 7a00 	vldr	s14, [r3]
 800b87a:	eddf 6a35 	vldr	s13, [pc, #212]	; 800b950 <fast_control_task+0x148>
 800b87e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b882:	4b36      	ldr	r3, [pc, #216]	; (800b95c <fast_control_task+0x154>)
 800b884:	edc3 7a00 	vstr	s15, [r3]
	acc_u0 = 0.0f;
 800b888:	4b33      	ldr	r3, [pc, #204]	; (800b958 <fast_control_task+0x150>)
 800b88a:	f04f 0200 	mov.w	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]

	// --- deriving quantities
	fast_P_consumed = fast_I_tot * fast_u0 * (float)fast_Vbus * CONVERT_VBUS_INT2V  / WANKEL_ADVANTAGE;
 800b890:	4b30      	ldr	r3, [pc, #192]	; (800b954 <fast_control_task+0x14c>)
 800b892:	ed93 7a00 	vldr	s14, [r3]
 800b896:	4b31      	ldr	r3, [pc, #196]	; (800b95c <fast_control_task+0x154>)
 800b898:	edd3 7a00 	vldr	s15, [r3]
 800b89c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b8a0:	4b29      	ldr	r3, [pc, #164]	; (800b948 <fast_control_task+0x140>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	ee07 3a90 	vmov	s15, r3
 800b8a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8b0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800b960 <fast_control_task+0x158>
 800b8b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8b8:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800b964 <fast_control_task+0x15c>
 800b8bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b8c0:	4b29      	ldr	r3, [pc, #164]	; (800b968 <fast_control_task+0x160>)
 800b8c2:	edc3 7a00 	vstr	s15, [r3]

	// sw current limit switch off
	static uint32_t I_lim_exceeded_counter = 0;
	if (fast_I_tot > I_LIM){
 800b8c6:	4b23      	ldr	r3, [pc, #140]	; (800b954 <fast_control_task+0x14c>)
 800b8c8:	edd3 7a00 	vldr	s15, [r3]
 800b8cc:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b96c <fast_control_task+0x164>
 800b8d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d8:	dd05      	ble.n	800b8e6 <fast_control_task+0xde>
		I_lim_exceeded_counter++;
 800b8da:	4b25      	ldr	r3, [pc, #148]	; (800b970 <fast_control_task+0x168>)
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	4a23      	ldr	r2, [pc, #140]	; (800b970 <fast_control_task+0x168>)
 800b8e2:	6013      	str	r3, [r2, #0]
 800b8e4:	e002      	b.n	800b8ec <fast_control_task+0xe4>
	}
	else {
		I_lim_exceeded_counter = 0;
 800b8e6:	4b22      	ldr	r3, [pc, #136]	; (800b970 <fast_control_task+0x168>)
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	601a      	str	r2, [r3, #0]
	}
	if (I_lim_exceeded_counter > I_LIM_MAX_COUNT){
 800b8ec:	4b20      	ldr	r3, [pc, #128]	; (800b970 <fast_control_task+0x168>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	2b64      	cmp	r3, #100	; 0x64
 800b8f2:	d902      	bls.n	800b8fa <fast_control_task+0xf2>
		sw_enable_pwm = false;
 800b8f4:	4b1f      	ldr	r3, [pc, #124]	; (800b974 <fast_control_task+0x16c>)
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	701a      	strb	r2, [r3, #0]

	//lp_ESC_TEMP = (1.0f - LP_TEMP) * lp_ESC_TEMP + LP_TEMP * (float)HAL_ADCEx_InjectedGetValue (&hadc1, RANK_T);
	//lp_MOT_TEMP = (1.0f - LP_TEMP) * lp_MOT_TEMP + LP_TEMP * (float)HAL_ADCEx_InjectedGetValue (&hadc2, RANK_T);

	static uint32_t analog_samples_av_counter = 0;
	if (analog_samples_av_counter < ANALOG_SAMPLES_AV_N){
 800b8fa:	4b1f      	ldr	r3, [pc, #124]	; (800b978 <fast_control_task+0x170>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b3f      	cmp	r3, #63	; 0x3f
 800b900:	d844      	bhi.n	800b98c <fast_control_task+0x184>
		acc_ESC_TEMP += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_T);
 800b902:	2102      	movs	r1, #2
 800b904:	481d      	ldr	r0, [pc, #116]	; (800b97c <fast_control_task+0x174>)
 800b906:	f7f6 f9cf 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800b90a:	4602      	mov	r2, r0
 800b90c:	4b1c      	ldr	r3, [pc, #112]	; (800b980 <fast_control_task+0x178>)
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	4413      	add	r3, r2
 800b912:	4a1b      	ldr	r2, [pc, #108]	; (800b980 <fast_control_task+0x178>)
 800b914:	6013      	str	r3, [r2, #0]
		acc_MOT_TEMP += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_T);
 800b916:	2102      	movs	r1, #2
 800b918:	481a      	ldr	r0, [pc, #104]	; (800b984 <fast_control_task+0x17c>)
 800b91a:	f7f6 f9c5 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800b91e:	4602      	mov	r2, r0
 800b920:	4b19      	ldr	r3, [pc, #100]	; (800b988 <fast_control_task+0x180>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4413      	add	r3, r2
 800b926:	4a18      	ldr	r2, [pc, #96]	; (800b988 <fast_control_task+0x180>)
 800b928:	6013      	str	r3, [r2, #0]
		analog_samples_av_counter++;
 800b92a:	4b13      	ldr	r3, [pc, #76]	; (800b978 <fast_control_task+0x170>)
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	3301      	adds	r3, #1
 800b930:	4a11      	ldr	r2, [pc, #68]	; (800b978 <fast_control_task+0x170>)
 800b932:	6013      	str	r3, [r2, #0]
 800b934:	e03d      	b.n	800b9b2 <fast_control_task+0x1aa>
 800b936:	bf00      	nop
 800b938:	40020c00 	.word	0x40020c00
 800b93c:	2000026c 	.word	0x2000026c
 800b940:	20000270 	.word	0x20000270
 800b944:	20000274 	.word	0x20000274
 800b948:	2000002c 	.word	0x2000002c
 800b94c:	20000288 	.word	0x20000288
 800b950:	42000000 	.word	0x42000000
 800b954:	2000028c 	.word	0x2000028c
 800b958:	20000290 	.word	0x20000290
 800b95c:	20000294 	.word	0x20000294
 800b960:	3c872b02 	.word	0x3c872b02
 800b964:	3f93cd36 	.word	0x3f93cd36
 800b968:	20000298 	.word	0x20000298
 800b96c:	42480000 	.word	0x42480000
 800b970:	200002cc 	.word	0x200002cc
 800b974:	2000023d 	.word	0x2000023d
 800b978:	200002d0 	.word	0x200002d0
 800b97c:	20000e5c 	.word	0x20000e5c
 800b980:	20000278 	.word	0x20000278
 800b984:	20000730 	.word	0x20000730
 800b988:	20000280 	.word	0x20000280
	}
	else {
		av_ESC_TEMP = acc_ESC_TEMP >> ANALOG_SAMPLES_AV_BITSHIFT;
 800b98c:	4b91      	ldr	r3, [pc, #580]	; (800bbd4 <fast_control_task+0x3cc>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	099b      	lsrs	r3, r3, #6
 800b992:	4a91      	ldr	r2, [pc, #580]	; (800bbd8 <fast_control_task+0x3d0>)
 800b994:	6013      	str	r3, [r2, #0]
		acc_ESC_TEMP = 0;
 800b996:	4b8f      	ldr	r3, [pc, #572]	; (800bbd4 <fast_control_task+0x3cc>)
 800b998:	2200      	movs	r2, #0
 800b99a:	601a      	str	r2, [r3, #0]
		av_MOT_TEMP = acc_MOT_TEMP >> ANALOG_SAMPLES_AV_BITSHIFT;
 800b99c:	4b8f      	ldr	r3, [pc, #572]	; (800bbdc <fast_control_task+0x3d4>)
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	099b      	lsrs	r3, r3, #6
 800b9a2:	4a8f      	ldr	r2, [pc, #572]	; (800bbe0 <fast_control_task+0x3d8>)
 800b9a4:	6013      	str	r3, [r2, #0]
		acc_MOT_TEMP = 0;
 800b9a6:	4b8d      	ldr	r3, [pc, #564]	; (800bbdc <fast_control_task+0x3d4>)
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	601a      	str	r2, [r3, #0]
		analog_samples_av_counter = 0;
 800b9ac:	4b8d      	ldr	r3, [pc, #564]	; (800bbe4 <fast_control_task+0x3dc>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
	}

	//calc_omega();

	// --- correct for missing update in omecaEnc for very small omega
	if (omegaEnc_missing_update_counter > OMEGAENC_MISSING_UPDATE_MAX){
 800b9b2:	4b8d      	ldr	r3, [pc, #564]	; (800bbe8 <fast_control_task+0x3e0>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b64      	cmp	r3, #100	; 0x64
 800b9b8:	dd07      	ble.n	800b9ca <fast_control_task+0x1c2>
		omegaEnc = 0.0f;
 800b9ba:	4b8c      	ldr	r3, [pc, #560]	; (800bbec <fast_control_task+0x3e4>)
 800b9bc:	f04f 0200 	mov.w	r2, #0
 800b9c0:	601a      	str	r2, [r3, #0]
		omegaEncDot = 0.0f;
 800b9c2:	4b8b      	ldr	r3, [pc, #556]	; (800bbf0 <fast_control_task+0x3e8>)
 800b9c4:	f04f 0200 	mov.w	r2, #0
 800b9c8:	601a      	str	r2, [r3, #0]
	}
	omegaEnc_missing_update_counter ++;
 800b9ca:	4b87      	ldr	r3, [pc, #540]	; (800bbe8 <fast_control_task+0x3e0>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	3301      	adds	r3, #1
 800b9d0:	4a85      	ldr	r2, [pc, #532]	; (800bbe8 <fast_control_task+0x3e0>)
 800b9d2:	6013      	str	r3, [r2, #0]

	static uint32_t last_tim5_cnt = 0 ;
	if (control_mode == position_control){
 800b9d4:	4b87      	ldr	r3, [pc, #540]	; (800bbf4 <fast_control_task+0x3ec>)
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	f040 80ee 	bne.w	800bbba <fast_control_task+0x3b2>

		float t = (float)((TIM5->CNT - last_tim5_cnt) / 100) / 1000.0f;
 800b9de:	4b86      	ldr	r3, [pc, #536]	; (800bbf8 <fast_control_task+0x3f0>)
 800b9e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b9e2:	4b86      	ldr	r3, [pc, #536]	; (800bbfc <fast_control_task+0x3f4>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	1ad3      	subs	r3, r2, r3
 800b9e8:	4a85      	ldr	r2, [pc, #532]	; (800bc00 <fast_control_task+0x3f8>)
 800b9ea:	fba2 2303 	umull	r2, r3, r2, r3
 800b9ee:	095b      	lsrs	r3, r3, #5
 800b9f0:	ee07 3a90 	vmov	s15, r3
 800b9f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b9f8:	eddf 6a82 	vldr	s13, [pc, #520]	; 800bc04 <fast_control_task+0x3fc>
 800b9fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800ba00:	edc7 7a04 	vstr	s15, [r7, #16]

		int32_t desired_EncVal = pos_offset + pos_amp * sin(6.28f * pos_freq * t);
 800ba04:	4b80      	ldr	r3, [pc, #512]	; (800bc08 <fast_control_task+0x400>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7f4 fd8b 	bl	8000524 <__aeabi_i2d>
 800ba0e:	4604      	mov	r4, r0
 800ba10:	460d      	mov	r5, r1
 800ba12:	4b7e      	ldr	r3, [pc, #504]	; (800bc0c <fast_control_task+0x404>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4618      	mov	r0, r3
 800ba18:	f7f4 fd96 	bl	8000548 <__aeabi_f2d>
 800ba1c:	4680      	mov	r8, r0
 800ba1e:	4689      	mov	r9, r1
 800ba20:	4b7b      	ldr	r3, [pc, #492]	; (800bc10 <fast_control_task+0x408>)
 800ba22:	edd3 7a00 	vldr	s15, [r3]
 800ba26:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 800bc14 <fast_control_task+0x40c>
 800ba2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ba2e:	edd7 7a04 	vldr	s15, [r7, #16]
 800ba32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba36:	ee17 0a90 	vmov	r0, s15
 800ba3a:	f7f4 fd85 	bl	8000548 <__aeabi_f2d>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	460b      	mov	r3, r1
 800ba42:	ec43 2b10 	vmov	d0, r2, r3
 800ba46:	f005 fc3b 	bl	80112c0 <sin>
 800ba4a:	ec53 2b10 	vmov	r2, r3, d0
 800ba4e:	4640      	mov	r0, r8
 800ba50:	4649      	mov	r1, r9
 800ba52:	f7f4 fdd1 	bl	80005f8 <__aeabi_dmul>
 800ba56:	4602      	mov	r2, r0
 800ba58:	460b      	mov	r3, r1
 800ba5a:	4620      	mov	r0, r4
 800ba5c:	4629      	mov	r1, r5
 800ba5e:	f7f4 fc15 	bl	800028c <__adddf3>
 800ba62:	4603      	mov	r3, r0
 800ba64:	460c      	mov	r4, r1
 800ba66:	4618      	mov	r0, r3
 800ba68:	4621      	mov	r1, r4
 800ba6a:	f7f5 f875 	bl	8000b58 <__aeabi_d2iz>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	60fb      	str	r3, [r7, #12]
		//		else{
		//			desired_EncVal = 0;
		//		}


		int32_t Enc_Val_total = (int32_t)TIM8->CNT + rotation_counter * ENC_STEPS;
 800ba72:	4b69      	ldr	r3, [pc, #420]	; (800bc18 <fast_control_task+0x410>)
 800ba74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba76:	4619      	mov	r1, r3
 800ba78:	4b68      	ldr	r3, [pc, #416]	; (800bc1c <fast_control_task+0x414>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800ba80:	fb02 f303 	mul.w	r3, r2, r3
 800ba84:	440b      	add	r3, r1
 800ba86:	60bb      	str	r3, [r7, #8]
		float raw_amp = (float)(Enc_Val_total - desired_EncVal) * P_gain; //oscillates for P_gain > 0.005f
 800ba88:	68ba      	ldr	r2, [r7, #8]
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	1ad3      	subs	r3, r2, r3
 800ba8e:	ee07 3a90 	vmov	s15, r3
 800ba92:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ba96:	4b62      	ldr	r3, [pc, #392]	; (800bc20 <fast_control_task+0x418>)
 800ba98:	edd3 7a00 	vldr	s15, [r3]
 800ba9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baa0:	edc7 7a05 	vstr	s15, [r7, #20]
		float raw_amp_check = raw_amp;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	607b      	str	r3, [r7, #4]
		//			direction = -1;
		//		}
		//		else{
		//			direction = 1;
		//		}
		if (raw_amp > pos_amp_limit){
 800baa8:	4b5e      	ldr	r3, [pc, #376]	; (800bc24 <fast_control_task+0x41c>)
 800baaa:	edd3 7a00 	vldr	s15, [r3]
 800baae:	ed97 7a05 	vldr	s14, [r7, #20]
 800bab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baba:	dd02      	ble.n	800bac2 <fast_control_task+0x2ba>
			raw_amp = pos_amp_limit;
 800babc:	4b59      	ldr	r3, [pc, #356]	; (800bc24 <fast_control_task+0x41c>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	617b      	str	r3, [r7, #20]
		}
		if (raw_amp < - pos_amp_limit){
 800bac2:	4b58      	ldr	r3, [pc, #352]	; (800bc24 <fast_control_task+0x41c>)
 800bac4:	edd3 7a00 	vldr	s15, [r3]
 800bac8:	eef1 7a67 	vneg.f32	s15, s15
 800bacc:	ed97 7a05 	vldr	s14, [r7, #20]
 800bad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800bad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad8:	d506      	bpl.n	800bae8 <fast_control_task+0x2e0>
			raw_amp = - pos_amp_limit;
 800bada:	4b52      	ldr	r3, [pc, #328]	; (800bc24 <fast_control_task+0x41c>)
 800badc:	edd3 7a00 	vldr	s15, [r3]
 800bae0:	eef1 7a67 	vneg.f32	s15, s15
 800bae4:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		amp = raw_amp;
 800bae8:	4a4f      	ldr	r2, [pc, #316]	; (800bc28 <fast_control_task+0x420>)
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	6013      	str	r3, [r2, #0]

		if (buf_msgs[0] == '\0'){
 800baee:	4b4f      	ldr	r3, [pc, #316]	; (800bc2c <fast_control_task+0x424>)
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d165      	bne.n	800bbc2 <fast_control_task+0x3ba>
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
					(int)((float)(Enc_Val_total - desired_EncVal) * 0.0005f*1000.0f),
 800baf6:	68ba      	ldr	r2, [r7, #8]
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	1ad3      	subs	r3, r2, r3
 800bafc:	ee07 3a90 	vmov	s15, r3
 800bb00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bb04:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800bc30 <fast_control_task+0x428>
 800bb08:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb0c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800bc04 <fast_control_task+0x3fc>
 800bb10:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bb14:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int)(raw_amp*1000),
 800bb18:	edd7 7a05 	vldr	s15, [r7, #20]
 800bb1c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800bc04 <fast_control_task+0x3fc>
 800bb20:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bb24:	eebd 6ae7 	vcvt.s32.f32	s12, s15
					(int)(raw_amp_check*1000),
 800bb28:	edd7 7a01 	vldr	s15, [r7, #4]
 800bb2c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800bc04 <fast_control_task+0x3fc>
 800bb30:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bb34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb38:	ee17 1a90 	vmov	r1, s15
 800bb3c:	4b33      	ldr	r3, [pc, #204]	; (800bc0c <fast_control_task+0x404>)
 800bb3e:	edd3 7a00 	vldr	s15, [r3]
 800bb42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb46:	ee17 0a90 	vmov	r0, s15
					(int)Enc_Val_total,
					(int)(pos_amp),
					(int)(pos_freq*1000),
 800bb4a:	4b31      	ldr	r3, [pc, #196]	; (800bc10 <fast_control_task+0x408>)
 800bb4c:	edd3 7a00 	vldr	s15, [r3]
 800bb50:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800bc04 <fast_control_task+0x3fc>
 800bb54:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bb58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb5c:	ee17 4a90 	vmov	r4, s15
					(int)(pos_amp_limit * 1000),
 800bb60:	4b30      	ldr	r3, [pc, #192]	; (800bc24 <fast_control_task+0x41c>)
 800bb62:	edd3 7a00 	vldr	s15, [r3]
 800bb66:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800bc04 <fast_control_task+0x3fc>
 800bb6a:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bb6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb72:	ee17 5a90 	vmov	r5, s15
 800bb76:	4b24      	ldr	r3, [pc, #144]	; (800bc08 <fast_control_task+0x400>)
 800bb78:	681b      	ldr	r3, [r3, #0]
					(int)(pos_offset),
					(int)(P_gain*1000000));
 800bb7a:	4a29      	ldr	r2, [pc, #164]	; (800bc20 <fast_control_task+0x418>)
 800bb7c:	edd2 7a00 	vldr	s15, [r2]
 800bb80:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800bc34 <fast_control_task+0x42c>
 800bb84:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bb88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bb8c:	ee17 2a90 	vmov	r2, s15
 800bb90:	9206      	str	r2, [sp, #24]
 800bb92:	9305      	str	r3, [sp, #20]
 800bb94:	9504      	str	r5, [sp, #16]
 800bb96:	9403      	str	r4, [sp, #12]
 800bb98:	9002      	str	r0, [sp, #8]
 800bb9a:	68bb      	ldr	r3, [r7, #8]
 800bb9c:	9301      	str	r3, [sp, #4]
 800bb9e:	9100      	str	r1, [sp, #0]
 800bba0:	ee16 3a10 	vmov	r3, s12
 800bba4:	ee16 2a90 	vmov	r2, s13
 800bba8:	4923      	ldr	r1, [pc, #140]	; (800bc38 <fast_control_task+0x430>)
 800bbaa:	4824      	ldr	r0, [pc, #144]	; (800bc3c <fast_control_task+0x434>)
 800bbac:	f002 fc3e 	bl	800e42c <siprintf>
			strcat(buf_msgs, buf_msg);
 800bbb0:	4922      	ldr	r1, [pc, #136]	; (800bc3c <fast_control_task+0x434>)
 800bbb2:	481e      	ldr	r0, [pc, #120]	; (800bc2c <fast_control_task+0x424>)
 800bbb4:	f002 fc5a 	bl	800e46c <strcat>
 800bbb8:	e003      	b.n	800bbc2 <fast_control_task+0x3ba>
		}
	}
	else{
		last_tim5_cnt = TIM5->CNT;
 800bbba:	4b0f      	ldr	r3, [pc, #60]	; (800bbf8 <fast_control_task+0x3f0>)
 800bbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbe:	4a0f      	ldr	r2, [pc, #60]	; (800bbfc <fast_control_task+0x3f4>)
 800bbc0:	6013      	str	r3, [r2, #0]
	}
#if DB_TIMING
	DB2L;
 800bbc2:	4b1f      	ldr	r3, [pc, #124]	; (800bc40 <fast_control_task+0x438>)
 800bbc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800bbc8:	619a      	str	r2, [r3, #24]
#endif
}
 800bbca:	bf00      	nop
 800bbcc:	3718      	adds	r7, #24
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bbd4:	20000278 	.word	0x20000278
 800bbd8:	2000027c 	.word	0x2000027c
 800bbdc:	20000280 	.word	0x20000280
 800bbe0:	20000284 	.word	0x20000284
 800bbe4:	200002d0 	.word	0x200002d0
 800bbe8:	20000258 	.word	0x20000258
 800bbec:	2000025c 	.word	0x2000025c
 800bbf0:	20000264 	.word	0x20000264
 800bbf4:	20000238 	.word	0x20000238
 800bbf8:	40000c00 	.word	0x40000c00
 800bbfc:	200002d4 	.word	0x200002d4
 800bc00:	51eb851f 	.word	0x51eb851f
 800bc04:	447a0000 	.word	0x447a0000
 800bc08:	20000244 	.word	0x20000244
 800bc0c:	20000018 	.word	0x20000018
 800bc10:	2000001c 	.word	0x2000001c
 800bc14:	40c8f5c3 	.word	0x40c8f5c3
 800bc18:	40010400 	.word	0x40010400
 800bc1c:	2000024c 	.word	0x2000024c
 800bc20:	20000024 	.word	0x20000024
 800bc24:	20000020 	.word	0x20000020
 800bc28:	20000240 	.word	0x20000240
 800bc2c:	20001a4c 	.word	0x20001a4c
 800bc30:	3a03126f 	.word	0x3a03126f
 800bc34:	49742400 	.word	0x49742400
 800bc38:	08012694 	.word	0x08012694
 800bc3c:	20002758 	.word	0x20002758
 800bc40:	40020c00 	.word	0x40020c00

0800bc44 <slow_control_task>:

void slow_control_task(void){
 800bc44:	b480      	push	{r7}
 800bc46:	af00      	add	r7, sp, #0
	//can communication update

}
 800bc48:	bf00      	nop
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
	...

0800bc54 <keyboard_intake>:

void keyboard_intake(void){
 800bc54:	b580      	push	{r7, lr}
 800bc56:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 800bc58:	2201      	movs	r2, #1
 800bc5a:	49c6      	ldr	r1, [pc, #792]	; (800bf74 <keyboard_intake+0x320>)
 800bc5c:	48c6      	ldr	r0, [pc, #792]	; (800bf78 <keyboard_intake+0x324>)
 800bc5e:	f7fb ff01 	bl	8007a64 <HAL_UART_Receive_IT>

	if (rx_character_buffered != '.'){
 800bc62:	4bc6      	ldr	r3, [pc, #792]	; (800bf7c <keyboard_intake+0x328>)
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2b2e      	cmp	r3, #46	; 0x2e
 800bc68:	d006      	beq.n	800bc78 <keyboard_intake+0x24>
		ch = rx_character_buffered;
 800bc6a:	4bc4      	ldr	r3, [pc, #784]	; (800bf7c <keyboard_intake+0x328>)
 800bc6c:	781a      	ldrb	r2, [r3, #0]
 800bc6e:	4bc1      	ldr	r3, [pc, #772]	; (800bf74 <keyboard_intake+0x320>)
 800bc70:	701a      	strb	r2, [r3, #0]
		//rx_character_armed = 0;
		rx_character_buffered = '.';
 800bc72:	4bc2      	ldr	r3, [pc, #776]	; (800bf7c <keyboard_intake+0x328>)
 800bc74:	222e      	movs	r2, #46	; 0x2e
 800bc76:	701a      	strb	r2, [r3, #0]
	}//since beginning of slow 1000ns


	switch(ch){
 800bc78:	4bbe      	ldr	r3, [pc, #760]	; (800bf74 <keyboard_intake+0x320>)
 800bc7a:	781b      	ldrb	r3, [r3, #0]
 800bc7c:	3b41      	subs	r3, #65	; 0x41
 800bc7e:	2b39      	cmp	r3, #57	; 0x39
 800bc80:	f200 820f 	bhi.w	800c0a2 <keyboard_intake+0x44e>
 800bc84:	a201      	add	r2, pc, #4	; (adr r2, 800bc8c <keyboard_intake+0x38>)
 800bc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc8a:	bf00      	nop
 800bc8c:	0800bf35 	.word	0x0800bf35
 800bc90:	0800c021 	.word	0x0800c021
 800bc94:	0800bf4b 	.word	0x0800bf4b
 800bc98:	0800bf23 	.word	0x0800bf23
 800bc9c:	0800bfd1 	.word	0x0800bfd1
 800bca0:	0800bfbd 	.word	0x0800bfbd
 800bca4:	0800c019 	.word	0x0800c019
 800bca8:	0800c0a3 	.word	0x0800c0a3
 800bcac:	0800c0a3 	.word	0x0800c0a3
 800bcb0:	0800c0a3 	.word	0x0800c0a3
 800bcb4:	0800c0a3 	.word	0x0800c0a3
 800bcb8:	0800c029 	.word	0x0800c029
 800bcbc:	0800bfe9 	.word	0x0800bfe9
 800bcc0:	0800bffb 	.word	0x0800bffb
 800bcc4:	0800c0a3 	.word	0x0800c0a3
 800bcc8:	0800bedf 	.word	0x0800bedf
 800bccc:	0800bfdd 	.word	0x0800bfdd
 800bcd0:	0800bf63 	.word	0x0800bf63
 800bcd4:	0800bf0d 	.word	0x0800bf0d
 800bcd8:	0800c011 	.word	0x0800c011
 800bcdc:	0800c0a3 	.word	0x0800c0a3
 800bce0:	0800c0a3 	.word	0x0800c0a3
 800bce4:	0800befb 	.word	0x0800befb
 800bce8:	0800bed9 	.word	0x0800bed9
 800bcec:	0800c0a3 	.word	0x0800c0a3
 800bcf0:	0800c083 	.word	0x0800c083
 800bcf4:	0800c0a3 	.word	0x0800c0a3
 800bcf8:	0800c0a3 	.word	0x0800c0a3
 800bcfc:	0800c0a3 	.word	0x0800c0a3
 800bd00:	0800c0a3 	.word	0x0800c0a3
 800bd04:	0800c0a3 	.word	0x0800c0a3
 800bd08:	0800c0a3 	.word	0x0800c0a3
 800bd0c:	0800bd9d 	.word	0x0800bd9d
 800bd10:	0800c06d 	.word	0x0800c06d
 800bd14:	0800c0a3 	.word	0x0800c0a3
 800bd18:	0800bdb3 	.word	0x0800bdb3
 800bd1c:	0800bddf 	.word	0x0800bddf
 800bd20:	0800be29 	.word	0x0800be29
 800bd24:	0800bdfd 	.word	0x0800bdfd
 800bd28:	0800be05 	.word	0x0800be05
 800bd2c:	0800bee5 	.word	0x0800bee5
 800bd30:	0800be83 	.word	0x0800be83
 800bd34:	0800beed 	.word	0x0800beed
 800bd38:	0800bec3 	.word	0x0800bec3
 800bd3c:	0800c02f 	.word	0x0800c02f
 800bd40:	0800c041 	.word	0x0800c041
 800bd44:	0800beb9 	.word	0x0800beb9
 800bd48:	0800be99 	.word	0x0800be99
 800bd4c:	0800bdc9 	.word	0x0800bdc9
 800bd50:	0800be4f 	.word	0x0800be4f
 800bd54:	0800bd87 	.word	0x0800bd87
 800bd58:	0800bdf5 	.word	0x0800bdf5
 800bd5c:	0800be6d 	.word	0x0800be6d
 800bd60:	0800c057 	.word	0x0800c057
 800bd64:	0800bd75 	.word	0x0800bd75
 800bd68:	0800c0a3 	.word	0x0800c0a3
 800bd6c:	0800c0a3 	.word	0x0800c0a3
 800bd70:	0800be61 	.word	0x0800be61
	case 'w':
		amp *= 2;
 800bd74:	4b82      	ldr	r3, [pc, #520]	; (800bf80 <keyboard_intake+0x32c>)
 800bd76:	edd3 7a00 	vldr	s15, [r3]
 800bd7a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bd7e:	4b80      	ldr	r3, [pc, #512]	; (800bf80 <keyboard_intake+0x32c>)
 800bd80:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bd84:	e190      	b.n	800c0a8 <keyboard_intake+0x454>
	case 's':
		amp /= 2;
 800bd86:	4b7e      	ldr	r3, [pc, #504]	; (800bf80 <keyboard_intake+0x32c>)
 800bd88:	ed93 7a00 	vldr	s14, [r3]
 800bd8c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800bd90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800bd94:	4b7a      	ldr	r3, [pc, #488]	; (800bf80 <keyboard_intake+0x32c>)
 800bd96:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bd9a:	e185      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'a':
		phase_shift -= 0.05f;
 800bd9c:	4b79      	ldr	r3, [pc, #484]	; (800bf84 <keyboard_intake+0x330>)
 800bd9e:	edd3 7a00 	vldr	s15, [r3]
 800bda2:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800bf88 <keyboard_intake+0x334>
 800bda6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdaa:	4b76      	ldr	r3, [pc, #472]	; (800bf84 <keyboard_intake+0x330>)
 800bdac:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bdb0:	e17a      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'd':
		phase_shift += 0.05f;
 800bdb2:	4b74      	ldr	r3, [pc, #464]	; (800bf84 <keyboard_intake+0x330>)
 800bdb4:	edd3 7a00 	vldr	s15, [r3]
 800bdb8:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bf88 <keyboard_intake+0x334>
 800bdbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdc0:	4b70      	ldr	r3, [pc, #448]	; (800bf84 <keyboard_intake+0x330>)
 800bdc2:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bdc6:	e16f      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'q':
		phase0 -= 0.05f;
 800bdc8:	4b70      	ldr	r3, [pc, #448]	; (800bf8c <keyboard_intake+0x338>)
 800bdca:	edd3 7a00 	vldr	s15, [r3]
 800bdce:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800bf88 <keyboard_intake+0x334>
 800bdd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bdd6:	4b6d      	ldr	r3, [pc, #436]	; (800bf8c <keyboard_intake+0x338>)
 800bdd8:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bddc:	e164      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'e':
		phase0 += 0.05f;
 800bdde:	4b6b      	ldr	r3, [pc, #428]	; (800bf8c <keyboard_intake+0x338>)
 800bde0:	edd3 7a00 	vldr	s15, [r3]
 800bde4:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800bf88 <keyboard_intake+0x334>
 800bde8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bdec:	4b67      	ldr	r3, [pc, #412]	; (800bf8c <keyboard_intake+0x338>)
 800bdee:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bdf2:	e159      	b.n	800c0a8 <keyboard_intake+0x454>
	case 't':
		sw_enable_pwm = true;
 800bdf4:	4b66      	ldr	r3, [pc, #408]	; (800bf90 <keyboard_intake+0x33c>)
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	701a      	strb	r2, [r3, #0]
		break;
 800bdfa:	e155      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'g':
		sw_enable_pwm = false;
 800bdfc:	4b64      	ldr	r3, [pc, #400]	; (800bf90 <keyboard_intake+0x33c>)
 800bdfe:	2200      	movs	r2, #0
 800be00:	701a      	strb	r2, [r3, #0]
		break;
 800be02:	e151      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'h':
		amp = abs(amp); //positive should be clockwise == EncVal increases positive :)
 800be04:	4b5e      	ldr	r3, [pc, #376]	; (800bf80 <keyboard_intake+0x32c>)
 800be06:	edd3 7a00 	vldr	s15, [r3]
 800be0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be0e:	ee17 3a90 	vmov	r3, s15
 800be12:	2b00      	cmp	r3, #0
 800be14:	bfb8      	it	lt
 800be16:	425b      	neglt	r3, r3
 800be18:	ee07 3a90 	vmov	s15, r3
 800be1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be20:	4b57      	ldr	r3, [pc, #348]	; (800bf80 <keyboard_intake+0x32c>)
 800be22:	edc3 7a00 	vstr	s15, [r3]
		break;
 800be26:	e13f      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'f':
		amp = -abs(amp);
 800be28:	4b55      	ldr	r3, [pc, #340]	; (800bf80 <keyboard_intake+0x32c>)
 800be2a:	edd3 7a00 	vldr	s15, [r3]
 800be2e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be32:	ee17 3a90 	vmov	r3, s15
 800be36:	2b00      	cmp	r3, #0
 800be38:	bfb8      	it	lt
 800be3a:	425b      	neglt	r3, r3
 800be3c:	425b      	negs	r3, r3
 800be3e:	ee07 3a90 	vmov	s15, r3
 800be42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800be46:	4b4e      	ldr	r3, [pc, #312]	; (800bf80 <keyboard_intake+0x32c>)
 800be48:	edc3 7a00 	vstr	s15, [r3]
		break;
 800be4c:	e12c      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'r':
		amp = -amp;
 800be4e:	4b4c      	ldr	r3, [pc, #304]	; (800bf80 <keyboard_intake+0x32c>)
 800be50:	edd3 7a00 	vldr	s15, [r3]
 800be54:	eef1 7a67 	vneg.f32	s15, s15
 800be58:	4b49      	ldr	r3, [pc, #292]	; (800bf80 <keyboard_intake+0x32c>)
 800be5a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800be5e:	e123      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'z':
		playSound( 1, 20, 100);
 800be60:	2264      	movs	r2, #100	; 0x64
 800be62:	2114      	movs	r1, #20
 800be64:	2001      	movs	r0, #1
 800be66:	f7fe fe8b 	bl	800ab80 <playSound>
		break;
 800be6a:	e11d      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'u':
		stiffness += 0.0001f;
 800be6c:	4b49      	ldr	r3, [pc, #292]	; (800bf94 <keyboard_intake+0x340>)
 800be6e:	edd3 7a00 	vldr	s15, [r3]
 800be72:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800bf98 <keyboard_intake+0x344>
 800be76:	ee77 7a87 	vadd.f32	s15, s15, s14
 800be7a:	4b46      	ldr	r3, [pc, #280]	; (800bf94 <keyboard_intake+0x340>)
 800be7c:	edc3 7a00 	vstr	s15, [r3]
		break;
 800be80:	e112      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'j':
		stiffness -= 0.0001f;
 800be82:	4b44      	ldr	r3, [pc, #272]	; (800bf94 <keyboard_intake+0x340>)
 800be84:	edd3 7a00 	vldr	s15, [r3]
 800be88:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800bf98 <keyboard_intake+0x344>
 800be8c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800be90:	4b40      	ldr	r3, [pc, #256]	; (800bf94 <keyboard_intake+0x340>)
 800be92:	edc3 7a00 	vstr	s15, [r3]
		break;
 800be96:	e107      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'p':
		//print2uart = false;
		print2uart = !print2uart;
 800be98:	4b40      	ldr	r3, [pc, #256]	; (800bf9c <keyboard_intake+0x348>)
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	bf14      	ite	ne
 800bea0:	2301      	movne	r3, #1
 800bea2:	2300      	moveq	r3, #0
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	f083 0301 	eor.w	r3, r3, #1
 800beaa:	b2db      	uxtb	r3, r3
 800beac:	f003 0301 	and.w	r3, r3, #1
 800beb0:	b2da      	uxtb	r2, r3
 800beb2:	4b3a      	ldr	r3, [pc, #232]	; (800bf9c <keyboard_intake+0x348>)
 800beb4:	701a      	strb	r2, [r3, #0]
		break;
 800beb6:	e0f7      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'o':
		//HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
		EN_GATE_GPIO_Port->BSRR = (uint32_t)EN_GATE_Pin << 16U;
 800beb8:	4b39      	ldr	r3, [pc, #228]	; (800bfa0 <keyboard_intake+0x34c>)
 800beba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bebe:	619a      	str	r2, [r3, #24]
		break;
 800bec0:	e0f2      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'l':
		HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 800bec2:	2201      	movs	r2, #1
 800bec4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bec8:	4835      	ldr	r0, [pc, #212]	; (800bfa0 <keyboard_intake+0x34c>)
 800beca:	f7f7 fc13 	bl	80036f4 <HAL_GPIO_WritePin>
		EN_GATE_GPIO_Port->BSRR = EN_GATE_Pin ;
 800bece:	4b34      	ldr	r3, [pc, #208]	; (800bfa0 <keyboard_intake+0x34c>)
 800bed0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bed4:	619a      	str	r2, [r3, #24]
		break;
 800bed6:	e0e7      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'X':
		step_through_pole_angles();
 800bed8:	f7fe fc52 	bl	800a780 <step_through_pole_angles>
		break;
 800bedc:	e0e4      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'P':
		step_through_pwm_percent();
 800bede:	f7fe fd7b 	bl	800a9d8 <step_through_pwm_percent>
		break;
 800bee2:	e0e1      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'i':
		control_mode = position_control;
 800bee4:	4b2f      	ldr	r3, [pc, #188]	; (800bfa4 <keyboard_intake+0x350>)
 800bee6:	2201      	movs	r2, #1
 800bee8:	601a      	str	r2, [r3, #0]
		break;
 800beea:	e0dd      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'k':
		control_mode = voltage_control;
 800beec:	4b2d      	ldr	r3, [pc, #180]	; (800bfa4 <keyboard_intake+0x350>)
 800beee:	2200      	movs	r2, #0
 800bef0:	601a      	str	r2, [r3, #0]
		amp = 0.05f;
 800bef2:	4b23      	ldr	r3, [pc, #140]	; (800bf80 <keyboard_intake+0x32c>)
 800bef4:	4a2c      	ldr	r2, [pc, #176]	; (800bfa8 <keyboard_intake+0x354>)
 800bef6:	601a      	str	r2, [r3, #0]
		break;
 800bef8:	e0d6      	b.n	800c0a8 <keyboard_intake+0x454>

		// pos control
	case 'W':
		pos_amp *= 2;
 800befa:	4b2c      	ldr	r3, [pc, #176]	; (800bfac <keyboard_intake+0x358>)
 800befc:	edd3 7a00 	vldr	s15, [r3]
 800bf00:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf04:	4b29      	ldr	r3, [pc, #164]	; (800bfac <keyboard_intake+0x358>)
 800bf06:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bf0a:	e0cd      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'S':
		pos_amp *= 0.5f;
 800bf0c:	4b27      	ldr	r3, [pc, #156]	; (800bfac <keyboard_intake+0x358>)
 800bf0e:	edd3 7a00 	vldr	s15, [r3]
 800bf12:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bf16:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf1a:	4b24      	ldr	r3, [pc, #144]	; (800bfac <keyboard_intake+0x358>)
 800bf1c:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bf20:	e0c2      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'D':
		pos_freq *= 2;
 800bf22:	4b23      	ldr	r3, [pc, #140]	; (800bfb0 <keyboard_intake+0x35c>)
 800bf24:	edd3 7a00 	vldr	s15, [r3]
 800bf28:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf2c:	4b20      	ldr	r3, [pc, #128]	; (800bfb0 <keyboard_intake+0x35c>)
 800bf2e:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bf32:	e0b9      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'A':
		pos_freq *= 0.5f;
 800bf34:	4b1e      	ldr	r3, [pc, #120]	; (800bfb0 <keyboard_intake+0x35c>)
 800bf36:	edd3 7a00 	vldr	s15, [r3]
 800bf3a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bf3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf42:	4b1b      	ldr	r3, [pc, #108]	; (800bfb0 <keyboard_intake+0x35c>)
 800bf44:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bf48:	e0ae      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'C':
		if (convert2SI){
 800bf4a:	4b1a      	ldr	r3, [pc, #104]	; (800bfb4 <keyboard_intake+0x360>)
 800bf4c:	781b      	ldrb	r3, [r3, #0]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d003      	beq.n	800bf5a <keyboard_intake+0x306>
			convert2SI = false;
 800bf52:	4b18      	ldr	r3, [pc, #96]	; (800bfb4 <keyboard_intake+0x360>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	701a      	strb	r2, [r3, #0]
		}
		else {
			convert2SI = true;
		}
		break;
 800bf58:	e0a6      	b.n	800c0a8 <keyboard_intake+0x454>
			convert2SI = true;
 800bf5a:	4b16      	ldr	r3, [pc, #88]	; (800bfb4 <keyboard_intake+0x360>)
 800bf5c:	2201      	movs	r2, #1
 800bf5e:	701a      	strb	r2, [r3, #0]
		break;
 800bf60:	e0a2      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'R':
		pos_amp_limit *= 2;
 800bf62:	4b15      	ldr	r3, [pc, #84]	; (800bfb8 <keyboard_intake+0x364>)
 800bf64:	edd3 7a00 	vldr	s15, [r3]
 800bf68:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bf6c:	4b12      	ldr	r3, [pc, #72]	; (800bfb8 <keyboard_intake+0x364>)
 800bf6e:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bf72:	e099      	b.n	800c0a8 <keyboard_intake+0x454>
 800bf74:	2000003c 	.word	0x2000003c
 800bf78:	200006f0 	.word	0x200006f0
 800bf7c:	20000005 	.word	0x20000005
 800bf80:	20000240 	.word	0x20000240
 800bf84:	20000010 	.word	0x20000010
 800bf88:	3d4ccccd 	.word	0x3d4ccccd
 800bf8c:	20000008 	.word	0x20000008
 800bf90:	2000023d 	.word	0x2000023d
 800bf94:	20000014 	.word	0x20000014
 800bf98:	38d1b717 	.word	0x38d1b717
 800bf9c:	2000000e 	.word	0x2000000e
 800bfa0:	40021000 	.word	0x40021000
 800bfa4:	20000238 	.word	0x20000238
 800bfa8:	3d4ccccd 	.word	0x3d4ccccd
 800bfac:	20000018 	.word	0x20000018
 800bfb0:	2000001c 	.word	0x2000001c
 800bfb4:	2000023c 	.word	0x2000023c
 800bfb8:	20000020 	.word	0x20000020
	case 'F':
		pos_amp_limit *= 0.5f;
 800bfbc:	4b3b      	ldr	r3, [pc, #236]	; (800c0ac <keyboard_intake+0x458>)
 800bfbe:	edd3 7a00 	vldr	s15, [r3]
 800bfc2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bfc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfca:	4b38      	ldr	r3, [pc, #224]	; (800c0ac <keyboard_intake+0x458>)
 800bfcc:	edc3 7a00 	vstr	s15, [r3]
	case 'E':
		pos_offset += 200;
 800bfd0:	4b37      	ldr	r3, [pc, #220]	; (800c0b0 <keyboard_intake+0x45c>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	33c8      	adds	r3, #200	; 0xc8
 800bfd6:	4a36      	ldr	r2, [pc, #216]	; (800c0b0 <keyboard_intake+0x45c>)
 800bfd8:	6013      	str	r3, [r2, #0]
		break;
 800bfda:	e065      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'Q':
		pos_offset -= 200;
 800bfdc:	4b34      	ldr	r3, [pc, #208]	; (800c0b0 <keyboard_intake+0x45c>)
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	3bc8      	subs	r3, #200	; 0xc8
 800bfe2:	4a33      	ldr	r2, [pc, #204]	; (800c0b0 <keyboard_intake+0x45c>)
 800bfe4:	6013      	str	r3, [r2, #0]
		break;
 800bfe6:	e05f      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'M':
		P_gain *= 2;
 800bfe8:	4b32      	ldr	r3, [pc, #200]	; (800c0b4 <keyboard_intake+0x460>)
 800bfea:	edd3 7a00 	vldr	s15, [r3]
 800bfee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bff2:	4b30      	ldr	r3, [pc, #192]	; (800c0b4 <keyboard_intake+0x460>)
 800bff4:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bff8:	e056      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'N':
		P_gain *= 0.5f;
 800bffa:	4b2e      	ldr	r3, [pc, #184]	; (800c0b4 <keyboard_intake+0x460>)
 800bffc:	edd3 7a00 	vldr	s15, [r3]
 800c000:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c004:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c008:	4b2a      	ldr	r3, [pc, #168]	; (800c0b4 <keyboard_intake+0x460>)
 800c00a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800c00e:	e04b      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'T':
		current_mode = sinusoidal;
 800c010:	4b29      	ldr	r3, [pc, #164]	; (800c0b8 <keyboard_intake+0x464>)
 800c012:	2200      	movs	r2, #0
 800c014:	601a      	str	r2, [r3, #0]
		break;
 800c016:	e047      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'G':
		current_mode = trapezoidal;
 800c018:	4b27      	ldr	r3, [pc, #156]	; (800c0b8 <keyboard_intake+0x464>)
 800c01a:	2201      	movs	r2, #1
 800c01c:	601a      	str	r2, [r3, #0]
		break;
 800c01e:	e043      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'B':
		current_mode = freerun;
 800c020:	4b25      	ldr	r3, [pc, #148]	; (800c0b8 <keyboard_intake+0x464>)
 800c022:	2202      	movs	r2, #2
 800c024:	601a      	str	r2, [r3, #0]
		break;
 800c026:	e03f      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'L':
		explore_limits();
 800c028:	f7fe fd14 	bl	800aa54 <explore_limits>
		break;
 800c02c:	e03c      	b.n	800c0a8 <keyboard_intake+0x454>

	case 'm':
		generic_fac *= 2.0f;
 800c02e:	4b23      	ldr	r3, [pc, #140]	; (800c0bc <keyboard_intake+0x468>)
 800c030:	edd3 7a00 	vldr	s15, [r3]
 800c034:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800c038:	4b20      	ldr	r3, [pc, #128]	; (800c0bc <keyboard_intake+0x468>)
 800c03a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800c03e:	e033      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'n':
		generic_fac *= 0.5f;
 800c040:	4b1e      	ldr	r3, [pc, #120]	; (800c0bc <keyboard_intake+0x468>)
 800c042:	edd3 7a00 	vldr	s15, [r3]
 800c046:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c04a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c04e:	4b1b      	ldr	r3, [pc, #108]	; (800c0bc <keyboard_intake+0x468>)
 800c050:	edc3 7a00 	vstr	s15, [r3]
		break;
 800c054:	e028      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'v':
		generic_add += 1.0f;
 800c056:	4b1a      	ldr	r3, [pc, #104]	; (800c0c0 <keyboard_intake+0x46c>)
 800c058:	edd3 7a00 	vldr	s15, [r3]
 800c05c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c060:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c064:	4b16      	ldr	r3, [pc, #88]	; (800c0c0 <keyboard_intake+0x46c>)
 800c066:	edc3 7a00 	vstr	s15, [r3]
		break;
 800c06a:	e01d      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'b':
		generic_add -= 1.0f;
 800c06c:	4b14      	ldr	r3, [pc, #80]	; (800c0c0 <keyboard_intake+0x46c>)
 800c06e:	edd3 7a00 	vldr	s15, [r3]
 800c072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c07a:	4b11      	ldr	r3, [pc, #68]	; (800c0c0 <keyboard_intake+0x46c>)
 800c07c:	edc3 7a00 	vstr	s15, [r3]
		break;
 800c080:	e012      	b.n	800c0a8 <keyboard_intake+0x454>
	case 'Z':
		FOC_enabled = !FOC_enabled;
 800c082:	4b10      	ldr	r3, [pc, #64]	; (800c0c4 <keyboard_intake+0x470>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	bf14      	ite	ne
 800c08a:	2301      	movne	r3, #1
 800c08c:	2300      	moveq	r3, #0
 800c08e:	b2db      	uxtb	r3, r3
 800c090:	f083 0301 	eor.w	r3, r3, #1
 800c094:	b2db      	uxtb	r3, r3
 800c096:	f003 0301 	and.w	r3, r3, #1
 800c09a:	b2da      	uxtb	r2, r3
 800c09c:	4b09      	ldr	r3, [pc, #36]	; (800c0c4 <keyboard_intake+0x470>)
 800c09e:	701a      	strb	r2, [r3, #0]
		break;
 800c0a0:	e002      	b.n	800c0a8 <keyboard_intake+0x454>


	default:
		ch='.';
 800c0a2:	4b09      	ldr	r3, [pc, #36]	; (800c0c8 <keyboard_intake+0x474>)
 800c0a4:	222e      	movs	r2, #46	; 0x2e
 800c0a6:	701a      	strb	r2, [r3, #0]
	}//for case 200ns

}
 800c0a8:	bf00      	nop
 800c0aa:	bd80      	pop	{r7, pc}
 800c0ac:	20000020 	.word	0x20000020
 800c0b0:	20000244 	.word	0x20000244
 800c0b4:	20000024 	.word	0x20000024
 800c0b8:	20000234 	.word	0x20000234
 800c0bc:	20000028 	.word	0x20000028
 800c0c0:	20000248 	.word	0x20000248
 800c0c4:	2000000c 	.word	0x2000000c
 800c0c8:	2000003c 	.word	0x2000003c

0800c0cc <print_prep_task>:

void print_prep_task(int fast_control_task_counter){
 800c0cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c0ce:	b08b      	sub	sp, #44	; 0x2c
 800c0d0:	af04      	add	r7, sp, #16
 800c0d2:	6078      	str	r0, [r7, #4]
#if DB_TIMING
	DB2H;
 800c0d4:	4ba3      	ldr	r3, [pc, #652]	; (800c364 <print_prep_task+0x298>)
 800c0d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c0da:	619a      	str	r2, [r3, #24]
	DB2L;
 800c0dc:	4ba1      	ldr	r3, [pc, #644]	; (800c364 <print_prep_task+0x298>)
 800c0de:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c0e2:	619a      	str	r2, [r3, #24]
	DB2H;
 800c0e4:	4b9f      	ldr	r3, [pc, #636]	; (800c364 <print_prep_task+0x298>)
 800c0e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c0ea:	619a      	str	r2, [r3, #24]
#endif

	int pos = strlen(buf);
 800c0ec:	489e      	ldr	r0, [pc, #632]	; (800c368 <print_prep_task+0x29c>)
 800c0ee:	f7f4 f86f 	bl	80001d0 <strlen>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	617b      	str	r3, [r7, #20]
	int left  = BUF_LEN - pos;
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800c0fc:	613b      	str	r3, [r7, #16]
		nn = snprintf(buf+pos, left, fmt, val);  \
		pos += nn;                               \
		left -= nn;


	switch (fast_control_task_counter){
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2b14      	cmp	r3, #20
 800c102:	f200 830d 	bhi.w	800c720 <print_prep_task+0x654>
 800c106:	a201      	add	r2, pc, #4	; (adr r2, 800c10c <print_prep_task+0x40>)
 800c108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10c:	0800c161 	.word	0x0800c161
 800c110:	0800c191 	.word	0x0800c191
 800c114:	0800c21d 	.word	0x0800c21d
 800c118:	0800c243 	.word	0x0800c243
 800c11c:	0800c2ff 	.word	0x0800c2ff
 800c120:	0800c3c9 	.word	0x0800c3c9
 800c124:	0800c721 	.word	0x0800c721
 800c128:	0800c401 	.word	0x0800c401
 800c12c:	0800c46f 	.word	0x0800c46f
 800c130:	0800c4a7 	.word	0x0800c4a7
 800c134:	0800c4df 	.word	0x0800c4df
 800c138:	0800c50f 	.word	0x0800c50f
 800c13c:	0800c547 	.word	0x0800c547
 800c140:	0800c56d 	.word	0x0800c56d
 800c144:	0800c593 	.word	0x0800c593
 800c148:	0800c5cb 	.word	0x0800c5cb
 800c14c:	0800c5f1 	.word	0x0800c5f1
 800c150:	0800c721 	.word	0x0800c721
 800c154:	0800c721 	.word	0x0800c721
 800c158:	0800c699 	.word	0x0800c699
 800c15c:	0800c70d 	.word	0x0800c70d
	case 0:
		sprintf(buf, "tx: %c %4d %4d %4d %4d ", ch, tx_msg[0],rx_msg[1],rx_msg[2],rx_msg[3]);//70000ns
 800c160:	4b82      	ldr	r3, [pc, #520]	; (800c36c <print_prep_task+0x2a0>)
 800c162:	781b      	ldrb	r3, [r3, #0]
 800c164:	4618      	mov	r0, r3
 800c166:	4b82      	ldr	r3, [pc, #520]	; (800c370 <print_prep_task+0x2a4>)
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	461c      	mov	r4, r3
 800c16c:	4b81      	ldr	r3, [pc, #516]	; (800c374 <print_prep_task+0x2a8>)
 800c16e:	785b      	ldrb	r3, [r3, #1]
 800c170:	461a      	mov	r2, r3
 800c172:	4b80      	ldr	r3, [pc, #512]	; (800c374 <print_prep_task+0x2a8>)
 800c174:	789b      	ldrb	r3, [r3, #2]
 800c176:	4619      	mov	r1, r3
 800c178:	4b7e      	ldr	r3, [pc, #504]	; (800c374 <print_prep_task+0x2a8>)
 800c17a:	78db      	ldrb	r3, [r3, #3]
 800c17c:	9302      	str	r3, [sp, #8]
 800c17e:	9101      	str	r1, [sp, #4]
 800c180:	9200      	str	r2, [sp, #0]
 800c182:	4623      	mov	r3, r4
 800c184:	4602      	mov	r2, r0
 800c186:	497c      	ldr	r1, [pc, #496]	; (800c378 <print_prep_task+0x2ac>)
 800c188:	4877      	ldr	r0, [pc, #476]	; (800c368 <print_prep_task+0x29c>)
 800c18a:	f002 f94f 	bl	800e42c <siprintf>
		break;
 800c18e:	e2c7      	b.n	800c720 <print_prep_task+0x654>
	case 1:
		ADD_VAL(" a:%5d",HAL_ADCEx_InjectedGetValue (&hadc1, RANK_U));
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	4a75      	ldr	r2, [pc, #468]	; (800c368 <print_prep_task+0x29c>)
 800c194:	189c      	adds	r4, r3, r2
 800c196:	693d      	ldr	r5, [r7, #16]
 800c198:	2101      	movs	r1, #1
 800c19a:	4878      	ldr	r0, [pc, #480]	; (800c37c <print_prep_task+0x2b0>)
 800c19c:	f7f5 fd84 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800c1a0:	4603      	mov	r3, r0
 800c1a2:	4a77      	ldr	r2, [pc, #476]	; (800c380 <print_prep_task+0x2b4>)
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	4620      	mov	r0, r4
 800c1a8:	f002 f90c 	bl	800e3c4 <sniprintf>
 800c1ac:	60f8      	str	r0, [r7, #12]
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	617b      	str	r3, [r7, #20]
 800c1b6:	693a      	ldr	r2, [r7, #16]
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	1ad3      	subs	r3, r2, r3
 800c1bc:	613b      	str	r3, [r7, #16]
		ADD_VAL(" b:%5d",HAL_ADCEx_InjectedGetValue (&hadc2, RANK_U));
 800c1be:	697b      	ldr	r3, [r7, #20]
 800c1c0:	4a69      	ldr	r2, [pc, #420]	; (800c368 <print_prep_task+0x29c>)
 800c1c2:	189c      	adds	r4, r3, r2
 800c1c4:	693d      	ldr	r5, [r7, #16]
 800c1c6:	2101      	movs	r1, #1
 800c1c8:	486e      	ldr	r0, [pc, #440]	; (800c384 <print_prep_task+0x2b8>)
 800c1ca:	f7f5 fd6d 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	4a6d      	ldr	r2, [pc, #436]	; (800c388 <print_prep_task+0x2bc>)
 800c1d2:	4629      	mov	r1, r5
 800c1d4:	4620      	mov	r0, r4
 800c1d6:	f002 f8f5 	bl	800e3c4 <sniprintf>
 800c1da:	60f8      	str	r0, [r7, #12]
 800c1dc:	697a      	ldr	r2, [r7, #20]
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	617b      	str	r3, [r7, #20]
 800c1e4:	693a      	ldr	r2, [r7, #16]
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	1ad3      	subs	r3, r2, r3
 800c1ea:	613b      	str	r3, [r7, #16]
		ADD_VAL(" c:%5d",HAL_ADCEx_InjectedGetValue (&hadc3, RANK_U));
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	4a5e      	ldr	r2, [pc, #376]	; (800c368 <print_prep_task+0x29c>)
 800c1f0:	189c      	adds	r4, r3, r2
 800c1f2:	693d      	ldr	r5, [r7, #16]
 800c1f4:	2101      	movs	r1, #1
 800c1f6:	4865      	ldr	r0, [pc, #404]	; (800c38c <print_prep_task+0x2c0>)
 800c1f8:	f7f5 fd56 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	4a64      	ldr	r2, [pc, #400]	; (800c390 <print_prep_task+0x2c4>)
 800c200:	4629      	mov	r1, r5
 800c202:	4620      	mov	r0, r4
 800c204:	f002 f8de 	bl	800e3c4 <sniprintf>
 800c208:	60f8      	str	r0, [r7, #12]
 800c20a:	697a      	ldr	r2, [r7, #20]
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	4413      	add	r3, r2
 800c210:	617b      	str	r3, [r7, #20]
 800c212:	693a      	ldr	r2, [r7, #16]
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	1ad3      	subs	r3, r2, r3
 800c218:	613b      	str	r3, [r7, #16]
		//ADD_VAL(" p0:%4.2f", phase0);
		break;
 800c21a:	e281      	b.n	800c720 <print_prep_task+0x654>
	case 2:
		//ADD_VAL(" ps:%4.2f", phase_shift);
		ADD_VAL(" TM:%4d", (int) av_MOT_TEMP);
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	4a52      	ldr	r2, [pc, #328]	; (800c368 <print_prep_task+0x29c>)
 800c220:	1898      	adds	r0, r3, r2
 800c222:	6939      	ldr	r1, [r7, #16]
 800c224:	4b5b      	ldr	r3, [pc, #364]	; (800c394 <print_prep_task+0x2c8>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a5b      	ldr	r2, [pc, #364]	; (800c398 <print_prep_task+0x2cc>)
 800c22a:	f002 f8cb 	bl	800e3c4 <sniprintf>
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	4413      	add	r3, r2
 800c236:	617b      	str	r3, [r7, #20]
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	1ad3      	subs	r3, r2, r3
 800c23e:	613b      	str	r3, [r7, #16]
		break;
 800c240:	e26e      	b.n	800c720 <print_prep_task+0x654>
	case 3:
		//ADD_VAL(" a:%4.2f", amp);
		//ADD_VAL(" a:%5d", (int)(amp*100.0f));
		ADD_VAL(" A:%5d",HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I)- (int)A_mean);
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	4a48      	ldr	r2, [pc, #288]	; (800c368 <print_prep_task+0x29c>)
 800c246:	189c      	adds	r4, r3, r2
 800c248:	693d      	ldr	r5, [r7, #16]
 800c24a:	2104      	movs	r1, #4
 800c24c:	484b      	ldr	r0, [pc, #300]	; (800c37c <print_prep_task+0x2b0>)
 800c24e:	f7f5 fd2b 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800c252:	4602      	mov	r2, r0
 800c254:	4b51      	ldr	r3, [pc, #324]	; (800c39c <print_prep_task+0x2d0>)
 800c256:	edd3 7a00 	vldr	s15, [r3]
 800c25a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c25e:	ee17 3a90 	vmov	r3, s15
 800c262:	1ad3      	subs	r3, r2, r3
 800c264:	4a4e      	ldr	r2, [pc, #312]	; (800c3a0 <print_prep_task+0x2d4>)
 800c266:	4629      	mov	r1, r5
 800c268:	4620      	mov	r0, r4
 800c26a:	f002 f8ab 	bl	800e3c4 <sniprintf>
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	697a      	ldr	r2, [r7, #20]
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	4413      	add	r3, r2
 800c276:	617b      	str	r3, [r7, #20]
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	613b      	str	r3, [r7, #16]
		ADD_VAL(" B:%5d",HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I)- (int)B_mean);
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	4a39      	ldr	r2, [pc, #228]	; (800c368 <print_prep_task+0x29c>)
 800c284:	189c      	adds	r4, r3, r2
 800c286:	693d      	ldr	r5, [r7, #16]
 800c288:	2104      	movs	r1, #4
 800c28a:	483e      	ldr	r0, [pc, #248]	; (800c384 <print_prep_task+0x2b8>)
 800c28c:	f7f5 fd0c 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800c290:	4602      	mov	r2, r0
 800c292:	4b44      	ldr	r3, [pc, #272]	; (800c3a4 <print_prep_task+0x2d8>)
 800c294:	edd3 7a00 	vldr	s15, [r3]
 800c298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c29c:	ee17 3a90 	vmov	r3, s15
 800c2a0:	1ad3      	subs	r3, r2, r3
 800c2a2:	4a41      	ldr	r2, [pc, #260]	; (800c3a8 <print_prep_task+0x2dc>)
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	4620      	mov	r0, r4
 800c2a8:	f002 f88c 	bl	800e3c4 <sniprintf>
 800c2ac:	60f8      	str	r0, [r7, #12]
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	617b      	str	r3, [r7, #20]
 800c2b6:	693a      	ldr	r2, [r7, #16]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	1ad3      	subs	r3, r2, r3
 800c2bc:	613b      	str	r3, [r7, #16]
		ADD_VAL(" C:%5d",HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I)- (int)C_mean);
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	4a29      	ldr	r2, [pc, #164]	; (800c368 <print_prep_task+0x29c>)
 800c2c2:	189c      	adds	r4, r3, r2
 800c2c4:	693d      	ldr	r5, [r7, #16]
 800c2c6:	2104      	movs	r1, #4
 800c2c8:	4830      	ldr	r0, [pc, #192]	; (800c38c <print_prep_task+0x2c0>)
 800c2ca:	f7f5 fced 	bl	8001ca8 <HAL_ADCEx_InjectedGetValue>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	4b36      	ldr	r3, [pc, #216]	; (800c3ac <print_prep_task+0x2e0>)
 800c2d2:	edd3 7a00 	vldr	s15, [r3]
 800c2d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c2da:	ee17 3a90 	vmov	r3, s15
 800c2de:	1ad3      	subs	r3, r2, r3
 800c2e0:	4a33      	ldr	r2, [pc, #204]	; (800c3b0 <print_prep_task+0x2e4>)
 800c2e2:	4629      	mov	r1, r5
 800c2e4:	4620      	mov	r0, r4
 800c2e6:	f002 f86d 	bl	800e3c4 <sniprintf>
 800c2ea:	60f8      	str	r0, [r7, #12]
 800c2ec:	697a      	ldr	r2, [r7, #20]
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	617b      	str	r3, [r7, #20]
 800c2f4:	693a      	ldr	r2, [r7, #16]
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	613b      	str	r3, [r7, #16]
		break;
 800c2fc:	e210      	b.n	800c720 <print_prep_task+0x654>
	case 4:
		//ADD_VAL(" v:%6.2f", omega);
		ADD_VAL(" oE:%5d", (int)(omegaEnc*100.0f));
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	4a19      	ldr	r2, [pc, #100]	; (800c368 <print_prep_task+0x29c>)
 800c302:	1898      	adds	r0, r3, r2
 800c304:	6939      	ldr	r1, [r7, #16]
 800c306:	4b2b      	ldr	r3, [pc, #172]	; (800c3b4 <print_prep_task+0x2e8>)
 800c308:	edd3 7a00 	vldr	s15, [r3]
 800c30c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800c3b8 <print_prep_task+0x2ec>
 800c310:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c314:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c318:	ee17 3a90 	vmov	r3, s15
 800c31c:	4a27      	ldr	r2, [pc, #156]	; (800c3bc <print_prep_task+0x2f0>)
 800c31e:	f002 f851 	bl	800e3c4 <sniprintf>
 800c322:	60f8      	str	r0, [r7, #12]
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4413      	add	r3, r2
 800c32a:	617b      	str	r3, [r7, #20]
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	1ad3      	subs	r3, r2, r3
 800c332:	613b      	str	r3, [r7, #16]
		ADD_VAL(" od:%5d", (int)(omegaEncDot*1.0f));
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	4a0c      	ldr	r2, [pc, #48]	; (800c368 <print_prep_task+0x29c>)
 800c338:	1898      	adds	r0, r3, r2
 800c33a:	6939      	ldr	r1, [r7, #16]
 800c33c:	4b20      	ldr	r3, [pc, #128]	; (800c3c0 <print_prep_task+0x2f4>)
 800c33e:	edd3 7a00 	vldr	s15, [r3]
 800c342:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c346:	ee17 3a90 	vmov	r3, s15
 800c34a:	4a1e      	ldr	r2, [pc, #120]	; (800c3c4 <print_prep_task+0x2f8>)
 800c34c:	f002 f83a 	bl	800e3c4 <sniprintf>
 800c350:	60f8      	str	r0, [r7, #12]
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	4413      	add	r3, r2
 800c358:	617b      	str	r3, [r7, #20]
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	1ad3      	subs	r3, r2, r3
 800c360:	613b      	str	r3, [r7, #16]

		//sprintf(buf_add, " E:%5d", (int)TIM8->CNT); strcat(buf, buf_add);
		break;
 800c362:	e1dd      	b.n	800c720 <print_prep_task+0x654>
 800c364:	40020c00 	.word	0x40020c00
 800c368:	20001ab0 	.word	0x20001ab0
 800c36c:	2000003c 	.word	0x2000003c
 800c370:	20000c2c 	.word	0x20000c2c
 800c374:	20000d78 	.word	0x20000d78
 800c378:	080126dc 	.word	0x080126dc
 800c37c:	20000e5c 	.word	0x20000e5c
 800c380:	080126f4 	.word	0x080126f4
 800c384:	20000730 	.word	0x20000730
 800c388:	080126fc 	.word	0x080126fc
 800c38c:	20000ea4 	.word	0x20000ea4
 800c390:	08012704 	.word	0x08012704
 800c394:	20000284 	.word	0x20000284
 800c398:	0801270c 	.word	0x0801270c
 800c39c:	20000030 	.word	0x20000030
 800c3a0:	08012714 	.word	0x08012714
 800c3a4:	20000034 	.word	0x20000034
 800c3a8:	0801271c 	.word	0x0801271c
 800c3ac:	20000038 	.word	0x20000038
 800c3b0:	08012724 	.word	0x08012724
 800c3b4:	2000025c 	.word	0x2000025c
 800c3b8:	42c80000 	.word	0x42c80000
 800c3bc:	0801272c 	.word	0x0801272c
 800c3c0:	20000264 	.word	0x20000264
 800c3c4:	08012734 	.word	0x08012734
	case 5:
		//ADD_VAL(" c:%5d", (int)rotation_counter);
		ADD_VAL(" s:%5d", (int)(stiffness*10000.0f));
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	4a97      	ldr	r2, [pc, #604]	; (800c628 <print_prep_task+0x55c>)
 800c3cc:	1898      	adds	r0, r3, r2
 800c3ce:	6939      	ldr	r1, [r7, #16]
 800c3d0:	4b96      	ldr	r3, [pc, #600]	; (800c62c <print_prep_task+0x560>)
 800c3d2:	edd3 7a00 	vldr	s15, [r3]
 800c3d6:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800c630 <print_prep_task+0x564>
 800c3da:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c3de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c3e2:	ee17 3a90 	vmov	r3, s15
 800c3e6:	4a93      	ldr	r2, [pc, #588]	; (800c634 <print_prep_task+0x568>)
 800c3e8:	f001 ffec 	bl	800e3c4 <sniprintf>
 800c3ec:	60f8      	str	r0, [r7, #12]
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	617b      	str	r3, [r7, #20]
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	1ad3      	subs	r3, r2, r3
 800c3fc:	613b      	str	r3, [r7, #16]
		break;
 800c3fe:	e18f      	b.n	800c720 <print_prep_task+0x654>
	case 6:
		break;
	case 7:
		//ADD_VAL(" ADC:%5d", HAL_ADC_GetValue(&hadc1));
		ADD_VAL(" T_MCU:%5d", adc1_buf[RANK_CONT_TMCU-1]);
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	4a89      	ldr	r2, [pc, #548]	; (800c628 <print_prep_task+0x55c>)
 800c404:	1898      	adds	r0, r3, r2
 800c406:	6939      	ldr	r1, [r7, #16]
 800c408:	4b8b      	ldr	r3, [pc, #556]	; (800c638 <print_prep_task+0x56c>)
 800c40a:	891b      	ldrh	r3, [r3, #8]
 800c40c:	4a8b      	ldr	r2, [pc, #556]	; (800c63c <print_prep_task+0x570>)
 800c40e:	f001 ffd9 	bl	800e3c4 <sniprintf>
 800c412:	60f8      	str	r0, [r7, #12]
 800c414:	697a      	ldr	r2, [r7, #20]
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	4413      	add	r3, r2
 800c41a:	617b      	str	r3, [r7, #20]
 800c41c:	693a      	ldr	r2, [r7, #16]
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	613b      	str	r3, [r7, #16]
		//ADD_VAL(" Vref:%5d", adc1_buf[RANK_CONT_Vref-1]);
		//ADD_VAL(" Vbat:%5d", adc1_buf[RANK_CONT_Vbat-1]);
		ADD_VAL(" Vbus:%5d", adc1_buf[RANK_CONT_Vbus-1]);
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	4a80      	ldr	r2, [pc, #512]	; (800c628 <print_prep_task+0x55c>)
 800c428:	1898      	adds	r0, r3, r2
 800c42a:	6939      	ldr	r1, [r7, #16]
 800c42c:	4b82      	ldr	r3, [pc, #520]	; (800c638 <print_prep_task+0x56c>)
 800c42e:	89db      	ldrh	r3, [r3, #14]
 800c430:	4a83      	ldr	r2, [pc, #524]	; (800c640 <print_prep_task+0x574>)
 800c432:	f001 ffc7 	bl	800e3c4 <sniprintf>
 800c436:	60f8      	str	r0, [r7, #12]
 800c438:	697a      	ldr	r2, [r7, #20]
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	4413      	add	r3, r2
 800c43e:	617b      	str	r3, [r7, #20]
 800c440:	693a      	ldr	r2, [r7, #16]
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	1ad3      	subs	r3, r2, r3
 800c446:	613b      	str	r3, [r7, #16]
		ADD_VAL(" fVbus:%5d", fast_Vbus);
 800c448:	697b      	ldr	r3, [r7, #20]
 800c44a:	4a77      	ldr	r2, [pc, #476]	; (800c628 <print_prep_task+0x55c>)
 800c44c:	1898      	adds	r0, r3, r2
 800c44e:	6939      	ldr	r1, [r7, #16]
 800c450:	4b7c      	ldr	r3, [pc, #496]	; (800c644 <print_prep_task+0x578>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4a7c      	ldr	r2, [pc, #496]	; (800c648 <print_prep_task+0x57c>)
 800c456:	f001 ffb5 	bl	800e3c4 <sniprintf>
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	697a      	ldr	r2, [r7, #20]
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	4413      	add	r3, r2
 800c462:	617b      	str	r3, [r7, #20]
 800c464:	693a      	ldr	r2, [r7, #16]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	1ad3      	subs	r3, r2, r3
 800c46a:	613b      	str	r3, [r7, #16]


		//ADD_VAL(" pi:%4d", field_phase_int);
		break;
 800c46c:	e158      	b.n	800c720 <print_prep_task+0x654>
	case 8:
		//ADD_VAL(" dc:%4d", (int)(direct_component*100.0f));
		//ADD_VAL(" qc:%4d", (int)(quadrature_component*100.0f));
		ADD_VAL(" FOC:%4d", (int)(FOC_phase_shift*100.0f));
 800c46e:	697b      	ldr	r3, [r7, #20]
 800c470:	4a6d      	ldr	r2, [pc, #436]	; (800c628 <print_prep_task+0x55c>)
 800c472:	1898      	adds	r0, r3, r2
 800c474:	6939      	ldr	r1, [r7, #16]
 800c476:	4b75      	ldr	r3, [pc, #468]	; (800c64c <print_prep_task+0x580>)
 800c478:	edd3 7a00 	vldr	s15, [r3]
 800c47c:	ed9f 7a74 	vldr	s14, [pc, #464]	; 800c650 <print_prep_task+0x584>
 800c480:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c488:	ee17 3a90 	vmov	r3, s15
 800c48c:	4a71      	ldr	r2, [pc, #452]	; (800c654 <print_prep_task+0x588>)
 800c48e:	f001 ff99 	bl	800e3c4 <sniprintf>
 800c492:	60f8      	str	r0, [r7, #12]
 800c494:	697a      	ldr	r2, [r7, #20]
 800c496:	68fb      	ldr	r3, [r7, #12]
 800c498:	4413      	add	r3, r2
 800c49a:	617b      	str	r3, [r7, #20]
 800c49c:	693a      	ldr	r2, [r7, #16]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	1ad3      	subs	r3, r2, r3
 800c4a2:	613b      	str	r3, [r7, #16]
		break;
 800c4a4:	e13c      	b.n	800c720 <print_prep_task+0x654>
	case 9:
		ADD_VAL(" gf:%4d", (int)(generic_fac*100.0f));
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	4a5f      	ldr	r2, [pc, #380]	; (800c628 <print_prep_task+0x55c>)
 800c4aa:	1898      	adds	r0, r3, r2
 800c4ac:	6939      	ldr	r1, [r7, #16]
 800c4ae:	4b6a      	ldr	r3, [pc, #424]	; (800c658 <print_prep_task+0x58c>)
 800c4b0:	edd3 7a00 	vldr	s15, [r3]
 800c4b4:	ed9f 7a66 	vldr	s14, [pc, #408]	; 800c650 <print_prep_task+0x584>
 800c4b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4c0:	ee17 3a90 	vmov	r3, s15
 800c4c4:	4a65      	ldr	r2, [pc, #404]	; (800c65c <print_prep_task+0x590>)
 800c4c6:	f001 ff7d 	bl	800e3c4 <sniprintf>
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	617b      	str	r3, [r7, #20]
 800c4d4:	693a      	ldr	r2, [r7, #16]
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	1ad3      	subs	r3, r2, r3
 800c4da:	613b      	str	r3, [r7, #16]
		break;
 800c4dc:	e120      	b.n	800c720 <print_prep_task+0x654>
	case 10:
		ADD_VAL(" ga:%4d", (int) generic_add);
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	4a51      	ldr	r2, [pc, #324]	; (800c628 <print_prep_task+0x55c>)
 800c4e2:	1898      	adds	r0, r3, r2
 800c4e4:	6939      	ldr	r1, [r7, #16]
 800c4e6:	4b5e      	ldr	r3, [pc, #376]	; (800c660 <print_prep_task+0x594>)
 800c4e8:	edd3 7a00 	vldr	s15, [r3]
 800c4ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4f0:	ee17 3a90 	vmov	r3, s15
 800c4f4:	4a5b      	ldr	r2, [pc, #364]	; (800c664 <print_prep_task+0x598>)
 800c4f6:	f001 ff65 	bl	800e3c4 <sniprintf>
 800c4fa:	60f8      	str	r0, [r7, #12]
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	4413      	add	r3, r2
 800c502:	617b      	str	r3, [r7, #20]
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	613b      	str	r3, [r7, #16]
		break;
 800c50c:	e108      	b.n	800c720 <print_prep_task+0x654>
	case 11:
		ADD_VAL(" P:%5d", (int) (fast_P_consumed*100.0f));
 800c50e:	697b      	ldr	r3, [r7, #20]
 800c510:	4a45      	ldr	r2, [pc, #276]	; (800c628 <print_prep_task+0x55c>)
 800c512:	1898      	adds	r0, r3, r2
 800c514:	6939      	ldr	r1, [r7, #16]
 800c516:	4b54      	ldr	r3, [pc, #336]	; (800c668 <print_prep_task+0x59c>)
 800c518:	edd3 7a00 	vldr	s15, [r3]
 800c51c:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800c650 <print_prep_task+0x584>
 800c520:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c528:	ee17 3a90 	vmov	r3, s15
 800c52c:	4a4f      	ldr	r2, [pc, #316]	; (800c66c <print_prep_task+0x5a0>)
 800c52e:	f001 ff49 	bl	800e3c4 <sniprintf>
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	697a      	ldr	r2, [r7, #20]
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	4413      	add	r3, r2
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	693a      	ldr	r2, [r7, #16]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	613b      	str	r3, [r7, #16]
			//sprintf(buf_add, " It:%5.2fA", I_tot); strcat(buf, buf_add);
		}
		else{
			//sprintf(buf_add, " I:%4d SO1:%4d SO2:%4d", val_I, val_SO1, val_SO2); strcat(buf, buf_add);
		}
		break;
 800c544:	e0ec      	b.n	800c720 <print_prep_task+0x654>
	case 12:
		ADD_VAL(" TM:%4d", (int) av_MOT_TEMP);
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	4a37      	ldr	r2, [pc, #220]	; (800c628 <print_prep_task+0x55c>)
 800c54a:	1898      	adds	r0, r3, r2
 800c54c:	6939      	ldr	r1, [r7, #16]
 800c54e:	4b48      	ldr	r3, [pc, #288]	; (800c670 <print_prep_task+0x5a4>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	4a48      	ldr	r2, [pc, #288]	; (800c674 <print_prep_task+0x5a8>)
 800c554:	f001 ff36 	bl	800e3c4 <sniprintf>
 800c558:	60f8      	str	r0, [r7, #12]
 800c55a:	697a      	ldr	r2, [r7, #20]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	4413      	add	r3, r2
 800c560:	617b      	str	r3, [r7, #20]
 800c562:	693a      	ldr	r2, [r7, #16]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	1ad3      	subs	r3, r2, r3
 800c568:	613b      	str	r3, [r7, #16]
		break;
 800c56a:	e0d9      	b.n	800c720 <print_prep_task+0x654>
	case 13:
		ADD_VAL(" TE:%4d", (int) av_ESC_TEMP);
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	4a2e      	ldr	r2, [pc, #184]	; (800c628 <print_prep_task+0x55c>)
 800c570:	1898      	adds	r0, r3, r2
 800c572:	6939      	ldr	r1, [r7, #16]
 800c574:	4b40      	ldr	r3, [pc, #256]	; (800c678 <print_prep_task+0x5ac>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4a40      	ldr	r2, [pc, #256]	; (800c67c <print_prep_task+0x5b0>)
 800c57a:	f001 ff23 	bl	800e3c4 <sniprintf>
 800c57e:	60f8      	str	r0, [r7, #12]
 800c580:	697a      	ldr	r2, [r7, #20]
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	4413      	add	r3, r2
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	693a      	ldr	r2, [r7, #16]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	1ad3      	subs	r3, r2, r3
 800c58e:	613b      	str	r3, [r7, #16]
		break;
 800c590:	e0c6      	b.n	800c720 <print_prep_task+0x654>
	case 14:
		ADD_VAL(" It:%4.2f", fast_I_tot);
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	4a24      	ldr	r2, [pc, #144]	; (800c628 <print_prep_task+0x55c>)
 800c596:	189d      	adds	r5, r3, r2
 800c598:	693e      	ldr	r6, [r7, #16]
 800c59a:	4b39      	ldr	r3, [pc, #228]	; (800c680 <print_prep_task+0x5b4>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	4618      	mov	r0, r3
 800c5a0:	f7f3 ffd2 	bl	8000548 <__aeabi_f2d>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	e9cd 3400 	strd	r3, r4, [sp]
 800c5ac:	4a35      	ldr	r2, [pc, #212]	; (800c684 <print_prep_task+0x5b8>)
 800c5ae:	4631      	mov	r1, r6
 800c5b0:	4628      	mov	r0, r5
 800c5b2:	f001 ff07 	bl	800e3c4 <sniprintf>
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	697a      	ldr	r2, [r7, #20]
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	4413      	add	r3, r2
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	693a      	ldr	r2, [r7, #16]
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	1ad3      	subs	r3, r2, r3
 800c5c6:	613b      	str	r3, [r7, #16]
		break;
 800c5c8:	e0aa      	b.n	800c720 <print_prep_task+0x654>
	case 15:
		ADD_VAL(" F0:%4d", (int) fast_STRAIN0);
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	4a16      	ldr	r2, [pc, #88]	; (800c628 <print_prep_task+0x55c>)
 800c5ce:	1898      	adds	r0, r3, r2
 800c5d0:	6939      	ldr	r1, [r7, #16]
 800c5d2:	4b2d      	ldr	r3, [pc, #180]	; (800c688 <print_prep_task+0x5bc>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	4a2d      	ldr	r2, [pc, #180]	; (800c68c <print_prep_task+0x5c0>)
 800c5d8:	f001 fef4 	bl	800e3c4 <sniprintf>
 800c5dc:	60f8      	str	r0, [r7, #12]
 800c5de:	697a      	ldr	r2, [r7, #20]
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	4413      	add	r3, r2
 800c5e4:	617b      	str	r3, [r7, #20]
 800c5e6:	693a      	ldr	r2, [r7, #16]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	1ad3      	subs	r3, r2, r3
 800c5ec:	613b      	str	r3, [r7, #16]
		break;
 800c5ee:	e097      	b.n	800c720 <print_prep_task+0x654>
	case 16:
		ADD_VAL(" ps:%4.2f", phase_shift);
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	4a0d      	ldr	r2, [pc, #52]	; (800c628 <print_prep_task+0x55c>)
 800c5f4:	189d      	adds	r5, r3, r2
 800c5f6:	693e      	ldr	r6, [r7, #16]
 800c5f8:	4b25      	ldr	r3, [pc, #148]	; (800c690 <print_prep_task+0x5c4>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	f7f3 ffa3 	bl	8000548 <__aeabi_f2d>
 800c602:	4603      	mov	r3, r0
 800c604:	460c      	mov	r4, r1
 800c606:	e9cd 3400 	strd	r3, r4, [sp]
 800c60a:	4a22      	ldr	r2, [pc, #136]	; (800c694 <print_prep_task+0x5c8>)
 800c60c:	4631      	mov	r1, r6
 800c60e:	4628      	mov	r0, r5
 800c610:	f001 fed8 	bl	800e3c4 <sniprintf>
 800c614:	60f8      	str	r0, [r7, #12]
 800c616:	697a      	ldr	r2, [r7, #20]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	4413      	add	r3, r2
 800c61c:	617b      	str	r3, [r7, #20]
 800c61e:	693a      	ldr	r2, [r7, #16]
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	613b      	str	r3, [r7, #16]
		break;
 800c626:	e07b      	b.n	800c720 <print_prep_task+0x654>
 800c628:	20001ab0 	.word	0x20001ab0
 800c62c:	20000014 	.word	0x20000014
 800c630:	461c4000 	.word	0x461c4000
 800c634:	0801273c 	.word	0x0801273c
 800c638:	20000d7c 	.word	0x20000d7c
 800c63c:	08012744 	.word	0x08012744
 800c640:	08012750 	.word	0x08012750
 800c644:	2000002c 	.word	0x2000002c
 800c648:	0801275c 	.word	0x0801275c
 800c64c:	2000029c 	.word	0x2000029c
 800c650:	42c80000 	.word	0x42c80000
 800c654:	08012768 	.word	0x08012768
 800c658:	20000028 	.word	0x20000028
 800c65c:	08012774 	.word	0x08012774
 800c660:	20000248 	.word	0x20000248
 800c664:	0801277c 	.word	0x0801277c
 800c668:	20000298 	.word	0x20000298
 800c66c:	08012784 	.word	0x08012784
 800c670:	20000284 	.word	0x20000284
 800c674:	0801270c 	.word	0x0801270c
 800c678:	2000027c 	.word	0x2000027c
 800c67c:	0801278c 	.word	0x0801278c
 800c680:	2000028c 	.word	0x2000028c
 800c684:	08012794 	.word	0x08012794
 800c688:	20000270 	.word	0x20000270
 800c68c:	080127a0 	.word	0x080127a0
 800c690:	20000010 	.word	0x20000010
 800c694:	080127a8 	.word	0x080127a8




	case 19:
		if (av_ESC_TEMP > 1900){
 800c698:	4b29      	ldr	r3, [pc, #164]	; (800c740 <print_prep_task+0x674>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f240 726c 	movw	r2, #1900	; 0x76c
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d90c      	bls.n	800c6be <print_prep_task+0x5f2>
			sprintf(buf_add, "* >50C on ESC"); strcat(buf, buf_add);
 800c6a4:	4a27      	ldr	r2, [pc, #156]	; (800c744 <print_prep_task+0x678>)
 800c6a6:	4b28      	ldr	r3, [pc, #160]	; (800c748 <print_prep_task+0x67c>)
 800c6a8:	4614      	mov	r4, r2
 800c6aa:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6ac:	6020      	str	r0, [r4, #0]
 800c6ae:	6061      	str	r1, [r4, #4]
 800c6b0:	60a2      	str	r2, [r4, #8]
 800c6b2:	881b      	ldrh	r3, [r3, #0]
 800c6b4:	81a3      	strh	r3, [r4, #12]
 800c6b6:	4923      	ldr	r1, [pc, #140]	; (800c744 <print_prep_task+0x678>)
 800c6b8:	4824      	ldr	r0, [pc, #144]	; (800c74c <print_prep_task+0x680>)
 800c6ba:	f001 fed7 	bl	800e46c <strcat>
		}

		if (av_MOT_TEMP > 1900){
 800c6be:	4b24      	ldr	r3, [pc, #144]	; (800c750 <print_prep_task+0x684>)
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	f240 726c 	movw	r2, #1900	; 0x76c
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d90c      	bls.n	800c6e4 <print_prep_task+0x618>
			sprintf(buf_add, "* >50C on MOTOR"); strcat(buf, buf_add);
 800c6ca:	4a1e      	ldr	r2, [pc, #120]	; (800c744 <print_prep_task+0x678>)
 800c6cc:	4b21      	ldr	r3, [pc, #132]	; (800c754 <print_prep_task+0x688>)
 800c6ce:	4614      	mov	r4, r2
 800c6d0:	461d      	mov	r5, r3
 800c6d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c6d4:	6020      	str	r0, [r4, #0]
 800c6d6:	6061      	str	r1, [r4, #4]
 800c6d8:	60a2      	str	r2, [r4, #8]
 800c6da:	60e3      	str	r3, [r4, #12]
 800c6dc:	4919      	ldr	r1, [pc, #100]	; (800c744 <print_prep_task+0x678>)
 800c6de:	481b      	ldr	r0, [pc, #108]	; (800c74c <print_prep_task+0x680>)
 800c6e0:	f001 fec4 	bl	800e46c <strcat>
		}

		if (fast_STRAIN0 < 2170){
 800c6e4:	4b1c      	ldr	r3, [pc, #112]	; (800c758 <print_prep_task+0x68c>)
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	f640 0279 	movw	r2, #2169	; 0x879
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d816      	bhi.n	800c71e <print_prep_task+0x652>
			sprintf(buf_add, "* -100N force"); strcat(buf, buf_add);
 800c6f0:	4a14      	ldr	r2, [pc, #80]	; (800c744 <print_prep_task+0x678>)
 800c6f2:	4b1a      	ldr	r3, [pc, #104]	; (800c75c <print_prep_task+0x690>)
 800c6f4:	4614      	mov	r4, r2
 800c6f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6f8:	6020      	str	r0, [r4, #0]
 800c6fa:	6061      	str	r1, [r4, #4]
 800c6fc:	60a2      	str	r2, [r4, #8]
 800c6fe:	881b      	ldrh	r3, [r3, #0]
 800c700:	81a3      	strh	r3, [r4, #12]
 800c702:	4910      	ldr	r1, [pc, #64]	; (800c744 <print_prep_task+0x678>)
 800c704:	4811      	ldr	r0, [pc, #68]	; (800c74c <print_prep_task+0x680>)
 800c706:	f001 feb1 	bl	800e46c <strcat>
		}
		break;
 800c70a:	e008      	b.n	800c71e <print_prep_task+0x652>

	case 20:
		sprintf(buf_add, " \r\n"); strcat(buf, buf_add);
 800c70c:	4b0d      	ldr	r3, [pc, #52]	; (800c744 <print_prep_task+0x678>)
 800c70e:	4a14      	ldr	r2, [pc, #80]	; (800c760 <print_prep_task+0x694>)
 800c710:	6810      	ldr	r0, [r2, #0]
 800c712:	6018      	str	r0, [r3, #0]
 800c714:	490b      	ldr	r1, [pc, #44]	; (800c744 <print_prep_task+0x678>)
 800c716:	480d      	ldr	r0, [pc, #52]	; (800c74c <print_prep_task+0x680>)
 800c718:	f001 fea8 	bl	800e46c <strcat>
		break;
 800c71c:	e000      	b.n	800c720 <print_prep_task+0x654>
		break;
 800c71e:	bf00      	nop

	//2L //1ms = 1000000ns
#endif

#if DB_TIMING
	DB2L;
 800c720:	4b10      	ldr	r3, [pc, #64]	; (800c764 <print_prep_task+0x698>)
 800c722:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c726:	619a      	str	r2, [r3, #24]
	DB2H;
 800c728:	4b0e      	ldr	r3, [pc, #56]	; (800c764 <print_prep_task+0x698>)
 800c72a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c72e:	619a      	str	r2, [r3, #24]
	DB2L;
 800c730:	4b0c      	ldr	r3, [pc, #48]	; (800c764 <print_prep_task+0x698>)
 800c732:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c736:	619a      	str	r2, [r3, #24]
#endif

}
 800c738:	bf00      	nop
 800c73a:	371c      	adds	r7, #28
 800c73c:	46bd      	mov	sp, r7
 800c73e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c740:	2000027c 	.word	0x2000027c
 800c744:	20000d90 	.word	0x20000d90
 800c748:	080127b4 	.word	0x080127b4
 800c74c:	20001ab0 	.word	0x20001ab0
 800c750:	20000284 	.word	0x20000284
 800c754:	080127c4 	.word	0x080127c4
 800c758:	20000270 	.word	0x20000270
 800c75c:	080127d4 	.word	0x080127d4
 800c760:	080127e4 	.word	0x080127e4
 800c764:	40020c00 	.word	0x40020c00

0800c768 <print_task>:

void print_task(void){
 800c768:	b5b0      	push	{r4, r5, r7, lr}
 800c76a:	af00      	add	r7, sp, #0


	if (buf_msgs[0] != '\0'){
 800c76c:	4b11      	ldr	r3, [pc, #68]	; (800c7b4 <print_task+0x4c>)
 800c76e:	781b      	ldrb	r3, [r3, #0]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d006      	beq.n	800c782 <print_task+0x1a>
		strcat(buf, buf_msgs);
 800c774:	490f      	ldr	r1, [pc, #60]	; (800c7b4 <print_task+0x4c>)
 800c776:	4810      	ldr	r0, [pc, #64]	; (800c7b8 <print_task+0x50>)
 800c778:	f001 fe78 	bl	800e46c <strcat>
		buf_msgs[0] = '\0';
 800c77c:	4b0d      	ldr	r3, [pc, #52]	; (800c7b4 <print_task+0x4c>)
 800c77e:	2200      	movs	r2, #0
 800c780:	701a      	strb	r2, [r3, #0]

	//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5



	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800c782:	4b0e      	ldr	r3, [pc, #56]	; (800c7bc <print_task+0x54>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	695a      	ldr	r2, [r3, #20]
 800c788:	4b0c      	ldr	r3, [pc, #48]	; (800c7bc <print_task+0x54>)
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c790:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800c792:	4c09      	ldr	r4, [pc, #36]	; (800c7b8 <print_task+0x50>)
 800c794:	4b09      	ldr	r3, [pc, #36]	; (800c7bc <print_task+0x54>)
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	3304      	adds	r3, #4
 800c79a:	461d      	mov	r5, r3
 800c79c:	4806      	ldr	r0, [pc, #24]	; (800c7b8 <print_task+0x50>)
 800c79e:	f7f3 fd17 	bl	80001d0 <strlen>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	462a      	mov	r2, r5
 800c7a6:	4621      	mov	r1, r4
 800c7a8:	4805      	ldr	r0, [pc, #20]	; (800c7c0 <print_task+0x58>)
 800c7aa:	f7f6 fad3 	bl	8002d54 <HAL_DMA_Start_IT>


}
 800c7ae:	bf00      	nop
 800c7b0:	bdb0      	pop	{r4, r5, r7, pc}
 800c7b2:	bf00      	nop
 800c7b4:	20001a4c 	.word	0x20001a4c
 800c7b8:	20001ab0 	.word	0x20001ab0
 800c7bc:	200006f0 	.word	0x200006f0
 800c7c0:	20000c94 	.word	0x20000c94

0800c7c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c7c8:	bf00      	nop
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d0:	4770      	bx	lr
	...

0800c7d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c7d4:	b480      	push	{r7}
 800c7d6:	b083      	sub	sp, #12
 800c7d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c7da:	2300      	movs	r3, #0
 800c7dc:	607b      	str	r3, [r7, #4]
 800c7de:	4b10      	ldr	r3, [pc, #64]	; (800c820 <HAL_MspInit+0x4c>)
 800c7e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7e2:	4a0f      	ldr	r2, [pc, #60]	; (800c820 <HAL_MspInit+0x4c>)
 800c7e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c7e8:	6453      	str	r3, [r2, #68]	; 0x44
 800c7ea:	4b0d      	ldr	r3, [pc, #52]	; (800c820 <HAL_MspInit+0x4c>)
 800c7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c7f2:	607b      	str	r3, [r7, #4]
 800c7f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	603b      	str	r3, [r7, #0]
 800c7fa:	4b09      	ldr	r3, [pc, #36]	; (800c820 <HAL_MspInit+0x4c>)
 800c7fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fe:	4a08      	ldr	r2, [pc, #32]	; (800c820 <HAL_MspInit+0x4c>)
 800c800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c804:	6413      	str	r3, [r2, #64]	; 0x40
 800c806:	4b06      	ldr	r3, [pc, #24]	; (800c820 <HAL_MspInit+0x4c>)
 800c808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c80e:	603b      	str	r3, [r7, #0]
 800c810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c812:	bf00      	nop
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr
 800c81e:	bf00      	nop
 800c820:	40023800 	.word	0x40023800

0800c824 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b092      	sub	sp, #72	; 0x48
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c82c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c830:	2200      	movs	r2, #0
 800c832:	601a      	str	r2, [r3, #0]
 800c834:	605a      	str	r2, [r3, #4]
 800c836:	609a      	str	r2, [r3, #8]
 800c838:	60da      	str	r2, [r3, #12]
 800c83a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	4a9b      	ldr	r2, [pc, #620]	; (800cab0 <HAL_ADC_MspInit+0x28c>)
 800c842:	4293      	cmp	r3, r2
 800c844:	f040 8096 	bne.w	800c974 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c848:	2300      	movs	r3, #0
 800c84a:	633b      	str	r3, [r7, #48]	; 0x30
 800c84c:	4b99      	ldr	r3, [pc, #612]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c84e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c850:	4a98      	ldr	r2, [pc, #608]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c856:	6453      	str	r3, [r2, #68]	; 0x44
 800c858:	4b96      	ldr	r3, [pc, #600]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c85a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c85c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c860:	633b      	str	r3, [r7, #48]	; 0x30
 800c862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c864:	2300      	movs	r3, #0
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c868:	4b92      	ldr	r3, [pc, #584]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c86a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c86c:	4a91      	ldr	r2, [pc, #580]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c86e:	f043 0304 	orr.w	r3, r3, #4
 800c872:	6313      	str	r3, [r2, #48]	; 0x30
 800c874:	4b8f      	ldr	r3, [pc, #572]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c878:	f003 0304 	and.w	r3, r3, #4
 800c87c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c87e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c880:	2300      	movs	r3, #0
 800c882:	62bb      	str	r3, [r7, #40]	; 0x28
 800c884:	4b8b      	ldr	r3, [pc, #556]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c888:	4a8a      	ldr	r2, [pc, #552]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c88a:	f043 0301 	orr.w	r3, r3, #1
 800c88e:	6313      	str	r3, [r2, #48]	; 0x30
 800c890:	4b88      	ldr	r3, [pc, #544]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c894:	f003 0301 	and.w	r3, r3, #1
 800c898:	62bb      	str	r3, [r7, #40]	; 0x28
 800c89a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c89c:	2300      	movs	r3, #0
 800c89e:	627b      	str	r3, [r7, #36]	; 0x24
 800c8a0:	4b84      	ldr	r3, [pc, #528]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c8a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a4:	4a83      	ldr	r2, [pc, #524]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c8a6:	f043 0302 	orr.w	r3, r3, #2
 800c8aa:	6313      	str	r3, [r2, #48]	; 0x30
 800c8ac:	4b81      	ldr	r3, [pc, #516]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b0:	f003 0302 	and.w	r3, r3, #2
 800c8b4:	627b      	str	r3, [r7, #36]	; 0x24
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c8b8:	233e      	movs	r3, #62	; 0x3e
 800c8ba:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c8c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8c8:	4619      	mov	r1, r3
 800c8ca:	487b      	ldr	r0, [pc, #492]	; (800cab8 <HAL_ADC_MspInit+0x294>)
 800c8cc:	f7f6 fd78 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c8d0:	233e      	movs	r3, #62	; 0x3e
 800c8d2:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8d4:	2303      	movs	r3, #3
 800c8d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c8dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	4876      	ldr	r0, [pc, #472]	; (800cabc <HAL_ADC_MspInit+0x298>)
 800c8e4:	f7f6 fd6c 	bl	80033c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c8e8:	2301      	movs	r3, #1
 800c8ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c8ec:	2303      	movs	r3, #3
 800c8ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c8f8:	4619      	mov	r1, r3
 800c8fa:	4871      	ldr	r0, [pc, #452]	; (800cac0 <HAL_ADC_MspInit+0x29c>)
 800c8fc:	f7f6 fd60 	bl	80033c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c900:	4b70      	ldr	r3, [pc, #448]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c902:	4a71      	ldr	r2, [pc, #452]	; (800cac8 <HAL_ADC_MspInit+0x2a4>)
 800c904:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c906:	4b6f      	ldr	r3, [pc, #444]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c908:	2200      	movs	r2, #0
 800c90a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c90c:	4b6d      	ldr	r3, [pc, #436]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c90e:	2200      	movs	r2, #0
 800c910:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c912:	4b6c      	ldr	r3, [pc, #432]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c914:	2200      	movs	r2, #0
 800c916:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c918:	4b6a      	ldr	r3, [pc, #424]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c91a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c91e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c920:	4b68      	ldr	r3, [pc, #416]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c922:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c926:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c928:	4b66      	ldr	r3, [pc, #408]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c92a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c92e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c930:	4b64      	ldr	r3, [pc, #400]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c932:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c936:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800c938:	4b62      	ldr	r3, [pc, #392]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c93a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c93e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c940:	4b60      	ldr	r3, [pc, #384]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c942:	2200      	movs	r2, #0
 800c944:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c946:	485f      	ldr	r0, [pc, #380]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c948:	f7f6 f956 	bl	8002bf8 <HAL_DMA_Init>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800c952:	f7ff ff37 	bl	800c7c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	4a5a      	ldr	r2, [pc, #360]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c95a:	639a      	str	r2, [r3, #56]	; 0x38
 800c95c:	4a59      	ldr	r2, [pc, #356]	; (800cac4 <HAL_ADC_MspInit+0x2a0>)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c962:	2200      	movs	r2, #0
 800c964:	2100      	movs	r1, #0
 800c966:	2012      	movs	r0, #18
 800c968:	f7f6 f90f 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c96c:	2012      	movs	r0, #18
 800c96e:	f7f6 f928 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c972:	e132      	b.n	800cbda <HAL_ADC_MspInit+0x3b6>
  else if(hadc->Instance==ADC2)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	4a54      	ldr	r2, [pc, #336]	; (800cacc <HAL_ADC_MspInit+0x2a8>)
 800c97a:	4293      	cmp	r3, r2
 800c97c:	f040 80ac 	bne.w	800cad8 <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c980:	2300      	movs	r3, #0
 800c982:	623b      	str	r3, [r7, #32]
 800c984:	4b4b      	ldr	r3, [pc, #300]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c988:	4a4a      	ldr	r2, [pc, #296]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c98a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c98e:	6453      	str	r3, [r2, #68]	; 0x44
 800c990:	4b48      	ldr	r3, [pc, #288]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c994:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c998:	623b      	str	r3, [r7, #32]
 800c99a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c99c:	2300      	movs	r3, #0
 800c99e:	61fb      	str	r3, [r7, #28]
 800c9a0:	4b44      	ldr	r3, [pc, #272]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9a4:	4a43      	ldr	r2, [pc, #268]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9a6:	f043 0304 	orr.w	r3, r3, #4
 800c9aa:	6313      	str	r3, [r2, #48]	; 0x30
 800c9ac:	4b41      	ldr	r3, [pc, #260]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9b0:	f003 0304 	and.w	r3, r3, #4
 800c9b4:	61fb      	str	r3, [r7, #28]
 800c9b6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	61bb      	str	r3, [r7, #24]
 800c9bc:	4b3d      	ldr	r3, [pc, #244]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c0:	4a3c      	ldr	r2, [pc, #240]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9c2:	f043 0301 	orr.w	r3, r3, #1
 800c9c6:	6313      	str	r3, [r2, #48]	; 0x30
 800c9c8:	4b3a      	ldr	r3, [pc, #232]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9cc:	f003 0301 	and.w	r3, r3, #1
 800c9d0:	61bb      	str	r3, [r7, #24]
 800c9d2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9d4:	2300      	movs	r3, #0
 800c9d6:	617b      	str	r3, [r7, #20]
 800c9d8:	4b36      	ldr	r3, [pc, #216]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9dc:	4a35      	ldr	r2, [pc, #212]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9de:	f043 0302 	orr.w	r3, r3, #2
 800c9e2:	6313      	str	r3, [r2, #48]	; 0x30
 800c9e4:	4b33      	ldr	r3, [pc, #204]	; (800cab4 <HAL_ADC_MspInit+0x290>)
 800c9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9e8:	f003 0302 	and.w	r3, r3, #2
 800c9ec:	617b      	str	r3, [r7, #20]
 800c9ee:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c9f0:	233e      	movs	r3, #62	; 0x3e
 800c9f2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c9f4:	2303      	movs	r3, #3
 800c9f6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c9fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ca00:	4619      	mov	r1, r3
 800ca02:	482d      	ldr	r0, [pc, #180]	; (800cab8 <HAL_ADC_MspInit+0x294>)
 800ca04:	f7f6 fcdc 	bl	80033c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800ca08:	2316      	movs	r3, #22
 800ca0a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca10:	2300      	movs	r3, #0
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ca14:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4828      	ldr	r0, [pc, #160]	; (800cabc <HAL_ADC_MspInit+0x298>)
 800ca1c:	f7f6 fcd0 	bl	80033c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800ca20:	2301      	movs	r3, #1
 800ca22:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800ca24:	2303      	movs	r3, #3
 800ca26:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ca30:	4619      	mov	r1, r3
 800ca32:	4823      	ldr	r0, [pc, #140]	; (800cac0 <HAL_ADC_MspInit+0x29c>)
 800ca34:	f7f6 fcc4 	bl	80033c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800ca38:	4b25      	ldr	r3, [pc, #148]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca3a:	4a26      	ldr	r2, [pc, #152]	; (800cad4 <HAL_ADC_MspInit+0x2b0>)
 800ca3c:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800ca3e:	4b24      	ldr	r3, [pc, #144]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800ca44:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ca46:	4b22      	ldr	r3, [pc, #136]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca48:	2200      	movs	r2, #0
 800ca4a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800ca4c:	4b20      	ldr	r3, [pc, #128]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca4e:	2200      	movs	r2, #0
 800ca50:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800ca52:	4b1f      	ldr	r3, [pc, #124]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ca58:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800ca5a:	4b1d      	ldr	r3, [pc, #116]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca60:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800ca62:	4b1b      	ldr	r3, [pc, #108]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca64:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ca68:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800ca6a:	4b19      	ldr	r3, [pc, #100]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ca70:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800ca72:	4b17      	ldr	r3, [pc, #92]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800ca78:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ca7a:	4b15      	ldr	r3, [pc, #84]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800ca80:	4813      	ldr	r0, [pc, #76]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca82:	f7f6 f8b9 	bl	8002bf8 <HAL_DMA_Init>
 800ca86:	4603      	mov	r3, r0
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d001      	beq.n	800ca90 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 800ca8c:	f7ff fe9a 	bl	800c7c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	4a0f      	ldr	r2, [pc, #60]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca94:	639a      	str	r2, [r3, #56]	; 0x38
 800ca96:	4a0e      	ldr	r2, [pc, #56]	; (800cad0 <HAL_ADC_MspInit+0x2ac>)
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	2100      	movs	r1, #0
 800caa0:	2012      	movs	r0, #18
 800caa2:	f7f6 f872 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800caa6:	2012      	movs	r0, #18
 800caa8:	f7f6 f88b 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 800caac:	e095      	b.n	800cbda <HAL_ADC_MspInit+0x3b6>
 800caae:	bf00      	nop
 800cab0:	40012000 	.word	0x40012000
 800cab4:	40023800 	.word	0x40023800
 800cab8:	40020800 	.word	0x40020800
 800cabc:	40020000 	.word	0x40020000
 800cac0:	40020400 	.word	0x40020400
 800cac4:	20000f2c 	.word	0x20000f2c
 800cac8:	40026410 	.word	0x40026410
 800cacc:	40012100 	.word	0x40012100
 800cad0:	20001ca8 	.word	0x20001ca8
 800cad4:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a41      	ldr	r2, [pc, #260]	; (800cbe4 <HAL_ADC_MspInit+0x3c0>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d17b      	bne.n	800cbda <HAL_ADC_MspInit+0x3b6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800cae2:	2300      	movs	r3, #0
 800cae4:	613b      	str	r3, [r7, #16]
 800cae6:	4b40      	ldr	r3, [pc, #256]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800cae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caea:	4a3f      	ldr	r2, [pc, #252]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800caec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800caf0:	6453      	str	r3, [r2, #68]	; 0x44
 800caf2:	4b3d      	ldr	r3, [pc, #244]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800caf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800caf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cafa:	613b      	str	r3, [r7, #16]
 800cafc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cafe:	2300      	movs	r3, #0
 800cb00:	60fb      	str	r3, [r7, #12]
 800cb02:	4b39      	ldr	r3, [pc, #228]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800cb04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb06:	4a38      	ldr	r2, [pc, #224]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800cb08:	f043 0304 	orr.w	r3, r3, #4
 800cb0c:	6313      	str	r3, [r2, #48]	; 0x30
 800cb0e:	4b36      	ldr	r3, [pc, #216]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800cb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb12:	f003 0304 	and.w	r3, r3, #4
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	60bb      	str	r3, [r7, #8]
 800cb1e:	4b32      	ldr	r3, [pc, #200]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800cb20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb22:	4a31      	ldr	r2, [pc, #196]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800cb24:	f043 0301 	orr.w	r3, r3, #1
 800cb28:	6313      	str	r3, [r2, #48]	; 0x30
 800cb2a:	4b2f      	ldr	r3, [pc, #188]	; (800cbe8 <HAL_ADC_MspInit+0x3c4>)
 800cb2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2e:	f003 0301 	and.w	r3, r3, #1
 800cb32:	60bb      	str	r3, [r7, #8]
 800cb34:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cb36:	2308      	movs	r3, #8
 800cb38:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cb3a:	2303      	movs	r3, #3
 800cb3c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb3e:	2300      	movs	r3, #0
 800cb40:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cb42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cb46:	4619      	mov	r1, r3
 800cb48:	4828      	ldr	r0, [pc, #160]	; (800cbec <HAL_ADC_MspInit+0x3c8>)
 800cb4a:	f7f6 fc39 	bl	80033c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800cb4e:	2308      	movs	r3, #8
 800cb50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800cb52:	2303      	movs	r3, #3
 800cb54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb56:	2300      	movs	r3, #0
 800cb58:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cb5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cb5e:	4619      	mov	r1, r3
 800cb60:	4823      	ldr	r0, [pc, #140]	; (800cbf0 <HAL_ADC_MspInit+0x3cc>)
 800cb62:	f7f6 fc2d 	bl	80033c0 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800cb66:	4b23      	ldr	r3, [pc, #140]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cb68:	4a23      	ldr	r2, [pc, #140]	; (800cbf8 <HAL_ADC_MspInit+0x3d4>)
 800cb6a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800cb6c:	4b21      	ldr	r3, [pc, #132]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cb6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800cb72:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800cb74:	4b1f      	ldr	r3, [pc, #124]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800cb7a:	4b1e      	ldr	r3, [pc, #120]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800cb80:	4b1c      	ldr	r3, [pc, #112]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cb82:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cb86:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800cb88:	4b1a      	ldr	r3, [pc, #104]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cb8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb8e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800cb90:	4b18      	ldr	r3, [pc, #96]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cb92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800cb96:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800cb98:	4b16      	ldr	r3, [pc, #88]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cb9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cb9e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800cba0:	4b14      	ldr	r3, [pc, #80]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cba2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800cba6:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cba8:	4b12      	ldr	r3, [pc, #72]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cbaa:	2200      	movs	r2, #0
 800cbac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800cbae:	4811      	ldr	r0, [pc, #68]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cbb0:	f7f6 f822 	bl	8002bf8 <HAL_DMA_Init>
 800cbb4:	4603      	mov	r3, r0
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d001      	beq.n	800cbbe <HAL_ADC_MspInit+0x39a>
      Error_Handler();
 800cbba:	f7ff fe03 	bl	800c7c4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	4a0c      	ldr	r2, [pc, #48]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cbc2:	639a      	str	r2, [r3, #56]	; 0x38
 800cbc4:	4a0b      	ldr	r2, [pc, #44]	; (800cbf4 <HAL_ADC_MspInit+0x3d0>)
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800cbca:	2200      	movs	r2, #0
 800cbcc:	2100      	movs	r1, #0
 800cbce:	2012      	movs	r0, #18
 800cbd0:	f7f5 ffdb 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800cbd4:	2012      	movs	r0, #18
 800cbd6:	f7f5 fff4 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 800cbda:	bf00      	nop
 800cbdc:	3748      	adds	r7, #72	; 0x48
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	40012200 	.word	0x40012200
 800cbe8:	40023800 	.word	0x40023800
 800cbec:	40020800 	.word	0x40020800
 800cbf0:	40020000 	.word	0x40020000
 800cbf4:	20000c34 	.word	0x20000c34
 800cbf8:	40026428 	.word	0x40026428

0800cbfc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b08a      	sub	sp, #40	; 0x28
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc04:	f107 0314 	add.w	r3, r7, #20
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]
 800cc0c:	605a      	str	r2, [r3, #4]
 800cc0e:	609a      	str	r2, [r3, #8]
 800cc10:	60da      	str	r2, [r3, #12]
 800cc12:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	4a1d      	ldr	r2, [pc, #116]	; (800cc90 <HAL_CAN_MspInit+0x94>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d133      	bne.n	800cc86 <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800cc1e:	2300      	movs	r3, #0
 800cc20:	613b      	str	r3, [r7, #16]
 800cc22:	4b1c      	ldr	r3, [pc, #112]	; (800cc94 <HAL_CAN_MspInit+0x98>)
 800cc24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc26:	4a1b      	ldr	r2, [pc, #108]	; (800cc94 <HAL_CAN_MspInit+0x98>)
 800cc28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800cc2c:	6413      	str	r3, [r2, #64]	; 0x40
 800cc2e:	4b19      	ldr	r3, [pc, #100]	; (800cc94 <HAL_CAN_MspInit+0x98>)
 800cc30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc36:	613b      	str	r3, [r7, #16]
 800cc38:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	60fb      	str	r3, [r7, #12]
 800cc3e:	4b15      	ldr	r3, [pc, #84]	; (800cc94 <HAL_CAN_MspInit+0x98>)
 800cc40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc42:	4a14      	ldr	r2, [pc, #80]	; (800cc94 <HAL_CAN_MspInit+0x98>)
 800cc44:	f043 0308 	orr.w	r3, r3, #8
 800cc48:	6313      	str	r3, [r2, #48]	; 0x30
 800cc4a:	4b12      	ldr	r3, [pc, #72]	; (800cc94 <HAL_CAN_MspInit+0x98>)
 800cc4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc4e:	f003 0308 	and.w	r3, r3, #8
 800cc52:	60fb      	str	r3, [r7, #12]
 800cc54:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800cc56:	2303      	movs	r3, #3
 800cc58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc5a:	2302      	movs	r3, #2
 800cc5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cc62:	2303      	movs	r3, #3
 800cc64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800cc66:	2309      	movs	r3, #9
 800cc68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cc6a:	f107 0314 	add.w	r3, r7, #20
 800cc6e:	4619      	mov	r1, r3
 800cc70:	4809      	ldr	r0, [pc, #36]	; (800cc98 <HAL_CAN_MspInit+0x9c>)
 800cc72:	f7f6 fba5 	bl	80033c0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800cc76:	2200      	movs	r2, #0
 800cc78:	2100      	movs	r1, #0
 800cc7a:	2014      	movs	r0, #20
 800cc7c:	f7f5 ff85 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800cc80:	2014      	movs	r0, #20
 800cc82:	f7f5 ff9e 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800cc86:	bf00      	nop
 800cc88:	3728      	adds	r7, #40	; 0x28
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	40006400 	.word	0x40006400
 800cc94:	40023800 	.word	0x40023800
 800cc98:	40020c00 	.word	0x40020c00

0800cc9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b08c      	sub	sp, #48	; 0x30
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cca4:	f107 031c 	add.w	r3, r7, #28
 800cca8:	2200      	movs	r2, #0
 800ccaa:	601a      	str	r2, [r3, #0]
 800ccac:	605a      	str	r2, [r3, #4]
 800ccae:	609a      	str	r2, [r3, #8]
 800ccb0:	60da      	str	r2, [r3, #12]
 800ccb2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a32      	ldr	r2, [pc, #200]	; (800cd84 <HAL_I2C_MspInit+0xe8>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d12c      	bne.n	800cd18 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	61bb      	str	r3, [r7, #24]
 800ccc2:	4b31      	ldr	r3, [pc, #196]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800ccc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccc6:	4a30      	ldr	r2, [pc, #192]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800ccc8:	f043 0302 	orr.w	r3, r3, #2
 800cccc:	6313      	str	r3, [r2, #48]	; 0x30
 800ccce:	4b2e      	ldr	r3, [pc, #184]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800ccd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccd2:	f003 0302 	and.w	r3, r3, #2
 800ccd6:	61bb      	str	r3, [r7, #24]
 800ccd8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800ccda:	23c0      	movs	r3, #192	; 0xc0
 800ccdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800ccde:	2312      	movs	r3, #18
 800cce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cce2:	2301      	movs	r3, #1
 800cce4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cce6:	2303      	movs	r3, #3
 800cce8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800ccea:	2304      	movs	r3, #4
 800ccec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ccee:	f107 031c 	add.w	r3, r7, #28
 800ccf2:	4619      	mov	r1, r3
 800ccf4:	4825      	ldr	r0, [pc, #148]	; (800cd8c <HAL_I2C_MspInit+0xf0>)
 800ccf6:	f7f6 fb63 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	617b      	str	r3, [r7, #20]
 800ccfe:	4b22      	ldr	r3, [pc, #136]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd02:	4a21      	ldr	r2, [pc, #132]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cd08:	6413      	str	r3, [r2, #64]	; 0x40
 800cd0a:	4b1f      	ldr	r3, [pc, #124]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cd12:	617b      	str	r3, [r7, #20]
 800cd14:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800cd16:	e031      	b.n	800cd7c <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a1c      	ldr	r2, [pc, #112]	; (800cd90 <HAL_I2C_MspInit+0xf4>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d12c      	bne.n	800cd7c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cd22:	2300      	movs	r3, #0
 800cd24:	613b      	str	r3, [r7, #16]
 800cd26:	4b18      	ldr	r3, [pc, #96]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd2a:	4a17      	ldr	r2, [pc, #92]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd2c:	f043 0302 	orr.w	r3, r3, #2
 800cd30:	6313      	str	r3, [r2, #48]	; 0x30
 800cd32:	4b15      	ldr	r3, [pc, #84]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd36:	f003 0302 	and.w	r3, r3, #2
 800cd3a:	613b      	str	r3, [r7, #16]
 800cd3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800cd3e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800cd42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cd44:	2312      	movs	r3, #18
 800cd46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd48:	2301      	movs	r3, #1
 800cd4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800cd50:	2304      	movs	r3, #4
 800cd52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cd54:	f107 031c 	add.w	r3, r7, #28
 800cd58:	4619      	mov	r1, r3
 800cd5a:	480c      	ldr	r0, [pc, #48]	; (800cd8c <HAL_I2C_MspInit+0xf0>)
 800cd5c:	f7f6 fb30 	bl	80033c0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cd60:	2300      	movs	r3, #0
 800cd62:	60fb      	str	r3, [r7, #12]
 800cd64:	4b08      	ldr	r3, [pc, #32]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd68:	4a07      	ldr	r2, [pc, #28]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd6a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cd6e:	6413      	str	r3, [r2, #64]	; 0x40
 800cd70:	4b05      	ldr	r3, [pc, #20]	; (800cd88 <HAL_I2C_MspInit+0xec>)
 800cd72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cd78:	60fb      	str	r3, [r7, #12]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
}
 800cd7c:	bf00      	nop
 800cd7e:	3730      	adds	r7, #48	; 0x30
 800cd80:	46bd      	mov	sp, r7
 800cd82:	bd80      	pop	{r7, pc}
 800cd84:	40005400 	.word	0x40005400
 800cd88:	40023800 	.word	0x40023800
 800cd8c:	40020400 	.word	0x40020400
 800cd90:	40005800 	.word	0x40005800

0800cd94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800cd94:	b480      	push	{r7}
 800cd96:	b083      	sub	sp, #12
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	4a05      	ldr	r2, [pc, #20]	; (800cdb8 <HAL_RTC_MspInit+0x24>)
 800cda2:	4293      	cmp	r3, r2
 800cda4:	d102      	bne.n	800cdac <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800cda6:	4b05      	ldr	r3, [pc, #20]	; (800cdbc <HAL_RTC_MspInit+0x28>)
 800cda8:	2201      	movs	r2, #1
 800cdaa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800cdac:	bf00      	nop
 800cdae:	370c      	adds	r7, #12
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb6:	4770      	bx	lr
 800cdb8:	40002800 	.word	0x40002800
 800cdbc:	42470e3c 	.word	0x42470e3c

0800cdc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b08a      	sub	sp, #40	; 0x28
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cdc8:	f107 0314 	add.w	r3, r7, #20
 800cdcc:	2200      	movs	r2, #0
 800cdce:	601a      	str	r2, [r3, #0]
 800cdd0:	605a      	str	r2, [r3, #4]
 800cdd2:	609a      	str	r2, [r3, #8]
 800cdd4:	60da      	str	r2, [r3, #12]
 800cdd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4a1d      	ldr	r2, [pc, #116]	; (800ce54 <HAL_SPI_MspInit+0x94>)
 800cdde:	4293      	cmp	r3, r2
 800cde0:	d134      	bne.n	800ce4c <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cde2:	2300      	movs	r3, #0
 800cde4:	613b      	str	r3, [r7, #16]
 800cde6:	4b1c      	ldr	r3, [pc, #112]	; (800ce58 <HAL_SPI_MspInit+0x98>)
 800cde8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdea:	4a1b      	ldr	r2, [pc, #108]	; (800ce58 <HAL_SPI_MspInit+0x98>)
 800cdec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cdf0:	6413      	str	r3, [r2, #64]	; 0x40
 800cdf2:	4b19      	ldr	r3, [pc, #100]	; (800ce58 <HAL_SPI_MspInit+0x98>)
 800cdf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cdfa:	613b      	str	r3, [r7, #16]
 800cdfc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cdfe:	2300      	movs	r3, #0
 800ce00:	60fb      	str	r3, [r7, #12]
 800ce02:	4b15      	ldr	r3, [pc, #84]	; (800ce58 <HAL_SPI_MspInit+0x98>)
 800ce04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce06:	4a14      	ldr	r2, [pc, #80]	; (800ce58 <HAL_SPI_MspInit+0x98>)
 800ce08:	f043 0302 	orr.w	r3, r3, #2
 800ce0c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce0e:	4b12      	ldr	r3, [pc, #72]	; (800ce58 <HAL_SPI_MspInit+0x98>)
 800ce10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce12:	f003 0302 	and.w	r3, r3, #2
 800ce16:	60fb      	str	r3, [r7, #12]
 800ce18:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800ce1a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800ce1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce20:	2302      	movs	r3, #2
 800ce22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce24:	2300      	movs	r3, #0
 800ce26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce28:	2303      	movs	r3, #3
 800ce2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ce2c:	2305      	movs	r3, #5
 800ce2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ce30:	f107 0314 	add.w	r3, r7, #20
 800ce34:	4619      	mov	r1, r3
 800ce36:	4809      	ldr	r0, [pc, #36]	; (800ce5c <HAL_SPI_MspInit+0x9c>)
 800ce38:	f7f6 fac2 	bl	80033c0 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2100      	movs	r1, #0
 800ce40:	2024      	movs	r0, #36	; 0x24
 800ce42:	f7f5 fea2 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800ce46:	2024      	movs	r0, #36	; 0x24
 800ce48:	f7f5 febb 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ce4c:	bf00      	nop
 800ce4e:	3728      	adds	r7, #40	; 0x28
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	40003800 	.word	0x40003800
 800ce58:	40023800 	.word	0x40023800
 800ce5c:	40020400 	.word	0x40020400

0800ce60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b090      	sub	sp, #64	; 0x40
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ce6c:	2200      	movs	r2, #0
 800ce6e:	601a      	str	r2, [r3, #0]
 800ce70:	605a      	str	r2, [r3, #4]
 800ce72:	609a      	str	r2, [r3, #8]
 800ce74:	60da      	str	r2, [r3, #12]
 800ce76:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	4a87      	ldr	r2, [pc, #540]	; (800d09c <HAL_TIM_Base_MspInit+0x23c>)
 800ce7e:	4293      	cmp	r3, r2
 800ce80:	d12e      	bne.n	800cee0 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ce82:	2300      	movs	r3, #0
 800ce84:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce86:	4b86      	ldr	r3, [pc, #536]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800ce88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce8a:	4a85      	ldr	r2, [pc, #532]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800ce8c:	f043 0301 	orr.w	r3, r3, #1
 800ce90:	6453      	str	r3, [r2, #68]	; 0x44
 800ce92:	4b83      	ldr	r3, [pc, #524]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800ce94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800ce9e:	2200      	movs	r2, #0
 800cea0:	2100      	movs	r1, #0
 800cea2:	2018      	movs	r0, #24
 800cea4:	f7f5 fe71 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800cea8:	2018      	movs	r0, #24
 800ceaa:	f7f5 fe8a 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800ceae:	2200      	movs	r2, #0
 800ceb0:	2100      	movs	r1, #0
 800ceb2:	2019      	movs	r0, #25
 800ceb4:	f7f5 fe69 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ceb8:	2019      	movs	r0, #25
 800ceba:	f7f5 fe82 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800cebe:	2200      	movs	r2, #0
 800cec0:	2100      	movs	r1, #0
 800cec2:	201a      	movs	r0, #26
 800cec4:	f7f5 fe61 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800cec8:	201a      	movs	r0, #26
 800ceca:	f7f5 fe7a 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800cece:	2200      	movs	r2, #0
 800ced0:	2100      	movs	r1, #0
 800ced2:	201b      	movs	r0, #27
 800ced4:	f7f5 fe59 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800ced8:	201b      	movs	r0, #27
 800ceda:	f7f5 fe72 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800cede:	e0d8      	b.n	800d092 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM2)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cee8:	d10e      	bne.n	800cf08 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ceea:	2300      	movs	r3, #0
 800ceec:	627b      	str	r3, [r7, #36]	; 0x24
 800ceee:	4b6c      	ldr	r3, [pc, #432]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cef2:	4a6b      	ldr	r2, [pc, #428]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cef4:	f043 0301 	orr.w	r3, r3, #1
 800cef8:	6413      	str	r3, [r2, #64]	; 0x40
 800cefa:	4b69      	ldr	r3, [pc, #420]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cefc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cefe:	f003 0301 	and.w	r3, r3, #1
 800cf02:	627b      	str	r3, [r7, #36]	; 0x24
 800cf04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cf06:	e0c4      	b.n	800d092 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM3)
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	4a65      	ldr	r2, [pc, #404]	; (800d0a4 <HAL_TIM_Base_MspInit+0x244>)
 800cf0e:	4293      	cmp	r3, r2
 800cf10:	d116      	bne.n	800cf40 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800cf12:	2300      	movs	r3, #0
 800cf14:	623b      	str	r3, [r7, #32]
 800cf16:	4b62      	ldr	r3, [pc, #392]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf1a:	4a61      	ldr	r2, [pc, #388]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf1c:	f043 0302 	orr.w	r3, r3, #2
 800cf20:	6413      	str	r3, [r2, #64]	; 0x40
 800cf22:	4b5f      	ldr	r3, [pc, #380]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf26:	f003 0302 	and.w	r3, r3, #2
 800cf2a:	623b      	str	r3, [r7, #32]
 800cf2c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800cf2e:	2200      	movs	r2, #0
 800cf30:	2100      	movs	r1, #0
 800cf32:	201d      	movs	r0, #29
 800cf34:	f7f5 fe29 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800cf38:	201d      	movs	r0, #29
 800cf3a:	f7f5 fe42 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 800cf3e:	e0a8      	b.n	800d092 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM5)
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	4a58      	ldr	r2, [pc, #352]	; (800d0a8 <HAL_TIM_Base_MspInit+0x248>)
 800cf46:	4293      	cmp	r3, r2
 800cf48:	d116      	bne.n	800cf78 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	61fb      	str	r3, [r7, #28]
 800cf4e:	4b54      	ldr	r3, [pc, #336]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf52:	4a53      	ldr	r2, [pc, #332]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf54:	f043 0308 	orr.w	r3, r3, #8
 800cf58:	6413      	str	r3, [r2, #64]	; 0x40
 800cf5a:	4b51      	ldr	r3, [pc, #324]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf5e:	f003 0308 	and.w	r3, r3, #8
 800cf62:	61fb      	str	r3, [r7, #28]
 800cf64:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800cf66:	2200      	movs	r2, #0
 800cf68:	2100      	movs	r1, #0
 800cf6a:	2032      	movs	r0, #50	; 0x32
 800cf6c:	f7f5 fe0d 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800cf70:	2032      	movs	r0, #50	; 0x32
 800cf72:	f7f5 fe26 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 800cf76:	e08c      	b.n	800d092 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM6)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	4a4b      	ldr	r2, [pc, #300]	; (800d0ac <HAL_TIM_Base_MspInit+0x24c>)
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d116      	bne.n	800cfb0 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800cf82:	2300      	movs	r3, #0
 800cf84:	61bb      	str	r3, [r7, #24]
 800cf86:	4b46      	ldr	r3, [pc, #280]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf8a:	4a45      	ldr	r2, [pc, #276]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf8c:	f043 0310 	orr.w	r3, r3, #16
 800cf90:	6413      	str	r3, [r2, #64]	; 0x40
 800cf92:	4b43      	ldr	r3, [pc, #268]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf96:	f003 0310 	and.w	r3, r3, #16
 800cf9a:	61bb      	str	r3, [r7, #24]
 800cf9c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800cf9e:	2200      	movs	r2, #0
 800cfa0:	2100      	movs	r1, #0
 800cfa2:	2036      	movs	r0, #54	; 0x36
 800cfa4:	f7f5 fdf1 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800cfa8:	2036      	movs	r0, #54	; 0x36
 800cfaa:	f7f5 fe0a 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 800cfae:	e070      	b.n	800d092 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM9)
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	4a3e      	ldr	r2, [pc, #248]	; (800d0b0 <HAL_TIM_Base_MspInit+0x250>)
 800cfb6:	4293      	cmp	r3, r2
 800cfb8:	d116      	bne.n	800cfe8 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800cfba:	2300      	movs	r3, #0
 800cfbc:	617b      	str	r3, [r7, #20]
 800cfbe:	4b38      	ldr	r3, [pc, #224]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cfc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfc2:	4a37      	ldr	r2, [pc, #220]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cfc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfc8:	6453      	str	r3, [r2, #68]	; 0x44
 800cfca:	4b35      	ldr	r3, [pc, #212]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cfcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfd2:	617b      	str	r3, [r7, #20]
 800cfd4:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	2100      	movs	r1, #0
 800cfda:	2018      	movs	r0, #24
 800cfdc:	f7f5 fdd5 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800cfe0:	2018      	movs	r0, #24
 800cfe2:	f7f5 fdee 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 800cfe6:	e054      	b.n	800d092 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM12)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a31      	ldr	r2, [pc, #196]	; (800d0b4 <HAL_TIM_Base_MspInit+0x254>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d116      	bne.n	800d020 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800cff2:	2300      	movs	r3, #0
 800cff4:	613b      	str	r3, [r7, #16]
 800cff6:	4b2a      	ldr	r3, [pc, #168]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cffa:	4a29      	ldr	r2, [pc, #164]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800cffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d000:	6413      	str	r3, [r2, #64]	; 0x40
 800d002:	4b27      	ldr	r3, [pc, #156]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800d004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d00a:	613b      	str	r3, [r7, #16]
 800d00c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800d00e:	2200      	movs	r2, #0
 800d010:	2100      	movs	r1, #0
 800d012:	202b      	movs	r0, #43	; 0x2b
 800d014:	f7f5 fdb9 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800d018:	202b      	movs	r0, #43	; 0x2b
 800d01a:	f7f5 fdd2 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 800d01e:	e038      	b.n	800d092 <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM13)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	4a24      	ldr	r2, [pc, #144]	; (800d0b8 <HAL_TIM_Base_MspInit+0x258>)
 800d026:	4293      	cmp	r3, r2
 800d028:	d133      	bne.n	800d092 <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800d02a:	2300      	movs	r3, #0
 800d02c:	60fb      	str	r3, [r7, #12]
 800d02e:	4b1c      	ldr	r3, [pc, #112]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800d030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d032:	4a1b      	ldr	r2, [pc, #108]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800d034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d038:	6413      	str	r3, [r2, #64]	; 0x40
 800d03a:	4b19      	ldr	r3, [pc, #100]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800d03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d03e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d042:	60fb      	str	r3, [r7, #12]
 800d044:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d046:	2300      	movs	r3, #0
 800d048:	60bb      	str	r3, [r7, #8]
 800d04a:	4b15      	ldr	r3, [pc, #84]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800d04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d04e:	4a14      	ldr	r2, [pc, #80]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800d050:	f043 0301 	orr.w	r3, r3, #1
 800d054:	6313      	str	r3, [r2, #48]	; 0x30
 800d056:	4b12      	ldr	r3, [pc, #72]	; (800d0a0 <HAL_TIM_Base_MspInit+0x240>)
 800d058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05a:	f003 0301 	and.w	r3, r3, #1
 800d05e:	60bb      	str	r3, [r7, #8]
 800d060:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800d062:	2340      	movs	r3, #64	; 0x40
 800d064:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d066:	2302      	movs	r3, #2
 800d068:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d06a:	2300      	movs	r3, #0
 800d06c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d06e:	2300      	movs	r3, #0
 800d070:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800d072:	2309      	movs	r3, #9
 800d074:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d076:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800d07a:	4619      	mov	r1, r3
 800d07c:	480f      	ldr	r0, [pc, #60]	; (800d0bc <HAL_TIM_Base_MspInit+0x25c>)
 800d07e:	f7f6 f99f 	bl	80033c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800d082:	2200      	movs	r2, #0
 800d084:	2100      	movs	r1, #0
 800d086:	202c      	movs	r0, #44	; 0x2c
 800d088:	f7f5 fd7f 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d08c:	202c      	movs	r0, #44	; 0x2c
 800d08e:	f7f5 fd98 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
}
 800d092:	bf00      	nop
 800d094:	3740      	adds	r7, #64	; 0x40
 800d096:	46bd      	mov	sp, r7
 800d098:	bd80      	pop	{r7, pc}
 800d09a:	bf00      	nop
 800d09c:	40010000 	.word	0x40010000
 800d0a0:	40023800 	.word	0x40023800
 800d0a4:	40000400 	.word	0x40000400
 800d0a8:	40000c00 	.word	0x40000c00
 800d0ac:	40001000 	.word	0x40001000
 800d0b0:	40014000 	.word	0x40014000
 800d0b4:	40001800 	.word	0x40001800
 800d0b8:	40001c00 	.word	0x40001c00
 800d0bc:	40020000 	.word	0x40020000

0800d0c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b08a      	sub	sp, #40	; 0x28
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d0c8:	f107 0314 	add.w	r3, r7, #20
 800d0cc:	2200      	movs	r2, #0
 800d0ce:	601a      	str	r2, [r3, #0]
 800d0d0:	605a      	str	r2, [r3, #4]
 800d0d2:	609a      	str	r2, [r3, #8]
 800d0d4:	60da      	str	r2, [r3, #12]
 800d0d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a29      	ldr	r2, [pc, #164]	; (800d184 <HAL_TIM_Encoder_MspInit+0xc4>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d14b      	bne.n	800d17a <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	613b      	str	r3, [r7, #16]
 800d0e6:	4b28      	ldr	r3, [pc, #160]	; (800d188 <HAL_TIM_Encoder_MspInit+0xc8>)
 800d0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0ea:	4a27      	ldr	r2, [pc, #156]	; (800d188 <HAL_TIM_Encoder_MspInit+0xc8>)
 800d0ec:	f043 0302 	orr.w	r3, r3, #2
 800d0f0:	6453      	str	r3, [r2, #68]	; 0x44
 800d0f2:	4b25      	ldr	r3, [pc, #148]	; (800d188 <HAL_TIM_Encoder_MspInit+0xc8>)
 800d0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0f6:	f003 0302 	and.w	r3, r3, #2
 800d0fa:	613b      	str	r3, [r7, #16]
 800d0fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d0fe:	2300      	movs	r3, #0
 800d100:	60fb      	str	r3, [r7, #12]
 800d102:	4b21      	ldr	r3, [pc, #132]	; (800d188 <HAL_TIM_Encoder_MspInit+0xc8>)
 800d104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d106:	4a20      	ldr	r2, [pc, #128]	; (800d188 <HAL_TIM_Encoder_MspInit+0xc8>)
 800d108:	f043 0304 	orr.w	r3, r3, #4
 800d10c:	6313      	str	r3, [r2, #48]	; 0x30
 800d10e:	4b1e      	ldr	r3, [pc, #120]	; (800d188 <HAL_TIM_Encoder_MspInit+0xc8>)
 800d110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d112:	f003 0304 	and.w	r3, r3, #4
 800d116:	60fb      	str	r3, [r7, #12]
 800d118:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800d11a:	23c0      	movs	r3, #192	; 0xc0
 800d11c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d11e:	2302      	movs	r3, #2
 800d120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d122:	2300      	movs	r3, #0
 800d124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d126:	2300      	movs	r3, #0
 800d128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800d12a:	2303      	movs	r3, #3
 800d12c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d12e:	f107 0314 	add.w	r3, r7, #20
 800d132:	4619      	mov	r1, r3
 800d134:	4815      	ldr	r0, [pc, #84]	; (800d18c <HAL_TIM_Encoder_MspInit+0xcc>)
 800d136:	f7f6 f943 	bl	80033c0 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800d13a:	2200      	movs	r2, #0
 800d13c:	2100      	movs	r1, #0
 800d13e:	202b      	movs	r0, #43	; 0x2b
 800d140:	f7f5 fd23 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800d144:	202b      	movs	r0, #43	; 0x2b
 800d146:	f7f5 fd3c 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800d14a:	2200      	movs	r2, #0
 800d14c:	2100      	movs	r1, #0
 800d14e:	202c      	movs	r0, #44	; 0x2c
 800d150:	f7f5 fd1b 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800d154:	202c      	movs	r0, #44	; 0x2c
 800d156:	f7f5 fd34 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800d15a:	2200      	movs	r2, #0
 800d15c:	2100      	movs	r1, #0
 800d15e:	202d      	movs	r0, #45	; 0x2d
 800d160:	f7f5 fd13 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800d164:	202d      	movs	r0, #45	; 0x2d
 800d166:	f7f5 fd2c 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800d16a:	2200      	movs	r2, #0
 800d16c:	2100      	movs	r1, #0
 800d16e:	202e      	movs	r0, #46	; 0x2e
 800d170:	f7f5 fd0b 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800d174:	202e      	movs	r0, #46	; 0x2e
 800d176:	f7f5 fd24 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800d17a:	bf00      	nop
 800d17c:	3728      	adds	r7, #40	; 0x28
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	40010400 	.word	0x40010400
 800d188:	40023800 	.word	0x40023800
 800d18c:	40020800 	.word	0x40020800

0800d190 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800d190:	b580      	push	{r7, lr}
 800d192:	b08a      	sub	sp, #40	; 0x28
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d198:	f107 0314 	add.w	r3, r7, #20
 800d19c:	2200      	movs	r2, #0
 800d19e:	601a      	str	r2, [r3, #0]
 800d1a0:	605a      	str	r2, [r3, #4]
 800d1a2:	609a      	str	r2, [r3, #8]
 800d1a4:	60da      	str	r2, [r3, #12]
 800d1a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	4a24      	ldr	r2, [pc, #144]	; (800d240 <HAL_TIM_MspPostInit+0xb0>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d11f      	bne.n	800d1f2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	613b      	str	r3, [r7, #16]
 800d1b6:	4b23      	ldr	r3, [pc, #140]	; (800d244 <HAL_TIM_MspPostInit+0xb4>)
 800d1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1ba:	4a22      	ldr	r2, [pc, #136]	; (800d244 <HAL_TIM_MspPostInit+0xb4>)
 800d1bc:	f043 0310 	orr.w	r3, r3, #16
 800d1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800d1c2:	4b20      	ldr	r3, [pc, #128]	; (800d244 <HAL_TIM_MspPostInit+0xb4>)
 800d1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1c6:	f003 0310 	and.w	r3, r3, #16
 800d1ca:	613b      	str	r3, [r7, #16]
 800d1cc:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800d1ce:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800d1d2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d1d4:	2302      	movs	r3, #2
 800d1d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d1e4:	f107 0314 	add.w	r3, r7, #20
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	4817      	ldr	r0, [pc, #92]	; (800d248 <HAL_TIM_MspPostInit+0xb8>)
 800d1ec:	f7f6 f8e8 	bl	80033c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800d1f0:	e022      	b.n	800d238 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	681b      	ldr	r3, [r3, #0]
 800d1f6:	4a15      	ldr	r2, [pc, #84]	; (800d24c <HAL_TIM_MspPostInit+0xbc>)
 800d1f8:	4293      	cmp	r3, r2
 800d1fa:	d11d      	bne.n	800d238 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	60fb      	str	r3, [r7, #12]
 800d200:	4b10      	ldr	r3, [pc, #64]	; (800d244 <HAL_TIM_MspPostInit+0xb4>)
 800d202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d204:	4a0f      	ldr	r2, [pc, #60]	; (800d244 <HAL_TIM_MspPostInit+0xb4>)
 800d206:	f043 0310 	orr.w	r3, r3, #16
 800d20a:	6313      	str	r3, [r2, #48]	; 0x30
 800d20c:	4b0d      	ldr	r3, [pc, #52]	; (800d244 <HAL_TIM_MspPostInit+0xb4>)
 800d20e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d210:	f003 0310 	and.w	r3, r3, #16
 800d214:	60fb      	str	r3, [r7, #12]
 800d216:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800d218:	2360      	movs	r3, #96	; 0x60
 800d21a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d21c:	2302      	movs	r3, #2
 800d21e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d220:	2300      	movs	r3, #0
 800d222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d224:	2300      	movs	r3, #0
 800d226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800d228:	2303      	movs	r3, #3
 800d22a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800d22c:	f107 0314 	add.w	r3, r7, #20
 800d230:	4619      	mov	r1, r3
 800d232:	4805      	ldr	r0, [pc, #20]	; (800d248 <HAL_TIM_MspPostInit+0xb8>)
 800d234:	f7f6 f8c4 	bl	80033c0 <HAL_GPIO_Init>
}
 800d238:	bf00      	nop
 800d23a:	3728      	adds	r7, #40	; 0x28
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	40010000 	.word	0x40010000
 800d244:	40023800 	.word	0x40023800
 800d248:	40021000 	.word	0x40021000
 800d24c:	40014000 	.word	0x40014000

0800d250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b08a      	sub	sp, #40	; 0x28
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d258:	f107 0314 	add.w	r3, r7, #20
 800d25c:	2200      	movs	r2, #0
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	605a      	str	r2, [r3, #4]
 800d262:	609a      	str	r2, [r3, #8]
 800d264:	60da      	str	r2, [r3, #12]
 800d266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	4a34      	ldr	r2, [pc, #208]	; (800d340 <HAL_UART_MspInit+0xf0>)
 800d26e:	4293      	cmp	r3, r2
 800d270:	d162      	bne.n	800d338 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d272:	2300      	movs	r3, #0
 800d274:	613b      	str	r3, [r7, #16]
 800d276:	4b33      	ldr	r3, [pc, #204]	; (800d344 <HAL_UART_MspInit+0xf4>)
 800d278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d27a:	4a32      	ldr	r2, [pc, #200]	; (800d344 <HAL_UART_MspInit+0xf4>)
 800d27c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d280:	6413      	str	r3, [r2, #64]	; 0x40
 800d282:	4b30      	ldr	r3, [pc, #192]	; (800d344 <HAL_UART_MspInit+0xf4>)
 800d284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d28a:	613b      	str	r3, [r7, #16]
 800d28c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d28e:	2300      	movs	r3, #0
 800d290:	60fb      	str	r3, [r7, #12]
 800d292:	4b2c      	ldr	r3, [pc, #176]	; (800d344 <HAL_UART_MspInit+0xf4>)
 800d294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d296:	4a2b      	ldr	r2, [pc, #172]	; (800d344 <HAL_UART_MspInit+0xf4>)
 800d298:	f043 0308 	orr.w	r3, r3, #8
 800d29c:	6313      	str	r3, [r2, #48]	; 0x30
 800d29e:	4b29      	ldr	r3, [pc, #164]	; (800d344 <HAL_UART_MspInit+0xf4>)
 800d2a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a2:	f003 0308 	and.w	r3, r3, #8
 800d2a6:	60fb      	str	r3, [r7, #12]
 800d2a8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d2aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d2ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d2b0:	2302      	movs	r3, #2
 800d2b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d2b8:	2303      	movs	r3, #3
 800d2ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d2bc:	2307      	movs	r3, #7
 800d2be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d2c0:	f107 0314 	add.w	r3, r7, #20
 800d2c4:	4619      	mov	r1, r3
 800d2c6:	4820      	ldr	r0, [pc, #128]	; (800d348 <HAL_UART_MspInit+0xf8>)
 800d2c8:	f7f6 f87a 	bl	80033c0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800d2cc:	4b1f      	ldr	r3, [pc, #124]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d2ce:	4a20      	ldr	r2, [pc, #128]	; (800d350 <HAL_UART_MspInit+0x100>)
 800d2d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800d2d2:	4b1e      	ldr	r3, [pc, #120]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d2d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d2d8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d2da:	4b1c      	ldr	r3, [pc, #112]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d2dc:	2240      	movs	r2, #64	; 0x40
 800d2de:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d2e0:	4b1a      	ldr	r3, [pc, #104]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d2e6:	4b19      	ldr	r3, [pc, #100]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d2e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d2ec:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d2ee:	4b17      	ldr	r3, [pc, #92]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d2f4:	4b15      	ldr	r3, [pc, #84]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800d2fa:	4b14      	ldr	r3, [pc, #80]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d300:	4b12      	ldr	r3, [pc, #72]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d302:	2200      	movs	r2, #0
 800d304:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d306:	4b11      	ldr	r3, [pc, #68]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d308:	2200      	movs	r2, #0
 800d30a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800d30c:	480f      	ldr	r0, [pc, #60]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d30e:	f7f5 fc73 	bl	8002bf8 <HAL_DMA_Init>
 800d312:	4603      	mov	r3, r0
 800d314:	2b00      	cmp	r3, #0
 800d316:	d001      	beq.n	800d31c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800d318:	f7ff fa54 	bl	800c7c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	4a0b      	ldr	r2, [pc, #44]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d320:	631a      	str	r2, [r3, #48]	; 0x30
 800d322:	4a0a      	ldr	r2, [pc, #40]	; (800d34c <HAL_UART_MspInit+0xfc>)
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800d328:	2200      	movs	r2, #0
 800d32a:	2100      	movs	r1, #0
 800d32c:	2027      	movs	r0, #39	; 0x27
 800d32e:	f7f5 fc2c 	bl	8002b8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d332:	2027      	movs	r0, #39	; 0x27
 800d334:	f7f5 fc45 	bl	8002bc2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d338:	bf00      	nop
 800d33a:	3728      	adds	r7, #40	; 0x28
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	40004800 	.word	0x40004800
 800d344:	40023800 	.word	0x40023800
 800d348:	40020c00 	.word	0x40020c00
 800d34c:	20000c94 	.word	0x20000c94
 800d350:	40026058 	.word	0x40026058

0800d354 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b08a      	sub	sp, #40	; 0x28
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d35c:	f107 0314 	add.w	r3, r7, #20
 800d360:	2200      	movs	r2, #0
 800d362:	601a      	str	r2, [r3, #0]
 800d364:	605a      	str	r2, [r3, #4]
 800d366:	609a      	str	r2, [r3, #8]
 800d368:	60da      	str	r2, [r3, #12]
 800d36a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d374:	d132      	bne.n	800d3dc <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d376:	2300      	movs	r3, #0
 800d378:	613b      	str	r3, [r7, #16]
 800d37a:	4b1a      	ldr	r3, [pc, #104]	; (800d3e4 <HAL_PCD_MspInit+0x90>)
 800d37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d37e:	4a19      	ldr	r2, [pc, #100]	; (800d3e4 <HAL_PCD_MspInit+0x90>)
 800d380:	f043 0301 	orr.w	r3, r3, #1
 800d384:	6313      	str	r3, [r2, #48]	; 0x30
 800d386:	4b17      	ldr	r3, [pc, #92]	; (800d3e4 <HAL_PCD_MspInit+0x90>)
 800d388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d38a:	f003 0301 	and.w	r3, r3, #1
 800d38e:	613b      	str	r3, [r7, #16]
 800d390:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d392:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d398:	2302      	movs	r3, #2
 800d39a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d39c:	2300      	movs	r3, #0
 800d39e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d3a0:	2303      	movs	r3, #3
 800d3a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d3a4:	230a      	movs	r3, #10
 800d3a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d3a8:	f107 0314 	add.w	r3, r7, #20
 800d3ac:	4619      	mov	r1, r3
 800d3ae:	480e      	ldr	r0, [pc, #56]	; (800d3e8 <HAL_PCD_MspInit+0x94>)
 800d3b0:	f7f6 f806 	bl	80033c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d3b4:	4b0b      	ldr	r3, [pc, #44]	; (800d3e4 <HAL_PCD_MspInit+0x90>)
 800d3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d3b8:	4a0a      	ldr	r2, [pc, #40]	; (800d3e4 <HAL_PCD_MspInit+0x90>)
 800d3ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3be:	6353      	str	r3, [r2, #52]	; 0x34
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	60fb      	str	r3, [r7, #12]
 800d3c4:	4b07      	ldr	r3, [pc, #28]	; (800d3e4 <HAL_PCD_MspInit+0x90>)
 800d3c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c8:	4a06      	ldr	r2, [pc, #24]	; (800d3e4 <HAL_PCD_MspInit+0x90>)
 800d3ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d3ce:	6453      	str	r3, [r2, #68]	; 0x44
 800d3d0:	4b04      	ldr	r3, [pc, #16]	; (800d3e4 <HAL_PCD_MspInit+0x90>)
 800d3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d3d8:	60fb      	str	r3, [r7, #12]
 800d3da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800d3dc:	bf00      	nop
 800d3de:	3728      	adds	r7, #40	; 0x28
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	bd80      	pop	{r7, pc}
 800d3e4:	40023800 	.word	0x40023800
 800d3e8:	40020000 	.word	0x40020000

0800d3ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d3ec:	b480      	push	{r7}
 800d3ee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d3f0:	bf00      	nop
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f8:	4770      	bx	lr

0800d3fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d3fa:	b480      	push	{r7}
 800d3fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d3fe:	e7fe      	b.n	800d3fe <HardFault_Handler+0x4>

0800d400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d400:	b480      	push	{r7}
 800d402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d404:	e7fe      	b.n	800d404 <MemManage_Handler+0x4>

0800d406 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d406:	b480      	push	{r7}
 800d408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d40a:	e7fe      	b.n	800d40a <BusFault_Handler+0x4>

0800d40c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d40c:	b480      	push	{r7}
 800d40e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d410:	e7fe      	b.n	800d410 <UsageFault_Handler+0x4>

0800d412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d412:	b480      	push	{r7}
 800d414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d416:	bf00      	nop
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d424:	bf00      	nop
 800d426:	46bd      	mov	sp, r7
 800d428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42c:	4770      	bx	lr

0800d42e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d42e:	b480      	push	{r7}
 800d430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d432:	bf00      	nop
 800d434:	46bd      	mov	sp, r7
 800d436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43a:	4770      	bx	lr

0800d43c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d440:	f7f3 fdf4 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d444:	bf00      	nop
 800d446:	bd80      	pop	{r7, pc}

0800d448 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800d44c:	4802      	ldr	r0, [pc, #8]	; (800d458 <DMA1_Stream3_IRQHandler+0x10>)
 800d44e:	f7f5 fcfb 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800d452:	bf00      	nop
 800d454:	bd80      	pop	{r7, pc}
 800d456:	bf00      	nop
 800d458:	20000c94 	.word	0x20000c94

0800d45c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800d460:	4805      	ldr	r0, [pc, #20]	; (800d478 <ADC_IRQHandler+0x1c>)
 800d462:	f7f3 fe68 	bl	8001136 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800d466:	4805      	ldr	r0, [pc, #20]	; (800d47c <ADC_IRQHandler+0x20>)
 800d468:	f7f3 fe65 	bl	8001136 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800d46c:	4804      	ldr	r0, [pc, #16]	; (800d480 <ADC_IRQHandler+0x24>)
 800d46e:	f7f3 fe62 	bl	8001136 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800d472:	bf00      	nop
 800d474:	bd80      	pop	{r7, pc}
 800d476:	bf00      	nop
 800d478:	20000e5c 	.word	0x20000e5c
 800d47c:	20000730 	.word	0x20000730
 800d480:	20000ea4 	.word	0x20000ea4

0800d484 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800d484:	b580      	push	{r7, lr}
 800d486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800d488:	4802      	ldr	r0, [pc, #8]	; (800d494 <CAN1_RX0_IRQHandler+0x10>)
 800d48a:	f7f5 f86f 	bl	800256c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800d48e:	bf00      	nop
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	20001d08 	.word	0x20001d08

0800d498 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d49c:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d4a0:	f7f6 f942 	bl	8003728 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d4a4:	bf00      	nop
 800d4a6:	bd80      	pop	{r7, pc}

0800d4a8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d4ac:	4803      	ldr	r0, [pc, #12]	; (800d4bc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800d4ae:	f7f9 f980 	bl	80067b2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800d4b2:	4803      	ldr	r0, [pc, #12]	; (800d4c0 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800d4b4:	f7f9 f97d 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800d4b8:	bf00      	nop
 800d4ba:	bd80      	pop	{r7, pc}
 800d4bc:	20000fec 	.word	0x20000fec
 800d4c0:	20001a08 	.word	0x20001a08

0800d4c4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d4c8:	4802      	ldr	r0, [pc, #8]	; (800d4d4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800d4ca:	f7f9 f972 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d4ce:	bf00      	nop
 800d4d0:	bd80      	pop	{r7, pc}
 800d4d2:	bf00      	nop
 800d4d4:	20000fec 	.word	0x20000fec

0800d4d8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800d4d8:	b580      	push	{r7, lr}
 800d4da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d4dc:	4802      	ldr	r0, [pc, #8]	; (800d4e8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800d4de:	f7f9 f968 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800d4e2:	bf00      	nop
 800d4e4:	bd80      	pop	{r7, pc}
 800d4e6:	bf00      	nop
 800d4e8:	20000fec 	.word	0x20000fec

0800d4ec <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800d4ec:	b580      	push	{r7, lr}
 800d4ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
	//debug1_out_GPIO_Port->BSRR = debug1_out_Pin << 16U; //takes 60ns == 5 clock cycles

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d4f0:	4802      	ldr	r0, [pc, #8]	; (800d4fc <TIM1_CC_IRQHandler+0x10>)
 800d4f2:	f7f9 f95e 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800d4f6:	bf00      	nop
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	20000fec 	.word	0x20000fec

0800d500 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d504:	4802      	ldr	r0, [pc, #8]	; (800d510 <TIM3_IRQHandler+0x10>)
 800d506:	f7f9 f954 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM3_IRQn 1 */
}
 800d50a:	bf00      	nop
 800d50c:	bd80      	pop	{r7, pc}
 800d50e:	bf00      	nop
 800d510:	20000d38 	.word	0x20000d38

0800d514 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800d518:	4802      	ldr	r0, [pc, #8]	; (800d524 <SPI2_IRQHandler+0x10>)
 800d51a:	f7f8 fc39 	bl	8005d90 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800d51e:	bf00      	nop
 800d520:	bd80      	pop	{r7, pc}
 800d522:	bf00      	nop
 800d524:	20000310 	.word	0x20000310

0800d528 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d52c:	4802      	ldr	r0, [pc, #8]	; (800d538 <USART3_IRQHandler+0x10>)
 800d52e:	f7fa faef 	bl	8007b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d532:	bf00      	nop
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	200006f0 	.word	0x200006f0

0800d53c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d540:	4803      	ldr	r0, [pc, #12]	; (800d550 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800d542:	f7f9 f936 	bl	80067b2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800d546:	4803      	ldr	r0, [pc, #12]	; (800d554 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800d548:	f7f9 f933 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800d54c:	bf00      	nop
 800d54e:	bd80      	pop	{r7, pc}
 800d550:	200006b0 	.word	0x200006b0
 800d554:	20001d30 	.word	0x20001d30

0800d558 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d55c:	4803      	ldr	r0, [pc, #12]	; (800d56c <TIM8_UP_TIM13_IRQHandler+0x14>)
 800d55e:	f7f9 f928 	bl	80067b2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800d562:	4803      	ldr	r0, [pc, #12]	; (800d570 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800d564:	f7f9 f925 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800d568:	bf00      	nop
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	200006b0 	.word	0x200006b0
 800d570:	20000eec 	.word	0x20000eec

0800d574 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800d574:	b580      	push	{r7, lr}
 800d576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d578:	4802      	ldr	r0, [pc, #8]	; (800d584 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800d57a:	f7f9 f91a 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800d57e:	bf00      	nop
 800d580:	bd80      	pop	{r7, pc}
 800d582:	bf00      	nop
 800d584:	200006b0 	.word	0x200006b0

0800d588 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800d588:	b580      	push	{r7, lr}
 800d58a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d58c:	4802      	ldr	r0, [pc, #8]	; (800d598 <TIM8_CC_IRQHandler+0x10>)
 800d58e:	f7f9 f910 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800d592:	bf00      	nop
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	200006b0 	.word	0x200006b0

0800d59c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800d5a0:	4802      	ldr	r0, [pc, #8]	; (800d5ac <TIM5_IRQHandler+0x10>)
 800d5a2:	f7f9 f906 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800d5a6:	bf00      	nop
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	20000cf4 	.word	0x20000cf4

0800d5b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d5b4:	4802      	ldr	r0, [pc, #8]	; (800d5c0 <TIM6_DAC_IRQHandler+0x10>)
 800d5b6:	f7f9 f8fc 	bl	80067b2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d5ba:	bf00      	nop
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	20000fac 	.word	0x20000fac

0800d5c4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d5c8:	4802      	ldr	r0, [pc, #8]	; (800d5d4 <DMA2_Stream0_IRQHandler+0x10>)
 800d5ca:	f7f5 fc3d 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d5ce:	bf00      	nop
 800d5d0:	bd80      	pop	{r7, pc}
 800d5d2:	bf00      	nop
 800d5d4:	20000f2c 	.word	0x20000f2c

0800d5d8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800d5d8:	b580      	push	{r7, lr}
 800d5da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800d5dc:	4802      	ldr	r0, [pc, #8]	; (800d5e8 <DMA2_Stream1_IRQHandler+0x10>)
 800d5de:	f7f5 fc33 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800d5e2:	bf00      	nop
 800d5e4:	bd80      	pop	{r7, pc}
 800d5e6:	bf00      	nop
 800d5e8:	20000c34 	.word	0x20000c34

0800d5ec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d5f0:	4802      	ldr	r0, [pc, #8]	; (800d5fc <DMA2_Stream2_IRQHandler+0x10>)
 800d5f2:	f7f5 fc29 	bl	8002e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d5f6:	bf00      	nop
 800d5f8:	bd80      	pop	{r7, pc}
 800d5fa:	bf00      	nop
 800d5fc:	20001ca8 	.word	0x20001ca8

0800d600 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	b084      	sub	sp, #16
 800d604:	af00      	add	r7, sp, #0
 800d606:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d608:	4b11      	ldr	r3, [pc, #68]	; (800d650 <_sbrk+0x50>)
 800d60a:	681b      	ldr	r3, [r3, #0]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d102      	bne.n	800d616 <_sbrk+0x16>
		heap_end = &end;
 800d610:	4b0f      	ldr	r3, [pc, #60]	; (800d650 <_sbrk+0x50>)
 800d612:	4a10      	ldr	r2, [pc, #64]	; (800d654 <_sbrk+0x54>)
 800d614:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d616:	4b0e      	ldr	r3, [pc, #56]	; (800d650 <_sbrk+0x50>)
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d61c:	4b0c      	ldr	r3, [pc, #48]	; (800d650 <_sbrk+0x50>)
 800d61e:	681a      	ldr	r2, [r3, #0]
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	4413      	add	r3, r2
 800d624:	466a      	mov	r2, sp
 800d626:	4293      	cmp	r3, r2
 800d628:	d907      	bls.n	800d63a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d62a:	f000 f855 	bl	800d6d8 <__errno>
 800d62e:	4602      	mov	r2, r0
 800d630:	230c      	movs	r3, #12
 800d632:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d634:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d638:	e006      	b.n	800d648 <_sbrk+0x48>
	}

	heap_end += incr;
 800d63a:	4b05      	ldr	r3, [pc, #20]	; (800d650 <_sbrk+0x50>)
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	4413      	add	r3, r2
 800d642:	4a03      	ldr	r2, [pc, #12]	; (800d650 <_sbrk+0x50>)
 800d644:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d646:	68fb      	ldr	r3, [r7, #12]
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3710      	adds	r7, #16
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	200002d8 	.word	0x200002d8
 800d654:	20002798 	.word	0x20002798

0800d658 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d658:	b480      	push	{r7}
 800d65a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d65c:	4b08      	ldr	r3, [pc, #32]	; (800d680 <SystemInit+0x28>)
 800d65e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d662:	4a07      	ldr	r2, [pc, #28]	; (800d680 <SystemInit+0x28>)
 800d664:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d668:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d66c:	4b04      	ldr	r3, [pc, #16]	; (800d680 <SystemInit+0x28>)
 800d66e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d672:	609a      	str	r2, [r3, #8]
#endif
}
 800d674:	bf00      	nop
 800d676:	46bd      	mov	sp, r7
 800d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67c:	4770      	bx	lr
 800d67e:	bf00      	nop
 800d680:	e000ed00 	.word	0xe000ed00

0800d684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d684:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d6bc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d688:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d68a:	e003      	b.n	800d694 <LoopCopyDataInit>

0800d68c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d68c:	4b0c      	ldr	r3, [pc, #48]	; (800d6c0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d68e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d690:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d692:	3104      	adds	r1, #4

0800d694 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d694:	480b      	ldr	r0, [pc, #44]	; (800d6c4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d696:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d698:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d69a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d69c:	d3f6      	bcc.n	800d68c <CopyDataInit>
  ldr  r2, =_sbss
 800d69e:	4a0b      	ldr	r2, [pc, #44]	; (800d6cc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d6a0:	e002      	b.n	800d6a8 <LoopFillZerobss>

0800d6a2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d6a2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d6a4:	f842 3b04 	str.w	r3, [r2], #4

0800d6a8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d6a8:	4b09      	ldr	r3, [pc, #36]	; (800d6d0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d6aa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d6ac:	d3f9      	bcc.n	800d6a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d6ae:	f7ff ffd3 	bl	800d658 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d6b2:	f000 f817 	bl	800d6e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d6b6:	f7fb faa3 	bl	8008c00 <main>
  bx  lr    
 800d6ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d6bc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d6c0:	08012cb0 	.word	0x08012cb0
  ldr  r0, =_sdata
 800d6c4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d6c8:	20000218 	.word	0x20000218
  ldr  r2, =_sbss
 800d6cc:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 800d6d0:	20002794 	.word	0x20002794

0800d6d4 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d6d4:	e7fe      	b.n	800d6d4 <CAN1_RX1_IRQHandler>
	...

0800d6d8 <__errno>:
 800d6d8:	4b01      	ldr	r3, [pc, #4]	; (800d6e0 <__errno+0x8>)
 800d6da:	6818      	ldr	r0, [r3, #0]
 800d6dc:	4770      	bx	lr
 800d6de:	bf00      	nop
 800d6e0:	20000044 	.word	0x20000044

0800d6e4 <__libc_init_array>:
 800d6e4:	b570      	push	{r4, r5, r6, lr}
 800d6e6:	4e0d      	ldr	r6, [pc, #52]	; (800d71c <__libc_init_array+0x38>)
 800d6e8:	4c0d      	ldr	r4, [pc, #52]	; (800d720 <__libc_init_array+0x3c>)
 800d6ea:	1ba4      	subs	r4, r4, r6
 800d6ec:	10a4      	asrs	r4, r4, #2
 800d6ee:	2500      	movs	r5, #0
 800d6f0:	42a5      	cmp	r5, r4
 800d6f2:	d109      	bne.n	800d708 <__libc_init_array+0x24>
 800d6f4:	4e0b      	ldr	r6, [pc, #44]	; (800d724 <__libc_init_array+0x40>)
 800d6f6:	4c0c      	ldr	r4, [pc, #48]	; (800d728 <__libc_init_array+0x44>)
 800d6f8:	f004 ff04 	bl	8012504 <_init>
 800d6fc:	1ba4      	subs	r4, r4, r6
 800d6fe:	10a4      	asrs	r4, r4, #2
 800d700:	2500      	movs	r5, #0
 800d702:	42a5      	cmp	r5, r4
 800d704:	d105      	bne.n	800d712 <__libc_init_array+0x2e>
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d70c:	4798      	blx	r3
 800d70e:	3501      	adds	r5, #1
 800d710:	e7ee      	b.n	800d6f0 <__libc_init_array+0xc>
 800d712:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d716:	4798      	blx	r3
 800d718:	3501      	adds	r5, #1
 800d71a:	e7f2      	b.n	800d702 <__libc_init_array+0x1e>
 800d71c:	08012ca8 	.word	0x08012ca8
 800d720:	08012ca8 	.word	0x08012ca8
 800d724:	08012ca8 	.word	0x08012ca8
 800d728:	08012cac 	.word	0x08012cac

0800d72c <memset>:
 800d72c:	4402      	add	r2, r0
 800d72e:	4603      	mov	r3, r0
 800d730:	4293      	cmp	r3, r2
 800d732:	d100      	bne.n	800d736 <memset+0xa>
 800d734:	4770      	bx	lr
 800d736:	f803 1b01 	strb.w	r1, [r3], #1
 800d73a:	e7f9      	b.n	800d730 <memset+0x4>

0800d73c <__cvt>:
 800d73c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d740:	ec55 4b10 	vmov	r4, r5, d0
 800d744:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d746:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d74a:	2d00      	cmp	r5, #0
 800d74c:	460e      	mov	r6, r1
 800d74e:	4691      	mov	r9, r2
 800d750:	4619      	mov	r1, r3
 800d752:	bfb8      	it	lt
 800d754:	4622      	movlt	r2, r4
 800d756:	462b      	mov	r3, r5
 800d758:	f027 0720 	bic.w	r7, r7, #32
 800d75c:	bfbb      	ittet	lt
 800d75e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d762:	461d      	movlt	r5, r3
 800d764:	2300      	movge	r3, #0
 800d766:	232d      	movlt	r3, #45	; 0x2d
 800d768:	bfb8      	it	lt
 800d76a:	4614      	movlt	r4, r2
 800d76c:	2f46      	cmp	r7, #70	; 0x46
 800d76e:	700b      	strb	r3, [r1, #0]
 800d770:	d004      	beq.n	800d77c <__cvt+0x40>
 800d772:	2f45      	cmp	r7, #69	; 0x45
 800d774:	d100      	bne.n	800d778 <__cvt+0x3c>
 800d776:	3601      	adds	r6, #1
 800d778:	2102      	movs	r1, #2
 800d77a:	e000      	b.n	800d77e <__cvt+0x42>
 800d77c:	2103      	movs	r1, #3
 800d77e:	ab03      	add	r3, sp, #12
 800d780:	9301      	str	r3, [sp, #4]
 800d782:	ab02      	add	r3, sp, #8
 800d784:	9300      	str	r3, [sp, #0]
 800d786:	4632      	mov	r2, r6
 800d788:	4653      	mov	r3, sl
 800d78a:	ec45 4b10 	vmov	d0, r4, r5
 800d78e:	f001 fdbb 	bl	800f308 <_dtoa_r>
 800d792:	2f47      	cmp	r7, #71	; 0x47
 800d794:	4680      	mov	r8, r0
 800d796:	d102      	bne.n	800d79e <__cvt+0x62>
 800d798:	f019 0f01 	tst.w	r9, #1
 800d79c:	d026      	beq.n	800d7ec <__cvt+0xb0>
 800d79e:	2f46      	cmp	r7, #70	; 0x46
 800d7a0:	eb08 0906 	add.w	r9, r8, r6
 800d7a4:	d111      	bne.n	800d7ca <__cvt+0x8e>
 800d7a6:	f898 3000 	ldrb.w	r3, [r8]
 800d7aa:	2b30      	cmp	r3, #48	; 0x30
 800d7ac:	d10a      	bne.n	800d7c4 <__cvt+0x88>
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	4620      	mov	r0, r4
 800d7b4:	4629      	mov	r1, r5
 800d7b6:	f7f3 f987 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7ba:	b918      	cbnz	r0, 800d7c4 <__cvt+0x88>
 800d7bc:	f1c6 0601 	rsb	r6, r6, #1
 800d7c0:	f8ca 6000 	str.w	r6, [sl]
 800d7c4:	f8da 3000 	ldr.w	r3, [sl]
 800d7c8:	4499      	add	r9, r3
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	4629      	mov	r1, r5
 800d7d2:	f7f3 f979 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7d6:	b938      	cbnz	r0, 800d7e8 <__cvt+0xac>
 800d7d8:	2230      	movs	r2, #48	; 0x30
 800d7da:	9b03      	ldr	r3, [sp, #12]
 800d7dc:	454b      	cmp	r3, r9
 800d7de:	d205      	bcs.n	800d7ec <__cvt+0xb0>
 800d7e0:	1c59      	adds	r1, r3, #1
 800d7e2:	9103      	str	r1, [sp, #12]
 800d7e4:	701a      	strb	r2, [r3, #0]
 800d7e6:	e7f8      	b.n	800d7da <__cvt+0x9e>
 800d7e8:	f8cd 900c 	str.w	r9, [sp, #12]
 800d7ec:	9b03      	ldr	r3, [sp, #12]
 800d7ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d7f0:	eba3 0308 	sub.w	r3, r3, r8
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	b004      	add	sp, #16
 800d7fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d7fe <__exponent>:
 800d7fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d800:	2900      	cmp	r1, #0
 800d802:	4604      	mov	r4, r0
 800d804:	bfba      	itte	lt
 800d806:	4249      	neglt	r1, r1
 800d808:	232d      	movlt	r3, #45	; 0x2d
 800d80a:	232b      	movge	r3, #43	; 0x2b
 800d80c:	2909      	cmp	r1, #9
 800d80e:	f804 2b02 	strb.w	r2, [r4], #2
 800d812:	7043      	strb	r3, [r0, #1]
 800d814:	dd20      	ble.n	800d858 <__exponent+0x5a>
 800d816:	f10d 0307 	add.w	r3, sp, #7
 800d81a:	461f      	mov	r7, r3
 800d81c:	260a      	movs	r6, #10
 800d81e:	fb91 f5f6 	sdiv	r5, r1, r6
 800d822:	fb06 1115 	mls	r1, r6, r5, r1
 800d826:	3130      	adds	r1, #48	; 0x30
 800d828:	2d09      	cmp	r5, #9
 800d82a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d82e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800d832:	4629      	mov	r1, r5
 800d834:	dc09      	bgt.n	800d84a <__exponent+0x4c>
 800d836:	3130      	adds	r1, #48	; 0x30
 800d838:	3b02      	subs	r3, #2
 800d83a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d83e:	42bb      	cmp	r3, r7
 800d840:	4622      	mov	r2, r4
 800d842:	d304      	bcc.n	800d84e <__exponent+0x50>
 800d844:	1a10      	subs	r0, r2, r0
 800d846:	b003      	add	sp, #12
 800d848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d84a:	4613      	mov	r3, r2
 800d84c:	e7e7      	b.n	800d81e <__exponent+0x20>
 800d84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d852:	f804 2b01 	strb.w	r2, [r4], #1
 800d856:	e7f2      	b.n	800d83e <__exponent+0x40>
 800d858:	2330      	movs	r3, #48	; 0x30
 800d85a:	4419      	add	r1, r3
 800d85c:	7083      	strb	r3, [r0, #2]
 800d85e:	1d02      	adds	r2, r0, #4
 800d860:	70c1      	strb	r1, [r0, #3]
 800d862:	e7ef      	b.n	800d844 <__exponent+0x46>

0800d864 <_printf_float>:
 800d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d868:	b08d      	sub	sp, #52	; 0x34
 800d86a:	460c      	mov	r4, r1
 800d86c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d870:	4616      	mov	r6, r2
 800d872:	461f      	mov	r7, r3
 800d874:	4605      	mov	r5, r0
 800d876:	f002 fe2b 	bl	80104d0 <_localeconv_r>
 800d87a:	6803      	ldr	r3, [r0, #0]
 800d87c:	9304      	str	r3, [sp, #16]
 800d87e:	4618      	mov	r0, r3
 800d880:	f7f2 fca6 	bl	80001d0 <strlen>
 800d884:	2300      	movs	r3, #0
 800d886:	930a      	str	r3, [sp, #40]	; 0x28
 800d888:	f8d8 3000 	ldr.w	r3, [r8]
 800d88c:	9005      	str	r0, [sp, #20]
 800d88e:	3307      	adds	r3, #7
 800d890:	f023 0307 	bic.w	r3, r3, #7
 800d894:	f103 0208 	add.w	r2, r3, #8
 800d898:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d89c:	f8d4 b000 	ldr.w	fp, [r4]
 800d8a0:	f8c8 2000 	str.w	r2, [r8]
 800d8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d8ac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d8b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d8b4:	9307      	str	r3, [sp, #28]
 800d8b6:	f8cd 8018 	str.w	r8, [sp, #24]
 800d8ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8be:	4ba7      	ldr	r3, [pc, #668]	; (800db5c <_printf_float+0x2f8>)
 800d8c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8c4:	f7f3 f932 	bl	8000b2c <__aeabi_dcmpun>
 800d8c8:	bb70      	cbnz	r0, 800d928 <_printf_float+0xc4>
 800d8ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8ce:	4ba3      	ldr	r3, [pc, #652]	; (800db5c <_printf_float+0x2f8>)
 800d8d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d8d4:	f7f3 f90c 	bl	8000af0 <__aeabi_dcmple>
 800d8d8:	bb30      	cbnz	r0, 800d928 <_printf_float+0xc4>
 800d8da:	2200      	movs	r2, #0
 800d8dc:	2300      	movs	r3, #0
 800d8de:	4640      	mov	r0, r8
 800d8e0:	4649      	mov	r1, r9
 800d8e2:	f7f3 f8fb 	bl	8000adc <__aeabi_dcmplt>
 800d8e6:	b110      	cbz	r0, 800d8ee <_printf_float+0x8a>
 800d8e8:	232d      	movs	r3, #45	; 0x2d
 800d8ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d8ee:	4a9c      	ldr	r2, [pc, #624]	; (800db60 <_printf_float+0x2fc>)
 800d8f0:	4b9c      	ldr	r3, [pc, #624]	; (800db64 <_printf_float+0x300>)
 800d8f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d8f6:	bf8c      	ite	hi
 800d8f8:	4690      	movhi	r8, r2
 800d8fa:	4698      	movls	r8, r3
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	f02b 0204 	bic.w	r2, fp, #4
 800d902:	6123      	str	r3, [r4, #16]
 800d904:	6022      	str	r2, [r4, #0]
 800d906:	f04f 0900 	mov.w	r9, #0
 800d90a:	9700      	str	r7, [sp, #0]
 800d90c:	4633      	mov	r3, r6
 800d90e:	aa0b      	add	r2, sp, #44	; 0x2c
 800d910:	4621      	mov	r1, r4
 800d912:	4628      	mov	r0, r5
 800d914:	f000 f9e6 	bl	800dce4 <_printf_common>
 800d918:	3001      	adds	r0, #1
 800d91a:	f040 808d 	bne.w	800da38 <_printf_float+0x1d4>
 800d91e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d922:	b00d      	add	sp, #52	; 0x34
 800d924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d928:	4642      	mov	r2, r8
 800d92a:	464b      	mov	r3, r9
 800d92c:	4640      	mov	r0, r8
 800d92e:	4649      	mov	r1, r9
 800d930:	f7f3 f8fc 	bl	8000b2c <__aeabi_dcmpun>
 800d934:	b110      	cbz	r0, 800d93c <_printf_float+0xd8>
 800d936:	4a8c      	ldr	r2, [pc, #560]	; (800db68 <_printf_float+0x304>)
 800d938:	4b8c      	ldr	r3, [pc, #560]	; (800db6c <_printf_float+0x308>)
 800d93a:	e7da      	b.n	800d8f2 <_printf_float+0x8e>
 800d93c:	6861      	ldr	r1, [r4, #4]
 800d93e:	1c4b      	adds	r3, r1, #1
 800d940:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d944:	a80a      	add	r0, sp, #40	; 0x28
 800d946:	d13e      	bne.n	800d9c6 <_printf_float+0x162>
 800d948:	2306      	movs	r3, #6
 800d94a:	6063      	str	r3, [r4, #4]
 800d94c:	2300      	movs	r3, #0
 800d94e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d952:	ab09      	add	r3, sp, #36	; 0x24
 800d954:	9300      	str	r3, [sp, #0]
 800d956:	ec49 8b10 	vmov	d0, r8, r9
 800d95a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d95e:	6022      	str	r2, [r4, #0]
 800d960:	f8cd a004 	str.w	sl, [sp, #4]
 800d964:	6861      	ldr	r1, [r4, #4]
 800d966:	4628      	mov	r0, r5
 800d968:	f7ff fee8 	bl	800d73c <__cvt>
 800d96c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d970:	2b47      	cmp	r3, #71	; 0x47
 800d972:	4680      	mov	r8, r0
 800d974:	d109      	bne.n	800d98a <_printf_float+0x126>
 800d976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d978:	1cd8      	adds	r0, r3, #3
 800d97a:	db02      	blt.n	800d982 <_printf_float+0x11e>
 800d97c:	6862      	ldr	r2, [r4, #4]
 800d97e:	4293      	cmp	r3, r2
 800d980:	dd47      	ble.n	800da12 <_printf_float+0x1ae>
 800d982:	f1aa 0a02 	sub.w	sl, sl, #2
 800d986:	fa5f fa8a 	uxtb.w	sl, sl
 800d98a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d98e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d990:	d824      	bhi.n	800d9dc <_printf_float+0x178>
 800d992:	3901      	subs	r1, #1
 800d994:	4652      	mov	r2, sl
 800d996:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d99a:	9109      	str	r1, [sp, #36]	; 0x24
 800d99c:	f7ff ff2f 	bl	800d7fe <__exponent>
 800d9a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9a2:	1813      	adds	r3, r2, r0
 800d9a4:	2a01      	cmp	r2, #1
 800d9a6:	4681      	mov	r9, r0
 800d9a8:	6123      	str	r3, [r4, #16]
 800d9aa:	dc02      	bgt.n	800d9b2 <_printf_float+0x14e>
 800d9ac:	6822      	ldr	r2, [r4, #0]
 800d9ae:	07d1      	lsls	r1, r2, #31
 800d9b0:	d501      	bpl.n	800d9b6 <_printf_float+0x152>
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	6123      	str	r3, [r4, #16]
 800d9b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0a5      	beq.n	800d90a <_printf_float+0xa6>
 800d9be:	232d      	movs	r3, #45	; 0x2d
 800d9c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d9c4:	e7a1      	b.n	800d90a <_printf_float+0xa6>
 800d9c6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d9ca:	f000 8177 	beq.w	800dcbc <_printf_float+0x458>
 800d9ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d9d2:	d1bb      	bne.n	800d94c <_printf_float+0xe8>
 800d9d4:	2900      	cmp	r1, #0
 800d9d6:	d1b9      	bne.n	800d94c <_printf_float+0xe8>
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e7b6      	b.n	800d94a <_printf_float+0xe6>
 800d9dc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d9e0:	d119      	bne.n	800da16 <_printf_float+0x1b2>
 800d9e2:	2900      	cmp	r1, #0
 800d9e4:	6863      	ldr	r3, [r4, #4]
 800d9e6:	dd0c      	ble.n	800da02 <_printf_float+0x19e>
 800d9e8:	6121      	str	r1, [r4, #16]
 800d9ea:	b913      	cbnz	r3, 800d9f2 <_printf_float+0x18e>
 800d9ec:	6822      	ldr	r2, [r4, #0]
 800d9ee:	07d2      	lsls	r2, r2, #31
 800d9f0:	d502      	bpl.n	800d9f8 <_printf_float+0x194>
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	440b      	add	r3, r1
 800d9f6:	6123      	str	r3, [r4, #16]
 800d9f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9fa:	65a3      	str	r3, [r4, #88]	; 0x58
 800d9fc:	f04f 0900 	mov.w	r9, #0
 800da00:	e7d9      	b.n	800d9b6 <_printf_float+0x152>
 800da02:	b913      	cbnz	r3, 800da0a <_printf_float+0x1a6>
 800da04:	6822      	ldr	r2, [r4, #0]
 800da06:	07d0      	lsls	r0, r2, #31
 800da08:	d501      	bpl.n	800da0e <_printf_float+0x1aa>
 800da0a:	3302      	adds	r3, #2
 800da0c:	e7f3      	b.n	800d9f6 <_printf_float+0x192>
 800da0e:	2301      	movs	r3, #1
 800da10:	e7f1      	b.n	800d9f6 <_printf_float+0x192>
 800da12:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800da16:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800da1a:	4293      	cmp	r3, r2
 800da1c:	db05      	blt.n	800da2a <_printf_float+0x1c6>
 800da1e:	6822      	ldr	r2, [r4, #0]
 800da20:	6123      	str	r3, [r4, #16]
 800da22:	07d1      	lsls	r1, r2, #31
 800da24:	d5e8      	bpl.n	800d9f8 <_printf_float+0x194>
 800da26:	3301      	adds	r3, #1
 800da28:	e7e5      	b.n	800d9f6 <_printf_float+0x192>
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	bfd4      	ite	le
 800da2e:	f1c3 0302 	rsble	r3, r3, #2
 800da32:	2301      	movgt	r3, #1
 800da34:	4413      	add	r3, r2
 800da36:	e7de      	b.n	800d9f6 <_printf_float+0x192>
 800da38:	6823      	ldr	r3, [r4, #0]
 800da3a:	055a      	lsls	r2, r3, #21
 800da3c:	d407      	bmi.n	800da4e <_printf_float+0x1ea>
 800da3e:	6923      	ldr	r3, [r4, #16]
 800da40:	4642      	mov	r2, r8
 800da42:	4631      	mov	r1, r6
 800da44:	4628      	mov	r0, r5
 800da46:	47b8      	blx	r7
 800da48:	3001      	adds	r0, #1
 800da4a:	d12b      	bne.n	800daa4 <_printf_float+0x240>
 800da4c:	e767      	b.n	800d91e <_printf_float+0xba>
 800da4e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800da52:	f240 80dc 	bls.w	800dc0e <_printf_float+0x3aa>
 800da56:	2200      	movs	r2, #0
 800da58:	2300      	movs	r3, #0
 800da5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da5e:	f7f3 f833 	bl	8000ac8 <__aeabi_dcmpeq>
 800da62:	2800      	cmp	r0, #0
 800da64:	d033      	beq.n	800dace <_printf_float+0x26a>
 800da66:	2301      	movs	r3, #1
 800da68:	4a41      	ldr	r2, [pc, #260]	; (800db70 <_printf_float+0x30c>)
 800da6a:	4631      	mov	r1, r6
 800da6c:	4628      	mov	r0, r5
 800da6e:	47b8      	blx	r7
 800da70:	3001      	adds	r0, #1
 800da72:	f43f af54 	beq.w	800d91e <_printf_float+0xba>
 800da76:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800da7a:	429a      	cmp	r2, r3
 800da7c:	db02      	blt.n	800da84 <_printf_float+0x220>
 800da7e:	6823      	ldr	r3, [r4, #0]
 800da80:	07d8      	lsls	r0, r3, #31
 800da82:	d50f      	bpl.n	800daa4 <_printf_float+0x240>
 800da84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da88:	4631      	mov	r1, r6
 800da8a:	4628      	mov	r0, r5
 800da8c:	47b8      	blx	r7
 800da8e:	3001      	adds	r0, #1
 800da90:	f43f af45 	beq.w	800d91e <_printf_float+0xba>
 800da94:	f04f 0800 	mov.w	r8, #0
 800da98:	f104 091a 	add.w	r9, r4, #26
 800da9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da9e:	3b01      	subs	r3, #1
 800daa0:	4543      	cmp	r3, r8
 800daa2:	dc09      	bgt.n	800dab8 <_printf_float+0x254>
 800daa4:	6823      	ldr	r3, [r4, #0]
 800daa6:	079b      	lsls	r3, r3, #30
 800daa8:	f100 8103 	bmi.w	800dcb2 <_printf_float+0x44e>
 800daac:	68e0      	ldr	r0, [r4, #12]
 800daae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dab0:	4298      	cmp	r0, r3
 800dab2:	bfb8      	it	lt
 800dab4:	4618      	movlt	r0, r3
 800dab6:	e734      	b.n	800d922 <_printf_float+0xbe>
 800dab8:	2301      	movs	r3, #1
 800daba:	464a      	mov	r2, r9
 800dabc:	4631      	mov	r1, r6
 800dabe:	4628      	mov	r0, r5
 800dac0:	47b8      	blx	r7
 800dac2:	3001      	adds	r0, #1
 800dac4:	f43f af2b 	beq.w	800d91e <_printf_float+0xba>
 800dac8:	f108 0801 	add.w	r8, r8, #1
 800dacc:	e7e6      	b.n	800da9c <_printf_float+0x238>
 800dace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	dc2b      	bgt.n	800db2c <_printf_float+0x2c8>
 800dad4:	2301      	movs	r3, #1
 800dad6:	4a26      	ldr	r2, [pc, #152]	; (800db70 <_printf_float+0x30c>)
 800dad8:	4631      	mov	r1, r6
 800dada:	4628      	mov	r0, r5
 800dadc:	47b8      	blx	r7
 800dade:	3001      	adds	r0, #1
 800dae0:	f43f af1d 	beq.w	800d91e <_printf_float+0xba>
 800dae4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dae6:	b923      	cbnz	r3, 800daf2 <_printf_float+0x28e>
 800dae8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daea:	b913      	cbnz	r3, 800daf2 <_printf_float+0x28e>
 800daec:	6823      	ldr	r3, [r4, #0]
 800daee:	07d9      	lsls	r1, r3, #31
 800daf0:	d5d8      	bpl.n	800daa4 <_printf_float+0x240>
 800daf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daf6:	4631      	mov	r1, r6
 800daf8:	4628      	mov	r0, r5
 800dafa:	47b8      	blx	r7
 800dafc:	3001      	adds	r0, #1
 800dafe:	f43f af0e 	beq.w	800d91e <_printf_float+0xba>
 800db02:	f04f 0900 	mov.w	r9, #0
 800db06:	f104 0a1a 	add.w	sl, r4, #26
 800db0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db0c:	425b      	negs	r3, r3
 800db0e:	454b      	cmp	r3, r9
 800db10:	dc01      	bgt.n	800db16 <_printf_float+0x2b2>
 800db12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db14:	e794      	b.n	800da40 <_printf_float+0x1dc>
 800db16:	2301      	movs	r3, #1
 800db18:	4652      	mov	r2, sl
 800db1a:	4631      	mov	r1, r6
 800db1c:	4628      	mov	r0, r5
 800db1e:	47b8      	blx	r7
 800db20:	3001      	adds	r0, #1
 800db22:	f43f aefc 	beq.w	800d91e <_printf_float+0xba>
 800db26:	f109 0901 	add.w	r9, r9, #1
 800db2a:	e7ee      	b.n	800db0a <_printf_float+0x2a6>
 800db2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800db2e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800db30:	429a      	cmp	r2, r3
 800db32:	bfa8      	it	ge
 800db34:	461a      	movge	r2, r3
 800db36:	2a00      	cmp	r2, #0
 800db38:	4691      	mov	r9, r2
 800db3a:	dd07      	ble.n	800db4c <_printf_float+0x2e8>
 800db3c:	4613      	mov	r3, r2
 800db3e:	4631      	mov	r1, r6
 800db40:	4642      	mov	r2, r8
 800db42:	4628      	mov	r0, r5
 800db44:	47b8      	blx	r7
 800db46:	3001      	adds	r0, #1
 800db48:	f43f aee9 	beq.w	800d91e <_printf_float+0xba>
 800db4c:	f104 031a 	add.w	r3, r4, #26
 800db50:	f04f 0b00 	mov.w	fp, #0
 800db54:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800db58:	9306      	str	r3, [sp, #24]
 800db5a:	e015      	b.n	800db88 <_printf_float+0x324>
 800db5c:	7fefffff 	.word	0x7fefffff
 800db60:	0801280c 	.word	0x0801280c
 800db64:	08012808 	.word	0x08012808
 800db68:	08012814 	.word	0x08012814
 800db6c:	08012810 	.word	0x08012810
 800db70:	08012818 	.word	0x08012818
 800db74:	2301      	movs	r3, #1
 800db76:	9a06      	ldr	r2, [sp, #24]
 800db78:	4631      	mov	r1, r6
 800db7a:	4628      	mov	r0, r5
 800db7c:	47b8      	blx	r7
 800db7e:	3001      	adds	r0, #1
 800db80:	f43f aecd 	beq.w	800d91e <_printf_float+0xba>
 800db84:	f10b 0b01 	add.w	fp, fp, #1
 800db88:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800db8c:	ebaa 0309 	sub.w	r3, sl, r9
 800db90:	455b      	cmp	r3, fp
 800db92:	dcef      	bgt.n	800db74 <_printf_float+0x310>
 800db94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800db98:	429a      	cmp	r2, r3
 800db9a:	44d0      	add	r8, sl
 800db9c:	db15      	blt.n	800dbca <_printf_float+0x366>
 800db9e:	6823      	ldr	r3, [r4, #0]
 800dba0:	07da      	lsls	r2, r3, #31
 800dba2:	d412      	bmi.n	800dbca <_printf_float+0x366>
 800dba4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dba6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dba8:	eba3 020a 	sub.w	r2, r3, sl
 800dbac:	eba3 0a01 	sub.w	sl, r3, r1
 800dbb0:	4592      	cmp	sl, r2
 800dbb2:	bfa8      	it	ge
 800dbb4:	4692      	movge	sl, r2
 800dbb6:	f1ba 0f00 	cmp.w	sl, #0
 800dbba:	dc0e      	bgt.n	800dbda <_printf_float+0x376>
 800dbbc:	f04f 0800 	mov.w	r8, #0
 800dbc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dbc4:	f104 091a 	add.w	r9, r4, #26
 800dbc8:	e019      	b.n	800dbfe <_printf_float+0x39a>
 800dbca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbce:	4631      	mov	r1, r6
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	47b8      	blx	r7
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d1e5      	bne.n	800dba4 <_printf_float+0x340>
 800dbd8:	e6a1      	b.n	800d91e <_printf_float+0xba>
 800dbda:	4653      	mov	r3, sl
 800dbdc:	4642      	mov	r2, r8
 800dbde:	4631      	mov	r1, r6
 800dbe0:	4628      	mov	r0, r5
 800dbe2:	47b8      	blx	r7
 800dbe4:	3001      	adds	r0, #1
 800dbe6:	d1e9      	bne.n	800dbbc <_printf_float+0x358>
 800dbe8:	e699      	b.n	800d91e <_printf_float+0xba>
 800dbea:	2301      	movs	r3, #1
 800dbec:	464a      	mov	r2, r9
 800dbee:	4631      	mov	r1, r6
 800dbf0:	4628      	mov	r0, r5
 800dbf2:	47b8      	blx	r7
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	f43f ae92 	beq.w	800d91e <_printf_float+0xba>
 800dbfa:	f108 0801 	add.w	r8, r8, #1
 800dbfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dc02:	1a9b      	subs	r3, r3, r2
 800dc04:	eba3 030a 	sub.w	r3, r3, sl
 800dc08:	4543      	cmp	r3, r8
 800dc0a:	dcee      	bgt.n	800dbea <_printf_float+0x386>
 800dc0c:	e74a      	b.n	800daa4 <_printf_float+0x240>
 800dc0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dc10:	2a01      	cmp	r2, #1
 800dc12:	dc01      	bgt.n	800dc18 <_printf_float+0x3b4>
 800dc14:	07db      	lsls	r3, r3, #31
 800dc16:	d53a      	bpl.n	800dc8e <_printf_float+0x42a>
 800dc18:	2301      	movs	r3, #1
 800dc1a:	4642      	mov	r2, r8
 800dc1c:	4631      	mov	r1, r6
 800dc1e:	4628      	mov	r0, r5
 800dc20:	47b8      	blx	r7
 800dc22:	3001      	adds	r0, #1
 800dc24:	f43f ae7b 	beq.w	800d91e <_printf_float+0xba>
 800dc28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dc2c:	4631      	mov	r1, r6
 800dc2e:	4628      	mov	r0, r5
 800dc30:	47b8      	blx	r7
 800dc32:	3001      	adds	r0, #1
 800dc34:	f108 0801 	add.w	r8, r8, #1
 800dc38:	f43f ae71 	beq.w	800d91e <_printf_float+0xba>
 800dc3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc3e:	2200      	movs	r2, #0
 800dc40:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800dc44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800dc48:	2300      	movs	r3, #0
 800dc4a:	f7f2 ff3d 	bl	8000ac8 <__aeabi_dcmpeq>
 800dc4e:	b9c8      	cbnz	r0, 800dc84 <_printf_float+0x420>
 800dc50:	4653      	mov	r3, sl
 800dc52:	4642      	mov	r2, r8
 800dc54:	4631      	mov	r1, r6
 800dc56:	4628      	mov	r0, r5
 800dc58:	47b8      	blx	r7
 800dc5a:	3001      	adds	r0, #1
 800dc5c:	d10e      	bne.n	800dc7c <_printf_float+0x418>
 800dc5e:	e65e      	b.n	800d91e <_printf_float+0xba>
 800dc60:	2301      	movs	r3, #1
 800dc62:	4652      	mov	r2, sl
 800dc64:	4631      	mov	r1, r6
 800dc66:	4628      	mov	r0, r5
 800dc68:	47b8      	blx	r7
 800dc6a:	3001      	adds	r0, #1
 800dc6c:	f43f ae57 	beq.w	800d91e <_printf_float+0xba>
 800dc70:	f108 0801 	add.w	r8, r8, #1
 800dc74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc76:	3b01      	subs	r3, #1
 800dc78:	4543      	cmp	r3, r8
 800dc7a:	dcf1      	bgt.n	800dc60 <_printf_float+0x3fc>
 800dc7c:	464b      	mov	r3, r9
 800dc7e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800dc82:	e6de      	b.n	800da42 <_printf_float+0x1de>
 800dc84:	f04f 0800 	mov.w	r8, #0
 800dc88:	f104 0a1a 	add.w	sl, r4, #26
 800dc8c:	e7f2      	b.n	800dc74 <_printf_float+0x410>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	e7df      	b.n	800dc52 <_printf_float+0x3ee>
 800dc92:	2301      	movs	r3, #1
 800dc94:	464a      	mov	r2, r9
 800dc96:	4631      	mov	r1, r6
 800dc98:	4628      	mov	r0, r5
 800dc9a:	47b8      	blx	r7
 800dc9c:	3001      	adds	r0, #1
 800dc9e:	f43f ae3e 	beq.w	800d91e <_printf_float+0xba>
 800dca2:	f108 0801 	add.w	r8, r8, #1
 800dca6:	68e3      	ldr	r3, [r4, #12]
 800dca8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dcaa:	1a9b      	subs	r3, r3, r2
 800dcac:	4543      	cmp	r3, r8
 800dcae:	dcf0      	bgt.n	800dc92 <_printf_float+0x42e>
 800dcb0:	e6fc      	b.n	800daac <_printf_float+0x248>
 800dcb2:	f04f 0800 	mov.w	r8, #0
 800dcb6:	f104 0919 	add.w	r9, r4, #25
 800dcba:	e7f4      	b.n	800dca6 <_printf_float+0x442>
 800dcbc:	2900      	cmp	r1, #0
 800dcbe:	f43f ae8b 	beq.w	800d9d8 <_printf_float+0x174>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dcc8:	ab09      	add	r3, sp, #36	; 0x24
 800dcca:	9300      	str	r3, [sp, #0]
 800dccc:	ec49 8b10 	vmov	d0, r8, r9
 800dcd0:	6022      	str	r2, [r4, #0]
 800dcd2:	f8cd a004 	str.w	sl, [sp, #4]
 800dcd6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dcda:	4628      	mov	r0, r5
 800dcdc:	f7ff fd2e 	bl	800d73c <__cvt>
 800dce0:	4680      	mov	r8, r0
 800dce2:	e648      	b.n	800d976 <_printf_float+0x112>

0800dce4 <_printf_common>:
 800dce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce8:	4691      	mov	r9, r2
 800dcea:	461f      	mov	r7, r3
 800dcec:	688a      	ldr	r2, [r1, #8]
 800dcee:	690b      	ldr	r3, [r1, #16]
 800dcf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dcf4:	4293      	cmp	r3, r2
 800dcf6:	bfb8      	it	lt
 800dcf8:	4613      	movlt	r3, r2
 800dcfa:	f8c9 3000 	str.w	r3, [r9]
 800dcfe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dd02:	4606      	mov	r6, r0
 800dd04:	460c      	mov	r4, r1
 800dd06:	b112      	cbz	r2, 800dd0e <_printf_common+0x2a>
 800dd08:	3301      	adds	r3, #1
 800dd0a:	f8c9 3000 	str.w	r3, [r9]
 800dd0e:	6823      	ldr	r3, [r4, #0]
 800dd10:	0699      	lsls	r1, r3, #26
 800dd12:	bf42      	ittt	mi
 800dd14:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dd18:	3302      	addmi	r3, #2
 800dd1a:	f8c9 3000 	strmi.w	r3, [r9]
 800dd1e:	6825      	ldr	r5, [r4, #0]
 800dd20:	f015 0506 	ands.w	r5, r5, #6
 800dd24:	d107      	bne.n	800dd36 <_printf_common+0x52>
 800dd26:	f104 0a19 	add.w	sl, r4, #25
 800dd2a:	68e3      	ldr	r3, [r4, #12]
 800dd2c:	f8d9 2000 	ldr.w	r2, [r9]
 800dd30:	1a9b      	subs	r3, r3, r2
 800dd32:	42ab      	cmp	r3, r5
 800dd34:	dc28      	bgt.n	800dd88 <_printf_common+0xa4>
 800dd36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800dd3a:	6822      	ldr	r2, [r4, #0]
 800dd3c:	3300      	adds	r3, #0
 800dd3e:	bf18      	it	ne
 800dd40:	2301      	movne	r3, #1
 800dd42:	0692      	lsls	r2, r2, #26
 800dd44:	d42d      	bmi.n	800dda2 <_printf_common+0xbe>
 800dd46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dd4a:	4639      	mov	r1, r7
 800dd4c:	4630      	mov	r0, r6
 800dd4e:	47c0      	blx	r8
 800dd50:	3001      	adds	r0, #1
 800dd52:	d020      	beq.n	800dd96 <_printf_common+0xb2>
 800dd54:	6823      	ldr	r3, [r4, #0]
 800dd56:	68e5      	ldr	r5, [r4, #12]
 800dd58:	f8d9 2000 	ldr.w	r2, [r9]
 800dd5c:	f003 0306 	and.w	r3, r3, #6
 800dd60:	2b04      	cmp	r3, #4
 800dd62:	bf08      	it	eq
 800dd64:	1aad      	subeq	r5, r5, r2
 800dd66:	68a3      	ldr	r3, [r4, #8]
 800dd68:	6922      	ldr	r2, [r4, #16]
 800dd6a:	bf0c      	ite	eq
 800dd6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd70:	2500      	movne	r5, #0
 800dd72:	4293      	cmp	r3, r2
 800dd74:	bfc4      	itt	gt
 800dd76:	1a9b      	subgt	r3, r3, r2
 800dd78:	18ed      	addgt	r5, r5, r3
 800dd7a:	f04f 0900 	mov.w	r9, #0
 800dd7e:	341a      	adds	r4, #26
 800dd80:	454d      	cmp	r5, r9
 800dd82:	d11a      	bne.n	800ddba <_printf_common+0xd6>
 800dd84:	2000      	movs	r0, #0
 800dd86:	e008      	b.n	800dd9a <_printf_common+0xb6>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	4652      	mov	r2, sl
 800dd8c:	4639      	mov	r1, r7
 800dd8e:	4630      	mov	r0, r6
 800dd90:	47c0      	blx	r8
 800dd92:	3001      	adds	r0, #1
 800dd94:	d103      	bne.n	800dd9e <_printf_common+0xba>
 800dd96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dd9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd9e:	3501      	adds	r5, #1
 800dda0:	e7c3      	b.n	800dd2a <_printf_common+0x46>
 800dda2:	18e1      	adds	r1, r4, r3
 800dda4:	1c5a      	adds	r2, r3, #1
 800dda6:	2030      	movs	r0, #48	; 0x30
 800dda8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ddac:	4422      	add	r2, r4
 800ddae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ddb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ddb6:	3302      	adds	r3, #2
 800ddb8:	e7c5      	b.n	800dd46 <_printf_common+0x62>
 800ddba:	2301      	movs	r3, #1
 800ddbc:	4622      	mov	r2, r4
 800ddbe:	4639      	mov	r1, r7
 800ddc0:	4630      	mov	r0, r6
 800ddc2:	47c0      	blx	r8
 800ddc4:	3001      	adds	r0, #1
 800ddc6:	d0e6      	beq.n	800dd96 <_printf_common+0xb2>
 800ddc8:	f109 0901 	add.w	r9, r9, #1
 800ddcc:	e7d8      	b.n	800dd80 <_printf_common+0x9c>
	...

0800ddd0 <_printf_i>:
 800ddd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ddd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ddd8:	460c      	mov	r4, r1
 800ddda:	7e09      	ldrb	r1, [r1, #24]
 800dddc:	b085      	sub	sp, #20
 800ddde:	296e      	cmp	r1, #110	; 0x6e
 800dde0:	4617      	mov	r7, r2
 800dde2:	4606      	mov	r6, r0
 800dde4:	4698      	mov	r8, r3
 800dde6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dde8:	f000 80b3 	beq.w	800df52 <_printf_i+0x182>
 800ddec:	d822      	bhi.n	800de34 <_printf_i+0x64>
 800ddee:	2963      	cmp	r1, #99	; 0x63
 800ddf0:	d036      	beq.n	800de60 <_printf_i+0x90>
 800ddf2:	d80a      	bhi.n	800de0a <_printf_i+0x3a>
 800ddf4:	2900      	cmp	r1, #0
 800ddf6:	f000 80b9 	beq.w	800df6c <_printf_i+0x19c>
 800ddfa:	2958      	cmp	r1, #88	; 0x58
 800ddfc:	f000 8083 	beq.w	800df06 <_printf_i+0x136>
 800de00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800de08:	e032      	b.n	800de70 <_printf_i+0xa0>
 800de0a:	2964      	cmp	r1, #100	; 0x64
 800de0c:	d001      	beq.n	800de12 <_printf_i+0x42>
 800de0e:	2969      	cmp	r1, #105	; 0x69
 800de10:	d1f6      	bne.n	800de00 <_printf_i+0x30>
 800de12:	6820      	ldr	r0, [r4, #0]
 800de14:	6813      	ldr	r3, [r2, #0]
 800de16:	0605      	lsls	r5, r0, #24
 800de18:	f103 0104 	add.w	r1, r3, #4
 800de1c:	d52a      	bpl.n	800de74 <_printf_i+0xa4>
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6011      	str	r1, [r2, #0]
 800de22:	2b00      	cmp	r3, #0
 800de24:	da03      	bge.n	800de2e <_printf_i+0x5e>
 800de26:	222d      	movs	r2, #45	; 0x2d
 800de28:	425b      	negs	r3, r3
 800de2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800de2e:	486f      	ldr	r0, [pc, #444]	; (800dfec <_printf_i+0x21c>)
 800de30:	220a      	movs	r2, #10
 800de32:	e039      	b.n	800dea8 <_printf_i+0xd8>
 800de34:	2973      	cmp	r1, #115	; 0x73
 800de36:	f000 809d 	beq.w	800df74 <_printf_i+0x1a4>
 800de3a:	d808      	bhi.n	800de4e <_printf_i+0x7e>
 800de3c:	296f      	cmp	r1, #111	; 0x6f
 800de3e:	d020      	beq.n	800de82 <_printf_i+0xb2>
 800de40:	2970      	cmp	r1, #112	; 0x70
 800de42:	d1dd      	bne.n	800de00 <_printf_i+0x30>
 800de44:	6823      	ldr	r3, [r4, #0]
 800de46:	f043 0320 	orr.w	r3, r3, #32
 800de4a:	6023      	str	r3, [r4, #0]
 800de4c:	e003      	b.n	800de56 <_printf_i+0x86>
 800de4e:	2975      	cmp	r1, #117	; 0x75
 800de50:	d017      	beq.n	800de82 <_printf_i+0xb2>
 800de52:	2978      	cmp	r1, #120	; 0x78
 800de54:	d1d4      	bne.n	800de00 <_printf_i+0x30>
 800de56:	2378      	movs	r3, #120	; 0x78
 800de58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800de5c:	4864      	ldr	r0, [pc, #400]	; (800dff0 <_printf_i+0x220>)
 800de5e:	e055      	b.n	800df0c <_printf_i+0x13c>
 800de60:	6813      	ldr	r3, [r2, #0]
 800de62:	1d19      	adds	r1, r3, #4
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	6011      	str	r1, [r2, #0]
 800de68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800de6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800de70:	2301      	movs	r3, #1
 800de72:	e08c      	b.n	800df8e <_printf_i+0x1be>
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	6011      	str	r1, [r2, #0]
 800de78:	f010 0f40 	tst.w	r0, #64	; 0x40
 800de7c:	bf18      	it	ne
 800de7e:	b21b      	sxthne	r3, r3
 800de80:	e7cf      	b.n	800de22 <_printf_i+0x52>
 800de82:	6813      	ldr	r3, [r2, #0]
 800de84:	6825      	ldr	r5, [r4, #0]
 800de86:	1d18      	adds	r0, r3, #4
 800de88:	6010      	str	r0, [r2, #0]
 800de8a:	0628      	lsls	r0, r5, #24
 800de8c:	d501      	bpl.n	800de92 <_printf_i+0xc2>
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	e002      	b.n	800de98 <_printf_i+0xc8>
 800de92:	0668      	lsls	r0, r5, #25
 800de94:	d5fb      	bpl.n	800de8e <_printf_i+0xbe>
 800de96:	881b      	ldrh	r3, [r3, #0]
 800de98:	4854      	ldr	r0, [pc, #336]	; (800dfec <_printf_i+0x21c>)
 800de9a:	296f      	cmp	r1, #111	; 0x6f
 800de9c:	bf14      	ite	ne
 800de9e:	220a      	movne	r2, #10
 800dea0:	2208      	moveq	r2, #8
 800dea2:	2100      	movs	r1, #0
 800dea4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dea8:	6865      	ldr	r5, [r4, #4]
 800deaa:	60a5      	str	r5, [r4, #8]
 800deac:	2d00      	cmp	r5, #0
 800deae:	f2c0 8095 	blt.w	800dfdc <_printf_i+0x20c>
 800deb2:	6821      	ldr	r1, [r4, #0]
 800deb4:	f021 0104 	bic.w	r1, r1, #4
 800deb8:	6021      	str	r1, [r4, #0]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d13d      	bne.n	800df3a <_printf_i+0x16a>
 800debe:	2d00      	cmp	r5, #0
 800dec0:	f040 808e 	bne.w	800dfe0 <_printf_i+0x210>
 800dec4:	4665      	mov	r5, ip
 800dec6:	2a08      	cmp	r2, #8
 800dec8:	d10b      	bne.n	800dee2 <_printf_i+0x112>
 800deca:	6823      	ldr	r3, [r4, #0]
 800decc:	07db      	lsls	r3, r3, #31
 800dece:	d508      	bpl.n	800dee2 <_printf_i+0x112>
 800ded0:	6923      	ldr	r3, [r4, #16]
 800ded2:	6862      	ldr	r2, [r4, #4]
 800ded4:	429a      	cmp	r2, r3
 800ded6:	bfde      	ittt	le
 800ded8:	2330      	movle	r3, #48	; 0x30
 800deda:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dede:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dee2:	ebac 0305 	sub.w	r3, ip, r5
 800dee6:	6123      	str	r3, [r4, #16]
 800dee8:	f8cd 8000 	str.w	r8, [sp]
 800deec:	463b      	mov	r3, r7
 800deee:	aa03      	add	r2, sp, #12
 800def0:	4621      	mov	r1, r4
 800def2:	4630      	mov	r0, r6
 800def4:	f7ff fef6 	bl	800dce4 <_printf_common>
 800def8:	3001      	adds	r0, #1
 800defa:	d14d      	bne.n	800df98 <_printf_i+0x1c8>
 800defc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800df00:	b005      	add	sp, #20
 800df02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df06:	4839      	ldr	r0, [pc, #228]	; (800dfec <_printf_i+0x21c>)
 800df08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800df0c:	6813      	ldr	r3, [r2, #0]
 800df0e:	6821      	ldr	r1, [r4, #0]
 800df10:	1d1d      	adds	r5, r3, #4
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6015      	str	r5, [r2, #0]
 800df16:	060a      	lsls	r2, r1, #24
 800df18:	d50b      	bpl.n	800df32 <_printf_i+0x162>
 800df1a:	07ca      	lsls	r2, r1, #31
 800df1c:	bf44      	itt	mi
 800df1e:	f041 0120 	orrmi.w	r1, r1, #32
 800df22:	6021      	strmi	r1, [r4, #0]
 800df24:	b91b      	cbnz	r3, 800df2e <_printf_i+0x15e>
 800df26:	6822      	ldr	r2, [r4, #0]
 800df28:	f022 0220 	bic.w	r2, r2, #32
 800df2c:	6022      	str	r2, [r4, #0]
 800df2e:	2210      	movs	r2, #16
 800df30:	e7b7      	b.n	800dea2 <_printf_i+0xd2>
 800df32:	064d      	lsls	r5, r1, #25
 800df34:	bf48      	it	mi
 800df36:	b29b      	uxthmi	r3, r3
 800df38:	e7ef      	b.n	800df1a <_printf_i+0x14a>
 800df3a:	4665      	mov	r5, ip
 800df3c:	fbb3 f1f2 	udiv	r1, r3, r2
 800df40:	fb02 3311 	mls	r3, r2, r1, r3
 800df44:	5cc3      	ldrb	r3, [r0, r3]
 800df46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800df4a:	460b      	mov	r3, r1
 800df4c:	2900      	cmp	r1, #0
 800df4e:	d1f5      	bne.n	800df3c <_printf_i+0x16c>
 800df50:	e7b9      	b.n	800dec6 <_printf_i+0xf6>
 800df52:	6813      	ldr	r3, [r2, #0]
 800df54:	6825      	ldr	r5, [r4, #0]
 800df56:	6961      	ldr	r1, [r4, #20]
 800df58:	1d18      	adds	r0, r3, #4
 800df5a:	6010      	str	r0, [r2, #0]
 800df5c:	0628      	lsls	r0, r5, #24
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	d501      	bpl.n	800df66 <_printf_i+0x196>
 800df62:	6019      	str	r1, [r3, #0]
 800df64:	e002      	b.n	800df6c <_printf_i+0x19c>
 800df66:	066a      	lsls	r2, r5, #25
 800df68:	d5fb      	bpl.n	800df62 <_printf_i+0x192>
 800df6a:	8019      	strh	r1, [r3, #0]
 800df6c:	2300      	movs	r3, #0
 800df6e:	6123      	str	r3, [r4, #16]
 800df70:	4665      	mov	r5, ip
 800df72:	e7b9      	b.n	800dee8 <_printf_i+0x118>
 800df74:	6813      	ldr	r3, [r2, #0]
 800df76:	1d19      	adds	r1, r3, #4
 800df78:	6011      	str	r1, [r2, #0]
 800df7a:	681d      	ldr	r5, [r3, #0]
 800df7c:	6862      	ldr	r2, [r4, #4]
 800df7e:	2100      	movs	r1, #0
 800df80:	4628      	mov	r0, r5
 800df82:	f7f2 f92d 	bl	80001e0 <memchr>
 800df86:	b108      	cbz	r0, 800df8c <_printf_i+0x1bc>
 800df88:	1b40      	subs	r0, r0, r5
 800df8a:	6060      	str	r0, [r4, #4]
 800df8c:	6863      	ldr	r3, [r4, #4]
 800df8e:	6123      	str	r3, [r4, #16]
 800df90:	2300      	movs	r3, #0
 800df92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df96:	e7a7      	b.n	800dee8 <_printf_i+0x118>
 800df98:	6923      	ldr	r3, [r4, #16]
 800df9a:	462a      	mov	r2, r5
 800df9c:	4639      	mov	r1, r7
 800df9e:	4630      	mov	r0, r6
 800dfa0:	47c0      	blx	r8
 800dfa2:	3001      	adds	r0, #1
 800dfa4:	d0aa      	beq.n	800defc <_printf_i+0x12c>
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	079b      	lsls	r3, r3, #30
 800dfaa:	d413      	bmi.n	800dfd4 <_printf_i+0x204>
 800dfac:	68e0      	ldr	r0, [r4, #12]
 800dfae:	9b03      	ldr	r3, [sp, #12]
 800dfb0:	4298      	cmp	r0, r3
 800dfb2:	bfb8      	it	lt
 800dfb4:	4618      	movlt	r0, r3
 800dfb6:	e7a3      	b.n	800df00 <_printf_i+0x130>
 800dfb8:	2301      	movs	r3, #1
 800dfba:	464a      	mov	r2, r9
 800dfbc:	4639      	mov	r1, r7
 800dfbe:	4630      	mov	r0, r6
 800dfc0:	47c0      	blx	r8
 800dfc2:	3001      	adds	r0, #1
 800dfc4:	d09a      	beq.n	800defc <_printf_i+0x12c>
 800dfc6:	3501      	adds	r5, #1
 800dfc8:	68e3      	ldr	r3, [r4, #12]
 800dfca:	9a03      	ldr	r2, [sp, #12]
 800dfcc:	1a9b      	subs	r3, r3, r2
 800dfce:	42ab      	cmp	r3, r5
 800dfd0:	dcf2      	bgt.n	800dfb8 <_printf_i+0x1e8>
 800dfd2:	e7eb      	b.n	800dfac <_printf_i+0x1dc>
 800dfd4:	2500      	movs	r5, #0
 800dfd6:	f104 0919 	add.w	r9, r4, #25
 800dfda:	e7f5      	b.n	800dfc8 <_printf_i+0x1f8>
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d1ac      	bne.n	800df3a <_printf_i+0x16a>
 800dfe0:	7803      	ldrb	r3, [r0, #0]
 800dfe2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dfe6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dfea:	e76c      	b.n	800dec6 <_printf_i+0xf6>
 800dfec:	0801281a 	.word	0x0801281a
 800dff0:	0801282b 	.word	0x0801282b

0800dff4 <_scanf_float>:
 800dff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dff8:	469a      	mov	sl, r3
 800dffa:	688b      	ldr	r3, [r1, #8]
 800dffc:	4616      	mov	r6, r2
 800dffe:	1e5a      	subs	r2, r3, #1
 800e000:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800e004:	b087      	sub	sp, #28
 800e006:	bf83      	ittte	hi
 800e008:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800e00c:	189b      	addhi	r3, r3, r2
 800e00e:	9301      	strhi	r3, [sp, #4]
 800e010:	2300      	movls	r3, #0
 800e012:	bf86      	itte	hi
 800e014:	f240 135d 	movwhi	r3, #349	; 0x15d
 800e018:	608b      	strhi	r3, [r1, #8]
 800e01a:	9301      	strls	r3, [sp, #4]
 800e01c:	680b      	ldr	r3, [r1, #0]
 800e01e:	4688      	mov	r8, r1
 800e020:	f04f 0b00 	mov.w	fp, #0
 800e024:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800e028:	f848 3b1c 	str.w	r3, [r8], #28
 800e02c:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800e030:	4607      	mov	r7, r0
 800e032:	460c      	mov	r4, r1
 800e034:	4645      	mov	r5, r8
 800e036:	465a      	mov	r2, fp
 800e038:	46d9      	mov	r9, fp
 800e03a:	f8cd b008 	str.w	fp, [sp, #8]
 800e03e:	68a1      	ldr	r1, [r4, #8]
 800e040:	b181      	cbz	r1, 800e064 <_scanf_float+0x70>
 800e042:	6833      	ldr	r3, [r6, #0]
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	2b49      	cmp	r3, #73	; 0x49
 800e048:	d071      	beq.n	800e12e <_scanf_float+0x13a>
 800e04a:	d84d      	bhi.n	800e0e8 <_scanf_float+0xf4>
 800e04c:	2b39      	cmp	r3, #57	; 0x39
 800e04e:	d840      	bhi.n	800e0d2 <_scanf_float+0xde>
 800e050:	2b31      	cmp	r3, #49	; 0x31
 800e052:	f080 8088 	bcs.w	800e166 <_scanf_float+0x172>
 800e056:	2b2d      	cmp	r3, #45	; 0x2d
 800e058:	f000 8090 	beq.w	800e17c <_scanf_float+0x188>
 800e05c:	d815      	bhi.n	800e08a <_scanf_float+0x96>
 800e05e:	2b2b      	cmp	r3, #43	; 0x2b
 800e060:	f000 808c 	beq.w	800e17c <_scanf_float+0x188>
 800e064:	f1b9 0f00 	cmp.w	r9, #0
 800e068:	d003      	beq.n	800e072 <_scanf_float+0x7e>
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e070:	6023      	str	r3, [r4, #0]
 800e072:	3a01      	subs	r2, #1
 800e074:	2a01      	cmp	r2, #1
 800e076:	f200 80ea 	bhi.w	800e24e <_scanf_float+0x25a>
 800e07a:	4545      	cmp	r5, r8
 800e07c:	f200 80dc 	bhi.w	800e238 <_scanf_float+0x244>
 800e080:	2601      	movs	r6, #1
 800e082:	4630      	mov	r0, r6
 800e084:	b007      	add	sp, #28
 800e086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08a:	2b2e      	cmp	r3, #46	; 0x2e
 800e08c:	f000 809f 	beq.w	800e1ce <_scanf_float+0x1da>
 800e090:	2b30      	cmp	r3, #48	; 0x30
 800e092:	d1e7      	bne.n	800e064 <_scanf_float+0x70>
 800e094:	6820      	ldr	r0, [r4, #0]
 800e096:	f410 7f80 	tst.w	r0, #256	; 0x100
 800e09a:	d064      	beq.n	800e166 <_scanf_float+0x172>
 800e09c:	9b01      	ldr	r3, [sp, #4]
 800e09e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800e0a2:	6020      	str	r0, [r4, #0]
 800e0a4:	f109 0901 	add.w	r9, r9, #1
 800e0a8:	b11b      	cbz	r3, 800e0b2 <_scanf_float+0xbe>
 800e0aa:	3b01      	subs	r3, #1
 800e0ac:	3101      	adds	r1, #1
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	60a1      	str	r1, [r4, #8]
 800e0b2:	68a3      	ldr	r3, [r4, #8]
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	60a3      	str	r3, [r4, #8]
 800e0b8:	6923      	ldr	r3, [r4, #16]
 800e0ba:	3301      	adds	r3, #1
 800e0bc:	6123      	str	r3, [r4, #16]
 800e0be:	6873      	ldr	r3, [r6, #4]
 800e0c0:	3b01      	subs	r3, #1
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	6073      	str	r3, [r6, #4]
 800e0c6:	f340 80ac 	ble.w	800e222 <_scanf_float+0x22e>
 800e0ca:	6833      	ldr	r3, [r6, #0]
 800e0cc:	3301      	adds	r3, #1
 800e0ce:	6033      	str	r3, [r6, #0]
 800e0d0:	e7b5      	b.n	800e03e <_scanf_float+0x4a>
 800e0d2:	2b45      	cmp	r3, #69	; 0x45
 800e0d4:	f000 8085 	beq.w	800e1e2 <_scanf_float+0x1ee>
 800e0d8:	2b46      	cmp	r3, #70	; 0x46
 800e0da:	d06a      	beq.n	800e1b2 <_scanf_float+0x1be>
 800e0dc:	2b41      	cmp	r3, #65	; 0x41
 800e0de:	d1c1      	bne.n	800e064 <_scanf_float+0x70>
 800e0e0:	2a01      	cmp	r2, #1
 800e0e2:	d1bf      	bne.n	800e064 <_scanf_float+0x70>
 800e0e4:	2202      	movs	r2, #2
 800e0e6:	e046      	b.n	800e176 <_scanf_float+0x182>
 800e0e8:	2b65      	cmp	r3, #101	; 0x65
 800e0ea:	d07a      	beq.n	800e1e2 <_scanf_float+0x1ee>
 800e0ec:	d818      	bhi.n	800e120 <_scanf_float+0x12c>
 800e0ee:	2b54      	cmp	r3, #84	; 0x54
 800e0f0:	d066      	beq.n	800e1c0 <_scanf_float+0x1cc>
 800e0f2:	d811      	bhi.n	800e118 <_scanf_float+0x124>
 800e0f4:	2b4e      	cmp	r3, #78	; 0x4e
 800e0f6:	d1b5      	bne.n	800e064 <_scanf_float+0x70>
 800e0f8:	2a00      	cmp	r2, #0
 800e0fa:	d146      	bne.n	800e18a <_scanf_float+0x196>
 800e0fc:	f1b9 0f00 	cmp.w	r9, #0
 800e100:	d145      	bne.n	800e18e <_scanf_float+0x19a>
 800e102:	6821      	ldr	r1, [r4, #0]
 800e104:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e108:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e10c:	d13f      	bne.n	800e18e <_scanf_float+0x19a>
 800e10e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e112:	6021      	str	r1, [r4, #0]
 800e114:	2201      	movs	r2, #1
 800e116:	e02e      	b.n	800e176 <_scanf_float+0x182>
 800e118:	2b59      	cmp	r3, #89	; 0x59
 800e11a:	d01e      	beq.n	800e15a <_scanf_float+0x166>
 800e11c:	2b61      	cmp	r3, #97	; 0x61
 800e11e:	e7de      	b.n	800e0de <_scanf_float+0xea>
 800e120:	2b6e      	cmp	r3, #110	; 0x6e
 800e122:	d0e9      	beq.n	800e0f8 <_scanf_float+0x104>
 800e124:	d815      	bhi.n	800e152 <_scanf_float+0x15e>
 800e126:	2b66      	cmp	r3, #102	; 0x66
 800e128:	d043      	beq.n	800e1b2 <_scanf_float+0x1be>
 800e12a:	2b69      	cmp	r3, #105	; 0x69
 800e12c:	d19a      	bne.n	800e064 <_scanf_float+0x70>
 800e12e:	f1bb 0f00 	cmp.w	fp, #0
 800e132:	d138      	bne.n	800e1a6 <_scanf_float+0x1b2>
 800e134:	f1b9 0f00 	cmp.w	r9, #0
 800e138:	d197      	bne.n	800e06a <_scanf_float+0x76>
 800e13a:	6821      	ldr	r1, [r4, #0]
 800e13c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800e140:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800e144:	d195      	bne.n	800e072 <_scanf_float+0x7e>
 800e146:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e14a:	6021      	str	r1, [r4, #0]
 800e14c:	f04f 0b01 	mov.w	fp, #1
 800e150:	e011      	b.n	800e176 <_scanf_float+0x182>
 800e152:	2b74      	cmp	r3, #116	; 0x74
 800e154:	d034      	beq.n	800e1c0 <_scanf_float+0x1cc>
 800e156:	2b79      	cmp	r3, #121	; 0x79
 800e158:	d184      	bne.n	800e064 <_scanf_float+0x70>
 800e15a:	f1bb 0f07 	cmp.w	fp, #7
 800e15e:	d181      	bne.n	800e064 <_scanf_float+0x70>
 800e160:	f04f 0b08 	mov.w	fp, #8
 800e164:	e007      	b.n	800e176 <_scanf_float+0x182>
 800e166:	eb12 0f0b 	cmn.w	r2, fp
 800e16a:	f47f af7b 	bne.w	800e064 <_scanf_float+0x70>
 800e16e:	6821      	ldr	r1, [r4, #0]
 800e170:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800e174:	6021      	str	r1, [r4, #0]
 800e176:	702b      	strb	r3, [r5, #0]
 800e178:	3501      	adds	r5, #1
 800e17a:	e79a      	b.n	800e0b2 <_scanf_float+0xbe>
 800e17c:	6821      	ldr	r1, [r4, #0]
 800e17e:	0608      	lsls	r0, r1, #24
 800e180:	f57f af70 	bpl.w	800e064 <_scanf_float+0x70>
 800e184:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800e188:	e7f4      	b.n	800e174 <_scanf_float+0x180>
 800e18a:	2a02      	cmp	r2, #2
 800e18c:	d047      	beq.n	800e21e <_scanf_float+0x22a>
 800e18e:	f1bb 0f01 	cmp.w	fp, #1
 800e192:	d003      	beq.n	800e19c <_scanf_float+0x1a8>
 800e194:	f1bb 0f04 	cmp.w	fp, #4
 800e198:	f47f af64 	bne.w	800e064 <_scanf_float+0x70>
 800e19c:	f10b 0b01 	add.w	fp, fp, #1
 800e1a0:	fa5f fb8b 	uxtb.w	fp, fp
 800e1a4:	e7e7      	b.n	800e176 <_scanf_float+0x182>
 800e1a6:	f1bb 0f03 	cmp.w	fp, #3
 800e1aa:	d0f7      	beq.n	800e19c <_scanf_float+0x1a8>
 800e1ac:	f1bb 0f05 	cmp.w	fp, #5
 800e1b0:	e7f2      	b.n	800e198 <_scanf_float+0x1a4>
 800e1b2:	f1bb 0f02 	cmp.w	fp, #2
 800e1b6:	f47f af55 	bne.w	800e064 <_scanf_float+0x70>
 800e1ba:	f04f 0b03 	mov.w	fp, #3
 800e1be:	e7da      	b.n	800e176 <_scanf_float+0x182>
 800e1c0:	f1bb 0f06 	cmp.w	fp, #6
 800e1c4:	f47f af4e 	bne.w	800e064 <_scanf_float+0x70>
 800e1c8:	f04f 0b07 	mov.w	fp, #7
 800e1cc:	e7d3      	b.n	800e176 <_scanf_float+0x182>
 800e1ce:	6821      	ldr	r1, [r4, #0]
 800e1d0:	0588      	lsls	r0, r1, #22
 800e1d2:	f57f af47 	bpl.w	800e064 <_scanf_float+0x70>
 800e1d6:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800e1da:	6021      	str	r1, [r4, #0]
 800e1dc:	f8cd 9008 	str.w	r9, [sp, #8]
 800e1e0:	e7c9      	b.n	800e176 <_scanf_float+0x182>
 800e1e2:	6821      	ldr	r1, [r4, #0]
 800e1e4:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800e1e8:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800e1ec:	d006      	beq.n	800e1fc <_scanf_float+0x208>
 800e1ee:	0548      	lsls	r0, r1, #21
 800e1f0:	f57f af38 	bpl.w	800e064 <_scanf_float+0x70>
 800e1f4:	f1b9 0f00 	cmp.w	r9, #0
 800e1f8:	f43f af3b 	beq.w	800e072 <_scanf_float+0x7e>
 800e1fc:	0588      	lsls	r0, r1, #22
 800e1fe:	bf58      	it	pl
 800e200:	9802      	ldrpl	r0, [sp, #8]
 800e202:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800e206:	bf58      	it	pl
 800e208:	eba9 0000 	subpl.w	r0, r9, r0
 800e20c:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800e210:	bf58      	it	pl
 800e212:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800e216:	6021      	str	r1, [r4, #0]
 800e218:	f04f 0900 	mov.w	r9, #0
 800e21c:	e7ab      	b.n	800e176 <_scanf_float+0x182>
 800e21e:	2203      	movs	r2, #3
 800e220:	e7a9      	b.n	800e176 <_scanf_float+0x182>
 800e222:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800e226:	9205      	str	r2, [sp, #20]
 800e228:	4631      	mov	r1, r6
 800e22a:	4638      	mov	r0, r7
 800e22c:	4798      	blx	r3
 800e22e:	9a05      	ldr	r2, [sp, #20]
 800e230:	2800      	cmp	r0, #0
 800e232:	f43f af04 	beq.w	800e03e <_scanf_float+0x4a>
 800e236:	e715      	b.n	800e064 <_scanf_float+0x70>
 800e238:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e23c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e240:	4632      	mov	r2, r6
 800e242:	4638      	mov	r0, r7
 800e244:	4798      	blx	r3
 800e246:	6923      	ldr	r3, [r4, #16]
 800e248:	3b01      	subs	r3, #1
 800e24a:	6123      	str	r3, [r4, #16]
 800e24c:	e715      	b.n	800e07a <_scanf_float+0x86>
 800e24e:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800e252:	2b06      	cmp	r3, #6
 800e254:	d80a      	bhi.n	800e26c <_scanf_float+0x278>
 800e256:	f1bb 0f02 	cmp.w	fp, #2
 800e25a:	d968      	bls.n	800e32e <_scanf_float+0x33a>
 800e25c:	f1ab 0b03 	sub.w	fp, fp, #3
 800e260:	fa5f fb8b 	uxtb.w	fp, fp
 800e264:	eba5 0b0b 	sub.w	fp, r5, fp
 800e268:	455d      	cmp	r5, fp
 800e26a:	d14b      	bne.n	800e304 <_scanf_float+0x310>
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	05da      	lsls	r2, r3, #23
 800e270:	d51f      	bpl.n	800e2b2 <_scanf_float+0x2be>
 800e272:	055b      	lsls	r3, r3, #21
 800e274:	d468      	bmi.n	800e348 <_scanf_float+0x354>
 800e276:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e27a:	6923      	ldr	r3, [r4, #16]
 800e27c:	2965      	cmp	r1, #101	; 0x65
 800e27e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e282:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800e286:	6123      	str	r3, [r4, #16]
 800e288:	d00d      	beq.n	800e2a6 <_scanf_float+0x2b2>
 800e28a:	2945      	cmp	r1, #69	; 0x45
 800e28c:	d00b      	beq.n	800e2a6 <_scanf_float+0x2b2>
 800e28e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e292:	4632      	mov	r2, r6
 800e294:	4638      	mov	r0, r7
 800e296:	4798      	blx	r3
 800e298:	6923      	ldr	r3, [r4, #16]
 800e29a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e29e:	3b01      	subs	r3, #1
 800e2a0:	f1a5 0b02 	sub.w	fp, r5, #2
 800e2a4:	6123      	str	r3, [r4, #16]
 800e2a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e2aa:	4632      	mov	r2, r6
 800e2ac:	4638      	mov	r0, r7
 800e2ae:	4798      	blx	r3
 800e2b0:	465d      	mov	r5, fp
 800e2b2:	6826      	ldr	r6, [r4, #0]
 800e2b4:	f016 0610 	ands.w	r6, r6, #16
 800e2b8:	d17a      	bne.n	800e3b0 <_scanf_float+0x3bc>
 800e2ba:	702e      	strb	r6, [r5, #0]
 800e2bc:	6823      	ldr	r3, [r4, #0]
 800e2be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e2c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e2c6:	d142      	bne.n	800e34e <_scanf_float+0x35a>
 800e2c8:	9b02      	ldr	r3, [sp, #8]
 800e2ca:	eba9 0303 	sub.w	r3, r9, r3
 800e2ce:	425a      	negs	r2, r3
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d149      	bne.n	800e368 <_scanf_float+0x374>
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	4641      	mov	r1, r8
 800e2d8:	4638      	mov	r0, r7
 800e2da:	f000 fee9 	bl	800f0b0 <_strtod_r>
 800e2de:	6825      	ldr	r5, [r4, #0]
 800e2e0:	f8da 3000 	ldr.w	r3, [sl]
 800e2e4:	f015 0f02 	tst.w	r5, #2
 800e2e8:	f103 0204 	add.w	r2, r3, #4
 800e2ec:	ec59 8b10 	vmov	r8, r9, d0
 800e2f0:	f8ca 2000 	str.w	r2, [sl]
 800e2f4:	d043      	beq.n	800e37e <_scanf_float+0x38a>
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	e9c3 8900 	strd	r8, r9, [r3]
 800e2fc:	68e3      	ldr	r3, [r4, #12]
 800e2fe:	3301      	adds	r3, #1
 800e300:	60e3      	str	r3, [r4, #12]
 800e302:	e6be      	b.n	800e082 <_scanf_float+0x8e>
 800e304:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e308:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e30c:	4632      	mov	r2, r6
 800e30e:	4638      	mov	r0, r7
 800e310:	4798      	blx	r3
 800e312:	6923      	ldr	r3, [r4, #16]
 800e314:	3b01      	subs	r3, #1
 800e316:	6123      	str	r3, [r4, #16]
 800e318:	e7a6      	b.n	800e268 <_scanf_float+0x274>
 800e31a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e31e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e322:	4632      	mov	r2, r6
 800e324:	4638      	mov	r0, r7
 800e326:	4798      	blx	r3
 800e328:	6923      	ldr	r3, [r4, #16]
 800e32a:	3b01      	subs	r3, #1
 800e32c:	6123      	str	r3, [r4, #16]
 800e32e:	4545      	cmp	r5, r8
 800e330:	d8f3      	bhi.n	800e31a <_scanf_float+0x326>
 800e332:	e6a5      	b.n	800e080 <_scanf_float+0x8c>
 800e334:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e338:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e33c:	4632      	mov	r2, r6
 800e33e:	4638      	mov	r0, r7
 800e340:	4798      	blx	r3
 800e342:	6923      	ldr	r3, [r4, #16]
 800e344:	3b01      	subs	r3, #1
 800e346:	6123      	str	r3, [r4, #16]
 800e348:	4545      	cmp	r5, r8
 800e34a:	d8f3      	bhi.n	800e334 <_scanf_float+0x340>
 800e34c:	e698      	b.n	800e080 <_scanf_float+0x8c>
 800e34e:	9b03      	ldr	r3, [sp, #12]
 800e350:	2b00      	cmp	r3, #0
 800e352:	d0bf      	beq.n	800e2d4 <_scanf_float+0x2e0>
 800e354:	9904      	ldr	r1, [sp, #16]
 800e356:	230a      	movs	r3, #10
 800e358:	4632      	mov	r2, r6
 800e35a:	3101      	adds	r1, #1
 800e35c:	4638      	mov	r0, r7
 800e35e:	f000 ff33 	bl	800f1c8 <_strtol_r>
 800e362:	9b03      	ldr	r3, [sp, #12]
 800e364:	9d04      	ldr	r5, [sp, #16]
 800e366:	1ac2      	subs	r2, r0, r3
 800e368:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e36c:	429d      	cmp	r5, r3
 800e36e:	bf28      	it	cs
 800e370:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e374:	490f      	ldr	r1, [pc, #60]	; (800e3b4 <_scanf_float+0x3c0>)
 800e376:	4628      	mov	r0, r5
 800e378:	f000 f858 	bl	800e42c <siprintf>
 800e37c:	e7aa      	b.n	800e2d4 <_scanf_float+0x2e0>
 800e37e:	f015 0504 	ands.w	r5, r5, #4
 800e382:	d1b8      	bne.n	800e2f6 <_scanf_float+0x302>
 800e384:	681f      	ldr	r7, [r3, #0]
 800e386:	ee10 2a10 	vmov	r2, s0
 800e38a:	464b      	mov	r3, r9
 800e38c:	ee10 0a10 	vmov	r0, s0
 800e390:	4649      	mov	r1, r9
 800e392:	f7f2 fbcb 	bl	8000b2c <__aeabi_dcmpun>
 800e396:	b128      	cbz	r0, 800e3a4 <_scanf_float+0x3b0>
 800e398:	4628      	mov	r0, r5
 800e39a:	f000 f80d 	bl	800e3b8 <nanf>
 800e39e:	ed87 0a00 	vstr	s0, [r7]
 800e3a2:	e7ab      	b.n	800e2fc <_scanf_float+0x308>
 800e3a4:	4640      	mov	r0, r8
 800e3a6:	4649      	mov	r1, r9
 800e3a8:	f7f2 fc1e 	bl	8000be8 <__aeabi_d2f>
 800e3ac:	6038      	str	r0, [r7, #0]
 800e3ae:	e7a5      	b.n	800e2fc <_scanf_float+0x308>
 800e3b0:	2600      	movs	r6, #0
 800e3b2:	e666      	b.n	800e082 <_scanf_float+0x8e>
 800e3b4:	0801283c 	.word	0x0801283c

0800e3b8 <nanf>:
 800e3b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e3c0 <nanf+0x8>
 800e3bc:	4770      	bx	lr
 800e3be:	bf00      	nop
 800e3c0:	7fc00000 	.word	0x7fc00000

0800e3c4 <sniprintf>:
 800e3c4:	b40c      	push	{r2, r3}
 800e3c6:	b530      	push	{r4, r5, lr}
 800e3c8:	4b17      	ldr	r3, [pc, #92]	; (800e428 <sniprintf+0x64>)
 800e3ca:	1e0c      	subs	r4, r1, #0
 800e3cc:	b09d      	sub	sp, #116	; 0x74
 800e3ce:	681d      	ldr	r5, [r3, #0]
 800e3d0:	da08      	bge.n	800e3e4 <sniprintf+0x20>
 800e3d2:	238b      	movs	r3, #139	; 0x8b
 800e3d4:	602b      	str	r3, [r5, #0]
 800e3d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e3da:	b01d      	add	sp, #116	; 0x74
 800e3dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e3e0:	b002      	add	sp, #8
 800e3e2:	4770      	bx	lr
 800e3e4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e3e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e3ec:	bf14      	ite	ne
 800e3ee:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e3f2:	4623      	moveq	r3, r4
 800e3f4:	9304      	str	r3, [sp, #16]
 800e3f6:	9307      	str	r3, [sp, #28]
 800e3f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e3fc:	9002      	str	r0, [sp, #8]
 800e3fe:	9006      	str	r0, [sp, #24]
 800e400:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e404:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e406:	ab21      	add	r3, sp, #132	; 0x84
 800e408:	a902      	add	r1, sp, #8
 800e40a:	4628      	mov	r0, r5
 800e40c:	9301      	str	r3, [sp, #4]
 800e40e:	f002 fda1 	bl	8010f54 <_svfiprintf_r>
 800e412:	1c43      	adds	r3, r0, #1
 800e414:	bfbc      	itt	lt
 800e416:	238b      	movlt	r3, #139	; 0x8b
 800e418:	602b      	strlt	r3, [r5, #0]
 800e41a:	2c00      	cmp	r4, #0
 800e41c:	d0dd      	beq.n	800e3da <sniprintf+0x16>
 800e41e:	9b02      	ldr	r3, [sp, #8]
 800e420:	2200      	movs	r2, #0
 800e422:	701a      	strb	r2, [r3, #0]
 800e424:	e7d9      	b.n	800e3da <sniprintf+0x16>
 800e426:	bf00      	nop
 800e428:	20000044 	.word	0x20000044

0800e42c <siprintf>:
 800e42c:	b40e      	push	{r1, r2, r3}
 800e42e:	b500      	push	{lr}
 800e430:	b09c      	sub	sp, #112	; 0x70
 800e432:	ab1d      	add	r3, sp, #116	; 0x74
 800e434:	9002      	str	r0, [sp, #8]
 800e436:	9006      	str	r0, [sp, #24]
 800e438:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e43c:	4809      	ldr	r0, [pc, #36]	; (800e464 <siprintf+0x38>)
 800e43e:	9107      	str	r1, [sp, #28]
 800e440:	9104      	str	r1, [sp, #16]
 800e442:	4909      	ldr	r1, [pc, #36]	; (800e468 <siprintf+0x3c>)
 800e444:	f853 2b04 	ldr.w	r2, [r3], #4
 800e448:	9105      	str	r1, [sp, #20]
 800e44a:	6800      	ldr	r0, [r0, #0]
 800e44c:	9301      	str	r3, [sp, #4]
 800e44e:	a902      	add	r1, sp, #8
 800e450:	f002 fd80 	bl	8010f54 <_svfiprintf_r>
 800e454:	9b02      	ldr	r3, [sp, #8]
 800e456:	2200      	movs	r2, #0
 800e458:	701a      	strb	r2, [r3, #0]
 800e45a:	b01c      	add	sp, #112	; 0x70
 800e45c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e460:	b003      	add	sp, #12
 800e462:	4770      	bx	lr
 800e464:	20000044 	.word	0x20000044
 800e468:	ffff0208 	.word	0xffff0208

0800e46c <strcat>:
 800e46c:	b510      	push	{r4, lr}
 800e46e:	4603      	mov	r3, r0
 800e470:	781a      	ldrb	r2, [r3, #0]
 800e472:	1c5c      	adds	r4, r3, #1
 800e474:	b93a      	cbnz	r2, 800e486 <strcat+0x1a>
 800e476:	3b01      	subs	r3, #1
 800e478:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e47c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e480:	2a00      	cmp	r2, #0
 800e482:	d1f9      	bne.n	800e478 <strcat+0xc>
 800e484:	bd10      	pop	{r4, pc}
 800e486:	4623      	mov	r3, r4
 800e488:	e7f2      	b.n	800e470 <strcat+0x4>

0800e48a <sulp>:
 800e48a:	b570      	push	{r4, r5, r6, lr}
 800e48c:	4604      	mov	r4, r0
 800e48e:	460d      	mov	r5, r1
 800e490:	ec45 4b10 	vmov	d0, r4, r5
 800e494:	4616      	mov	r6, r2
 800e496:	f002 fb19 	bl	8010acc <__ulp>
 800e49a:	ec51 0b10 	vmov	r0, r1, d0
 800e49e:	b17e      	cbz	r6, 800e4c0 <sulp+0x36>
 800e4a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e4a4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	dd09      	ble.n	800e4c0 <sulp+0x36>
 800e4ac:	051b      	lsls	r3, r3, #20
 800e4ae:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e4b2:	2400      	movs	r4, #0
 800e4b4:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e4b8:	4622      	mov	r2, r4
 800e4ba:	462b      	mov	r3, r5
 800e4bc:	f7f2 f89c 	bl	80005f8 <__aeabi_dmul>
 800e4c0:	bd70      	pop	{r4, r5, r6, pc}
 800e4c2:	0000      	movs	r0, r0
 800e4c4:	0000      	movs	r0, r0
	...

0800e4c8 <_strtod_l>:
 800e4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	461f      	mov	r7, r3
 800e4ce:	b0a1      	sub	sp, #132	; 0x84
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	4681      	mov	r9, r0
 800e4d4:	4638      	mov	r0, r7
 800e4d6:	460e      	mov	r6, r1
 800e4d8:	9217      	str	r2, [sp, #92]	; 0x5c
 800e4da:	931c      	str	r3, [sp, #112]	; 0x70
 800e4dc:	f001 fff5 	bl	80104ca <__localeconv_l>
 800e4e0:	4680      	mov	r8, r0
 800e4e2:	6800      	ldr	r0, [r0, #0]
 800e4e4:	f7f1 fe74 	bl	80001d0 <strlen>
 800e4e8:	f04f 0a00 	mov.w	sl, #0
 800e4ec:	4604      	mov	r4, r0
 800e4ee:	f04f 0b00 	mov.w	fp, #0
 800e4f2:	961b      	str	r6, [sp, #108]	; 0x6c
 800e4f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4f6:	781a      	ldrb	r2, [r3, #0]
 800e4f8:	2a0d      	cmp	r2, #13
 800e4fa:	d832      	bhi.n	800e562 <_strtod_l+0x9a>
 800e4fc:	2a09      	cmp	r2, #9
 800e4fe:	d236      	bcs.n	800e56e <_strtod_l+0xa6>
 800e500:	2a00      	cmp	r2, #0
 800e502:	d03e      	beq.n	800e582 <_strtod_l+0xba>
 800e504:	2300      	movs	r3, #0
 800e506:	930d      	str	r3, [sp, #52]	; 0x34
 800e508:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e50a:	782b      	ldrb	r3, [r5, #0]
 800e50c:	2b30      	cmp	r3, #48	; 0x30
 800e50e:	f040 80ac 	bne.w	800e66a <_strtod_l+0x1a2>
 800e512:	786b      	ldrb	r3, [r5, #1]
 800e514:	2b58      	cmp	r3, #88	; 0x58
 800e516:	d001      	beq.n	800e51c <_strtod_l+0x54>
 800e518:	2b78      	cmp	r3, #120	; 0x78
 800e51a:	d167      	bne.n	800e5ec <_strtod_l+0x124>
 800e51c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e51e:	9301      	str	r3, [sp, #4]
 800e520:	ab1c      	add	r3, sp, #112	; 0x70
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	9702      	str	r7, [sp, #8]
 800e526:	ab1d      	add	r3, sp, #116	; 0x74
 800e528:	4a88      	ldr	r2, [pc, #544]	; (800e74c <_strtod_l+0x284>)
 800e52a:	a91b      	add	r1, sp, #108	; 0x6c
 800e52c:	4648      	mov	r0, r9
 800e52e:	f001 fcf2 	bl	800ff16 <__gethex>
 800e532:	f010 0407 	ands.w	r4, r0, #7
 800e536:	4606      	mov	r6, r0
 800e538:	d005      	beq.n	800e546 <_strtod_l+0x7e>
 800e53a:	2c06      	cmp	r4, #6
 800e53c:	d12b      	bne.n	800e596 <_strtod_l+0xce>
 800e53e:	3501      	adds	r5, #1
 800e540:	2300      	movs	r3, #0
 800e542:	951b      	str	r5, [sp, #108]	; 0x6c
 800e544:	930d      	str	r3, [sp, #52]	; 0x34
 800e546:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e548:	2b00      	cmp	r3, #0
 800e54a:	f040 859a 	bne.w	800f082 <_strtod_l+0xbba>
 800e54e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e550:	b1e3      	cbz	r3, 800e58c <_strtod_l+0xc4>
 800e552:	4652      	mov	r2, sl
 800e554:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e558:	ec43 2b10 	vmov	d0, r2, r3
 800e55c:	b021      	add	sp, #132	; 0x84
 800e55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e562:	2a2b      	cmp	r2, #43	; 0x2b
 800e564:	d015      	beq.n	800e592 <_strtod_l+0xca>
 800e566:	2a2d      	cmp	r2, #45	; 0x2d
 800e568:	d004      	beq.n	800e574 <_strtod_l+0xac>
 800e56a:	2a20      	cmp	r2, #32
 800e56c:	d1ca      	bne.n	800e504 <_strtod_l+0x3c>
 800e56e:	3301      	adds	r3, #1
 800e570:	931b      	str	r3, [sp, #108]	; 0x6c
 800e572:	e7bf      	b.n	800e4f4 <_strtod_l+0x2c>
 800e574:	2201      	movs	r2, #1
 800e576:	920d      	str	r2, [sp, #52]	; 0x34
 800e578:	1c5a      	adds	r2, r3, #1
 800e57a:	921b      	str	r2, [sp, #108]	; 0x6c
 800e57c:	785b      	ldrb	r3, [r3, #1]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d1c2      	bne.n	800e508 <_strtod_l+0x40>
 800e582:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e584:	961b      	str	r6, [sp, #108]	; 0x6c
 800e586:	2b00      	cmp	r3, #0
 800e588:	f040 8579 	bne.w	800f07e <_strtod_l+0xbb6>
 800e58c:	4652      	mov	r2, sl
 800e58e:	465b      	mov	r3, fp
 800e590:	e7e2      	b.n	800e558 <_strtod_l+0x90>
 800e592:	2200      	movs	r2, #0
 800e594:	e7ef      	b.n	800e576 <_strtod_l+0xae>
 800e596:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e598:	b13a      	cbz	r2, 800e5aa <_strtod_l+0xe2>
 800e59a:	2135      	movs	r1, #53	; 0x35
 800e59c:	a81e      	add	r0, sp, #120	; 0x78
 800e59e:	f002 fb8d 	bl	8010cbc <__copybits>
 800e5a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e5a4:	4648      	mov	r0, r9
 800e5a6:	f001 fffa 	bl	801059e <_Bfree>
 800e5aa:	3c01      	subs	r4, #1
 800e5ac:	2c04      	cmp	r4, #4
 800e5ae:	d806      	bhi.n	800e5be <_strtod_l+0xf6>
 800e5b0:	e8df f004 	tbb	[pc, r4]
 800e5b4:	1714030a 	.word	0x1714030a
 800e5b8:	0a          	.byte	0x0a
 800e5b9:	00          	.byte	0x00
 800e5ba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e5be:	0730      	lsls	r0, r6, #28
 800e5c0:	d5c1      	bpl.n	800e546 <_strtod_l+0x7e>
 800e5c2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e5c6:	e7be      	b.n	800e546 <_strtod_l+0x7e>
 800e5c8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e5cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e5ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e5d2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e5d6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e5da:	e7f0      	b.n	800e5be <_strtod_l+0xf6>
 800e5dc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e750 <_strtod_l+0x288>
 800e5e0:	e7ed      	b.n	800e5be <_strtod_l+0xf6>
 800e5e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e5e6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e5ea:	e7e8      	b.n	800e5be <_strtod_l+0xf6>
 800e5ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5ee:	1c5a      	adds	r2, r3, #1
 800e5f0:	921b      	str	r2, [sp, #108]	; 0x6c
 800e5f2:	785b      	ldrb	r3, [r3, #1]
 800e5f4:	2b30      	cmp	r3, #48	; 0x30
 800e5f6:	d0f9      	beq.n	800e5ec <_strtod_l+0x124>
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d0a4      	beq.n	800e546 <_strtod_l+0x7e>
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	2500      	movs	r5, #0
 800e600:	9306      	str	r3, [sp, #24]
 800e602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e604:	9308      	str	r3, [sp, #32]
 800e606:	9507      	str	r5, [sp, #28]
 800e608:	9505      	str	r5, [sp, #20]
 800e60a:	220a      	movs	r2, #10
 800e60c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e60e:	7807      	ldrb	r7, [r0, #0]
 800e610:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e614:	b2d9      	uxtb	r1, r3
 800e616:	2909      	cmp	r1, #9
 800e618:	d929      	bls.n	800e66e <_strtod_l+0x1a6>
 800e61a:	4622      	mov	r2, r4
 800e61c:	f8d8 1000 	ldr.w	r1, [r8]
 800e620:	f002 fda0 	bl	8011164 <strncmp>
 800e624:	2800      	cmp	r0, #0
 800e626:	d031      	beq.n	800e68c <_strtod_l+0x1c4>
 800e628:	2000      	movs	r0, #0
 800e62a:	9c05      	ldr	r4, [sp, #20]
 800e62c:	9004      	str	r0, [sp, #16]
 800e62e:	463b      	mov	r3, r7
 800e630:	4602      	mov	r2, r0
 800e632:	2b65      	cmp	r3, #101	; 0x65
 800e634:	d001      	beq.n	800e63a <_strtod_l+0x172>
 800e636:	2b45      	cmp	r3, #69	; 0x45
 800e638:	d114      	bne.n	800e664 <_strtod_l+0x19c>
 800e63a:	b924      	cbnz	r4, 800e646 <_strtod_l+0x17e>
 800e63c:	b910      	cbnz	r0, 800e644 <_strtod_l+0x17c>
 800e63e:	9b06      	ldr	r3, [sp, #24]
 800e640:	2b00      	cmp	r3, #0
 800e642:	d09e      	beq.n	800e582 <_strtod_l+0xba>
 800e644:	2400      	movs	r4, #0
 800e646:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e648:	1c73      	adds	r3, r6, #1
 800e64a:	931b      	str	r3, [sp, #108]	; 0x6c
 800e64c:	7873      	ldrb	r3, [r6, #1]
 800e64e:	2b2b      	cmp	r3, #43	; 0x2b
 800e650:	d078      	beq.n	800e744 <_strtod_l+0x27c>
 800e652:	2b2d      	cmp	r3, #45	; 0x2d
 800e654:	d070      	beq.n	800e738 <_strtod_l+0x270>
 800e656:	f04f 0c00 	mov.w	ip, #0
 800e65a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e65e:	2f09      	cmp	r7, #9
 800e660:	d97c      	bls.n	800e75c <_strtod_l+0x294>
 800e662:	961b      	str	r6, [sp, #108]	; 0x6c
 800e664:	f04f 0e00 	mov.w	lr, #0
 800e668:	e09a      	b.n	800e7a0 <_strtod_l+0x2d8>
 800e66a:	2300      	movs	r3, #0
 800e66c:	e7c7      	b.n	800e5fe <_strtod_l+0x136>
 800e66e:	9905      	ldr	r1, [sp, #20]
 800e670:	2908      	cmp	r1, #8
 800e672:	bfdd      	ittte	le
 800e674:	9907      	ldrle	r1, [sp, #28]
 800e676:	fb02 3301 	mlale	r3, r2, r1, r3
 800e67a:	9307      	strle	r3, [sp, #28]
 800e67c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e680:	9b05      	ldr	r3, [sp, #20]
 800e682:	3001      	adds	r0, #1
 800e684:	3301      	adds	r3, #1
 800e686:	9305      	str	r3, [sp, #20]
 800e688:	901b      	str	r0, [sp, #108]	; 0x6c
 800e68a:	e7bf      	b.n	800e60c <_strtod_l+0x144>
 800e68c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e68e:	191a      	adds	r2, r3, r4
 800e690:	921b      	str	r2, [sp, #108]	; 0x6c
 800e692:	9a05      	ldr	r2, [sp, #20]
 800e694:	5d1b      	ldrb	r3, [r3, r4]
 800e696:	2a00      	cmp	r2, #0
 800e698:	d037      	beq.n	800e70a <_strtod_l+0x242>
 800e69a:	9c05      	ldr	r4, [sp, #20]
 800e69c:	4602      	mov	r2, r0
 800e69e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e6a2:	2909      	cmp	r1, #9
 800e6a4:	d913      	bls.n	800e6ce <_strtod_l+0x206>
 800e6a6:	2101      	movs	r1, #1
 800e6a8:	9104      	str	r1, [sp, #16]
 800e6aa:	e7c2      	b.n	800e632 <_strtod_l+0x16a>
 800e6ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6ae:	1c5a      	adds	r2, r3, #1
 800e6b0:	921b      	str	r2, [sp, #108]	; 0x6c
 800e6b2:	785b      	ldrb	r3, [r3, #1]
 800e6b4:	3001      	adds	r0, #1
 800e6b6:	2b30      	cmp	r3, #48	; 0x30
 800e6b8:	d0f8      	beq.n	800e6ac <_strtod_l+0x1e4>
 800e6ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e6be:	2a08      	cmp	r2, #8
 800e6c0:	f200 84e4 	bhi.w	800f08c <_strtod_l+0xbc4>
 800e6c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e6c6:	9208      	str	r2, [sp, #32]
 800e6c8:	4602      	mov	r2, r0
 800e6ca:	2000      	movs	r0, #0
 800e6cc:	4604      	mov	r4, r0
 800e6ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e6d2:	f100 0101 	add.w	r1, r0, #1
 800e6d6:	d012      	beq.n	800e6fe <_strtod_l+0x236>
 800e6d8:	440a      	add	r2, r1
 800e6da:	eb00 0c04 	add.w	ip, r0, r4
 800e6de:	4621      	mov	r1, r4
 800e6e0:	270a      	movs	r7, #10
 800e6e2:	458c      	cmp	ip, r1
 800e6e4:	d113      	bne.n	800e70e <_strtod_l+0x246>
 800e6e6:	1821      	adds	r1, r4, r0
 800e6e8:	2908      	cmp	r1, #8
 800e6ea:	f104 0401 	add.w	r4, r4, #1
 800e6ee:	4404      	add	r4, r0
 800e6f0:	dc19      	bgt.n	800e726 <_strtod_l+0x25e>
 800e6f2:	9b07      	ldr	r3, [sp, #28]
 800e6f4:	210a      	movs	r1, #10
 800e6f6:	fb01 e303 	mla	r3, r1, r3, lr
 800e6fa:	9307      	str	r3, [sp, #28]
 800e6fc:	2100      	movs	r1, #0
 800e6fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e700:	1c58      	adds	r0, r3, #1
 800e702:	901b      	str	r0, [sp, #108]	; 0x6c
 800e704:	785b      	ldrb	r3, [r3, #1]
 800e706:	4608      	mov	r0, r1
 800e708:	e7c9      	b.n	800e69e <_strtod_l+0x1d6>
 800e70a:	9805      	ldr	r0, [sp, #20]
 800e70c:	e7d3      	b.n	800e6b6 <_strtod_l+0x1ee>
 800e70e:	2908      	cmp	r1, #8
 800e710:	f101 0101 	add.w	r1, r1, #1
 800e714:	dc03      	bgt.n	800e71e <_strtod_l+0x256>
 800e716:	9b07      	ldr	r3, [sp, #28]
 800e718:	437b      	muls	r3, r7
 800e71a:	9307      	str	r3, [sp, #28]
 800e71c:	e7e1      	b.n	800e6e2 <_strtod_l+0x21a>
 800e71e:	2910      	cmp	r1, #16
 800e720:	bfd8      	it	le
 800e722:	437d      	mulle	r5, r7
 800e724:	e7dd      	b.n	800e6e2 <_strtod_l+0x21a>
 800e726:	2c10      	cmp	r4, #16
 800e728:	bfdc      	itt	le
 800e72a:	210a      	movle	r1, #10
 800e72c:	fb01 e505 	mlale	r5, r1, r5, lr
 800e730:	e7e4      	b.n	800e6fc <_strtod_l+0x234>
 800e732:	2301      	movs	r3, #1
 800e734:	9304      	str	r3, [sp, #16]
 800e736:	e781      	b.n	800e63c <_strtod_l+0x174>
 800e738:	f04f 0c01 	mov.w	ip, #1
 800e73c:	1cb3      	adds	r3, r6, #2
 800e73e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e740:	78b3      	ldrb	r3, [r6, #2]
 800e742:	e78a      	b.n	800e65a <_strtod_l+0x192>
 800e744:	f04f 0c00 	mov.w	ip, #0
 800e748:	e7f8      	b.n	800e73c <_strtod_l+0x274>
 800e74a:	bf00      	nop
 800e74c:	08012844 	.word	0x08012844
 800e750:	7ff00000 	.word	0x7ff00000
 800e754:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e756:	1c5f      	adds	r7, r3, #1
 800e758:	971b      	str	r7, [sp, #108]	; 0x6c
 800e75a:	785b      	ldrb	r3, [r3, #1]
 800e75c:	2b30      	cmp	r3, #48	; 0x30
 800e75e:	d0f9      	beq.n	800e754 <_strtod_l+0x28c>
 800e760:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e764:	2f08      	cmp	r7, #8
 800e766:	f63f af7d 	bhi.w	800e664 <_strtod_l+0x19c>
 800e76a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e76e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e770:	930a      	str	r3, [sp, #40]	; 0x28
 800e772:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e774:	1c5f      	adds	r7, r3, #1
 800e776:	971b      	str	r7, [sp, #108]	; 0x6c
 800e778:	785b      	ldrb	r3, [r3, #1]
 800e77a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e77e:	f1b8 0f09 	cmp.w	r8, #9
 800e782:	d937      	bls.n	800e7f4 <_strtod_l+0x32c>
 800e784:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e786:	1a7f      	subs	r7, r7, r1
 800e788:	2f08      	cmp	r7, #8
 800e78a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e78e:	dc37      	bgt.n	800e800 <_strtod_l+0x338>
 800e790:	45be      	cmp	lr, r7
 800e792:	bfa8      	it	ge
 800e794:	46be      	movge	lr, r7
 800e796:	f1bc 0f00 	cmp.w	ip, #0
 800e79a:	d001      	beq.n	800e7a0 <_strtod_l+0x2d8>
 800e79c:	f1ce 0e00 	rsb	lr, lr, #0
 800e7a0:	2c00      	cmp	r4, #0
 800e7a2:	d151      	bne.n	800e848 <_strtod_l+0x380>
 800e7a4:	2800      	cmp	r0, #0
 800e7a6:	f47f aece 	bne.w	800e546 <_strtod_l+0x7e>
 800e7aa:	9a06      	ldr	r2, [sp, #24]
 800e7ac:	2a00      	cmp	r2, #0
 800e7ae:	f47f aeca 	bne.w	800e546 <_strtod_l+0x7e>
 800e7b2:	9a04      	ldr	r2, [sp, #16]
 800e7b4:	2a00      	cmp	r2, #0
 800e7b6:	f47f aee4 	bne.w	800e582 <_strtod_l+0xba>
 800e7ba:	2b4e      	cmp	r3, #78	; 0x4e
 800e7bc:	d027      	beq.n	800e80e <_strtod_l+0x346>
 800e7be:	dc21      	bgt.n	800e804 <_strtod_l+0x33c>
 800e7c0:	2b49      	cmp	r3, #73	; 0x49
 800e7c2:	f47f aede 	bne.w	800e582 <_strtod_l+0xba>
 800e7c6:	49a0      	ldr	r1, [pc, #640]	; (800ea48 <_strtod_l+0x580>)
 800e7c8:	a81b      	add	r0, sp, #108	; 0x6c
 800e7ca:	f001 fdd7 	bl	801037c <__match>
 800e7ce:	2800      	cmp	r0, #0
 800e7d0:	f43f aed7 	beq.w	800e582 <_strtod_l+0xba>
 800e7d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7d6:	499d      	ldr	r1, [pc, #628]	; (800ea4c <_strtod_l+0x584>)
 800e7d8:	3b01      	subs	r3, #1
 800e7da:	a81b      	add	r0, sp, #108	; 0x6c
 800e7dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800e7de:	f001 fdcd 	bl	801037c <__match>
 800e7e2:	b910      	cbnz	r0, 800e7ea <_strtod_l+0x322>
 800e7e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e7e6:	3301      	adds	r3, #1
 800e7e8:	931b      	str	r3, [sp, #108]	; 0x6c
 800e7ea:	f8df b274 	ldr.w	fp, [pc, #628]	; 800ea60 <_strtod_l+0x598>
 800e7ee:	f04f 0a00 	mov.w	sl, #0
 800e7f2:	e6a8      	b.n	800e546 <_strtod_l+0x7e>
 800e7f4:	210a      	movs	r1, #10
 800e7f6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e7fa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e7fe:	e7b8      	b.n	800e772 <_strtod_l+0x2aa>
 800e800:	46be      	mov	lr, r7
 800e802:	e7c8      	b.n	800e796 <_strtod_l+0x2ce>
 800e804:	2b69      	cmp	r3, #105	; 0x69
 800e806:	d0de      	beq.n	800e7c6 <_strtod_l+0x2fe>
 800e808:	2b6e      	cmp	r3, #110	; 0x6e
 800e80a:	f47f aeba 	bne.w	800e582 <_strtod_l+0xba>
 800e80e:	4990      	ldr	r1, [pc, #576]	; (800ea50 <_strtod_l+0x588>)
 800e810:	a81b      	add	r0, sp, #108	; 0x6c
 800e812:	f001 fdb3 	bl	801037c <__match>
 800e816:	2800      	cmp	r0, #0
 800e818:	f43f aeb3 	beq.w	800e582 <_strtod_l+0xba>
 800e81c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	2b28      	cmp	r3, #40	; 0x28
 800e822:	d10e      	bne.n	800e842 <_strtod_l+0x37a>
 800e824:	aa1e      	add	r2, sp, #120	; 0x78
 800e826:	498b      	ldr	r1, [pc, #556]	; (800ea54 <_strtod_l+0x58c>)
 800e828:	a81b      	add	r0, sp, #108	; 0x6c
 800e82a:	f001 fdbb 	bl	80103a4 <__hexnan>
 800e82e:	2805      	cmp	r0, #5
 800e830:	d107      	bne.n	800e842 <_strtod_l+0x37a>
 800e832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e834:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e838:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e83c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e840:	e681      	b.n	800e546 <_strtod_l+0x7e>
 800e842:	f8df b224 	ldr.w	fp, [pc, #548]	; 800ea68 <_strtod_l+0x5a0>
 800e846:	e7d2      	b.n	800e7ee <_strtod_l+0x326>
 800e848:	ebae 0302 	sub.w	r3, lr, r2
 800e84c:	9306      	str	r3, [sp, #24]
 800e84e:	9b05      	ldr	r3, [sp, #20]
 800e850:	9807      	ldr	r0, [sp, #28]
 800e852:	2b00      	cmp	r3, #0
 800e854:	bf08      	it	eq
 800e856:	4623      	moveq	r3, r4
 800e858:	2c10      	cmp	r4, #16
 800e85a:	9305      	str	r3, [sp, #20]
 800e85c:	46a0      	mov	r8, r4
 800e85e:	bfa8      	it	ge
 800e860:	f04f 0810 	movge.w	r8, #16
 800e864:	f7f1 fe4e 	bl	8000504 <__aeabi_ui2d>
 800e868:	2c09      	cmp	r4, #9
 800e86a:	4682      	mov	sl, r0
 800e86c:	468b      	mov	fp, r1
 800e86e:	dc13      	bgt.n	800e898 <_strtod_l+0x3d0>
 800e870:	9b06      	ldr	r3, [sp, #24]
 800e872:	2b00      	cmp	r3, #0
 800e874:	f43f ae67 	beq.w	800e546 <_strtod_l+0x7e>
 800e878:	9b06      	ldr	r3, [sp, #24]
 800e87a:	dd7a      	ble.n	800e972 <_strtod_l+0x4aa>
 800e87c:	2b16      	cmp	r3, #22
 800e87e:	dc61      	bgt.n	800e944 <_strtod_l+0x47c>
 800e880:	4a75      	ldr	r2, [pc, #468]	; (800ea58 <_strtod_l+0x590>)
 800e882:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e886:	e9de 0100 	ldrd	r0, r1, [lr]
 800e88a:	4652      	mov	r2, sl
 800e88c:	465b      	mov	r3, fp
 800e88e:	f7f1 feb3 	bl	80005f8 <__aeabi_dmul>
 800e892:	4682      	mov	sl, r0
 800e894:	468b      	mov	fp, r1
 800e896:	e656      	b.n	800e546 <_strtod_l+0x7e>
 800e898:	4b6f      	ldr	r3, [pc, #444]	; (800ea58 <_strtod_l+0x590>)
 800e89a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e89e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e8a2:	f7f1 fea9 	bl	80005f8 <__aeabi_dmul>
 800e8a6:	4606      	mov	r6, r0
 800e8a8:	4628      	mov	r0, r5
 800e8aa:	460f      	mov	r7, r1
 800e8ac:	f7f1 fe2a 	bl	8000504 <__aeabi_ui2d>
 800e8b0:	4602      	mov	r2, r0
 800e8b2:	460b      	mov	r3, r1
 800e8b4:	4630      	mov	r0, r6
 800e8b6:	4639      	mov	r1, r7
 800e8b8:	f7f1 fce8 	bl	800028c <__adddf3>
 800e8bc:	2c0f      	cmp	r4, #15
 800e8be:	4682      	mov	sl, r0
 800e8c0:	468b      	mov	fp, r1
 800e8c2:	ddd5      	ble.n	800e870 <_strtod_l+0x3a8>
 800e8c4:	9b06      	ldr	r3, [sp, #24]
 800e8c6:	eba4 0808 	sub.w	r8, r4, r8
 800e8ca:	4498      	add	r8, r3
 800e8cc:	f1b8 0f00 	cmp.w	r8, #0
 800e8d0:	f340 8096 	ble.w	800ea00 <_strtod_l+0x538>
 800e8d4:	f018 030f 	ands.w	r3, r8, #15
 800e8d8:	d00a      	beq.n	800e8f0 <_strtod_l+0x428>
 800e8da:	495f      	ldr	r1, [pc, #380]	; (800ea58 <_strtod_l+0x590>)
 800e8dc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e8e0:	4652      	mov	r2, sl
 800e8e2:	465b      	mov	r3, fp
 800e8e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e8e8:	f7f1 fe86 	bl	80005f8 <__aeabi_dmul>
 800e8ec:	4682      	mov	sl, r0
 800e8ee:	468b      	mov	fp, r1
 800e8f0:	f038 080f 	bics.w	r8, r8, #15
 800e8f4:	d073      	beq.n	800e9de <_strtod_l+0x516>
 800e8f6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e8fa:	dd47      	ble.n	800e98c <_strtod_l+0x4c4>
 800e8fc:	2400      	movs	r4, #0
 800e8fe:	46a0      	mov	r8, r4
 800e900:	9407      	str	r4, [sp, #28]
 800e902:	9405      	str	r4, [sp, #20]
 800e904:	2322      	movs	r3, #34	; 0x22
 800e906:	f8df b158 	ldr.w	fp, [pc, #344]	; 800ea60 <_strtod_l+0x598>
 800e90a:	f8c9 3000 	str.w	r3, [r9]
 800e90e:	f04f 0a00 	mov.w	sl, #0
 800e912:	9b07      	ldr	r3, [sp, #28]
 800e914:	2b00      	cmp	r3, #0
 800e916:	f43f ae16 	beq.w	800e546 <_strtod_l+0x7e>
 800e91a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e91c:	4648      	mov	r0, r9
 800e91e:	f001 fe3e 	bl	801059e <_Bfree>
 800e922:	9905      	ldr	r1, [sp, #20]
 800e924:	4648      	mov	r0, r9
 800e926:	f001 fe3a 	bl	801059e <_Bfree>
 800e92a:	4641      	mov	r1, r8
 800e92c:	4648      	mov	r0, r9
 800e92e:	f001 fe36 	bl	801059e <_Bfree>
 800e932:	9907      	ldr	r1, [sp, #28]
 800e934:	4648      	mov	r0, r9
 800e936:	f001 fe32 	bl	801059e <_Bfree>
 800e93a:	4621      	mov	r1, r4
 800e93c:	4648      	mov	r0, r9
 800e93e:	f001 fe2e 	bl	801059e <_Bfree>
 800e942:	e600      	b.n	800e546 <_strtod_l+0x7e>
 800e944:	9a06      	ldr	r2, [sp, #24]
 800e946:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e94a:	4293      	cmp	r3, r2
 800e94c:	dbba      	blt.n	800e8c4 <_strtod_l+0x3fc>
 800e94e:	4d42      	ldr	r5, [pc, #264]	; (800ea58 <_strtod_l+0x590>)
 800e950:	f1c4 040f 	rsb	r4, r4, #15
 800e954:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e958:	4652      	mov	r2, sl
 800e95a:	465b      	mov	r3, fp
 800e95c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e960:	f7f1 fe4a 	bl	80005f8 <__aeabi_dmul>
 800e964:	9b06      	ldr	r3, [sp, #24]
 800e966:	1b1c      	subs	r4, r3, r4
 800e968:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e96c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e970:	e78d      	b.n	800e88e <_strtod_l+0x3c6>
 800e972:	f113 0f16 	cmn.w	r3, #22
 800e976:	dba5      	blt.n	800e8c4 <_strtod_l+0x3fc>
 800e978:	4a37      	ldr	r2, [pc, #220]	; (800ea58 <_strtod_l+0x590>)
 800e97a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800e97e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e982:	4650      	mov	r0, sl
 800e984:	4659      	mov	r1, fp
 800e986:	f7f1 ff61 	bl	800084c <__aeabi_ddiv>
 800e98a:	e782      	b.n	800e892 <_strtod_l+0x3ca>
 800e98c:	2300      	movs	r3, #0
 800e98e:	4e33      	ldr	r6, [pc, #204]	; (800ea5c <_strtod_l+0x594>)
 800e990:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e994:	4650      	mov	r0, sl
 800e996:	4659      	mov	r1, fp
 800e998:	461d      	mov	r5, r3
 800e99a:	f1b8 0f01 	cmp.w	r8, #1
 800e99e:	dc21      	bgt.n	800e9e4 <_strtod_l+0x51c>
 800e9a0:	b10b      	cbz	r3, 800e9a6 <_strtod_l+0x4de>
 800e9a2:	4682      	mov	sl, r0
 800e9a4:	468b      	mov	fp, r1
 800e9a6:	4b2d      	ldr	r3, [pc, #180]	; (800ea5c <_strtod_l+0x594>)
 800e9a8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e9ac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e9b0:	4652      	mov	r2, sl
 800e9b2:	465b      	mov	r3, fp
 800e9b4:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e9b8:	f7f1 fe1e 	bl	80005f8 <__aeabi_dmul>
 800e9bc:	4b28      	ldr	r3, [pc, #160]	; (800ea60 <_strtod_l+0x598>)
 800e9be:	460a      	mov	r2, r1
 800e9c0:	400b      	ands	r3, r1
 800e9c2:	4928      	ldr	r1, [pc, #160]	; (800ea64 <_strtod_l+0x59c>)
 800e9c4:	428b      	cmp	r3, r1
 800e9c6:	4682      	mov	sl, r0
 800e9c8:	d898      	bhi.n	800e8fc <_strtod_l+0x434>
 800e9ca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e9ce:	428b      	cmp	r3, r1
 800e9d0:	bf86      	itte	hi
 800e9d2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800ea6c <_strtod_l+0x5a4>
 800e9d6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e9da:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e9de:	2300      	movs	r3, #0
 800e9e0:	9304      	str	r3, [sp, #16]
 800e9e2:	e077      	b.n	800ead4 <_strtod_l+0x60c>
 800e9e4:	f018 0f01 	tst.w	r8, #1
 800e9e8:	d006      	beq.n	800e9f8 <_strtod_l+0x530>
 800e9ea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800e9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f2:	f7f1 fe01 	bl	80005f8 <__aeabi_dmul>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	3501      	adds	r5, #1
 800e9fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e9fe:	e7cc      	b.n	800e99a <_strtod_l+0x4d2>
 800ea00:	d0ed      	beq.n	800e9de <_strtod_l+0x516>
 800ea02:	f1c8 0800 	rsb	r8, r8, #0
 800ea06:	f018 020f 	ands.w	r2, r8, #15
 800ea0a:	d00a      	beq.n	800ea22 <_strtod_l+0x55a>
 800ea0c:	4b12      	ldr	r3, [pc, #72]	; (800ea58 <_strtod_l+0x590>)
 800ea0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea12:	4650      	mov	r0, sl
 800ea14:	4659      	mov	r1, fp
 800ea16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea1a:	f7f1 ff17 	bl	800084c <__aeabi_ddiv>
 800ea1e:	4682      	mov	sl, r0
 800ea20:	468b      	mov	fp, r1
 800ea22:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ea26:	d0da      	beq.n	800e9de <_strtod_l+0x516>
 800ea28:	f1b8 0f1f 	cmp.w	r8, #31
 800ea2c:	dd20      	ble.n	800ea70 <_strtod_l+0x5a8>
 800ea2e:	2400      	movs	r4, #0
 800ea30:	46a0      	mov	r8, r4
 800ea32:	9407      	str	r4, [sp, #28]
 800ea34:	9405      	str	r4, [sp, #20]
 800ea36:	2322      	movs	r3, #34	; 0x22
 800ea38:	f04f 0a00 	mov.w	sl, #0
 800ea3c:	f04f 0b00 	mov.w	fp, #0
 800ea40:	f8c9 3000 	str.w	r3, [r9]
 800ea44:	e765      	b.n	800e912 <_strtod_l+0x44a>
 800ea46:	bf00      	nop
 800ea48:	0801280d 	.word	0x0801280d
 800ea4c:	0801289b 	.word	0x0801289b
 800ea50:	08012815 	.word	0x08012815
 800ea54:	08012858 	.word	0x08012858
 800ea58:	080128d8 	.word	0x080128d8
 800ea5c:	080128b0 	.word	0x080128b0
 800ea60:	7ff00000 	.word	0x7ff00000
 800ea64:	7ca00000 	.word	0x7ca00000
 800ea68:	fff80000 	.word	0xfff80000
 800ea6c:	7fefffff 	.word	0x7fefffff
 800ea70:	f018 0310 	ands.w	r3, r8, #16
 800ea74:	bf18      	it	ne
 800ea76:	236a      	movne	r3, #106	; 0x6a
 800ea78:	4da0      	ldr	r5, [pc, #640]	; (800ecfc <_strtod_l+0x834>)
 800ea7a:	9304      	str	r3, [sp, #16]
 800ea7c:	4650      	mov	r0, sl
 800ea7e:	4659      	mov	r1, fp
 800ea80:	2300      	movs	r3, #0
 800ea82:	f1b8 0f00 	cmp.w	r8, #0
 800ea86:	f300 810a 	bgt.w	800ec9e <_strtod_l+0x7d6>
 800ea8a:	b10b      	cbz	r3, 800ea90 <_strtod_l+0x5c8>
 800ea8c:	4682      	mov	sl, r0
 800ea8e:	468b      	mov	fp, r1
 800ea90:	9b04      	ldr	r3, [sp, #16]
 800ea92:	b1bb      	cbz	r3, 800eac4 <_strtod_l+0x5fc>
 800ea94:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ea98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	4659      	mov	r1, fp
 800eaa0:	dd10      	ble.n	800eac4 <_strtod_l+0x5fc>
 800eaa2:	2b1f      	cmp	r3, #31
 800eaa4:	f340 8107 	ble.w	800ecb6 <_strtod_l+0x7ee>
 800eaa8:	2b34      	cmp	r3, #52	; 0x34
 800eaaa:	bfde      	ittt	le
 800eaac:	3b20      	suble	r3, #32
 800eaae:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800eab2:	fa02 f303 	lslle.w	r3, r2, r3
 800eab6:	f04f 0a00 	mov.w	sl, #0
 800eaba:	bfcc      	ite	gt
 800eabc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800eac0:	ea03 0b01 	andle.w	fp, r3, r1
 800eac4:	2200      	movs	r2, #0
 800eac6:	2300      	movs	r3, #0
 800eac8:	4650      	mov	r0, sl
 800eaca:	4659      	mov	r1, fp
 800eacc:	f7f1 fffc 	bl	8000ac8 <__aeabi_dcmpeq>
 800ead0:	2800      	cmp	r0, #0
 800ead2:	d1ac      	bne.n	800ea2e <_strtod_l+0x566>
 800ead4:	9b07      	ldr	r3, [sp, #28]
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	9a05      	ldr	r2, [sp, #20]
 800eada:	9908      	ldr	r1, [sp, #32]
 800eadc:	4623      	mov	r3, r4
 800eade:	4648      	mov	r0, r9
 800eae0:	f001 fdaf 	bl	8010642 <__s2b>
 800eae4:	9007      	str	r0, [sp, #28]
 800eae6:	2800      	cmp	r0, #0
 800eae8:	f43f af08 	beq.w	800e8fc <_strtod_l+0x434>
 800eaec:	9a06      	ldr	r2, [sp, #24]
 800eaee:	9b06      	ldr	r3, [sp, #24]
 800eaf0:	2a00      	cmp	r2, #0
 800eaf2:	f1c3 0300 	rsb	r3, r3, #0
 800eaf6:	bfa8      	it	ge
 800eaf8:	2300      	movge	r3, #0
 800eafa:	930e      	str	r3, [sp, #56]	; 0x38
 800eafc:	2400      	movs	r4, #0
 800eafe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800eb02:	9316      	str	r3, [sp, #88]	; 0x58
 800eb04:	46a0      	mov	r8, r4
 800eb06:	9b07      	ldr	r3, [sp, #28]
 800eb08:	4648      	mov	r0, r9
 800eb0a:	6859      	ldr	r1, [r3, #4]
 800eb0c:	f001 fd13 	bl	8010536 <_Balloc>
 800eb10:	9005      	str	r0, [sp, #20]
 800eb12:	2800      	cmp	r0, #0
 800eb14:	f43f aef6 	beq.w	800e904 <_strtod_l+0x43c>
 800eb18:	9b07      	ldr	r3, [sp, #28]
 800eb1a:	691a      	ldr	r2, [r3, #16]
 800eb1c:	3202      	adds	r2, #2
 800eb1e:	f103 010c 	add.w	r1, r3, #12
 800eb22:	0092      	lsls	r2, r2, #2
 800eb24:	300c      	adds	r0, #12
 800eb26:	f001 fcfb 	bl	8010520 <memcpy>
 800eb2a:	aa1e      	add	r2, sp, #120	; 0x78
 800eb2c:	a91d      	add	r1, sp, #116	; 0x74
 800eb2e:	ec4b ab10 	vmov	d0, sl, fp
 800eb32:	4648      	mov	r0, r9
 800eb34:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800eb38:	f002 f83e 	bl	8010bb8 <__d2b>
 800eb3c:	901c      	str	r0, [sp, #112]	; 0x70
 800eb3e:	2800      	cmp	r0, #0
 800eb40:	f43f aee0 	beq.w	800e904 <_strtod_l+0x43c>
 800eb44:	2101      	movs	r1, #1
 800eb46:	4648      	mov	r0, r9
 800eb48:	f001 fe07 	bl	801075a <__i2b>
 800eb4c:	4680      	mov	r8, r0
 800eb4e:	2800      	cmp	r0, #0
 800eb50:	f43f aed8 	beq.w	800e904 <_strtod_l+0x43c>
 800eb54:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800eb56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800eb58:	2e00      	cmp	r6, #0
 800eb5a:	bfab      	itete	ge
 800eb5c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800eb5e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800eb60:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800eb62:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800eb64:	bfac      	ite	ge
 800eb66:	18f7      	addge	r7, r6, r3
 800eb68:	1b9d      	sublt	r5, r3, r6
 800eb6a:	9b04      	ldr	r3, [sp, #16]
 800eb6c:	1af6      	subs	r6, r6, r3
 800eb6e:	4416      	add	r6, r2
 800eb70:	4b63      	ldr	r3, [pc, #396]	; (800ed00 <_strtod_l+0x838>)
 800eb72:	3e01      	subs	r6, #1
 800eb74:	429e      	cmp	r6, r3
 800eb76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800eb7a:	f280 80af 	bge.w	800ecdc <_strtod_l+0x814>
 800eb7e:	1b9b      	subs	r3, r3, r6
 800eb80:	2b1f      	cmp	r3, #31
 800eb82:	eba2 0203 	sub.w	r2, r2, r3
 800eb86:	f04f 0101 	mov.w	r1, #1
 800eb8a:	f300 809b 	bgt.w	800ecc4 <_strtod_l+0x7fc>
 800eb8e:	fa01 f303 	lsl.w	r3, r1, r3
 800eb92:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb94:	2300      	movs	r3, #0
 800eb96:	930a      	str	r3, [sp, #40]	; 0x28
 800eb98:	18be      	adds	r6, r7, r2
 800eb9a:	9b04      	ldr	r3, [sp, #16]
 800eb9c:	42b7      	cmp	r7, r6
 800eb9e:	4415      	add	r5, r2
 800eba0:	441d      	add	r5, r3
 800eba2:	463b      	mov	r3, r7
 800eba4:	bfa8      	it	ge
 800eba6:	4633      	movge	r3, r6
 800eba8:	42ab      	cmp	r3, r5
 800ebaa:	bfa8      	it	ge
 800ebac:	462b      	movge	r3, r5
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	bfc2      	ittt	gt
 800ebb2:	1af6      	subgt	r6, r6, r3
 800ebb4:	1aed      	subgt	r5, r5, r3
 800ebb6:	1aff      	subgt	r7, r7, r3
 800ebb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebba:	b1bb      	cbz	r3, 800ebec <_strtod_l+0x724>
 800ebbc:	4641      	mov	r1, r8
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	4648      	mov	r0, r9
 800ebc2:	f001 fe69 	bl	8010898 <__pow5mult>
 800ebc6:	4680      	mov	r8, r0
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	f43f ae9b 	beq.w	800e904 <_strtod_l+0x43c>
 800ebce:	4601      	mov	r1, r0
 800ebd0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800ebd2:	4648      	mov	r0, r9
 800ebd4:	f001 fdca 	bl	801076c <__multiply>
 800ebd8:	900c      	str	r0, [sp, #48]	; 0x30
 800ebda:	2800      	cmp	r0, #0
 800ebdc:	f43f ae92 	beq.w	800e904 <_strtod_l+0x43c>
 800ebe0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ebe2:	4648      	mov	r0, r9
 800ebe4:	f001 fcdb 	bl	801059e <_Bfree>
 800ebe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ebea:	931c      	str	r3, [sp, #112]	; 0x70
 800ebec:	2e00      	cmp	r6, #0
 800ebee:	dc7a      	bgt.n	800ece6 <_strtod_l+0x81e>
 800ebf0:	9b06      	ldr	r3, [sp, #24]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	dd08      	ble.n	800ec08 <_strtod_l+0x740>
 800ebf6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ebf8:	9905      	ldr	r1, [sp, #20]
 800ebfa:	4648      	mov	r0, r9
 800ebfc:	f001 fe4c 	bl	8010898 <__pow5mult>
 800ec00:	9005      	str	r0, [sp, #20]
 800ec02:	2800      	cmp	r0, #0
 800ec04:	f43f ae7e 	beq.w	800e904 <_strtod_l+0x43c>
 800ec08:	2d00      	cmp	r5, #0
 800ec0a:	dd08      	ble.n	800ec1e <_strtod_l+0x756>
 800ec0c:	462a      	mov	r2, r5
 800ec0e:	9905      	ldr	r1, [sp, #20]
 800ec10:	4648      	mov	r0, r9
 800ec12:	f001 fe8f 	bl	8010934 <__lshift>
 800ec16:	9005      	str	r0, [sp, #20]
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	f43f ae73 	beq.w	800e904 <_strtod_l+0x43c>
 800ec1e:	2f00      	cmp	r7, #0
 800ec20:	dd08      	ble.n	800ec34 <_strtod_l+0x76c>
 800ec22:	4641      	mov	r1, r8
 800ec24:	463a      	mov	r2, r7
 800ec26:	4648      	mov	r0, r9
 800ec28:	f001 fe84 	bl	8010934 <__lshift>
 800ec2c:	4680      	mov	r8, r0
 800ec2e:	2800      	cmp	r0, #0
 800ec30:	f43f ae68 	beq.w	800e904 <_strtod_l+0x43c>
 800ec34:	9a05      	ldr	r2, [sp, #20]
 800ec36:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ec38:	4648      	mov	r0, r9
 800ec3a:	f001 fee9 	bl	8010a10 <__mdiff>
 800ec3e:	4604      	mov	r4, r0
 800ec40:	2800      	cmp	r0, #0
 800ec42:	f43f ae5f 	beq.w	800e904 <_strtod_l+0x43c>
 800ec46:	68c3      	ldr	r3, [r0, #12]
 800ec48:	930c      	str	r3, [sp, #48]	; 0x30
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	60c3      	str	r3, [r0, #12]
 800ec4e:	4641      	mov	r1, r8
 800ec50:	f001 fec4 	bl	80109dc <__mcmp>
 800ec54:	2800      	cmp	r0, #0
 800ec56:	da55      	bge.n	800ed04 <_strtod_l+0x83c>
 800ec58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec5a:	b9e3      	cbnz	r3, 800ec96 <_strtod_l+0x7ce>
 800ec5c:	f1ba 0f00 	cmp.w	sl, #0
 800ec60:	d119      	bne.n	800ec96 <_strtod_l+0x7ce>
 800ec62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ec66:	b9b3      	cbnz	r3, 800ec96 <_strtod_l+0x7ce>
 800ec68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ec6c:	0d1b      	lsrs	r3, r3, #20
 800ec6e:	051b      	lsls	r3, r3, #20
 800ec70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ec74:	d90f      	bls.n	800ec96 <_strtod_l+0x7ce>
 800ec76:	6963      	ldr	r3, [r4, #20]
 800ec78:	b913      	cbnz	r3, 800ec80 <_strtod_l+0x7b8>
 800ec7a:	6923      	ldr	r3, [r4, #16]
 800ec7c:	2b01      	cmp	r3, #1
 800ec7e:	dd0a      	ble.n	800ec96 <_strtod_l+0x7ce>
 800ec80:	4621      	mov	r1, r4
 800ec82:	2201      	movs	r2, #1
 800ec84:	4648      	mov	r0, r9
 800ec86:	f001 fe55 	bl	8010934 <__lshift>
 800ec8a:	4641      	mov	r1, r8
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	f001 fea5 	bl	80109dc <__mcmp>
 800ec92:	2800      	cmp	r0, #0
 800ec94:	dc67      	bgt.n	800ed66 <_strtod_l+0x89e>
 800ec96:	9b04      	ldr	r3, [sp, #16]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d171      	bne.n	800ed80 <_strtod_l+0x8b8>
 800ec9c:	e63d      	b.n	800e91a <_strtod_l+0x452>
 800ec9e:	f018 0f01 	tst.w	r8, #1
 800eca2:	d004      	beq.n	800ecae <_strtod_l+0x7e6>
 800eca4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eca8:	f7f1 fca6 	bl	80005f8 <__aeabi_dmul>
 800ecac:	2301      	movs	r3, #1
 800ecae:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ecb2:	3508      	adds	r5, #8
 800ecb4:	e6e5      	b.n	800ea82 <_strtod_l+0x5ba>
 800ecb6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ecba:	fa02 f303 	lsl.w	r3, r2, r3
 800ecbe:	ea03 0a0a 	and.w	sl, r3, sl
 800ecc2:	e6ff      	b.n	800eac4 <_strtod_l+0x5fc>
 800ecc4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ecc8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800eccc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ecd0:	36e2      	adds	r6, #226	; 0xe2
 800ecd2:	fa01 f306 	lsl.w	r3, r1, r6
 800ecd6:	930a      	str	r3, [sp, #40]	; 0x28
 800ecd8:	910f      	str	r1, [sp, #60]	; 0x3c
 800ecda:	e75d      	b.n	800eb98 <_strtod_l+0x6d0>
 800ecdc:	2300      	movs	r3, #0
 800ecde:	930a      	str	r3, [sp, #40]	; 0x28
 800ece0:	2301      	movs	r3, #1
 800ece2:	930f      	str	r3, [sp, #60]	; 0x3c
 800ece4:	e758      	b.n	800eb98 <_strtod_l+0x6d0>
 800ece6:	4632      	mov	r2, r6
 800ece8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ecea:	4648      	mov	r0, r9
 800ecec:	f001 fe22 	bl	8010934 <__lshift>
 800ecf0:	901c      	str	r0, [sp, #112]	; 0x70
 800ecf2:	2800      	cmp	r0, #0
 800ecf4:	f47f af7c 	bne.w	800ebf0 <_strtod_l+0x728>
 800ecf8:	e604      	b.n	800e904 <_strtod_l+0x43c>
 800ecfa:	bf00      	nop
 800ecfc:	08012870 	.word	0x08012870
 800ed00:	fffffc02 	.word	0xfffffc02
 800ed04:	465d      	mov	r5, fp
 800ed06:	f040 8086 	bne.w	800ee16 <_strtod_l+0x94e>
 800ed0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ed10:	b32a      	cbz	r2, 800ed5e <_strtod_l+0x896>
 800ed12:	4aaf      	ldr	r2, [pc, #700]	; (800efd0 <_strtod_l+0xb08>)
 800ed14:	4293      	cmp	r3, r2
 800ed16:	d153      	bne.n	800edc0 <_strtod_l+0x8f8>
 800ed18:	9b04      	ldr	r3, [sp, #16]
 800ed1a:	4650      	mov	r0, sl
 800ed1c:	b1d3      	cbz	r3, 800ed54 <_strtod_l+0x88c>
 800ed1e:	4aad      	ldr	r2, [pc, #692]	; (800efd4 <_strtod_l+0xb0c>)
 800ed20:	402a      	ands	r2, r5
 800ed22:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ed26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ed2a:	d816      	bhi.n	800ed5a <_strtod_l+0x892>
 800ed2c:	0d12      	lsrs	r2, r2, #20
 800ed2e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ed32:	fa01 f303 	lsl.w	r3, r1, r3
 800ed36:	4298      	cmp	r0, r3
 800ed38:	d142      	bne.n	800edc0 <_strtod_l+0x8f8>
 800ed3a:	4ba7      	ldr	r3, [pc, #668]	; (800efd8 <_strtod_l+0xb10>)
 800ed3c:	429d      	cmp	r5, r3
 800ed3e:	d102      	bne.n	800ed46 <_strtod_l+0x87e>
 800ed40:	3001      	adds	r0, #1
 800ed42:	f43f addf 	beq.w	800e904 <_strtod_l+0x43c>
 800ed46:	4ba3      	ldr	r3, [pc, #652]	; (800efd4 <_strtod_l+0xb0c>)
 800ed48:	402b      	ands	r3, r5
 800ed4a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ed4e:	f04f 0a00 	mov.w	sl, #0
 800ed52:	e7a0      	b.n	800ec96 <_strtod_l+0x7ce>
 800ed54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed58:	e7ed      	b.n	800ed36 <_strtod_l+0x86e>
 800ed5a:	460b      	mov	r3, r1
 800ed5c:	e7eb      	b.n	800ed36 <_strtod_l+0x86e>
 800ed5e:	bb7b      	cbnz	r3, 800edc0 <_strtod_l+0x8f8>
 800ed60:	f1ba 0f00 	cmp.w	sl, #0
 800ed64:	d12c      	bne.n	800edc0 <_strtod_l+0x8f8>
 800ed66:	9904      	ldr	r1, [sp, #16]
 800ed68:	4a9a      	ldr	r2, [pc, #616]	; (800efd4 <_strtod_l+0xb0c>)
 800ed6a:	465b      	mov	r3, fp
 800ed6c:	b1f1      	cbz	r1, 800edac <_strtod_l+0x8e4>
 800ed6e:	ea02 010b 	and.w	r1, r2, fp
 800ed72:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ed76:	dc19      	bgt.n	800edac <_strtod_l+0x8e4>
 800ed78:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ed7c:	f77f ae5b 	ble.w	800ea36 <_strtod_l+0x56e>
 800ed80:	4a96      	ldr	r2, [pc, #600]	; (800efdc <_strtod_l+0xb14>)
 800ed82:	2300      	movs	r3, #0
 800ed84:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ed88:	4650      	mov	r0, sl
 800ed8a:	4659      	mov	r1, fp
 800ed8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ed90:	f7f1 fc32 	bl	80005f8 <__aeabi_dmul>
 800ed94:	4682      	mov	sl, r0
 800ed96:	468b      	mov	fp, r1
 800ed98:	2900      	cmp	r1, #0
 800ed9a:	f47f adbe 	bne.w	800e91a <_strtod_l+0x452>
 800ed9e:	2800      	cmp	r0, #0
 800eda0:	f47f adbb 	bne.w	800e91a <_strtod_l+0x452>
 800eda4:	2322      	movs	r3, #34	; 0x22
 800eda6:	f8c9 3000 	str.w	r3, [r9]
 800edaa:	e5b6      	b.n	800e91a <_strtod_l+0x452>
 800edac:	4013      	ands	r3, r2
 800edae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800edb2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800edb6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800edba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800edbe:	e76a      	b.n	800ec96 <_strtod_l+0x7ce>
 800edc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edc2:	b193      	cbz	r3, 800edea <_strtod_l+0x922>
 800edc4:	422b      	tst	r3, r5
 800edc6:	f43f af66 	beq.w	800ec96 <_strtod_l+0x7ce>
 800edca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edcc:	9a04      	ldr	r2, [sp, #16]
 800edce:	4650      	mov	r0, sl
 800edd0:	4659      	mov	r1, fp
 800edd2:	b173      	cbz	r3, 800edf2 <_strtod_l+0x92a>
 800edd4:	f7ff fb59 	bl	800e48a <sulp>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ede0:	f7f1 fa54 	bl	800028c <__adddf3>
 800ede4:	4682      	mov	sl, r0
 800ede6:	468b      	mov	fp, r1
 800ede8:	e755      	b.n	800ec96 <_strtod_l+0x7ce>
 800edea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edec:	ea13 0f0a 	tst.w	r3, sl
 800edf0:	e7e9      	b.n	800edc6 <_strtod_l+0x8fe>
 800edf2:	f7ff fb4a 	bl	800e48a <sulp>
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800edfe:	f7f1 fa43 	bl	8000288 <__aeabi_dsub>
 800ee02:	2200      	movs	r2, #0
 800ee04:	2300      	movs	r3, #0
 800ee06:	4682      	mov	sl, r0
 800ee08:	468b      	mov	fp, r1
 800ee0a:	f7f1 fe5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	f47f ae11 	bne.w	800ea36 <_strtod_l+0x56e>
 800ee14:	e73f      	b.n	800ec96 <_strtod_l+0x7ce>
 800ee16:	4641      	mov	r1, r8
 800ee18:	4620      	mov	r0, r4
 800ee1a:	f001 ff1c 	bl	8010c56 <__ratio>
 800ee1e:	ec57 6b10 	vmov	r6, r7, d0
 800ee22:	2200      	movs	r2, #0
 800ee24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ee28:	ee10 0a10 	vmov	r0, s0
 800ee2c:	4639      	mov	r1, r7
 800ee2e:	f7f1 fe5f 	bl	8000af0 <__aeabi_dcmple>
 800ee32:	2800      	cmp	r0, #0
 800ee34:	d077      	beq.n	800ef26 <_strtod_l+0xa5e>
 800ee36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d04a      	beq.n	800eed2 <_strtod_l+0xa0a>
 800ee3c:	4b68      	ldr	r3, [pc, #416]	; (800efe0 <_strtod_l+0xb18>)
 800ee3e:	2200      	movs	r2, #0
 800ee40:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ee44:	4f66      	ldr	r7, [pc, #408]	; (800efe0 <_strtod_l+0xb18>)
 800ee46:	2600      	movs	r6, #0
 800ee48:	4b62      	ldr	r3, [pc, #392]	; (800efd4 <_strtod_l+0xb0c>)
 800ee4a:	402b      	ands	r3, r5
 800ee4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee50:	4b64      	ldr	r3, [pc, #400]	; (800efe4 <_strtod_l+0xb1c>)
 800ee52:	429a      	cmp	r2, r3
 800ee54:	f040 80ce 	bne.w	800eff4 <_strtod_l+0xb2c>
 800ee58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ee5c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee60:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ee64:	ec4b ab10 	vmov	d0, sl, fp
 800ee68:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ee6c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ee70:	f001 fe2c 	bl	8010acc <__ulp>
 800ee74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ee78:	ec53 2b10 	vmov	r2, r3, d0
 800ee7c:	f7f1 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ee80:	4652      	mov	r2, sl
 800ee82:	465b      	mov	r3, fp
 800ee84:	f7f1 fa02 	bl	800028c <__adddf3>
 800ee88:	460b      	mov	r3, r1
 800ee8a:	4952      	ldr	r1, [pc, #328]	; (800efd4 <_strtod_l+0xb0c>)
 800ee8c:	4a56      	ldr	r2, [pc, #344]	; (800efe8 <_strtod_l+0xb20>)
 800ee8e:	4019      	ands	r1, r3
 800ee90:	4291      	cmp	r1, r2
 800ee92:	4682      	mov	sl, r0
 800ee94:	d95b      	bls.n	800ef4e <_strtod_l+0xa86>
 800ee96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee98:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ee9c:	4293      	cmp	r3, r2
 800ee9e:	d103      	bne.n	800eea8 <_strtod_l+0x9e0>
 800eea0:	9b08      	ldr	r3, [sp, #32]
 800eea2:	3301      	adds	r3, #1
 800eea4:	f43f ad2e 	beq.w	800e904 <_strtod_l+0x43c>
 800eea8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800efd8 <_strtod_l+0xb10>
 800eeac:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800eeb0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eeb2:	4648      	mov	r0, r9
 800eeb4:	f001 fb73 	bl	801059e <_Bfree>
 800eeb8:	9905      	ldr	r1, [sp, #20]
 800eeba:	4648      	mov	r0, r9
 800eebc:	f001 fb6f 	bl	801059e <_Bfree>
 800eec0:	4641      	mov	r1, r8
 800eec2:	4648      	mov	r0, r9
 800eec4:	f001 fb6b 	bl	801059e <_Bfree>
 800eec8:	4621      	mov	r1, r4
 800eeca:	4648      	mov	r0, r9
 800eecc:	f001 fb67 	bl	801059e <_Bfree>
 800eed0:	e619      	b.n	800eb06 <_strtod_l+0x63e>
 800eed2:	f1ba 0f00 	cmp.w	sl, #0
 800eed6:	d11a      	bne.n	800ef0e <_strtod_l+0xa46>
 800eed8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eedc:	b9eb      	cbnz	r3, 800ef1a <_strtod_l+0xa52>
 800eede:	2200      	movs	r2, #0
 800eee0:	4b3f      	ldr	r3, [pc, #252]	; (800efe0 <_strtod_l+0xb18>)
 800eee2:	4630      	mov	r0, r6
 800eee4:	4639      	mov	r1, r7
 800eee6:	f7f1 fdf9 	bl	8000adc <__aeabi_dcmplt>
 800eeea:	b9c8      	cbnz	r0, 800ef20 <_strtod_l+0xa58>
 800eeec:	4630      	mov	r0, r6
 800eeee:	4639      	mov	r1, r7
 800eef0:	2200      	movs	r2, #0
 800eef2:	4b3e      	ldr	r3, [pc, #248]	; (800efec <_strtod_l+0xb24>)
 800eef4:	f7f1 fb80 	bl	80005f8 <__aeabi_dmul>
 800eef8:	4606      	mov	r6, r0
 800eefa:	460f      	mov	r7, r1
 800eefc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ef00:	9618      	str	r6, [sp, #96]	; 0x60
 800ef02:	9319      	str	r3, [sp, #100]	; 0x64
 800ef04:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ef08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ef0c:	e79c      	b.n	800ee48 <_strtod_l+0x980>
 800ef0e:	f1ba 0f01 	cmp.w	sl, #1
 800ef12:	d102      	bne.n	800ef1a <_strtod_l+0xa52>
 800ef14:	2d00      	cmp	r5, #0
 800ef16:	f43f ad8e 	beq.w	800ea36 <_strtod_l+0x56e>
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	4b34      	ldr	r3, [pc, #208]	; (800eff0 <_strtod_l+0xb28>)
 800ef1e:	e78f      	b.n	800ee40 <_strtod_l+0x978>
 800ef20:	2600      	movs	r6, #0
 800ef22:	4f32      	ldr	r7, [pc, #200]	; (800efec <_strtod_l+0xb24>)
 800ef24:	e7ea      	b.n	800eefc <_strtod_l+0xa34>
 800ef26:	4b31      	ldr	r3, [pc, #196]	; (800efec <_strtod_l+0xb24>)
 800ef28:	4630      	mov	r0, r6
 800ef2a:	4639      	mov	r1, r7
 800ef2c:	2200      	movs	r2, #0
 800ef2e:	f7f1 fb63 	bl	80005f8 <__aeabi_dmul>
 800ef32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef34:	4606      	mov	r6, r0
 800ef36:	460f      	mov	r7, r1
 800ef38:	b933      	cbnz	r3, 800ef48 <_strtod_l+0xa80>
 800ef3a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef3e:	9010      	str	r0, [sp, #64]	; 0x40
 800ef40:	9311      	str	r3, [sp, #68]	; 0x44
 800ef42:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ef46:	e7df      	b.n	800ef08 <_strtod_l+0xa40>
 800ef48:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ef4c:	e7f9      	b.n	800ef42 <_strtod_l+0xa7a>
 800ef4e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ef52:	9b04      	ldr	r3, [sp, #16]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d1ab      	bne.n	800eeb0 <_strtod_l+0x9e8>
 800ef58:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ef5c:	0d1b      	lsrs	r3, r3, #20
 800ef5e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef60:	051b      	lsls	r3, r3, #20
 800ef62:	429a      	cmp	r2, r3
 800ef64:	465d      	mov	r5, fp
 800ef66:	d1a3      	bne.n	800eeb0 <_strtod_l+0x9e8>
 800ef68:	4639      	mov	r1, r7
 800ef6a:	4630      	mov	r0, r6
 800ef6c:	f7f1 fdf4 	bl	8000b58 <__aeabi_d2iz>
 800ef70:	f7f1 fad8 	bl	8000524 <__aeabi_i2d>
 800ef74:	460b      	mov	r3, r1
 800ef76:	4602      	mov	r2, r0
 800ef78:	4639      	mov	r1, r7
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f7f1 f984 	bl	8000288 <__aeabi_dsub>
 800ef80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef82:	4606      	mov	r6, r0
 800ef84:	460f      	mov	r7, r1
 800ef86:	b933      	cbnz	r3, 800ef96 <_strtod_l+0xace>
 800ef88:	f1ba 0f00 	cmp.w	sl, #0
 800ef8c:	d103      	bne.n	800ef96 <_strtod_l+0xace>
 800ef8e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ef92:	2d00      	cmp	r5, #0
 800ef94:	d06d      	beq.n	800f072 <_strtod_l+0xbaa>
 800ef96:	a30a      	add	r3, pc, #40	; (adr r3, 800efc0 <_strtod_l+0xaf8>)
 800ef98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef9c:	4630      	mov	r0, r6
 800ef9e:	4639      	mov	r1, r7
 800efa0:	f7f1 fd9c 	bl	8000adc <__aeabi_dcmplt>
 800efa4:	2800      	cmp	r0, #0
 800efa6:	f47f acb8 	bne.w	800e91a <_strtod_l+0x452>
 800efaa:	a307      	add	r3, pc, #28	; (adr r3, 800efc8 <_strtod_l+0xb00>)
 800efac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb0:	4630      	mov	r0, r6
 800efb2:	4639      	mov	r1, r7
 800efb4:	f7f1 fdb0 	bl	8000b18 <__aeabi_dcmpgt>
 800efb8:	2800      	cmp	r0, #0
 800efba:	f43f af79 	beq.w	800eeb0 <_strtod_l+0x9e8>
 800efbe:	e4ac      	b.n	800e91a <_strtod_l+0x452>
 800efc0:	94a03595 	.word	0x94a03595
 800efc4:	3fdfffff 	.word	0x3fdfffff
 800efc8:	35afe535 	.word	0x35afe535
 800efcc:	3fe00000 	.word	0x3fe00000
 800efd0:	000fffff 	.word	0x000fffff
 800efd4:	7ff00000 	.word	0x7ff00000
 800efd8:	7fefffff 	.word	0x7fefffff
 800efdc:	39500000 	.word	0x39500000
 800efe0:	3ff00000 	.word	0x3ff00000
 800efe4:	7fe00000 	.word	0x7fe00000
 800efe8:	7c9fffff 	.word	0x7c9fffff
 800efec:	3fe00000 	.word	0x3fe00000
 800eff0:	bff00000 	.word	0xbff00000
 800eff4:	9b04      	ldr	r3, [sp, #16]
 800eff6:	b333      	cbz	r3, 800f046 <_strtod_l+0xb7e>
 800eff8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800effa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800effe:	d822      	bhi.n	800f046 <_strtod_l+0xb7e>
 800f000:	a327      	add	r3, pc, #156	; (adr r3, 800f0a0 <_strtod_l+0xbd8>)
 800f002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f006:	4630      	mov	r0, r6
 800f008:	4639      	mov	r1, r7
 800f00a:	f7f1 fd71 	bl	8000af0 <__aeabi_dcmple>
 800f00e:	b1a0      	cbz	r0, 800f03a <_strtod_l+0xb72>
 800f010:	4639      	mov	r1, r7
 800f012:	4630      	mov	r0, r6
 800f014:	f7f1 fdc8 	bl	8000ba8 <__aeabi_d2uiz>
 800f018:	2800      	cmp	r0, #0
 800f01a:	bf08      	it	eq
 800f01c:	2001      	moveq	r0, #1
 800f01e:	f7f1 fa71 	bl	8000504 <__aeabi_ui2d>
 800f022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f024:	4606      	mov	r6, r0
 800f026:	460f      	mov	r7, r1
 800f028:	bb03      	cbnz	r3, 800f06c <_strtod_l+0xba4>
 800f02a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f02e:	9012      	str	r0, [sp, #72]	; 0x48
 800f030:	9313      	str	r3, [sp, #76]	; 0x4c
 800f032:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800f036:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800f03a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f03c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f03e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f042:	1a9b      	subs	r3, r3, r2
 800f044:	930b      	str	r3, [sp, #44]	; 0x2c
 800f046:	ed9d 0b08 	vldr	d0, [sp, #32]
 800f04a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800f04e:	f001 fd3d 	bl	8010acc <__ulp>
 800f052:	4650      	mov	r0, sl
 800f054:	ec53 2b10 	vmov	r2, r3, d0
 800f058:	4659      	mov	r1, fp
 800f05a:	f7f1 facd 	bl	80005f8 <__aeabi_dmul>
 800f05e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f062:	f7f1 f913 	bl	800028c <__adddf3>
 800f066:	4682      	mov	sl, r0
 800f068:	468b      	mov	fp, r1
 800f06a:	e772      	b.n	800ef52 <_strtod_l+0xa8a>
 800f06c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800f070:	e7df      	b.n	800f032 <_strtod_l+0xb6a>
 800f072:	a30d      	add	r3, pc, #52	; (adr r3, 800f0a8 <_strtod_l+0xbe0>)
 800f074:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f078:	f7f1 fd30 	bl	8000adc <__aeabi_dcmplt>
 800f07c:	e79c      	b.n	800efb8 <_strtod_l+0xaf0>
 800f07e:	2300      	movs	r3, #0
 800f080:	930d      	str	r3, [sp, #52]	; 0x34
 800f082:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f084:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f086:	6013      	str	r3, [r2, #0]
 800f088:	f7ff ba61 	b.w	800e54e <_strtod_l+0x86>
 800f08c:	2b65      	cmp	r3, #101	; 0x65
 800f08e:	f04f 0200 	mov.w	r2, #0
 800f092:	f43f ab4e 	beq.w	800e732 <_strtod_l+0x26a>
 800f096:	2101      	movs	r1, #1
 800f098:	4614      	mov	r4, r2
 800f09a:	9104      	str	r1, [sp, #16]
 800f09c:	f7ff bacb 	b.w	800e636 <_strtod_l+0x16e>
 800f0a0:	ffc00000 	.word	0xffc00000
 800f0a4:	41dfffff 	.word	0x41dfffff
 800f0a8:	94a03595 	.word	0x94a03595
 800f0ac:	3fcfffff 	.word	0x3fcfffff

0800f0b0 <_strtod_r>:
 800f0b0:	4b05      	ldr	r3, [pc, #20]	; (800f0c8 <_strtod_r+0x18>)
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	b410      	push	{r4}
 800f0b6:	6a1b      	ldr	r3, [r3, #32]
 800f0b8:	4c04      	ldr	r4, [pc, #16]	; (800f0cc <_strtod_r+0x1c>)
 800f0ba:	2b00      	cmp	r3, #0
 800f0bc:	bf08      	it	eq
 800f0be:	4623      	moveq	r3, r4
 800f0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f0c4:	f7ff ba00 	b.w	800e4c8 <_strtod_l>
 800f0c8:	20000044 	.word	0x20000044
 800f0cc:	200000a8 	.word	0x200000a8

0800f0d0 <_strtol_l.isra.0>:
 800f0d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0d4:	4680      	mov	r8, r0
 800f0d6:	4689      	mov	r9, r1
 800f0d8:	4692      	mov	sl, r2
 800f0da:	461e      	mov	r6, r3
 800f0dc:	460f      	mov	r7, r1
 800f0de:	463d      	mov	r5, r7
 800f0e0:	9808      	ldr	r0, [sp, #32]
 800f0e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f0e6:	f001 f9ed 	bl	80104c4 <__locale_ctype_ptr_l>
 800f0ea:	4420      	add	r0, r4
 800f0ec:	7843      	ldrb	r3, [r0, #1]
 800f0ee:	f013 0308 	ands.w	r3, r3, #8
 800f0f2:	d132      	bne.n	800f15a <_strtol_l.isra.0+0x8a>
 800f0f4:	2c2d      	cmp	r4, #45	; 0x2d
 800f0f6:	d132      	bne.n	800f15e <_strtol_l.isra.0+0x8e>
 800f0f8:	787c      	ldrb	r4, [r7, #1]
 800f0fa:	1cbd      	adds	r5, r7, #2
 800f0fc:	2201      	movs	r2, #1
 800f0fe:	2e00      	cmp	r6, #0
 800f100:	d05d      	beq.n	800f1be <_strtol_l.isra.0+0xee>
 800f102:	2e10      	cmp	r6, #16
 800f104:	d109      	bne.n	800f11a <_strtol_l.isra.0+0x4a>
 800f106:	2c30      	cmp	r4, #48	; 0x30
 800f108:	d107      	bne.n	800f11a <_strtol_l.isra.0+0x4a>
 800f10a:	782b      	ldrb	r3, [r5, #0]
 800f10c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f110:	2b58      	cmp	r3, #88	; 0x58
 800f112:	d14f      	bne.n	800f1b4 <_strtol_l.isra.0+0xe4>
 800f114:	786c      	ldrb	r4, [r5, #1]
 800f116:	2610      	movs	r6, #16
 800f118:	3502      	adds	r5, #2
 800f11a:	2a00      	cmp	r2, #0
 800f11c:	bf14      	ite	ne
 800f11e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800f122:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800f126:	2700      	movs	r7, #0
 800f128:	fbb1 fcf6 	udiv	ip, r1, r6
 800f12c:	4638      	mov	r0, r7
 800f12e:	fb06 1e1c 	mls	lr, r6, ip, r1
 800f132:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800f136:	2b09      	cmp	r3, #9
 800f138:	d817      	bhi.n	800f16a <_strtol_l.isra.0+0x9a>
 800f13a:	461c      	mov	r4, r3
 800f13c:	42a6      	cmp	r6, r4
 800f13e:	dd23      	ble.n	800f188 <_strtol_l.isra.0+0xb8>
 800f140:	1c7b      	adds	r3, r7, #1
 800f142:	d007      	beq.n	800f154 <_strtol_l.isra.0+0x84>
 800f144:	4584      	cmp	ip, r0
 800f146:	d31c      	bcc.n	800f182 <_strtol_l.isra.0+0xb2>
 800f148:	d101      	bne.n	800f14e <_strtol_l.isra.0+0x7e>
 800f14a:	45a6      	cmp	lr, r4
 800f14c:	db19      	blt.n	800f182 <_strtol_l.isra.0+0xb2>
 800f14e:	fb00 4006 	mla	r0, r0, r6, r4
 800f152:	2701      	movs	r7, #1
 800f154:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f158:	e7eb      	b.n	800f132 <_strtol_l.isra.0+0x62>
 800f15a:	462f      	mov	r7, r5
 800f15c:	e7bf      	b.n	800f0de <_strtol_l.isra.0+0xe>
 800f15e:	2c2b      	cmp	r4, #43	; 0x2b
 800f160:	bf04      	itt	eq
 800f162:	1cbd      	addeq	r5, r7, #2
 800f164:	787c      	ldrbeq	r4, [r7, #1]
 800f166:	461a      	mov	r2, r3
 800f168:	e7c9      	b.n	800f0fe <_strtol_l.isra.0+0x2e>
 800f16a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800f16e:	2b19      	cmp	r3, #25
 800f170:	d801      	bhi.n	800f176 <_strtol_l.isra.0+0xa6>
 800f172:	3c37      	subs	r4, #55	; 0x37
 800f174:	e7e2      	b.n	800f13c <_strtol_l.isra.0+0x6c>
 800f176:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800f17a:	2b19      	cmp	r3, #25
 800f17c:	d804      	bhi.n	800f188 <_strtol_l.isra.0+0xb8>
 800f17e:	3c57      	subs	r4, #87	; 0x57
 800f180:	e7dc      	b.n	800f13c <_strtol_l.isra.0+0x6c>
 800f182:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f186:	e7e5      	b.n	800f154 <_strtol_l.isra.0+0x84>
 800f188:	1c7b      	adds	r3, r7, #1
 800f18a:	d108      	bne.n	800f19e <_strtol_l.isra.0+0xce>
 800f18c:	2322      	movs	r3, #34	; 0x22
 800f18e:	f8c8 3000 	str.w	r3, [r8]
 800f192:	4608      	mov	r0, r1
 800f194:	f1ba 0f00 	cmp.w	sl, #0
 800f198:	d107      	bne.n	800f1aa <_strtol_l.isra.0+0xda>
 800f19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f19e:	b102      	cbz	r2, 800f1a2 <_strtol_l.isra.0+0xd2>
 800f1a0:	4240      	negs	r0, r0
 800f1a2:	f1ba 0f00 	cmp.w	sl, #0
 800f1a6:	d0f8      	beq.n	800f19a <_strtol_l.isra.0+0xca>
 800f1a8:	b10f      	cbz	r7, 800f1ae <_strtol_l.isra.0+0xde>
 800f1aa:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800f1ae:	f8ca 9000 	str.w	r9, [sl]
 800f1b2:	e7f2      	b.n	800f19a <_strtol_l.isra.0+0xca>
 800f1b4:	2430      	movs	r4, #48	; 0x30
 800f1b6:	2e00      	cmp	r6, #0
 800f1b8:	d1af      	bne.n	800f11a <_strtol_l.isra.0+0x4a>
 800f1ba:	2608      	movs	r6, #8
 800f1bc:	e7ad      	b.n	800f11a <_strtol_l.isra.0+0x4a>
 800f1be:	2c30      	cmp	r4, #48	; 0x30
 800f1c0:	d0a3      	beq.n	800f10a <_strtol_l.isra.0+0x3a>
 800f1c2:	260a      	movs	r6, #10
 800f1c4:	e7a9      	b.n	800f11a <_strtol_l.isra.0+0x4a>
	...

0800f1c8 <_strtol_r>:
 800f1c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1ca:	4c06      	ldr	r4, [pc, #24]	; (800f1e4 <_strtol_r+0x1c>)
 800f1cc:	4d06      	ldr	r5, [pc, #24]	; (800f1e8 <_strtol_r+0x20>)
 800f1ce:	6824      	ldr	r4, [r4, #0]
 800f1d0:	6a24      	ldr	r4, [r4, #32]
 800f1d2:	2c00      	cmp	r4, #0
 800f1d4:	bf08      	it	eq
 800f1d6:	462c      	moveq	r4, r5
 800f1d8:	9400      	str	r4, [sp, #0]
 800f1da:	f7ff ff79 	bl	800f0d0 <_strtol_l.isra.0>
 800f1de:	b003      	add	sp, #12
 800f1e0:	bd30      	pop	{r4, r5, pc}
 800f1e2:	bf00      	nop
 800f1e4:	20000044 	.word	0x20000044
 800f1e8:	200000a8 	.word	0x200000a8

0800f1ec <quorem>:
 800f1ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f1f0:	6903      	ldr	r3, [r0, #16]
 800f1f2:	690c      	ldr	r4, [r1, #16]
 800f1f4:	42a3      	cmp	r3, r4
 800f1f6:	4680      	mov	r8, r0
 800f1f8:	f2c0 8082 	blt.w	800f300 <quorem+0x114>
 800f1fc:	3c01      	subs	r4, #1
 800f1fe:	f101 0714 	add.w	r7, r1, #20
 800f202:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f206:	f100 0614 	add.w	r6, r0, #20
 800f20a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f20e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f212:	eb06 030c 	add.w	r3, r6, ip
 800f216:	3501      	adds	r5, #1
 800f218:	eb07 090c 	add.w	r9, r7, ip
 800f21c:	9301      	str	r3, [sp, #4]
 800f21e:	fbb0 f5f5 	udiv	r5, r0, r5
 800f222:	b395      	cbz	r5, 800f28a <quorem+0x9e>
 800f224:	f04f 0a00 	mov.w	sl, #0
 800f228:	4638      	mov	r0, r7
 800f22a:	46b6      	mov	lr, r6
 800f22c:	46d3      	mov	fp, sl
 800f22e:	f850 2b04 	ldr.w	r2, [r0], #4
 800f232:	b293      	uxth	r3, r2
 800f234:	fb05 a303 	mla	r3, r5, r3, sl
 800f238:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	ebab 0303 	sub.w	r3, fp, r3
 800f242:	0c12      	lsrs	r2, r2, #16
 800f244:	f8de b000 	ldr.w	fp, [lr]
 800f248:	fb05 a202 	mla	r2, r5, r2, sl
 800f24c:	fa13 f38b 	uxtah	r3, r3, fp
 800f250:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f254:	fa1f fb82 	uxth.w	fp, r2
 800f258:	f8de 2000 	ldr.w	r2, [lr]
 800f25c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f260:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f264:	b29b      	uxth	r3, r3
 800f266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f26a:	4581      	cmp	r9, r0
 800f26c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f270:	f84e 3b04 	str.w	r3, [lr], #4
 800f274:	d2db      	bcs.n	800f22e <quorem+0x42>
 800f276:	f856 300c 	ldr.w	r3, [r6, ip]
 800f27a:	b933      	cbnz	r3, 800f28a <quorem+0x9e>
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	3b04      	subs	r3, #4
 800f280:	429e      	cmp	r6, r3
 800f282:	461a      	mov	r2, r3
 800f284:	d330      	bcc.n	800f2e8 <quorem+0xfc>
 800f286:	f8c8 4010 	str.w	r4, [r8, #16]
 800f28a:	4640      	mov	r0, r8
 800f28c:	f001 fba6 	bl	80109dc <__mcmp>
 800f290:	2800      	cmp	r0, #0
 800f292:	db25      	blt.n	800f2e0 <quorem+0xf4>
 800f294:	3501      	adds	r5, #1
 800f296:	4630      	mov	r0, r6
 800f298:	f04f 0c00 	mov.w	ip, #0
 800f29c:	f857 2b04 	ldr.w	r2, [r7], #4
 800f2a0:	f8d0 e000 	ldr.w	lr, [r0]
 800f2a4:	b293      	uxth	r3, r2
 800f2a6:	ebac 0303 	sub.w	r3, ip, r3
 800f2aa:	0c12      	lsrs	r2, r2, #16
 800f2ac:	fa13 f38e 	uxtah	r3, r3, lr
 800f2b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f2b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f2b8:	b29b      	uxth	r3, r3
 800f2ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f2be:	45b9      	cmp	r9, r7
 800f2c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f2c4:	f840 3b04 	str.w	r3, [r0], #4
 800f2c8:	d2e8      	bcs.n	800f29c <quorem+0xb0>
 800f2ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f2ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f2d2:	b92a      	cbnz	r2, 800f2e0 <quorem+0xf4>
 800f2d4:	3b04      	subs	r3, #4
 800f2d6:	429e      	cmp	r6, r3
 800f2d8:	461a      	mov	r2, r3
 800f2da:	d30b      	bcc.n	800f2f4 <quorem+0x108>
 800f2dc:	f8c8 4010 	str.w	r4, [r8, #16]
 800f2e0:	4628      	mov	r0, r5
 800f2e2:	b003      	add	sp, #12
 800f2e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2e8:	6812      	ldr	r2, [r2, #0]
 800f2ea:	3b04      	subs	r3, #4
 800f2ec:	2a00      	cmp	r2, #0
 800f2ee:	d1ca      	bne.n	800f286 <quorem+0x9a>
 800f2f0:	3c01      	subs	r4, #1
 800f2f2:	e7c5      	b.n	800f280 <quorem+0x94>
 800f2f4:	6812      	ldr	r2, [r2, #0]
 800f2f6:	3b04      	subs	r3, #4
 800f2f8:	2a00      	cmp	r2, #0
 800f2fa:	d1ef      	bne.n	800f2dc <quorem+0xf0>
 800f2fc:	3c01      	subs	r4, #1
 800f2fe:	e7ea      	b.n	800f2d6 <quorem+0xea>
 800f300:	2000      	movs	r0, #0
 800f302:	e7ee      	b.n	800f2e2 <quorem+0xf6>
 800f304:	0000      	movs	r0, r0
	...

0800f308 <_dtoa_r>:
 800f308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f30c:	ec57 6b10 	vmov	r6, r7, d0
 800f310:	b097      	sub	sp, #92	; 0x5c
 800f312:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f314:	9106      	str	r1, [sp, #24]
 800f316:	4604      	mov	r4, r0
 800f318:	920b      	str	r2, [sp, #44]	; 0x2c
 800f31a:	9312      	str	r3, [sp, #72]	; 0x48
 800f31c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f320:	e9cd 6700 	strd	r6, r7, [sp]
 800f324:	b93d      	cbnz	r5, 800f336 <_dtoa_r+0x2e>
 800f326:	2010      	movs	r0, #16
 800f328:	f001 f8e0 	bl	80104ec <malloc>
 800f32c:	6260      	str	r0, [r4, #36]	; 0x24
 800f32e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f332:	6005      	str	r5, [r0, #0]
 800f334:	60c5      	str	r5, [r0, #12]
 800f336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f338:	6819      	ldr	r1, [r3, #0]
 800f33a:	b151      	cbz	r1, 800f352 <_dtoa_r+0x4a>
 800f33c:	685a      	ldr	r2, [r3, #4]
 800f33e:	604a      	str	r2, [r1, #4]
 800f340:	2301      	movs	r3, #1
 800f342:	4093      	lsls	r3, r2
 800f344:	608b      	str	r3, [r1, #8]
 800f346:	4620      	mov	r0, r4
 800f348:	f001 f929 	bl	801059e <_Bfree>
 800f34c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f34e:	2200      	movs	r2, #0
 800f350:	601a      	str	r2, [r3, #0]
 800f352:	1e3b      	subs	r3, r7, #0
 800f354:	bfbb      	ittet	lt
 800f356:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f35a:	9301      	strlt	r3, [sp, #4]
 800f35c:	2300      	movge	r3, #0
 800f35e:	2201      	movlt	r2, #1
 800f360:	bfac      	ite	ge
 800f362:	f8c8 3000 	strge.w	r3, [r8]
 800f366:	f8c8 2000 	strlt.w	r2, [r8]
 800f36a:	4baf      	ldr	r3, [pc, #700]	; (800f628 <_dtoa_r+0x320>)
 800f36c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f370:	ea33 0308 	bics.w	r3, r3, r8
 800f374:	d114      	bne.n	800f3a0 <_dtoa_r+0x98>
 800f376:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f378:	f242 730f 	movw	r3, #9999	; 0x270f
 800f37c:	6013      	str	r3, [r2, #0]
 800f37e:	9b00      	ldr	r3, [sp, #0]
 800f380:	b923      	cbnz	r3, 800f38c <_dtoa_r+0x84>
 800f382:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f386:	2800      	cmp	r0, #0
 800f388:	f000 8542 	beq.w	800fe10 <_dtoa_r+0xb08>
 800f38c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f38e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f63c <_dtoa_r+0x334>
 800f392:	2b00      	cmp	r3, #0
 800f394:	f000 8544 	beq.w	800fe20 <_dtoa_r+0xb18>
 800f398:	f10b 0303 	add.w	r3, fp, #3
 800f39c:	f000 bd3e 	b.w	800fe1c <_dtoa_r+0xb14>
 800f3a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	4630      	mov	r0, r6
 800f3aa:	4639      	mov	r1, r7
 800f3ac:	f7f1 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800f3b0:	4681      	mov	r9, r0
 800f3b2:	b168      	cbz	r0, 800f3d0 <_dtoa_r+0xc8>
 800f3b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f3b6:	2301      	movs	r3, #1
 800f3b8:	6013      	str	r3, [r2, #0]
 800f3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f000 8524 	beq.w	800fe0a <_dtoa_r+0xb02>
 800f3c2:	4b9a      	ldr	r3, [pc, #616]	; (800f62c <_dtoa_r+0x324>)
 800f3c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f3c6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f3ca:	6013      	str	r3, [r2, #0]
 800f3cc:	f000 bd28 	b.w	800fe20 <_dtoa_r+0xb18>
 800f3d0:	aa14      	add	r2, sp, #80	; 0x50
 800f3d2:	a915      	add	r1, sp, #84	; 0x54
 800f3d4:	ec47 6b10 	vmov	d0, r6, r7
 800f3d8:	4620      	mov	r0, r4
 800f3da:	f001 fbed 	bl	8010bb8 <__d2b>
 800f3de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f3e2:	9004      	str	r0, [sp, #16]
 800f3e4:	2d00      	cmp	r5, #0
 800f3e6:	d07c      	beq.n	800f4e2 <_dtoa_r+0x1da>
 800f3e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f3ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f3f0:	46b2      	mov	sl, r6
 800f3f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f3f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f3fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f3fe:	2200      	movs	r2, #0
 800f400:	4b8b      	ldr	r3, [pc, #556]	; (800f630 <_dtoa_r+0x328>)
 800f402:	4650      	mov	r0, sl
 800f404:	4659      	mov	r1, fp
 800f406:	f7f0 ff3f 	bl	8000288 <__aeabi_dsub>
 800f40a:	a381      	add	r3, pc, #516	; (adr r3, 800f610 <_dtoa_r+0x308>)
 800f40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f410:	f7f1 f8f2 	bl	80005f8 <__aeabi_dmul>
 800f414:	a380      	add	r3, pc, #512	; (adr r3, 800f618 <_dtoa_r+0x310>)
 800f416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f41a:	f7f0 ff37 	bl	800028c <__adddf3>
 800f41e:	4606      	mov	r6, r0
 800f420:	4628      	mov	r0, r5
 800f422:	460f      	mov	r7, r1
 800f424:	f7f1 f87e 	bl	8000524 <__aeabi_i2d>
 800f428:	a37d      	add	r3, pc, #500	; (adr r3, 800f620 <_dtoa_r+0x318>)
 800f42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42e:	f7f1 f8e3 	bl	80005f8 <__aeabi_dmul>
 800f432:	4602      	mov	r2, r0
 800f434:	460b      	mov	r3, r1
 800f436:	4630      	mov	r0, r6
 800f438:	4639      	mov	r1, r7
 800f43a:	f7f0 ff27 	bl	800028c <__adddf3>
 800f43e:	4606      	mov	r6, r0
 800f440:	460f      	mov	r7, r1
 800f442:	f7f1 fb89 	bl	8000b58 <__aeabi_d2iz>
 800f446:	2200      	movs	r2, #0
 800f448:	4682      	mov	sl, r0
 800f44a:	2300      	movs	r3, #0
 800f44c:	4630      	mov	r0, r6
 800f44e:	4639      	mov	r1, r7
 800f450:	f7f1 fb44 	bl	8000adc <__aeabi_dcmplt>
 800f454:	b148      	cbz	r0, 800f46a <_dtoa_r+0x162>
 800f456:	4650      	mov	r0, sl
 800f458:	f7f1 f864 	bl	8000524 <__aeabi_i2d>
 800f45c:	4632      	mov	r2, r6
 800f45e:	463b      	mov	r3, r7
 800f460:	f7f1 fb32 	bl	8000ac8 <__aeabi_dcmpeq>
 800f464:	b908      	cbnz	r0, 800f46a <_dtoa_r+0x162>
 800f466:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f46a:	f1ba 0f16 	cmp.w	sl, #22
 800f46e:	d859      	bhi.n	800f524 <_dtoa_r+0x21c>
 800f470:	4970      	ldr	r1, [pc, #448]	; (800f634 <_dtoa_r+0x32c>)
 800f472:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f476:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f47a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f47e:	f7f1 fb4b 	bl	8000b18 <__aeabi_dcmpgt>
 800f482:	2800      	cmp	r0, #0
 800f484:	d050      	beq.n	800f528 <_dtoa_r+0x220>
 800f486:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f48a:	2300      	movs	r3, #0
 800f48c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f48e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f490:	1b5d      	subs	r5, r3, r5
 800f492:	f1b5 0801 	subs.w	r8, r5, #1
 800f496:	bf49      	itett	mi
 800f498:	f1c5 0301 	rsbmi	r3, r5, #1
 800f49c:	2300      	movpl	r3, #0
 800f49e:	9305      	strmi	r3, [sp, #20]
 800f4a0:	f04f 0800 	movmi.w	r8, #0
 800f4a4:	bf58      	it	pl
 800f4a6:	9305      	strpl	r3, [sp, #20]
 800f4a8:	f1ba 0f00 	cmp.w	sl, #0
 800f4ac:	db3e      	blt.n	800f52c <_dtoa_r+0x224>
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	44d0      	add	r8, sl
 800f4b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f4b6:	9307      	str	r3, [sp, #28]
 800f4b8:	9b06      	ldr	r3, [sp, #24]
 800f4ba:	2b09      	cmp	r3, #9
 800f4bc:	f200 8090 	bhi.w	800f5e0 <_dtoa_r+0x2d8>
 800f4c0:	2b05      	cmp	r3, #5
 800f4c2:	bfc4      	itt	gt
 800f4c4:	3b04      	subgt	r3, #4
 800f4c6:	9306      	strgt	r3, [sp, #24]
 800f4c8:	9b06      	ldr	r3, [sp, #24]
 800f4ca:	f1a3 0302 	sub.w	r3, r3, #2
 800f4ce:	bfcc      	ite	gt
 800f4d0:	2500      	movgt	r5, #0
 800f4d2:	2501      	movle	r5, #1
 800f4d4:	2b03      	cmp	r3, #3
 800f4d6:	f200 808f 	bhi.w	800f5f8 <_dtoa_r+0x2f0>
 800f4da:	e8df f003 	tbb	[pc, r3]
 800f4de:	7f7d      	.short	0x7f7d
 800f4e0:	7131      	.short	0x7131
 800f4e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f4e6:	441d      	add	r5, r3
 800f4e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f4ec:	2820      	cmp	r0, #32
 800f4ee:	dd13      	ble.n	800f518 <_dtoa_r+0x210>
 800f4f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f4f4:	9b00      	ldr	r3, [sp, #0]
 800f4f6:	fa08 f800 	lsl.w	r8, r8, r0
 800f4fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f4fe:	fa23 f000 	lsr.w	r0, r3, r0
 800f502:	ea48 0000 	orr.w	r0, r8, r0
 800f506:	f7f0 fffd 	bl	8000504 <__aeabi_ui2d>
 800f50a:	2301      	movs	r3, #1
 800f50c:	4682      	mov	sl, r0
 800f50e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f512:	3d01      	subs	r5, #1
 800f514:	9313      	str	r3, [sp, #76]	; 0x4c
 800f516:	e772      	b.n	800f3fe <_dtoa_r+0xf6>
 800f518:	9b00      	ldr	r3, [sp, #0]
 800f51a:	f1c0 0020 	rsb	r0, r0, #32
 800f51e:	fa03 f000 	lsl.w	r0, r3, r0
 800f522:	e7f0      	b.n	800f506 <_dtoa_r+0x1fe>
 800f524:	2301      	movs	r3, #1
 800f526:	e7b1      	b.n	800f48c <_dtoa_r+0x184>
 800f528:	900f      	str	r0, [sp, #60]	; 0x3c
 800f52a:	e7b0      	b.n	800f48e <_dtoa_r+0x186>
 800f52c:	9b05      	ldr	r3, [sp, #20]
 800f52e:	eba3 030a 	sub.w	r3, r3, sl
 800f532:	9305      	str	r3, [sp, #20]
 800f534:	f1ca 0300 	rsb	r3, sl, #0
 800f538:	9307      	str	r3, [sp, #28]
 800f53a:	2300      	movs	r3, #0
 800f53c:	930e      	str	r3, [sp, #56]	; 0x38
 800f53e:	e7bb      	b.n	800f4b8 <_dtoa_r+0x1b0>
 800f540:	2301      	movs	r3, #1
 800f542:	930a      	str	r3, [sp, #40]	; 0x28
 800f544:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f546:	2b00      	cmp	r3, #0
 800f548:	dd59      	ble.n	800f5fe <_dtoa_r+0x2f6>
 800f54a:	9302      	str	r3, [sp, #8]
 800f54c:	4699      	mov	r9, r3
 800f54e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f550:	2200      	movs	r2, #0
 800f552:	6072      	str	r2, [r6, #4]
 800f554:	2204      	movs	r2, #4
 800f556:	f102 0014 	add.w	r0, r2, #20
 800f55a:	4298      	cmp	r0, r3
 800f55c:	6871      	ldr	r1, [r6, #4]
 800f55e:	d953      	bls.n	800f608 <_dtoa_r+0x300>
 800f560:	4620      	mov	r0, r4
 800f562:	f000 ffe8 	bl	8010536 <_Balloc>
 800f566:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f568:	6030      	str	r0, [r6, #0]
 800f56a:	f1b9 0f0e 	cmp.w	r9, #14
 800f56e:	f8d3 b000 	ldr.w	fp, [r3]
 800f572:	f200 80e6 	bhi.w	800f742 <_dtoa_r+0x43a>
 800f576:	2d00      	cmp	r5, #0
 800f578:	f000 80e3 	beq.w	800f742 <_dtoa_r+0x43a>
 800f57c:	ed9d 7b00 	vldr	d7, [sp]
 800f580:	f1ba 0f00 	cmp.w	sl, #0
 800f584:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f588:	dd74      	ble.n	800f674 <_dtoa_r+0x36c>
 800f58a:	4a2a      	ldr	r2, [pc, #168]	; (800f634 <_dtoa_r+0x32c>)
 800f58c:	f00a 030f 	and.w	r3, sl, #15
 800f590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f594:	ed93 7b00 	vldr	d7, [r3]
 800f598:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f59c:	06f0      	lsls	r0, r6, #27
 800f59e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f5a2:	d565      	bpl.n	800f670 <_dtoa_r+0x368>
 800f5a4:	4b24      	ldr	r3, [pc, #144]	; (800f638 <_dtoa_r+0x330>)
 800f5a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f5aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f5ae:	f7f1 f94d 	bl	800084c <__aeabi_ddiv>
 800f5b2:	e9cd 0100 	strd	r0, r1, [sp]
 800f5b6:	f006 060f 	and.w	r6, r6, #15
 800f5ba:	2503      	movs	r5, #3
 800f5bc:	4f1e      	ldr	r7, [pc, #120]	; (800f638 <_dtoa_r+0x330>)
 800f5be:	e04c      	b.n	800f65a <_dtoa_r+0x352>
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	930a      	str	r3, [sp, #40]	; 0x28
 800f5c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f5c6:	4453      	add	r3, sl
 800f5c8:	f103 0901 	add.w	r9, r3, #1
 800f5cc:	9302      	str	r3, [sp, #8]
 800f5ce:	464b      	mov	r3, r9
 800f5d0:	2b01      	cmp	r3, #1
 800f5d2:	bfb8      	it	lt
 800f5d4:	2301      	movlt	r3, #1
 800f5d6:	e7ba      	b.n	800f54e <_dtoa_r+0x246>
 800f5d8:	2300      	movs	r3, #0
 800f5da:	e7b2      	b.n	800f542 <_dtoa_r+0x23a>
 800f5dc:	2300      	movs	r3, #0
 800f5de:	e7f0      	b.n	800f5c2 <_dtoa_r+0x2ba>
 800f5e0:	2501      	movs	r5, #1
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	9306      	str	r3, [sp, #24]
 800f5e6:	950a      	str	r5, [sp, #40]	; 0x28
 800f5e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f5ec:	9302      	str	r3, [sp, #8]
 800f5ee:	4699      	mov	r9, r3
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	2312      	movs	r3, #18
 800f5f4:	920b      	str	r2, [sp, #44]	; 0x2c
 800f5f6:	e7aa      	b.n	800f54e <_dtoa_r+0x246>
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	930a      	str	r3, [sp, #40]	; 0x28
 800f5fc:	e7f4      	b.n	800f5e8 <_dtoa_r+0x2e0>
 800f5fe:	2301      	movs	r3, #1
 800f600:	9302      	str	r3, [sp, #8]
 800f602:	4699      	mov	r9, r3
 800f604:	461a      	mov	r2, r3
 800f606:	e7f5      	b.n	800f5f4 <_dtoa_r+0x2ec>
 800f608:	3101      	adds	r1, #1
 800f60a:	6071      	str	r1, [r6, #4]
 800f60c:	0052      	lsls	r2, r2, #1
 800f60e:	e7a2      	b.n	800f556 <_dtoa_r+0x24e>
 800f610:	636f4361 	.word	0x636f4361
 800f614:	3fd287a7 	.word	0x3fd287a7
 800f618:	8b60c8b3 	.word	0x8b60c8b3
 800f61c:	3fc68a28 	.word	0x3fc68a28
 800f620:	509f79fb 	.word	0x509f79fb
 800f624:	3fd34413 	.word	0x3fd34413
 800f628:	7ff00000 	.word	0x7ff00000
 800f62c:	08012819 	.word	0x08012819
 800f630:	3ff80000 	.word	0x3ff80000
 800f634:	080128d8 	.word	0x080128d8
 800f638:	080128b0 	.word	0x080128b0
 800f63c:	080128a1 	.word	0x080128a1
 800f640:	07f1      	lsls	r1, r6, #31
 800f642:	d508      	bpl.n	800f656 <_dtoa_r+0x34e>
 800f644:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f64c:	f7f0 ffd4 	bl	80005f8 <__aeabi_dmul>
 800f650:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f654:	3501      	adds	r5, #1
 800f656:	1076      	asrs	r6, r6, #1
 800f658:	3708      	adds	r7, #8
 800f65a:	2e00      	cmp	r6, #0
 800f65c:	d1f0      	bne.n	800f640 <_dtoa_r+0x338>
 800f65e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f662:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f666:	f7f1 f8f1 	bl	800084c <__aeabi_ddiv>
 800f66a:	e9cd 0100 	strd	r0, r1, [sp]
 800f66e:	e01a      	b.n	800f6a6 <_dtoa_r+0x39e>
 800f670:	2502      	movs	r5, #2
 800f672:	e7a3      	b.n	800f5bc <_dtoa_r+0x2b4>
 800f674:	f000 80a0 	beq.w	800f7b8 <_dtoa_r+0x4b0>
 800f678:	f1ca 0600 	rsb	r6, sl, #0
 800f67c:	4b9f      	ldr	r3, [pc, #636]	; (800f8fc <_dtoa_r+0x5f4>)
 800f67e:	4fa0      	ldr	r7, [pc, #640]	; (800f900 <_dtoa_r+0x5f8>)
 800f680:	f006 020f 	and.w	r2, r6, #15
 800f684:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f690:	f7f0 ffb2 	bl	80005f8 <__aeabi_dmul>
 800f694:	e9cd 0100 	strd	r0, r1, [sp]
 800f698:	1136      	asrs	r6, r6, #4
 800f69a:	2300      	movs	r3, #0
 800f69c:	2502      	movs	r5, #2
 800f69e:	2e00      	cmp	r6, #0
 800f6a0:	d17f      	bne.n	800f7a2 <_dtoa_r+0x49a>
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d1e1      	bne.n	800f66a <_dtoa_r+0x362>
 800f6a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	f000 8087 	beq.w	800f7bc <_dtoa_r+0x4b4>
 800f6ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	4b93      	ldr	r3, [pc, #588]	; (800f904 <_dtoa_r+0x5fc>)
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	4639      	mov	r1, r7
 800f6ba:	f7f1 fa0f 	bl	8000adc <__aeabi_dcmplt>
 800f6be:	2800      	cmp	r0, #0
 800f6c0:	d07c      	beq.n	800f7bc <_dtoa_r+0x4b4>
 800f6c2:	f1b9 0f00 	cmp.w	r9, #0
 800f6c6:	d079      	beq.n	800f7bc <_dtoa_r+0x4b4>
 800f6c8:	9b02      	ldr	r3, [sp, #8]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	dd35      	ble.n	800f73a <_dtoa_r+0x432>
 800f6ce:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f6d2:	9308      	str	r3, [sp, #32]
 800f6d4:	4639      	mov	r1, r7
 800f6d6:	2200      	movs	r2, #0
 800f6d8:	4b8b      	ldr	r3, [pc, #556]	; (800f908 <_dtoa_r+0x600>)
 800f6da:	4630      	mov	r0, r6
 800f6dc:	f7f0 ff8c 	bl	80005f8 <__aeabi_dmul>
 800f6e0:	e9cd 0100 	strd	r0, r1, [sp]
 800f6e4:	9f02      	ldr	r7, [sp, #8]
 800f6e6:	3501      	adds	r5, #1
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	f7f0 ff1b 	bl	8000524 <__aeabi_i2d>
 800f6ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f6f2:	f7f0 ff81 	bl	80005f8 <__aeabi_dmul>
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	4b84      	ldr	r3, [pc, #528]	; (800f90c <_dtoa_r+0x604>)
 800f6fa:	f7f0 fdc7 	bl	800028c <__adddf3>
 800f6fe:	4605      	mov	r5, r0
 800f700:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f704:	2f00      	cmp	r7, #0
 800f706:	d15d      	bne.n	800f7c4 <_dtoa_r+0x4bc>
 800f708:	2200      	movs	r2, #0
 800f70a:	4b81      	ldr	r3, [pc, #516]	; (800f910 <_dtoa_r+0x608>)
 800f70c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f710:	f7f0 fdba 	bl	8000288 <__aeabi_dsub>
 800f714:	462a      	mov	r2, r5
 800f716:	4633      	mov	r3, r6
 800f718:	e9cd 0100 	strd	r0, r1, [sp]
 800f71c:	f7f1 f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 800f720:	2800      	cmp	r0, #0
 800f722:	f040 8288 	bne.w	800fc36 <_dtoa_r+0x92e>
 800f726:	462a      	mov	r2, r5
 800f728:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f72c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f730:	f7f1 f9d4 	bl	8000adc <__aeabi_dcmplt>
 800f734:	2800      	cmp	r0, #0
 800f736:	f040 827c 	bne.w	800fc32 <_dtoa_r+0x92a>
 800f73a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f73e:	e9cd 2300 	strd	r2, r3, [sp]
 800f742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f744:	2b00      	cmp	r3, #0
 800f746:	f2c0 8150 	blt.w	800f9ea <_dtoa_r+0x6e2>
 800f74a:	f1ba 0f0e 	cmp.w	sl, #14
 800f74e:	f300 814c 	bgt.w	800f9ea <_dtoa_r+0x6e2>
 800f752:	4b6a      	ldr	r3, [pc, #424]	; (800f8fc <_dtoa_r+0x5f4>)
 800f754:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f758:	ed93 7b00 	vldr	d7, [r3]
 800f75c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f75e:	2b00      	cmp	r3, #0
 800f760:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f764:	f280 80d8 	bge.w	800f918 <_dtoa_r+0x610>
 800f768:	f1b9 0f00 	cmp.w	r9, #0
 800f76c:	f300 80d4 	bgt.w	800f918 <_dtoa_r+0x610>
 800f770:	f040 825e 	bne.w	800fc30 <_dtoa_r+0x928>
 800f774:	2200      	movs	r2, #0
 800f776:	4b66      	ldr	r3, [pc, #408]	; (800f910 <_dtoa_r+0x608>)
 800f778:	ec51 0b17 	vmov	r0, r1, d7
 800f77c:	f7f0 ff3c 	bl	80005f8 <__aeabi_dmul>
 800f780:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f784:	f7f1 f9be 	bl	8000b04 <__aeabi_dcmpge>
 800f788:	464f      	mov	r7, r9
 800f78a:	464e      	mov	r6, r9
 800f78c:	2800      	cmp	r0, #0
 800f78e:	f040 8234 	bne.w	800fbfa <_dtoa_r+0x8f2>
 800f792:	2331      	movs	r3, #49	; 0x31
 800f794:	f10b 0501 	add.w	r5, fp, #1
 800f798:	f88b 3000 	strb.w	r3, [fp]
 800f79c:	f10a 0a01 	add.w	sl, sl, #1
 800f7a0:	e22f      	b.n	800fc02 <_dtoa_r+0x8fa>
 800f7a2:	07f2      	lsls	r2, r6, #31
 800f7a4:	d505      	bpl.n	800f7b2 <_dtoa_r+0x4aa>
 800f7a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f7aa:	f7f0 ff25 	bl	80005f8 <__aeabi_dmul>
 800f7ae:	3501      	adds	r5, #1
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	1076      	asrs	r6, r6, #1
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	e772      	b.n	800f69e <_dtoa_r+0x396>
 800f7b8:	2502      	movs	r5, #2
 800f7ba:	e774      	b.n	800f6a6 <_dtoa_r+0x39e>
 800f7bc:	f8cd a020 	str.w	sl, [sp, #32]
 800f7c0:	464f      	mov	r7, r9
 800f7c2:	e791      	b.n	800f6e8 <_dtoa_r+0x3e0>
 800f7c4:	4b4d      	ldr	r3, [pc, #308]	; (800f8fc <_dtoa_r+0x5f4>)
 800f7c6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f7ca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f7ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d047      	beq.n	800f864 <_dtoa_r+0x55c>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	2000      	movs	r0, #0
 800f7da:	494e      	ldr	r1, [pc, #312]	; (800f914 <_dtoa_r+0x60c>)
 800f7dc:	f7f1 f836 	bl	800084c <__aeabi_ddiv>
 800f7e0:	462a      	mov	r2, r5
 800f7e2:	4633      	mov	r3, r6
 800f7e4:	f7f0 fd50 	bl	8000288 <__aeabi_dsub>
 800f7e8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f7ec:	465d      	mov	r5, fp
 800f7ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7f2:	f7f1 f9b1 	bl	8000b58 <__aeabi_d2iz>
 800f7f6:	4606      	mov	r6, r0
 800f7f8:	f7f0 fe94 	bl	8000524 <__aeabi_i2d>
 800f7fc:	4602      	mov	r2, r0
 800f7fe:	460b      	mov	r3, r1
 800f800:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f804:	f7f0 fd40 	bl	8000288 <__aeabi_dsub>
 800f808:	3630      	adds	r6, #48	; 0x30
 800f80a:	f805 6b01 	strb.w	r6, [r5], #1
 800f80e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f812:	e9cd 0100 	strd	r0, r1, [sp]
 800f816:	f7f1 f961 	bl	8000adc <__aeabi_dcmplt>
 800f81a:	2800      	cmp	r0, #0
 800f81c:	d163      	bne.n	800f8e6 <_dtoa_r+0x5de>
 800f81e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f822:	2000      	movs	r0, #0
 800f824:	4937      	ldr	r1, [pc, #220]	; (800f904 <_dtoa_r+0x5fc>)
 800f826:	f7f0 fd2f 	bl	8000288 <__aeabi_dsub>
 800f82a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f82e:	f7f1 f955 	bl	8000adc <__aeabi_dcmplt>
 800f832:	2800      	cmp	r0, #0
 800f834:	f040 80b7 	bne.w	800f9a6 <_dtoa_r+0x69e>
 800f838:	eba5 030b 	sub.w	r3, r5, fp
 800f83c:	429f      	cmp	r7, r3
 800f83e:	f77f af7c 	ble.w	800f73a <_dtoa_r+0x432>
 800f842:	2200      	movs	r2, #0
 800f844:	4b30      	ldr	r3, [pc, #192]	; (800f908 <_dtoa_r+0x600>)
 800f846:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f84a:	f7f0 fed5 	bl	80005f8 <__aeabi_dmul>
 800f84e:	2200      	movs	r2, #0
 800f850:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f854:	4b2c      	ldr	r3, [pc, #176]	; (800f908 <_dtoa_r+0x600>)
 800f856:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f85a:	f7f0 fecd 	bl	80005f8 <__aeabi_dmul>
 800f85e:	e9cd 0100 	strd	r0, r1, [sp]
 800f862:	e7c4      	b.n	800f7ee <_dtoa_r+0x4e6>
 800f864:	462a      	mov	r2, r5
 800f866:	4633      	mov	r3, r6
 800f868:	f7f0 fec6 	bl	80005f8 <__aeabi_dmul>
 800f86c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f870:	eb0b 0507 	add.w	r5, fp, r7
 800f874:	465e      	mov	r6, fp
 800f876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f87a:	f7f1 f96d 	bl	8000b58 <__aeabi_d2iz>
 800f87e:	4607      	mov	r7, r0
 800f880:	f7f0 fe50 	bl	8000524 <__aeabi_i2d>
 800f884:	3730      	adds	r7, #48	; 0x30
 800f886:	4602      	mov	r2, r0
 800f888:	460b      	mov	r3, r1
 800f88a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f88e:	f7f0 fcfb 	bl	8000288 <__aeabi_dsub>
 800f892:	f806 7b01 	strb.w	r7, [r6], #1
 800f896:	42ae      	cmp	r6, r5
 800f898:	e9cd 0100 	strd	r0, r1, [sp]
 800f89c:	f04f 0200 	mov.w	r2, #0
 800f8a0:	d126      	bne.n	800f8f0 <_dtoa_r+0x5e8>
 800f8a2:	4b1c      	ldr	r3, [pc, #112]	; (800f914 <_dtoa_r+0x60c>)
 800f8a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f8a8:	f7f0 fcf0 	bl	800028c <__adddf3>
 800f8ac:	4602      	mov	r2, r0
 800f8ae:	460b      	mov	r3, r1
 800f8b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8b4:	f7f1 f930 	bl	8000b18 <__aeabi_dcmpgt>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	d174      	bne.n	800f9a6 <_dtoa_r+0x69e>
 800f8bc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f8c0:	2000      	movs	r0, #0
 800f8c2:	4914      	ldr	r1, [pc, #80]	; (800f914 <_dtoa_r+0x60c>)
 800f8c4:	f7f0 fce0 	bl	8000288 <__aeabi_dsub>
 800f8c8:	4602      	mov	r2, r0
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f8d0:	f7f1 f904 	bl	8000adc <__aeabi_dcmplt>
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	f43f af30 	beq.w	800f73a <_dtoa_r+0x432>
 800f8da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f8de:	2b30      	cmp	r3, #48	; 0x30
 800f8e0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f8e4:	d002      	beq.n	800f8ec <_dtoa_r+0x5e4>
 800f8e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f8ea:	e04a      	b.n	800f982 <_dtoa_r+0x67a>
 800f8ec:	4615      	mov	r5, r2
 800f8ee:	e7f4      	b.n	800f8da <_dtoa_r+0x5d2>
 800f8f0:	4b05      	ldr	r3, [pc, #20]	; (800f908 <_dtoa_r+0x600>)
 800f8f2:	f7f0 fe81 	bl	80005f8 <__aeabi_dmul>
 800f8f6:	e9cd 0100 	strd	r0, r1, [sp]
 800f8fa:	e7bc      	b.n	800f876 <_dtoa_r+0x56e>
 800f8fc:	080128d8 	.word	0x080128d8
 800f900:	080128b0 	.word	0x080128b0
 800f904:	3ff00000 	.word	0x3ff00000
 800f908:	40240000 	.word	0x40240000
 800f90c:	401c0000 	.word	0x401c0000
 800f910:	40140000 	.word	0x40140000
 800f914:	3fe00000 	.word	0x3fe00000
 800f918:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f91c:	465d      	mov	r5, fp
 800f91e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f922:	4630      	mov	r0, r6
 800f924:	4639      	mov	r1, r7
 800f926:	f7f0 ff91 	bl	800084c <__aeabi_ddiv>
 800f92a:	f7f1 f915 	bl	8000b58 <__aeabi_d2iz>
 800f92e:	4680      	mov	r8, r0
 800f930:	f7f0 fdf8 	bl	8000524 <__aeabi_i2d>
 800f934:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f938:	f7f0 fe5e 	bl	80005f8 <__aeabi_dmul>
 800f93c:	4602      	mov	r2, r0
 800f93e:	460b      	mov	r3, r1
 800f940:	4630      	mov	r0, r6
 800f942:	4639      	mov	r1, r7
 800f944:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f948:	f7f0 fc9e 	bl	8000288 <__aeabi_dsub>
 800f94c:	f805 6b01 	strb.w	r6, [r5], #1
 800f950:	eba5 060b 	sub.w	r6, r5, fp
 800f954:	45b1      	cmp	r9, r6
 800f956:	4602      	mov	r2, r0
 800f958:	460b      	mov	r3, r1
 800f95a:	d139      	bne.n	800f9d0 <_dtoa_r+0x6c8>
 800f95c:	f7f0 fc96 	bl	800028c <__adddf3>
 800f960:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f964:	4606      	mov	r6, r0
 800f966:	460f      	mov	r7, r1
 800f968:	f7f1 f8d6 	bl	8000b18 <__aeabi_dcmpgt>
 800f96c:	b9c8      	cbnz	r0, 800f9a2 <_dtoa_r+0x69a>
 800f96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f972:	4630      	mov	r0, r6
 800f974:	4639      	mov	r1, r7
 800f976:	f7f1 f8a7 	bl	8000ac8 <__aeabi_dcmpeq>
 800f97a:	b110      	cbz	r0, 800f982 <_dtoa_r+0x67a>
 800f97c:	f018 0f01 	tst.w	r8, #1
 800f980:	d10f      	bne.n	800f9a2 <_dtoa_r+0x69a>
 800f982:	9904      	ldr	r1, [sp, #16]
 800f984:	4620      	mov	r0, r4
 800f986:	f000 fe0a 	bl	801059e <_Bfree>
 800f98a:	2300      	movs	r3, #0
 800f98c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f98e:	702b      	strb	r3, [r5, #0]
 800f990:	f10a 0301 	add.w	r3, sl, #1
 800f994:	6013      	str	r3, [r2, #0]
 800f996:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f998:	2b00      	cmp	r3, #0
 800f99a:	f000 8241 	beq.w	800fe20 <_dtoa_r+0xb18>
 800f99e:	601d      	str	r5, [r3, #0]
 800f9a0:	e23e      	b.n	800fe20 <_dtoa_r+0xb18>
 800f9a2:	f8cd a020 	str.w	sl, [sp, #32]
 800f9a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f9aa:	2a39      	cmp	r2, #57	; 0x39
 800f9ac:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800f9b0:	d108      	bne.n	800f9c4 <_dtoa_r+0x6bc>
 800f9b2:	459b      	cmp	fp, r3
 800f9b4:	d10a      	bne.n	800f9cc <_dtoa_r+0x6c4>
 800f9b6:	9b08      	ldr	r3, [sp, #32]
 800f9b8:	3301      	adds	r3, #1
 800f9ba:	9308      	str	r3, [sp, #32]
 800f9bc:	2330      	movs	r3, #48	; 0x30
 800f9be:	f88b 3000 	strb.w	r3, [fp]
 800f9c2:	465b      	mov	r3, fp
 800f9c4:	781a      	ldrb	r2, [r3, #0]
 800f9c6:	3201      	adds	r2, #1
 800f9c8:	701a      	strb	r2, [r3, #0]
 800f9ca:	e78c      	b.n	800f8e6 <_dtoa_r+0x5de>
 800f9cc:	461d      	mov	r5, r3
 800f9ce:	e7ea      	b.n	800f9a6 <_dtoa_r+0x69e>
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	4b9b      	ldr	r3, [pc, #620]	; (800fc40 <_dtoa_r+0x938>)
 800f9d4:	f7f0 fe10 	bl	80005f8 <__aeabi_dmul>
 800f9d8:	2200      	movs	r2, #0
 800f9da:	2300      	movs	r3, #0
 800f9dc:	4606      	mov	r6, r0
 800f9de:	460f      	mov	r7, r1
 800f9e0:	f7f1 f872 	bl	8000ac8 <__aeabi_dcmpeq>
 800f9e4:	2800      	cmp	r0, #0
 800f9e6:	d09a      	beq.n	800f91e <_dtoa_r+0x616>
 800f9e8:	e7cb      	b.n	800f982 <_dtoa_r+0x67a>
 800f9ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f9ec:	2a00      	cmp	r2, #0
 800f9ee:	f000 808b 	beq.w	800fb08 <_dtoa_r+0x800>
 800f9f2:	9a06      	ldr	r2, [sp, #24]
 800f9f4:	2a01      	cmp	r2, #1
 800f9f6:	dc6e      	bgt.n	800fad6 <_dtoa_r+0x7ce>
 800f9f8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f9fa:	2a00      	cmp	r2, #0
 800f9fc:	d067      	beq.n	800face <_dtoa_r+0x7c6>
 800f9fe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fa02:	9f07      	ldr	r7, [sp, #28]
 800fa04:	9d05      	ldr	r5, [sp, #20]
 800fa06:	9a05      	ldr	r2, [sp, #20]
 800fa08:	2101      	movs	r1, #1
 800fa0a:	441a      	add	r2, r3
 800fa0c:	4620      	mov	r0, r4
 800fa0e:	9205      	str	r2, [sp, #20]
 800fa10:	4498      	add	r8, r3
 800fa12:	f000 fea2 	bl	801075a <__i2b>
 800fa16:	4606      	mov	r6, r0
 800fa18:	2d00      	cmp	r5, #0
 800fa1a:	dd0c      	ble.n	800fa36 <_dtoa_r+0x72e>
 800fa1c:	f1b8 0f00 	cmp.w	r8, #0
 800fa20:	dd09      	ble.n	800fa36 <_dtoa_r+0x72e>
 800fa22:	4545      	cmp	r5, r8
 800fa24:	9a05      	ldr	r2, [sp, #20]
 800fa26:	462b      	mov	r3, r5
 800fa28:	bfa8      	it	ge
 800fa2a:	4643      	movge	r3, r8
 800fa2c:	1ad2      	subs	r2, r2, r3
 800fa2e:	9205      	str	r2, [sp, #20]
 800fa30:	1aed      	subs	r5, r5, r3
 800fa32:	eba8 0803 	sub.w	r8, r8, r3
 800fa36:	9b07      	ldr	r3, [sp, #28]
 800fa38:	b1eb      	cbz	r3, 800fa76 <_dtoa_r+0x76e>
 800fa3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	d067      	beq.n	800fb10 <_dtoa_r+0x808>
 800fa40:	b18f      	cbz	r7, 800fa66 <_dtoa_r+0x75e>
 800fa42:	4631      	mov	r1, r6
 800fa44:	463a      	mov	r2, r7
 800fa46:	4620      	mov	r0, r4
 800fa48:	f000 ff26 	bl	8010898 <__pow5mult>
 800fa4c:	9a04      	ldr	r2, [sp, #16]
 800fa4e:	4601      	mov	r1, r0
 800fa50:	4606      	mov	r6, r0
 800fa52:	4620      	mov	r0, r4
 800fa54:	f000 fe8a 	bl	801076c <__multiply>
 800fa58:	9904      	ldr	r1, [sp, #16]
 800fa5a:	9008      	str	r0, [sp, #32]
 800fa5c:	4620      	mov	r0, r4
 800fa5e:	f000 fd9e 	bl	801059e <_Bfree>
 800fa62:	9b08      	ldr	r3, [sp, #32]
 800fa64:	9304      	str	r3, [sp, #16]
 800fa66:	9b07      	ldr	r3, [sp, #28]
 800fa68:	1bda      	subs	r2, r3, r7
 800fa6a:	d004      	beq.n	800fa76 <_dtoa_r+0x76e>
 800fa6c:	9904      	ldr	r1, [sp, #16]
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f000 ff12 	bl	8010898 <__pow5mult>
 800fa74:	9004      	str	r0, [sp, #16]
 800fa76:	2101      	movs	r1, #1
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f000 fe6e 	bl	801075a <__i2b>
 800fa7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fa80:	4607      	mov	r7, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f000 81d0 	beq.w	800fe28 <_dtoa_r+0xb20>
 800fa88:	461a      	mov	r2, r3
 800fa8a:	4601      	mov	r1, r0
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	f000 ff03 	bl	8010898 <__pow5mult>
 800fa92:	9b06      	ldr	r3, [sp, #24]
 800fa94:	2b01      	cmp	r3, #1
 800fa96:	4607      	mov	r7, r0
 800fa98:	dc40      	bgt.n	800fb1c <_dtoa_r+0x814>
 800fa9a:	9b00      	ldr	r3, [sp, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d139      	bne.n	800fb14 <_dtoa_r+0x80c>
 800faa0:	9b01      	ldr	r3, [sp, #4]
 800faa2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d136      	bne.n	800fb18 <_dtoa_r+0x810>
 800faaa:	9b01      	ldr	r3, [sp, #4]
 800faac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fab0:	0d1b      	lsrs	r3, r3, #20
 800fab2:	051b      	lsls	r3, r3, #20
 800fab4:	b12b      	cbz	r3, 800fac2 <_dtoa_r+0x7ba>
 800fab6:	9b05      	ldr	r3, [sp, #20]
 800fab8:	3301      	adds	r3, #1
 800faba:	9305      	str	r3, [sp, #20]
 800fabc:	f108 0801 	add.w	r8, r8, #1
 800fac0:	2301      	movs	r3, #1
 800fac2:	9307      	str	r3, [sp, #28]
 800fac4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d12a      	bne.n	800fb20 <_dtoa_r+0x818>
 800faca:	2001      	movs	r0, #1
 800facc:	e030      	b.n	800fb30 <_dtoa_r+0x828>
 800face:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fad0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fad4:	e795      	b.n	800fa02 <_dtoa_r+0x6fa>
 800fad6:	9b07      	ldr	r3, [sp, #28]
 800fad8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800fadc:	42bb      	cmp	r3, r7
 800fade:	bfbf      	itttt	lt
 800fae0:	9b07      	ldrlt	r3, [sp, #28]
 800fae2:	9707      	strlt	r7, [sp, #28]
 800fae4:	1afa      	sublt	r2, r7, r3
 800fae6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800fae8:	bfbb      	ittet	lt
 800faea:	189b      	addlt	r3, r3, r2
 800faec:	930e      	strlt	r3, [sp, #56]	; 0x38
 800faee:	1bdf      	subge	r7, r3, r7
 800faf0:	2700      	movlt	r7, #0
 800faf2:	f1b9 0f00 	cmp.w	r9, #0
 800faf6:	bfb5      	itete	lt
 800faf8:	9b05      	ldrlt	r3, [sp, #20]
 800fafa:	9d05      	ldrge	r5, [sp, #20]
 800fafc:	eba3 0509 	sublt.w	r5, r3, r9
 800fb00:	464b      	movge	r3, r9
 800fb02:	bfb8      	it	lt
 800fb04:	2300      	movlt	r3, #0
 800fb06:	e77e      	b.n	800fa06 <_dtoa_r+0x6fe>
 800fb08:	9f07      	ldr	r7, [sp, #28]
 800fb0a:	9d05      	ldr	r5, [sp, #20]
 800fb0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fb0e:	e783      	b.n	800fa18 <_dtoa_r+0x710>
 800fb10:	9a07      	ldr	r2, [sp, #28]
 800fb12:	e7ab      	b.n	800fa6c <_dtoa_r+0x764>
 800fb14:	2300      	movs	r3, #0
 800fb16:	e7d4      	b.n	800fac2 <_dtoa_r+0x7ba>
 800fb18:	9b00      	ldr	r3, [sp, #0]
 800fb1a:	e7d2      	b.n	800fac2 <_dtoa_r+0x7ba>
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	9307      	str	r3, [sp, #28]
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fb26:	6918      	ldr	r0, [r3, #16]
 800fb28:	f000 fdc9 	bl	80106be <__hi0bits>
 800fb2c:	f1c0 0020 	rsb	r0, r0, #32
 800fb30:	4440      	add	r0, r8
 800fb32:	f010 001f 	ands.w	r0, r0, #31
 800fb36:	d047      	beq.n	800fbc8 <_dtoa_r+0x8c0>
 800fb38:	f1c0 0320 	rsb	r3, r0, #32
 800fb3c:	2b04      	cmp	r3, #4
 800fb3e:	dd3b      	ble.n	800fbb8 <_dtoa_r+0x8b0>
 800fb40:	9b05      	ldr	r3, [sp, #20]
 800fb42:	f1c0 001c 	rsb	r0, r0, #28
 800fb46:	4403      	add	r3, r0
 800fb48:	9305      	str	r3, [sp, #20]
 800fb4a:	4405      	add	r5, r0
 800fb4c:	4480      	add	r8, r0
 800fb4e:	9b05      	ldr	r3, [sp, #20]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	dd05      	ble.n	800fb60 <_dtoa_r+0x858>
 800fb54:	461a      	mov	r2, r3
 800fb56:	9904      	ldr	r1, [sp, #16]
 800fb58:	4620      	mov	r0, r4
 800fb5a:	f000 feeb 	bl	8010934 <__lshift>
 800fb5e:	9004      	str	r0, [sp, #16]
 800fb60:	f1b8 0f00 	cmp.w	r8, #0
 800fb64:	dd05      	ble.n	800fb72 <_dtoa_r+0x86a>
 800fb66:	4639      	mov	r1, r7
 800fb68:	4642      	mov	r2, r8
 800fb6a:	4620      	mov	r0, r4
 800fb6c:	f000 fee2 	bl	8010934 <__lshift>
 800fb70:	4607      	mov	r7, r0
 800fb72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fb74:	b353      	cbz	r3, 800fbcc <_dtoa_r+0x8c4>
 800fb76:	4639      	mov	r1, r7
 800fb78:	9804      	ldr	r0, [sp, #16]
 800fb7a:	f000 ff2f 	bl	80109dc <__mcmp>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	da24      	bge.n	800fbcc <_dtoa_r+0x8c4>
 800fb82:	2300      	movs	r3, #0
 800fb84:	220a      	movs	r2, #10
 800fb86:	9904      	ldr	r1, [sp, #16]
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f000 fd1f 	bl	80105cc <__multadd>
 800fb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb90:	9004      	str	r0, [sp, #16]
 800fb92:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	f000 814d 	beq.w	800fe36 <_dtoa_r+0xb2e>
 800fb9c:	2300      	movs	r3, #0
 800fb9e:	4631      	mov	r1, r6
 800fba0:	220a      	movs	r2, #10
 800fba2:	4620      	mov	r0, r4
 800fba4:	f000 fd12 	bl	80105cc <__multadd>
 800fba8:	9b02      	ldr	r3, [sp, #8]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	4606      	mov	r6, r0
 800fbae:	dc4f      	bgt.n	800fc50 <_dtoa_r+0x948>
 800fbb0:	9b06      	ldr	r3, [sp, #24]
 800fbb2:	2b02      	cmp	r3, #2
 800fbb4:	dd4c      	ble.n	800fc50 <_dtoa_r+0x948>
 800fbb6:	e011      	b.n	800fbdc <_dtoa_r+0x8d4>
 800fbb8:	d0c9      	beq.n	800fb4e <_dtoa_r+0x846>
 800fbba:	9a05      	ldr	r2, [sp, #20]
 800fbbc:	331c      	adds	r3, #28
 800fbbe:	441a      	add	r2, r3
 800fbc0:	9205      	str	r2, [sp, #20]
 800fbc2:	441d      	add	r5, r3
 800fbc4:	4498      	add	r8, r3
 800fbc6:	e7c2      	b.n	800fb4e <_dtoa_r+0x846>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	e7f6      	b.n	800fbba <_dtoa_r+0x8b2>
 800fbcc:	f1b9 0f00 	cmp.w	r9, #0
 800fbd0:	dc38      	bgt.n	800fc44 <_dtoa_r+0x93c>
 800fbd2:	9b06      	ldr	r3, [sp, #24]
 800fbd4:	2b02      	cmp	r3, #2
 800fbd6:	dd35      	ble.n	800fc44 <_dtoa_r+0x93c>
 800fbd8:	f8cd 9008 	str.w	r9, [sp, #8]
 800fbdc:	9b02      	ldr	r3, [sp, #8]
 800fbde:	b963      	cbnz	r3, 800fbfa <_dtoa_r+0x8f2>
 800fbe0:	4639      	mov	r1, r7
 800fbe2:	2205      	movs	r2, #5
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	f000 fcf1 	bl	80105cc <__multadd>
 800fbea:	4601      	mov	r1, r0
 800fbec:	4607      	mov	r7, r0
 800fbee:	9804      	ldr	r0, [sp, #16]
 800fbf0:	f000 fef4 	bl	80109dc <__mcmp>
 800fbf4:	2800      	cmp	r0, #0
 800fbf6:	f73f adcc 	bgt.w	800f792 <_dtoa_r+0x48a>
 800fbfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbfc:	465d      	mov	r5, fp
 800fbfe:	ea6f 0a03 	mvn.w	sl, r3
 800fc02:	f04f 0900 	mov.w	r9, #0
 800fc06:	4639      	mov	r1, r7
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f000 fcc8 	bl	801059e <_Bfree>
 800fc0e:	2e00      	cmp	r6, #0
 800fc10:	f43f aeb7 	beq.w	800f982 <_dtoa_r+0x67a>
 800fc14:	f1b9 0f00 	cmp.w	r9, #0
 800fc18:	d005      	beq.n	800fc26 <_dtoa_r+0x91e>
 800fc1a:	45b1      	cmp	r9, r6
 800fc1c:	d003      	beq.n	800fc26 <_dtoa_r+0x91e>
 800fc1e:	4649      	mov	r1, r9
 800fc20:	4620      	mov	r0, r4
 800fc22:	f000 fcbc 	bl	801059e <_Bfree>
 800fc26:	4631      	mov	r1, r6
 800fc28:	4620      	mov	r0, r4
 800fc2a:	f000 fcb8 	bl	801059e <_Bfree>
 800fc2e:	e6a8      	b.n	800f982 <_dtoa_r+0x67a>
 800fc30:	2700      	movs	r7, #0
 800fc32:	463e      	mov	r6, r7
 800fc34:	e7e1      	b.n	800fbfa <_dtoa_r+0x8f2>
 800fc36:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fc3a:	463e      	mov	r6, r7
 800fc3c:	e5a9      	b.n	800f792 <_dtoa_r+0x48a>
 800fc3e:	bf00      	nop
 800fc40:	40240000 	.word	0x40240000
 800fc44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fc46:	f8cd 9008 	str.w	r9, [sp, #8]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	f000 80fa 	beq.w	800fe44 <_dtoa_r+0xb3c>
 800fc50:	2d00      	cmp	r5, #0
 800fc52:	dd05      	ble.n	800fc60 <_dtoa_r+0x958>
 800fc54:	4631      	mov	r1, r6
 800fc56:	462a      	mov	r2, r5
 800fc58:	4620      	mov	r0, r4
 800fc5a:	f000 fe6b 	bl	8010934 <__lshift>
 800fc5e:	4606      	mov	r6, r0
 800fc60:	9b07      	ldr	r3, [sp, #28]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d04c      	beq.n	800fd00 <_dtoa_r+0x9f8>
 800fc66:	6871      	ldr	r1, [r6, #4]
 800fc68:	4620      	mov	r0, r4
 800fc6a:	f000 fc64 	bl	8010536 <_Balloc>
 800fc6e:	6932      	ldr	r2, [r6, #16]
 800fc70:	3202      	adds	r2, #2
 800fc72:	4605      	mov	r5, r0
 800fc74:	0092      	lsls	r2, r2, #2
 800fc76:	f106 010c 	add.w	r1, r6, #12
 800fc7a:	300c      	adds	r0, #12
 800fc7c:	f000 fc50 	bl	8010520 <memcpy>
 800fc80:	2201      	movs	r2, #1
 800fc82:	4629      	mov	r1, r5
 800fc84:	4620      	mov	r0, r4
 800fc86:	f000 fe55 	bl	8010934 <__lshift>
 800fc8a:	9b00      	ldr	r3, [sp, #0]
 800fc8c:	f8cd b014 	str.w	fp, [sp, #20]
 800fc90:	f003 0301 	and.w	r3, r3, #1
 800fc94:	46b1      	mov	r9, r6
 800fc96:	9307      	str	r3, [sp, #28]
 800fc98:	4606      	mov	r6, r0
 800fc9a:	4639      	mov	r1, r7
 800fc9c:	9804      	ldr	r0, [sp, #16]
 800fc9e:	f7ff faa5 	bl	800f1ec <quorem>
 800fca2:	4649      	mov	r1, r9
 800fca4:	4605      	mov	r5, r0
 800fca6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fcaa:	9804      	ldr	r0, [sp, #16]
 800fcac:	f000 fe96 	bl	80109dc <__mcmp>
 800fcb0:	4632      	mov	r2, r6
 800fcb2:	9000      	str	r0, [sp, #0]
 800fcb4:	4639      	mov	r1, r7
 800fcb6:	4620      	mov	r0, r4
 800fcb8:	f000 feaa 	bl	8010a10 <__mdiff>
 800fcbc:	68c3      	ldr	r3, [r0, #12]
 800fcbe:	4602      	mov	r2, r0
 800fcc0:	bb03      	cbnz	r3, 800fd04 <_dtoa_r+0x9fc>
 800fcc2:	4601      	mov	r1, r0
 800fcc4:	9008      	str	r0, [sp, #32]
 800fcc6:	9804      	ldr	r0, [sp, #16]
 800fcc8:	f000 fe88 	bl	80109dc <__mcmp>
 800fccc:	9a08      	ldr	r2, [sp, #32]
 800fcce:	4603      	mov	r3, r0
 800fcd0:	4611      	mov	r1, r2
 800fcd2:	4620      	mov	r0, r4
 800fcd4:	9308      	str	r3, [sp, #32]
 800fcd6:	f000 fc62 	bl	801059e <_Bfree>
 800fcda:	9b08      	ldr	r3, [sp, #32]
 800fcdc:	b9a3      	cbnz	r3, 800fd08 <_dtoa_r+0xa00>
 800fcde:	9a06      	ldr	r2, [sp, #24]
 800fce0:	b992      	cbnz	r2, 800fd08 <_dtoa_r+0xa00>
 800fce2:	9a07      	ldr	r2, [sp, #28]
 800fce4:	b982      	cbnz	r2, 800fd08 <_dtoa_r+0xa00>
 800fce6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fcea:	d029      	beq.n	800fd40 <_dtoa_r+0xa38>
 800fcec:	9b00      	ldr	r3, [sp, #0]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	dd01      	ble.n	800fcf6 <_dtoa_r+0x9ee>
 800fcf2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fcf6:	9b05      	ldr	r3, [sp, #20]
 800fcf8:	1c5d      	adds	r5, r3, #1
 800fcfa:	f883 8000 	strb.w	r8, [r3]
 800fcfe:	e782      	b.n	800fc06 <_dtoa_r+0x8fe>
 800fd00:	4630      	mov	r0, r6
 800fd02:	e7c2      	b.n	800fc8a <_dtoa_r+0x982>
 800fd04:	2301      	movs	r3, #1
 800fd06:	e7e3      	b.n	800fcd0 <_dtoa_r+0x9c8>
 800fd08:	9a00      	ldr	r2, [sp, #0]
 800fd0a:	2a00      	cmp	r2, #0
 800fd0c:	db04      	blt.n	800fd18 <_dtoa_r+0xa10>
 800fd0e:	d125      	bne.n	800fd5c <_dtoa_r+0xa54>
 800fd10:	9a06      	ldr	r2, [sp, #24]
 800fd12:	bb1a      	cbnz	r2, 800fd5c <_dtoa_r+0xa54>
 800fd14:	9a07      	ldr	r2, [sp, #28]
 800fd16:	bb0a      	cbnz	r2, 800fd5c <_dtoa_r+0xa54>
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	ddec      	ble.n	800fcf6 <_dtoa_r+0x9ee>
 800fd1c:	2201      	movs	r2, #1
 800fd1e:	9904      	ldr	r1, [sp, #16]
 800fd20:	4620      	mov	r0, r4
 800fd22:	f000 fe07 	bl	8010934 <__lshift>
 800fd26:	4639      	mov	r1, r7
 800fd28:	9004      	str	r0, [sp, #16]
 800fd2a:	f000 fe57 	bl	80109dc <__mcmp>
 800fd2e:	2800      	cmp	r0, #0
 800fd30:	dc03      	bgt.n	800fd3a <_dtoa_r+0xa32>
 800fd32:	d1e0      	bne.n	800fcf6 <_dtoa_r+0x9ee>
 800fd34:	f018 0f01 	tst.w	r8, #1
 800fd38:	d0dd      	beq.n	800fcf6 <_dtoa_r+0x9ee>
 800fd3a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fd3e:	d1d8      	bne.n	800fcf2 <_dtoa_r+0x9ea>
 800fd40:	9b05      	ldr	r3, [sp, #20]
 800fd42:	9a05      	ldr	r2, [sp, #20]
 800fd44:	1c5d      	adds	r5, r3, #1
 800fd46:	2339      	movs	r3, #57	; 0x39
 800fd48:	7013      	strb	r3, [r2, #0]
 800fd4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fd4e:	2b39      	cmp	r3, #57	; 0x39
 800fd50:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fd54:	d04f      	beq.n	800fdf6 <_dtoa_r+0xaee>
 800fd56:	3301      	adds	r3, #1
 800fd58:	7013      	strb	r3, [r2, #0]
 800fd5a:	e754      	b.n	800fc06 <_dtoa_r+0x8fe>
 800fd5c:	9a05      	ldr	r2, [sp, #20]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	f102 0501 	add.w	r5, r2, #1
 800fd64:	dd06      	ble.n	800fd74 <_dtoa_r+0xa6c>
 800fd66:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fd6a:	d0e9      	beq.n	800fd40 <_dtoa_r+0xa38>
 800fd6c:	f108 0801 	add.w	r8, r8, #1
 800fd70:	9b05      	ldr	r3, [sp, #20]
 800fd72:	e7c2      	b.n	800fcfa <_dtoa_r+0x9f2>
 800fd74:	9a02      	ldr	r2, [sp, #8]
 800fd76:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fd7a:	eba5 030b 	sub.w	r3, r5, fp
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d021      	beq.n	800fdc6 <_dtoa_r+0xabe>
 800fd82:	2300      	movs	r3, #0
 800fd84:	220a      	movs	r2, #10
 800fd86:	9904      	ldr	r1, [sp, #16]
 800fd88:	4620      	mov	r0, r4
 800fd8a:	f000 fc1f 	bl	80105cc <__multadd>
 800fd8e:	45b1      	cmp	r9, r6
 800fd90:	9004      	str	r0, [sp, #16]
 800fd92:	f04f 0300 	mov.w	r3, #0
 800fd96:	f04f 020a 	mov.w	r2, #10
 800fd9a:	4649      	mov	r1, r9
 800fd9c:	4620      	mov	r0, r4
 800fd9e:	d105      	bne.n	800fdac <_dtoa_r+0xaa4>
 800fda0:	f000 fc14 	bl	80105cc <__multadd>
 800fda4:	4681      	mov	r9, r0
 800fda6:	4606      	mov	r6, r0
 800fda8:	9505      	str	r5, [sp, #20]
 800fdaa:	e776      	b.n	800fc9a <_dtoa_r+0x992>
 800fdac:	f000 fc0e 	bl	80105cc <__multadd>
 800fdb0:	4631      	mov	r1, r6
 800fdb2:	4681      	mov	r9, r0
 800fdb4:	2300      	movs	r3, #0
 800fdb6:	220a      	movs	r2, #10
 800fdb8:	4620      	mov	r0, r4
 800fdba:	f000 fc07 	bl	80105cc <__multadd>
 800fdbe:	4606      	mov	r6, r0
 800fdc0:	e7f2      	b.n	800fda8 <_dtoa_r+0xaa0>
 800fdc2:	f04f 0900 	mov.w	r9, #0
 800fdc6:	2201      	movs	r2, #1
 800fdc8:	9904      	ldr	r1, [sp, #16]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 fdb2 	bl	8010934 <__lshift>
 800fdd0:	4639      	mov	r1, r7
 800fdd2:	9004      	str	r0, [sp, #16]
 800fdd4:	f000 fe02 	bl	80109dc <__mcmp>
 800fdd8:	2800      	cmp	r0, #0
 800fdda:	dcb6      	bgt.n	800fd4a <_dtoa_r+0xa42>
 800fddc:	d102      	bne.n	800fde4 <_dtoa_r+0xadc>
 800fdde:	f018 0f01 	tst.w	r8, #1
 800fde2:	d1b2      	bne.n	800fd4a <_dtoa_r+0xa42>
 800fde4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fde8:	2b30      	cmp	r3, #48	; 0x30
 800fdea:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fdee:	f47f af0a 	bne.w	800fc06 <_dtoa_r+0x8fe>
 800fdf2:	4615      	mov	r5, r2
 800fdf4:	e7f6      	b.n	800fde4 <_dtoa_r+0xadc>
 800fdf6:	4593      	cmp	fp, r2
 800fdf8:	d105      	bne.n	800fe06 <_dtoa_r+0xafe>
 800fdfa:	2331      	movs	r3, #49	; 0x31
 800fdfc:	f10a 0a01 	add.w	sl, sl, #1
 800fe00:	f88b 3000 	strb.w	r3, [fp]
 800fe04:	e6ff      	b.n	800fc06 <_dtoa_r+0x8fe>
 800fe06:	4615      	mov	r5, r2
 800fe08:	e79f      	b.n	800fd4a <_dtoa_r+0xa42>
 800fe0a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fe70 <_dtoa_r+0xb68>
 800fe0e:	e007      	b.n	800fe20 <_dtoa_r+0xb18>
 800fe10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe12:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fe74 <_dtoa_r+0xb6c>
 800fe16:	b11b      	cbz	r3, 800fe20 <_dtoa_r+0xb18>
 800fe18:	f10b 0308 	add.w	r3, fp, #8
 800fe1c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fe1e:	6013      	str	r3, [r2, #0]
 800fe20:	4658      	mov	r0, fp
 800fe22:	b017      	add	sp, #92	; 0x5c
 800fe24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe28:	9b06      	ldr	r3, [sp, #24]
 800fe2a:	2b01      	cmp	r3, #1
 800fe2c:	f77f ae35 	ble.w	800fa9a <_dtoa_r+0x792>
 800fe30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fe32:	9307      	str	r3, [sp, #28]
 800fe34:	e649      	b.n	800faca <_dtoa_r+0x7c2>
 800fe36:	9b02      	ldr	r3, [sp, #8]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	dc03      	bgt.n	800fe44 <_dtoa_r+0xb3c>
 800fe3c:	9b06      	ldr	r3, [sp, #24]
 800fe3e:	2b02      	cmp	r3, #2
 800fe40:	f73f aecc 	bgt.w	800fbdc <_dtoa_r+0x8d4>
 800fe44:	465d      	mov	r5, fp
 800fe46:	4639      	mov	r1, r7
 800fe48:	9804      	ldr	r0, [sp, #16]
 800fe4a:	f7ff f9cf 	bl	800f1ec <quorem>
 800fe4e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fe52:	f805 8b01 	strb.w	r8, [r5], #1
 800fe56:	9a02      	ldr	r2, [sp, #8]
 800fe58:	eba5 030b 	sub.w	r3, r5, fp
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	ddb0      	ble.n	800fdc2 <_dtoa_r+0xaba>
 800fe60:	2300      	movs	r3, #0
 800fe62:	220a      	movs	r2, #10
 800fe64:	9904      	ldr	r1, [sp, #16]
 800fe66:	4620      	mov	r0, r4
 800fe68:	f000 fbb0 	bl	80105cc <__multadd>
 800fe6c:	9004      	str	r0, [sp, #16]
 800fe6e:	e7ea      	b.n	800fe46 <_dtoa_r+0xb3e>
 800fe70:	08012818 	.word	0x08012818
 800fe74:	08012898 	.word	0x08012898

0800fe78 <rshift>:
 800fe78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe7a:	6906      	ldr	r6, [r0, #16]
 800fe7c:	114b      	asrs	r3, r1, #5
 800fe7e:	429e      	cmp	r6, r3
 800fe80:	f100 0414 	add.w	r4, r0, #20
 800fe84:	dd30      	ble.n	800fee8 <rshift+0x70>
 800fe86:	f011 011f 	ands.w	r1, r1, #31
 800fe8a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800fe8e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800fe92:	d108      	bne.n	800fea6 <rshift+0x2e>
 800fe94:	4621      	mov	r1, r4
 800fe96:	42b2      	cmp	r2, r6
 800fe98:	460b      	mov	r3, r1
 800fe9a:	d211      	bcs.n	800fec0 <rshift+0x48>
 800fe9c:	f852 3b04 	ldr.w	r3, [r2], #4
 800fea0:	f841 3b04 	str.w	r3, [r1], #4
 800fea4:	e7f7      	b.n	800fe96 <rshift+0x1e>
 800fea6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800feaa:	f1c1 0c20 	rsb	ip, r1, #32
 800feae:	40cd      	lsrs	r5, r1
 800feb0:	3204      	adds	r2, #4
 800feb2:	4623      	mov	r3, r4
 800feb4:	42b2      	cmp	r2, r6
 800feb6:	4617      	mov	r7, r2
 800feb8:	d30c      	bcc.n	800fed4 <rshift+0x5c>
 800feba:	601d      	str	r5, [r3, #0]
 800febc:	b105      	cbz	r5, 800fec0 <rshift+0x48>
 800febe:	3304      	adds	r3, #4
 800fec0:	1b1a      	subs	r2, r3, r4
 800fec2:	42a3      	cmp	r3, r4
 800fec4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fec8:	bf08      	it	eq
 800feca:	2300      	moveq	r3, #0
 800fecc:	6102      	str	r2, [r0, #16]
 800fece:	bf08      	it	eq
 800fed0:	6143      	streq	r3, [r0, #20]
 800fed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fed4:	683f      	ldr	r7, [r7, #0]
 800fed6:	fa07 f70c 	lsl.w	r7, r7, ip
 800feda:	433d      	orrs	r5, r7
 800fedc:	f843 5b04 	str.w	r5, [r3], #4
 800fee0:	f852 5b04 	ldr.w	r5, [r2], #4
 800fee4:	40cd      	lsrs	r5, r1
 800fee6:	e7e5      	b.n	800feb4 <rshift+0x3c>
 800fee8:	4623      	mov	r3, r4
 800feea:	e7e9      	b.n	800fec0 <rshift+0x48>

0800feec <__hexdig_fun>:
 800feec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fef0:	2b09      	cmp	r3, #9
 800fef2:	d802      	bhi.n	800fefa <__hexdig_fun+0xe>
 800fef4:	3820      	subs	r0, #32
 800fef6:	b2c0      	uxtb	r0, r0
 800fef8:	4770      	bx	lr
 800fefa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fefe:	2b05      	cmp	r3, #5
 800ff00:	d801      	bhi.n	800ff06 <__hexdig_fun+0x1a>
 800ff02:	3847      	subs	r0, #71	; 0x47
 800ff04:	e7f7      	b.n	800fef6 <__hexdig_fun+0xa>
 800ff06:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ff0a:	2b05      	cmp	r3, #5
 800ff0c:	d801      	bhi.n	800ff12 <__hexdig_fun+0x26>
 800ff0e:	3827      	subs	r0, #39	; 0x27
 800ff10:	e7f1      	b.n	800fef6 <__hexdig_fun+0xa>
 800ff12:	2000      	movs	r0, #0
 800ff14:	4770      	bx	lr

0800ff16 <__gethex>:
 800ff16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff1a:	b08b      	sub	sp, #44	; 0x2c
 800ff1c:	468a      	mov	sl, r1
 800ff1e:	9002      	str	r0, [sp, #8]
 800ff20:	9816      	ldr	r0, [sp, #88]	; 0x58
 800ff22:	9306      	str	r3, [sp, #24]
 800ff24:	4690      	mov	r8, r2
 800ff26:	f000 fad0 	bl	80104ca <__localeconv_l>
 800ff2a:	6803      	ldr	r3, [r0, #0]
 800ff2c:	9303      	str	r3, [sp, #12]
 800ff2e:	4618      	mov	r0, r3
 800ff30:	f7f0 f94e 	bl	80001d0 <strlen>
 800ff34:	9b03      	ldr	r3, [sp, #12]
 800ff36:	9001      	str	r0, [sp, #4]
 800ff38:	4403      	add	r3, r0
 800ff3a:	f04f 0b00 	mov.w	fp, #0
 800ff3e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ff42:	9307      	str	r3, [sp, #28]
 800ff44:	f8da 3000 	ldr.w	r3, [sl]
 800ff48:	3302      	adds	r3, #2
 800ff4a:	461f      	mov	r7, r3
 800ff4c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ff50:	2830      	cmp	r0, #48	; 0x30
 800ff52:	d06c      	beq.n	801002e <__gethex+0x118>
 800ff54:	f7ff ffca 	bl	800feec <__hexdig_fun>
 800ff58:	4604      	mov	r4, r0
 800ff5a:	2800      	cmp	r0, #0
 800ff5c:	d16a      	bne.n	8010034 <__gethex+0x11e>
 800ff5e:	9a01      	ldr	r2, [sp, #4]
 800ff60:	9903      	ldr	r1, [sp, #12]
 800ff62:	4638      	mov	r0, r7
 800ff64:	f001 f8fe 	bl	8011164 <strncmp>
 800ff68:	2800      	cmp	r0, #0
 800ff6a:	d166      	bne.n	801003a <__gethex+0x124>
 800ff6c:	9b01      	ldr	r3, [sp, #4]
 800ff6e:	5cf8      	ldrb	r0, [r7, r3]
 800ff70:	18fe      	adds	r6, r7, r3
 800ff72:	f7ff ffbb 	bl	800feec <__hexdig_fun>
 800ff76:	2800      	cmp	r0, #0
 800ff78:	d062      	beq.n	8010040 <__gethex+0x12a>
 800ff7a:	4633      	mov	r3, r6
 800ff7c:	7818      	ldrb	r0, [r3, #0]
 800ff7e:	2830      	cmp	r0, #48	; 0x30
 800ff80:	461f      	mov	r7, r3
 800ff82:	f103 0301 	add.w	r3, r3, #1
 800ff86:	d0f9      	beq.n	800ff7c <__gethex+0x66>
 800ff88:	f7ff ffb0 	bl	800feec <__hexdig_fun>
 800ff8c:	fab0 f580 	clz	r5, r0
 800ff90:	096d      	lsrs	r5, r5, #5
 800ff92:	4634      	mov	r4, r6
 800ff94:	f04f 0b01 	mov.w	fp, #1
 800ff98:	463a      	mov	r2, r7
 800ff9a:	4616      	mov	r6, r2
 800ff9c:	3201      	adds	r2, #1
 800ff9e:	7830      	ldrb	r0, [r6, #0]
 800ffa0:	f7ff ffa4 	bl	800feec <__hexdig_fun>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d1f8      	bne.n	800ff9a <__gethex+0x84>
 800ffa8:	9a01      	ldr	r2, [sp, #4]
 800ffaa:	9903      	ldr	r1, [sp, #12]
 800ffac:	4630      	mov	r0, r6
 800ffae:	f001 f8d9 	bl	8011164 <strncmp>
 800ffb2:	b950      	cbnz	r0, 800ffca <__gethex+0xb4>
 800ffb4:	b954      	cbnz	r4, 800ffcc <__gethex+0xb6>
 800ffb6:	9b01      	ldr	r3, [sp, #4]
 800ffb8:	18f4      	adds	r4, r6, r3
 800ffba:	4622      	mov	r2, r4
 800ffbc:	4616      	mov	r6, r2
 800ffbe:	3201      	adds	r2, #1
 800ffc0:	7830      	ldrb	r0, [r6, #0]
 800ffc2:	f7ff ff93 	bl	800feec <__hexdig_fun>
 800ffc6:	2800      	cmp	r0, #0
 800ffc8:	d1f8      	bne.n	800ffbc <__gethex+0xa6>
 800ffca:	b10c      	cbz	r4, 800ffd0 <__gethex+0xba>
 800ffcc:	1ba4      	subs	r4, r4, r6
 800ffce:	00a4      	lsls	r4, r4, #2
 800ffd0:	7833      	ldrb	r3, [r6, #0]
 800ffd2:	2b50      	cmp	r3, #80	; 0x50
 800ffd4:	d001      	beq.n	800ffda <__gethex+0xc4>
 800ffd6:	2b70      	cmp	r3, #112	; 0x70
 800ffd8:	d140      	bne.n	801005c <__gethex+0x146>
 800ffda:	7873      	ldrb	r3, [r6, #1]
 800ffdc:	2b2b      	cmp	r3, #43	; 0x2b
 800ffde:	d031      	beq.n	8010044 <__gethex+0x12e>
 800ffe0:	2b2d      	cmp	r3, #45	; 0x2d
 800ffe2:	d033      	beq.n	801004c <__gethex+0x136>
 800ffe4:	1c71      	adds	r1, r6, #1
 800ffe6:	f04f 0900 	mov.w	r9, #0
 800ffea:	7808      	ldrb	r0, [r1, #0]
 800ffec:	f7ff ff7e 	bl	800feec <__hexdig_fun>
 800fff0:	1e43      	subs	r3, r0, #1
 800fff2:	b2db      	uxtb	r3, r3
 800fff4:	2b18      	cmp	r3, #24
 800fff6:	d831      	bhi.n	801005c <__gethex+0x146>
 800fff8:	f1a0 0210 	sub.w	r2, r0, #16
 800fffc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010000:	f7ff ff74 	bl	800feec <__hexdig_fun>
 8010004:	1e43      	subs	r3, r0, #1
 8010006:	b2db      	uxtb	r3, r3
 8010008:	2b18      	cmp	r3, #24
 801000a:	d922      	bls.n	8010052 <__gethex+0x13c>
 801000c:	f1b9 0f00 	cmp.w	r9, #0
 8010010:	d000      	beq.n	8010014 <__gethex+0xfe>
 8010012:	4252      	negs	r2, r2
 8010014:	4414      	add	r4, r2
 8010016:	f8ca 1000 	str.w	r1, [sl]
 801001a:	b30d      	cbz	r5, 8010060 <__gethex+0x14a>
 801001c:	f1bb 0f00 	cmp.w	fp, #0
 8010020:	bf0c      	ite	eq
 8010022:	2706      	moveq	r7, #6
 8010024:	2700      	movne	r7, #0
 8010026:	4638      	mov	r0, r7
 8010028:	b00b      	add	sp, #44	; 0x2c
 801002a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801002e:	f10b 0b01 	add.w	fp, fp, #1
 8010032:	e78a      	b.n	800ff4a <__gethex+0x34>
 8010034:	2500      	movs	r5, #0
 8010036:	462c      	mov	r4, r5
 8010038:	e7ae      	b.n	800ff98 <__gethex+0x82>
 801003a:	463e      	mov	r6, r7
 801003c:	2501      	movs	r5, #1
 801003e:	e7c7      	b.n	800ffd0 <__gethex+0xba>
 8010040:	4604      	mov	r4, r0
 8010042:	e7fb      	b.n	801003c <__gethex+0x126>
 8010044:	f04f 0900 	mov.w	r9, #0
 8010048:	1cb1      	adds	r1, r6, #2
 801004a:	e7ce      	b.n	800ffea <__gethex+0xd4>
 801004c:	f04f 0901 	mov.w	r9, #1
 8010050:	e7fa      	b.n	8010048 <__gethex+0x132>
 8010052:	230a      	movs	r3, #10
 8010054:	fb03 0202 	mla	r2, r3, r2, r0
 8010058:	3a10      	subs	r2, #16
 801005a:	e7cf      	b.n	800fffc <__gethex+0xe6>
 801005c:	4631      	mov	r1, r6
 801005e:	e7da      	b.n	8010016 <__gethex+0x100>
 8010060:	1bf3      	subs	r3, r6, r7
 8010062:	3b01      	subs	r3, #1
 8010064:	4629      	mov	r1, r5
 8010066:	2b07      	cmp	r3, #7
 8010068:	dc49      	bgt.n	80100fe <__gethex+0x1e8>
 801006a:	9802      	ldr	r0, [sp, #8]
 801006c:	f000 fa63 	bl	8010536 <_Balloc>
 8010070:	9b01      	ldr	r3, [sp, #4]
 8010072:	f100 0914 	add.w	r9, r0, #20
 8010076:	f04f 0b00 	mov.w	fp, #0
 801007a:	f1c3 0301 	rsb	r3, r3, #1
 801007e:	4605      	mov	r5, r0
 8010080:	f8cd 9010 	str.w	r9, [sp, #16]
 8010084:	46da      	mov	sl, fp
 8010086:	9308      	str	r3, [sp, #32]
 8010088:	42b7      	cmp	r7, r6
 801008a:	d33b      	bcc.n	8010104 <__gethex+0x1ee>
 801008c:	9804      	ldr	r0, [sp, #16]
 801008e:	f840 ab04 	str.w	sl, [r0], #4
 8010092:	eba0 0009 	sub.w	r0, r0, r9
 8010096:	1080      	asrs	r0, r0, #2
 8010098:	6128      	str	r0, [r5, #16]
 801009a:	0147      	lsls	r7, r0, #5
 801009c:	4650      	mov	r0, sl
 801009e:	f000 fb0e 	bl	80106be <__hi0bits>
 80100a2:	f8d8 6000 	ldr.w	r6, [r8]
 80100a6:	1a3f      	subs	r7, r7, r0
 80100a8:	42b7      	cmp	r7, r6
 80100aa:	dd64      	ble.n	8010176 <__gethex+0x260>
 80100ac:	1bbf      	subs	r7, r7, r6
 80100ae:	4639      	mov	r1, r7
 80100b0:	4628      	mov	r0, r5
 80100b2:	f000 fe1d 	bl	8010cf0 <__any_on>
 80100b6:	4682      	mov	sl, r0
 80100b8:	b178      	cbz	r0, 80100da <__gethex+0x1c4>
 80100ba:	1e7b      	subs	r3, r7, #1
 80100bc:	1159      	asrs	r1, r3, #5
 80100be:	f003 021f 	and.w	r2, r3, #31
 80100c2:	f04f 0a01 	mov.w	sl, #1
 80100c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80100ca:	fa0a f202 	lsl.w	r2, sl, r2
 80100ce:	420a      	tst	r2, r1
 80100d0:	d003      	beq.n	80100da <__gethex+0x1c4>
 80100d2:	4553      	cmp	r3, sl
 80100d4:	dc46      	bgt.n	8010164 <__gethex+0x24e>
 80100d6:	f04f 0a02 	mov.w	sl, #2
 80100da:	4639      	mov	r1, r7
 80100dc:	4628      	mov	r0, r5
 80100de:	f7ff fecb 	bl	800fe78 <rshift>
 80100e2:	443c      	add	r4, r7
 80100e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100e8:	42a3      	cmp	r3, r4
 80100ea:	da52      	bge.n	8010192 <__gethex+0x27c>
 80100ec:	4629      	mov	r1, r5
 80100ee:	9802      	ldr	r0, [sp, #8]
 80100f0:	f000 fa55 	bl	801059e <_Bfree>
 80100f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80100f6:	2300      	movs	r3, #0
 80100f8:	6013      	str	r3, [r2, #0]
 80100fa:	27a3      	movs	r7, #163	; 0xa3
 80100fc:	e793      	b.n	8010026 <__gethex+0x110>
 80100fe:	3101      	adds	r1, #1
 8010100:	105b      	asrs	r3, r3, #1
 8010102:	e7b0      	b.n	8010066 <__gethex+0x150>
 8010104:	1e73      	subs	r3, r6, #1
 8010106:	9305      	str	r3, [sp, #20]
 8010108:	9a07      	ldr	r2, [sp, #28]
 801010a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801010e:	4293      	cmp	r3, r2
 8010110:	d018      	beq.n	8010144 <__gethex+0x22e>
 8010112:	f1bb 0f20 	cmp.w	fp, #32
 8010116:	d107      	bne.n	8010128 <__gethex+0x212>
 8010118:	9b04      	ldr	r3, [sp, #16]
 801011a:	f8c3 a000 	str.w	sl, [r3]
 801011e:	3304      	adds	r3, #4
 8010120:	f04f 0a00 	mov.w	sl, #0
 8010124:	9304      	str	r3, [sp, #16]
 8010126:	46d3      	mov	fp, sl
 8010128:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801012c:	f7ff fede 	bl	800feec <__hexdig_fun>
 8010130:	f000 000f 	and.w	r0, r0, #15
 8010134:	fa00 f00b 	lsl.w	r0, r0, fp
 8010138:	ea4a 0a00 	orr.w	sl, sl, r0
 801013c:	f10b 0b04 	add.w	fp, fp, #4
 8010140:	9b05      	ldr	r3, [sp, #20]
 8010142:	e00d      	b.n	8010160 <__gethex+0x24a>
 8010144:	9b05      	ldr	r3, [sp, #20]
 8010146:	9a08      	ldr	r2, [sp, #32]
 8010148:	4413      	add	r3, r2
 801014a:	42bb      	cmp	r3, r7
 801014c:	d3e1      	bcc.n	8010112 <__gethex+0x1fc>
 801014e:	4618      	mov	r0, r3
 8010150:	9a01      	ldr	r2, [sp, #4]
 8010152:	9903      	ldr	r1, [sp, #12]
 8010154:	9309      	str	r3, [sp, #36]	; 0x24
 8010156:	f001 f805 	bl	8011164 <strncmp>
 801015a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801015c:	2800      	cmp	r0, #0
 801015e:	d1d8      	bne.n	8010112 <__gethex+0x1fc>
 8010160:	461e      	mov	r6, r3
 8010162:	e791      	b.n	8010088 <__gethex+0x172>
 8010164:	1eb9      	subs	r1, r7, #2
 8010166:	4628      	mov	r0, r5
 8010168:	f000 fdc2 	bl	8010cf0 <__any_on>
 801016c:	2800      	cmp	r0, #0
 801016e:	d0b2      	beq.n	80100d6 <__gethex+0x1c0>
 8010170:	f04f 0a03 	mov.w	sl, #3
 8010174:	e7b1      	b.n	80100da <__gethex+0x1c4>
 8010176:	da09      	bge.n	801018c <__gethex+0x276>
 8010178:	1bf7      	subs	r7, r6, r7
 801017a:	4629      	mov	r1, r5
 801017c:	463a      	mov	r2, r7
 801017e:	9802      	ldr	r0, [sp, #8]
 8010180:	f000 fbd8 	bl	8010934 <__lshift>
 8010184:	1be4      	subs	r4, r4, r7
 8010186:	4605      	mov	r5, r0
 8010188:	f100 0914 	add.w	r9, r0, #20
 801018c:	f04f 0a00 	mov.w	sl, #0
 8010190:	e7a8      	b.n	80100e4 <__gethex+0x1ce>
 8010192:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010196:	42a0      	cmp	r0, r4
 8010198:	dd6a      	ble.n	8010270 <__gethex+0x35a>
 801019a:	1b04      	subs	r4, r0, r4
 801019c:	42a6      	cmp	r6, r4
 801019e:	dc2e      	bgt.n	80101fe <__gethex+0x2e8>
 80101a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80101a4:	2b02      	cmp	r3, #2
 80101a6:	d022      	beq.n	80101ee <__gethex+0x2d8>
 80101a8:	2b03      	cmp	r3, #3
 80101aa:	d024      	beq.n	80101f6 <__gethex+0x2e0>
 80101ac:	2b01      	cmp	r3, #1
 80101ae:	d115      	bne.n	80101dc <__gethex+0x2c6>
 80101b0:	42a6      	cmp	r6, r4
 80101b2:	d113      	bne.n	80101dc <__gethex+0x2c6>
 80101b4:	2e01      	cmp	r6, #1
 80101b6:	dc0b      	bgt.n	80101d0 <__gethex+0x2ba>
 80101b8:	9a06      	ldr	r2, [sp, #24]
 80101ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80101be:	6013      	str	r3, [r2, #0]
 80101c0:	2301      	movs	r3, #1
 80101c2:	612b      	str	r3, [r5, #16]
 80101c4:	f8c9 3000 	str.w	r3, [r9]
 80101c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80101ca:	2762      	movs	r7, #98	; 0x62
 80101cc:	601d      	str	r5, [r3, #0]
 80101ce:	e72a      	b.n	8010026 <__gethex+0x110>
 80101d0:	1e71      	subs	r1, r6, #1
 80101d2:	4628      	mov	r0, r5
 80101d4:	f000 fd8c 	bl	8010cf0 <__any_on>
 80101d8:	2800      	cmp	r0, #0
 80101da:	d1ed      	bne.n	80101b8 <__gethex+0x2a2>
 80101dc:	4629      	mov	r1, r5
 80101de:	9802      	ldr	r0, [sp, #8]
 80101e0:	f000 f9dd 	bl	801059e <_Bfree>
 80101e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80101e6:	2300      	movs	r3, #0
 80101e8:	6013      	str	r3, [r2, #0]
 80101ea:	2750      	movs	r7, #80	; 0x50
 80101ec:	e71b      	b.n	8010026 <__gethex+0x110>
 80101ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d0e1      	beq.n	80101b8 <__gethex+0x2a2>
 80101f4:	e7f2      	b.n	80101dc <__gethex+0x2c6>
 80101f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d1dd      	bne.n	80101b8 <__gethex+0x2a2>
 80101fc:	e7ee      	b.n	80101dc <__gethex+0x2c6>
 80101fe:	1e67      	subs	r7, r4, #1
 8010200:	f1ba 0f00 	cmp.w	sl, #0
 8010204:	d131      	bne.n	801026a <__gethex+0x354>
 8010206:	b127      	cbz	r7, 8010212 <__gethex+0x2fc>
 8010208:	4639      	mov	r1, r7
 801020a:	4628      	mov	r0, r5
 801020c:	f000 fd70 	bl	8010cf0 <__any_on>
 8010210:	4682      	mov	sl, r0
 8010212:	117a      	asrs	r2, r7, #5
 8010214:	2301      	movs	r3, #1
 8010216:	f007 071f 	and.w	r7, r7, #31
 801021a:	fa03 f707 	lsl.w	r7, r3, r7
 801021e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010222:	4621      	mov	r1, r4
 8010224:	421f      	tst	r7, r3
 8010226:	4628      	mov	r0, r5
 8010228:	bf18      	it	ne
 801022a:	f04a 0a02 	orrne.w	sl, sl, #2
 801022e:	1b36      	subs	r6, r6, r4
 8010230:	f7ff fe22 	bl	800fe78 <rshift>
 8010234:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010238:	2702      	movs	r7, #2
 801023a:	f1ba 0f00 	cmp.w	sl, #0
 801023e:	d048      	beq.n	80102d2 <__gethex+0x3bc>
 8010240:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010244:	2b02      	cmp	r3, #2
 8010246:	d015      	beq.n	8010274 <__gethex+0x35e>
 8010248:	2b03      	cmp	r3, #3
 801024a:	d017      	beq.n	801027c <__gethex+0x366>
 801024c:	2b01      	cmp	r3, #1
 801024e:	d109      	bne.n	8010264 <__gethex+0x34e>
 8010250:	f01a 0f02 	tst.w	sl, #2
 8010254:	d006      	beq.n	8010264 <__gethex+0x34e>
 8010256:	f8d9 3000 	ldr.w	r3, [r9]
 801025a:	ea4a 0a03 	orr.w	sl, sl, r3
 801025e:	f01a 0f01 	tst.w	sl, #1
 8010262:	d10e      	bne.n	8010282 <__gethex+0x36c>
 8010264:	f047 0710 	orr.w	r7, r7, #16
 8010268:	e033      	b.n	80102d2 <__gethex+0x3bc>
 801026a:	f04f 0a01 	mov.w	sl, #1
 801026e:	e7d0      	b.n	8010212 <__gethex+0x2fc>
 8010270:	2701      	movs	r7, #1
 8010272:	e7e2      	b.n	801023a <__gethex+0x324>
 8010274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010276:	f1c3 0301 	rsb	r3, r3, #1
 801027a:	9315      	str	r3, [sp, #84]	; 0x54
 801027c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801027e:	2b00      	cmp	r3, #0
 8010280:	d0f0      	beq.n	8010264 <__gethex+0x34e>
 8010282:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010286:	f105 0314 	add.w	r3, r5, #20
 801028a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801028e:	eb03 010a 	add.w	r1, r3, sl
 8010292:	f04f 0c00 	mov.w	ip, #0
 8010296:	4618      	mov	r0, r3
 8010298:	f853 2b04 	ldr.w	r2, [r3], #4
 801029c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 80102a0:	d01c      	beq.n	80102dc <__gethex+0x3c6>
 80102a2:	3201      	adds	r2, #1
 80102a4:	6002      	str	r2, [r0, #0]
 80102a6:	2f02      	cmp	r7, #2
 80102a8:	f105 0314 	add.w	r3, r5, #20
 80102ac:	d138      	bne.n	8010320 <__gethex+0x40a>
 80102ae:	f8d8 2000 	ldr.w	r2, [r8]
 80102b2:	3a01      	subs	r2, #1
 80102b4:	42b2      	cmp	r2, r6
 80102b6:	d10a      	bne.n	80102ce <__gethex+0x3b8>
 80102b8:	1171      	asrs	r1, r6, #5
 80102ba:	2201      	movs	r2, #1
 80102bc:	f006 061f 	and.w	r6, r6, #31
 80102c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80102c4:	fa02 f606 	lsl.w	r6, r2, r6
 80102c8:	421e      	tst	r6, r3
 80102ca:	bf18      	it	ne
 80102cc:	4617      	movne	r7, r2
 80102ce:	f047 0720 	orr.w	r7, r7, #32
 80102d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80102d4:	601d      	str	r5, [r3, #0]
 80102d6:	9b06      	ldr	r3, [sp, #24]
 80102d8:	601c      	str	r4, [r3, #0]
 80102da:	e6a4      	b.n	8010026 <__gethex+0x110>
 80102dc:	4299      	cmp	r1, r3
 80102de:	f843 cc04 	str.w	ip, [r3, #-4]
 80102e2:	d8d8      	bhi.n	8010296 <__gethex+0x380>
 80102e4:	68ab      	ldr	r3, [r5, #8]
 80102e6:	4599      	cmp	r9, r3
 80102e8:	db12      	blt.n	8010310 <__gethex+0x3fa>
 80102ea:	6869      	ldr	r1, [r5, #4]
 80102ec:	9802      	ldr	r0, [sp, #8]
 80102ee:	3101      	adds	r1, #1
 80102f0:	f000 f921 	bl	8010536 <_Balloc>
 80102f4:	692a      	ldr	r2, [r5, #16]
 80102f6:	3202      	adds	r2, #2
 80102f8:	f105 010c 	add.w	r1, r5, #12
 80102fc:	4683      	mov	fp, r0
 80102fe:	0092      	lsls	r2, r2, #2
 8010300:	300c      	adds	r0, #12
 8010302:	f000 f90d 	bl	8010520 <memcpy>
 8010306:	4629      	mov	r1, r5
 8010308:	9802      	ldr	r0, [sp, #8]
 801030a:	f000 f948 	bl	801059e <_Bfree>
 801030e:	465d      	mov	r5, fp
 8010310:	692b      	ldr	r3, [r5, #16]
 8010312:	1c5a      	adds	r2, r3, #1
 8010314:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010318:	612a      	str	r2, [r5, #16]
 801031a:	2201      	movs	r2, #1
 801031c:	615a      	str	r2, [r3, #20]
 801031e:	e7c2      	b.n	80102a6 <__gethex+0x390>
 8010320:	692a      	ldr	r2, [r5, #16]
 8010322:	454a      	cmp	r2, r9
 8010324:	dd0b      	ble.n	801033e <__gethex+0x428>
 8010326:	2101      	movs	r1, #1
 8010328:	4628      	mov	r0, r5
 801032a:	f7ff fda5 	bl	800fe78 <rshift>
 801032e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010332:	3401      	adds	r4, #1
 8010334:	42a3      	cmp	r3, r4
 8010336:	f6ff aed9 	blt.w	80100ec <__gethex+0x1d6>
 801033a:	2701      	movs	r7, #1
 801033c:	e7c7      	b.n	80102ce <__gethex+0x3b8>
 801033e:	f016 061f 	ands.w	r6, r6, #31
 8010342:	d0fa      	beq.n	801033a <__gethex+0x424>
 8010344:	449a      	add	sl, r3
 8010346:	f1c6 0620 	rsb	r6, r6, #32
 801034a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 801034e:	f000 f9b6 	bl	80106be <__hi0bits>
 8010352:	42b0      	cmp	r0, r6
 8010354:	dbe7      	blt.n	8010326 <__gethex+0x410>
 8010356:	e7f0      	b.n	801033a <__gethex+0x424>

08010358 <L_shift>:
 8010358:	f1c2 0208 	rsb	r2, r2, #8
 801035c:	0092      	lsls	r2, r2, #2
 801035e:	b570      	push	{r4, r5, r6, lr}
 8010360:	f1c2 0620 	rsb	r6, r2, #32
 8010364:	6843      	ldr	r3, [r0, #4]
 8010366:	6804      	ldr	r4, [r0, #0]
 8010368:	fa03 f506 	lsl.w	r5, r3, r6
 801036c:	432c      	orrs	r4, r5
 801036e:	40d3      	lsrs	r3, r2
 8010370:	6004      	str	r4, [r0, #0]
 8010372:	f840 3f04 	str.w	r3, [r0, #4]!
 8010376:	4288      	cmp	r0, r1
 8010378:	d3f4      	bcc.n	8010364 <L_shift+0xc>
 801037a:	bd70      	pop	{r4, r5, r6, pc}

0801037c <__match>:
 801037c:	b530      	push	{r4, r5, lr}
 801037e:	6803      	ldr	r3, [r0, #0]
 8010380:	3301      	adds	r3, #1
 8010382:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010386:	b914      	cbnz	r4, 801038e <__match+0x12>
 8010388:	6003      	str	r3, [r0, #0]
 801038a:	2001      	movs	r0, #1
 801038c:	bd30      	pop	{r4, r5, pc}
 801038e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010392:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010396:	2d19      	cmp	r5, #25
 8010398:	bf98      	it	ls
 801039a:	3220      	addls	r2, #32
 801039c:	42a2      	cmp	r2, r4
 801039e:	d0f0      	beq.n	8010382 <__match+0x6>
 80103a0:	2000      	movs	r0, #0
 80103a2:	e7f3      	b.n	801038c <__match+0x10>

080103a4 <__hexnan>:
 80103a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103a8:	680b      	ldr	r3, [r1, #0]
 80103aa:	6801      	ldr	r1, [r0, #0]
 80103ac:	115f      	asrs	r7, r3, #5
 80103ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80103b2:	f013 031f 	ands.w	r3, r3, #31
 80103b6:	b087      	sub	sp, #28
 80103b8:	bf18      	it	ne
 80103ba:	3704      	addne	r7, #4
 80103bc:	2500      	movs	r5, #0
 80103be:	1f3e      	subs	r6, r7, #4
 80103c0:	4682      	mov	sl, r0
 80103c2:	4690      	mov	r8, r2
 80103c4:	9301      	str	r3, [sp, #4]
 80103c6:	f847 5c04 	str.w	r5, [r7, #-4]
 80103ca:	46b1      	mov	r9, r6
 80103cc:	4634      	mov	r4, r6
 80103ce:	9502      	str	r5, [sp, #8]
 80103d0:	46ab      	mov	fp, r5
 80103d2:	784a      	ldrb	r2, [r1, #1]
 80103d4:	1c4b      	adds	r3, r1, #1
 80103d6:	9303      	str	r3, [sp, #12]
 80103d8:	b342      	cbz	r2, 801042c <__hexnan+0x88>
 80103da:	4610      	mov	r0, r2
 80103dc:	9105      	str	r1, [sp, #20]
 80103de:	9204      	str	r2, [sp, #16]
 80103e0:	f7ff fd84 	bl	800feec <__hexdig_fun>
 80103e4:	2800      	cmp	r0, #0
 80103e6:	d143      	bne.n	8010470 <__hexnan+0xcc>
 80103e8:	9a04      	ldr	r2, [sp, #16]
 80103ea:	9905      	ldr	r1, [sp, #20]
 80103ec:	2a20      	cmp	r2, #32
 80103ee:	d818      	bhi.n	8010422 <__hexnan+0x7e>
 80103f0:	9b02      	ldr	r3, [sp, #8]
 80103f2:	459b      	cmp	fp, r3
 80103f4:	dd13      	ble.n	801041e <__hexnan+0x7a>
 80103f6:	454c      	cmp	r4, r9
 80103f8:	d206      	bcs.n	8010408 <__hexnan+0x64>
 80103fa:	2d07      	cmp	r5, #7
 80103fc:	dc04      	bgt.n	8010408 <__hexnan+0x64>
 80103fe:	462a      	mov	r2, r5
 8010400:	4649      	mov	r1, r9
 8010402:	4620      	mov	r0, r4
 8010404:	f7ff ffa8 	bl	8010358 <L_shift>
 8010408:	4544      	cmp	r4, r8
 801040a:	d944      	bls.n	8010496 <__hexnan+0xf2>
 801040c:	2300      	movs	r3, #0
 801040e:	f1a4 0904 	sub.w	r9, r4, #4
 8010412:	f844 3c04 	str.w	r3, [r4, #-4]
 8010416:	f8cd b008 	str.w	fp, [sp, #8]
 801041a:	464c      	mov	r4, r9
 801041c:	461d      	mov	r5, r3
 801041e:	9903      	ldr	r1, [sp, #12]
 8010420:	e7d7      	b.n	80103d2 <__hexnan+0x2e>
 8010422:	2a29      	cmp	r2, #41	; 0x29
 8010424:	d14a      	bne.n	80104bc <__hexnan+0x118>
 8010426:	3102      	adds	r1, #2
 8010428:	f8ca 1000 	str.w	r1, [sl]
 801042c:	f1bb 0f00 	cmp.w	fp, #0
 8010430:	d044      	beq.n	80104bc <__hexnan+0x118>
 8010432:	454c      	cmp	r4, r9
 8010434:	d206      	bcs.n	8010444 <__hexnan+0xa0>
 8010436:	2d07      	cmp	r5, #7
 8010438:	dc04      	bgt.n	8010444 <__hexnan+0xa0>
 801043a:	462a      	mov	r2, r5
 801043c:	4649      	mov	r1, r9
 801043e:	4620      	mov	r0, r4
 8010440:	f7ff ff8a 	bl	8010358 <L_shift>
 8010444:	4544      	cmp	r4, r8
 8010446:	d928      	bls.n	801049a <__hexnan+0xf6>
 8010448:	4643      	mov	r3, r8
 801044a:	f854 2b04 	ldr.w	r2, [r4], #4
 801044e:	f843 2b04 	str.w	r2, [r3], #4
 8010452:	42a6      	cmp	r6, r4
 8010454:	d2f9      	bcs.n	801044a <__hexnan+0xa6>
 8010456:	2200      	movs	r2, #0
 8010458:	f843 2b04 	str.w	r2, [r3], #4
 801045c:	429e      	cmp	r6, r3
 801045e:	d2fb      	bcs.n	8010458 <__hexnan+0xb4>
 8010460:	6833      	ldr	r3, [r6, #0]
 8010462:	b91b      	cbnz	r3, 801046c <__hexnan+0xc8>
 8010464:	4546      	cmp	r6, r8
 8010466:	d127      	bne.n	80104b8 <__hexnan+0x114>
 8010468:	2301      	movs	r3, #1
 801046a:	6033      	str	r3, [r6, #0]
 801046c:	2005      	movs	r0, #5
 801046e:	e026      	b.n	80104be <__hexnan+0x11a>
 8010470:	3501      	adds	r5, #1
 8010472:	2d08      	cmp	r5, #8
 8010474:	f10b 0b01 	add.w	fp, fp, #1
 8010478:	dd06      	ble.n	8010488 <__hexnan+0xe4>
 801047a:	4544      	cmp	r4, r8
 801047c:	d9cf      	bls.n	801041e <__hexnan+0x7a>
 801047e:	2300      	movs	r3, #0
 8010480:	f844 3c04 	str.w	r3, [r4, #-4]
 8010484:	2501      	movs	r5, #1
 8010486:	3c04      	subs	r4, #4
 8010488:	6822      	ldr	r2, [r4, #0]
 801048a:	f000 000f 	and.w	r0, r0, #15
 801048e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010492:	6020      	str	r0, [r4, #0]
 8010494:	e7c3      	b.n	801041e <__hexnan+0x7a>
 8010496:	2508      	movs	r5, #8
 8010498:	e7c1      	b.n	801041e <__hexnan+0x7a>
 801049a:	9b01      	ldr	r3, [sp, #4]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d0df      	beq.n	8010460 <__hexnan+0xbc>
 80104a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104a4:	f1c3 0320 	rsb	r3, r3, #32
 80104a8:	fa22 f303 	lsr.w	r3, r2, r3
 80104ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80104b0:	401a      	ands	r2, r3
 80104b2:	f847 2c04 	str.w	r2, [r7, #-4]
 80104b6:	e7d3      	b.n	8010460 <__hexnan+0xbc>
 80104b8:	3e04      	subs	r6, #4
 80104ba:	e7d1      	b.n	8010460 <__hexnan+0xbc>
 80104bc:	2004      	movs	r0, #4
 80104be:	b007      	add	sp, #28
 80104c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080104c4 <__locale_ctype_ptr_l>:
 80104c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80104c8:	4770      	bx	lr

080104ca <__localeconv_l>:
 80104ca:	30f0      	adds	r0, #240	; 0xf0
 80104cc:	4770      	bx	lr
	...

080104d0 <_localeconv_r>:
 80104d0:	4b04      	ldr	r3, [pc, #16]	; (80104e4 <_localeconv_r+0x14>)
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	6a18      	ldr	r0, [r3, #32]
 80104d6:	4b04      	ldr	r3, [pc, #16]	; (80104e8 <_localeconv_r+0x18>)
 80104d8:	2800      	cmp	r0, #0
 80104da:	bf08      	it	eq
 80104dc:	4618      	moveq	r0, r3
 80104de:	30f0      	adds	r0, #240	; 0xf0
 80104e0:	4770      	bx	lr
 80104e2:	bf00      	nop
 80104e4:	20000044 	.word	0x20000044
 80104e8:	200000a8 	.word	0x200000a8

080104ec <malloc>:
 80104ec:	4b02      	ldr	r3, [pc, #8]	; (80104f8 <malloc+0xc>)
 80104ee:	4601      	mov	r1, r0
 80104f0:	6818      	ldr	r0, [r3, #0]
 80104f2:	f000 bc7b 	b.w	8010dec <_malloc_r>
 80104f6:	bf00      	nop
 80104f8:	20000044 	.word	0x20000044

080104fc <__ascii_mbtowc>:
 80104fc:	b082      	sub	sp, #8
 80104fe:	b901      	cbnz	r1, 8010502 <__ascii_mbtowc+0x6>
 8010500:	a901      	add	r1, sp, #4
 8010502:	b142      	cbz	r2, 8010516 <__ascii_mbtowc+0x1a>
 8010504:	b14b      	cbz	r3, 801051a <__ascii_mbtowc+0x1e>
 8010506:	7813      	ldrb	r3, [r2, #0]
 8010508:	600b      	str	r3, [r1, #0]
 801050a:	7812      	ldrb	r2, [r2, #0]
 801050c:	1c10      	adds	r0, r2, #0
 801050e:	bf18      	it	ne
 8010510:	2001      	movne	r0, #1
 8010512:	b002      	add	sp, #8
 8010514:	4770      	bx	lr
 8010516:	4610      	mov	r0, r2
 8010518:	e7fb      	b.n	8010512 <__ascii_mbtowc+0x16>
 801051a:	f06f 0001 	mvn.w	r0, #1
 801051e:	e7f8      	b.n	8010512 <__ascii_mbtowc+0x16>

08010520 <memcpy>:
 8010520:	b510      	push	{r4, lr}
 8010522:	1e43      	subs	r3, r0, #1
 8010524:	440a      	add	r2, r1
 8010526:	4291      	cmp	r1, r2
 8010528:	d100      	bne.n	801052c <memcpy+0xc>
 801052a:	bd10      	pop	{r4, pc}
 801052c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010534:	e7f7      	b.n	8010526 <memcpy+0x6>

08010536 <_Balloc>:
 8010536:	b570      	push	{r4, r5, r6, lr}
 8010538:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801053a:	4604      	mov	r4, r0
 801053c:	460e      	mov	r6, r1
 801053e:	b93d      	cbnz	r5, 8010550 <_Balloc+0x1a>
 8010540:	2010      	movs	r0, #16
 8010542:	f7ff ffd3 	bl	80104ec <malloc>
 8010546:	6260      	str	r0, [r4, #36]	; 0x24
 8010548:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801054c:	6005      	str	r5, [r0, #0]
 801054e:	60c5      	str	r5, [r0, #12]
 8010550:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010552:	68eb      	ldr	r3, [r5, #12]
 8010554:	b183      	cbz	r3, 8010578 <_Balloc+0x42>
 8010556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010558:	68db      	ldr	r3, [r3, #12]
 801055a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801055e:	b9b8      	cbnz	r0, 8010590 <_Balloc+0x5a>
 8010560:	2101      	movs	r1, #1
 8010562:	fa01 f506 	lsl.w	r5, r1, r6
 8010566:	1d6a      	adds	r2, r5, #5
 8010568:	0092      	lsls	r2, r2, #2
 801056a:	4620      	mov	r0, r4
 801056c:	f000 fbe1 	bl	8010d32 <_calloc_r>
 8010570:	b160      	cbz	r0, 801058c <_Balloc+0x56>
 8010572:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010576:	e00e      	b.n	8010596 <_Balloc+0x60>
 8010578:	2221      	movs	r2, #33	; 0x21
 801057a:	2104      	movs	r1, #4
 801057c:	4620      	mov	r0, r4
 801057e:	f000 fbd8 	bl	8010d32 <_calloc_r>
 8010582:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010584:	60e8      	str	r0, [r5, #12]
 8010586:	68db      	ldr	r3, [r3, #12]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d1e4      	bne.n	8010556 <_Balloc+0x20>
 801058c:	2000      	movs	r0, #0
 801058e:	bd70      	pop	{r4, r5, r6, pc}
 8010590:	6802      	ldr	r2, [r0, #0]
 8010592:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010596:	2300      	movs	r3, #0
 8010598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801059c:	e7f7      	b.n	801058e <_Balloc+0x58>

0801059e <_Bfree>:
 801059e:	b570      	push	{r4, r5, r6, lr}
 80105a0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80105a2:	4606      	mov	r6, r0
 80105a4:	460d      	mov	r5, r1
 80105a6:	b93c      	cbnz	r4, 80105b8 <_Bfree+0x1a>
 80105a8:	2010      	movs	r0, #16
 80105aa:	f7ff ff9f 	bl	80104ec <malloc>
 80105ae:	6270      	str	r0, [r6, #36]	; 0x24
 80105b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80105b4:	6004      	str	r4, [r0, #0]
 80105b6:	60c4      	str	r4, [r0, #12]
 80105b8:	b13d      	cbz	r5, 80105ca <_Bfree+0x2c>
 80105ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80105bc:	686a      	ldr	r2, [r5, #4]
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80105c4:	6029      	str	r1, [r5, #0]
 80105c6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80105ca:	bd70      	pop	{r4, r5, r6, pc}

080105cc <__multadd>:
 80105cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105d0:	690d      	ldr	r5, [r1, #16]
 80105d2:	461f      	mov	r7, r3
 80105d4:	4606      	mov	r6, r0
 80105d6:	460c      	mov	r4, r1
 80105d8:	f101 0c14 	add.w	ip, r1, #20
 80105dc:	2300      	movs	r3, #0
 80105de:	f8dc 0000 	ldr.w	r0, [ip]
 80105e2:	b281      	uxth	r1, r0
 80105e4:	fb02 7101 	mla	r1, r2, r1, r7
 80105e8:	0c0f      	lsrs	r7, r1, #16
 80105ea:	0c00      	lsrs	r0, r0, #16
 80105ec:	fb02 7000 	mla	r0, r2, r0, r7
 80105f0:	b289      	uxth	r1, r1
 80105f2:	3301      	adds	r3, #1
 80105f4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80105f8:	429d      	cmp	r5, r3
 80105fa:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80105fe:	f84c 1b04 	str.w	r1, [ip], #4
 8010602:	dcec      	bgt.n	80105de <__multadd+0x12>
 8010604:	b1d7      	cbz	r7, 801063c <__multadd+0x70>
 8010606:	68a3      	ldr	r3, [r4, #8]
 8010608:	42ab      	cmp	r3, r5
 801060a:	dc12      	bgt.n	8010632 <__multadd+0x66>
 801060c:	6861      	ldr	r1, [r4, #4]
 801060e:	4630      	mov	r0, r6
 8010610:	3101      	adds	r1, #1
 8010612:	f7ff ff90 	bl	8010536 <_Balloc>
 8010616:	6922      	ldr	r2, [r4, #16]
 8010618:	3202      	adds	r2, #2
 801061a:	f104 010c 	add.w	r1, r4, #12
 801061e:	4680      	mov	r8, r0
 8010620:	0092      	lsls	r2, r2, #2
 8010622:	300c      	adds	r0, #12
 8010624:	f7ff ff7c 	bl	8010520 <memcpy>
 8010628:	4621      	mov	r1, r4
 801062a:	4630      	mov	r0, r6
 801062c:	f7ff ffb7 	bl	801059e <_Bfree>
 8010630:	4644      	mov	r4, r8
 8010632:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010636:	3501      	adds	r5, #1
 8010638:	615f      	str	r7, [r3, #20]
 801063a:	6125      	str	r5, [r4, #16]
 801063c:	4620      	mov	r0, r4
 801063e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010642 <__s2b>:
 8010642:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010646:	460c      	mov	r4, r1
 8010648:	4615      	mov	r5, r2
 801064a:	461f      	mov	r7, r3
 801064c:	2209      	movs	r2, #9
 801064e:	3308      	adds	r3, #8
 8010650:	4606      	mov	r6, r0
 8010652:	fb93 f3f2 	sdiv	r3, r3, r2
 8010656:	2100      	movs	r1, #0
 8010658:	2201      	movs	r2, #1
 801065a:	429a      	cmp	r2, r3
 801065c:	db20      	blt.n	80106a0 <__s2b+0x5e>
 801065e:	4630      	mov	r0, r6
 8010660:	f7ff ff69 	bl	8010536 <_Balloc>
 8010664:	9b08      	ldr	r3, [sp, #32]
 8010666:	6143      	str	r3, [r0, #20]
 8010668:	2d09      	cmp	r5, #9
 801066a:	f04f 0301 	mov.w	r3, #1
 801066e:	6103      	str	r3, [r0, #16]
 8010670:	dd19      	ble.n	80106a6 <__s2b+0x64>
 8010672:	f104 0809 	add.w	r8, r4, #9
 8010676:	46c1      	mov	r9, r8
 8010678:	442c      	add	r4, r5
 801067a:	f819 3b01 	ldrb.w	r3, [r9], #1
 801067e:	4601      	mov	r1, r0
 8010680:	3b30      	subs	r3, #48	; 0x30
 8010682:	220a      	movs	r2, #10
 8010684:	4630      	mov	r0, r6
 8010686:	f7ff ffa1 	bl	80105cc <__multadd>
 801068a:	45a1      	cmp	r9, r4
 801068c:	d1f5      	bne.n	801067a <__s2b+0x38>
 801068e:	eb08 0405 	add.w	r4, r8, r5
 8010692:	3c08      	subs	r4, #8
 8010694:	1b2d      	subs	r5, r5, r4
 8010696:	1963      	adds	r3, r4, r5
 8010698:	42bb      	cmp	r3, r7
 801069a:	db07      	blt.n	80106ac <__s2b+0x6a>
 801069c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106a0:	0052      	lsls	r2, r2, #1
 80106a2:	3101      	adds	r1, #1
 80106a4:	e7d9      	b.n	801065a <__s2b+0x18>
 80106a6:	340a      	adds	r4, #10
 80106a8:	2509      	movs	r5, #9
 80106aa:	e7f3      	b.n	8010694 <__s2b+0x52>
 80106ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80106b0:	4601      	mov	r1, r0
 80106b2:	3b30      	subs	r3, #48	; 0x30
 80106b4:	220a      	movs	r2, #10
 80106b6:	4630      	mov	r0, r6
 80106b8:	f7ff ff88 	bl	80105cc <__multadd>
 80106bc:	e7eb      	b.n	8010696 <__s2b+0x54>

080106be <__hi0bits>:
 80106be:	0c02      	lsrs	r2, r0, #16
 80106c0:	0412      	lsls	r2, r2, #16
 80106c2:	4603      	mov	r3, r0
 80106c4:	b9b2      	cbnz	r2, 80106f4 <__hi0bits+0x36>
 80106c6:	0403      	lsls	r3, r0, #16
 80106c8:	2010      	movs	r0, #16
 80106ca:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80106ce:	bf04      	itt	eq
 80106d0:	021b      	lsleq	r3, r3, #8
 80106d2:	3008      	addeq	r0, #8
 80106d4:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80106d8:	bf04      	itt	eq
 80106da:	011b      	lsleq	r3, r3, #4
 80106dc:	3004      	addeq	r0, #4
 80106de:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80106e2:	bf04      	itt	eq
 80106e4:	009b      	lsleq	r3, r3, #2
 80106e6:	3002      	addeq	r0, #2
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	db06      	blt.n	80106fa <__hi0bits+0x3c>
 80106ec:	005b      	lsls	r3, r3, #1
 80106ee:	d503      	bpl.n	80106f8 <__hi0bits+0x3a>
 80106f0:	3001      	adds	r0, #1
 80106f2:	4770      	bx	lr
 80106f4:	2000      	movs	r0, #0
 80106f6:	e7e8      	b.n	80106ca <__hi0bits+0xc>
 80106f8:	2020      	movs	r0, #32
 80106fa:	4770      	bx	lr

080106fc <__lo0bits>:
 80106fc:	6803      	ldr	r3, [r0, #0]
 80106fe:	f013 0207 	ands.w	r2, r3, #7
 8010702:	4601      	mov	r1, r0
 8010704:	d00b      	beq.n	801071e <__lo0bits+0x22>
 8010706:	07da      	lsls	r2, r3, #31
 8010708:	d423      	bmi.n	8010752 <__lo0bits+0x56>
 801070a:	0798      	lsls	r0, r3, #30
 801070c:	bf49      	itett	mi
 801070e:	085b      	lsrmi	r3, r3, #1
 8010710:	089b      	lsrpl	r3, r3, #2
 8010712:	2001      	movmi	r0, #1
 8010714:	600b      	strmi	r3, [r1, #0]
 8010716:	bf5c      	itt	pl
 8010718:	600b      	strpl	r3, [r1, #0]
 801071a:	2002      	movpl	r0, #2
 801071c:	4770      	bx	lr
 801071e:	b298      	uxth	r0, r3
 8010720:	b9a8      	cbnz	r0, 801074e <__lo0bits+0x52>
 8010722:	0c1b      	lsrs	r3, r3, #16
 8010724:	2010      	movs	r0, #16
 8010726:	f013 0fff 	tst.w	r3, #255	; 0xff
 801072a:	bf04      	itt	eq
 801072c:	0a1b      	lsreq	r3, r3, #8
 801072e:	3008      	addeq	r0, #8
 8010730:	071a      	lsls	r2, r3, #28
 8010732:	bf04      	itt	eq
 8010734:	091b      	lsreq	r3, r3, #4
 8010736:	3004      	addeq	r0, #4
 8010738:	079a      	lsls	r2, r3, #30
 801073a:	bf04      	itt	eq
 801073c:	089b      	lsreq	r3, r3, #2
 801073e:	3002      	addeq	r0, #2
 8010740:	07da      	lsls	r2, r3, #31
 8010742:	d402      	bmi.n	801074a <__lo0bits+0x4e>
 8010744:	085b      	lsrs	r3, r3, #1
 8010746:	d006      	beq.n	8010756 <__lo0bits+0x5a>
 8010748:	3001      	adds	r0, #1
 801074a:	600b      	str	r3, [r1, #0]
 801074c:	4770      	bx	lr
 801074e:	4610      	mov	r0, r2
 8010750:	e7e9      	b.n	8010726 <__lo0bits+0x2a>
 8010752:	2000      	movs	r0, #0
 8010754:	4770      	bx	lr
 8010756:	2020      	movs	r0, #32
 8010758:	4770      	bx	lr

0801075a <__i2b>:
 801075a:	b510      	push	{r4, lr}
 801075c:	460c      	mov	r4, r1
 801075e:	2101      	movs	r1, #1
 8010760:	f7ff fee9 	bl	8010536 <_Balloc>
 8010764:	2201      	movs	r2, #1
 8010766:	6144      	str	r4, [r0, #20]
 8010768:	6102      	str	r2, [r0, #16]
 801076a:	bd10      	pop	{r4, pc}

0801076c <__multiply>:
 801076c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010770:	4614      	mov	r4, r2
 8010772:	690a      	ldr	r2, [r1, #16]
 8010774:	6923      	ldr	r3, [r4, #16]
 8010776:	429a      	cmp	r2, r3
 8010778:	bfb8      	it	lt
 801077a:	460b      	movlt	r3, r1
 801077c:	4688      	mov	r8, r1
 801077e:	bfbc      	itt	lt
 8010780:	46a0      	movlt	r8, r4
 8010782:	461c      	movlt	r4, r3
 8010784:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010788:	f8d4 9010 	ldr.w	r9, [r4, #16]
 801078c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010790:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010794:	eb07 0609 	add.w	r6, r7, r9
 8010798:	42b3      	cmp	r3, r6
 801079a:	bfb8      	it	lt
 801079c:	3101      	addlt	r1, #1
 801079e:	f7ff feca 	bl	8010536 <_Balloc>
 80107a2:	f100 0514 	add.w	r5, r0, #20
 80107a6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80107aa:	462b      	mov	r3, r5
 80107ac:	2200      	movs	r2, #0
 80107ae:	4573      	cmp	r3, lr
 80107b0:	d316      	bcc.n	80107e0 <__multiply+0x74>
 80107b2:	f104 0214 	add.w	r2, r4, #20
 80107b6:	f108 0114 	add.w	r1, r8, #20
 80107ba:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80107be:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80107c2:	9300      	str	r3, [sp, #0]
 80107c4:	9b00      	ldr	r3, [sp, #0]
 80107c6:	9201      	str	r2, [sp, #4]
 80107c8:	4293      	cmp	r3, r2
 80107ca:	d80c      	bhi.n	80107e6 <__multiply+0x7a>
 80107cc:	2e00      	cmp	r6, #0
 80107ce:	dd03      	ble.n	80107d8 <__multiply+0x6c>
 80107d0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d05d      	beq.n	8010894 <__multiply+0x128>
 80107d8:	6106      	str	r6, [r0, #16]
 80107da:	b003      	add	sp, #12
 80107dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107e0:	f843 2b04 	str.w	r2, [r3], #4
 80107e4:	e7e3      	b.n	80107ae <__multiply+0x42>
 80107e6:	f8b2 b000 	ldrh.w	fp, [r2]
 80107ea:	f1bb 0f00 	cmp.w	fp, #0
 80107ee:	d023      	beq.n	8010838 <__multiply+0xcc>
 80107f0:	4689      	mov	r9, r1
 80107f2:	46ac      	mov	ip, r5
 80107f4:	f04f 0800 	mov.w	r8, #0
 80107f8:	f859 4b04 	ldr.w	r4, [r9], #4
 80107fc:	f8dc a000 	ldr.w	sl, [ip]
 8010800:	b2a3      	uxth	r3, r4
 8010802:	fa1f fa8a 	uxth.w	sl, sl
 8010806:	fb0b a303 	mla	r3, fp, r3, sl
 801080a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 801080e:	f8dc 4000 	ldr.w	r4, [ip]
 8010812:	4443      	add	r3, r8
 8010814:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010818:	fb0b 840a 	mla	r4, fp, sl, r8
 801081c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010820:	46e2      	mov	sl, ip
 8010822:	b29b      	uxth	r3, r3
 8010824:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010828:	454f      	cmp	r7, r9
 801082a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 801082e:	f84a 3b04 	str.w	r3, [sl], #4
 8010832:	d82b      	bhi.n	801088c <__multiply+0x120>
 8010834:	f8cc 8004 	str.w	r8, [ip, #4]
 8010838:	9b01      	ldr	r3, [sp, #4]
 801083a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801083e:	3204      	adds	r2, #4
 8010840:	f1ba 0f00 	cmp.w	sl, #0
 8010844:	d020      	beq.n	8010888 <__multiply+0x11c>
 8010846:	682b      	ldr	r3, [r5, #0]
 8010848:	4689      	mov	r9, r1
 801084a:	46a8      	mov	r8, r5
 801084c:	f04f 0b00 	mov.w	fp, #0
 8010850:	f8b9 c000 	ldrh.w	ip, [r9]
 8010854:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010858:	fb0a 440c 	mla	r4, sl, ip, r4
 801085c:	445c      	add	r4, fp
 801085e:	46c4      	mov	ip, r8
 8010860:	b29b      	uxth	r3, r3
 8010862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010866:	f84c 3b04 	str.w	r3, [ip], #4
 801086a:	f859 3b04 	ldr.w	r3, [r9], #4
 801086e:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010872:	0c1b      	lsrs	r3, r3, #16
 8010874:	fb0a b303 	mla	r3, sl, r3, fp
 8010878:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801087c:	454f      	cmp	r7, r9
 801087e:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010882:	d805      	bhi.n	8010890 <__multiply+0x124>
 8010884:	f8c8 3004 	str.w	r3, [r8, #4]
 8010888:	3504      	adds	r5, #4
 801088a:	e79b      	b.n	80107c4 <__multiply+0x58>
 801088c:	46d4      	mov	ip, sl
 801088e:	e7b3      	b.n	80107f8 <__multiply+0x8c>
 8010890:	46e0      	mov	r8, ip
 8010892:	e7dd      	b.n	8010850 <__multiply+0xe4>
 8010894:	3e01      	subs	r6, #1
 8010896:	e799      	b.n	80107cc <__multiply+0x60>

08010898 <__pow5mult>:
 8010898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801089c:	4615      	mov	r5, r2
 801089e:	f012 0203 	ands.w	r2, r2, #3
 80108a2:	4606      	mov	r6, r0
 80108a4:	460f      	mov	r7, r1
 80108a6:	d007      	beq.n	80108b8 <__pow5mult+0x20>
 80108a8:	3a01      	subs	r2, #1
 80108aa:	4c21      	ldr	r4, [pc, #132]	; (8010930 <__pow5mult+0x98>)
 80108ac:	2300      	movs	r3, #0
 80108ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80108b2:	f7ff fe8b 	bl	80105cc <__multadd>
 80108b6:	4607      	mov	r7, r0
 80108b8:	10ad      	asrs	r5, r5, #2
 80108ba:	d035      	beq.n	8010928 <__pow5mult+0x90>
 80108bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80108be:	b93c      	cbnz	r4, 80108d0 <__pow5mult+0x38>
 80108c0:	2010      	movs	r0, #16
 80108c2:	f7ff fe13 	bl	80104ec <malloc>
 80108c6:	6270      	str	r0, [r6, #36]	; 0x24
 80108c8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108cc:	6004      	str	r4, [r0, #0]
 80108ce:	60c4      	str	r4, [r0, #12]
 80108d0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80108d4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108d8:	b94c      	cbnz	r4, 80108ee <__pow5mult+0x56>
 80108da:	f240 2171 	movw	r1, #625	; 0x271
 80108de:	4630      	mov	r0, r6
 80108e0:	f7ff ff3b 	bl	801075a <__i2b>
 80108e4:	2300      	movs	r3, #0
 80108e6:	f8c8 0008 	str.w	r0, [r8, #8]
 80108ea:	4604      	mov	r4, r0
 80108ec:	6003      	str	r3, [r0, #0]
 80108ee:	f04f 0800 	mov.w	r8, #0
 80108f2:	07eb      	lsls	r3, r5, #31
 80108f4:	d50a      	bpl.n	801090c <__pow5mult+0x74>
 80108f6:	4639      	mov	r1, r7
 80108f8:	4622      	mov	r2, r4
 80108fa:	4630      	mov	r0, r6
 80108fc:	f7ff ff36 	bl	801076c <__multiply>
 8010900:	4639      	mov	r1, r7
 8010902:	4681      	mov	r9, r0
 8010904:	4630      	mov	r0, r6
 8010906:	f7ff fe4a 	bl	801059e <_Bfree>
 801090a:	464f      	mov	r7, r9
 801090c:	106d      	asrs	r5, r5, #1
 801090e:	d00b      	beq.n	8010928 <__pow5mult+0x90>
 8010910:	6820      	ldr	r0, [r4, #0]
 8010912:	b938      	cbnz	r0, 8010924 <__pow5mult+0x8c>
 8010914:	4622      	mov	r2, r4
 8010916:	4621      	mov	r1, r4
 8010918:	4630      	mov	r0, r6
 801091a:	f7ff ff27 	bl	801076c <__multiply>
 801091e:	6020      	str	r0, [r4, #0]
 8010920:	f8c0 8000 	str.w	r8, [r0]
 8010924:	4604      	mov	r4, r0
 8010926:	e7e4      	b.n	80108f2 <__pow5mult+0x5a>
 8010928:	4638      	mov	r0, r7
 801092a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801092e:	bf00      	nop
 8010930:	080129a0 	.word	0x080129a0

08010934 <__lshift>:
 8010934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010938:	460c      	mov	r4, r1
 801093a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801093e:	6923      	ldr	r3, [r4, #16]
 8010940:	6849      	ldr	r1, [r1, #4]
 8010942:	eb0a 0903 	add.w	r9, sl, r3
 8010946:	68a3      	ldr	r3, [r4, #8]
 8010948:	4607      	mov	r7, r0
 801094a:	4616      	mov	r6, r2
 801094c:	f109 0501 	add.w	r5, r9, #1
 8010950:	42ab      	cmp	r3, r5
 8010952:	db32      	blt.n	80109ba <__lshift+0x86>
 8010954:	4638      	mov	r0, r7
 8010956:	f7ff fdee 	bl	8010536 <_Balloc>
 801095a:	2300      	movs	r3, #0
 801095c:	4680      	mov	r8, r0
 801095e:	f100 0114 	add.w	r1, r0, #20
 8010962:	461a      	mov	r2, r3
 8010964:	4553      	cmp	r3, sl
 8010966:	db2b      	blt.n	80109c0 <__lshift+0x8c>
 8010968:	6920      	ldr	r0, [r4, #16]
 801096a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801096e:	f104 0314 	add.w	r3, r4, #20
 8010972:	f016 021f 	ands.w	r2, r6, #31
 8010976:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801097a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801097e:	d025      	beq.n	80109cc <__lshift+0x98>
 8010980:	f1c2 0e20 	rsb	lr, r2, #32
 8010984:	2000      	movs	r0, #0
 8010986:	681e      	ldr	r6, [r3, #0]
 8010988:	468a      	mov	sl, r1
 801098a:	4096      	lsls	r6, r2
 801098c:	4330      	orrs	r0, r6
 801098e:	f84a 0b04 	str.w	r0, [sl], #4
 8010992:	f853 0b04 	ldr.w	r0, [r3], #4
 8010996:	459c      	cmp	ip, r3
 8010998:	fa20 f00e 	lsr.w	r0, r0, lr
 801099c:	d814      	bhi.n	80109c8 <__lshift+0x94>
 801099e:	6048      	str	r0, [r1, #4]
 80109a0:	b108      	cbz	r0, 80109a6 <__lshift+0x72>
 80109a2:	f109 0502 	add.w	r5, r9, #2
 80109a6:	3d01      	subs	r5, #1
 80109a8:	4638      	mov	r0, r7
 80109aa:	f8c8 5010 	str.w	r5, [r8, #16]
 80109ae:	4621      	mov	r1, r4
 80109b0:	f7ff fdf5 	bl	801059e <_Bfree>
 80109b4:	4640      	mov	r0, r8
 80109b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109ba:	3101      	adds	r1, #1
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	e7c7      	b.n	8010950 <__lshift+0x1c>
 80109c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80109c4:	3301      	adds	r3, #1
 80109c6:	e7cd      	b.n	8010964 <__lshift+0x30>
 80109c8:	4651      	mov	r1, sl
 80109ca:	e7dc      	b.n	8010986 <__lshift+0x52>
 80109cc:	3904      	subs	r1, #4
 80109ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80109d2:	f841 2f04 	str.w	r2, [r1, #4]!
 80109d6:	459c      	cmp	ip, r3
 80109d8:	d8f9      	bhi.n	80109ce <__lshift+0x9a>
 80109da:	e7e4      	b.n	80109a6 <__lshift+0x72>

080109dc <__mcmp>:
 80109dc:	6903      	ldr	r3, [r0, #16]
 80109de:	690a      	ldr	r2, [r1, #16]
 80109e0:	1a9b      	subs	r3, r3, r2
 80109e2:	b530      	push	{r4, r5, lr}
 80109e4:	d10c      	bne.n	8010a00 <__mcmp+0x24>
 80109e6:	0092      	lsls	r2, r2, #2
 80109e8:	3014      	adds	r0, #20
 80109ea:	3114      	adds	r1, #20
 80109ec:	1884      	adds	r4, r0, r2
 80109ee:	4411      	add	r1, r2
 80109f0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80109f4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80109f8:	4295      	cmp	r5, r2
 80109fa:	d003      	beq.n	8010a04 <__mcmp+0x28>
 80109fc:	d305      	bcc.n	8010a0a <__mcmp+0x2e>
 80109fe:	2301      	movs	r3, #1
 8010a00:	4618      	mov	r0, r3
 8010a02:	bd30      	pop	{r4, r5, pc}
 8010a04:	42a0      	cmp	r0, r4
 8010a06:	d3f3      	bcc.n	80109f0 <__mcmp+0x14>
 8010a08:	e7fa      	b.n	8010a00 <__mcmp+0x24>
 8010a0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010a0e:	e7f7      	b.n	8010a00 <__mcmp+0x24>

08010a10 <__mdiff>:
 8010a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a14:	460d      	mov	r5, r1
 8010a16:	4607      	mov	r7, r0
 8010a18:	4611      	mov	r1, r2
 8010a1a:	4628      	mov	r0, r5
 8010a1c:	4614      	mov	r4, r2
 8010a1e:	f7ff ffdd 	bl	80109dc <__mcmp>
 8010a22:	1e06      	subs	r6, r0, #0
 8010a24:	d108      	bne.n	8010a38 <__mdiff+0x28>
 8010a26:	4631      	mov	r1, r6
 8010a28:	4638      	mov	r0, r7
 8010a2a:	f7ff fd84 	bl	8010536 <_Balloc>
 8010a2e:	2301      	movs	r3, #1
 8010a30:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010a34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010a38:	bfa4      	itt	ge
 8010a3a:	4623      	movge	r3, r4
 8010a3c:	462c      	movge	r4, r5
 8010a3e:	4638      	mov	r0, r7
 8010a40:	6861      	ldr	r1, [r4, #4]
 8010a42:	bfa6      	itte	ge
 8010a44:	461d      	movge	r5, r3
 8010a46:	2600      	movge	r6, #0
 8010a48:	2601      	movlt	r6, #1
 8010a4a:	f7ff fd74 	bl	8010536 <_Balloc>
 8010a4e:	692b      	ldr	r3, [r5, #16]
 8010a50:	60c6      	str	r6, [r0, #12]
 8010a52:	6926      	ldr	r6, [r4, #16]
 8010a54:	f105 0914 	add.w	r9, r5, #20
 8010a58:	f104 0214 	add.w	r2, r4, #20
 8010a5c:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010a60:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010a64:	f100 0514 	add.w	r5, r0, #20
 8010a68:	f04f 0e00 	mov.w	lr, #0
 8010a6c:	f852 ab04 	ldr.w	sl, [r2], #4
 8010a70:	f859 4b04 	ldr.w	r4, [r9], #4
 8010a74:	fa1e f18a 	uxtah	r1, lr, sl
 8010a78:	b2a3      	uxth	r3, r4
 8010a7a:	1ac9      	subs	r1, r1, r3
 8010a7c:	0c23      	lsrs	r3, r4, #16
 8010a7e:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010a82:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8010a86:	b289      	uxth	r1, r1
 8010a88:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010a8c:	45c8      	cmp	r8, r9
 8010a8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010a92:	4694      	mov	ip, r2
 8010a94:	f845 3b04 	str.w	r3, [r5], #4
 8010a98:	d8e8      	bhi.n	8010a6c <__mdiff+0x5c>
 8010a9a:	45bc      	cmp	ip, r7
 8010a9c:	d304      	bcc.n	8010aa8 <__mdiff+0x98>
 8010a9e:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010aa2:	b183      	cbz	r3, 8010ac6 <__mdiff+0xb6>
 8010aa4:	6106      	str	r6, [r0, #16]
 8010aa6:	e7c5      	b.n	8010a34 <__mdiff+0x24>
 8010aa8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010aac:	fa1e f381 	uxtah	r3, lr, r1
 8010ab0:	141a      	asrs	r2, r3, #16
 8010ab2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010ab6:	b29b      	uxth	r3, r3
 8010ab8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010abc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010ac0:	f845 3b04 	str.w	r3, [r5], #4
 8010ac4:	e7e9      	b.n	8010a9a <__mdiff+0x8a>
 8010ac6:	3e01      	subs	r6, #1
 8010ac8:	e7e9      	b.n	8010a9e <__mdiff+0x8e>
	...

08010acc <__ulp>:
 8010acc:	4b12      	ldr	r3, [pc, #72]	; (8010b18 <__ulp+0x4c>)
 8010ace:	ee10 2a90 	vmov	r2, s1
 8010ad2:	401a      	ands	r2, r3
 8010ad4:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	dd04      	ble.n	8010ae6 <__ulp+0x1a>
 8010adc:	2000      	movs	r0, #0
 8010ade:	4619      	mov	r1, r3
 8010ae0:	ec41 0b10 	vmov	d0, r0, r1
 8010ae4:	4770      	bx	lr
 8010ae6:	425b      	negs	r3, r3
 8010ae8:	151b      	asrs	r3, r3, #20
 8010aea:	2b13      	cmp	r3, #19
 8010aec:	f04f 0000 	mov.w	r0, #0
 8010af0:	f04f 0100 	mov.w	r1, #0
 8010af4:	dc04      	bgt.n	8010b00 <__ulp+0x34>
 8010af6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8010afa:	fa42 f103 	asr.w	r1, r2, r3
 8010afe:	e7ef      	b.n	8010ae0 <__ulp+0x14>
 8010b00:	3b14      	subs	r3, #20
 8010b02:	2b1e      	cmp	r3, #30
 8010b04:	f04f 0201 	mov.w	r2, #1
 8010b08:	bfda      	itte	le
 8010b0a:	f1c3 031f 	rsble	r3, r3, #31
 8010b0e:	fa02 f303 	lslle.w	r3, r2, r3
 8010b12:	4613      	movgt	r3, r2
 8010b14:	4618      	mov	r0, r3
 8010b16:	e7e3      	b.n	8010ae0 <__ulp+0x14>
 8010b18:	7ff00000 	.word	0x7ff00000

08010b1c <__b2d>:
 8010b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b1e:	6905      	ldr	r5, [r0, #16]
 8010b20:	f100 0714 	add.w	r7, r0, #20
 8010b24:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010b28:	1f2e      	subs	r6, r5, #4
 8010b2a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f7ff fdc5 	bl	80106be <__hi0bits>
 8010b34:	f1c0 0320 	rsb	r3, r0, #32
 8010b38:	280a      	cmp	r0, #10
 8010b3a:	600b      	str	r3, [r1, #0]
 8010b3c:	f8df c074 	ldr.w	ip, [pc, #116]	; 8010bb4 <__b2d+0x98>
 8010b40:	dc14      	bgt.n	8010b6c <__b2d+0x50>
 8010b42:	f1c0 0e0b 	rsb	lr, r0, #11
 8010b46:	fa24 f10e 	lsr.w	r1, r4, lr
 8010b4a:	42b7      	cmp	r7, r6
 8010b4c:	ea41 030c 	orr.w	r3, r1, ip
 8010b50:	bf34      	ite	cc
 8010b52:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b56:	2100      	movcs	r1, #0
 8010b58:	3015      	adds	r0, #21
 8010b5a:	fa04 f000 	lsl.w	r0, r4, r0
 8010b5e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010b62:	ea40 0201 	orr.w	r2, r0, r1
 8010b66:	ec43 2b10 	vmov	d0, r2, r3
 8010b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b6c:	42b7      	cmp	r7, r6
 8010b6e:	bf3a      	itte	cc
 8010b70:	f1a5 0608 	subcc.w	r6, r5, #8
 8010b74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010b78:	2100      	movcs	r1, #0
 8010b7a:	380b      	subs	r0, #11
 8010b7c:	d015      	beq.n	8010baa <__b2d+0x8e>
 8010b7e:	4084      	lsls	r4, r0
 8010b80:	f1c0 0520 	rsb	r5, r0, #32
 8010b84:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010b88:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010b8c:	42be      	cmp	r6, r7
 8010b8e:	fa21 fc05 	lsr.w	ip, r1, r5
 8010b92:	ea44 030c 	orr.w	r3, r4, ip
 8010b96:	bf8c      	ite	hi
 8010b98:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010b9c:	2400      	movls	r4, #0
 8010b9e:	fa01 f000 	lsl.w	r0, r1, r0
 8010ba2:	40ec      	lsrs	r4, r5
 8010ba4:	ea40 0204 	orr.w	r2, r0, r4
 8010ba8:	e7dd      	b.n	8010b66 <__b2d+0x4a>
 8010baa:	ea44 030c 	orr.w	r3, r4, ip
 8010bae:	460a      	mov	r2, r1
 8010bb0:	e7d9      	b.n	8010b66 <__b2d+0x4a>
 8010bb2:	bf00      	nop
 8010bb4:	3ff00000 	.word	0x3ff00000

08010bb8 <__d2b>:
 8010bb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010bbc:	460e      	mov	r6, r1
 8010bbe:	2101      	movs	r1, #1
 8010bc0:	ec59 8b10 	vmov	r8, r9, d0
 8010bc4:	4615      	mov	r5, r2
 8010bc6:	f7ff fcb6 	bl	8010536 <_Balloc>
 8010bca:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010bce:	4607      	mov	r7, r0
 8010bd0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010bd4:	bb34      	cbnz	r4, 8010c24 <__d2b+0x6c>
 8010bd6:	9301      	str	r3, [sp, #4]
 8010bd8:	f1b8 0300 	subs.w	r3, r8, #0
 8010bdc:	d027      	beq.n	8010c2e <__d2b+0x76>
 8010bde:	a802      	add	r0, sp, #8
 8010be0:	f840 3d08 	str.w	r3, [r0, #-8]!
 8010be4:	f7ff fd8a 	bl	80106fc <__lo0bits>
 8010be8:	9900      	ldr	r1, [sp, #0]
 8010bea:	b1f0      	cbz	r0, 8010c2a <__d2b+0x72>
 8010bec:	9a01      	ldr	r2, [sp, #4]
 8010bee:	f1c0 0320 	rsb	r3, r0, #32
 8010bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8010bf6:	430b      	orrs	r3, r1
 8010bf8:	40c2      	lsrs	r2, r0
 8010bfa:	617b      	str	r3, [r7, #20]
 8010bfc:	9201      	str	r2, [sp, #4]
 8010bfe:	9b01      	ldr	r3, [sp, #4]
 8010c00:	61bb      	str	r3, [r7, #24]
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	bf14      	ite	ne
 8010c06:	2102      	movne	r1, #2
 8010c08:	2101      	moveq	r1, #1
 8010c0a:	6139      	str	r1, [r7, #16]
 8010c0c:	b1c4      	cbz	r4, 8010c40 <__d2b+0x88>
 8010c0e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8010c12:	4404      	add	r4, r0
 8010c14:	6034      	str	r4, [r6, #0]
 8010c16:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010c1a:	6028      	str	r0, [r5, #0]
 8010c1c:	4638      	mov	r0, r7
 8010c1e:	b003      	add	sp, #12
 8010c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010c24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010c28:	e7d5      	b.n	8010bd6 <__d2b+0x1e>
 8010c2a:	6179      	str	r1, [r7, #20]
 8010c2c:	e7e7      	b.n	8010bfe <__d2b+0x46>
 8010c2e:	a801      	add	r0, sp, #4
 8010c30:	f7ff fd64 	bl	80106fc <__lo0bits>
 8010c34:	9b01      	ldr	r3, [sp, #4]
 8010c36:	617b      	str	r3, [r7, #20]
 8010c38:	2101      	movs	r1, #1
 8010c3a:	6139      	str	r1, [r7, #16]
 8010c3c:	3020      	adds	r0, #32
 8010c3e:	e7e5      	b.n	8010c0c <__d2b+0x54>
 8010c40:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010c44:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010c48:	6030      	str	r0, [r6, #0]
 8010c4a:	6918      	ldr	r0, [r3, #16]
 8010c4c:	f7ff fd37 	bl	80106be <__hi0bits>
 8010c50:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010c54:	e7e1      	b.n	8010c1a <__d2b+0x62>

08010c56 <__ratio>:
 8010c56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c5a:	4688      	mov	r8, r1
 8010c5c:	4669      	mov	r1, sp
 8010c5e:	4681      	mov	r9, r0
 8010c60:	f7ff ff5c 	bl	8010b1c <__b2d>
 8010c64:	a901      	add	r1, sp, #4
 8010c66:	4640      	mov	r0, r8
 8010c68:	ec57 6b10 	vmov	r6, r7, d0
 8010c6c:	f7ff ff56 	bl	8010b1c <__b2d>
 8010c70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c74:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010c78:	eba3 0c02 	sub.w	ip, r3, r2
 8010c7c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c80:	1a9b      	subs	r3, r3, r2
 8010c82:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010c86:	ec5b ab10 	vmov	sl, fp, d0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	bfce      	itee	gt
 8010c8e:	463a      	movgt	r2, r7
 8010c90:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010c94:	465a      	movle	r2, fp
 8010c96:	4659      	mov	r1, fp
 8010c98:	463d      	mov	r5, r7
 8010c9a:	bfd4      	ite	le
 8010c9c:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010ca0:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010ca4:	4630      	mov	r0, r6
 8010ca6:	ee10 2a10 	vmov	r2, s0
 8010caa:	460b      	mov	r3, r1
 8010cac:	4629      	mov	r1, r5
 8010cae:	f7ef fdcd 	bl	800084c <__aeabi_ddiv>
 8010cb2:	ec41 0b10 	vmov	d0, r0, r1
 8010cb6:	b003      	add	sp, #12
 8010cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010cbc <__copybits>:
 8010cbc:	3901      	subs	r1, #1
 8010cbe:	b510      	push	{r4, lr}
 8010cc0:	1149      	asrs	r1, r1, #5
 8010cc2:	6914      	ldr	r4, [r2, #16]
 8010cc4:	3101      	adds	r1, #1
 8010cc6:	f102 0314 	add.w	r3, r2, #20
 8010cca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010cce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010cd2:	42a3      	cmp	r3, r4
 8010cd4:	4602      	mov	r2, r0
 8010cd6:	d303      	bcc.n	8010ce0 <__copybits+0x24>
 8010cd8:	2300      	movs	r3, #0
 8010cda:	428a      	cmp	r2, r1
 8010cdc:	d305      	bcc.n	8010cea <__copybits+0x2e>
 8010cde:	bd10      	pop	{r4, pc}
 8010ce0:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ce4:	f840 2b04 	str.w	r2, [r0], #4
 8010ce8:	e7f3      	b.n	8010cd2 <__copybits+0x16>
 8010cea:	f842 3b04 	str.w	r3, [r2], #4
 8010cee:	e7f4      	b.n	8010cda <__copybits+0x1e>

08010cf0 <__any_on>:
 8010cf0:	f100 0214 	add.w	r2, r0, #20
 8010cf4:	6900      	ldr	r0, [r0, #16]
 8010cf6:	114b      	asrs	r3, r1, #5
 8010cf8:	4298      	cmp	r0, r3
 8010cfa:	b510      	push	{r4, lr}
 8010cfc:	db11      	blt.n	8010d22 <__any_on+0x32>
 8010cfe:	dd0a      	ble.n	8010d16 <__any_on+0x26>
 8010d00:	f011 011f 	ands.w	r1, r1, #31
 8010d04:	d007      	beq.n	8010d16 <__any_on+0x26>
 8010d06:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010d0a:	fa24 f001 	lsr.w	r0, r4, r1
 8010d0e:	fa00 f101 	lsl.w	r1, r0, r1
 8010d12:	428c      	cmp	r4, r1
 8010d14:	d10b      	bne.n	8010d2e <__any_on+0x3e>
 8010d16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010d1a:	4293      	cmp	r3, r2
 8010d1c:	d803      	bhi.n	8010d26 <__any_on+0x36>
 8010d1e:	2000      	movs	r0, #0
 8010d20:	bd10      	pop	{r4, pc}
 8010d22:	4603      	mov	r3, r0
 8010d24:	e7f7      	b.n	8010d16 <__any_on+0x26>
 8010d26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d2a:	2900      	cmp	r1, #0
 8010d2c:	d0f5      	beq.n	8010d1a <__any_on+0x2a>
 8010d2e:	2001      	movs	r0, #1
 8010d30:	e7f6      	b.n	8010d20 <__any_on+0x30>

08010d32 <_calloc_r>:
 8010d32:	b538      	push	{r3, r4, r5, lr}
 8010d34:	fb02 f401 	mul.w	r4, r2, r1
 8010d38:	4621      	mov	r1, r4
 8010d3a:	f000 f857 	bl	8010dec <_malloc_r>
 8010d3e:	4605      	mov	r5, r0
 8010d40:	b118      	cbz	r0, 8010d4a <_calloc_r+0x18>
 8010d42:	4622      	mov	r2, r4
 8010d44:	2100      	movs	r1, #0
 8010d46:	f7fc fcf1 	bl	800d72c <memset>
 8010d4a:	4628      	mov	r0, r5
 8010d4c:	bd38      	pop	{r3, r4, r5, pc}
	...

08010d50 <_free_r>:
 8010d50:	b538      	push	{r3, r4, r5, lr}
 8010d52:	4605      	mov	r5, r0
 8010d54:	2900      	cmp	r1, #0
 8010d56:	d045      	beq.n	8010de4 <_free_r+0x94>
 8010d58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d5c:	1f0c      	subs	r4, r1, #4
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	bfb8      	it	lt
 8010d62:	18e4      	addlt	r4, r4, r3
 8010d64:	f000 fa36 	bl	80111d4 <__malloc_lock>
 8010d68:	4a1f      	ldr	r2, [pc, #124]	; (8010de8 <_free_r+0x98>)
 8010d6a:	6813      	ldr	r3, [r2, #0]
 8010d6c:	4610      	mov	r0, r2
 8010d6e:	b933      	cbnz	r3, 8010d7e <_free_r+0x2e>
 8010d70:	6063      	str	r3, [r4, #4]
 8010d72:	6014      	str	r4, [r2, #0]
 8010d74:	4628      	mov	r0, r5
 8010d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d7a:	f000 ba2c 	b.w	80111d6 <__malloc_unlock>
 8010d7e:	42a3      	cmp	r3, r4
 8010d80:	d90c      	bls.n	8010d9c <_free_r+0x4c>
 8010d82:	6821      	ldr	r1, [r4, #0]
 8010d84:	1862      	adds	r2, r4, r1
 8010d86:	4293      	cmp	r3, r2
 8010d88:	bf04      	itt	eq
 8010d8a:	681a      	ldreq	r2, [r3, #0]
 8010d8c:	685b      	ldreq	r3, [r3, #4]
 8010d8e:	6063      	str	r3, [r4, #4]
 8010d90:	bf04      	itt	eq
 8010d92:	1852      	addeq	r2, r2, r1
 8010d94:	6022      	streq	r2, [r4, #0]
 8010d96:	6004      	str	r4, [r0, #0]
 8010d98:	e7ec      	b.n	8010d74 <_free_r+0x24>
 8010d9a:	4613      	mov	r3, r2
 8010d9c:	685a      	ldr	r2, [r3, #4]
 8010d9e:	b10a      	cbz	r2, 8010da4 <_free_r+0x54>
 8010da0:	42a2      	cmp	r2, r4
 8010da2:	d9fa      	bls.n	8010d9a <_free_r+0x4a>
 8010da4:	6819      	ldr	r1, [r3, #0]
 8010da6:	1858      	adds	r0, r3, r1
 8010da8:	42a0      	cmp	r0, r4
 8010daa:	d10b      	bne.n	8010dc4 <_free_r+0x74>
 8010dac:	6820      	ldr	r0, [r4, #0]
 8010dae:	4401      	add	r1, r0
 8010db0:	1858      	adds	r0, r3, r1
 8010db2:	4282      	cmp	r2, r0
 8010db4:	6019      	str	r1, [r3, #0]
 8010db6:	d1dd      	bne.n	8010d74 <_free_r+0x24>
 8010db8:	6810      	ldr	r0, [r2, #0]
 8010dba:	6852      	ldr	r2, [r2, #4]
 8010dbc:	605a      	str	r2, [r3, #4]
 8010dbe:	4401      	add	r1, r0
 8010dc0:	6019      	str	r1, [r3, #0]
 8010dc2:	e7d7      	b.n	8010d74 <_free_r+0x24>
 8010dc4:	d902      	bls.n	8010dcc <_free_r+0x7c>
 8010dc6:	230c      	movs	r3, #12
 8010dc8:	602b      	str	r3, [r5, #0]
 8010dca:	e7d3      	b.n	8010d74 <_free_r+0x24>
 8010dcc:	6820      	ldr	r0, [r4, #0]
 8010dce:	1821      	adds	r1, r4, r0
 8010dd0:	428a      	cmp	r2, r1
 8010dd2:	bf04      	itt	eq
 8010dd4:	6811      	ldreq	r1, [r2, #0]
 8010dd6:	6852      	ldreq	r2, [r2, #4]
 8010dd8:	6062      	str	r2, [r4, #4]
 8010dda:	bf04      	itt	eq
 8010ddc:	1809      	addeq	r1, r1, r0
 8010dde:	6021      	streq	r1, [r4, #0]
 8010de0:	605c      	str	r4, [r3, #4]
 8010de2:	e7c7      	b.n	8010d74 <_free_r+0x24>
 8010de4:	bd38      	pop	{r3, r4, r5, pc}
 8010de6:	bf00      	nop
 8010de8:	200002dc 	.word	0x200002dc

08010dec <_malloc_r>:
 8010dec:	b570      	push	{r4, r5, r6, lr}
 8010dee:	1ccd      	adds	r5, r1, #3
 8010df0:	f025 0503 	bic.w	r5, r5, #3
 8010df4:	3508      	adds	r5, #8
 8010df6:	2d0c      	cmp	r5, #12
 8010df8:	bf38      	it	cc
 8010dfa:	250c      	movcc	r5, #12
 8010dfc:	2d00      	cmp	r5, #0
 8010dfe:	4606      	mov	r6, r0
 8010e00:	db01      	blt.n	8010e06 <_malloc_r+0x1a>
 8010e02:	42a9      	cmp	r1, r5
 8010e04:	d903      	bls.n	8010e0e <_malloc_r+0x22>
 8010e06:	230c      	movs	r3, #12
 8010e08:	6033      	str	r3, [r6, #0]
 8010e0a:	2000      	movs	r0, #0
 8010e0c:	bd70      	pop	{r4, r5, r6, pc}
 8010e0e:	f000 f9e1 	bl	80111d4 <__malloc_lock>
 8010e12:	4a21      	ldr	r2, [pc, #132]	; (8010e98 <_malloc_r+0xac>)
 8010e14:	6814      	ldr	r4, [r2, #0]
 8010e16:	4621      	mov	r1, r4
 8010e18:	b991      	cbnz	r1, 8010e40 <_malloc_r+0x54>
 8010e1a:	4c20      	ldr	r4, [pc, #128]	; (8010e9c <_malloc_r+0xb0>)
 8010e1c:	6823      	ldr	r3, [r4, #0]
 8010e1e:	b91b      	cbnz	r3, 8010e28 <_malloc_r+0x3c>
 8010e20:	4630      	mov	r0, r6
 8010e22:	f000 f98f 	bl	8011144 <_sbrk_r>
 8010e26:	6020      	str	r0, [r4, #0]
 8010e28:	4629      	mov	r1, r5
 8010e2a:	4630      	mov	r0, r6
 8010e2c:	f000 f98a 	bl	8011144 <_sbrk_r>
 8010e30:	1c43      	adds	r3, r0, #1
 8010e32:	d124      	bne.n	8010e7e <_malloc_r+0x92>
 8010e34:	230c      	movs	r3, #12
 8010e36:	6033      	str	r3, [r6, #0]
 8010e38:	4630      	mov	r0, r6
 8010e3a:	f000 f9cc 	bl	80111d6 <__malloc_unlock>
 8010e3e:	e7e4      	b.n	8010e0a <_malloc_r+0x1e>
 8010e40:	680b      	ldr	r3, [r1, #0]
 8010e42:	1b5b      	subs	r3, r3, r5
 8010e44:	d418      	bmi.n	8010e78 <_malloc_r+0x8c>
 8010e46:	2b0b      	cmp	r3, #11
 8010e48:	d90f      	bls.n	8010e6a <_malloc_r+0x7e>
 8010e4a:	600b      	str	r3, [r1, #0]
 8010e4c:	50cd      	str	r5, [r1, r3]
 8010e4e:	18cc      	adds	r4, r1, r3
 8010e50:	4630      	mov	r0, r6
 8010e52:	f000 f9c0 	bl	80111d6 <__malloc_unlock>
 8010e56:	f104 000b 	add.w	r0, r4, #11
 8010e5a:	1d23      	adds	r3, r4, #4
 8010e5c:	f020 0007 	bic.w	r0, r0, #7
 8010e60:	1ac3      	subs	r3, r0, r3
 8010e62:	d0d3      	beq.n	8010e0c <_malloc_r+0x20>
 8010e64:	425a      	negs	r2, r3
 8010e66:	50e2      	str	r2, [r4, r3]
 8010e68:	e7d0      	b.n	8010e0c <_malloc_r+0x20>
 8010e6a:	428c      	cmp	r4, r1
 8010e6c:	684b      	ldr	r3, [r1, #4]
 8010e6e:	bf16      	itet	ne
 8010e70:	6063      	strne	r3, [r4, #4]
 8010e72:	6013      	streq	r3, [r2, #0]
 8010e74:	460c      	movne	r4, r1
 8010e76:	e7eb      	b.n	8010e50 <_malloc_r+0x64>
 8010e78:	460c      	mov	r4, r1
 8010e7a:	6849      	ldr	r1, [r1, #4]
 8010e7c:	e7cc      	b.n	8010e18 <_malloc_r+0x2c>
 8010e7e:	1cc4      	adds	r4, r0, #3
 8010e80:	f024 0403 	bic.w	r4, r4, #3
 8010e84:	42a0      	cmp	r0, r4
 8010e86:	d005      	beq.n	8010e94 <_malloc_r+0xa8>
 8010e88:	1a21      	subs	r1, r4, r0
 8010e8a:	4630      	mov	r0, r6
 8010e8c:	f000 f95a 	bl	8011144 <_sbrk_r>
 8010e90:	3001      	adds	r0, #1
 8010e92:	d0cf      	beq.n	8010e34 <_malloc_r+0x48>
 8010e94:	6025      	str	r5, [r4, #0]
 8010e96:	e7db      	b.n	8010e50 <_malloc_r+0x64>
 8010e98:	200002dc 	.word	0x200002dc
 8010e9c:	200002e0 	.word	0x200002e0

08010ea0 <__ssputs_r>:
 8010ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010ea4:	688e      	ldr	r6, [r1, #8]
 8010ea6:	429e      	cmp	r6, r3
 8010ea8:	4682      	mov	sl, r0
 8010eaa:	460c      	mov	r4, r1
 8010eac:	4690      	mov	r8, r2
 8010eae:	4699      	mov	r9, r3
 8010eb0:	d837      	bhi.n	8010f22 <__ssputs_r+0x82>
 8010eb2:	898a      	ldrh	r2, [r1, #12]
 8010eb4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010eb8:	d031      	beq.n	8010f1e <__ssputs_r+0x7e>
 8010eba:	6825      	ldr	r5, [r4, #0]
 8010ebc:	6909      	ldr	r1, [r1, #16]
 8010ebe:	1a6f      	subs	r7, r5, r1
 8010ec0:	6965      	ldr	r5, [r4, #20]
 8010ec2:	2302      	movs	r3, #2
 8010ec4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010ec8:	fb95 f5f3 	sdiv	r5, r5, r3
 8010ecc:	f109 0301 	add.w	r3, r9, #1
 8010ed0:	443b      	add	r3, r7
 8010ed2:	429d      	cmp	r5, r3
 8010ed4:	bf38      	it	cc
 8010ed6:	461d      	movcc	r5, r3
 8010ed8:	0553      	lsls	r3, r2, #21
 8010eda:	d530      	bpl.n	8010f3e <__ssputs_r+0x9e>
 8010edc:	4629      	mov	r1, r5
 8010ede:	f7ff ff85 	bl	8010dec <_malloc_r>
 8010ee2:	4606      	mov	r6, r0
 8010ee4:	b950      	cbnz	r0, 8010efc <__ssputs_r+0x5c>
 8010ee6:	230c      	movs	r3, #12
 8010ee8:	f8ca 3000 	str.w	r3, [sl]
 8010eec:	89a3      	ldrh	r3, [r4, #12]
 8010eee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ef2:	81a3      	strh	r3, [r4, #12]
 8010ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010efc:	463a      	mov	r2, r7
 8010efe:	6921      	ldr	r1, [r4, #16]
 8010f00:	f7ff fb0e 	bl	8010520 <memcpy>
 8010f04:	89a3      	ldrh	r3, [r4, #12]
 8010f06:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f0e:	81a3      	strh	r3, [r4, #12]
 8010f10:	6126      	str	r6, [r4, #16]
 8010f12:	6165      	str	r5, [r4, #20]
 8010f14:	443e      	add	r6, r7
 8010f16:	1bed      	subs	r5, r5, r7
 8010f18:	6026      	str	r6, [r4, #0]
 8010f1a:	60a5      	str	r5, [r4, #8]
 8010f1c:	464e      	mov	r6, r9
 8010f1e:	454e      	cmp	r6, r9
 8010f20:	d900      	bls.n	8010f24 <__ssputs_r+0x84>
 8010f22:	464e      	mov	r6, r9
 8010f24:	4632      	mov	r2, r6
 8010f26:	4641      	mov	r1, r8
 8010f28:	6820      	ldr	r0, [r4, #0]
 8010f2a:	f000 f93a 	bl	80111a2 <memmove>
 8010f2e:	68a3      	ldr	r3, [r4, #8]
 8010f30:	1b9b      	subs	r3, r3, r6
 8010f32:	60a3      	str	r3, [r4, #8]
 8010f34:	6823      	ldr	r3, [r4, #0]
 8010f36:	441e      	add	r6, r3
 8010f38:	6026      	str	r6, [r4, #0]
 8010f3a:	2000      	movs	r0, #0
 8010f3c:	e7dc      	b.n	8010ef8 <__ssputs_r+0x58>
 8010f3e:	462a      	mov	r2, r5
 8010f40:	f000 f94a 	bl	80111d8 <_realloc_r>
 8010f44:	4606      	mov	r6, r0
 8010f46:	2800      	cmp	r0, #0
 8010f48:	d1e2      	bne.n	8010f10 <__ssputs_r+0x70>
 8010f4a:	6921      	ldr	r1, [r4, #16]
 8010f4c:	4650      	mov	r0, sl
 8010f4e:	f7ff feff 	bl	8010d50 <_free_r>
 8010f52:	e7c8      	b.n	8010ee6 <__ssputs_r+0x46>

08010f54 <_svfiprintf_r>:
 8010f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f58:	461d      	mov	r5, r3
 8010f5a:	898b      	ldrh	r3, [r1, #12]
 8010f5c:	061f      	lsls	r7, r3, #24
 8010f5e:	b09d      	sub	sp, #116	; 0x74
 8010f60:	4680      	mov	r8, r0
 8010f62:	460c      	mov	r4, r1
 8010f64:	4616      	mov	r6, r2
 8010f66:	d50f      	bpl.n	8010f88 <_svfiprintf_r+0x34>
 8010f68:	690b      	ldr	r3, [r1, #16]
 8010f6a:	b96b      	cbnz	r3, 8010f88 <_svfiprintf_r+0x34>
 8010f6c:	2140      	movs	r1, #64	; 0x40
 8010f6e:	f7ff ff3d 	bl	8010dec <_malloc_r>
 8010f72:	6020      	str	r0, [r4, #0]
 8010f74:	6120      	str	r0, [r4, #16]
 8010f76:	b928      	cbnz	r0, 8010f84 <_svfiprintf_r+0x30>
 8010f78:	230c      	movs	r3, #12
 8010f7a:	f8c8 3000 	str.w	r3, [r8]
 8010f7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010f82:	e0c8      	b.n	8011116 <_svfiprintf_r+0x1c2>
 8010f84:	2340      	movs	r3, #64	; 0x40
 8010f86:	6163      	str	r3, [r4, #20]
 8010f88:	2300      	movs	r3, #0
 8010f8a:	9309      	str	r3, [sp, #36]	; 0x24
 8010f8c:	2320      	movs	r3, #32
 8010f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010f92:	2330      	movs	r3, #48	; 0x30
 8010f94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010f98:	9503      	str	r5, [sp, #12]
 8010f9a:	f04f 0b01 	mov.w	fp, #1
 8010f9e:	4637      	mov	r7, r6
 8010fa0:	463d      	mov	r5, r7
 8010fa2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010fa6:	b10b      	cbz	r3, 8010fac <_svfiprintf_r+0x58>
 8010fa8:	2b25      	cmp	r3, #37	; 0x25
 8010faa:	d13e      	bne.n	801102a <_svfiprintf_r+0xd6>
 8010fac:	ebb7 0a06 	subs.w	sl, r7, r6
 8010fb0:	d00b      	beq.n	8010fca <_svfiprintf_r+0x76>
 8010fb2:	4653      	mov	r3, sl
 8010fb4:	4632      	mov	r2, r6
 8010fb6:	4621      	mov	r1, r4
 8010fb8:	4640      	mov	r0, r8
 8010fba:	f7ff ff71 	bl	8010ea0 <__ssputs_r>
 8010fbe:	3001      	adds	r0, #1
 8010fc0:	f000 80a4 	beq.w	801110c <_svfiprintf_r+0x1b8>
 8010fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010fc6:	4453      	add	r3, sl
 8010fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8010fca:	783b      	ldrb	r3, [r7, #0]
 8010fcc:	2b00      	cmp	r3, #0
 8010fce:	f000 809d 	beq.w	801110c <_svfiprintf_r+0x1b8>
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010fd8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010fdc:	9304      	str	r3, [sp, #16]
 8010fde:	9307      	str	r3, [sp, #28]
 8010fe0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010fe4:	931a      	str	r3, [sp, #104]	; 0x68
 8010fe6:	462f      	mov	r7, r5
 8010fe8:	2205      	movs	r2, #5
 8010fea:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010fee:	4850      	ldr	r0, [pc, #320]	; (8011130 <_svfiprintf_r+0x1dc>)
 8010ff0:	f7ef f8f6 	bl	80001e0 <memchr>
 8010ff4:	9b04      	ldr	r3, [sp, #16]
 8010ff6:	b9d0      	cbnz	r0, 801102e <_svfiprintf_r+0xda>
 8010ff8:	06d9      	lsls	r1, r3, #27
 8010ffa:	bf44      	itt	mi
 8010ffc:	2220      	movmi	r2, #32
 8010ffe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8011002:	071a      	lsls	r2, r3, #28
 8011004:	bf44      	itt	mi
 8011006:	222b      	movmi	r2, #43	; 0x2b
 8011008:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801100c:	782a      	ldrb	r2, [r5, #0]
 801100e:	2a2a      	cmp	r2, #42	; 0x2a
 8011010:	d015      	beq.n	801103e <_svfiprintf_r+0xea>
 8011012:	9a07      	ldr	r2, [sp, #28]
 8011014:	462f      	mov	r7, r5
 8011016:	2000      	movs	r0, #0
 8011018:	250a      	movs	r5, #10
 801101a:	4639      	mov	r1, r7
 801101c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011020:	3b30      	subs	r3, #48	; 0x30
 8011022:	2b09      	cmp	r3, #9
 8011024:	d94d      	bls.n	80110c2 <_svfiprintf_r+0x16e>
 8011026:	b1b8      	cbz	r0, 8011058 <_svfiprintf_r+0x104>
 8011028:	e00f      	b.n	801104a <_svfiprintf_r+0xf6>
 801102a:	462f      	mov	r7, r5
 801102c:	e7b8      	b.n	8010fa0 <_svfiprintf_r+0x4c>
 801102e:	4a40      	ldr	r2, [pc, #256]	; (8011130 <_svfiprintf_r+0x1dc>)
 8011030:	1a80      	subs	r0, r0, r2
 8011032:	fa0b f000 	lsl.w	r0, fp, r0
 8011036:	4318      	orrs	r0, r3
 8011038:	9004      	str	r0, [sp, #16]
 801103a:	463d      	mov	r5, r7
 801103c:	e7d3      	b.n	8010fe6 <_svfiprintf_r+0x92>
 801103e:	9a03      	ldr	r2, [sp, #12]
 8011040:	1d11      	adds	r1, r2, #4
 8011042:	6812      	ldr	r2, [r2, #0]
 8011044:	9103      	str	r1, [sp, #12]
 8011046:	2a00      	cmp	r2, #0
 8011048:	db01      	blt.n	801104e <_svfiprintf_r+0xfa>
 801104a:	9207      	str	r2, [sp, #28]
 801104c:	e004      	b.n	8011058 <_svfiprintf_r+0x104>
 801104e:	4252      	negs	r2, r2
 8011050:	f043 0302 	orr.w	r3, r3, #2
 8011054:	9207      	str	r2, [sp, #28]
 8011056:	9304      	str	r3, [sp, #16]
 8011058:	783b      	ldrb	r3, [r7, #0]
 801105a:	2b2e      	cmp	r3, #46	; 0x2e
 801105c:	d10c      	bne.n	8011078 <_svfiprintf_r+0x124>
 801105e:	787b      	ldrb	r3, [r7, #1]
 8011060:	2b2a      	cmp	r3, #42	; 0x2a
 8011062:	d133      	bne.n	80110cc <_svfiprintf_r+0x178>
 8011064:	9b03      	ldr	r3, [sp, #12]
 8011066:	1d1a      	adds	r2, r3, #4
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	9203      	str	r2, [sp, #12]
 801106c:	2b00      	cmp	r3, #0
 801106e:	bfb8      	it	lt
 8011070:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011074:	3702      	adds	r7, #2
 8011076:	9305      	str	r3, [sp, #20]
 8011078:	4d2e      	ldr	r5, [pc, #184]	; (8011134 <_svfiprintf_r+0x1e0>)
 801107a:	7839      	ldrb	r1, [r7, #0]
 801107c:	2203      	movs	r2, #3
 801107e:	4628      	mov	r0, r5
 8011080:	f7ef f8ae 	bl	80001e0 <memchr>
 8011084:	b138      	cbz	r0, 8011096 <_svfiprintf_r+0x142>
 8011086:	2340      	movs	r3, #64	; 0x40
 8011088:	1b40      	subs	r0, r0, r5
 801108a:	fa03 f000 	lsl.w	r0, r3, r0
 801108e:	9b04      	ldr	r3, [sp, #16]
 8011090:	4303      	orrs	r3, r0
 8011092:	3701      	adds	r7, #1
 8011094:	9304      	str	r3, [sp, #16]
 8011096:	7839      	ldrb	r1, [r7, #0]
 8011098:	4827      	ldr	r0, [pc, #156]	; (8011138 <_svfiprintf_r+0x1e4>)
 801109a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801109e:	2206      	movs	r2, #6
 80110a0:	1c7e      	adds	r6, r7, #1
 80110a2:	f7ef f89d 	bl	80001e0 <memchr>
 80110a6:	2800      	cmp	r0, #0
 80110a8:	d038      	beq.n	801111c <_svfiprintf_r+0x1c8>
 80110aa:	4b24      	ldr	r3, [pc, #144]	; (801113c <_svfiprintf_r+0x1e8>)
 80110ac:	bb13      	cbnz	r3, 80110f4 <_svfiprintf_r+0x1a0>
 80110ae:	9b03      	ldr	r3, [sp, #12]
 80110b0:	3307      	adds	r3, #7
 80110b2:	f023 0307 	bic.w	r3, r3, #7
 80110b6:	3308      	adds	r3, #8
 80110b8:	9303      	str	r3, [sp, #12]
 80110ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110bc:	444b      	add	r3, r9
 80110be:	9309      	str	r3, [sp, #36]	; 0x24
 80110c0:	e76d      	b.n	8010f9e <_svfiprintf_r+0x4a>
 80110c2:	fb05 3202 	mla	r2, r5, r2, r3
 80110c6:	2001      	movs	r0, #1
 80110c8:	460f      	mov	r7, r1
 80110ca:	e7a6      	b.n	801101a <_svfiprintf_r+0xc6>
 80110cc:	2300      	movs	r3, #0
 80110ce:	3701      	adds	r7, #1
 80110d0:	9305      	str	r3, [sp, #20]
 80110d2:	4619      	mov	r1, r3
 80110d4:	250a      	movs	r5, #10
 80110d6:	4638      	mov	r0, r7
 80110d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80110dc:	3a30      	subs	r2, #48	; 0x30
 80110de:	2a09      	cmp	r2, #9
 80110e0:	d903      	bls.n	80110ea <_svfiprintf_r+0x196>
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	d0c8      	beq.n	8011078 <_svfiprintf_r+0x124>
 80110e6:	9105      	str	r1, [sp, #20]
 80110e8:	e7c6      	b.n	8011078 <_svfiprintf_r+0x124>
 80110ea:	fb05 2101 	mla	r1, r5, r1, r2
 80110ee:	2301      	movs	r3, #1
 80110f0:	4607      	mov	r7, r0
 80110f2:	e7f0      	b.n	80110d6 <_svfiprintf_r+0x182>
 80110f4:	ab03      	add	r3, sp, #12
 80110f6:	9300      	str	r3, [sp, #0]
 80110f8:	4622      	mov	r2, r4
 80110fa:	4b11      	ldr	r3, [pc, #68]	; (8011140 <_svfiprintf_r+0x1ec>)
 80110fc:	a904      	add	r1, sp, #16
 80110fe:	4640      	mov	r0, r8
 8011100:	f7fc fbb0 	bl	800d864 <_printf_float>
 8011104:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8011108:	4681      	mov	r9, r0
 801110a:	d1d6      	bne.n	80110ba <_svfiprintf_r+0x166>
 801110c:	89a3      	ldrh	r3, [r4, #12]
 801110e:	065b      	lsls	r3, r3, #25
 8011110:	f53f af35 	bmi.w	8010f7e <_svfiprintf_r+0x2a>
 8011114:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011116:	b01d      	add	sp, #116	; 0x74
 8011118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801111c:	ab03      	add	r3, sp, #12
 801111e:	9300      	str	r3, [sp, #0]
 8011120:	4622      	mov	r2, r4
 8011122:	4b07      	ldr	r3, [pc, #28]	; (8011140 <_svfiprintf_r+0x1ec>)
 8011124:	a904      	add	r1, sp, #16
 8011126:	4640      	mov	r0, r8
 8011128:	f7fc fe52 	bl	800ddd0 <_printf_i>
 801112c:	e7ea      	b.n	8011104 <_svfiprintf_r+0x1b0>
 801112e:	bf00      	nop
 8011130:	080129ac 	.word	0x080129ac
 8011134:	080129b2 	.word	0x080129b2
 8011138:	080129b6 	.word	0x080129b6
 801113c:	0800d865 	.word	0x0800d865
 8011140:	08010ea1 	.word	0x08010ea1

08011144 <_sbrk_r>:
 8011144:	b538      	push	{r3, r4, r5, lr}
 8011146:	4c06      	ldr	r4, [pc, #24]	; (8011160 <_sbrk_r+0x1c>)
 8011148:	2300      	movs	r3, #0
 801114a:	4605      	mov	r5, r0
 801114c:	4608      	mov	r0, r1
 801114e:	6023      	str	r3, [r4, #0]
 8011150:	f7fc fa56 	bl	800d600 <_sbrk>
 8011154:	1c43      	adds	r3, r0, #1
 8011156:	d102      	bne.n	801115e <_sbrk_r+0x1a>
 8011158:	6823      	ldr	r3, [r4, #0]
 801115a:	b103      	cbz	r3, 801115e <_sbrk_r+0x1a>
 801115c:	602b      	str	r3, [r5, #0]
 801115e:	bd38      	pop	{r3, r4, r5, pc}
 8011160:	20002790 	.word	0x20002790

08011164 <strncmp>:
 8011164:	b510      	push	{r4, lr}
 8011166:	b16a      	cbz	r2, 8011184 <strncmp+0x20>
 8011168:	3901      	subs	r1, #1
 801116a:	1884      	adds	r4, r0, r2
 801116c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011170:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8011174:	4293      	cmp	r3, r2
 8011176:	d103      	bne.n	8011180 <strncmp+0x1c>
 8011178:	42a0      	cmp	r0, r4
 801117a:	d001      	beq.n	8011180 <strncmp+0x1c>
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1f5      	bne.n	801116c <strncmp+0x8>
 8011180:	1a98      	subs	r0, r3, r2
 8011182:	bd10      	pop	{r4, pc}
 8011184:	4610      	mov	r0, r2
 8011186:	e7fc      	b.n	8011182 <strncmp+0x1e>

08011188 <__ascii_wctomb>:
 8011188:	b149      	cbz	r1, 801119e <__ascii_wctomb+0x16>
 801118a:	2aff      	cmp	r2, #255	; 0xff
 801118c:	bf85      	ittet	hi
 801118e:	238a      	movhi	r3, #138	; 0x8a
 8011190:	6003      	strhi	r3, [r0, #0]
 8011192:	700a      	strbls	r2, [r1, #0]
 8011194:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011198:	bf98      	it	ls
 801119a:	2001      	movls	r0, #1
 801119c:	4770      	bx	lr
 801119e:	4608      	mov	r0, r1
 80111a0:	4770      	bx	lr

080111a2 <memmove>:
 80111a2:	4288      	cmp	r0, r1
 80111a4:	b510      	push	{r4, lr}
 80111a6:	eb01 0302 	add.w	r3, r1, r2
 80111aa:	d807      	bhi.n	80111bc <memmove+0x1a>
 80111ac:	1e42      	subs	r2, r0, #1
 80111ae:	4299      	cmp	r1, r3
 80111b0:	d00a      	beq.n	80111c8 <memmove+0x26>
 80111b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80111b6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80111ba:	e7f8      	b.n	80111ae <memmove+0xc>
 80111bc:	4283      	cmp	r3, r0
 80111be:	d9f5      	bls.n	80111ac <memmove+0xa>
 80111c0:	1881      	adds	r1, r0, r2
 80111c2:	1ad2      	subs	r2, r2, r3
 80111c4:	42d3      	cmn	r3, r2
 80111c6:	d100      	bne.n	80111ca <memmove+0x28>
 80111c8:	bd10      	pop	{r4, pc}
 80111ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80111ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80111d2:	e7f7      	b.n	80111c4 <memmove+0x22>

080111d4 <__malloc_lock>:
 80111d4:	4770      	bx	lr

080111d6 <__malloc_unlock>:
 80111d6:	4770      	bx	lr

080111d8 <_realloc_r>:
 80111d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111da:	4607      	mov	r7, r0
 80111dc:	4614      	mov	r4, r2
 80111de:	460e      	mov	r6, r1
 80111e0:	b921      	cbnz	r1, 80111ec <_realloc_r+0x14>
 80111e2:	4611      	mov	r1, r2
 80111e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80111e8:	f7ff be00 	b.w	8010dec <_malloc_r>
 80111ec:	b922      	cbnz	r2, 80111f8 <_realloc_r+0x20>
 80111ee:	f7ff fdaf 	bl	8010d50 <_free_r>
 80111f2:	4625      	mov	r5, r4
 80111f4:	4628      	mov	r0, r5
 80111f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80111f8:	f000 f814 	bl	8011224 <_malloc_usable_size_r>
 80111fc:	42a0      	cmp	r0, r4
 80111fe:	d20f      	bcs.n	8011220 <_realloc_r+0x48>
 8011200:	4621      	mov	r1, r4
 8011202:	4638      	mov	r0, r7
 8011204:	f7ff fdf2 	bl	8010dec <_malloc_r>
 8011208:	4605      	mov	r5, r0
 801120a:	2800      	cmp	r0, #0
 801120c:	d0f2      	beq.n	80111f4 <_realloc_r+0x1c>
 801120e:	4631      	mov	r1, r6
 8011210:	4622      	mov	r2, r4
 8011212:	f7ff f985 	bl	8010520 <memcpy>
 8011216:	4631      	mov	r1, r6
 8011218:	4638      	mov	r0, r7
 801121a:	f7ff fd99 	bl	8010d50 <_free_r>
 801121e:	e7e9      	b.n	80111f4 <_realloc_r+0x1c>
 8011220:	4635      	mov	r5, r6
 8011222:	e7e7      	b.n	80111f4 <_realloc_r+0x1c>

08011224 <_malloc_usable_size_r>:
 8011224:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011228:	1f18      	subs	r0, r3, #4
 801122a:	2b00      	cmp	r3, #0
 801122c:	bfbc      	itt	lt
 801122e:	580b      	ldrlt	r3, [r1, r0]
 8011230:	18c0      	addlt	r0, r0, r3
 8011232:	4770      	bx	lr
 8011234:	0000      	movs	r0, r0
	...

08011238 <cos>:
 8011238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801123a:	ec51 0b10 	vmov	r0, r1, d0
 801123e:	4a1e      	ldr	r2, [pc, #120]	; (80112b8 <cos+0x80>)
 8011240:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011244:	4293      	cmp	r3, r2
 8011246:	dc06      	bgt.n	8011256 <cos+0x1e>
 8011248:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80112b0 <cos+0x78>
 801124c:	f000 fb80 	bl	8011950 <__kernel_cos>
 8011250:	ec51 0b10 	vmov	r0, r1, d0
 8011254:	e007      	b.n	8011266 <cos+0x2e>
 8011256:	4a19      	ldr	r2, [pc, #100]	; (80112bc <cos+0x84>)
 8011258:	4293      	cmp	r3, r2
 801125a:	dd09      	ble.n	8011270 <cos+0x38>
 801125c:	ee10 2a10 	vmov	r2, s0
 8011260:	460b      	mov	r3, r1
 8011262:	f7ef f811 	bl	8000288 <__aeabi_dsub>
 8011266:	ec41 0b10 	vmov	d0, r0, r1
 801126a:	b005      	add	sp, #20
 801126c:	f85d fb04 	ldr.w	pc, [sp], #4
 8011270:	4668      	mov	r0, sp
 8011272:	f000 f8c9 	bl	8011408 <__ieee754_rem_pio2>
 8011276:	f000 0003 	and.w	r0, r0, #3
 801127a:	2801      	cmp	r0, #1
 801127c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011280:	ed9d 0b00 	vldr	d0, [sp]
 8011284:	d007      	beq.n	8011296 <cos+0x5e>
 8011286:	2802      	cmp	r0, #2
 8011288:	d00e      	beq.n	80112a8 <cos+0x70>
 801128a:	2800      	cmp	r0, #0
 801128c:	d0de      	beq.n	801124c <cos+0x14>
 801128e:	2001      	movs	r0, #1
 8011290:	f000 ff66 	bl	8012160 <__kernel_sin>
 8011294:	e7dc      	b.n	8011250 <cos+0x18>
 8011296:	f000 ff63 	bl	8012160 <__kernel_sin>
 801129a:	ec53 2b10 	vmov	r2, r3, d0
 801129e:	ee10 0a10 	vmov	r0, s0
 80112a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80112a6:	e7de      	b.n	8011266 <cos+0x2e>
 80112a8:	f000 fb52 	bl	8011950 <__kernel_cos>
 80112ac:	e7f5      	b.n	801129a <cos+0x62>
 80112ae:	bf00      	nop
	...
 80112b8:	3fe921fb 	.word	0x3fe921fb
 80112bc:	7fefffff 	.word	0x7fefffff

080112c0 <sin>:
 80112c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80112c2:	ec51 0b10 	vmov	r0, r1, d0
 80112c6:	4a20      	ldr	r2, [pc, #128]	; (8011348 <sin+0x88>)
 80112c8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80112cc:	4293      	cmp	r3, r2
 80112ce:	dc07      	bgt.n	80112e0 <sin+0x20>
 80112d0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011340 <sin+0x80>
 80112d4:	2000      	movs	r0, #0
 80112d6:	f000 ff43 	bl	8012160 <__kernel_sin>
 80112da:	ec51 0b10 	vmov	r0, r1, d0
 80112de:	e007      	b.n	80112f0 <sin+0x30>
 80112e0:	4a1a      	ldr	r2, [pc, #104]	; (801134c <sin+0x8c>)
 80112e2:	4293      	cmp	r3, r2
 80112e4:	dd09      	ble.n	80112fa <sin+0x3a>
 80112e6:	ee10 2a10 	vmov	r2, s0
 80112ea:	460b      	mov	r3, r1
 80112ec:	f7ee ffcc 	bl	8000288 <__aeabi_dsub>
 80112f0:	ec41 0b10 	vmov	d0, r0, r1
 80112f4:	b005      	add	sp, #20
 80112f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80112fa:	4668      	mov	r0, sp
 80112fc:	f000 f884 	bl	8011408 <__ieee754_rem_pio2>
 8011300:	f000 0003 	and.w	r0, r0, #3
 8011304:	2801      	cmp	r0, #1
 8011306:	ed9d 1b02 	vldr	d1, [sp, #8]
 801130a:	ed9d 0b00 	vldr	d0, [sp]
 801130e:	d004      	beq.n	801131a <sin+0x5a>
 8011310:	2802      	cmp	r0, #2
 8011312:	d005      	beq.n	8011320 <sin+0x60>
 8011314:	b970      	cbnz	r0, 8011334 <sin+0x74>
 8011316:	2001      	movs	r0, #1
 8011318:	e7dd      	b.n	80112d6 <sin+0x16>
 801131a:	f000 fb19 	bl	8011950 <__kernel_cos>
 801131e:	e7dc      	b.n	80112da <sin+0x1a>
 8011320:	2001      	movs	r0, #1
 8011322:	f000 ff1d 	bl	8012160 <__kernel_sin>
 8011326:	ec53 2b10 	vmov	r2, r3, d0
 801132a:	ee10 0a10 	vmov	r0, s0
 801132e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011332:	e7dd      	b.n	80112f0 <sin+0x30>
 8011334:	f000 fb0c 	bl	8011950 <__kernel_cos>
 8011338:	e7f5      	b.n	8011326 <sin+0x66>
 801133a:	bf00      	nop
 801133c:	f3af 8000 	nop.w
	...
 8011348:	3fe921fb 	.word	0x3fe921fb
 801134c:	7fefffff 	.word	0x7fefffff

08011350 <sqrt>:
 8011350:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011354:	ed2d 8b02 	vpush	{d8}
 8011358:	b08b      	sub	sp, #44	; 0x2c
 801135a:	ec55 4b10 	vmov	r4, r5, d0
 801135e:	f000 fa45 	bl	80117ec <__ieee754_sqrt>
 8011362:	4b26      	ldr	r3, [pc, #152]	; (80113fc <sqrt+0xac>)
 8011364:	eeb0 8a40 	vmov.f32	s16, s0
 8011368:	eef0 8a60 	vmov.f32	s17, s1
 801136c:	f993 6000 	ldrsb.w	r6, [r3]
 8011370:	1c73      	adds	r3, r6, #1
 8011372:	d02a      	beq.n	80113ca <sqrt+0x7a>
 8011374:	4622      	mov	r2, r4
 8011376:	462b      	mov	r3, r5
 8011378:	4620      	mov	r0, r4
 801137a:	4629      	mov	r1, r5
 801137c:	f7ef fbd6 	bl	8000b2c <__aeabi_dcmpun>
 8011380:	4607      	mov	r7, r0
 8011382:	bb10      	cbnz	r0, 80113ca <sqrt+0x7a>
 8011384:	f04f 0800 	mov.w	r8, #0
 8011388:	f04f 0900 	mov.w	r9, #0
 801138c:	4642      	mov	r2, r8
 801138e:	464b      	mov	r3, r9
 8011390:	4620      	mov	r0, r4
 8011392:	4629      	mov	r1, r5
 8011394:	f7ef fba2 	bl	8000adc <__aeabi_dcmplt>
 8011398:	b1b8      	cbz	r0, 80113ca <sqrt+0x7a>
 801139a:	2301      	movs	r3, #1
 801139c:	9300      	str	r3, [sp, #0]
 801139e:	4b18      	ldr	r3, [pc, #96]	; (8011400 <sqrt+0xb0>)
 80113a0:	9301      	str	r3, [sp, #4]
 80113a2:	9708      	str	r7, [sp, #32]
 80113a4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80113a8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80113ac:	b9b6      	cbnz	r6, 80113dc <sqrt+0x8c>
 80113ae:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80113b2:	4668      	mov	r0, sp
 80113b4:	f001 f81c 	bl	80123f0 <matherr>
 80113b8:	b1d0      	cbz	r0, 80113f0 <sqrt+0xa0>
 80113ba:	9b08      	ldr	r3, [sp, #32]
 80113bc:	b11b      	cbz	r3, 80113c6 <sqrt+0x76>
 80113be:	f7fc f98b 	bl	800d6d8 <__errno>
 80113c2:	9b08      	ldr	r3, [sp, #32]
 80113c4:	6003      	str	r3, [r0, #0]
 80113c6:	ed9d 8b06 	vldr	d8, [sp, #24]
 80113ca:	eeb0 0a48 	vmov.f32	s0, s16
 80113ce:	eef0 0a68 	vmov.f32	s1, s17
 80113d2:	b00b      	add	sp, #44	; 0x2c
 80113d4:	ecbd 8b02 	vpop	{d8}
 80113d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80113dc:	4642      	mov	r2, r8
 80113de:	464b      	mov	r3, r9
 80113e0:	4640      	mov	r0, r8
 80113e2:	4649      	mov	r1, r9
 80113e4:	f7ef fa32 	bl	800084c <__aeabi_ddiv>
 80113e8:	2e02      	cmp	r6, #2
 80113ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80113ee:	d1e0      	bne.n	80113b2 <sqrt+0x62>
 80113f0:	f7fc f972 	bl	800d6d8 <__errno>
 80113f4:	2321      	movs	r3, #33	; 0x21
 80113f6:	6003      	str	r3, [r0, #0]
 80113f8:	e7df      	b.n	80113ba <sqrt+0x6a>
 80113fa:	bf00      	nop
 80113fc:	20000214 	.word	0x20000214
 8011400:	08012abe 	.word	0x08012abe
 8011404:	00000000 	.word	0x00000000

08011408 <__ieee754_rem_pio2>:
 8011408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801140c:	ec57 6b10 	vmov	r6, r7, d0
 8011410:	4bc3      	ldr	r3, [pc, #780]	; (8011720 <__ieee754_rem_pio2+0x318>)
 8011412:	b08d      	sub	sp, #52	; 0x34
 8011414:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011418:	4598      	cmp	r8, r3
 801141a:	4604      	mov	r4, r0
 801141c:	9704      	str	r7, [sp, #16]
 801141e:	dc07      	bgt.n	8011430 <__ieee754_rem_pio2+0x28>
 8011420:	2200      	movs	r2, #0
 8011422:	2300      	movs	r3, #0
 8011424:	ed84 0b00 	vstr	d0, [r4]
 8011428:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801142c:	2500      	movs	r5, #0
 801142e:	e027      	b.n	8011480 <__ieee754_rem_pio2+0x78>
 8011430:	4bbc      	ldr	r3, [pc, #752]	; (8011724 <__ieee754_rem_pio2+0x31c>)
 8011432:	4598      	cmp	r8, r3
 8011434:	dc75      	bgt.n	8011522 <__ieee754_rem_pio2+0x11a>
 8011436:	9b04      	ldr	r3, [sp, #16]
 8011438:	4dbb      	ldr	r5, [pc, #748]	; (8011728 <__ieee754_rem_pio2+0x320>)
 801143a:	2b00      	cmp	r3, #0
 801143c:	ee10 0a10 	vmov	r0, s0
 8011440:	a3a9      	add	r3, pc, #676	; (adr r3, 80116e8 <__ieee754_rem_pio2+0x2e0>)
 8011442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011446:	4639      	mov	r1, r7
 8011448:	dd36      	ble.n	80114b8 <__ieee754_rem_pio2+0xb0>
 801144a:	f7ee ff1d 	bl	8000288 <__aeabi_dsub>
 801144e:	45a8      	cmp	r8, r5
 8011450:	4606      	mov	r6, r0
 8011452:	460f      	mov	r7, r1
 8011454:	d018      	beq.n	8011488 <__ieee754_rem_pio2+0x80>
 8011456:	a3a6      	add	r3, pc, #664	; (adr r3, 80116f0 <__ieee754_rem_pio2+0x2e8>)
 8011458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145c:	f7ee ff14 	bl	8000288 <__aeabi_dsub>
 8011460:	4602      	mov	r2, r0
 8011462:	460b      	mov	r3, r1
 8011464:	e9c4 2300 	strd	r2, r3, [r4]
 8011468:	4630      	mov	r0, r6
 801146a:	4639      	mov	r1, r7
 801146c:	f7ee ff0c 	bl	8000288 <__aeabi_dsub>
 8011470:	a39f      	add	r3, pc, #636	; (adr r3, 80116f0 <__ieee754_rem_pio2+0x2e8>)
 8011472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011476:	f7ee ff07 	bl	8000288 <__aeabi_dsub>
 801147a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801147e:	2501      	movs	r5, #1
 8011480:	4628      	mov	r0, r5
 8011482:	b00d      	add	sp, #52	; 0x34
 8011484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011488:	a39b      	add	r3, pc, #620	; (adr r3, 80116f8 <__ieee754_rem_pio2+0x2f0>)
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	f7ee fefb 	bl	8000288 <__aeabi_dsub>
 8011492:	a39b      	add	r3, pc, #620	; (adr r3, 8011700 <__ieee754_rem_pio2+0x2f8>)
 8011494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011498:	4606      	mov	r6, r0
 801149a:	460f      	mov	r7, r1
 801149c:	f7ee fef4 	bl	8000288 <__aeabi_dsub>
 80114a0:	4602      	mov	r2, r0
 80114a2:	460b      	mov	r3, r1
 80114a4:	e9c4 2300 	strd	r2, r3, [r4]
 80114a8:	4630      	mov	r0, r6
 80114aa:	4639      	mov	r1, r7
 80114ac:	f7ee feec 	bl	8000288 <__aeabi_dsub>
 80114b0:	a393      	add	r3, pc, #588	; (adr r3, 8011700 <__ieee754_rem_pio2+0x2f8>)
 80114b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b6:	e7de      	b.n	8011476 <__ieee754_rem_pio2+0x6e>
 80114b8:	f7ee fee8 	bl	800028c <__adddf3>
 80114bc:	45a8      	cmp	r8, r5
 80114be:	4606      	mov	r6, r0
 80114c0:	460f      	mov	r7, r1
 80114c2:	d016      	beq.n	80114f2 <__ieee754_rem_pio2+0xea>
 80114c4:	a38a      	add	r3, pc, #552	; (adr r3, 80116f0 <__ieee754_rem_pio2+0x2e8>)
 80114c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114ca:	f7ee fedf 	bl	800028c <__adddf3>
 80114ce:	4602      	mov	r2, r0
 80114d0:	460b      	mov	r3, r1
 80114d2:	e9c4 2300 	strd	r2, r3, [r4]
 80114d6:	4630      	mov	r0, r6
 80114d8:	4639      	mov	r1, r7
 80114da:	f7ee fed5 	bl	8000288 <__aeabi_dsub>
 80114de:	a384      	add	r3, pc, #528	; (adr r3, 80116f0 <__ieee754_rem_pio2+0x2e8>)
 80114e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e4:	f7ee fed2 	bl	800028c <__adddf3>
 80114e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80114ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80114f0:	e7c6      	b.n	8011480 <__ieee754_rem_pio2+0x78>
 80114f2:	a381      	add	r3, pc, #516	; (adr r3, 80116f8 <__ieee754_rem_pio2+0x2f0>)
 80114f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114f8:	f7ee fec8 	bl	800028c <__adddf3>
 80114fc:	a380      	add	r3, pc, #512	; (adr r3, 8011700 <__ieee754_rem_pio2+0x2f8>)
 80114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011502:	4606      	mov	r6, r0
 8011504:	460f      	mov	r7, r1
 8011506:	f7ee fec1 	bl	800028c <__adddf3>
 801150a:	4602      	mov	r2, r0
 801150c:	460b      	mov	r3, r1
 801150e:	e9c4 2300 	strd	r2, r3, [r4]
 8011512:	4630      	mov	r0, r6
 8011514:	4639      	mov	r1, r7
 8011516:	f7ee feb7 	bl	8000288 <__aeabi_dsub>
 801151a:	a379      	add	r3, pc, #484	; (adr r3, 8011700 <__ieee754_rem_pio2+0x2f8>)
 801151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011520:	e7e0      	b.n	80114e4 <__ieee754_rem_pio2+0xdc>
 8011522:	4b82      	ldr	r3, [pc, #520]	; (801172c <__ieee754_rem_pio2+0x324>)
 8011524:	4598      	cmp	r8, r3
 8011526:	f300 80d0 	bgt.w	80116ca <__ieee754_rem_pio2+0x2c2>
 801152a:	f000 fed3 	bl	80122d4 <fabs>
 801152e:	ec57 6b10 	vmov	r6, r7, d0
 8011532:	ee10 0a10 	vmov	r0, s0
 8011536:	a374      	add	r3, pc, #464	; (adr r3, 8011708 <__ieee754_rem_pio2+0x300>)
 8011538:	e9d3 2300 	ldrd	r2, r3, [r3]
 801153c:	4639      	mov	r1, r7
 801153e:	f7ef f85b 	bl	80005f8 <__aeabi_dmul>
 8011542:	2200      	movs	r2, #0
 8011544:	4b7a      	ldr	r3, [pc, #488]	; (8011730 <__ieee754_rem_pio2+0x328>)
 8011546:	f7ee fea1 	bl	800028c <__adddf3>
 801154a:	f7ef fb05 	bl	8000b58 <__aeabi_d2iz>
 801154e:	4605      	mov	r5, r0
 8011550:	f7ee ffe8 	bl	8000524 <__aeabi_i2d>
 8011554:	a364      	add	r3, pc, #400	; (adr r3, 80116e8 <__ieee754_rem_pio2+0x2e0>)
 8011556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801155e:	f7ef f84b 	bl	80005f8 <__aeabi_dmul>
 8011562:	4602      	mov	r2, r0
 8011564:	460b      	mov	r3, r1
 8011566:	4630      	mov	r0, r6
 8011568:	4639      	mov	r1, r7
 801156a:	f7ee fe8d 	bl	8000288 <__aeabi_dsub>
 801156e:	a360      	add	r3, pc, #384	; (adr r3, 80116f0 <__ieee754_rem_pio2+0x2e8>)
 8011570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011574:	4682      	mov	sl, r0
 8011576:	468b      	mov	fp, r1
 8011578:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801157c:	f7ef f83c 	bl	80005f8 <__aeabi_dmul>
 8011580:	2d1f      	cmp	r5, #31
 8011582:	4606      	mov	r6, r0
 8011584:	460f      	mov	r7, r1
 8011586:	dc0c      	bgt.n	80115a2 <__ieee754_rem_pio2+0x19a>
 8011588:	1e6a      	subs	r2, r5, #1
 801158a:	4b6a      	ldr	r3, [pc, #424]	; (8011734 <__ieee754_rem_pio2+0x32c>)
 801158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011590:	4543      	cmp	r3, r8
 8011592:	d006      	beq.n	80115a2 <__ieee754_rem_pio2+0x19a>
 8011594:	4632      	mov	r2, r6
 8011596:	463b      	mov	r3, r7
 8011598:	4650      	mov	r0, sl
 801159a:	4659      	mov	r1, fp
 801159c:	f7ee fe74 	bl	8000288 <__aeabi_dsub>
 80115a0:	e00e      	b.n	80115c0 <__ieee754_rem_pio2+0x1b8>
 80115a2:	4632      	mov	r2, r6
 80115a4:	463b      	mov	r3, r7
 80115a6:	4650      	mov	r0, sl
 80115a8:	4659      	mov	r1, fp
 80115aa:	f7ee fe6d 	bl	8000288 <__aeabi_dsub>
 80115ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 80115b2:	9305      	str	r3, [sp, #20]
 80115b4:	9a05      	ldr	r2, [sp, #20]
 80115b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80115ba:	1ad3      	subs	r3, r2, r3
 80115bc:	2b10      	cmp	r3, #16
 80115be:	dc02      	bgt.n	80115c6 <__ieee754_rem_pio2+0x1be>
 80115c0:	e9c4 0100 	strd	r0, r1, [r4]
 80115c4:	e039      	b.n	801163a <__ieee754_rem_pio2+0x232>
 80115c6:	a34c      	add	r3, pc, #304	; (adr r3, 80116f8 <__ieee754_rem_pio2+0x2f0>)
 80115c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80115d0:	f7ef f812 	bl	80005f8 <__aeabi_dmul>
 80115d4:	4606      	mov	r6, r0
 80115d6:	460f      	mov	r7, r1
 80115d8:	4602      	mov	r2, r0
 80115da:	460b      	mov	r3, r1
 80115dc:	4650      	mov	r0, sl
 80115de:	4659      	mov	r1, fp
 80115e0:	f7ee fe52 	bl	8000288 <__aeabi_dsub>
 80115e4:	4602      	mov	r2, r0
 80115e6:	460b      	mov	r3, r1
 80115e8:	4680      	mov	r8, r0
 80115ea:	4689      	mov	r9, r1
 80115ec:	4650      	mov	r0, sl
 80115ee:	4659      	mov	r1, fp
 80115f0:	f7ee fe4a 	bl	8000288 <__aeabi_dsub>
 80115f4:	4632      	mov	r2, r6
 80115f6:	463b      	mov	r3, r7
 80115f8:	f7ee fe46 	bl	8000288 <__aeabi_dsub>
 80115fc:	a340      	add	r3, pc, #256	; (adr r3, 8011700 <__ieee754_rem_pio2+0x2f8>)
 80115fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011602:	4606      	mov	r6, r0
 8011604:	460f      	mov	r7, r1
 8011606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801160a:	f7ee fff5 	bl	80005f8 <__aeabi_dmul>
 801160e:	4632      	mov	r2, r6
 8011610:	463b      	mov	r3, r7
 8011612:	f7ee fe39 	bl	8000288 <__aeabi_dsub>
 8011616:	4602      	mov	r2, r0
 8011618:	460b      	mov	r3, r1
 801161a:	4606      	mov	r6, r0
 801161c:	460f      	mov	r7, r1
 801161e:	4640      	mov	r0, r8
 8011620:	4649      	mov	r1, r9
 8011622:	f7ee fe31 	bl	8000288 <__aeabi_dsub>
 8011626:	9a05      	ldr	r2, [sp, #20]
 8011628:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801162c:	1ad3      	subs	r3, r2, r3
 801162e:	2b31      	cmp	r3, #49	; 0x31
 8011630:	dc20      	bgt.n	8011674 <__ieee754_rem_pio2+0x26c>
 8011632:	e9c4 0100 	strd	r0, r1, [r4]
 8011636:	46c2      	mov	sl, r8
 8011638:	46cb      	mov	fp, r9
 801163a:	e9d4 8900 	ldrd	r8, r9, [r4]
 801163e:	4650      	mov	r0, sl
 8011640:	4642      	mov	r2, r8
 8011642:	464b      	mov	r3, r9
 8011644:	4659      	mov	r1, fp
 8011646:	f7ee fe1f 	bl	8000288 <__aeabi_dsub>
 801164a:	463b      	mov	r3, r7
 801164c:	4632      	mov	r2, r6
 801164e:	f7ee fe1b 	bl	8000288 <__aeabi_dsub>
 8011652:	9b04      	ldr	r3, [sp, #16]
 8011654:	2b00      	cmp	r3, #0
 8011656:	e9c4 0102 	strd	r0, r1, [r4, #8]
 801165a:	f6bf af11 	bge.w	8011480 <__ieee754_rem_pio2+0x78>
 801165e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011662:	6063      	str	r3, [r4, #4]
 8011664:	f8c4 8000 	str.w	r8, [r4]
 8011668:	60a0      	str	r0, [r4, #8]
 801166a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801166e:	60e3      	str	r3, [r4, #12]
 8011670:	426d      	negs	r5, r5
 8011672:	e705      	b.n	8011480 <__ieee754_rem_pio2+0x78>
 8011674:	a326      	add	r3, pc, #152	; (adr r3, 8011710 <__ieee754_rem_pio2+0x308>)
 8011676:	e9d3 2300 	ldrd	r2, r3, [r3]
 801167a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801167e:	f7ee ffbb 	bl	80005f8 <__aeabi_dmul>
 8011682:	4606      	mov	r6, r0
 8011684:	460f      	mov	r7, r1
 8011686:	4602      	mov	r2, r0
 8011688:	460b      	mov	r3, r1
 801168a:	4640      	mov	r0, r8
 801168c:	4649      	mov	r1, r9
 801168e:	f7ee fdfb 	bl	8000288 <__aeabi_dsub>
 8011692:	4602      	mov	r2, r0
 8011694:	460b      	mov	r3, r1
 8011696:	4682      	mov	sl, r0
 8011698:	468b      	mov	fp, r1
 801169a:	4640      	mov	r0, r8
 801169c:	4649      	mov	r1, r9
 801169e:	f7ee fdf3 	bl	8000288 <__aeabi_dsub>
 80116a2:	4632      	mov	r2, r6
 80116a4:	463b      	mov	r3, r7
 80116a6:	f7ee fdef 	bl	8000288 <__aeabi_dsub>
 80116aa:	a31b      	add	r3, pc, #108	; (adr r3, 8011718 <__ieee754_rem_pio2+0x310>)
 80116ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b0:	4606      	mov	r6, r0
 80116b2:	460f      	mov	r7, r1
 80116b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80116b8:	f7ee ff9e 	bl	80005f8 <__aeabi_dmul>
 80116bc:	4632      	mov	r2, r6
 80116be:	463b      	mov	r3, r7
 80116c0:	f7ee fde2 	bl	8000288 <__aeabi_dsub>
 80116c4:	4606      	mov	r6, r0
 80116c6:	460f      	mov	r7, r1
 80116c8:	e764      	b.n	8011594 <__ieee754_rem_pio2+0x18c>
 80116ca:	4b1b      	ldr	r3, [pc, #108]	; (8011738 <__ieee754_rem_pio2+0x330>)
 80116cc:	4598      	cmp	r8, r3
 80116ce:	dd35      	ble.n	801173c <__ieee754_rem_pio2+0x334>
 80116d0:	ee10 2a10 	vmov	r2, s0
 80116d4:	463b      	mov	r3, r7
 80116d6:	4630      	mov	r0, r6
 80116d8:	4639      	mov	r1, r7
 80116da:	f7ee fdd5 	bl	8000288 <__aeabi_dsub>
 80116de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80116e2:	e9c4 0100 	strd	r0, r1, [r4]
 80116e6:	e6a1      	b.n	801142c <__ieee754_rem_pio2+0x24>
 80116e8:	54400000 	.word	0x54400000
 80116ec:	3ff921fb 	.word	0x3ff921fb
 80116f0:	1a626331 	.word	0x1a626331
 80116f4:	3dd0b461 	.word	0x3dd0b461
 80116f8:	1a600000 	.word	0x1a600000
 80116fc:	3dd0b461 	.word	0x3dd0b461
 8011700:	2e037073 	.word	0x2e037073
 8011704:	3ba3198a 	.word	0x3ba3198a
 8011708:	6dc9c883 	.word	0x6dc9c883
 801170c:	3fe45f30 	.word	0x3fe45f30
 8011710:	2e000000 	.word	0x2e000000
 8011714:	3ba3198a 	.word	0x3ba3198a
 8011718:	252049c1 	.word	0x252049c1
 801171c:	397b839a 	.word	0x397b839a
 8011720:	3fe921fb 	.word	0x3fe921fb
 8011724:	4002d97b 	.word	0x4002d97b
 8011728:	3ff921fb 	.word	0x3ff921fb
 801172c:	413921fb 	.word	0x413921fb
 8011730:	3fe00000 	.word	0x3fe00000
 8011734:	08012ac4 	.word	0x08012ac4
 8011738:	7fefffff 	.word	0x7fefffff
 801173c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8011740:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8011744:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8011748:	4630      	mov	r0, r6
 801174a:	460f      	mov	r7, r1
 801174c:	f7ef fa04 	bl	8000b58 <__aeabi_d2iz>
 8011750:	f7ee fee8 	bl	8000524 <__aeabi_i2d>
 8011754:	4602      	mov	r2, r0
 8011756:	460b      	mov	r3, r1
 8011758:	4630      	mov	r0, r6
 801175a:	4639      	mov	r1, r7
 801175c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8011760:	f7ee fd92 	bl	8000288 <__aeabi_dsub>
 8011764:	2200      	movs	r2, #0
 8011766:	4b1f      	ldr	r3, [pc, #124]	; (80117e4 <__ieee754_rem_pio2+0x3dc>)
 8011768:	f7ee ff46 	bl	80005f8 <__aeabi_dmul>
 801176c:	460f      	mov	r7, r1
 801176e:	4606      	mov	r6, r0
 8011770:	f7ef f9f2 	bl	8000b58 <__aeabi_d2iz>
 8011774:	f7ee fed6 	bl	8000524 <__aeabi_i2d>
 8011778:	4602      	mov	r2, r0
 801177a:	460b      	mov	r3, r1
 801177c:	4630      	mov	r0, r6
 801177e:	4639      	mov	r1, r7
 8011780:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011784:	f7ee fd80 	bl	8000288 <__aeabi_dsub>
 8011788:	2200      	movs	r2, #0
 801178a:	4b16      	ldr	r3, [pc, #88]	; (80117e4 <__ieee754_rem_pio2+0x3dc>)
 801178c:	f7ee ff34 	bl	80005f8 <__aeabi_dmul>
 8011790:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011794:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8011798:	f04f 0803 	mov.w	r8, #3
 801179c:	2600      	movs	r6, #0
 801179e:	2700      	movs	r7, #0
 80117a0:	4632      	mov	r2, r6
 80117a2:	463b      	mov	r3, r7
 80117a4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80117a8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80117ac:	f7ef f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80117b0:	b9b0      	cbnz	r0, 80117e0 <__ieee754_rem_pio2+0x3d8>
 80117b2:	4b0d      	ldr	r3, [pc, #52]	; (80117e8 <__ieee754_rem_pio2+0x3e0>)
 80117b4:	9301      	str	r3, [sp, #4]
 80117b6:	2302      	movs	r3, #2
 80117b8:	9300      	str	r3, [sp, #0]
 80117ba:	462a      	mov	r2, r5
 80117bc:	4643      	mov	r3, r8
 80117be:	4621      	mov	r1, r4
 80117c0:	a806      	add	r0, sp, #24
 80117c2:	f000 f98d 	bl	8011ae0 <__kernel_rem_pio2>
 80117c6:	9b04      	ldr	r3, [sp, #16]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	4605      	mov	r5, r0
 80117cc:	f6bf ae58 	bge.w	8011480 <__ieee754_rem_pio2+0x78>
 80117d0:	6863      	ldr	r3, [r4, #4]
 80117d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80117d6:	6063      	str	r3, [r4, #4]
 80117d8:	68e3      	ldr	r3, [r4, #12]
 80117da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80117de:	e746      	b.n	801166e <__ieee754_rem_pio2+0x266>
 80117e0:	46d0      	mov	r8, sl
 80117e2:	e7dd      	b.n	80117a0 <__ieee754_rem_pio2+0x398>
 80117e4:	41700000 	.word	0x41700000
 80117e8:	08012b44 	.word	0x08012b44

080117ec <__ieee754_sqrt>:
 80117ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f0:	4955      	ldr	r1, [pc, #340]	; (8011948 <__ieee754_sqrt+0x15c>)
 80117f2:	ec55 4b10 	vmov	r4, r5, d0
 80117f6:	43a9      	bics	r1, r5
 80117f8:	462b      	mov	r3, r5
 80117fa:	462a      	mov	r2, r5
 80117fc:	d112      	bne.n	8011824 <__ieee754_sqrt+0x38>
 80117fe:	ee10 2a10 	vmov	r2, s0
 8011802:	ee10 0a10 	vmov	r0, s0
 8011806:	4629      	mov	r1, r5
 8011808:	f7ee fef6 	bl	80005f8 <__aeabi_dmul>
 801180c:	4602      	mov	r2, r0
 801180e:	460b      	mov	r3, r1
 8011810:	4620      	mov	r0, r4
 8011812:	4629      	mov	r1, r5
 8011814:	f7ee fd3a 	bl	800028c <__adddf3>
 8011818:	4604      	mov	r4, r0
 801181a:	460d      	mov	r5, r1
 801181c:	ec45 4b10 	vmov	d0, r4, r5
 8011820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011824:	2d00      	cmp	r5, #0
 8011826:	ee10 0a10 	vmov	r0, s0
 801182a:	4621      	mov	r1, r4
 801182c:	dc0f      	bgt.n	801184e <__ieee754_sqrt+0x62>
 801182e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011832:	4330      	orrs	r0, r6
 8011834:	d0f2      	beq.n	801181c <__ieee754_sqrt+0x30>
 8011836:	b155      	cbz	r5, 801184e <__ieee754_sqrt+0x62>
 8011838:	ee10 2a10 	vmov	r2, s0
 801183c:	4620      	mov	r0, r4
 801183e:	4629      	mov	r1, r5
 8011840:	f7ee fd22 	bl	8000288 <__aeabi_dsub>
 8011844:	4602      	mov	r2, r0
 8011846:	460b      	mov	r3, r1
 8011848:	f7ef f800 	bl	800084c <__aeabi_ddiv>
 801184c:	e7e4      	b.n	8011818 <__ieee754_sqrt+0x2c>
 801184e:	151b      	asrs	r3, r3, #20
 8011850:	d073      	beq.n	801193a <__ieee754_sqrt+0x14e>
 8011852:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011856:	07dd      	lsls	r5, r3, #31
 8011858:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801185c:	bf48      	it	mi
 801185e:	0fc8      	lsrmi	r0, r1, #31
 8011860:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011864:	bf44      	itt	mi
 8011866:	0049      	lslmi	r1, r1, #1
 8011868:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801186c:	2500      	movs	r5, #0
 801186e:	1058      	asrs	r0, r3, #1
 8011870:	0fcb      	lsrs	r3, r1, #31
 8011872:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011876:	0049      	lsls	r1, r1, #1
 8011878:	2316      	movs	r3, #22
 801187a:	462c      	mov	r4, r5
 801187c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011880:	19a7      	adds	r7, r4, r6
 8011882:	4297      	cmp	r7, r2
 8011884:	bfde      	ittt	le
 8011886:	19bc      	addle	r4, r7, r6
 8011888:	1bd2      	suble	r2, r2, r7
 801188a:	19ad      	addle	r5, r5, r6
 801188c:	0fcf      	lsrs	r7, r1, #31
 801188e:	3b01      	subs	r3, #1
 8011890:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011894:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011898:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801189c:	d1f0      	bne.n	8011880 <__ieee754_sqrt+0x94>
 801189e:	f04f 0c20 	mov.w	ip, #32
 80118a2:	469e      	mov	lr, r3
 80118a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80118a8:	42a2      	cmp	r2, r4
 80118aa:	eb06 070e 	add.w	r7, r6, lr
 80118ae:	dc02      	bgt.n	80118b6 <__ieee754_sqrt+0xca>
 80118b0:	d112      	bne.n	80118d8 <__ieee754_sqrt+0xec>
 80118b2:	428f      	cmp	r7, r1
 80118b4:	d810      	bhi.n	80118d8 <__ieee754_sqrt+0xec>
 80118b6:	2f00      	cmp	r7, #0
 80118b8:	eb07 0e06 	add.w	lr, r7, r6
 80118bc:	da42      	bge.n	8011944 <__ieee754_sqrt+0x158>
 80118be:	f1be 0f00 	cmp.w	lr, #0
 80118c2:	db3f      	blt.n	8011944 <__ieee754_sqrt+0x158>
 80118c4:	f104 0801 	add.w	r8, r4, #1
 80118c8:	1b12      	subs	r2, r2, r4
 80118ca:	428f      	cmp	r7, r1
 80118cc:	bf88      	it	hi
 80118ce:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80118d2:	1bc9      	subs	r1, r1, r7
 80118d4:	4433      	add	r3, r6
 80118d6:	4644      	mov	r4, r8
 80118d8:	0052      	lsls	r2, r2, #1
 80118da:	f1bc 0c01 	subs.w	ip, ip, #1
 80118de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80118e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80118e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80118ea:	d1dd      	bne.n	80118a8 <__ieee754_sqrt+0xbc>
 80118ec:	430a      	orrs	r2, r1
 80118ee:	d006      	beq.n	80118fe <__ieee754_sqrt+0x112>
 80118f0:	1c5c      	adds	r4, r3, #1
 80118f2:	bf13      	iteet	ne
 80118f4:	3301      	addne	r3, #1
 80118f6:	3501      	addeq	r5, #1
 80118f8:	4663      	moveq	r3, ip
 80118fa:	f023 0301 	bicne.w	r3, r3, #1
 80118fe:	106a      	asrs	r2, r5, #1
 8011900:	085b      	lsrs	r3, r3, #1
 8011902:	07e9      	lsls	r1, r5, #31
 8011904:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011908:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801190c:	bf48      	it	mi
 801190e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011912:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011916:	461c      	mov	r4, r3
 8011918:	e780      	b.n	801181c <__ieee754_sqrt+0x30>
 801191a:	0aca      	lsrs	r2, r1, #11
 801191c:	3815      	subs	r0, #21
 801191e:	0549      	lsls	r1, r1, #21
 8011920:	2a00      	cmp	r2, #0
 8011922:	d0fa      	beq.n	801191a <__ieee754_sqrt+0x12e>
 8011924:	02d6      	lsls	r6, r2, #11
 8011926:	d50a      	bpl.n	801193e <__ieee754_sqrt+0x152>
 8011928:	f1c3 0420 	rsb	r4, r3, #32
 801192c:	fa21 f404 	lsr.w	r4, r1, r4
 8011930:	1e5d      	subs	r5, r3, #1
 8011932:	4099      	lsls	r1, r3
 8011934:	4322      	orrs	r2, r4
 8011936:	1b43      	subs	r3, r0, r5
 8011938:	e78b      	b.n	8011852 <__ieee754_sqrt+0x66>
 801193a:	4618      	mov	r0, r3
 801193c:	e7f0      	b.n	8011920 <__ieee754_sqrt+0x134>
 801193e:	0052      	lsls	r2, r2, #1
 8011940:	3301      	adds	r3, #1
 8011942:	e7ef      	b.n	8011924 <__ieee754_sqrt+0x138>
 8011944:	46a0      	mov	r8, r4
 8011946:	e7bf      	b.n	80118c8 <__ieee754_sqrt+0xdc>
 8011948:	7ff00000 	.word	0x7ff00000
 801194c:	00000000 	.word	0x00000000

08011950 <__kernel_cos>:
 8011950:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011954:	ec59 8b10 	vmov	r8, r9, d0
 8011958:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 801195c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8011960:	ed2d 8b02 	vpush	{d8}
 8011964:	eeb0 8a41 	vmov.f32	s16, s2
 8011968:	eef0 8a61 	vmov.f32	s17, s3
 801196c:	da07      	bge.n	801197e <__kernel_cos+0x2e>
 801196e:	ee10 0a10 	vmov	r0, s0
 8011972:	4649      	mov	r1, r9
 8011974:	f7ef f8f0 	bl	8000b58 <__aeabi_d2iz>
 8011978:	2800      	cmp	r0, #0
 801197a:	f000 8089 	beq.w	8011a90 <__kernel_cos+0x140>
 801197e:	4642      	mov	r2, r8
 8011980:	464b      	mov	r3, r9
 8011982:	4640      	mov	r0, r8
 8011984:	4649      	mov	r1, r9
 8011986:	f7ee fe37 	bl	80005f8 <__aeabi_dmul>
 801198a:	2200      	movs	r2, #0
 801198c:	4b4e      	ldr	r3, [pc, #312]	; (8011ac8 <__kernel_cos+0x178>)
 801198e:	4604      	mov	r4, r0
 8011990:	460d      	mov	r5, r1
 8011992:	f7ee fe31 	bl	80005f8 <__aeabi_dmul>
 8011996:	a340      	add	r3, pc, #256	; (adr r3, 8011a98 <__kernel_cos+0x148>)
 8011998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801199c:	4682      	mov	sl, r0
 801199e:	468b      	mov	fp, r1
 80119a0:	4620      	mov	r0, r4
 80119a2:	4629      	mov	r1, r5
 80119a4:	f7ee fe28 	bl	80005f8 <__aeabi_dmul>
 80119a8:	a33d      	add	r3, pc, #244	; (adr r3, 8011aa0 <__kernel_cos+0x150>)
 80119aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ae:	f7ee fc6d 	bl	800028c <__adddf3>
 80119b2:	4622      	mov	r2, r4
 80119b4:	462b      	mov	r3, r5
 80119b6:	f7ee fe1f 	bl	80005f8 <__aeabi_dmul>
 80119ba:	a33b      	add	r3, pc, #236	; (adr r3, 8011aa8 <__kernel_cos+0x158>)
 80119bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119c0:	f7ee fc62 	bl	8000288 <__aeabi_dsub>
 80119c4:	4622      	mov	r2, r4
 80119c6:	462b      	mov	r3, r5
 80119c8:	f7ee fe16 	bl	80005f8 <__aeabi_dmul>
 80119cc:	a338      	add	r3, pc, #224	; (adr r3, 8011ab0 <__kernel_cos+0x160>)
 80119ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119d2:	f7ee fc5b 	bl	800028c <__adddf3>
 80119d6:	4622      	mov	r2, r4
 80119d8:	462b      	mov	r3, r5
 80119da:	f7ee fe0d 	bl	80005f8 <__aeabi_dmul>
 80119de:	a336      	add	r3, pc, #216	; (adr r3, 8011ab8 <__kernel_cos+0x168>)
 80119e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119e4:	f7ee fc50 	bl	8000288 <__aeabi_dsub>
 80119e8:	4622      	mov	r2, r4
 80119ea:	462b      	mov	r3, r5
 80119ec:	f7ee fe04 	bl	80005f8 <__aeabi_dmul>
 80119f0:	a333      	add	r3, pc, #204	; (adr r3, 8011ac0 <__kernel_cos+0x170>)
 80119f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119f6:	f7ee fc49 	bl	800028c <__adddf3>
 80119fa:	4622      	mov	r2, r4
 80119fc:	462b      	mov	r3, r5
 80119fe:	f7ee fdfb 	bl	80005f8 <__aeabi_dmul>
 8011a02:	4622      	mov	r2, r4
 8011a04:	462b      	mov	r3, r5
 8011a06:	f7ee fdf7 	bl	80005f8 <__aeabi_dmul>
 8011a0a:	ec53 2b18 	vmov	r2, r3, d8
 8011a0e:	4604      	mov	r4, r0
 8011a10:	460d      	mov	r5, r1
 8011a12:	4640      	mov	r0, r8
 8011a14:	4649      	mov	r1, r9
 8011a16:	f7ee fdef 	bl	80005f8 <__aeabi_dmul>
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	4602      	mov	r2, r0
 8011a1e:	4629      	mov	r1, r5
 8011a20:	4620      	mov	r0, r4
 8011a22:	f7ee fc31 	bl	8000288 <__aeabi_dsub>
 8011a26:	4b29      	ldr	r3, [pc, #164]	; (8011acc <__kernel_cos+0x17c>)
 8011a28:	429e      	cmp	r6, r3
 8011a2a:	4680      	mov	r8, r0
 8011a2c:	4689      	mov	r9, r1
 8011a2e:	dc11      	bgt.n	8011a54 <__kernel_cos+0x104>
 8011a30:	4602      	mov	r2, r0
 8011a32:	460b      	mov	r3, r1
 8011a34:	4650      	mov	r0, sl
 8011a36:	4659      	mov	r1, fp
 8011a38:	f7ee fc26 	bl	8000288 <__aeabi_dsub>
 8011a3c:	460b      	mov	r3, r1
 8011a3e:	4924      	ldr	r1, [pc, #144]	; (8011ad0 <__kernel_cos+0x180>)
 8011a40:	4602      	mov	r2, r0
 8011a42:	2000      	movs	r0, #0
 8011a44:	f7ee fc20 	bl	8000288 <__aeabi_dsub>
 8011a48:	ecbd 8b02 	vpop	{d8}
 8011a4c:	ec41 0b10 	vmov	d0, r0, r1
 8011a50:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a54:	4b1f      	ldr	r3, [pc, #124]	; (8011ad4 <__kernel_cos+0x184>)
 8011a56:	491e      	ldr	r1, [pc, #120]	; (8011ad0 <__kernel_cos+0x180>)
 8011a58:	429e      	cmp	r6, r3
 8011a5a:	bfcc      	ite	gt
 8011a5c:	4d1e      	ldrgt	r5, [pc, #120]	; (8011ad8 <__kernel_cos+0x188>)
 8011a5e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8011a62:	2400      	movs	r4, #0
 8011a64:	4622      	mov	r2, r4
 8011a66:	462b      	mov	r3, r5
 8011a68:	2000      	movs	r0, #0
 8011a6a:	f7ee fc0d 	bl	8000288 <__aeabi_dsub>
 8011a6e:	4622      	mov	r2, r4
 8011a70:	4606      	mov	r6, r0
 8011a72:	460f      	mov	r7, r1
 8011a74:	462b      	mov	r3, r5
 8011a76:	4650      	mov	r0, sl
 8011a78:	4659      	mov	r1, fp
 8011a7a:	f7ee fc05 	bl	8000288 <__aeabi_dsub>
 8011a7e:	4642      	mov	r2, r8
 8011a80:	464b      	mov	r3, r9
 8011a82:	f7ee fc01 	bl	8000288 <__aeabi_dsub>
 8011a86:	4602      	mov	r2, r0
 8011a88:	460b      	mov	r3, r1
 8011a8a:	4630      	mov	r0, r6
 8011a8c:	4639      	mov	r1, r7
 8011a8e:	e7d9      	b.n	8011a44 <__kernel_cos+0xf4>
 8011a90:	2000      	movs	r0, #0
 8011a92:	490f      	ldr	r1, [pc, #60]	; (8011ad0 <__kernel_cos+0x180>)
 8011a94:	e7d8      	b.n	8011a48 <__kernel_cos+0xf8>
 8011a96:	bf00      	nop
 8011a98:	be8838d4 	.word	0xbe8838d4
 8011a9c:	bda8fae9 	.word	0xbda8fae9
 8011aa0:	bdb4b1c4 	.word	0xbdb4b1c4
 8011aa4:	3e21ee9e 	.word	0x3e21ee9e
 8011aa8:	809c52ad 	.word	0x809c52ad
 8011aac:	3e927e4f 	.word	0x3e927e4f
 8011ab0:	19cb1590 	.word	0x19cb1590
 8011ab4:	3efa01a0 	.word	0x3efa01a0
 8011ab8:	16c15177 	.word	0x16c15177
 8011abc:	3f56c16c 	.word	0x3f56c16c
 8011ac0:	5555554c 	.word	0x5555554c
 8011ac4:	3fa55555 	.word	0x3fa55555
 8011ac8:	3fe00000 	.word	0x3fe00000
 8011acc:	3fd33332 	.word	0x3fd33332
 8011ad0:	3ff00000 	.word	0x3ff00000
 8011ad4:	3fe90000 	.word	0x3fe90000
 8011ad8:	3fd20000 	.word	0x3fd20000
 8011adc:	00000000 	.word	0x00000000

08011ae0 <__kernel_rem_pio2>:
 8011ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ae4:	ed2d 8b02 	vpush	{d8}
 8011ae8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011aec:	1ed4      	subs	r4, r2, #3
 8011aee:	9308      	str	r3, [sp, #32]
 8011af0:	9101      	str	r1, [sp, #4]
 8011af2:	4bc5      	ldr	r3, [pc, #788]	; (8011e08 <__kernel_rem_pio2+0x328>)
 8011af4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011af6:	9009      	str	r0, [sp, #36]	; 0x24
 8011af8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011afc:	9304      	str	r3, [sp, #16]
 8011afe:	9b08      	ldr	r3, [sp, #32]
 8011b00:	3b01      	subs	r3, #1
 8011b02:	9307      	str	r3, [sp, #28]
 8011b04:	2318      	movs	r3, #24
 8011b06:	fb94 f4f3 	sdiv	r4, r4, r3
 8011b0a:	f06f 0317 	mvn.w	r3, #23
 8011b0e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8011b12:	fb04 3303 	mla	r3, r4, r3, r3
 8011b16:	eb03 0a02 	add.w	sl, r3, r2
 8011b1a:	9b04      	ldr	r3, [sp, #16]
 8011b1c:	9a07      	ldr	r2, [sp, #28]
 8011b1e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8011df8 <__kernel_rem_pio2+0x318>
 8011b22:	eb03 0802 	add.w	r8, r3, r2
 8011b26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011b28:	1aa7      	subs	r7, r4, r2
 8011b2a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011b2e:	ae22      	add	r6, sp, #136	; 0x88
 8011b30:	2500      	movs	r5, #0
 8011b32:	4545      	cmp	r5, r8
 8011b34:	dd13      	ble.n	8011b5e <__kernel_rem_pio2+0x7e>
 8011b36:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8011df8 <__kernel_rem_pio2+0x318>
 8011b3a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011b3e:	2600      	movs	r6, #0
 8011b40:	9b04      	ldr	r3, [sp, #16]
 8011b42:	429e      	cmp	r6, r3
 8011b44:	dc32      	bgt.n	8011bac <__kernel_rem_pio2+0xcc>
 8011b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011b48:	9302      	str	r3, [sp, #8]
 8011b4a:	9b08      	ldr	r3, [sp, #32]
 8011b4c:	199d      	adds	r5, r3, r6
 8011b4e:	ab22      	add	r3, sp, #136	; 0x88
 8011b50:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011b54:	9306      	str	r3, [sp, #24]
 8011b56:	ec59 8b18 	vmov	r8, r9, d8
 8011b5a:	2700      	movs	r7, #0
 8011b5c:	e01f      	b.n	8011b9e <__kernel_rem_pio2+0xbe>
 8011b5e:	42ef      	cmn	r7, r5
 8011b60:	d407      	bmi.n	8011b72 <__kernel_rem_pio2+0x92>
 8011b62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011b66:	f7ee fcdd 	bl	8000524 <__aeabi_i2d>
 8011b6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011b6e:	3501      	adds	r5, #1
 8011b70:	e7df      	b.n	8011b32 <__kernel_rem_pio2+0x52>
 8011b72:	ec51 0b18 	vmov	r0, r1, d8
 8011b76:	e7f8      	b.n	8011b6a <__kernel_rem_pio2+0x8a>
 8011b78:	9906      	ldr	r1, [sp, #24]
 8011b7a:	9d02      	ldr	r5, [sp, #8]
 8011b7c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8011b80:	9106      	str	r1, [sp, #24]
 8011b82:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8011b86:	9502      	str	r5, [sp, #8]
 8011b88:	f7ee fd36 	bl	80005f8 <__aeabi_dmul>
 8011b8c:	4602      	mov	r2, r0
 8011b8e:	460b      	mov	r3, r1
 8011b90:	4640      	mov	r0, r8
 8011b92:	4649      	mov	r1, r9
 8011b94:	f7ee fb7a 	bl	800028c <__adddf3>
 8011b98:	3701      	adds	r7, #1
 8011b9a:	4680      	mov	r8, r0
 8011b9c:	4689      	mov	r9, r1
 8011b9e:	9b07      	ldr	r3, [sp, #28]
 8011ba0:	429f      	cmp	r7, r3
 8011ba2:	dde9      	ble.n	8011b78 <__kernel_rem_pio2+0x98>
 8011ba4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8011ba8:	3601      	adds	r6, #1
 8011baa:	e7c9      	b.n	8011b40 <__kernel_rem_pio2+0x60>
 8011bac:	9b04      	ldr	r3, [sp, #16]
 8011bae:	aa0e      	add	r2, sp, #56	; 0x38
 8011bb0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011bb4:	930c      	str	r3, [sp, #48]	; 0x30
 8011bb6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011bb8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011bbc:	9c04      	ldr	r4, [sp, #16]
 8011bbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8011bc0:	ab9a      	add	r3, sp, #616	; 0x268
 8011bc2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8011bc6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011bca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8011bce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8011bd2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8011bd6:	ab9a      	add	r3, sp, #616	; 0x268
 8011bd8:	445b      	add	r3, fp
 8011bda:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8011bde:	2500      	movs	r5, #0
 8011be0:	1b63      	subs	r3, r4, r5
 8011be2:	2b00      	cmp	r3, #0
 8011be4:	dc78      	bgt.n	8011cd8 <__kernel_rem_pio2+0x1f8>
 8011be6:	4650      	mov	r0, sl
 8011be8:	ec49 8b10 	vmov	d0, r8, r9
 8011bec:	f000 fc04 	bl	80123f8 <scalbn>
 8011bf0:	ec57 6b10 	vmov	r6, r7, d0
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011bfa:	ee10 0a10 	vmov	r0, s0
 8011bfe:	4639      	mov	r1, r7
 8011c00:	f7ee fcfa 	bl	80005f8 <__aeabi_dmul>
 8011c04:	ec41 0b10 	vmov	d0, r0, r1
 8011c08:	f000 fb6e 	bl	80122e8 <floor>
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	ec51 0b10 	vmov	r0, r1, d0
 8011c12:	4b7e      	ldr	r3, [pc, #504]	; (8011e0c <__kernel_rem_pio2+0x32c>)
 8011c14:	f7ee fcf0 	bl	80005f8 <__aeabi_dmul>
 8011c18:	4602      	mov	r2, r0
 8011c1a:	460b      	mov	r3, r1
 8011c1c:	4630      	mov	r0, r6
 8011c1e:	4639      	mov	r1, r7
 8011c20:	f7ee fb32 	bl	8000288 <__aeabi_dsub>
 8011c24:	460f      	mov	r7, r1
 8011c26:	4606      	mov	r6, r0
 8011c28:	f7ee ff96 	bl	8000b58 <__aeabi_d2iz>
 8011c2c:	9006      	str	r0, [sp, #24]
 8011c2e:	f7ee fc79 	bl	8000524 <__aeabi_i2d>
 8011c32:	4602      	mov	r2, r0
 8011c34:	460b      	mov	r3, r1
 8011c36:	4630      	mov	r0, r6
 8011c38:	4639      	mov	r1, r7
 8011c3a:	f7ee fb25 	bl	8000288 <__aeabi_dsub>
 8011c3e:	f1ba 0f00 	cmp.w	sl, #0
 8011c42:	4606      	mov	r6, r0
 8011c44:	460f      	mov	r7, r1
 8011c46:	dd6c      	ble.n	8011d22 <__kernel_rem_pio2+0x242>
 8011c48:	1e62      	subs	r2, r4, #1
 8011c4a:	ab0e      	add	r3, sp, #56	; 0x38
 8011c4c:	f1ca 0118 	rsb	r1, sl, #24
 8011c50:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011c54:	9d06      	ldr	r5, [sp, #24]
 8011c56:	fa40 f301 	asr.w	r3, r0, r1
 8011c5a:	441d      	add	r5, r3
 8011c5c:	408b      	lsls	r3, r1
 8011c5e:	1ac0      	subs	r0, r0, r3
 8011c60:	ab0e      	add	r3, sp, #56	; 0x38
 8011c62:	9506      	str	r5, [sp, #24]
 8011c64:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011c68:	f1ca 0317 	rsb	r3, sl, #23
 8011c6c:	fa40 f303 	asr.w	r3, r0, r3
 8011c70:	9302      	str	r3, [sp, #8]
 8011c72:	9b02      	ldr	r3, [sp, #8]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	dd62      	ble.n	8011d3e <__kernel_rem_pio2+0x25e>
 8011c78:	9b06      	ldr	r3, [sp, #24]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	3301      	adds	r3, #1
 8011c7e:	9306      	str	r3, [sp, #24]
 8011c80:	4615      	mov	r5, r2
 8011c82:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011c86:	4294      	cmp	r4, r2
 8011c88:	f300 8095 	bgt.w	8011db6 <__kernel_rem_pio2+0x2d6>
 8011c8c:	f1ba 0f00 	cmp.w	sl, #0
 8011c90:	dd07      	ble.n	8011ca2 <__kernel_rem_pio2+0x1c2>
 8011c92:	f1ba 0f01 	cmp.w	sl, #1
 8011c96:	f000 80a2 	beq.w	8011dde <__kernel_rem_pio2+0x2fe>
 8011c9a:	f1ba 0f02 	cmp.w	sl, #2
 8011c9e:	f000 80c1 	beq.w	8011e24 <__kernel_rem_pio2+0x344>
 8011ca2:	9b02      	ldr	r3, [sp, #8]
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	d14a      	bne.n	8011d3e <__kernel_rem_pio2+0x25e>
 8011ca8:	4632      	mov	r2, r6
 8011caa:	463b      	mov	r3, r7
 8011cac:	2000      	movs	r0, #0
 8011cae:	4958      	ldr	r1, [pc, #352]	; (8011e10 <__kernel_rem_pio2+0x330>)
 8011cb0:	f7ee faea 	bl	8000288 <__aeabi_dsub>
 8011cb4:	4606      	mov	r6, r0
 8011cb6:	460f      	mov	r7, r1
 8011cb8:	2d00      	cmp	r5, #0
 8011cba:	d040      	beq.n	8011d3e <__kernel_rem_pio2+0x25e>
 8011cbc:	4650      	mov	r0, sl
 8011cbe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8011e00 <__kernel_rem_pio2+0x320>
 8011cc2:	f000 fb99 	bl	80123f8 <scalbn>
 8011cc6:	4630      	mov	r0, r6
 8011cc8:	4639      	mov	r1, r7
 8011cca:	ec53 2b10 	vmov	r2, r3, d0
 8011cce:	f7ee fadb 	bl	8000288 <__aeabi_dsub>
 8011cd2:	4606      	mov	r6, r0
 8011cd4:	460f      	mov	r7, r1
 8011cd6:	e032      	b.n	8011d3e <__kernel_rem_pio2+0x25e>
 8011cd8:	2200      	movs	r2, #0
 8011cda:	4b4e      	ldr	r3, [pc, #312]	; (8011e14 <__kernel_rem_pio2+0x334>)
 8011cdc:	4640      	mov	r0, r8
 8011cde:	4649      	mov	r1, r9
 8011ce0:	f7ee fc8a 	bl	80005f8 <__aeabi_dmul>
 8011ce4:	f7ee ff38 	bl	8000b58 <__aeabi_d2iz>
 8011ce8:	f7ee fc1c 	bl	8000524 <__aeabi_i2d>
 8011cec:	2200      	movs	r2, #0
 8011cee:	4b4a      	ldr	r3, [pc, #296]	; (8011e18 <__kernel_rem_pio2+0x338>)
 8011cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cf4:	f7ee fc80 	bl	80005f8 <__aeabi_dmul>
 8011cf8:	4602      	mov	r2, r0
 8011cfa:	460b      	mov	r3, r1
 8011cfc:	4640      	mov	r0, r8
 8011cfe:	4649      	mov	r1, r9
 8011d00:	f7ee fac2 	bl	8000288 <__aeabi_dsub>
 8011d04:	f7ee ff28 	bl	8000b58 <__aeabi_d2iz>
 8011d08:	ab0e      	add	r3, sp, #56	; 0x38
 8011d0a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8011d0e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8011d12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011d16:	f7ee fab9 	bl	800028c <__adddf3>
 8011d1a:	3501      	adds	r5, #1
 8011d1c:	4680      	mov	r8, r0
 8011d1e:	4689      	mov	r9, r1
 8011d20:	e75e      	b.n	8011be0 <__kernel_rem_pio2+0x100>
 8011d22:	d105      	bne.n	8011d30 <__kernel_rem_pio2+0x250>
 8011d24:	1e63      	subs	r3, r4, #1
 8011d26:	aa0e      	add	r2, sp, #56	; 0x38
 8011d28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011d2c:	15c3      	asrs	r3, r0, #23
 8011d2e:	e79f      	b.n	8011c70 <__kernel_rem_pio2+0x190>
 8011d30:	2200      	movs	r2, #0
 8011d32:	4b3a      	ldr	r3, [pc, #232]	; (8011e1c <__kernel_rem_pio2+0x33c>)
 8011d34:	f7ee fee6 	bl	8000b04 <__aeabi_dcmpge>
 8011d38:	2800      	cmp	r0, #0
 8011d3a:	d139      	bne.n	8011db0 <__kernel_rem_pio2+0x2d0>
 8011d3c:	9002      	str	r0, [sp, #8]
 8011d3e:	2200      	movs	r2, #0
 8011d40:	2300      	movs	r3, #0
 8011d42:	4630      	mov	r0, r6
 8011d44:	4639      	mov	r1, r7
 8011d46:	f7ee febf 	bl	8000ac8 <__aeabi_dcmpeq>
 8011d4a:	2800      	cmp	r0, #0
 8011d4c:	f000 80c7 	beq.w	8011ede <__kernel_rem_pio2+0x3fe>
 8011d50:	1e65      	subs	r5, r4, #1
 8011d52:	462b      	mov	r3, r5
 8011d54:	2200      	movs	r2, #0
 8011d56:	9904      	ldr	r1, [sp, #16]
 8011d58:	428b      	cmp	r3, r1
 8011d5a:	da6a      	bge.n	8011e32 <__kernel_rem_pio2+0x352>
 8011d5c:	2a00      	cmp	r2, #0
 8011d5e:	f000 8088 	beq.w	8011e72 <__kernel_rem_pio2+0x392>
 8011d62:	ab0e      	add	r3, sp, #56	; 0x38
 8011d64:	f1aa 0a18 	sub.w	sl, sl, #24
 8011d68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f000 80b4 	beq.w	8011eda <__kernel_rem_pio2+0x3fa>
 8011d72:	4650      	mov	r0, sl
 8011d74:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8011e00 <__kernel_rem_pio2+0x320>
 8011d78:	f000 fb3e 	bl	80123f8 <scalbn>
 8011d7c:	00ec      	lsls	r4, r5, #3
 8011d7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011d80:	191e      	adds	r6, r3, r4
 8011d82:	ec59 8b10 	vmov	r8, r9, d0
 8011d86:	f106 0a08 	add.w	sl, r6, #8
 8011d8a:	462f      	mov	r7, r5
 8011d8c:	2f00      	cmp	r7, #0
 8011d8e:	f280 80df 	bge.w	8011f50 <__kernel_rem_pio2+0x470>
 8011d92:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8011df8 <__kernel_rem_pio2+0x318>
 8011d96:	f04f 0a00 	mov.w	sl, #0
 8011d9a:	eba5 030a 	sub.w	r3, r5, sl
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	f2c0 810a 	blt.w	8011fb8 <__kernel_rem_pio2+0x4d8>
 8011da4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8011e20 <__kernel_rem_pio2+0x340>
 8011da8:	ec59 8b18 	vmov	r8, r9, d8
 8011dac:	2700      	movs	r7, #0
 8011dae:	e0f5      	b.n	8011f9c <__kernel_rem_pio2+0x4bc>
 8011db0:	2302      	movs	r3, #2
 8011db2:	9302      	str	r3, [sp, #8]
 8011db4:	e760      	b.n	8011c78 <__kernel_rem_pio2+0x198>
 8011db6:	ab0e      	add	r3, sp, #56	; 0x38
 8011db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011dbc:	b94d      	cbnz	r5, 8011dd2 <__kernel_rem_pio2+0x2f2>
 8011dbe:	b12b      	cbz	r3, 8011dcc <__kernel_rem_pio2+0x2ec>
 8011dc0:	a80e      	add	r0, sp, #56	; 0x38
 8011dc2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011dc6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011dca:	2301      	movs	r3, #1
 8011dcc:	3201      	adds	r2, #1
 8011dce:	461d      	mov	r5, r3
 8011dd0:	e759      	b.n	8011c86 <__kernel_rem_pio2+0x1a6>
 8011dd2:	a80e      	add	r0, sp, #56	; 0x38
 8011dd4:	1acb      	subs	r3, r1, r3
 8011dd6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8011dda:	462b      	mov	r3, r5
 8011ddc:	e7f6      	b.n	8011dcc <__kernel_rem_pio2+0x2ec>
 8011dde:	1e62      	subs	r2, r4, #1
 8011de0:	ab0e      	add	r3, sp, #56	; 0x38
 8011de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011de6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011dea:	a90e      	add	r1, sp, #56	; 0x38
 8011dec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011df0:	e757      	b.n	8011ca2 <__kernel_rem_pio2+0x1c2>
 8011df2:	bf00      	nop
 8011df4:	f3af 8000 	nop.w
	...
 8011e04:	3ff00000 	.word	0x3ff00000
 8011e08:	08012c90 	.word	0x08012c90
 8011e0c:	40200000 	.word	0x40200000
 8011e10:	3ff00000 	.word	0x3ff00000
 8011e14:	3e700000 	.word	0x3e700000
 8011e18:	41700000 	.word	0x41700000
 8011e1c:	3fe00000 	.word	0x3fe00000
 8011e20:	08012c50 	.word	0x08012c50
 8011e24:	1e62      	subs	r2, r4, #1
 8011e26:	ab0e      	add	r3, sp, #56	; 0x38
 8011e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011e30:	e7db      	b.n	8011dea <__kernel_rem_pio2+0x30a>
 8011e32:	a90e      	add	r1, sp, #56	; 0x38
 8011e34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011e38:	3b01      	subs	r3, #1
 8011e3a:	430a      	orrs	r2, r1
 8011e3c:	e78b      	b.n	8011d56 <__kernel_rem_pio2+0x276>
 8011e3e:	3301      	adds	r3, #1
 8011e40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011e44:	2900      	cmp	r1, #0
 8011e46:	d0fa      	beq.n	8011e3e <__kernel_rem_pio2+0x35e>
 8011e48:	9a08      	ldr	r2, [sp, #32]
 8011e4a:	4422      	add	r2, r4
 8011e4c:	00d2      	lsls	r2, r2, #3
 8011e4e:	a922      	add	r1, sp, #136	; 0x88
 8011e50:	18e3      	adds	r3, r4, r3
 8011e52:	9206      	str	r2, [sp, #24]
 8011e54:	440a      	add	r2, r1
 8011e56:	9302      	str	r3, [sp, #8]
 8011e58:	f10b 0108 	add.w	r1, fp, #8
 8011e5c:	f102 0308 	add.w	r3, r2, #8
 8011e60:	1c66      	adds	r6, r4, #1
 8011e62:	910a      	str	r1, [sp, #40]	; 0x28
 8011e64:	2500      	movs	r5, #0
 8011e66:	930d      	str	r3, [sp, #52]	; 0x34
 8011e68:	9b02      	ldr	r3, [sp, #8]
 8011e6a:	42b3      	cmp	r3, r6
 8011e6c:	da04      	bge.n	8011e78 <__kernel_rem_pio2+0x398>
 8011e6e:	461c      	mov	r4, r3
 8011e70:	e6a6      	b.n	8011bc0 <__kernel_rem_pio2+0xe0>
 8011e72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011e74:	2301      	movs	r3, #1
 8011e76:	e7e3      	b.n	8011e40 <__kernel_rem_pio2+0x360>
 8011e78:	9b06      	ldr	r3, [sp, #24]
 8011e7a:	18ef      	adds	r7, r5, r3
 8011e7c:	ab22      	add	r3, sp, #136	; 0x88
 8011e7e:	441f      	add	r7, r3
 8011e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011e82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8011e86:	f7ee fb4d 	bl	8000524 <__aeabi_i2d>
 8011e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011e8c:	461c      	mov	r4, r3
 8011e8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011e90:	e9c7 0100 	strd	r0, r1, [r7]
 8011e94:	eb03 0b05 	add.w	fp, r3, r5
 8011e98:	2700      	movs	r7, #0
 8011e9a:	f04f 0800 	mov.w	r8, #0
 8011e9e:	f04f 0900 	mov.w	r9, #0
 8011ea2:	9b07      	ldr	r3, [sp, #28]
 8011ea4:	429f      	cmp	r7, r3
 8011ea6:	dd08      	ble.n	8011eba <__kernel_rem_pio2+0x3da>
 8011ea8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011eaa:	aa72      	add	r2, sp, #456	; 0x1c8
 8011eac:	18eb      	adds	r3, r5, r3
 8011eae:	4413      	add	r3, r2
 8011eb0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8011eb4:	3601      	adds	r6, #1
 8011eb6:	3508      	adds	r5, #8
 8011eb8:	e7d6      	b.n	8011e68 <__kernel_rem_pio2+0x388>
 8011eba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011ebe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011ec2:	f7ee fb99 	bl	80005f8 <__aeabi_dmul>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	460b      	mov	r3, r1
 8011eca:	4640      	mov	r0, r8
 8011ecc:	4649      	mov	r1, r9
 8011ece:	f7ee f9dd 	bl	800028c <__adddf3>
 8011ed2:	3701      	adds	r7, #1
 8011ed4:	4680      	mov	r8, r0
 8011ed6:	4689      	mov	r9, r1
 8011ed8:	e7e3      	b.n	8011ea2 <__kernel_rem_pio2+0x3c2>
 8011eda:	3d01      	subs	r5, #1
 8011edc:	e741      	b.n	8011d62 <__kernel_rem_pio2+0x282>
 8011ede:	f1ca 0000 	rsb	r0, sl, #0
 8011ee2:	ec47 6b10 	vmov	d0, r6, r7
 8011ee6:	f000 fa87 	bl	80123f8 <scalbn>
 8011eea:	ec57 6b10 	vmov	r6, r7, d0
 8011eee:	2200      	movs	r2, #0
 8011ef0:	4b99      	ldr	r3, [pc, #612]	; (8012158 <__kernel_rem_pio2+0x678>)
 8011ef2:	ee10 0a10 	vmov	r0, s0
 8011ef6:	4639      	mov	r1, r7
 8011ef8:	f7ee fe04 	bl	8000b04 <__aeabi_dcmpge>
 8011efc:	b1f8      	cbz	r0, 8011f3e <__kernel_rem_pio2+0x45e>
 8011efe:	2200      	movs	r2, #0
 8011f00:	4b96      	ldr	r3, [pc, #600]	; (801215c <__kernel_rem_pio2+0x67c>)
 8011f02:	4630      	mov	r0, r6
 8011f04:	4639      	mov	r1, r7
 8011f06:	f7ee fb77 	bl	80005f8 <__aeabi_dmul>
 8011f0a:	f7ee fe25 	bl	8000b58 <__aeabi_d2iz>
 8011f0e:	4680      	mov	r8, r0
 8011f10:	f7ee fb08 	bl	8000524 <__aeabi_i2d>
 8011f14:	2200      	movs	r2, #0
 8011f16:	4b90      	ldr	r3, [pc, #576]	; (8012158 <__kernel_rem_pio2+0x678>)
 8011f18:	f7ee fb6e 	bl	80005f8 <__aeabi_dmul>
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	4602      	mov	r2, r0
 8011f20:	4639      	mov	r1, r7
 8011f22:	4630      	mov	r0, r6
 8011f24:	f7ee f9b0 	bl	8000288 <__aeabi_dsub>
 8011f28:	f7ee fe16 	bl	8000b58 <__aeabi_d2iz>
 8011f2c:	1c65      	adds	r5, r4, #1
 8011f2e:	ab0e      	add	r3, sp, #56	; 0x38
 8011f30:	f10a 0a18 	add.w	sl, sl, #24
 8011f34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011f38:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011f3c:	e719      	b.n	8011d72 <__kernel_rem_pio2+0x292>
 8011f3e:	4630      	mov	r0, r6
 8011f40:	4639      	mov	r1, r7
 8011f42:	f7ee fe09 	bl	8000b58 <__aeabi_d2iz>
 8011f46:	ab0e      	add	r3, sp, #56	; 0x38
 8011f48:	4625      	mov	r5, r4
 8011f4a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011f4e:	e710      	b.n	8011d72 <__kernel_rem_pio2+0x292>
 8011f50:	ab0e      	add	r3, sp, #56	; 0x38
 8011f52:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8011f56:	f7ee fae5 	bl	8000524 <__aeabi_i2d>
 8011f5a:	4642      	mov	r2, r8
 8011f5c:	464b      	mov	r3, r9
 8011f5e:	f7ee fb4b 	bl	80005f8 <__aeabi_dmul>
 8011f62:	2200      	movs	r2, #0
 8011f64:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8011f68:	4b7c      	ldr	r3, [pc, #496]	; (801215c <__kernel_rem_pio2+0x67c>)
 8011f6a:	4640      	mov	r0, r8
 8011f6c:	4649      	mov	r1, r9
 8011f6e:	f7ee fb43 	bl	80005f8 <__aeabi_dmul>
 8011f72:	3f01      	subs	r7, #1
 8011f74:	4680      	mov	r8, r0
 8011f76:	4689      	mov	r9, r1
 8011f78:	e708      	b.n	8011d8c <__kernel_rem_pio2+0x2ac>
 8011f7a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8011f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f82:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8011f86:	f7ee fb37 	bl	80005f8 <__aeabi_dmul>
 8011f8a:	4602      	mov	r2, r0
 8011f8c:	460b      	mov	r3, r1
 8011f8e:	4640      	mov	r0, r8
 8011f90:	4649      	mov	r1, r9
 8011f92:	f7ee f97b 	bl	800028c <__adddf3>
 8011f96:	3701      	adds	r7, #1
 8011f98:	4680      	mov	r8, r0
 8011f9a:	4689      	mov	r9, r1
 8011f9c:	9b04      	ldr	r3, [sp, #16]
 8011f9e:	429f      	cmp	r7, r3
 8011fa0:	dc01      	bgt.n	8011fa6 <__kernel_rem_pio2+0x4c6>
 8011fa2:	45ba      	cmp	sl, r7
 8011fa4:	dae9      	bge.n	8011f7a <__kernel_rem_pio2+0x49a>
 8011fa6:	ab4a      	add	r3, sp, #296	; 0x128
 8011fa8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8011fac:	e9c3 8900 	strd	r8, r9, [r3]
 8011fb0:	f10a 0a01 	add.w	sl, sl, #1
 8011fb4:	3e08      	subs	r6, #8
 8011fb6:	e6f0      	b.n	8011d9a <__kernel_rem_pio2+0x2ba>
 8011fb8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011fba:	2b03      	cmp	r3, #3
 8011fbc:	d85b      	bhi.n	8012076 <__kernel_rem_pio2+0x596>
 8011fbe:	e8df f003 	tbb	[pc, r3]
 8011fc2:	264a      	.short	0x264a
 8011fc4:	0226      	.short	0x0226
 8011fc6:	ab9a      	add	r3, sp, #616	; 0x268
 8011fc8:	441c      	add	r4, r3
 8011fca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011fce:	46a2      	mov	sl, r4
 8011fd0:	46ab      	mov	fp, r5
 8011fd2:	f1bb 0f00 	cmp.w	fp, #0
 8011fd6:	dc6c      	bgt.n	80120b2 <__kernel_rem_pio2+0x5d2>
 8011fd8:	46a2      	mov	sl, r4
 8011fda:	46ab      	mov	fp, r5
 8011fdc:	f1bb 0f01 	cmp.w	fp, #1
 8011fe0:	f300 8086 	bgt.w	80120f0 <__kernel_rem_pio2+0x610>
 8011fe4:	2000      	movs	r0, #0
 8011fe6:	2100      	movs	r1, #0
 8011fe8:	2d01      	cmp	r5, #1
 8011fea:	f300 80a0 	bgt.w	801212e <__kernel_rem_pio2+0x64e>
 8011fee:	9b02      	ldr	r3, [sp, #8]
 8011ff0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8011ff4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	f040 809e 	bne.w	801213a <__kernel_rem_pio2+0x65a>
 8011ffe:	9b01      	ldr	r3, [sp, #4]
 8012000:	e9c3 7800 	strd	r7, r8, [r3]
 8012004:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012008:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801200c:	e033      	b.n	8012076 <__kernel_rem_pio2+0x596>
 801200e:	3408      	adds	r4, #8
 8012010:	ab4a      	add	r3, sp, #296	; 0x128
 8012012:	441c      	add	r4, r3
 8012014:	462e      	mov	r6, r5
 8012016:	2000      	movs	r0, #0
 8012018:	2100      	movs	r1, #0
 801201a:	2e00      	cmp	r6, #0
 801201c:	da3a      	bge.n	8012094 <__kernel_rem_pio2+0x5b4>
 801201e:	9b02      	ldr	r3, [sp, #8]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d03d      	beq.n	80120a0 <__kernel_rem_pio2+0x5c0>
 8012024:	4602      	mov	r2, r0
 8012026:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801202a:	9c01      	ldr	r4, [sp, #4]
 801202c:	e9c4 2300 	strd	r2, r3, [r4]
 8012030:	4602      	mov	r2, r0
 8012032:	460b      	mov	r3, r1
 8012034:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012038:	f7ee f926 	bl	8000288 <__aeabi_dsub>
 801203c:	ae4c      	add	r6, sp, #304	; 0x130
 801203e:	2401      	movs	r4, #1
 8012040:	42a5      	cmp	r5, r4
 8012042:	da30      	bge.n	80120a6 <__kernel_rem_pio2+0x5c6>
 8012044:	9b02      	ldr	r3, [sp, #8]
 8012046:	b113      	cbz	r3, 801204e <__kernel_rem_pio2+0x56e>
 8012048:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801204c:	4619      	mov	r1, r3
 801204e:	9b01      	ldr	r3, [sp, #4]
 8012050:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012054:	e00f      	b.n	8012076 <__kernel_rem_pio2+0x596>
 8012056:	ab9a      	add	r3, sp, #616	; 0x268
 8012058:	441c      	add	r4, r3
 801205a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801205e:	2000      	movs	r0, #0
 8012060:	2100      	movs	r1, #0
 8012062:	2d00      	cmp	r5, #0
 8012064:	da10      	bge.n	8012088 <__kernel_rem_pio2+0x5a8>
 8012066:	9b02      	ldr	r3, [sp, #8]
 8012068:	b113      	cbz	r3, 8012070 <__kernel_rem_pio2+0x590>
 801206a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801206e:	4619      	mov	r1, r3
 8012070:	9b01      	ldr	r3, [sp, #4]
 8012072:	e9c3 0100 	strd	r0, r1, [r3]
 8012076:	9b06      	ldr	r3, [sp, #24]
 8012078:	f003 0007 	and.w	r0, r3, #7
 801207c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012080:	ecbd 8b02 	vpop	{d8}
 8012084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012088:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801208c:	f7ee f8fe 	bl	800028c <__adddf3>
 8012090:	3d01      	subs	r5, #1
 8012092:	e7e6      	b.n	8012062 <__kernel_rem_pio2+0x582>
 8012094:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012098:	f7ee f8f8 	bl	800028c <__adddf3>
 801209c:	3e01      	subs	r6, #1
 801209e:	e7bc      	b.n	801201a <__kernel_rem_pio2+0x53a>
 80120a0:	4602      	mov	r2, r0
 80120a2:	460b      	mov	r3, r1
 80120a4:	e7c1      	b.n	801202a <__kernel_rem_pio2+0x54a>
 80120a6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80120aa:	f7ee f8ef 	bl	800028c <__adddf3>
 80120ae:	3401      	adds	r4, #1
 80120b0:	e7c6      	b.n	8012040 <__kernel_rem_pio2+0x560>
 80120b2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80120b6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80120ba:	4640      	mov	r0, r8
 80120bc:	ec53 2b17 	vmov	r2, r3, d7
 80120c0:	4649      	mov	r1, r9
 80120c2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80120c6:	f7ee f8e1 	bl	800028c <__adddf3>
 80120ca:	4602      	mov	r2, r0
 80120cc:	460b      	mov	r3, r1
 80120ce:	4606      	mov	r6, r0
 80120d0:	460f      	mov	r7, r1
 80120d2:	4640      	mov	r0, r8
 80120d4:	4649      	mov	r1, r9
 80120d6:	f7ee f8d7 	bl	8000288 <__aeabi_dsub>
 80120da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80120de:	f7ee f8d5 	bl	800028c <__adddf3>
 80120e2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80120e6:	e9ca 0100 	strd	r0, r1, [sl]
 80120ea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 80120ee:	e770      	b.n	8011fd2 <__kernel_rem_pio2+0x4f2>
 80120f0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 80120f4:	ed3a 7b02 	vldmdb	sl!, {d7}
 80120f8:	4630      	mov	r0, r6
 80120fa:	ec53 2b17 	vmov	r2, r3, d7
 80120fe:	4639      	mov	r1, r7
 8012100:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012104:	f7ee f8c2 	bl	800028c <__adddf3>
 8012108:	4602      	mov	r2, r0
 801210a:	460b      	mov	r3, r1
 801210c:	4680      	mov	r8, r0
 801210e:	4689      	mov	r9, r1
 8012110:	4630      	mov	r0, r6
 8012112:	4639      	mov	r1, r7
 8012114:	f7ee f8b8 	bl	8000288 <__aeabi_dsub>
 8012118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801211c:	f7ee f8b6 	bl	800028c <__adddf3>
 8012120:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012124:	e9ca 0100 	strd	r0, r1, [sl]
 8012128:	e94a 8902 	strd	r8, r9, [sl, #-8]
 801212c:	e756      	b.n	8011fdc <__kernel_rem_pio2+0x4fc>
 801212e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012132:	f7ee f8ab 	bl	800028c <__adddf3>
 8012136:	3d01      	subs	r5, #1
 8012138:	e756      	b.n	8011fe8 <__kernel_rem_pio2+0x508>
 801213a:	9b01      	ldr	r3, [sp, #4]
 801213c:	9a01      	ldr	r2, [sp, #4]
 801213e:	601f      	str	r7, [r3, #0]
 8012140:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012144:	605c      	str	r4, [r3, #4]
 8012146:	609d      	str	r5, [r3, #8]
 8012148:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 801214c:	60d3      	str	r3, [r2, #12]
 801214e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012152:	6110      	str	r0, [r2, #16]
 8012154:	6153      	str	r3, [r2, #20]
 8012156:	e78e      	b.n	8012076 <__kernel_rem_pio2+0x596>
 8012158:	41700000 	.word	0x41700000
 801215c:	3e700000 	.word	0x3e700000

08012160 <__kernel_sin>:
 8012160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012164:	ec55 4b10 	vmov	r4, r5, d0
 8012168:	b085      	sub	sp, #20
 801216a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801216e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012172:	ed8d 1b00 	vstr	d1, [sp]
 8012176:	9002      	str	r0, [sp, #8]
 8012178:	da06      	bge.n	8012188 <__kernel_sin+0x28>
 801217a:	ee10 0a10 	vmov	r0, s0
 801217e:	4629      	mov	r1, r5
 8012180:	f7ee fcea 	bl	8000b58 <__aeabi_d2iz>
 8012184:	2800      	cmp	r0, #0
 8012186:	d051      	beq.n	801222c <__kernel_sin+0xcc>
 8012188:	4622      	mov	r2, r4
 801218a:	462b      	mov	r3, r5
 801218c:	4620      	mov	r0, r4
 801218e:	4629      	mov	r1, r5
 8012190:	f7ee fa32 	bl	80005f8 <__aeabi_dmul>
 8012194:	4682      	mov	sl, r0
 8012196:	468b      	mov	fp, r1
 8012198:	4602      	mov	r2, r0
 801219a:	460b      	mov	r3, r1
 801219c:	4620      	mov	r0, r4
 801219e:	4629      	mov	r1, r5
 80121a0:	f7ee fa2a 	bl	80005f8 <__aeabi_dmul>
 80121a4:	a341      	add	r3, pc, #260	; (adr r3, 80122ac <__kernel_sin+0x14c>)
 80121a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121aa:	4680      	mov	r8, r0
 80121ac:	4689      	mov	r9, r1
 80121ae:	4650      	mov	r0, sl
 80121b0:	4659      	mov	r1, fp
 80121b2:	f7ee fa21 	bl	80005f8 <__aeabi_dmul>
 80121b6:	a33f      	add	r3, pc, #252	; (adr r3, 80122b4 <__kernel_sin+0x154>)
 80121b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121bc:	f7ee f864 	bl	8000288 <__aeabi_dsub>
 80121c0:	4652      	mov	r2, sl
 80121c2:	465b      	mov	r3, fp
 80121c4:	f7ee fa18 	bl	80005f8 <__aeabi_dmul>
 80121c8:	a33c      	add	r3, pc, #240	; (adr r3, 80122bc <__kernel_sin+0x15c>)
 80121ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121ce:	f7ee f85d 	bl	800028c <__adddf3>
 80121d2:	4652      	mov	r2, sl
 80121d4:	465b      	mov	r3, fp
 80121d6:	f7ee fa0f 	bl	80005f8 <__aeabi_dmul>
 80121da:	a33a      	add	r3, pc, #232	; (adr r3, 80122c4 <__kernel_sin+0x164>)
 80121dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121e0:	f7ee f852 	bl	8000288 <__aeabi_dsub>
 80121e4:	4652      	mov	r2, sl
 80121e6:	465b      	mov	r3, fp
 80121e8:	f7ee fa06 	bl	80005f8 <__aeabi_dmul>
 80121ec:	a337      	add	r3, pc, #220	; (adr r3, 80122cc <__kernel_sin+0x16c>)
 80121ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80121f2:	f7ee f84b 	bl	800028c <__adddf3>
 80121f6:	9b02      	ldr	r3, [sp, #8]
 80121f8:	4606      	mov	r6, r0
 80121fa:	460f      	mov	r7, r1
 80121fc:	b9db      	cbnz	r3, 8012236 <__kernel_sin+0xd6>
 80121fe:	4602      	mov	r2, r0
 8012200:	460b      	mov	r3, r1
 8012202:	4650      	mov	r0, sl
 8012204:	4659      	mov	r1, fp
 8012206:	f7ee f9f7 	bl	80005f8 <__aeabi_dmul>
 801220a:	a325      	add	r3, pc, #148	; (adr r3, 80122a0 <__kernel_sin+0x140>)
 801220c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012210:	f7ee f83a 	bl	8000288 <__aeabi_dsub>
 8012214:	4642      	mov	r2, r8
 8012216:	464b      	mov	r3, r9
 8012218:	f7ee f9ee 	bl	80005f8 <__aeabi_dmul>
 801221c:	4602      	mov	r2, r0
 801221e:	460b      	mov	r3, r1
 8012220:	4620      	mov	r0, r4
 8012222:	4629      	mov	r1, r5
 8012224:	f7ee f832 	bl	800028c <__adddf3>
 8012228:	4604      	mov	r4, r0
 801222a:	460d      	mov	r5, r1
 801222c:	ec45 4b10 	vmov	d0, r4, r5
 8012230:	b005      	add	sp, #20
 8012232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012236:	2200      	movs	r2, #0
 8012238:	4b1b      	ldr	r3, [pc, #108]	; (80122a8 <__kernel_sin+0x148>)
 801223a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801223e:	f7ee f9db 	bl	80005f8 <__aeabi_dmul>
 8012242:	4632      	mov	r2, r6
 8012244:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012248:	463b      	mov	r3, r7
 801224a:	4640      	mov	r0, r8
 801224c:	4649      	mov	r1, r9
 801224e:	f7ee f9d3 	bl	80005f8 <__aeabi_dmul>
 8012252:	4602      	mov	r2, r0
 8012254:	460b      	mov	r3, r1
 8012256:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801225a:	f7ee f815 	bl	8000288 <__aeabi_dsub>
 801225e:	4652      	mov	r2, sl
 8012260:	465b      	mov	r3, fp
 8012262:	f7ee f9c9 	bl	80005f8 <__aeabi_dmul>
 8012266:	e9dd 2300 	ldrd	r2, r3, [sp]
 801226a:	f7ee f80d 	bl	8000288 <__aeabi_dsub>
 801226e:	a30c      	add	r3, pc, #48	; (adr r3, 80122a0 <__kernel_sin+0x140>)
 8012270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012274:	4606      	mov	r6, r0
 8012276:	460f      	mov	r7, r1
 8012278:	4640      	mov	r0, r8
 801227a:	4649      	mov	r1, r9
 801227c:	f7ee f9bc 	bl	80005f8 <__aeabi_dmul>
 8012280:	4602      	mov	r2, r0
 8012282:	460b      	mov	r3, r1
 8012284:	4630      	mov	r0, r6
 8012286:	4639      	mov	r1, r7
 8012288:	f7ee f800 	bl	800028c <__adddf3>
 801228c:	4602      	mov	r2, r0
 801228e:	460b      	mov	r3, r1
 8012290:	4620      	mov	r0, r4
 8012292:	4629      	mov	r1, r5
 8012294:	f7ed fff8 	bl	8000288 <__aeabi_dsub>
 8012298:	e7c6      	b.n	8012228 <__kernel_sin+0xc8>
 801229a:	bf00      	nop
 801229c:	f3af 8000 	nop.w
 80122a0:	55555549 	.word	0x55555549
 80122a4:	3fc55555 	.word	0x3fc55555
 80122a8:	3fe00000 	.word	0x3fe00000
 80122ac:	5acfd57c 	.word	0x5acfd57c
 80122b0:	3de5d93a 	.word	0x3de5d93a
 80122b4:	8a2b9ceb 	.word	0x8a2b9ceb
 80122b8:	3e5ae5e6 	.word	0x3e5ae5e6
 80122bc:	57b1fe7d 	.word	0x57b1fe7d
 80122c0:	3ec71de3 	.word	0x3ec71de3
 80122c4:	19c161d5 	.word	0x19c161d5
 80122c8:	3f2a01a0 	.word	0x3f2a01a0
 80122cc:	1110f8a6 	.word	0x1110f8a6
 80122d0:	3f811111 	.word	0x3f811111

080122d4 <fabs>:
 80122d4:	ec51 0b10 	vmov	r0, r1, d0
 80122d8:	ee10 2a10 	vmov	r2, s0
 80122dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80122e0:	ec43 2b10 	vmov	d0, r2, r3
 80122e4:	4770      	bx	lr
	...

080122e8 <floor>:
 80122e8:	ec51 0b10 	vmov	r0, r1, d0
 80122ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80122f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80122f8:	2e13      	cmp	r6, #19
 80122fa:	460c      	mov	r4, r1
 80122fc:	ee10 5a10 	vmov	r5, s0
 8012300:	4680      	mov	r8, r0
 8012302:	dc34      	bgt.n	801236e <floor+0x86>
 8012304:	2e00      	cmp	r6, #0
 8012306:	da16      	bge.n	8012336 <floor+0x4e>
 8012308:	a335      	add	r3, pc, #212	; (adr r3, 80123e0 <floor+0xf8>)
 801230a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801230e:	f7ed ffbd 	bl	800028c <__adddf3>
 8012312:	2200      	movs	r2, #0
 8012314:	2300      	movs	r3, #0
 8012316:	f7ee fbff 	bl	8000b18 <__aeabi_dcmpgt>
 801231a:	b148      	cbz	r0, 8012330 <floor+0x48>
 801231c:	2c00      	cmp	r4, #0
 801231e:	da59      	bge.n	80123d4 <floor+0xec>
 8012320:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012324:	4a30      	ldr	r2, [pc, #192]	; (80123e8 <floor+0x100>)
 8012326:	432b      	orrs	r3, r5
 8012328:	2500      	movs	r5, #0
 801232a:	42ab      	cmp	r3, r5
 801232c:	bf18      	it	ne
 801232e:	4614      	movne	r4, r2
 8012330:	4621      	mov	r1, r4
 8012332:	4628      	mov	r0, r5
 8012334:	e025      	b.n	8012382 <floor+0x9a>
 8012336:	4f2d      	ldr	r7, [pc, #180]	; (80123ec <floor+0x104>)
 8012338:	4137      	asrs	r7, r6
 801233a:	ea01 0307 	and.w	r3, r1, r7
 801233e:	4303      	orrs	r3, r0
 8012340:	d01f      	beq.n	8012382 <floor+0x9a>
 8012342:	a327      	add	r3, pc, #156	; (adr r3, 80123e0 <floor+0xf8>)
 8012344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012348:	f7ed ffa0 	bl	800028c <__adddf3>
 801234c:	2200      	movs	r2, #0
 801234e:	2300      	movs	r3, #0
 8012350:	f7ee fbe2 	bl	8000b18 <__aeabi_dcmpgt>
 8012354:	2800      	cmp	r0, #0
 8012356:	d0eb      	beq.n	8012330 <floor+0x48>
 8012358:	2c00      	cmp	r4, #0
 801235a:	bfbe      	ittt	lt
 801235c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012360:	fa43 f606 	asrlt.w	r6, r3, r6
 8012364:	19a4      	addlt	r4, r4, r6
 8012366:	ea24 0407 	bic.w	r4, r4, r7
 801236a:	2500      	movs	r5, #0
 801236c:	e7e0      	b.n	8012330 <floor+0x48>
 801236e:	2e33      	cmp	r6, #51	; 0x33
 8012370:	dd0b      	ble.n	801238a <floor+0xa2>
 8012372:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012376:	d104      	bne.n	8012382 <floor+0x9a>
 8012378:	ee10 2a10 	vmov	r2, s0
 801237c:	460b      	mov	r3, r1
 801237e:	f7ed ff85 	bl	800028c <__adddf3>
 8012382:	ec41 0b10 	vmov	d0, r0, r1
 8012386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801238a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801238e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012392:	fa23 f707 	lsr.w	r7, r3, r7
 8012396:	4207      	tst	r7, r0
 8012398:	d0f3      	beq.n	8012382 <floor+0x9a>
 801239a:	a311      	add	r3, pc, #68	; (adr r3, 80123e0 <floor+0xf8>)
 801239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a0:	f7ed ff74 	bl	800028c <__adddf3>
 80123a4:	2200      	movs	r2, #0
 80123a6:	2300      	movs	r3, #0
 80123a8:	f7ee fbb6 	bl	8000b18 <__aeabi_dcmpgt>
 80123ac:	2800      	cmp	r0, #0
 80123ae:	d0bf      	beq.n	8012330 <floor+0x48>
 80123b0:	2c00      	cmp	r4, #0
 80123b2:	da02      	bge.n	80123ba <floor+0xd2>
 80123b4:	2e14      	cmp	r6, #20
 80123b6:	d103      	bne.n	80123c0 <floor+0xd8>
 80123b8:	3401      	adds	r4, #1
 80123ba:	ea25 0507 	bic.w	r5, r5, r7
 80123be:	e7b7      	b.n	8012330 <floor+0x48>
 80123c0:	2301      	movs	r3, #1
 80123c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80123c6:	fa03 f606 	lsl.w	r6, r3, r6
 80123ca:	4435      	add	r5, r6
 80123cc:	4545      	cmp	r5, r8
 80123ce:	bf38      	it	cc
 80123d0:	18e4      	addcc	r4, r4, r3
 80123d2:	e7f2      	b.n	80123ba <floor+0xd2>
 80123d4:	2500      	movs	r5, #0
 80123d6:	462c      	mov	r4, r5
 80123d8:	e7aa      	b.n	8012330 <floor+0x48>
 80123da:	bf00      	nop
 80123dc:	f3af 8000 	nop.w
 80123e0:	8800759c 	.word	0x8800759c
 80123e4:	7e37e43c 	.word	0x7e37e43c
 80123e8:	bff00000 	.word	0xbff00000
 80123ec:	000fffff 	.word	0x000fffff

080123f0 <matherr>:
 80123f0:	2000      	movs	r0, #0
 80123f2:	4770      	bx	lr
 80123f4:	0000      	movs	r0, r0
	...

080123f8 <scalbn>:
 80123f8:	b570      	push	{r4, r5, r6, lr}
 80123fa:	ec55 4b10 	vmov	r4, r5, d0
 80123fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012402:	4606      	mov	r6, r0
 8012404:	462b      	mov	r3, r5
 8012406:	b9aa      	cbnz	r2, 8012434 <scalbn+0x3c>
 8012408:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801240c:	4323      	orrs	r3, r4
 801240e:	d03b      	beq.n	8012488 <scalbn+0x90>
 8012410:	4b31      	ldr	r3, [pc, #196]	; (80124d8 <scalbn+0xe0>)
 8012412:	4629      	mov	r1, r5
 8012414:	2200      	movs	r2, #0
 8012416:	ee10 0a10 	vmov	r0, s0
 801241a:	f7ee f8ed 	bl	80005f8 <__aeabi_dmul>
 801241e:	4b2f      	ldr	r3, [pc, #188]	; (80124dc <scalbn+0xe4>)
 8012420:	429e      	cmp	r6, r3
 8012422:	4604      	mov	r4, r0
 8012424:	460d      	mov	r5, r1
 8012426:	da12      	bge.n	801244e <scalbn+0x56>
 8012428:	a327      	add	r3, pc, #156	; (adr r3, 80124c8 <scalbn+0xd0>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	f7ee f8e3 	bl	80005f8 <__aeabi_dmul>
 8012432:	e009      	b.n	8012448 <scalbn+0x50>
 8012434:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012438:	428a      	cmp	r2, r1
 801243a:	d10c      	bne.n	8012456 <scalbn+0x5e>
 801243c:	ee10 2a10 	vmov	r2, s0
 8012440:	4620      	mov	r0, r4
 8012442:	4629      	mov	r1, r5
 8012444:	f7ed ff22 	bl	800028c <__adddf3>
 8012448:	4604      	mov	r4, r0
 801244a:	460d      	mov	r5, r1
 801244c:	e01c      	b.n	8012488 <scalbn+0x90>
 801244e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012452:	460b      	mov	r3, r1
 8012454:	3a36      	subs	r2, #54	; 0x36
 8012456:	4432      	add	r2, r6
 8012458:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801245c:	428a      	cmp	r2, r1
 801245e:	dd0b      	ble.n	8012478 <scalbn+0x80>
 8012460:	ec45 4b11 	vmov	d1, r4, r5
 8012464:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80124d0 <scalbn+0xd8>
 8012468:	f000 f83c 	bl	80124e4 <copysign>
 801246c:	a318      	add	r3, pc, #96	; (adr r3, 80124d0 <scalbn+0xd8>)
 801246e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012472:	ec51 0b10 	vmov	r0, r1, d0
 8012476:	e7da      	b.n	801242e <scalbn+0x36>
 8012478:	2a00      	cmp	r2, #0
 801247a:	dd08      	ble.n	801248e <scalbn+0x96>
 801247c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012480:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012484:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012488:	ec45 4b10 	vmov	d0, r4, r5
 801248c:	bd70      	pop	{r4, r5, r6, pc}
 801248e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012492:	da0d      	bge.n	80124b0 <scalbn+0xb8>
 8012494:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012498:	429e      	cmp	r6, r3
 801249a:	ec45 4b11 	vmov	d1, r4, r5
 801249e:	dce1      	bgt.n	8012464 <scalbn+0x6c>
 80124a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80124c8 <scalbn+0xd0>
 80124a4:	f000 f81e 	bl	80124e4 <copysign>
 80124a8:	a307      	add	r3, pc, #28	; (adr r3, 80124c8 <scalbn+0xd0>)
 80124aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ae:	e7e0      	b.n	8012472 <scalbn+0x7a>
 80124b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80124b4:	3236      	adds	r2, #54	; 0x36
 80124b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80124ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80124be:	4620      	mov	r0, r4
 80124c0:	4629      	mov	r1, r5
 80124c2:	2200      	movs	r2, #0
 80124c4:	4b06      	ldr	r3, [pc, #24]	; (80124e0 <scalbn+0xe8>)
 80124c6:	e7b2      	b.n	801242e <scalbn+0x36>
 80124c8:	c2f8f359 	.word	0xc2f8f359
 80124cc:	01a56e1f 	.word	0x01a56e1f
 80124d0:	8800759c 	.word	0x8800759c
 80124d4:	7e37e43c 	.word	0x7e37e43c
 80124d8:	43500000 	.word	0x43500000
 80124dc:	ffff3cb0 	.word	0xffff3cb0
 80124e0:	3c900000 	.word	0x3c900000

080124e4 <copysign>:
 80124e4:	ec51 0b10 	vmov	r0, r1, d0
 80124e8:	ee11 0a90 	vmov	r0, s3
 80124ec:	ee10 2a10 	vmov	r2, s0
 80124f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80124f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80124f8:	ea41 0300 	orr.w	r3, r1, r0
 80124fc:	ec43 2b10 	vmov	d0, r2, r3
 8012500:	4770      	bx	lr
	...

08012504 <_init>:
 8012504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012506:	bf00      	nop
 8012508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801250a:	bc08      	pop	{r3}
 801250c:	469e      	mov	lr, r3
 801250e:	4770      	bx	lr

08012510 <_fini>:
 8012510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012512:	bf00      	nop
 8012514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012516:	bc08      	pop	{r3}
 8012518:	469e      	mov	lr, r3
 801251a:	4770      	bx	lr
