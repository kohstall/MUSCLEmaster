
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012f7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  08013110  08013110  00023110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080138e8  080138e8  00030218  2**0
                  CONTENTS
  4 .ARM          00000008  080138e8  080138e8  000238e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080138f0  080138f0  00030218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080138f0  080138f0  000238f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080138f4  080138f4  000238f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  080138f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000024f0  20000218  08013b10  00030218  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002708  08013b10  00032708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a8b1  00000000  00000000  00030248  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e9e  00000000  00000000  0004aaf9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018c8  00000000  00000000  0004d998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001798  00000000  00000000  0004f260  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022bf1  00000000  00000000  000509f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00012701  00000000  00000000  000735e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3b82  00000000  00000000  00085cea  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015986c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007db0  00000000  00000000  001598e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080130f4 	.word	0x080130f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	080130f4 	.word	0x080130f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b972 	b.w	8000f84 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	4688      	mov	r8, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14b      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4615      	mov	r5, r2
 8000cca:	d967      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0720 	rsb	r7, r2, #32
 8000cd6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cda:	fa20 f707 	lsr.w	r7, r0, r7
 8000cde:	4095      	lsls	r5, r2
 8000ce0:	ea47 0803 	orr.w	r8, r7, r3
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cf0:	fa1f fc85 	uxth.w	ip, r5
 8000cf4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cf8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfc:	fb07 f10c 	mul.w	r1, r7, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d0a:	f080 811b 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8118 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d14:	3f02      	subs	r7, #2
 8000d16:	442b      	add	r3, r5
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d2c:	45a4      	cmp	ip, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	192c      	adds	r4, r5, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8107 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	f240 8104 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d40:	3802      	subs	r0, #2
 8000d42:	442c      	add	r4, r5
 8000d44:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d48:	eba4 040c 	sub.w	r4, r4, ip
 8000d4c:	2700      	movs	r7, #0
 8000d4e:	b11e      	cbz	r6, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c6 4300 	strd	r4, r3, [r6]
 8000d58:	4639      	mov	r1, r7
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d909      	bls.n	8000d76 <__udivmoddi4+0xbe>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80eb 	beq.w	8000f3e <__udivmoddi4+0x286>
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d6e:	4638      	mov	r0, r7
 8000d70:	4639      	mov	r1, r7
 8000d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d76:	fab3 f783 	clz	r7, r3
 8000d7a:	2f00      	cmp	r7, #0
 8000d7c:	d147      	bne.n	8000e0e <__udivmoddi4+0x156>
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d302      	bcc.n	8000d88 <__udivmoddi4+0xd0>
 8000d82:	4282      	cmp	r2, r0
 8000d84:	f200 80fa 	bhi.w	8000f7c <__udivmoddi4+0x2c4>
 8000d88:	1a84      	subs	r4, r0, r2
 8000d8a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d8e:	2001      	movs	r0, #1
 8000d90:	4698      	mov	r8, r3
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	d0e0      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000d96:	e9c6 4800 	strd	r4, r8, [r6]
 8000d9a:	e7dd      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000d9c:	b902      	cbnz	r2, 8000da0 <__udivmoddi4+0xe8>
 8000d9e:	deff      	udf	#255	; 0xff
 8000da0:	fab2 f282 	clz	r2, r2
 8000da4:	2a00      	cmp	r2, #0
 8000da6:	f040 808f 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000daa:	1b49      	subs	r1, r1, r5
 8000dac:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000db0:	fa1f f885 	uxth.w	r8, r5
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dba:	0c23      	lsrs	r3, r4, #16
 8000dbc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dc8:	4299      	cmp	r1, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dcc:	18eb      	adds	r3, r5, r3
 8000dce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4299      	cmp	r1, r3
 8000dd6:	f200 80cd 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dda:	4684      	mov	ip, r0
 8000ddc:	1a59      	subs	r1, r3, r1
 8000dde:	b2a3      	uxth	r3, r4
 8000de0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000de4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000de8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dec:	fb08 f800 	mul.w	r8, r8, r0
 8000df0:	45a0      	cmp	r8, r4
 8000df2:	d907      	bls.n	8000e04 <__udivmoddi4+0x14c>
 8000df4:	192c      	adds	r4, r5, r4
 8000df6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfa:	d202      	bcs.n	8000e02 <__udivmoddi4+0x14a>
 8000dfc:	45a0      	cmp	r8, r4
 8000dfe:	f200 80b6 	bhi.w	8000f6e <__udivmoddi4+0x2b6>
 8000e02:	4618      	mov	r0, r3
 8000e04:	eba4 0408 	sub.w	r4, r4, r8
 8000e08:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e0c:	e79f      	b.n	8000d4e <__udivmoddi4+0x96>
 8000e0e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e12:	40bb      	lsls	r3, r7
 8000e14:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e18:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e1c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e20:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e24:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e28:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e2c:	4325      	orrs	r5, r4
 8000e2e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e32:	0c2c      	lsrs	r4, r5, #16
 8000e34:	fb08 3319 	mls	r3, r8, r9, r3
 8000e38:	fa1f fa8e 	uxth.w	sl, lr
 8000e3c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e40:	fb09 f40a 	mul.w	r4, r9, sl
 8000e44:	429c      	cmp	r4, r3
 8000e46:	fa02 f207 	lsl.w	r2, r2, r7
 8000e4a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1e 0303 	adds.w	r3, lr, r3
 8000e54:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e58:	f080 8087 	bcs.w	8000f6a <__udivmoddi4+0x2b2>
 8000e5c:	429c      	cmp	r4, r3
 8000e5e:	f240 8084 	bls.w	8000f6a <__udivmoddi4+0x2b2>
 8000e62:	f1a9 0902 	sub.w	r9, r9, #2
 8000e66:	4473      	add	r3, lr
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	b2ad      	uxth	r5, r5
 8000e6c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e70:	fb08 3310 	mls	r3, r8, r0, r3
 8000e74:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e78:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e7c:	45a2      	cmp	sl, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1e 0404 	adds.w	r4, lr, r4
 8000e84:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e88:	d26b      	bcs.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8a:	45a2      	cmp	sl, r4
 8000e8c:	d969      	bls.n	8000f62 <__udivmoddi4+0x2aa>
 8000e8e:	3802      	subs	r0, #2
 8000e90:	4474      	add	r4, lr
 8000e92:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e96:	fba0 8902 	umull	r8, r9, r0, r2
 8000e9a:	eba4 040a 	sub.w	r4, r4, sl
 8000e9e:	454c      	cmp	r4, r9
 8000ea0:	46c2      	mov	sl, r8
 8000ea2:	464b      	mov	r3, r9
 8000ea4:	d354      	bcc.n	8000f50 <__udivmoddi4+0x298>
 8000ea6:	d051      	beq.n	8000f4c <__udivmoddi4+0x294>
 8000ea8:	2e00      	cmp	r6, #0
 8000eaa:	d069      	beq.n	8000f80 <__udivmoddi4+0x2c8>
 8000eac:	ebb1 050a 	subs.w	r5, r1, sl
 8000eb0:	eb64 0403 	sbc.w	r4, r4, r3
 8000eb4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000eb8:	40fd      	lsrs	r5, r7
 8000eba:	40fc      	lsrs	r4, r7
 8000ebc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ec0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ec4:	2700      	movs	r7, #0
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000ec8:	f1c2 0320 	rsb	r3, r2, #32
 8000ecc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ed0:	4095      	lsls	r5, r2
 8000ed2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ed6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eda:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ede:	4338      	orrs	r0, r7
 8000ee0:	0c01      	lsrs	r1, r0, #16
 8000ee2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ee6:	fa1f f885 	uxth.w	r8, r5
 8000eea:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb07 f308 	mul.w	r3, r7, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	fa04 f402 	lsl.w	r4, r4, r2
 8000efc:	d907      	bls.n	8000f0e <__udivmoddi4+0x256>
 8000efe:	1869      	adds	r1, r5, r1
 8000f00:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f04:	d22f      	bcs.n	8000f66 <__udivmoddi4+0x2ae>
 8000f06:	428b      	cmp	r3, r1
 8000f08:	d92d      	bls.n	8000f66 <__udivmoddi4+0x2ae>
 8000f0a:	3f02      	subs	r7, #2
 8000f0c:	4429      	add	r1, r5
 8000f0e:	1acb      	subs	r3, r1, r3
 8000f10:	b281      	uxth	r1, r0
 8000f12:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f16:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f1e:	fb00 f308 	mul.w	r3, r0, r8
 8000f22:	428b      	cmp	r3, r1
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x27e>
 8000f26:	1869      	adds	r1, r5, r1
 8000f28:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f2c:	d217      	bcs.n	8000f5e <__udivmoddi4+0x2a6>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	d915      	bls.n	8000f5e <__udivmoddi4+0x2a6>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4429      	add	r1, r5
 8000f36:	1ac9      	subs	r1, r1, r3
 8000f38:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f3c:	e73b      	b.n	8000db6 <__udivmoddi4+0xfe>
 8000f3e:	4637      	mov	r7, r6
 8000f40:	4630      	mov	r0, r6
 8000f42:	e709      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f44:	4607      	mov	r7, r0
 8000f46:	e6e7      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f48:	4618      	mov	r0, r3
 8000f4a:	e6fb      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f4c:	4541      	cmp	r1, r8
 8000f4e:	d2ab      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f50:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f54:	eb69 020e 	sbc.w	r2, r9, lr
 8000f58:	3801      	subs	r0, #1
 8000f5a:	4613      	mov	r3, r2
 8000f5c:	e7a4      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f5e:	4660      	mov	r0, ip
 8000f60:	e7e9      	b.n	8000f36 <__udivmoddi4+0x27e>
 8000f62:	4618      	mov	r0, r3
 8000f64:	e795      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f66:	4667      	mov	r7, ip
 8000f68:	e7d1      	b.n	8000f0e <__udivmoddi4+0x256>
 8000f6a:	4681      	mov	r9, r0
 8000f6c:	e77c      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f6e:	3802      	subs	r0, #2
 8000f70:	442c      	add	r4, r5
 8000f72:	e747      	b.n	8000e04 <__udivmoddi4+0x14c>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	442b      	add	r3, r5
 8000f7a:	e72f      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f7c:	4638      	mov	r0, r7
 8000f7e:	e708      	b.n	8000d92 <__udivmoddi4+0xda>
 8000f80:	4637      	mov	r7, r6
 8000f82:	e6e9      	b.n	8000d58 <__udivmoddi4+0xa0>

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <HAL_Init+0x40>)
 8000f92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0a      	ldr	r2, [pc, #40]	; (8000fc8 <HAL_Init+0x40>)
 8000f9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <HAL_Init+0x40>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a07      	ldr	r2, [pc, #28]	; (8000fc8 <HAL_Init+0x40>)
 8000faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fb0:	2003      	movs	r0, #3
 8000fb2:	f001 fdcb 	bl	8002b4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f000 f808 	bl	8000fcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fbc:	f00b faee 	bl	800c59c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40023c00 	.word	0x40023c00

08000fcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <HAL_InitTick+0x54>)
 8000fd6:	681a      	ldr	r2, [r3, #0]
 8000fd8:	4b12      	ldr	r3, [pc, #72]	; (8001024 <HAL_InitTick+0x58>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	4619      	mov	r1, r3
 8000fde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fde3 	bl	8002bb6 <HAL_SYSTICK_Config>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e00e      	b.n	8001018 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b0f      	cmp	r3, #15
 8000ffe:	d80a      	bhi.n	8001016 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001000:	2200      	movs	r2, #0
 8001002:	6879      	ldr	r1, [r7, #4]
 8001004:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001008:	f001 fdab 	bl	8002b62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800100c:	4a06      	ldr	r2, [pc, #24]	; (8001028 <HAL_InitTick+0x5c>)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
 8001014:	e000      	b.n	8001018 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
}
 8001018:	4618      	mov	r0, r3
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20000040 	.word	0x20000040
 8001024:	20000004 	.word	0x20000004
 8001028:	20000000 	.word	0x20000000

0800102c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001030:	4b06      	ldr	r3, [pc, #24]	; (800104c <HAL_IncTick+0x20>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	461a      	mov	r2, r3
 8001036:	4b06      	ldr	r3, [pc, #24]	; (8001050 <HAL_IncTick+0x24>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4413      	add	r3, r2
 800103c:	4a04      	ldr	r2, [pc, #16]	; (8001050 <HAL_IncTick+0x24>)
 800103e:	6013      	str	r3, [r2, #0]
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	20000004 	.word	0x20000004
 8001050:	200002bc 	.word	0x200002bc

08001054 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  return uwTick;
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HAL_GetTick+0x14>)
 800105a:	681b      	ldr	r3, [r3, #0]
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	200002bc 	.word	0x200002bc

0800106c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001074:	f7ff ffee 	bl	8001054 <HAL_GetTick>
 8001078:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001084:	d005      	beq.n	8001092 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_Delay+0x40>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001092:	bf00      	nop
 8001094:	f7ff ffde 	bl	8001054 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d8f7      	bhi.n	8001094 <HAL_Delay+0x28>
  {
  }
}
 80010a4:	bf00      	nop
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b8:	2300      	movs	r3, #0
 80010ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e033      	b.n	800112e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f00b fa8c 	bl	800c5ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2200      	movs	r2, #0
 80010de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e6:	f003 0310 	and.w	r3, r3, #16
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d118      	bne.n	8001120 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010f6:	f023 0302 	bic.w	r3, r3, #2
 80010fa:	f043 0202 	orr.w	r2, r3, #2
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f000 fb80 	bl	8001808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001112:	f023 0303 	bic.w	r3, r3, #3
 8001116:	f043 0201 	orr.w	r2, r3, #1
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	641a      	str	r2, [r3, #64]	; 0x40
 800111e:	e001      	b.n	8001124 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f003 0302 	and.w	r3, r3, #2
 8001150:	2b02      	cmp	r3, #2
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0320 	and.w	r3, r3, #32
 8001166:	2b20      	cmp	r3, #32
 8001168:	bf0c      	ite	eq
 800116a:	2301      	moveq	r3, #1
 800116c:	2300      	movne	r3, #0
 800116e:	b2db      	uxtb	r3, r3
 8001170:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d049      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d046      	beq.n	800120c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d12b      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d127      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d006      	beq.n	80011c8 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d119      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f022 0220 	bic.w	r2, r2, #32
 80011d6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d105      	bne.n	80011fc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	f043 0201 	orr.w	r2, r3, #1
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f00a fb09 	bl	800b814 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f06f 0212 	mvn.w	r2, #18
 800120a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf0c      	ite	eq
 800121a:	2301      	moveq	r3, #1
 800121c:	2300      	movne	r3, #0
 800121e:	b2db      	uxtb	r3, r3
 8001220:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800122c:	2b80      	cmp	r3, #128	; 0x80
 800122e:	bf0c      	ite	eq
 8001230:	2301      	moveq	r3, #1
 8001232:	2300      	movne	r3, #0
 8001234:	b2db      	uxtb	r3, r3
 8001236:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d057      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d054      	beq.n	80012ee <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f003 0310 	and.w	r3, r3, #16
 800124c:	2b00      	cmp	r3, #0
 800124e:	d105      	bne.n	800125c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d139      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001270:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001282:	2b00      	cmp	r3, #0
 8001284:	d12b      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001290:	2b00      	cmp	r3, #0
 8001292:	d124      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	689b      	ldr	r3, [r3, #8]
 800129a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d11d      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d119      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80012b8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d105      	bne.n	80012de <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d6:	f043 0201 	orr.w	r2, r3, #1
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f000 fd06 	bl	8001cf0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f06f 020c 	mvn.w	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0301 	and.w	r3, r3, #1
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130e:	2b40      	cmp	r3, #64	; 0x40
 8001310:	bf0c      	ite	eq
 8001312:	2301      	moveq	r3, #1
 8001314:	2300      	movne	r3, #0
 8001316:	b2db      	uxtb	r3, r3
 8001318:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d017      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d014      	beq.n	8001350 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	2b01      	cmp	r3, #1
 8001332:	d10d      	bne.n	8001350 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001338:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 f92b 	bl	800159c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f06f 0201 	mvn.w	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0320 	and.w	r3, r3, #32
 800135a:	2b20      	cmp	r3, #32
 800135c:	bf0c      	ite	eq
 800135e:	2301      	moveq	r3, #1
 8001360:	2300      	movne	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001374:	bf0c      	ite	eq
 8001376:	2301      	moveq	r3, #1
 8001378:	2300      	movne	r3, #0
 800137a:	b2db      	uxtb	r3, r3
 800137c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d015      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d012      	beq.n	80013b0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	f043 0202 	orr.w	r2, r3, #2
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f06f 0220 	mvn.w	r2, #32
 800139e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f000 f905 	bl	80015b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f06f 0220 	mvn.w	r2, #32
 80013ae:	601a      	str	r2, [r3, #0]
  }
}
 80013b0:	bf00      	nop
 80013b2:	3710      	adds	r7, #16
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d101      	bne.n	80013d6 <HAL_ADC_Start_DMA+0x1e>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e0cc      	b.n	8001570 <HAL_ADC_Start_DMA+0x1b8>
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d018      	beq.n	800141e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 0201 	orr.w	r2, r2, #1
 80013fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013fc:	4b5e      	ldr	r3, [pc, #376]	; (8001578 <HAL_ADC_Start_DMA+0x1c0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a5e      	ldr	r2, [pc, #376]	; (800157c <HAL_ADC_Start_DMA+0x1c4>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0c9a      	lsrs	r2, r3, #18
 8001408:	4613      	mov	r3, r2
 800140a:	005b      	lsls	r3, r3, #1
 800140c:	4413      	add	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001410:	e002      	b.n	8001418 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	3b01      	subs	r3, #1
 8001416:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f9      	bne.n	8001412 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	f040 80a0 	bne.w	800156e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001436:	f023 0301 	bic.w	r3, r3, #1
 800143a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800144c:	2b00      	cmp	r3, #0
 800144e:	d007      	beq.n	8001460 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001454:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001458:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800146c:	d106      	bne.n	800147c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f023 0206 	bic.w	r2, r3, #6
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	645a      	str	r2, [r3, #68]	; 0x44
 800147a:	e002      	b.n	8001482 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2200      	movs	r2, #0
 8001480:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800148a:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 800148c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	4a3c      	ldr	r2, [pc, #240]	; (8001584 <HAL_ADC_Start_DMA+0x1cc>)
 8001494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800149a:	4a3b      	ldr	r2, [pc, #236]	; (8001588 <HAL_ADC_Start_DMA+0x1d0>)
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	4a3a      	ldr	r2, [pc, #232]	; (800158c <HAL_ADC_Start_DMA+0x1d4>)
 80014a4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014ae:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80014be:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ce:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	334c      	adds	r3, #76	; 0x4c
 80014da:	4619      	mov	r1, r3
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f001 fc24 	bl	8002d2c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 031f 	and.w	r3, r3, #31
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d12a      	bne.n	8001546 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a26      	ldr	r2, [pc, #152]	; (8001590 <HAL_ADC_Start_DMA+0x1d8>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d015      	beq.n	8001526 <HAL_ADC_Start_DMA+0x16e>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a25      	ldr	r2, [pc, #148]	; (8001594 <HAL_ADC_Start_DMA+0x1dc>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d105      	bne.n	8001510 <HAL_ADC_Start_DMA+0x158>
 8001504:	4b1e      	ldr	r3, [pc, #120]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2b00      	cmp	r3, #0
 800150e:	d00a      	beq.n	8001526 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a20      	ldr	r2, [pc, #128]	; (8001598 <HAL_ADC_Start_DMA+0x1e0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d129      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_ADC_Start_DMA+0x1c8>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 031f 	and.w	r3, r3, #31
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d823      	bhi.n	800156e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d11c      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001542:	609a      	str	r2, [r3, #8]
 8001544:	e013      	b.n	800156e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a11      	ldr	r2, [pc, #68]	; (8001590 <HAL_ADC_Start_DMA+0x1d8>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d10e      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d107      	bne.n	800156e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	689a      	ldr	r2, [r3, #8]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800156c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
}
 8001570:	4618      	mov	r0, r3
 8001572:	3718      	adds	r7, #24
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000040 	.word	0x20000040
 800157c:	431bde83 	.word	0x431bde83
 8001580:	40012300 	.word	0x40012300
 8001584:	08001a01 	.word	0x08001a01
 8001588:	08001abb 	.word	0x08001abb
 800158c:	08001ad7 	.word	0x08001ad7
 8001590:	40012000 	.word	0x40012000
 8001594:	40012100 	.word	0x40012100
 8001598:	40012200 	.word	0x40012200

0800159c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015b8:	bf00      	nop
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b085      	sub	sp, #20
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <HAL_ADC_ConfigChannel+0x1c>
 80015dc:	2302      	movs	r3, #2
 80015de:	e105      	b.n	80017ec <HAL_ADC_ConfigChannel+0x228>
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	d925      	bls.n	800163c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	68d9      	ldr	r1, [r3, #12]
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	461a      	mov	r2, r3
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	3b1e      	subs	r3, #30
 8001606:	2207      	movs	r2, #7
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	68d9      	ldr	r1, [r3, #12]
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	4603      	mov	r3, r0
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	4403      	add	r3, r0
 800162e:	3b1e      	subs	r3, #30
 8001630:	409a      	lsls	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	e022      	b.n	8001682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6919      	ldr	r1, [r3, #16]
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	b29b      	uxth	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4613      	mov	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	2207      	movs	r2, #7
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	400a      	ands	r2, r1
 800165e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6919      	ldr	r1, [r3, #16]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	689a      	ldr	r2, [r3, #8]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	4618      	mov	r0, r3
 8001672:	4603      	mov	r3, r0
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4403      	add	r3, r0
 8001678:	409a      	lsls	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	2b06      	cmp	r3, #6
 8001688:	d824      	bhi.n	80016d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	4613      	mov	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4413      	add	r3, r2
 800169a:	3b05      	subs	r3, #5
 800169c:	221f      	movs	r2, #31
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43da      	mvns	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	400a      	ands	r2, r1
 80016aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	4613      	mov	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	4413      	add	r3, r2
 80016c4:	3b05      	subs	r3, #5
 80016c6:	fa00 f203 	lsl.w	r2, r0, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34
 80016d2:	e04c      	b.n	800176e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b0c      	cmp	r3, #12
 80016da:	d824      	bhi.n	8001726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	3b23      	subs	r3, #35	; 0x23
 80016ee:	221f      	movs	r2, #31
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43da      	mvns	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	400a      	ands	r2, r1
 80016fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	b29b      	uxth	r3, r3
 800170a:	4618      	mov	r0, r3
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	4613      	mov	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	4413      	add	r3, r2
 8001716:	3b23      	subs	r3, #35	; 0x23
 8001718:	fa00 f203 	lsl.w	r2, r0, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	430a      	orrs	r2, r1
 8001722:	631a      	str	r2, [r3, #48]	; 0x30
 8001724:	e023      	b.n	800176e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	685a      	ldr	r2, [r3, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4413      	add	r3, r2
 8001736:	3b41      	subs	r3, #65	; 0x41
 8001738:	221f      	movs	r2, #31
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	b29b      	uxth	r3, r3
 8001754:	4618      	mov	r0, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b41      	subs	r3, #65	; 0x41
 8001762:	fa00 f203 	lsl.w	r2, r0, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	430a      	orrs	r2, r1
 800176c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_ADC_ConfigChannel+0x234>)
 8001770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a21      	ldr	r2, [pc, #132]	; (80017fc <HAL_ADC_ConfigChannel+0x238>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d109      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1cc>
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b12      	cmp	r3, #18
 8001782:	d105      	bne.n	8001790 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a19      	ldr	r2, [pc, #100]	; (80017fc <HAL_ADC_ConfigChannel+0x238>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d123      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2b10      	cmp	r3, #16
 80017a0:	d003      	beq.n	80017aa <HAL_ADC_ConfigChannel+0x1e6>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b11      	cmp	r3, #17
 80017a8:	d11b      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b10      	cmp	r3, #16
 80017bc:	d111      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4b10      	ldr	r3, [pc, #64]	; (8001800 <HAL_ADC_ConfigChannel+0x23c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <HAL_ADC_ConfigChannel+0x240>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9a      	lsrs	r2, r3, #18
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40012300 	.word	0x40012300
 80017fc:	40012000 	.word	0x40012000
 8001800:	20000040 	.word	0x20000040
 8001804:	431bde83 	.word	0x431bde83

08001808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001810:	4b79      	ldr	r3, [pc, #484]	; (80019f8 <ADC_Init+0x1f0>)
 8001812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685a      	ldr	r2, [r3, #4]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	431a      	orrs	r2, r3
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800183c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	6859      	ldr	r1, [r3, #4]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	021a      	lsls	r2, r3, #8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	430a      	orrs	r2, r1
 8001850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6859      	ldr	r1, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	689a      	ldr	r2, [r3, #8]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6899      	ldr	r1, [r3, #8]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	68da      	ldr	r2, [r3, #12]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189a:	4a58      	ldr	r2, [pc, #352]	; (80019fc <ADC_Init+0x1f4>)
 800189c:	4293      	cmp	r3, r2
 800189e:	d022      	beq.n	80018e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	689a      	ldr	r2, [r3, #8]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6899      	ldr	r1, [r3, #8]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	689a      	ldr	r2, [r3, #8]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6899      	ldr	r1, [r3, #8]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	e00f      	b.n	8001906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689a      	ldr	r2, [r3, #8]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 0202 	bic.w	r2, r2, #2
 8001914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6899      	ldr	r1, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	7e1b      	ldrb	r3, [r3, #24]
 8001920:	005a      	lsls	r2, r3, #1
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d01b      	beq.n	800196c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6859      	ldr	r1, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	3b01      	subs	r3, #1
 8001960:	035a      	lsls	r2, r3, #13
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	430a      	orrs	r2, r1
 8001968:	605a      	str	r2, [r3, #4]
 800196a:	e007      	b.n	800197c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	3b01      	subs	r3, #1
 8001998:	051a      	lsls	r2, r3, #20
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689a      	ldr	r2, [r3, #8]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6899      	ldr	r1, [r3, #8]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019be:	025a      	lsls	r2, r3, #9
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	689a      	ldr	r2, [r3, #8]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6899      	ldr	r1, [r3, #8]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	029a      	lsls	r2, r3, #10
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	430a      	orrs	r2, r1
 80019ea:	609a      	str	r2, [r3, #8]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40012300 	.word	0x40012300
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d13c      	bne.n	8001a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12b      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d127      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d006      	beq.n	8001a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d119      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	685a      	ldr	r2, [r3, #4]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0220 	bic.w	r2, r2, #32
 8001a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f009 fec1 	bl	800b814 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a92:	e00e      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001aa0:	68f8      	ldr	r0, [r7, #12]
 8001aa2:	f7ff fd85 	bl	80015b0 <HAL_ADC_ErrorCallback>
}
 8001aa6:	e004      	b.n	8001ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	4798      	blx	r3
}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b084      	sub	sp, #16
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ac8:	68f8      	ldr	r0, [r7, #12]
 8001aca:	f009 fe93 	bl	800b7f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ace:	bf00      	nop
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b084      	sub	sp, #16
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2240      	movs	r2, #64	; 0x40
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aee:	f043 0204 	orr.w	r2, r3, #4
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001af6:	68f8      	ldr	r0, [r7, #12]
 8001af8:	f7ff fd5a 	bl	80015b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001afc:	bf00      	nop
 8001afe:	3710      	adds	r7, #16
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
 8001b14:	2300      	movs	r3, #0
 8001b16:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d101      	bne.n	8001b26 <HAL_ADCEx_InjectedStart+0x22>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e09d      	b.n	8001c62 <HAL_ADCEx_InjectedStart+0x15e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d018      	beq.n	8001b6e <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689a      	ldr	r2, [r3, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 0201 	orr.w	r2, r2, #1
 8001b4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b4c:	4b48      	ldr	r3, [pc, #288]	; (8001c70 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a48      	ldr	r2, [pc, #288]	; (8001c74 <HAL_ADCEx_InjectedStart+0x170>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	0c9a      	lsrs	r2, r3, #18
 8001b58:	4613      	mov	r3, r2
 8001b5a:	005b      	lsls	r3, r3, #1
 8001b5c:	4413      	add	r3, r2
 8001b5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b60:	e002      	b.n	8001b68 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f9      	bne.n	8001b62 <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f003 0301 	and.w	r3, r3, #1
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d171      	bne.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b80:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b84:	f023 0301 	bic.w	r3, r3, #1
 8001b88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d102      	bne.n	8001ba2 <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f06f 0204 	mvn.w	r2, #4
 8001bb2:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bb4:	4b30      	ldr	r3, [pc, #192]	; (8001c78 <HAL_ADCEx_InjectedStart+0x174>)
 8001bb6:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f003 031f 	and.w	r3, r3, #31
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d124      	bne.n	8001c0e <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	bf0c      	ite	eq
 8001bd2:	2301      	moveq	r3, #1
 8001bd4:	2300      	movne	r3, #0
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d034      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d031      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c0a:	609a      	str	r2, [r3, #8]
 8001c0c:	e028      	b.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	bf0c      	ite	eq
 8001c1c:	2301      	moveq	r3, #1
 8001c1e:	2300      	movne	r3, #0
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	bf0c      	ite	eq
 8001c32:	2301      	moveq	r3, #1
 8001c34:	2300      	movne	r3, #0
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a0f      	ldr	r2, [pc, #60]	; (8001c7c <HAL_ADCEx_InjectedStart+0x178>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d10d      	bne.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00a      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d007      	beq.n	8001c60 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	689a      	ldr	r2, [r3, #8]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c5e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	371c      	adds	r7, #28
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000040 	.word	0x20000040
 8001c74:	431bde83 	.word	0x431bde83
 8001c78:	40012300 	.word	0x40012300
 8001c7c:	40012000 	.word	0x40012000

08001c80 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f06f 0204 	mvn.w	r2, #4
 8001c96:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d81f      	bhi.n	8001ce0 <HAL_ADCEx_InjectedGetValue+0x60>
 8001ca0:	a201      	add	r2, pc, #4	; (adr r2, 8001ca8 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ca6:	bf00      	nop
 8001ca8:	08001cd7 	.word	0x08001cd7
 8001cac:	08001ccd 	.word	0x08001ccd
 8001cb0:	08001cc3 	.word	0x08001cc3
 8001cb4:	08001cb9 	.word	0x08001cb9
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cc0:	e00f      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc8:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cca:	e00a      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cd4:	e005      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cde:	e000      	b.n	8001ce2 <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001ce0:	bf00      	nop
  }
  return tmp;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr

08001cf0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d101      	bne.n	8001d1c <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001d18:	2302      	movs	r3, #2
 8001d1a:	e17a      	b.n	8002012 <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d925      	bls.n	8001d78 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68d9      	ldr	r1, [r3, #12]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	3b1e      	subs	r3, #30
 8001d42:	2207      	movs	r2, #7
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43da      	mvns	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	400a      	ands	r2, r1
 8001d50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	68d9      	ldr	r1, [r3, #12]
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	4603      	mov	r3, r0
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4403      	add	r3, r0
 8001d6a:	3b1e      	subs	r3, #30
 8001d6c:	409a      	lsls	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	e022      	b.n	8001dbe <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	461a      	mov	r2, r3
 8001d86:	4613      	mov	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4413      	add	r3, r2
 8001d8c:	2207      	movs	r2, #7
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43da      	mvns	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	400a      	ands	r2, r1
 8001d9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6919      	ldr	r1, [r3, #16]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	689a      	ldr	r2, [r3, #8]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	4603      	mov	r3, r0
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	4403      	add	r3, r0
 8001db4:	409a      	lsls	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001dcc:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	051a      	lsls	r2, r3, #20
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	430a      	orrs	r2, r1
 8001de2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	3303      	adds	r3, #3
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4613      	mov	r3, r2
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	4413      	add	r3, r2
 8001e06:	221f      	movs	r2, #31
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43da      	mvns	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	400a      	ands	r2, r1
 8001e14:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	4618      	mov	r0, r3
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	3303      	adds	r3, #3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	4413      	add	r3, r2
 8001e40:	fa00 f203 	lsl.w	r2, r0, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	4a73      	ldr	r2, [pc, #460]	; (8002020 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d022      	beq.n	8001e9c <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	689a      	ldr	r2, [r3, #8]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6899      	ldr	r1, [r3, #8]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	430a      	orrs	r2, r1
 8001e76:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	69da      	ldr	r2, [r3, #28]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
 8001e9a:	e00f      	b.n	8001ebc <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001eaa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001eba:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	7d5b      	ldrb	r3, [r3, #21]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d008      	beq.n	8001ed6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	e007      	b.n	8001ee6 <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ee4:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	7d1b      	ldrb	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d008      	beq.n	8001f00 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	e007      	b.n	8001f10 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f0e:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d017      	beq.n	8001f48 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d029      	beq.n	8001f70 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d13b      	bne.n	8001f98 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	6812      	ldr	r2, [r2, #0]
 8001f2a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f2e:	f023 030f 	bic.w	r3, r3, #15
 8001f32:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6959      	ldr	r1, [r3, #20]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	615a      	str	r2, [r3, #20]
      break;
 8001f46:	e03b      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6812      	ldr	r2, [r2, #0]
 8001f52:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f56:	f023 030f 	bic.w	r3, r3, #15
 8001f5a:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6999      	ldr	r1, [r3, #24]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	68da      	ldr	r2, [r3, #12]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	619a      	str	r2, [r3, #24]
      break;
 8001f6e:	e027      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	6812      	ldr	r2, [r2, #0]
 8001f7a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f7e:	f023 030f 	bic.w	r3, r3, #15
 8001f82:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	69d9      	ldr	r1, [r3, #28]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	61da      	str	r2, [r3, #28]
      break;
 8001f96:	e013      	b.n	8001fc0 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6a1b      	ldr	r3, [r3, #32]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6812      	ldr	r2, [r2, #0]
 8001fa2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001fa6:	f023 030f 	bic.w	r3, r3, #15
 8001faa:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a19      	ldr	r1, [r3, #32]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	621a      	str	r2, [r3, #32]
      break;
 8001fbe:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001fc2:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a17      	ldr	r2, [pc, #92]	; (8002028 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d109      	bne.n	8001fe2 <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b12      	cmp	r3, #18
 8001fd4:	d105      	bne.n	8001fe2 <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a10      	ldr	r2, [pc, #64]	; (8002028 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d10d      	bne.n	8002008 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d003      	beq.n	8001ffc <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2b11      	cmp	r3, #17
 8001ffa:	d105      	bne.n	8002008 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002010:	2300      	movs	r3, #0
}
 8002012:	4618      	mov	r0, r3
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	000f0001 	.word	0x000f0001
 8002024:	40012300 	.word	0x40012300
 8002028:	40012000 	.word	0x40012000

0800202c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002040:	2302      	movs	r3, #2
 8002042:	e031      	b.n	80020a8 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 800204e:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f023 021f 	bic.w	r2, r3, #31
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	431a      	orrs	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	431a      	orrs	r2, r3
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3714      	adds	r7, #20
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr
 80020b4:	40012300 	.word	0x40012300

080020b8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e0ed      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d102      	bne.n	80020dc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f00a fc74 	bl	800c9c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0202 	bic.w	r2, r2, #2
 80020ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020ec:	f7fe ffb2 	bl	8001054 <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020f2:	e012      	b.n	800211a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020f4:	f7fe ffae 	bl	8001054 <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b0a      	cmp	r3, #10
 8002100:	d90b      	bls.n	800211a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002106:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2205      	movs	r2, #5
 8002112:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0c5      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1e5      	bne.n	80020f4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f042 0201 	orr.w	r2, r2, #1
 8002136:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002138:	f7fe ff8c 	bl	8001054 <HAL_GetTick>
 800213c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800213e:	e012      	b.n	8002166 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002140:	f7fe ff88 	bl	8001054 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b0a      	cmp	r3, #10
 800214c:	d90b      	bls.n	8002166 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002152:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2205      	movs	r2, #5
 800215e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e09f      	b.n	80022a6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d0e5      	beq.n	8002140 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	7e1b      	ldrb	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d108      	bne.n	800218e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	e007      	b.n	800219e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800219c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	7e5b      	ldrb	r3, [r3, #25]
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d108      	bne.n	80021b8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	e007      	b.n	80021c8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	7e9b      	ldrb	r3, [r3, #26]
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d108      	bne.n	80021e2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0220 	orr.w	r2, r2, #32
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	e007      	b.n	80021f2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0220 	bic.w	r2, r2, #32
 80021f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	7edb      	ldrb	r3, [r3, #27]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d108      	bne.n	800220c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 0210 	bic.w	r2, r2, #16
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	e007      	b.n	800221c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0210 	orr.w	r2, r2, #16
 800221a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	7f1b      	ldrb	r3, [r3, #28]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d108      	bne.n	8002236 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f042 0208 	orr.w	r2, r2, #8
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	e007      	b.n	8002246 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f022 0208 	bic.w	r2, r2, #8
 8002244:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	7f5b      	ldrb	r3, [r3, #29]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d108      	bne.n	8002260 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0204 	orr.w	r2, r2, #4
 800225c:	601a      	str	r2, [r3, #0]
 800225e:	e007      	b.n	8002270 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0204 	bic.w	r2, r2, #4
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	431a      	orrs	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	431a      	orrs	r2, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	695b      	ldr	r3, [r3, #20]
 8002284:	ea42 0103 	orr.w	r1, r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	1e5a      	subs	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b087      	sub	sp, #28
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022c6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022c8:	7cfb      	ldrb	r3, [r7, #19]
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d003      	beq.n	80022d6 <HAL_CAN_ConfigFilter+0x26>
 80022ce:	7cfb      	ldrb	r3, [r7, #19]
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	f040 80be 	bne.w	8002452 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80022d6:	4b65      	ldr	r3, [pc, #404]	; (800246c <HAL_CAN_ConfigFilter+0x1bc>)
 80022d8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022e0:	f043 0201 	orr.w	r2, r3, #1
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022f0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	431a      	orrs	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2201      	movs	r2, #1
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	43db      	mvns	r3, r3
 8002328:	401a      	ands	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	69db      	ldr	r3, [r3, #28]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d123      	bne.n	8002380 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002356:	683a      	ldr	r2, [r7, #0]
 8002358:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800235a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	3248      	adds	r2, #72	; 0x48
 8002360:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002374:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002376:	6979      	ldr	r1, [r7, #20]
 8002378:	3348      	adds	r3, #72	; 0x48
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	440b      	add	r3, r1
 800237e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d122      	bne.n	80023ce <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	431a      	orrs	r2, r3
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023a4:	683a      	ldr	r2, [r7, #0]
 80023a6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80023a8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3248      	adds	r2, #72	; 0x48
 80023ae:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023c2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023c4:	6979      	ldr	r1, [r7, #20]
 80023c6:	3348      	adds	r3, #72	; 0x48
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	440b      	add	r3, r1
 80023cc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	43db      	mvns	r3, r3
 80023e0:	401a      	ands	r2, r3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023e8:	e007      	b.n	80023fa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	431a      	orrs	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d109      	bne.n	8002416 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	43db      	mvns	r3, r3
 800240c:	401a      	ands	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002414:	e007      	b.n	8002426 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	431a      	orrs	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	2b01      	cmp	r3, #1
 800242c:	d107      	bne.n	800243e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	431a      	orrs	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002444:	f023 0201 	bic.w	r2, r3, #1
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800244e:	2300      	movs	r3, #0
 8002450:	e006      	b.n	8002460 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
  }
}
 8002460:	4618      	mov	r0, r3
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40006400 	.word	0x40006400

08002470 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d12e      	bne.n	80024e2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800249c:	f7fe fdda 	bl	8001054 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024a2:	e012      	b.n	80024ca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024a4:	f7fe fdd6 	bl	8001054 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b0a      	cmp	r3, #10
 80024b0:	d90b      	bls.n	80024ca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2205      	movs	r2, #5
 80024c2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e012      	b.n	80024f0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1e5      	bne.n	80024a4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e006      	b.n	80024f0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002508:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800250a:	7bfb      	ldrb	r3, [r7, #15]
 800250c:	2b01      	cmp	r3, #1
 800250e:	d002      	beq.n	8002516 <HAL_CAN_ActivateNotification+0x1e>
 8002510:	7bfb      	ldrb	r3, [r7, #15]
 8002512:	2b02      	cmp	r3, #2
 8002514:	d109      	bne.n	800252a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6959      	ldr	r1, [r3, #20]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002526:	2300      	movs	r3, #0
 8002528:	e006      	b.n	8002538 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
  }
}
 8002538:	4618      	mov	r0, r3
 800253a:	3714      	adds	r7, #20
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	; 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800254c:	2300      	movs	r3, #0
 800254e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	695b      	ldr	r3, [r3, #20]
 8002556:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	691b      	ldr	r3, [r3, #16]
 8002576:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d07c      	beq.n	8002684 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	f003 0301 	and.w	r3, r3, #1
 8002590:	2b00      	cmp	r3, #0
 8002592:	d023      	beq.n	80025dc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2201      	movs	r2, #1
 800259a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f97d 	bl	80028a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80025ac:	e016      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025be:	627b      	str	r3, [r7, #36]	; 0x24
 80025c0:	e00c      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	f003 0308 	and.w	r3, r3, #8
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	e002      	b.n	80025dc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f983 	bl	80028e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d024      	beq.n	8002630 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f95d 	bl	80028ba <HAL_CAN_TxMailbox1CompleteCallback>
 8002600:	e016      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002602:	69bb      	ldr	r3, [r7, #24]
 8002604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
 8002614:	e00c      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002626:	627b      	str	r3, [r7, #36]	; 0x24
 8002628:	e002      	b.n	8002630 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f963 	bl	80028f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d024      	beq.n	8002684 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002642:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f93d 	bl	80028ce <HAL_CAN_TxMailbox2CompleteCallback>
 8002654:	e016      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002656:	69bb      	ldr	r3, [r7, #24]
 8002658:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800265c:	2b00      	cmp	r3, #0
 800265e:	d004      	beq.n	800266a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
 8002668:	e00c      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800267a:	627b      	str	r3, [r7, #36]	; 0x24
 800267c:	e002      	b.n	8002684 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f943 	bl	800290a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002684:	6a3b      	ldr	r3, [r7, #32]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800269e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2210      	movs	r2, #16
 80026a6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80026a8:	6a3b      	ldr	r3, [r7, #32]
 80026aa:	f003 0304 	and.w	r3, r3, #4
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00b      	beq.n	80026ca <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2208      	movs	r2, #8
 80026c2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f934 	bl	8002932 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d009      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f91b 	bl	800291e <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026e8:	6a3b      	ldr	r3, [r7, #32]
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00c      	beq.n	800270c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	f003 0310 	and.w	r3, r3, #16
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d007      	beq.n	800270c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002702:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2210      	movs	r2, #16
 800270a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b00      	cmp	r3, #0
 800271e:	d006      	beq.n	800272e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f000 f916 	bl	800295a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800272e:	6a3b      	ldr	r3, [r7, #32]
 8002730:	f003 0310 	and.w	r3, r3, #16
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d002      	beq.n	800274c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8fd 	bl	8002946 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	f003 0310 	and.w	r3, r3, #16
 800275c:	2b00      	cmp	r3, #0
 800275e:	d006      	beq.n	800276e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2210      	movs	r2, #16
 8002766:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f900 	bl	800296e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d00b      	beq.n	8002790 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2208      	movs	r2, #8
 8002788:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f8f9 	bl	8002982 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d075      	beq.n	8002886 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d06c      	beq.n	800287e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027a4:	6a3b      	ldr	r3, [r7, #32]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d008      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	f043 0301 	orr.w	r3, r3, #1
 80027be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027c0:	6a3b      	ldr	r3, [r7, #32]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f043 0302 	orr.w	r3, r3, #2
 80027da:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d008      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d003      	beq.n	80027f8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	f043 0304 	orr.w	r3, r3, #4
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d03d      	beq.n	800287e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002808:	2b00      	cmp	r3, #0
 800280a:	d038      	beq.n	800287e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002812:	2b30      	cmp	r3, #48	; 0x30
 8002814:	d017      	beq.n	8002846 <HAL_CAN_IRQHandler+0x302>
 8002816:	2b30      	cmp	r3, #48	; 0x30
 8002818:	d804      	bhi.n	8002824 <HAL_CAN_IRQHandler+0x2e0>
 800281a:	2b10      	cmp	r3, #16
 800281c:	d009      	beq.n	8002832 <HAL_CAN_IRQHandler+0x2ee>
 800281e:	2b20      	cmp	r3, #32
 8002820:	d00c      	beq.n	800283c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002822:	e024      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002824:	2b50      	cmp	r3, #80	; 0x50
 8002826:	d018      	beq.n	800285a <HAL_CAN_IRQHandler+0x316>
 8002828:	2b60      	cmp	r3, #96	; 0x60
 800282a:	d01b      	beq.n	8002864 <HAL_CAN_IRQHandler+0x320>
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d00f      	beq.n	8002850 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002830:	e01d      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	f043 0308 	orr.w	r3, r3, #8
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800283a:	e018      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	f043 0310 	orr.w	r3, r3, #16
 8002842:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002844:	e013      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	f043 0320 	orr.w	r3, r3, #32
 800284c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800284e:	e00e      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002852:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002856:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002858:	e009      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800285c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002860:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002862:	e004      	b.n	800286e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800286a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800286c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	699a      	ldr	r2, [r3, #24]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800287c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2204      	movs	r2, #4
 8002884:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	431a      	orrs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f000 f87c 	bl	8002996 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800289e:	bf00      	nop
 80028a0:	3728      	adds	r7, #40	; 0x28
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002962:	bf00      	nop
 8002964:	370c      	adds	r7, #12
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800296e:	b480      	push	{r7}
 8002970:	b083      	sub	sp, #12
 8002972:	af00      	add	r7, sp, #0
 8002974:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800299e:	bf00      	nop
 80029a0:	370c      	adds	r7, #12
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
	...

080029ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029bc:	4b0c      	ldr	r3, [pc, #48]	; (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029de:	4a04      	ldr	r2, [pc, #16]	; (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	60d3      	str	r3, [r2, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f8:	4b04      	ldr	r3, [pc, #16]	; (8002a0c <__NVIC_GetPriorityGrouping+0x18>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	f003 0307 	and.w	r3, r3, #7
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	db0b      	blt.n	8002a3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	f003 021f 	and.w	r2, r3, #31
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <__NVIC_EnableIRQ+0x38>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2001      	movs	r0, #1
 8002a32:	fa00 f202 	lsl.w	r2, r0, r2
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	db0a      	blt.n	8002a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <__NVIC_SetPriority+0x4c>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	0112      	lsls	r2, r2, #4
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	440b      	add	r3, r1
 8002a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a74:	e00a      	b.n	8002a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	b2da      	uxtb	r2, r3
 8002a7a:	4908      	ldr	r1, [pc, #32]	; (8002a9c <__NVIC_SetPriority+0x50>)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	3b04      	subs	r3, #4
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	b2d2      	uxtb	r2, r2
 8002a88:	440b      	add	r3, r1
 8002a8a:	761a      	strb	r2, [r3, #24]
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000e100 	.word	0xe000e100
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b089      	sub	sp, #36	; 0x24
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	60b9      	str	r1, [r7, #8]
 8002aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f003 0307 	and.w	r3, r3, #7
 8002ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f1c3 0307 	rsb	r3, r3, #7
 8002aba:	2b04      	cmp	r3, #4
 8002abc:	bf28      	it	cs
 8002abe:	2304      	movcs	r3, #4
 8002ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	3304      	adds	r3, #4
 8002ac6:	2b06      	cmp	r3, #6
 8002ac8:	d902      	bls.n	8002ad0 <NVIC_EncodePriority+0x30>
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3b03      	subs	r3, #3
 8002ace:	e000      	b.n	8002ad2 <NVIC_EncodePriority+0x32>
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ad4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43da      	mvns	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	401a      	ands	r2, r3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ae8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	fa01 f303 	lsl.w	r3, r1, r3
 8002af2:	43d9      	mvns	r1, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002af8:	4313      	orrs	r3, r2
         );
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3724      	adds	r7, #36	; 0x24
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
	...

08002b08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	3b01      	subs	r3, #1
 8002b14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b18:	d301      	bcc.n	8002b1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e00f      	b.n	8002b3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <SysTick_Config+0x40>)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3b01      	subs	r3, #1
 8002b24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b26:	210f      	movs	r1, #15
 8002b28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b2c:	f7ff ff8e 	bl	8002a4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b30:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <SysTick_Config+0x40>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b36:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <SysTick_Config+0x40>)
 8002b38:	2207      	movs	r2, #7
 8002b3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	e000e010 	.word	0xe000e010

08002b4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff ff29 	bl	80029ac <__NVIC_SetPriorityGrouping>
}
 8002b5a:	bf00      	nop
 8002b5c:	3708      	adds	r7, #8
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b086      	sub	sp, #24
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	4603      	mov	r3, r0
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b74:	f7ff ff3e 	bl	80029f4 <__NVIC_GetPriorityGrouping>
 8002b78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	68b9      	ldr	r1, [r7, #8]
 8002b7e:	6978      	ldr	r0, [r7, #20]
 8002b80:	f7ff ff8e 	bl	8002aa0 <NVIC_EncodePriority>
 8002b84:	4602      	mov	r2, r0
 8002b86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7ff ff5d 	bl	8002a4c <__NVIC_SetPriority>
}
 8002b92:	bf00      	nop
 8002b94:	3718      	adds	r7, #24
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}

08002b9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9a:	b580      	push	{r7, lr}
 8002b9c:	b082      	sub	sp, #8
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff ff31 	bl	8002a10 <__NVIC_EnableIRQ>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b082      	sub	sp, #8
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff ffa2 	bl	8002b08 <SysTick_Config>
 8002bc4:	4603      	mov	r3, r0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7fe fa3a 	bl	8001054 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e099      	b.n	8002d20 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 0201 	bic.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c0c:	e00f      	b.n	8002c2e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c0e:	f7fe fa21 	bl	8001054 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d908      	bls.n	8002c2e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2203      	movs	r2, #3
 8002c26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e078      	b.n	8002d20 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d1e8      	bne.n	8002c0e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4b38      	ldr	r3, [pc, #224]	; (8002d28 <HAL_DMA_Init+0x158>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c66:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c72:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c84:	2b04      	cmp	r3, #4
 8002c86:	d107      	bne.n	8002c98 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	4313      	orrs	r3, r2
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	695b      	ldr	r3, [r3, #20]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f023 0307 	bic.w	r3, r3, #7
 8002cae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	697a      	ldr	r2, [r7, #20]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbe:	2b04      	cmp	r3, #4
 8002cc0:	d117      	bne.n	8002cf2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fae5 	bl	80032a4 <DMA_CheckFifoParam>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d008      	beq.n	8002cf2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2240      	movs	r2, #64	; 0x40
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e016      	b.n	8002d20 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f000 fa9c 	bl	8003238 <DMA_CalcBaseAndBitshift>
 8002d00:	4603      	mov	r3, r0
 8002d02:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d08:	223f      	movs	r2, #63	; 0x3f
 8002d0a:	409a      	lsls	r2, r3
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3718      	adds	r7, #24
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	f010803f 	.word	0xf010803f

08002d2c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b086      	sub	sp, #24
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	60f8      	str	r0, [r7, #12]
 8002d34:	60b9      	str	r1, [r7, #8]
 8002d36:	607a      	str	r2, [r7, #4]
 8002d38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d42:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d101      	bne.n	8002d52 <HAL_DMA_Start_IT+0x26>
 8002d4e:	2302      	movs	r3, #2
 8002d50:	e040      	b.n	8002dd4 <HAL_DMA_Start_IT+0xa8>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d12f      	bne.n	8002dc6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2200      	movs	r2, #0
 8002d72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	68b9      	ldr	r1, [r7, #8]
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 fa2e 	bl	80031dc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d84:	223f      	movs	r2, #63	; 0x3f
 8002d86:	409a      	lsls	r2, r3
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0216 	orr.w	r2, r2, #22
 8002d9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d007      	beq.n	8002db4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0208 	orr.w	r2, r2, #8
 8002db2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f042 0201 	orr.w	r2, r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e005      	b.n	8002dd2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}

08002ddc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d004      	beq.n	8002dfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	; 0x80
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e00c      	b.n	8002e14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2205      	movs	r2, #5
 8002dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e12:	2300      	movs	r3, #0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e2c:	4b92      	ldr	r3, [pc, #584]	; (8003078 <HAL_DMA_IRQHandler+0x258>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a92      	ldr	r2, [pc, #584]	; (800307c <HAL_DMA_IRQHandler+0x25c>)
 8002e32:	fba2 2303 	umull	r2, r3, r2, r3
 8002e36:	0a9b      	lsrs	r3, r3, #10
 8002e38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	409a      	lsls	r2, r3
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d01a      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0304 	and.w	r3, r3, #4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0204 	bic.w	r2, r2, #4
 8002e72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	2208      	movs	r2, #8
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e84:	f043 0201 	orr.w	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	2201      	movs	r2, #1
 8002e92:	409a      	lsls	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	4013      	ands	r3, r2
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d012      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2201      	movs	r2, #1
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2204      	movs	r2, #4
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d012      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00b      	beq.n	8002ef8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef0:	f043 0204 	orr.w	r2, r3, #4
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efc:	2210      	movs	r2, #16
 8002efe:	409a      	lsls	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4013      	ands	r3, r2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d043      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d03c      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1a:	2210      	movs	r2, #16
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d018      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d108      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d024      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	4798      	blx	r3
 8002f4e:	e01f      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d01b      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e016      	b.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0208 	bic.w	r2, r2, #8
 8002f7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f94:	2220      	movs	r2, #32
 8002f96:	409a      	lsls	r2, r3
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 808e 	beq.w	80030be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0310 	and.w	r3, r3, #16
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	f000 8086 	beq.w	80030be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b05      	cmp	r3, #5
 8002fc8:	d136      	bne.n	8003038 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0216 	bic.w	r2, r2, #22
 8002fd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fe8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d103      	bne.n	8002ffa <HAL_DMA_IRQHandler+0x1da>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d007      	beq.n	800300a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0208 	bic.w	r2, r2, #8
 8003008:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	223f      	movs	r2, #63	; 0x3f
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2201      	movs	r2, #1
 8003022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302a:	2b00      	cmp	r3, #0
 800302c:	d07d      	beq.n	800312a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	4798      	blx	r3
        }
        return;
 8003036:	e078      	b.n	800312a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d01c      	beq.n	8003080 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d108      	bne.n	8003066 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003058:	2b00      	cmp	r3, #0
 800305a:	d030      	beq.n	80030be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
 8003064:	e02b      	b.n	80030be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d027      	beq.n	80030be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
 8003076:	e022      	b.n	80030be <HAL_DMA_IRQHandler+0x29e>
 8003078:	20000040 	.word	0x20000040
 800307c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10f      	bne.n	80030ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f022 0210 	bic.w	r2, r2, #16
 800309c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d032      	beq.n	800312c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d022      	beq.n	8003118 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2205      	movs	r2, #5
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	3301      	adds	r3, #1
 80030ee:	60bb      	str	r3, [r7, #8]
 80030f0:	697a      	ldr	r2, [r7, #20]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d307      	bcc.n	8003106 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1f2      	bne.n	80030ea <HAL_DMA_IRQHandler+0x2ca>
 8003104:	e000      	b.n	8003108 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003106:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2201      	movs	r2, #1
 8003114:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4798      	blx	r3
 8003128:	e000      	b.n	800312c <HAL_DMA_IRQHandler+0x30c>
        return;
 800312a:	bf00      	nop
    }
  }
}
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop

08003134 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	460b      	mov	r3, r1
 800313e:	607a      	str	r2, [r7, #4]
 8003140:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800314c:	2b01      	cmp	r3, #1
 800314e:	d101      	bne.n	8003154 <HAL_DMA_RegisterCallback+0x20>
 8003150:	2302      	movs	r3, #2
 8003152:	e03c      	b.n	80031ce <HAL_DMA_RegisterCallback+0x9a>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b01      	cmp	r3, #1
 8003166:	d129      	bne.n	80031bc <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003168:	7afb      	ldrb	r3, [r7, #11]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d829      	bhi.n	80031c2 <HAL_DMA_RegisterCallback+0x8e>
 800316e:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_DMA_RegisterCallback+0x40>)
 8003170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003174:	0800318d 	.word	0x0800318d
 8003178:	08003195 	.word	0x08003195
 800317c:	0800319d 	.word	0x0800319d
 8003180:	080031a5 	.word	0x080031a5
 8003184:	080031ad 	.word	0x080031ad
 8003188:	080031b5 	.word	0x080031b5
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 8003192:	e017      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800319a:	e013      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 80031a2:	e00f      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 80031aa:	e00b      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 80031b2:	e007      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031ba:	e003      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	75fb      	strb	r3, [r7, #23]
 80031c0:	e000      	b.n	80031c4 <HAL_DMA_RegisterCallback+0x90>
      break;
 80031c2:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	371c      	adds	r7, #28
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
 80031e8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031f8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b40      	cmp	r3, #64	; 0x40
 8003208:	d108      	bne.n	800321c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800321a:	e007      	b.n	800322c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
}
 800322c:	bf00      	nop
 800322e:	3714      	adds	r7, #20
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	b2db      	uxtb	r3, r3
 8003246:	3b10      	subs	r3, #16
 8003248:	4a14      	ldr	r2, [pc, #80]	; (800329c <DMA_CalcBaseAndBitshift+0x64>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003252:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <DMA_CalcBaseAndBitshift+0x68>)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4413      	add	r3, r2
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	461a      	mov	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b03      	cmp	r3, #3
 8003264:	d909      	bls.n	800327a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326e:	f023 0303 	bic.w	r3, r3, #3
 8003272:	1d1a      	adds	r2, r3, #4
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	659a      	str	r2, [r3, #88]	; 0x58
 8003278:	e007      	b.n	800328a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003282:	f023 0303 	bic.w	r3, r3, #3
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800328e:	4618      	mov	r0, r3
 8003290:	3714      	adds	r7, #20
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
 800329a:	bf00      	nop
 800329c:	aaaaaaab 	.word	0xaaaaaaab
 80032a0:	080133f0 	.word	0x080133f0

080032a4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ac:	2300      	movs	r3, #0
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d11f      	bne.n	80032fe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d855      	bhi.n	8003370 <DMA_CheckFifoParam+0xcc>
 80032c4:	a201      	add	r2, pc, #4	; (adr r2, 80032cc <DMA_CheckFifoParam+0x28>)
 80032c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ca:	bf00      	nop
 80032cc:	080032dd 	.word	0x080032dd
 80032d0:	080032ef 	.word	0x080032ef
 80032d4:	080032dd 	.word	0x080032dd
 80032d8:	08003371 	.word	0x08003371
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d045      	beq.n	8003374 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032ec:	e042      	b.n	8003374 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032f6:	d13f      	bne.n	8003378 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032fc:	e03c      	b.n	8003378 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003306:	d121      	bne.n	800334c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	2b03      	cmp	r3, #3
 800330c:	d836      	bhi.n	800337c <DMA_CheckFifoParam+0xd8>
 800330e:	a201      	add	r2, pc, #4	; (adr r2, 8003314 <DMA_CheckFifoParam+0x70>)
 8003310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003314:	08003325 	.word	0x08003325
 8003318:	0800332b 	.word	0x0800332b
 800331c:	08003325 	.word	0x08003325
 8003320:	0800333d 	.word	0x0800333d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	73fb      	strb	r3, [r7, #15]
      break;
 8003328:	e02f      	b.n	800338a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d024      	beq.n	8003380 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800333a:	e021      	b.n	8003380 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003344:	d11e      	bne.n	8003384 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800334a:	e01b      	b.n	8003384 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b02      	cmp	r3, #2
 8003350:	d902      	bls.n	8003358 <DMA_CheckFifoParam+0xb4>
 8003352:	2b03      	cmp	r3, #3
 8003354:	d003      	beq.n	800335e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003356:	e018      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	73fb      	strb	r3, [r7, #15]
      break;
 800335c:	e015      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00e      	beq.n	8003388 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	73fb      	strb	r3, [r7, #15]
      break;
 800336e:	e00b      	b.n	8003388 <DMA_CheckFifoParam+0xe4>
      break;
 8003370:	bf00      	nop
 8003372:	e00a      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003374:	bf00      	nop
 8003376:	e008      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003378:	bf00      	nop
 800337a:	e006      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 800337c:	bf00      	nop
 800337e:	e004      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003380:	bf00      	nop
 8003382:	e002      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;   
 8003384:	bf00      	nop
 8003386:	e000      	b.n	800338a <DMA_CheckFifoParam+0xe6>
      break;
 8003388:	bf00      	nop
    }
  } 
  
  return status; 
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003398:	b480      	push	{r7}
 800339a:	b089      	sub	sp, #36	; 0x24
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033aa:	2300      	movs	r3, #0
 80033ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
 80033b2:	e16b      	b.n	800368c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80033b4:	2201      	movs	r2, #1
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	f040 815a 	bne.w	8003686 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d00b      	beq.n	80033f2 <HAL_GPIO_Init+0x5a>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d007      	beq.n	80033f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033e6:	2b11      	cmp	r3, #17
 80033e8:	d003      	beq.n	80033f2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	2b12      	cmp	r3, #18
 80033f0:	d130      	bne.n	8003454 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033f8:	69fb      	ldr	r3, [r7, #28]
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	2203      	movs	r2, #3
 80033fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003402:	43db      	mvns	r3, r3
 8003404:	69ba      	ldr	r2, [r7, #24]
 8003406:	4013      	ands	r3, r2
 8003408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68da      	ldr	r2, [r3, #12]
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4313      	orrs	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003428:	2201      	movs	r2, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	43db      	mvns	r3, r3
 8003432:	69ba      	ldr	r2, [r7, #24]
 8003434:	4013      	ands	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	091b      	lsrs	r3, r3, #4
 800343e:	f003 0201 	and.w	r2, r3, #1
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fa02 f303 	lsl.w	r3, r2, r3
 8003448:	69ba      	ldr	r2, [r7, #24]
 800344a:	4313      	orrs	r3, r2
 800344c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	2203      	movs	r2, #3
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b02      	cmp	r3, #2
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0xfc>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	2b12      	cmp	r3, #18
 8003492:	d123      	bne.n	80034dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f003 0307 	and.w	r3, r3, #7
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	220f      	movs	r2, #15
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	4013      	ands	r3, r2
 80034b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	691a      	ldr	r2, [r3, #16]
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	08da      	lsrs	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	3208      	adds	r2, #8
 80034d6:	69b9      	ldr	r1, [r7, #24]
 80034d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0203 	and.w	r2, r3, #3
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	69ba      	ldr	r2, [r7, #24]
 8003506:	4313      	orrs	r3, r2
 8003508:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	f000 80b4 	beq.w	8003686 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b5f      	ldr	r3, [pc, #380]	; (80036a0 <HAL_GPIO_Init+0x308>)
 8003524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003526:	4a5e      	ldr	r2, [pc, #376]	; (80036a0 <HAL_GPIO_Init+0x308>)
 8003528:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800352c:	6453      	str	r3, [r2, #68]	; 0x44
 800352e:	4b5c      	ldr	r3, [pc, #368]	; (80036a0 <HAL_GPIO_Init+0x308>)
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800353a:	4a5a      	ldr	r2, [pc, #360]	; (80036a4 <HAL_GPIO_Init+0x30c>)
 800353c:	69fb      	ldr	r3, [r7, #28]
 800353e:	089b      	lsrs	r3, r3, #2
 8003540:	3302      	adds	r3, #2
 8003542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0303 	and.w	r3, r3, #3
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	220f      	movs	r2, #15
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	43db      	mvns	r3, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4013      	ands	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a51      	ldr	r2, [pc, #324]	; (80036a8 <HAL_GPIO_Init+0x310>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d02b      	beq.n	80035be <HAL_GPIO_Init+0x226>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a50      	ldr	r2, [pc, #320]	; (80036ac <HAL_GPIO_Init+0x314>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d025      	beq.n	80035ba <HAL_GPIO_Init+0x222>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4f      	ldr	r2, [pc, #316]	; (80036b0 <HAL_GPIO_Init+0x318>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d01f      	beq.n	80035b6 <HAL_GPIO_Init+0x21e>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4e      	ldr	r2, [pc, #312]	; (80036b4 <HAL_GPIO_Init+0x31c>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d019      	beq.n	80035b2 <HAL_GPIO_Init+0x21a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4d      	ldr	r2, [pc, #308]	; (80036b8 <HAL_GPIO_Init+0x320>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d013      	beq.n	80035ae <HAL_GPIO_Init+0x216>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a4c      	ldr	r2, [pc, #304]	; (80036bc <HAL_GPIO_Init+0x324>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00d      	beq.n	80035aa <HAL_GPIO_Init+0x212>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a4b      	ldr	r2, [pc, #300]	; (80036c0 <HAL_GPIO_Init+0x328>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <HAL_GPIO_Init+0x20e>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a4a      	ldr	r2, [pc, #296]	; (80036c4 <HAL_GPIO_Init+0x32c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d101      	bne.n	80035a2 <HAL_GPIO_Init+0x20a>
 800359e:	2307      	movs	r3, #7
 80035a0:	e00e      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035a2:	2308      	movs	r3, #8
 80035a4:	e00c      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035a6:	2306      	movs	r3, #6
 80035a8:	e00a      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035aa:	2305      	movs	r3, #5
 80035ac:	e008      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035ae:	2304      	movs	r3, #4
 80035b0:	e006      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035b2:	2303      	movs	r3, #3
 80035b4:	e004      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e002      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_GPIO_Init+0x228>
 80035be:	2300      	movs	r3, #0
 80035c0:	69fa      	ldr	r2, [r7, #28]
 80035c2:	f002 0203 	and.w	r2, r2, #3
 80035c6:	0092      	lsls	r2, r2, #2
 80035c8:	4093      	lsls	r3, r2
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035d0:	4934      	ldr	r1, [pc, #208]	; (80036a4 <HAL_GPIO_Init+0x30c>)
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	089b      	lsrs	r3, r3, #2
 80035d6:	3302      	adds	r3, #2
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035de:	4b3a      	ldr	r3, [pc, #232]	; (80036c8 <HAL_GPIO_Init+0x330>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	43db      	mvns	r3, r3
 80035e8:	69ba      	ldr	r2, [r7, #24]
 80035ea:	4013      	ands	r3, r2
 80035ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d003      	beq.n	8003602 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003602:	4a31      	ldr	r2, [pc, #196]	; (80036c8 <HAL_GPIO_Init+0x330>)
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003608:	4b2f      	ldr	r3, [pc, #188]	; (80036c8 <HAL_GPIO_Init+0x330>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	43db      	mvns	r3, r3
 8003612:	69ba      	ldr	r2, [r7, #24]
 8003614:	4013      	ands	r3, r2
 8003616:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800362c:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <HAL_GPIO_Init+0x330>)
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003632:	4b25      	ldr	r3, [pc, #148]	; (80036c8 <HAL_GPIO_Init+0x330>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003656:	4a1c      	ldr	r2, [pc, #112]	; (80036c8 <HAL_GPIO_Init+0x330>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_GPIO_Init+0x330>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003680:	4a11      	ldr	r2, [pc, #68]	; (80036c8 <HAL_GPIO_Init+0x330>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	3301      	adds	r3, #1
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	2b0f      	cmp	r3, #15
 8003690:	f67f ae90 	bls.w	80033b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003694:	bf00      	nop
 8003696:	3724      	adds	r7, #36	; 0x24
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	40023800 	.word	0x40023800
 80036a4:	40013800 	.word	0x40013800
 80036a8:	40020000 	.word	0x40020000
 80036ac:	40020400 	.word	0x40020400
 80036b0:	40020800 	.word	0x40020800
 80036b4:	40020c00 	.word	0x40020c00
 80036b8:	40021000 	.word	0x40021000
 80036bc:	40021400 	.word	0x40021400
 80036c0:	40021800 	.word	0x40021800
 80036c4:	40021c00 	.word	0x40021c00
 80036c8:	40013c00 	.word	0x40013c00

080036cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	807b      	strh	r3, [r7, #2]
 80036d8:	4613      	mov	r3, r2
 80036da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036dc:	787b      	ldrb	r3, [r7, #1]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e8:	e003      	b.n	80036f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036ea:	887b      	ldrh	r3, [r7, #2]
 80036ec:	041a      	lsls	r2, r3, #16
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	619a      	str	r2, [r3, #24]
}
 80036f2:	bf00      	nop
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr

080036fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
 8003706:	460b      	mov	r3, r1
 8003708:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	887b      	ldrh	r3, [r7, #2]
 8003710:	401a      	ands	r2, r3
 8003712:	887b      	ldrh	r3, [r7, #2]
 8003714:	429a      	cmp	r2, r3
 8003716:	d104      	bne.n	8003722 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003718:	887b      	ldrh	r3, [r7, #2]
 800371a:	041a      	lsls	r2, r3, #16
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003720:	e002      	b.n	8003728 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003722:	887a      	ldrh	r2, [r7, #2]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	619a      	str	r2, [r3, #24]
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b082      	sub	sp, #8
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800373e:	4b08      	ldr	r3, [pc, #32]	; (8003760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003740:	695a      	ldr	r2, [r3, #20]
 8003742:	88fb      	ldrh	r3, [r7, #6]
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800374a:	4a05      	ldr	r2, [pc, #20]	; (8003760 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	4618      	mov	r0, r3
 8003754:	f008 fa10 	bl	800bb78 <HAL_GPIO_EXTI_Callback>
  }
}
 8003758:	bf00      	nop
 800375a:	3708      	adds	r7, #8
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}
 8003760:	40013c00 	.word	0x40013c00

08003764 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e11f      	b.n	80039b6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f009 f96a 	bl	800ca64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	; 0x24
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 0201 	bic.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037c8:	f001 fcb6 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a7b      	ldr	r2, [pc, #492]	; (80039c0 <HAL_I2C_Init+0x25c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d807      	bhi.n	80037e8 <HAL_I2C_Init+0x84>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a7a      	ldr	r2, [pc, #488]	; (80039c4 <HAL_I2C_Init+0x260>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	e006      	b.n	80037f6 <HAL_I2C_Init+0x92>
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4a77      	ldr	r2, [pc, #476]	; (80039c8 <HAL_I2C_Init+0x264>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	bf94      	ite	ls
 80037f0:	2301      	movls	r3, #1
 80037f2:	2300      	movhi	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e0db      	b.n	80039b6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4a72      	ldr	r2, [pc, #456]	; (80039cc <HAL_I2C_Init+0x268>)
 8003802:	fba2 2303 	umull	r2, r3, r2, r3
 8003806:	0c9b      	lsrs	r3, r3, #18
 8003808:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	430a      	orrs	r2, r1
 800381c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a64      	ldr	r2, [pc, #400]	; (80039c0 <HAL_I2C_Init+0x25c>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d802      	bhi.n	8003838 <HAL_I2C_Init+0xd4>
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	3301      	adds	r3, #1
 8003836:	e009      	b.n	800384c <HAL_I2C_Init+0xe8>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800383e:	fb02 f303 	mul.w	r3, r2, r3
 8003842:	4a63      	ldr	r2, [pc, #396]	; (80039d0 <HAL_I2C_Init+0x26c>)
 8003844:	fba2 2303 	umull	r2, r3, r2, r3
 8003848:	099b      	lsrs	r3, r3, #6
 800384a:	3301      	adds	r3, #1
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6812      	ldr	r2, [r2, #0]
 8003850:	430b      	orrs	r3, r1
 8003852:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800385e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4956      	ldr	r1, [pc, #344]	; (80039c0 <HAL_I2C_Init+0x25c>)
 8003868:	428b      	cmp	r3, r1
 800386a:	d80d      	bhi.n	8003888 <HAL_I2C_Init+0x124>
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1e59      	subs	r1, r3, #1
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	fbb1 f3f3 	udiv	r3, r1, r3
 800387a:	3301      	adds	r3, #1
 800387c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003880:	2b04      	cmp	r3, #4
 8003882:	bf38      	it	cc
 8003884:	2304      	movcc	r3, #4
 8003886:	e04f      	b.n	8003928 <HAL_I2C_Init+0x1c4>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d111      	bne.n	80038b4 <HAL_I2C_Init+0x150>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	1e58      	subs	r0, r3, #1
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6859      	ldr	r1, [r3, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	440b      	add	r3, r1
 800389e:	fbb0 f3f3 	udiv	r3, r0, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	bf0c      	ite	eq
 80038ac:	2301      	moveq	r3, #1
 80038ae:	2300      	movne	r3, #0
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	e012      	b.n	80038da <HAL_I2C_Init+0x176>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	1e58      	subs	r0, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6859      	ldr	r1, [r3, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	440b      	add	r3, r1
 80038c2:	0099      	lsls	r1, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Init+0x17e>
 80038de:	2301      	movs	r3, #1
 80038e0:	e022      	b.n	8003928 <HAL_I2C_Init+0x1c4>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10e      	bne.n	8003908 <HAL_I2C_Init+0x1a4>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	1e58      	subs	r0, r3, #1
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6859      	ldr	r1, [r3, #4]
 80038f2:	460b      	mov	r3, r1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	440b      	add	r3, r1
 80038f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fc:	3301      	adds	r3, #1
 80038fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003906:	e00f      	b.n	8003928 <HAL_I2C_Init+0x1c4>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	1e58      	subs	r0, r3, #1
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6859      	ldr	r1, [r3, #4]
 8003910:	460b      	mov	r3, r1
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	0099      	lsls	r1, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	fbb0 f3f3 	udiv	r3, r0, r3
 800391e:	3301      	adds	r3, #1
 8003920:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003924:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003928:	6879      	ldr	r1, [r7, #4]
 800392a:	6809      	ldr	r1, [r1, #0]
 800392c:	4313      	orrs	r3, r2
 800392e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69da      	ldr	r2, [r3, #28]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003956:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	6911      	ldr	r1, [r2, #16]
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	4311      	orrs	r1, r2
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6812      	ldr	r2, [r2, #0]
 8003968:	430b      	orrs	r3, r1
 800396a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	695a      	ldr	r2, [r3, #20]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	431a      	orrs	r2, r3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	430a      	orrs	r2, r1
 8003986:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0201 	orr.w	r2, r2, #1
 8003996:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	000186a0 	.word	0x000186a0
 80039c4:	001e847f 	.word	0x001e847f
 80039c8:	003d08ff 	.word	0x003d08ff
 80039cc:	431bde83 	.word	0x431bde83
 80039d0:	10624dd3 	.word	0x10624dd3

080039d4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af02      	add	r7, sp, #8
 80039da:	60f8      	str	r0, [r7, #12]
 80039dc:	607a      	str	r2, [r7, #4]
 80039de:	461a      	mov	r2, r3
 80039e0:	460b      	mov	r3, r1
 80039e2:	817b      	strh	r3, [r7, #10]
 80039e4:	4613      	mov	r3, r2
 80039e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039e8:	f7fd fb34 	bl	8001054 <HAL_GetTick>
 80039ec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	f040 80e0 	bne.w	8003bbc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	9300      	str	r3, [sp, #0]
 8003a00:	2319      	movs	r3, #25
 8003a02:	2201      	movs	r2, #1
 8003a04:	4970      	ldr	r1, [pc, #448]	; (8003bc8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a06:	68f8      	ldr	r0, [r7, #12]
 8003a08:	f000 fc56 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a12:	2302      	movs	r3, #2
 8003a14:	e0d3      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <HAL_I2C_Master_Transmit+0x50>
 8003a20:	2302      	movs	r3, #2
 8003a22:	e0cc      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d007      	beq.n	8003a4a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f042 0201 	orr.w	r2, r2, #1
 8003a48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a58:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2221      	movs	r2, #33	; 0x21
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2210      	movs	r2, #16
 8003a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	893a      	ldrh	r2, [r7, #8]
 8003a7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a50      	ldr	r2, [pc, #320]	; (8003bcc <HAL_I2C_Master_Transmit+0x1f8>)
 8003a8a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a8c:	8979      	ldrh	r1, [r7, #10]
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	6a3a      	ldr	r2, [r7, #32]
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 fac2 	bl	800401c <I2C_MasterRequestWrite>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e08d      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	613b      	str	r3, [r7, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	613b      	str	r3, [r7, #16]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ab8:	e066      	b.n	8003b88 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	6a39      	ldr	r1, [r7, #32]
 8003abe:	68f8      	ldr	r0, [r7, #12]
 8003ac0:	f000 fcd0 	bl	8004464 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00d      	beq.n	8003ae6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d107      	bne.n	8003ae2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e06b      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	781a      	ldrb	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	3b01      	subs	r3, #1
 8003b04:	b29a      	uxth	r2, r3
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0e:	3b01      	subs	r3, #1
 8003b10:	b29a      	uxth	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11b      	bne.n	8003b5c <HAL_I2C_Master_Transmit+0x188>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d017      	beq.n	8003b5c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	6a39      	ldr	r1, [r7, #32]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 fcc0 	bl	80044e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00d      	beq.n	8003b88 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d107      	bne.n	8003b84 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b82:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e01a      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d194      	bne.n	8003aba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
 8003bba:	e000      	b.n	8003bbe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bbc:	2302      	movs	r3, #2
  }
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3718      	adds	r7, #24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	00100002 	.word	0x00100002
 8003bcc:	ffff0000 	.word	0xffff0000

08003bd0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b08c      	sub	sp, #48	; 0x30
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	607a      	str	r2, [r7, #4]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	460b      	mov	r3, r1
 8003bde:	817b      	strh	r3, [r7, #10]
 8003be0:	4613      	mov	r3, r2
 8003be2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7fd fa36 	bl	8001054 <HAL_GetTick>
 8003be8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	f040 820b 	bne.w	800400e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2319      	movs	r3, #25
 8003bfe:	2201      	movs	r2, #1
 8003c00:	497c      	ldr	r1, [pc, #496]	; (8003df4 <HAL_I2C_Master_Receive+0x224>)
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f000 fb58 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003c0e:	2302      	movs	r3, #2
 8003c10:	e1fe      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_I2C_Master_Receive+0x50>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e1f7      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d007      	beq.n	8003c46 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f042 0201 	orr.w	r2, r2, #1
 8003c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681a      	ldr	r2, [r3, #0]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c54:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2222      	movs	r2, #34	; 0x22
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	2210      	movs	r2, #16
 8003c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	687a      	ldr	r2, [r7, #4]
 8003c70:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	893a      	ldrh	r2, [r7, #8]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	4a5c      	ldr	r2, [pc, #368]	; (8003df8 <HAL_I2C_Master_Receive+0x228>)
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c88:	8979      	ldrh	r1, [r7, #10]
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fa46 	bl	8004120 <I2C_MasterRequestRead>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e1b8      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d113      	bne.n	8003cce <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	623b      	str	r3, [r7, #32]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	623b      	str	r3, [r7, #32]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	699b      	ldr	r3, [r3, #24]
 8003cb8:	623b      	str	r3, [r7, #32]
 8003cba:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]
 8003ccc:	e18c      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d11b      	bne.n	8003d0e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ce4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695b      	ldr	r3, [r3, #20]
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	61fb      	str	r3, [r7, #28]
 8003cfa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
 8003d0c:	e16c      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d11b      	bne.n	8003d4e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d24:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	695b      	ldr	r3, [r3, #20]
 8003d40:	61bb      	str	r3, [r7, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	699b      	ldr	r3, [r3, #24]
 8003d48:	61bb      	str	r3, [r7, #24]
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	e14c      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	695b      	ldr	r3, [r3, #20]
 8003d68:	617b      	str	r3, [r7, #20]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	617b      	str	r3, [r7, #20]
 8003d72:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d74:	e138      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	f200 80f1 	bhi.w	8003f62 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d84:	2b01      	cmp	r3, #1
 8003d86:	d123      	bne.n	8003dd0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f000 fbeb 	bl	8004568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e139      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dc4:	b29b      	uxth	r3, r3
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003dce:	e10b      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d14e      	bne.n	8003e76 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	2200      	movs	r2, #0
 8003de0:	4906      	ldr	r1, [pc, #24]	; (8003dfc <HAL_I2C_Master_Receive+0x22c>)
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 fa68 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d008      	beq.n	8003e00 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e10e      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
 8003df2:	bf00      	nop
 8003df4:	00100002 	.word	0x00100002
 8003df8:	ffff0000 	.word	0xffff0000
 8003dfc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	b29a      	uxth	r2, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e74:	e0b8      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e78:	9300      	str	r3, [sp, #0]
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	4966      	ldr	r1, [pc, #408]	; (8004018 <HAL_I2C_Master_Receive+0x448>)
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fa19 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d001      	beq.n	8003e90 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e0bf      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	b2d2      	uxtb	r2, r2
 8003eac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	1c5a      	adds	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	2200      	movs	r2, #0
 8003eda:	494f      	ldr	r1, [pc, #316]	; (8004018 <HAL_I2C_Master_Receive+0x448>)
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f9eb 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e091      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003efa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	691a      	ldr	r2, [r3, #16]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	b2d2      	uxtb	r2, r2
 8003f08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	b29a      	uxth	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	3b01      	subs	r3, #1
 8003f28:	b29a      	uxth	r2, r3
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	691a      	ldr	r2, [r3, #16]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	b2d2      	uxtb	r2, r2
 8003f3a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f4a:	3b01      	subs	r3, #1
 8003f4c:	b29a      	uxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f60:	e042      	b.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fafe 	bl	8004568 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e04c      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0304 	and.w	r3, r3, #4
 8003fb2:	2b04      	cmp	r3, #4
 8003fb4:	d118      	bne.n	8003fe8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc0:	b2d2      	uxtb	r2, r2
 8003fc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc8:	1c5a      	adds	r2, r3, #1
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	b29a      	uxth	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	b29a      	uxth	r2, r3
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	f47f aec2 	bne.w	8003d76 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2220      	movs	r2, #32
 8003ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800400e:	2302      	movs	r3, #2
  }
}
 8004010:	4618      	mov	r0, r3
 8004012:	3728      	adds	r7, #40	; 0x28
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	00010004 	.word	0x00010004

0800401c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b088      	sub	sp, #32
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	460b      	mov	r3, r1
 800402a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004030:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d006      	beq.n	8004046 <I2C_MasterRequestWrite+0x2a>
 8004038:	697b      	ldr	r3, [r7, #20]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d003      	beq.n	8004046 <I2C_MasterRequestWrite+0x2a>
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004044:	d108      	bne.n	8004058 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004054:	601a      	str	r2, [r3, #0]
 8004056:	e00b      	b.n	8004070 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	2b12      	cmp	r3, #18
 800405e:	d107      	bne.n	8004070 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800406e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f91b 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d00c      	beq.n	80040a2 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004092:	2b00      	cmp	r3, #0
 8004094:	d003      	beq.n	800409e <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	f44f 7200 	mov.w	r2, #512	; 0x200
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e035      	b.n	800410e <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040aa:	d108      	bne.n	80040be <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040ac:	897b      	ldrh	r3, [r7, #10]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	461a      	mov	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040ba:	611a      	str	r2, [r3, #16]
 80040bc:	e01b      	b.n	80040f6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	11db      	asrs	r3, r3, #7
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f003 0306 	and.w	r3, r3, #6
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	f063 030f 	orn	r3, r3, #15
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	490f      	ldr	r1, [pc, #60]	; (8004118 <I2C_MasterRequestWrite+0xfc>)
 80040dc:	68f8      	ldr	r0, [r7, #12]
 80040de:	f000 f942 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d001      	beq.n	80040ec <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e010      	b.n	800410e <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040ec:	897b      	ldrh	r3, [r7, #10]
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	4908      	ldr	r1, [pc, #32]	; (800411c <I2C_MasterRequestWrite+0x100>)
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f932 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e000      	b.n	800410e <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	00010008 	.word	0x00010008
 800411c:	00010002 	.word	0x00010002

08004120 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	607a      	str	r2, [r7, #4]
 800412a:	603b      	str	r3, [r7, #0]
 800412c:	460b      	mov	r3, r1
 800412e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004134:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004144:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	2b08      	cmp	r3, #8
 800414a:	d006      	beq.n	800415a <I2C_MasterRequestRead+0x3a>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d003      	beq.n	800415a <I2C_MasterRequestRead+0x3a>
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004158:	d108      	bne.n	800416c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	e00b      	b.n	8004184 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004170:	2b11      	cmp	r3, #17
 8004172:	d107      	bne.n	8004184 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004182:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f891 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00c      	beq.n	80041b6 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e078      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041be:	d108      	bne.n	80041d2 <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041c0:	897b      	ldrh	r3, [r7, #10]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	f043 0301 	orr.w	r3, r3, #1
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]
 80041d0:	e05e      	b.n	8004290 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	11db      	asrs	r3, r3, #7
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	f003 0306 	and.w	r3, r3, #6
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f063 030f 	orn	r3, r3, #15
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	4930      	ldr	r1, [pc, #192]	; (80042b0 <I2C_MasterRequestRead+0x190>)
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f000 f8b8 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d001      	beq.n	8004200 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e053      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004200:	897b      	ldrh	r3, [r7, #10]
 8004202:	b2da      	uxtb	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	4929      	ldr	r1, [pc, #164]	; (80042b4 <I2C_MasterRequestRead+0x194>)
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f8a8 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d001      	beq.n	8004220 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e043      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004220:	2300      	movs	r3, #0
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	613b      	str	r3, [r7, #16]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	613b      	str	r3, [r7, #16]
 8004234:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004244:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	9300      	str	r3, [sp, #0]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f830 	bl	80042b8 <I2C_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	e017      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004278:	897b      	ldrh	r3, [r7, #10]
 800427a:	11db      	asrs	r3, r3, #7
 800427c:	b2db      	uxtb	r3, r3
 800427e:	f003 0306 	and.w	r3, r3, #6
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f063 030e 	orn	r3, r3, #14
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	4907      	ldr	r1, [pc, #28]	; (80042b4 <I2C_MasterRequestRead+0x194>)
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f865 	bl	8004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e000      	b.n	80042a8 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3718      	adds	r7, #24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	00010008 	.word	0x00010008
 80042b4:	00010002 	.word	0x00010002

080042b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	603b      	str	r3, [r7, #0]
 80042c4:	4613      	mov	r3, r2
 80042c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c8:	e025      	b.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042d0:	d021      	beq.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042d2:	f7fc febf 	bl	8001054 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d302      	bcc.n	80042e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d116      	bne.n	8004316 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2200      	movs	r2, #0
 80042ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2220      	movs	r2, #32
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	f043 0220 	orr.w	r2, r3, #32
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e023      	b.n	800435e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	0c1b      	lsrs	r3, r3, #16
 800431a:	b2db      	uxtb	r3, r3
 800431c:	2b01      	cmp	r3, #1
 800431e:	d10d      	bne.n	800433c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	43da      	mvns	r2, r3
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	4013      	ands	r3, r2
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	bf0c      	ite	eq
 8004332:	2301      	moveq	r3, #1
 8004334:	2300      	movne	r3, #0
 8004336:	b2db      	uxtb	r3, r3
 8004338:	461a      	mov	r2, r3
 800433a:	e00c      	b.n	8004356 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4013      	ands	r3, r2
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	bf0c      	ite	eq
 800434e:	2301      	moveq	r3, #1
 8004350:	2300      	movne	r3, #0
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	79fb      	ldrb	r3, [r7, #7]
 8004358:	429a      	cmp	r2, r3
 800435a:	d0b6      	beq.n	80042ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	60f8      	str	r0, [r7, #12]
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004374:	e051      	b.n	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004384:	d123      	bne.n	80043ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004394:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800439e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2200      	movs	r2, #0
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2220      	movs	r2, #32
 80043aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ba:	f043 0204 	orr.w	r2, r3, #4
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e046      	b.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d4:	d021      	beq.n	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fc fe3d 	bl	8001054 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d116      	bne.n	800441a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2220      	movs	r2, #32
 80043f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004406:	f043 0220 	orr.w	r2, r3, #32
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e020      	b.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b01      	cmp	r3, #1
 8004422:	d10c      	bne.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	43da      	mvns	r2, r3
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4013      	ands	r3, r2
 8004430:	b29b      	uxth	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	bf14      	ite	ne
 8004436:	2301      	movne	r3, #1
 8004438:	2300      	moveq	r3, #0
 800443a:	b2db      	uxtb	r3, r3
 800443c:	e00b      	b.n	8004456 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	43da      	mvns	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	b29b      	uxth	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf14      	ite	ne
 8004450:	2301      	movne	r3, #1
 8004452:	2300      	moveq	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d18d      	bne.n	8004376 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3710      	adds	r7, #16
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}

08004464 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004470:	e02d      	b.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f8ce 	bl	8004614 <I2C_IsAcknowledgeFailed>
 8004478:	4603      	mov	r3, r0
 800447a:	2b00      	cmp	r3, #0
 800447c:	d001      	beq.n	8004482 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e02d      	b.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004488:	d021      	beq.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800448a:	f7fc fde3 	bl	8001054 <HAL_GetTick>
 800448e:	4602      	mov	r2, r0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	1ad3      	subs	r3, r2, r3
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	429a      	cmp	r2, r3
 8004498:	d302      	bcc.n	80044a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d116      	bne.n	80044ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	2200      	movs	r2, #0
 80044a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2220      	movs	r2, #32
 80044aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	f043 0220 	orr.w	r2, r3, #32
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e007      	b.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	695b      	ldr	r3, [r3, #20]
 80044d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d8:	2b80      	cmp	r3, #128	; 0x80
 80044da:	d1ca      	bne.n	8004472 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	60f8      	str	r0, [r7, #12]
 80044ee:	60b9      	str	r1, [r7, #8]
 80044f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044f2:	e02d      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 f88d 	bl	8004614 <I2C_IsAcknowledgeFailed>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e02d      	b.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800450a:	d021      	beq.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800450c:	f7fc fda2 	bl	8001054 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	429a      	cmp	r2, r3
 800451a:	d302      	bcc.n	8004522 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453c:	f043 0220 	orr.w	r2, r3, #32
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	e007      	b.n	8004560 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b04      	cmp	r3, #4
 800455c:	d1ca      	bne.n	80044f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3710      	adds	r7, #16
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004574:	e042      	b.n	80045fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695b      	ldr	r3, [r3, #20]
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b10      	cmp	r3, #16
 8004582:	d119      	bne.n	80045b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0210 	mvn.w	r2, #16
 800458c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2200      	movs	r2, #0
 8004592:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e029      	b.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b8:	f7fc fd4c 	bl	8001054 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	68ba      	ldr	r2, [r7, #8]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d116      	bne.n	80045fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f043 0220 	orr.w	r2, r3, #32
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2200      	movs	r2, #0
 80045f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e007      	b.n	800460c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	d1b5      	bne.n	8004576 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800460a:	2300      	movs	r3, #0
}
 800460c:	4618      	mov	r0, r3
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004614:	b480      	push	{r7}
 8004616:	b083      	sub	sp, #12
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	695b      	ldr	r3, [r3, #20]
 8004622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800462a:	d11b      	bne.n	8004664 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004634:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2220      	movs	r2, #32
 8004640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004650:	f043 0204 	orr.w	r2, r3, #4
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr

08004672 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004672:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004674:	b08f      	sub	sp, #60	; 0x3c
 8004676:	af0a      	add	r7, sp, #40	; 0x28
 8004678:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e10f      	b.n	80048a4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f008 fd3c 	bl	800d11c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2203      	movs	r2, #3
 80046a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d102      	bne.n	80046be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4618      	mov	r0, r3
 80046c4:	f004 f83d 	bl	8008742 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	603b      	str	r3, [r7, #0]
 80046ce:	687e      	ldr	r6, [r7, #4]
 80046d0:	466d      	mov	r5, sp
 80046d2:	f106 0410 	add.w	r4, r6, #16
 80046d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80046e6:	1d33      	adds	r3, r6, #4
 80046e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ea:	6838      	ldr	r0, [r7, #0]
 80046ec:	f003 ffc8 	bl	8008680 <USB_CoreInit>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e0d0      	b.n	80048a4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2100      	movs	r1, #0
 8004708:	4618      	mov	r0, r3
 800470a:	f004 f82b 	bl	8008764 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
 8004712:	e04a      	b.n	80047aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	1a9b      	subs	r3, r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	333d      	adds	r3, #61	; 0x3d
 8004724:	2201      	movs	r2, #1
 8004726:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	333c      	adds	r3, #60	; 0x3c
 8004738:	7bfa      	ldrb	r2, [r7, #15]
 800473a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	b298      	uxth	r0, r3
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3342      	adds	r3, #66	; 0x42
 8004750:	4602      	mov	r2, r0
 8004752:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	333f      	adds	r3, #63	; 0x3f
 8004764:	2200      	movs	r2, #0
 8004766:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004768:	7bfa      	ldrb	r2, [r7, #15]
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	4613      	mov	r3, r2
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	440b      	add	r3, r1
 8004776:	3344      	adds	r3, #68	; 0x44
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800477c:	7bfa      	ldrb	r2, [r7, #15]
 800477e:	6879      	ldr	r1, [r7, #4]
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	440b      	add	r3, r1
 800478a:	3348      	adds	r3, #72	; 0x48
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004790:	7bfa      	ldrb	r2, [r7, #15]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	3350      	adds	r3, #80	; 0x50
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a4:	7bfb      	ldrb	r3, [r7, #15]
 80047a6:	3301      	adds	r3, #1
 80047a8:	73fb      	strb	r3, [r7, #15]
 80047aa:	7bfa      	ldrb	r2, [r7, #15]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3af      	bcc.n	8004714 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047b4:	2300      	movs	r3, #0
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e044      	b.n	8004844 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047ba:	7bfa      	ldrb	r2, [r7, #15]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	00db      	lsls	r3, r3, #3
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80047cc:	2200      	movs	r2, #0
 80047ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047d0:	7bfa      	ldrb	r2, [r7, #15]
 80047d2:	6879      	ldr	r1, [r7, #4]
 80047d4:	4613      	mov	r3, r2
 80047d6:	00db      	lsls	r3, r3, #3
 80047d8:	1a9b      	subs	r3, r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047e2:	7bfa      	ldrb	r2, [r7, #15]
 80047e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	6879      	ldr	r1, [r7, #4]
 80047ea:	4613      	mov	r3, r2
 80047ec:	00db      	lsls	r3, r3, #3
 80047ee:	1a9b      	subs	r3, r3, r2
 80047f0:	009b      	lsls	r3, r3, #2
 80047f2:	440b      	add	r3, r1
 80047f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047f8:	2200      	movs	r2, #0
 80047fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047fc:	7bfa      	ldrb	r2, [r7, #15]
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4613      	mov	r3, r2
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	1a9b      	subs	r3, r3, r2
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	440b      	add	r3, r1
 800480a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800480e:	2200      	movs	r2, #0
 8004810:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004812:	7bfa      	ldrb	r2, [r7, #15]
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	4613      	mov	r3, r2
 8004818:	00db      	lsls	r3, r3, #3
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	009b      	lsls	r3, r3, #2
 800481e:	440b      	add	r3, r1
 8004820:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004828:	7bfa      	ldrb	r2, [r7, #15]
 800482a:	6879      	ldr	r1, [r7, #4]
 800482c:	4613      	mov	r3, r2
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	1a9b      	subs	r3, r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	440b      	add	r3, r1
 8004836:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800483a:	2200      	movs	r2, #0
 800483c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	3301      	adds	r3, #1
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	7bfa      	ldrb	r2, [r7, #15]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d3b5      	bcc.n	80047ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	603b      	str	r3, [r7, #0]
 8004854:	687e      	ldr	r6, [r7, #4]
 8004856:	466d      	mov	r5, sp
 8004858:	f106 0410 	add.w	r4, r6, #16
 800485c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800485e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004864:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004868:	e885 0003 	stmia.w	r5, {r0, r1}
 800486c:	1d33      	adds	r3, r6, #4
 800486e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f003 ffa1 	bl	80087b8 <USB_DevInit>
 8004876:	4603      	mov	r3, r0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2202      	movs	r2, #2
 8004880:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e00d      	b.n	80048a4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4618      	mov	r0, r3
 800489e:	f004 f95e 	bl	8008b5e <USB_DevDisconnect>

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ba:	2301      	movs	r3, #1
 80048bc:	e25b      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d075      	beq.n	80049b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ca:	4ba3      	ldr	r3, [pc, #652]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	f003 030c 	and.w	r3, r3, #12
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d00c      	beq.n	80048f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048d6:	4ba0      	ldr	r3, [pc, #640]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048de:	2b08      	cmp	r3, #8
 80048e0:	d112      	bne.n	8004908 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e2:	4b9d      	ldr	r3, [pc, #628]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048ee:	d10b      	bne.n	8004908 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f0:	4b99      	ldr	r3, [pc, #612]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d05b      	beq.n	80049b4 <HAL_RCC_OscConfig+0x108>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d157      	bne.n	80049b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	e236      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004910:	d106      	bne.n	8004920 <HAL_RCC_OscConfig+0x74>
 8004912:	4b91      	ldr	r3, [pc, #580]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a90      	ldr	r2, [pc, #576]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e01d      	b.n	800495c <HAL_RCC_OscConfig+0xb0>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004928:	d10c      	bne.n	8004944 <HAL_RCC_OscConfig+0x98>
 800492a:	4b8b      	ldr	r3, [pc, #556]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4a8a      	ldr	r2, [pc, #552]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004934:	6013      	str	r3, [r2, #0]
 8004936:	4b88      	ldr	r3, [pc, #544]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a87      	ldr	r2, [pc, #540]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 800493c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004940:	6013      	str	r3, [r2, #0]
 8004942:	e00b      	b.n	800495c <HAL_RCC_OscConfig+0xb0>
 8004944:	4b84      	ldr	r3, [pc, #528]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a83      	ldr	r2, [pc, #524]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 800494a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	4b81      	ldr	r3, [pc, #516]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a80      	ldr	r2, [pc, #512]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d013      	beq.n	800498c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fc fb76 	bl	8001054 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800496c:	f7fc fb72 	bl	8001054 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b64      	cmp	r3, #100	; 0x64
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e1fb      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	4b76      	ldr	r3, [pc, #472]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0f0      	beq.n	800496c <HAL_RCC_OscConfig+0xc0>
 800498a:	e014      	b.n	80049b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fc fb62 	bl	8001054 <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004994:	f7fc fb5e 	bl	8001054 <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b64      	cmp	r3, #100	; 0x64
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e1e7      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	4b6c      	ldr	r3, [pc, #432]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0xe8>
 80049b2:	e000      	b.n	80049b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0302 	and.w	r3, r3, #2
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d063      	beq.n	8004a8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c2:	4b65      	ldr	r3, [pc, #404]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ce:	4b62      	ldr	r3, [pc, #392]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049d6:	2b08      	cmp	r3, #8
 80049d8:	d11c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049da:	4b5f      	ldr	r3, [pc, #380]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d116      	bne.n	8004a14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049e6:	4b5c      	ldr	r3, [pc, #368]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d005      	beq.n	80049fe <HAL_RCC_OscConfig+0x152>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d001      	beq.n	80049fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e1bb      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049fe:	4b56      	ldr	r3, [pc, #344]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	4952      	ldr	r1, [pc, #328]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a12:	e03a      	b.n	8004a8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d020      	beq.n	8004a5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a1c:	4b4f      	ldr	r3, [pc, #316]	; (8004b5c <HAL_RCC_OscConfig+0x2b0>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a22:	f7fc fb17 	bl	8001054 <HAL_GetTick>
 8004a26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a28:	e008      	b.n	8004a3c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2a:	f7fc fb13 	bl	8001054 <HAL_GetTick>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	1ad3      	subs	r3, r2, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d901      	bls.n	8004a3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	e19c      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	4b46      	ldr	r3, [pc, #280]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0f0      	beq.n	8004a2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a48:	4b43      	ldr	r3, [pc, #268]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	4940      	ldr	r1, [pc, #256]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	600b      	str	r3, [r1, #0]
 8004a5c:	e015      	b.n	8004a8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5e:	4b3f      	ldr	r3, [pc, #252]	; (8004b5c <HAL_RCC_OscConfig+0x2b0>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a64:	f7fc faf6 	bl	8001054 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a6c:	f7fc faf2 	bl	8001054 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e17b      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0308 	and.w	r3, r3, #8
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d030      	beq.n	8004af8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d016      	beq.n	8004acc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a9e:	4b30      	ldr	r3, [pc, #192]	; (8004b60 <HAL_RCC_OscConfig+0x2b4>)
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa4:	f7fc fad6 	bl	8001054 <HAL_GetTick>
 8004aa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aaa:	e008      	b.n	8004abe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aac:	f7fc fad2 	bl	8001054 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e15b      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	4b26      	ldr	r3, [pc, #152]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004ac0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d0f0      	beq.n	8004aac <HAL_RCC_OscConfig+0x200>
 8004aca:	e015      	b.n	8004af8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004acc:	4b24      	ldr	r3, [pc, #144]	; (8004b60 <HAL_RCC_OscConfig+0x2b4>)
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad2:	f7fc fabf 	bl	8001054 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ada:	f7fc fabb 	bl	8001054 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e144      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	4b1a      	ldr	r3, [pc, #104]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1f0      	bne.n	8004ada <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a0 	beq.w	8004c46 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b06:	2300      	movs	r3, #0
 8004b08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b0a:	4b13      	ldr	r3, [pc, #76]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10f      	bne.n	8004b36 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	4b0f      	ldr	r3, [pc, #60]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a0e      	ldr	r2, [pc, #56]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
 8004b26:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	60bb      	str	r3, [r7, #8]
 8004b30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b32:	2301      	movs	r3, #1
 8004b34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_OscConfig+0x2b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d121      	bne.n	8004b86 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <HAL_RCC_OscConfig+0x2b8>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a07      	ldr	r2, [pc, #28]	; (8004b64 <HAL_RCC_OscConfig+0x2b8>)
 8004b48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4e:	f7fc fa81 	bl	8001054 <HAL_GetTick>
 8004b52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b54:	e011      	b.n	8004b7a <HAL_RCC_OscConfig+0x2ce>
 8004b56:	bf00      	nop
 8004b58:	40023800 	.word	0x40023800
 8004b5c:	42470000 	.word	0x42470000
 8004b60:	42470e80 	.word	0x42470e80
 8004b64:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b68:	f7fc fa74 	bl	8001054 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0fd      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7a:	4b81      	ldr	r3, [pc, #516]	; (8004d80 <HAL_RCC_OscConfig+0x4d4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d106      	bne.n	8004b9c <HAL_RCC_OscConfig+0x2f0>
 8004b8e:	4b7d      	ldr	r3, [pc, #500]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	4a7c      	ldr	r2, [pc, #496]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004b94:	f043 0301 	orr.w	r3, r3, #1
 8004b98:	6713      	str	r3, [r2, #112]	; 0x70
 8004b9a:	e01c      	b.n	8004bd6 <HAL_RCC_OscConfig+0x32a>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b05      	cmp	r3, #5
 8004ba2:	d10c      	bne.n	8004bbe <HAL_RCC_OscConfig+0x312>
 8004ba4:	4b77      	ldr	r3, [pc, #476]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	4a76      	ldr	r2, [pc, #472]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004baa:	f043 0304 	orr.w	r3, r3, #4
 8004bae:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb0:	4b74      	ldr	r3, [pc, #464]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb4:	4a73      	ldr	r2, [pc, #460]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6713      	str	r3, [r2, #112]	; 0x70
 8004bbc:	e00b      	b.n	8004bd6 <HAL_RCC_OscConfig+0x32a>
 8004bbe:	4b71      	ldr	r3, [pc, #452]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc2:	4a70      	ldr	r2, [pc, #448]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bc4:	f023 0301 	bic.w	r3, r3, #1
 8004bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bca:	4b6e      	ldr	r3, [pc, #440]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bce:	4a6d      	ldr	r2, [pc, #436]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bd0:	f023 0304 	bic.w	r3, r3, #4
 8004bd4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d015      	beq.n	8004c0a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bde:	f7fc fa39 	bl	8001054 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	e00a      	b.n	8004bfc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be6:	f7fc fa35 	bl	8001054 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e0bc      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfc:	4b61      	ldr	r3, [pc, #388]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c00:	f003 0302 	and.w	r3, r3, #2
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0ee      	beq.n	8004be6 <HAL_RCC_OscConfig+0x33a>
 8004c08:	e014      	b.n	8004c34 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c0a:	f7fc fa23 	bl	8001054 <HAL_GetTick>
 8004c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c10:	e00a      	b.n	8004c28 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c12:	f7fc fa1f 	bl	8001054 <HAL_GetTick>
 8004c16:	4602      	mov	r2, r0
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d901      	bls.n	8004c28 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c24:	2303      	movs	r3, #3
 8004c26:	e0a6      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c28:	4b56      	ldr	r3, [pc, #344]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ee      	bne.n	8004c12 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c34:	7dfb      	ldrb	r3, [r7, #23]
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	d105      	bne.n	8004c46 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c3a:	4b52      	ldr	r3, [pc, #328]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	4a51      	ldr	r2, [pc, #324]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c44:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	699b      	ldr	r3, [r3, #24]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	f000 8092 	beq.w	8004d74 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c50:	4b4c      	ldr	r3, [pc, #304]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 030c 	and.w	r3, r3, #12
 8004c58:	2b08      	cmp	r3, #8
 8004c5a:	d05c      	beq.n	8004d16 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d141      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c64:	4b48      	ldr	r3, [pc, #288]	; (8004d88 <HAL_RCC_OscConfig+0x4dc>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c6a:	f7fc f9f3 	bl	8001054 <HAL_GetTick>
 8004c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c70:	e008      	b.n	8004c84 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c72:	f7fc f9ef 	bl	8001054 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e078      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c84:	4b3f      	ldr	r3, [pc, #252]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d1f0      	bne.n	8004c72 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	69da      	ldr	r2, [r3, #28]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9e:	019b      	lsls	r3, r3, #6
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca6:	085b      	lsrs	r3, r3, #1
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	041b      	lsls	r3, r3, #16
 8004cac:	431a      	orrs	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb2:	061b      	lsls	r3, r3, #24
 8004cb4:	4933      	ldr	r1, [pc, #204]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cba:	4b33      	ldr	r3, [pc, #204]	; (8004d88 <HAL_RCC_OscConfig+0x4dc>)
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc0:	f7fc f9c8 	bl	8001054 <HAL_GetTick>
 8004cc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc6:	e008      	b.n	8004cda <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc8:	f7fc f9c4 	bl	8001054 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e04d      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cda:	4b2a      	ldr	r3, [pc, #168]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0f0      	beq.n	8004cc8 <HAL_RCC_OscConfig+0x41c>
 8004ce6:	e045      	b.n	8004d74 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <HAL_RCC_OscConfig+0x4dc>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cee:	f7fc f9b1 	bl	8001054 <HAL_GetTick>
 8004cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf4:	e008      	b.n	8004d08 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf6:	f7fc f9ad 	bl	8001054 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e036      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d08:	4b1e      	ldr	r3, [pc, #120]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x44a>
 8004d14:	e02e      	b.n	8004d74 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e029      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d22:	4b18      	ldr	r3, [pc, #96]	; (8004d84 <HAL_RCC_OscConfig+0x4d8>)
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d11c      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d115      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d10d      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d106      	bne.n	8004d70 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d001      	beq.n	8004d74 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	e000      	b.n	8004d76 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3718      	adds	r7, #24
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
 8004d7e:	bf00      	nop
 8004d80:	40007000 	.word	0x40007000
 8004d84:	40023800 	.word	0x40023800
 8004d88:	42470060 	.word	0x42470060

08004d8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e0cc      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004da0:	4b68      	ldr	r3, [pc, #416]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d90c      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b65      	ldr	r3, [pc, #404]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b63      	ldr	r3, [pc, #396]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0b8      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d020      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004de0:	4b59      	ldr	r3, [pc, #356]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a58      	ldr	r2, [pc, #352]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0308 	and.w	r3, r3, #8
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d005      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004df8:	4b53      	ldr	r3, [pc, #332]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	4a52      	ldr	r2, [pc, #328]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e04:	4b50      	ldr	r3, [pc, #320]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	494d      	ldr	r1, [pc, #308]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d044      	beq.n	8004eac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e2a:	4b47      	ldr	r3, [pc, #284]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d119      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e07f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d003      	beq.n	8004e4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d107      	bne.n	8004e5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4a:	4b3f      	ldr	r3, [pc, #252]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d109      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e06f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e5a:	4b3b      	ldr	r3, [pc, #236]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d101      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e067      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e6a:	4b37      	ldr	r3, [pc, #220]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f023 0203 	bic.w	r2, r3, #3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	685b      	ldr	r3, [r3, #4]
 8004e76:	4934      	ldr	r1, [pc, #208]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e7c:	f7fc f8ea 	bl	8001054 <HAL_GetTick>
 8004e80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e84:	f7fc f8e6 	bl	8001054 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e04f      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e9a:	4b2b      	ldr	r3, [pc, #172]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	f003 020c 	and.w	r2, r3, #12
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d1eb      	bne.n	8004e84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004eac:	4b25      	ldr	r3, [pc, #148]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d20c      	bcs.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ebc:	683a      	ldr	r2, [r7, #0]
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec2:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	683a      	ldr	r2, [r7, #0]
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d001      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e032      	b.n	8004f3a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 0304 	and.w	r3, r3, #4
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ee0:	4b19      	ldr	r3, [pc, #100]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	4916      	ldr	r1, [pc, #88]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0308 	and.w	r3, r3, #8
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d009      	beq.n	8004f12 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004efe:	4b12      	ldr	r3, [pc, #72]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	490e      	ldr	r1, [pc, #56]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f12:	f000 f82d 	bl	8004f70 <HAL_RCC_GetSysClockFreq>
 8004f16:	4601      	mov	r1, r0
 8004f18:	4b0b      	ldr	r3, [pc, #44]	; (8004f48 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	091b      	lsrs	r3, r3, #4
 8004f1e:	f003 030f 	and.w	r3, r3, #15
 8004f22:	4a0a      	ldr	r2, [pc, #40]	; (8004f4c <HAL_RCC_ClockConfig+0x1c0>)
 8004f24:	5cd3      	ldrb	r3, [r2, r3]
 8004f26:	fa21 f303 	lsr.w	r3, r1, r3
 8004f2a:	4a09      	ldr	r2, [pc, #36]	; (8004f50 <HAL_RCC_ClockConfig+0x1c4>)
 8004f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f2e:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fc f84a 	bl	8000fcc <HAL_InitTick>

  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3710      	adds	r7, #16
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023c00 	.word	0x40023c00
 8004f48:	40023800 	.word	0x40023800
 8004f4c:	080133f8 	.word	0x080133f8
 8004f50:	20000040 	.word	0x20000040
 8004f54:	20000000 	.word	0x20000000

08004f58 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004f5c:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_EnableCSS+0x14>)
 8004f5e:	2201      	movs	r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
}
 8004f62:	bf00      	nop
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	4247004c 	.word	0x4247004c

08004f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	607b      	str	r3, [r7, #4]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	2300      	movs	r3, #0
 8004f80:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f82:	2300      	movs	r3, #0
 8004f84:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f86:	4b63      	ldr	r3, [pc, #396]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 030c 	and.w	r3, r3, #12
 8004f8e:	2b04      	cmp	r3, #4
 8004f90:	d007      	beq.n	8004fa2 <HAL_RCC_GetSysClockFreq+0x32>
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d008      	beq.n	8004fa8 <HAL_RCC_GetSysClockFreq+0x38>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	f040 80b4 	bne.w	8005104 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f9c:	4b5e      	ldr	r3, [pc, #376]	; (8005118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f9e:	60bb      	str	r3, [r7, #8]
       break;
 8004fa0:	e0b3      	b.n	800510a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa2:	4b5e      	ldr	r3, [pc, #376]	; (800511c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004fa4:	60bb      	str	r3, [r7, #8]
      break;
 8004fa6:	e0b0      	b.n	800510a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fa8:	4b5a      	ldr	r3, [pc, #360]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb2:	4b58      	ldr	r3, [pc, #352]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d04a      	beq.n	8005054 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fbe:	4b55      	ldr	r3, [pc, #340]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	099b      	lsrs	r3, r3, #6
 8004fc4:	f04f 0400 	mov.w	r4, #0
 8004fc8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fcc:	f04f 0200 	mov.w	r2, #0
 8004fd0:	ea03 0501 	and.w	r5, r3, r1
 8004fd4:	ea04 0602 	and.w	r6, r4, r2
 8004fd8:	4629      	mov	r1, r5
 8004fda:	4632      	mov	r2, r6
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	f04f 0400 	mov.w	r4, #0
 8004fe4:	0154      	lsls	r4, r2, #5
 8004fe6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fea:	014b      	lsls	r3, r1, #5
 8004fec:	4619      	mov	r1, r3
 8004fee:	4622      	mov	r2, r4
 8004ff0:	1b49      	subs	r1, r1, r5
 8004ff2:	eb62 0206 	sbc.w	r2, r2, r6
 8004ff6:	f04f 0300 	mov.w	r3, #0
 8004ffa:	f04f 0400 	mov.w	r4, #0
 8004ffe:	0194      	lsls	r4, r2, #6
 8005000:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005004:	018b      	lsls	r3, r1, #6
 8005006:	1a5b      	subs	r3, r3, r1
 8005008:	eb64 0402 	sbc.w	r4, r4, r2
 800500c:	f04f 0100 	mov.w	r1, #0
 8005010:	f04f 0200 	mov.w	r2, #0
 8005014:	00e2      	lsls	r2, r4, #3
 8005016:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800501a:	00d9      	lsls	r1, r3, #3
 800501c:	460b      	mov	r3, r1
 800501e:	4614      	mov	r4, r2
 8005020:	195b      	adds	r3, r3, r5
 8005022:	eb44 0406 	adc.w	r4, r4, r6
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	0262      	lsls	r2, r4, #9
 8005030:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005034:	0259      	lsls	r1, r3, #9
 8005036:	460b      	mov	r3, r1
 8005038:	4614      	mov	r4, r2
 800503a:	4618      	mov	r0, r3
 800503c:	4621      	mov	r1, r4
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f04f 0400 	mov.w	r4, #0
 8005044:	461a      	mov	r2, r3
 8005046:	4623      	mov	r3, r4
 8005048:	f7fb fe1e 	bl	8000c88 <__aeabi_uldivmod>
 800504c:	4603      	mov	r3, r0
 800504e:	460c      	mov	r4, r1
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	e049      	b.n	80050e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005054:	4b2f      	ldr	r3, [pc, #188]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	099b      	lsrs	r3, r3, #6
 800505a:	f04f 0400 	mov.w	r4, #0
 800505e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	ea03 0501 	and.w	r5, r3, r1
 800506a:	ea04 0602 	and.w	r6, r4, r2
 800506e:	4629      	mov	r1, r5
 8005070:	4632      	mov	r2, r6
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	f04f 0400 	mov.w	r4, #0
 800507a:	0154      	lsls	r4, r2, #5
 800507c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005080:	014b      	lsls	r3, r1, #5
 8005082:	4619      	mov	r1, r3
 8005084:	4622      	mov	r2, r4
 8005086:	1b49      	subs	r1, r1, r5
 8005088:	eb62 0206 	sbc.w	r2, r2, r6
 800508c:	f04f 0300 	mov.w	r3, #0
 8005090:	f04f 0400 	mov.w	r4, #0
 8005094:	0194      	lsls	r4, r2, #6
 8005096:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800509a:	018b      	lsls	r3, r1, #6
 800509c:	1a5b      	subs	r3, r3, r1
 800509e:	eb64 0402 	sbc.w	r4, r4, r2
 80050a2:	f04f 0100 	mov.w	r1, #0
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	00e2      	lsls	r2, r4, #3
 80050ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050b0:	00d9      	lsls	r1, r3, #3
 80050b2:	460b      	mov	r3, r1
 80050b4:	4614      	mov	r4, r2
 80050b6:	195b      	adds	r3, r3, r5
 80050b8:	eb44 0406 	adc.w	r4, r4, r6
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	02a2      	lsls	r2, r4, #10
 80050c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050ca:	0299      	lsls	r1, r3, #10
 80050cc:	460b      	mov	r3, r1
 80050ce:	4614      	mov	r4, r2
 80050d0:	4618      	mov	r0, r3
 80050d2:	4621      	mov	r1, r4
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f04f 0400 	mov.w	r4, #0
 80050da:	461a      	mov	r2, r3
 80050dc:	4623      	mov	r3, r4
 80050de:	f7fb fdd3 	bl	8000c88 <__aeabi_uldivmod>
 80050e2:	4603      	mov	r3, r0
 80050e4:	460c      	mov	r4, r1
 80050e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050e8:	4b0a      	ldr	r3, [pc, #40]	; (8005114 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	0c1b      	lsrs	r3, r3, #16
 80050ee:	f003 0303 	and.w	r3, r3, #3
 80050f2:	3301      	adds	r3, #1
 80050f4:	005b      	lsls	r3, r3, #1
 80050f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005100:	60bb      	str	r3, [r7, #8]
      break;
 8005102:	e002      	b.n	800510a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005104:	4b04      	ldr	r3, [pc, #16]	; (8005118 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005106:	60bb      	str	r3, [r7, #8]
      break;
 8005108:	bf00      	nop
    }
  }
  return sysclockfreq;
 800510a:	68bb      	ldr	r3, [r7, #8]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005114:	40023800 	.word	0x40023800
 8005118:	00f42400 	.word	0x00f42400
 800511c:	007a1200 	.word	0x007a1200

08005120 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005124:	4b03      	ldr	r3, [pc, #12]	; (8005134 <HAL_RCC_GetHCLKFreq+0x14>)
 8005126:	681b      	ldr	r3, [r3, #0]
}
 8005128:	4618      	mov	r0, r3
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20000040 	.word	0x20000040

08005138 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800513c:	f7ff fff0 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8005140:	4601      	mov	r1, r0
 8005142:	4b05      	ldr	r3, [pc, #20]	; (8005158 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	0a9b      	lsrs	r3, r3, #10
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	4a03      	ldr	r2, [pc, #12]	; (800515c <HAL_RCC_GetPCLK1Freq+0x24>)
 800514e:	5cd3      	ldrb	r3, [r2, r3]
 8005150:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005154:	4618      	mov	r0, r3
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40023800 	.word	0x40023800
 800515c:	08013408 	.word	0x08013408

08005160 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005164:	f7ff ffdc 	bl	8005120 <HAL_RCC_GetHCLKFreq>
 8005168:	4601      	mov	r1, r0
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <HAL_RCC_GetPCLK2Freq+0x20>)
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	0b5b      	lsrs	r3, r3, #13
 8005170:	f003 0307 	and.w	r3, r3, #7
 8005174:	4a03      	ldr	r2, [pc, #12]	; (8005184 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005176:	5cd3      	ldrb	r3, [r2, r3]
 8005178:	fa21 f303 	lsr.w	r3, r1, r3
}
 800517c:	4618      	mov	r0, r3
 800517e:	bd80      	pop	{r7, pc}
 8005180:	40023800 	.word	0x40023800
 8005184:	08013408 	.word	0x08013408

08005188 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005190:	2300      	movs	r3, #0
 8005192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d105      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d035      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80051b0:	4b62      	ldr	r3, [pc, #392]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051b6:	f7fb ff4d 	bl	8001054 <HAL_GetTick>
 80051ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051be:	f7fb ff49 	bl	8001054 <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e0b0      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051d0:	4b5b      	ldr	r3, [pc, #364]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	019a      	lsls	r2, r3, #6
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	071b      	lsls	r3, r3, #28
 80051e8:	4955      	ldr	r1, [pc, #340]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051f0:	4b52      	ldr	r3, [pc, #328]	; (800533c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051f6:	f7fb ff2d 	bl	8001054 <HAL_GetTick>
 80051fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051fc:	e008      	b.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051fe:	f7fb ff29 	bl	8001054 <HAL_GetTick>
 8005202:	4602      	mov	r2, r0
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	1ad3      	subs	r3, r2, r3
 8005208:	2b02      	cmp	r3, #2
 800520a:	d901      	bls.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800520c:	2303      	movs	r3, #3
 800520e:	e090      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005210:	4b4b      	ldr	r3, [pc, #300]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0f0      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	f000 8083 	beq.w	8005330 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800522a:	2300      	movs	r3, #0
 800522c:	60fb      	str	r3, [r7, #12]
 800522e:	4b44      	ldr	r3, [pc, #272]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	4a43      	ldr	r2, [pc, #268]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005238:	6413      	str	r3, [r2, #64]	; 0x40
 800523a:	4b41      	ldr	r3, [pc, #260]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800523c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005242:	60fb      	str	r3, [r7, #12]
 8005244:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005246:	4b3f      	ldr	r3, [pc, #252]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a3e      	ldr	r2, [pc, #248]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005250:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005252:	f7fb feff 	bl	8001054 <HAL_GetTick>
 8005256:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005258:	e008      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800525a:	f7fb fefb 	bl	8001054 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e062      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800526c:	4b35      	ldr	r3, [pc, #212]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005278:	4b31      	ldr	r3, [pc, #196]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800527a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005280:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d02f      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	429a      	cmp	r2, r3
 8005294:	d028      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005296:	4b2a      	ldr	r3, [pc, #168]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800529e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052a0:	4b29      	ldr	r3, [pc, #164]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052a6:	4b28      	ldr	r3, [pc, #160]	; (8005348 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80052ac:	4a24      	ldr	r2, [pc, #144]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052b2:	4b23      	ldr	r3, [pc, #140]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d114      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052be:	f7fb fec9 	bl	8001054 <HAL_GetTick>
 80052c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	e00a      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052c6:	f7fb fec5 	bl	8001054 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d901      	bls.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	e02a      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052dc:	4b18      	ldr	r3, [pc, #96]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e0:	f003 0302 	and.w	r3, r3, #2
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d0ee      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052f4:	d10d      	bne.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052f6:	4b12      	ldr	r3, [pc, #72]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530a:	490d      	ldr	r1, [pc, #52]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530c:	4313      	orrs	r3, r2
 800530e:	608b      	str	r3, [r1, #8]
 8005310:	e005      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005312:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005318:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800531c:	6093      	str	r3, [r2, #8]
 800531e:	4b08      	ldr	r3, [pc, #32]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005320:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800532a:	4905      	ldr	r1, [pc, #20]	; (8005340 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800532c:	4313      	orrs	r3, r2
 800532e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005330:	2300      	movs	r3, #0
}
 8005332:	4618      	mov	r0, r3
 8005334:	3718      	adds	r7, #24
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	42470068 	.word	0x42470068
 8005340:	40023800 	.word	0x40023800
 8005344:	40007000 	.word	0x40007000
 8005348:	42470e40 	.word	0x42470e40

0800534c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b082      	sub	sp, #8
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800535a:	2301      	movs	r3, #1
 800535c:	e083      	b.n	8005466 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	7f5b      	ldrb	r3, [r3, #29]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	2b00      	cmp	r3, #0
 8005366:	d105      	bne.n	8005374 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2200      	movs	r2, #0
 800536c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f007 fbf4 	bl	800cb5c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2202      	movs	r2, #2
 8005378:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	22ca      	movs	r2, #202	; 0xca
 8005380:	625a      	str	r2, [r3, #36]	; 0x24
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2253      	movs	r2, #83	; 0x53
 8005388:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f897 	bl	80054be <RTC_EnterInitMode>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d008      	beq.n	80053a8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	22ff      	movs	r2, #255	; 0xff
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2204      	movs	r2, #4
 80053a2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e05e      	b.n	8005466 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6812      	ldr	r2, [r2, #0]
 80053b2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80053b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053ba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6899      	ldr	r1, [r3, #8]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685a      	ldr	r2, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	691b      	ldr	r3, [r3, #16]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	695b      	ldr	r3, [r3, #20]
 80053d0:	431a      	orrs	r2, r3
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	68d2      	ldr	r2, [r2, #12]
 80053e2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	6919      	ldr	r1, [r3, #16]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	041a      	lsls	r2, r3, #16
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005406:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 0320 	and.w	r3, r3, #32
 8005412:	2b00      	cmp	r3, #0
 8005414:	d10e      	bne.n	8005434 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 f829 	bl	800546e <HAL_RTC_WaitForSynchro>
 800541c:	4603      	mov	r3, r0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d008      	beq.n	8005434 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	22ff      	movs	r2, #255	; 0xff
 8005428:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2204      	movs	r2, #4
 800542e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e018      	b.n	8005466 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005442:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	699a      	ldr	r2, [r3, #24]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	22ff      	movs	r2, #255	; 0xff
 800545c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005464:	2300      	movs	r3, #0
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}

0800546e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800546e:	b580      	push	{r7, lr}
 8005470:	b084      	sub	sp, #16
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68da      	ldr	r2, [r3, #12]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005488:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800548a:	f7fb fde3 	bl	8001054 <HAL_GetTick>
 800548e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005490:	e009      	b.n	80054a6 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005492:	f7fb fddf 	bl	8001054 <HAL_GetTick>
 8005496:	4602      	mov	r2, r0
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	1ad3      	subs	r3, r2, r3
 800549c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054a0:	d901      	bls.n	80054a6 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e007      	b.n	80054b6 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f003 0320 	and.w	r3, r3, #32
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d0ee      	beq.n	8005492 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3710      	adds	r7, #16
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054c6:	2300      	movs	r3, #0
 80054c8:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d119      	bne.n	800550c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054e2:	f7fb fdb7 	bl	8001054 <HAL_GetTick>
 80054e6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054e8:	e009      	b.n	80054fe <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054ea:	f7fb fdb3 	bl	8001054 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054f8:	d901      	bls.n	80054fe <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e007      	b.n	800550e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005508:	2b00      	cmp	r3, #0
 800550a:	d0ee      	beq.n	80054ea <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3710      	adds	r7, #16
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b082      	sub	sp, #8
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e056      	b.n	80055d6 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2200      	movs	r2, #0
 800552c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d106      	bne.n	8005548 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f007 fb20 	bl	800cb88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2202      	movs	r2, #2
 800554c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681a      	ldr	r2, [r3, #0]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800555e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	431a      	orrs	r2, r3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	431a      	orrs	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	431a      	orrs	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	699b      	ldr	r3, [r3, #24]
 8005580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	431a      	orrs	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a1b      	ldr	r3, [r3, #32]
 8005590:	ea42 0103 	orr.w	r1, r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	430a      	orrs	r2, r1
 800559e:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	699b      	ldr	r3, [r3, #24]
 80055a4:	0c1b      	lsrs	r3, r3, #16
 80055a6:	f003 0104 	and.w	r1, r3, #4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	69da      	ldr	r2, [r3, #28]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b088      	sub	sp, #32
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	60f8      	str	r0, [r7, #12]
 80055e6:	60b9      	str	r1, [r7, #8]
 80055e8:	603b      	str	r3, [r7, #0]
 80055ea:	4613      	mov	r3, r2
 80055ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055ee:	2300      	movs	r3, #0
 80055f0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d101      	bne.n	8005600 <HAL_SPI_Transmit+0x22>
 80055fc:	2302      	movs	r3, #2
 80055fe:	e11e      	b.n	800583e <HAL_SPI_Transmit+0x260>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005608:	f7fb fd24 	bl	8001054 <HAL_GetTick>
 800560c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d002      	beq.n	8005624 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800561e:	2302      	movs	r3, #2
 8005620:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005622:	e103      	b.n	800582c <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d002      	beq.n	8005630 <HAL_SPI_Transmit+0x52>
 800562a:	88fb      	ldrh	r3, [r7, #6]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d102      	bne.n	8005636 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005634:	e0fa      	b.n	800582c <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2203      	movs	r2, #3
 800563a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	88fa      	ldrh	r2, [r7, #6]
 800564e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	88fa      	ldrh	r2, [r7, #6]
 8005654:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567c:	d107      	bne.n	800568e <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b40      	cmp	r3, #64	; 0x40
 800569a:	d007      	beq.n	80056ac <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056b4:	d14b      	bne.n	800574e <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_SPI_Transmit+0xe6>
 80056be:	8afb      	ldrh	r3, [r7, #22]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d13e      	bne.n	8005742 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c8:	881a      	ldrh	r2, [r3, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d4:	1c9a      	adds	r2, r3, #2
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056de:	b29b      	uxth	r3, r3
 80056e0:	3b01      	subs	r3, #1
 80056e2:	b29a      	uxth	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056e8:	e02b      	b.n	8005742 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d112      	bne.n	800571e <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	881a      	ldrh	r2, [r3, #0]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	1c9a      	adds	r2, r3, #2
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	86da      	strh	r2, [r3, #54]	; 0x36
 800571c:	e011      	b.n	8005742 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800571e:	f7fb fc99 	bl	8001054 <HAL_GetTick>
 8005722:	4602      	mov	r2, r0
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	429a      	cmp	r2, r3
 800572c:	d803      	bhi.n	8005736 <HAL_SPI_Transmit+0x158>
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005734:	d102      	bne.n	800573c <HAL_SPI_Transmit+0x15e>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d102      	bne.n	8005742 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005740:	e074      	b.n	800582c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005746:	b29b      	uxth	r3, r3
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1ce      	bne.n	80056ea <HAL_SPI_Transmit+0x10c>
 800574c:	e04c      	b.n	80057e8 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d002      	beq.n	800575c <HAL_SPI_Transmit+0x17e>
 8005756:	8afb      	ldrh	r3, [r7, #22]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d140      	bne.n	80057de <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	330c      	adds	r3, #12
 8005766:	7812      	ldrb	r2, [r2, #0]
 8005768:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005782:	e02c      	b.n	80057de <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f003 0302 	and.w	r3, r3, #2
 800578e:	2b02      	cmp	r3, #2
 8005790:	d113      	bne.n	80057ba <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	330c      	adds	r3, #12
 800579c:	7812      	ldrb	r2, [r2, #0]
 800579e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057a4:	1c5a      	adds	r2, r3, #1
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ae:	b29b      	uxth	r3, r3
 80057b0:	3b01      	subs	r3, #1
 80057b2:	b29a      	uxth	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80057b8:	e011      	b.n	80057de <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057ba:	f7fb fc4b 	bl	8001054 <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	683a      	ldr	r2, [r7, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d803      	bhi.n	80057d2 <HAL_SPI_Transmit+0x1f4>
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d0:	d102      	bne.n	80057d8 <HAL_SPI_Transmit+0x1fa>
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d102      	bne.n	80057de <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057dc:	e026      	b.n	800582c <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d1cd      	bne.n	8005784 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057e8:	69ba      	ldr	r2, [r7, #24]
 80057ea:	6839      	ldr	r1, [r7, #0]
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f000 fcc3 	bl	8006178 <SPI_EndRxTxTransaction>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2220      	movs	r2, #32
 80057fc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10a      	bne.n	800581c <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	77fb      	strb	r3, [r7, #31]
 8005828:	e000      	b.n	800582c <HAL_SPI_Transmit+0x24e>
  }

error:
 800582a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800583c:	7ffb      	ldrb	r3, [r7, #31]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b088      	sub	sp, #32
 800584a:	af02      	add	r7, sp, #8
 800584c:	60f8      	str	r0, [r7, #12]
 800584e:	60b9      	str	r1, [r7, #8]
 8005850:	603b      	str	r3, [r7, #0]
 8005852:	4613      	mov	r3, r2
 8005854:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005856:	2300      	movs	r3, #0
 8005858:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005862:	d112      	bne.n	800588a <HAL_SPI_Receive+0x44>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10e      	bne.n	800588a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2204      	movs	r2, #4
 8005870:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005874:	88fa      	ldrh	r2, [r7, #6]
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	4613      	mov	r3, r2
 800587c:	68ba      	ldr	r2, [r7, #8]
 800587e:	68b9      	ldr	r1, [r7, #8]
 8005880:	68f8      	ldr	r0, [r7, #12]
 8005882:	f000 f8e9 	bl	8005a58 <HAL_SPI_TransmitReceive>
 8005886:	4603      	mov	r3, r0
 8005888:	e0e2      	b.n	8005a50 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005890:	2b01      	cmp	r3, #1
 8005892:	d101      	bne.n	8005898 <HAL_SPI_Receive+0x52>
 8005894:	2302      	movs	r3, #2
 8005896:	e0db      	b.n	8005a50 <HAL_SPI_Receive+0x20a>
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2201      	movs	r2, #1
 800589c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058a0:	f7fb fbd8 	bl	8001054 <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d002      	beq.n	80058b8 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80058b2:	2302      	movs	r3, #2
 80058b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058b6:	e0c2      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d002      	beq.n	80058c4 <HAL_SPI_Receive+0x7e>
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d102      	bne.n	80058ca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058c8:	e0b9      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2204      	movs	r2, #4
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	88fa      	ldrh	r2, [r7, #6]
 80058e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	88fa      	ldrh	r2, [r7, #6]
 80058e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2200      	movs	r2, #0
 80058f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2200      	movs	r2, #0
 80058fa:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2200      	movs	r2, #0
 8005900:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005910:	d107      	bne.n	8005922 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005920:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d007      	beq.n	8005940 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d162      	bne.n	8005a0e <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005948:	e02e      	b.n	80059a8 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	f003 0301 	and.w	r3, r3, #1
 8005954:	2b01      	cmp	r3, #1
 8005956:	d115      	bne.n	8005984 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f103 020c 	add.w	r2, r3, #12
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005964:	7812      	ldrb	r2, [r2, #0]
 8005966:	b2d2      	uxtb	r2, r2
 8005968:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800596e:	1c5a      	adds	r2, r3, #1
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005978:	b29b      	uxth	r3, r3
 800597a:	3b01      	subs	r3, #1
 800597c:	b29a      	uxth	r2, r3
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005982:	e011      	b.n	80059a8 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005984:	f7fb fb66 	bl	8001054 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	683a      	ldr	r2, [r7, #0]
 8005990:	429a      	cmp	r2, r3
 8005992:	d803      	bhi.n	800599c <HAL_SPI_Receive+0x156>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800599a:	d102      	bne.n	80059a2 <HAL_SPI_Receive+0x15c>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d102      	bne.n	80059a8 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059a6:	e04a      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1cb      	bne.n	800594a <HAL_SPI_Receive+0x104>
 80059b2:	e031      	b.n	8005a18 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689b      	ldr	r3, [r3, #8]
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d113      	bne.n	80059ea <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	b292      	uxth	r2, r2
 80059ce:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d4:	1c9a      	adds	r2, r3, #2
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059e8:	e011      	b.n	8005a0e <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059ea:	f7fb fb33 	bl	8001054 <HAL_GetTick>
 80059ee:	4602      	mov	r2, r0
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d803      	bhi.n	8005a02 <HAL_SPI_Receive+0x1bc>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a00:	d102      	bne.n	8005a08 <HAL_SPI_Receive+0x1c2>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d102      	bne.n	8005a0e <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005a0c:	e017      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a12:	b29b      	uxth	r3, r3
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1cd      	bne.n	80059b4 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a18:	693a      	ldr	r2, [r7, #16]
 8005a1a:	6839      	ldr	r1, [r7, #0]
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 fb45 	bl	80060ac <SPI_EndRxTransaction>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2220      	movs	r2, #32
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	75fb      	strb	r3, [r7, #23]
 8005a3a:	e000      	b.n	8005a3e <HAL_SPI_Receive+0x1f8>
  }

error :
 8005a3c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	2201      	movs	r2, #1
 8005a42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3718      	adds	r7, #24
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08c      	sub	sp, #48	; 0x30
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a66:	2301      	movs	r3, #1
 8005a68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_SPI_TransmitReceive+0x26>
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	e18a      	b.n	8005d94 <HAL_SPI_TransmitReceive+0x33c>
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a86:	f7fb fae5 	bl	8001054 <HAL_GetTick>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a9c:	887b      	ldrh	r3, [r7, #2]
 8005a9e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d00f      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x70>
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aae:	d107      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d103      	bne.n	8005ac0 <HAL_SPI_TransmitReceive+0x68>
 8005ab8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005abc:	2b04      	cmp	r3, #4
 8005abe:	d003      	beq.n	8005ac8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005ac0:	2302      	movs	r3, #2
 8005ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ac6:	e15b      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d005      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x82>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <HAL_SPI_TransmitReceive+0x82>
 8005ad4:	887b      	ldrh	r3, [r7, #2]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d103      	bne.n	8005ae2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ae0:	e14e      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b04      	cmp	r3, #4
 8005aec:	d003      	beq.n	8005af6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2205      	movs	r2, #5
 8005af2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	887a      	ldrh	r2, [r7, #2]
 8005b0c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	68ba      	ldr	r2, [r7, #8]
 8005b12:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	887a      	ldrh	r2, [r7, #2]
 8005b18:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	887a      	ldrh	r2, [r7, #2]
 8005b1e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2200      	movs	r2, #0
 8005b24:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b36:	2b40      	cmp	r3, #64	; 0x40
 8005b38:	d007      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b52:	d178      	bne.n	8005c46 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_SPI_TransmitReceive+0x10a>
 8005b5c:	8b7b      	ldrh	r3, [r7, #26]
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d166      	bne.n	8005c30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b66:	881a      	ldrh	r2, [r3, #0]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b72:	1c9a      	adds	r2, r3, #2
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b7c:	b29b      	uxth	r3, r3
 8005b7e:	3b01      	subs	r3, #1
 8005b80:	b29a      	uxth	r2, r3
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b86:	e053      	b.n	8005c30 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 0302 	and.w	r3, r3, #2
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d11b      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x176>
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d016      	beq.n	8005bce <HAL_SPI_TransmitReceive+0x176>
 8005ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d113      	bne.n	8005bce <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	881a      	ldrh	r2, [r3, #0]
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb6:	1c9a      	adds	r2, r3, #2
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29a      	uxth	r2, r3
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0301 	and.w	r3, r3, #1
 8005bd8:	2b01      	cmp	r3, #1
 8005bda:	d119      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x1b8>
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d014      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf0:	b292      	uxth	r2, r2
 8005bf2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf8:	1c9a      	adds	r2, r3, #2
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005c10:	f7fb fa20 	bl	8001054 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d807      	bhi.n	8005c30 <HAL_SPI_TransmitReceive+0x1d8>
 8005c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c26:	d003      	beq.n	8005c30 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c2e:	e0a7      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1a6      	bne.n	8005b88 <HAL_SPI_TransmitReceive+0x130>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1a1      	bne.n	8005b88 <HAL_SPI_TransmitReceive+0x130>
 8005c44:	e07c      	b.n	8005d40 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_SPI_TransmitReceive+0x1fc>
 8005c4e:	8b7b      	ldrh	r3, [r7, #26]
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d16b      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	7812      	ldrb	r2, [r2, #0]
 8005c60:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c66:	1c5a      	adds	r2, r3, #1
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c7a:	e057      	b.n	8005d2c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	f003 0302 	and.w	r3, r3, #2
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d11c      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x26c>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d017      	beq.n	8005cc4 <HAL_SPI_TransmitReceive+0x26c>
 8005c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d114      	bne.n	8005cc4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d119      	bne.n	8005d06 <HAL_SPI_TransmitReceive+0x2ae>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d014      	beq.n	8005d06 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68da      	ldr	r2, [r3, #12]
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ce6:	b2d2      	uxtb	r2, r2
 8005ce8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cee:	1c5a      	adds	r2, r3, #1
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005d02:	2301      	movs	r3, #1
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005d06:	f7fb f9a5 	bl	8001054 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d803      	bhi.n	8005d1e <HAL_SPI_TransmitReceive+0x2c6>
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d1c:	d102      	bne.n	8005d24 <HAL_SPI_TransmitReceive+0x2cc>
 8005d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d103      	bne.n	8005d2c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d24:	2303      	movs	r3, #3
 8005d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d2a:	e029      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d30:	b29b      	uxth	r3, r3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d1a2      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x224>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d19d      	bne.n	8005c7c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d44:	68f8      	ldr	r0, [r7, #12]
 8005d46:	f000 fa17 	bl	8006178 <SPI_EndRxTxTransaction>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d006      	beq.n	8005d5e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d5c:	e010      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10b      	bne.n	8005d7e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	617b      	str	r3, [r7, #20]
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	e000      	b.n	8005d80 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d7e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3730      	adds	r7, #48	; 0x30
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b088      	sub	sp, #32
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005db4:	69bb      	ldr	r3, [r7, #24]
 8005db6:	099b      	lsrs	r3, r3, #6
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d10f      	bne.n	8005de0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	099b      	lsrs	r3, r3, #6
 8005dce:	f003 0301 	and.w	r3, r3, #1
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d004      	beq.n	8005de0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	4798      	blx	r3
    return;
 8005dde:	e0d8      	b.n	8005f92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	085b      	lsrs	r3, r3, #1
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00a      	beq.n	8005e02 <HAL_SPI_IRQHandler+0x66>
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	09db      	lsrs	r3, r3, #7
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d004      	beq.n	8005e02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	4798      	blx	r3
    return;
 8005e00:	e0c7      	b.n	8005f92 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	095b      	lsrs	r3, r3, #5
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10c      	bne.n	8005e28 <HAL_SPI_IRQHandler+0x8c>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	099b      	lsrs	r3, r3, #6
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d106      	bne.n	8005e28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	0a1b      	lsrs	r3, r3, #8
 8005e1e:	f003 0301 	and.w	r3, r3, #1
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	f000 80b5 	beq.w	8005f92 <HAL_SPI_IRQHandler+0x1f6>
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	095b      	lsrs	r3, r3, #5
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	f000 80ae 	beq.w	8005f92 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e36:	69bb      	ldr	r3, [r7, #24]
 8005e38:	099b      	lsrs	r3, r3, #6
 8005e3a:	f003 0301 	and.w	r3, r3, #1
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d023      	beq.n	8005e8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b03      	cmp	r3, #3
 8005e4c:	d011      	beq.n	8005e72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	f043 0204 	orr.w	r2, r3, #4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	617b      	str	r3, [r7, #20]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	617b      	str	r3, [r7, #20]
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	e00b      	b.n	8005e8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e72:	2300      	movs	r3, #0
 8005e74:	613b      	str	r3, [r7, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	613b      	str	r3, [r7, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	693b      	ldr	r3, [r7, #16]
        return;
 8005e88:	e083      	b.n	8005f92 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	095b      	lsrs	r3, r3, #5
 8005e8e:	f003 0301 	and.w	r3, r3, #1
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d014      	beq.n	8005ec0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e9a:	f043 0201 	orr.w	r2, r3, #1
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	60fb      	str	r3, [r7, #12]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	689b      	ldr	r3, [r3, #8]
 8005eac:	60fb      	str	r3, [r7, #12]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ec0:	69bb      	ldr	r3, [r7, #24]
 8005ec2:	0a1b      	lsrs	r3, r3, #8
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00c      	beq.n	8005ee6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed0:	f043 0208 	orr.w	r2, r3, #8
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ed8:	2300      	movs	r3, #0
 8005eda:	60bb      	str	r3, [r7, #8]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	60bb      	str	r3, [r7, #8]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d050      	beq.n	8005f90 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	685a      	ldr	r2, [r3, #4]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005efc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	f003 0302 	and.w	r3, r3, #2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d104      	bne.n	8005f1a <HAL_SPI_IRQHandler+0x17e>
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f003 0301 	and.w	r3, r3, #1
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d034      	beq.n	8005f84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f022 0203 	bic.w	r2, r2, #3
 8005f28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d011      	beq.n	8005f56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f36:	4a18      	ldr	r2, [pc, #96]	; (8005f98 <HAL_SPI_IRQHandler+0x1fc>)
 8005f38:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fc ff4c 	bl	8002ddc <HAL_DMA_Abort_IT>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d005      	beq.n	8005f56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d016      	beq.n	8005f8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f62:	4a0d      	ldr	r2, [pc, #52]	; (8005f98 <HAL_SPI_IRQHandler+0x1fc>)
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fc ff36 	bl	8002ddc <HAL_DMA_Abort_IT>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00a      	beq.n	8005f8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f7a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f82:	e003      	b.n	8005f8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f84:	6878      	ldr	r0, [r7, #4]
 8005f86:	f000 f809 	bl	8005f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f8a:	e000      	b.n	8005f8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f8c:	bf00      	nop
    return;
 8005f8e:	bf00      	nop
 8005f90:	bf00      	nop
  }
}
 8005f92:	3720      	adds	r7, #32
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	08005fb1 	.word	0x08005fb1

08005f9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr

08005fb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	f7ff ffe6 	bl	8005f9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fe8:	e04c      	b.n	8006084 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ff0:	d048      	beq.n	8006084 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005ff2:	f7fb f82f 	bl	8001054 <HAL_GetTick>
 8005ff6:	4602      	mov	r2, r0
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	1ad3      	subs	r3, r2, r3
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d902      	bls.n	8006008 <SPI_WaitFlagStateUntilTimeout+0x30>
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d13d      	bne.n	8006084 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685a      	ldr	r2, [r3, #4]
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006016:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006020:	d111      	bne.n	8006046 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800602a:	d004      	beq.n	8006036 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006034:	d107      	bne.n	8006046 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681a      	ldr	r2, [r3, #0]
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006044:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800604e:	d10f      	bne.n	8006070 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800606e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	2200      	movs	r2, #0
 800607c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e00f      	b.n	80060a4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	4013      	ands	r3, r2
 800608e:	68ba      	ldr	r2, [r7, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	bf0c      	ite	eq
 8006094:	2301      	moveq	r3, #1
 8006096:	2300      	movne	r3, #0
 8006098:	b2db      	uxtb	r3, r3
 800609a:	461a      	mov	r2, r3
 800609c:	79fb      	ldrb	r3, [r7, #7]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d1a3      	bne.n	8005fea <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80060a2:	2300      	movs	r3, #0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c0:	d111      	bne.n	80060e6 <SPI_EndRxTransaction+0x3a>
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	689b      	ldr	r3, [r3, #8]
 80060c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ca:	d004      	beq.n	80060d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d4:	d107      	bne.n	80060e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060ee:	d12a      	bne.n	8006146 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f8:	d012      	beq.n	8006120 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	9300      	str	r3, [sp, #0]
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2200      	movs	r2, #0
 8006102:	2180      	movs	r1, #128	; 0x80
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f7ff ff67 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d02d      	beq.n	800616c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006114:	f043 0220 	orr.w	r2, r3, #32
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e026      	b.n	800616e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	9300      	str	r3, [sp, #0]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	2200      	movs	r2, #0
 8006128:	2101      	movs	r1, #1
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff ff54 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d01a      	beq.n	800616c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	f043 0220 	orr.w	r2, r3, #32
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e013      	b.n	800616e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	9300      	str	r3, [sp, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	2200      	movs	r2, #0
 800614e:	2101      	movs	r1, #1
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f7ff ff41 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e000      	b.n	800616e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800616c:	2300      	movs	r3, #0
}
 800616e:	4618      	mov	r0, r3
 8006170:	3710      	adds	r7, #16
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
	...

08006178 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b088      	sub	sp, #32
 800617c:	af02      	add	r7, sp, #8
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006184:	4b1b      	ldr	r3, [pc, #108]	; (80061f4 <SPI_EndRxTxTransaction+0x7c>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1b      	ldr	r2, [pc, #108]	; (80061f8 <SPI_EndRxTxTransaction+0x80>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	0d5b      	lsrs	r3, r3, #21
 8006190:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006194:	fb02 f303 	mul.w	r3, r2, r3
 8006198:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061a2:	d112      	bne.n	80061ca <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	9300      	str	r3, [sp, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2200      	movs	r2, #0
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	68f8      	ldr	r0, [r7, #12]
 80061b0:	f7ff ff12 	bl	8005fd8 <SPI_WaitFlagStateUntilTimeout>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d016      	beq.n	80061e8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061be:	f043 0220 	orr.w	r2, r3, #32
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061c6:	2303      	movs	r3, #3
 80061c8:	e00f      	b.n	80061ea <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00a      	beq.n	80061e6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	3b01      	subs	r3, #1
 80061d4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
 80061dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e0:	2b80      	cmp	r3, #128	; 0x80
 80061e2:	d0f2      	beq.n	80061ca <SPI_EndRxTxTransaction+0x52>
 80061e4:	e000      	b.n	80061e8 <SPI_EndRxTxTransaction+0x70>
        break;
 80061e6:	bf00      	nop
  }

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3718      	adds	r7, #24
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000040 	.word	0x20000040
 80061f8:	165e9f81 	.word	0x165e9f81

080061fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d101      	bne.n	800620e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800620a:	2301      	movs	r3, #1
 800620c:	e01d      	b.n	800624a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b00      	cmp	r3, #0
 8006218:	d106      	bne.n	8006228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	f006 fd00 	bl	800cc28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f000 fe56 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2202      	movs	r2, #2
 800625e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f003 0307 	and.w	r3, r3, #7
 800626c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b06      	cmp	r3, #6
 8006272:	d007      	beq.n	8006284 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3714      	adds	r7, #20
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr

0800629a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68da      	ldr	r2, [r3, #12]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f042 0201 	orr.w	r2, r2, #1
 80062b0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	f003 0307 	and.w	r3, r3, #7
 80062bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b06      	cmp	r3, #6
 80062c2:	d007      	beq.n	80062d4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	681a      	ldr	r2, [r3, #0]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f042 0201 	orr.w	r2, r2, #1
 80062d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b082      	sub	sp, #8
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d101      	bne.n	80062f4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e01d      	b.n	8006330 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d106      	bne.n	800630e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2200      	movs	r2, #0
 8006304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f815 	bl	8006338 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2202      	movs	r2, #2
 8006312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f000 fde3 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2201      	movs	r2, #1
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3708      	adds	r7, #8
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	6839      	ldr	r1, [r7, #0]
 800635e:	4618      	mov	r0, r3
 8006360:	f001 f9d8 	bl	8007714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a15      	ldr	r2, [pc, #84]	; (80063c0 <HAL_TIM_OC_Start+0x74>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <HAL_TIM_OC_Start+0x2c>
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4a14      	ldr	r2, [pc, #80]	; (80063c4 <HAL_TIM_OC_Start+0x78>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d101      	bne.n	800637c <HAL_TIM_OC_Start+0x30>
 8006378:	2301      	movs	r3, #1
 800637a:	e000      	b.n	800637e <HAL_TIM_OC_Start+0x32>
 800637c:	2300      	movs	r3, #0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006390:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f003 0307 	and.w	r3, r3, #7
 800639c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	d007      	beq.n	80063b4 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0201 	orr.w	r2, r2, #1
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40010400 	.word	0x40010400

080063c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d101      	bne.n	80063da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063d6:	2301      	movs	r3, #1
 80063d8:	e01d      	b.n	8006416 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f815 	bl	800641e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3304      	adds	r3, #4
 8006404:	4619      	mov	r1, r3
 8006406:	4610      	mov	r0, r2
 8006408:	f000 fd70 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006414:	2300      	movs	r3, #0
}
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800641e:	b480      	push	{r7}
 8006420:	b083      	sub	sp, #12
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006426:	bf00      	nop
 8006428:	370c      	adds	r7, #12
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
	...

08006434 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
 800643c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	2201      	movs	r2, #1
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f001 f964 	bl	8007714 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	4a15      	ldr	r2, [pc, #84]	; (80064a8 <HAL_TIM_PWM_Start+0x74>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d004      	beq.n	8006460 <HAL_TIM_PWM_Start+0x2c>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a14      	ldr	r2, [pc, #80]	; (80064ac <HAL_TIM_PWM_Start+0x78>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d101      	bne.n	8006464 <HAL_TIM_PWM_Start+0x30>
 8006460:	2301      	movs	r3, #1
 8006462:	e000      	b.n	8006466 <HAL_TIM_PWM_Start+0x32>
 8006464:	2300      	movs	r3, #0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006478:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	f003 0307 	and.w	r3, r3, #7
 8006484:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2b06      	cmp	r3, #6
 800648a:	d007      	beq.n	800649c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f042 0201 	orr.w	r2, r2, #1
 800649a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800649c:	2300      	movs	r3, #0
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40010400 	.word	0x40010400

080064b0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b082      	sub	sp, #8
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d101      	bne.n	80064c2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	e01d      	b.n	80064fe <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d106      	bne.n	80064dc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f815 	bl	8006506 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	3304      	adds	r3, #4
 80064ec:	4619      	mov	r1, r3
 80064ee:	4610      	mov	r0, r2
 80064f0:	f000 fcfc 	bl	8006eec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}

08006506 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006506:	b480      	push	{r7}
 8006508:	b083      	sub	sp, #12
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800650e:	bf00      	nop
 8006510:	370c      	adds	r7, #12
 8006512:	46bd      	mov	sp, r7
 8006514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006518:	4770      	bx	lr
	...

0800651c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b084      	sub	sp, #16
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b0c      	cmp	r3, #12
 800652a:	d841      	bhi.n	80065b0 <HAL_TIM_IC_Start_IT+0x94>
 800652c:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <HAL_TIM_IC_Start_IT+0x18>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006569 	.word	0x08006569
 8006538:	080065b1 	.word	0x080065b1
 800653c:	080065b1 	.word	0x080065b1
 8006540:	080065b1 	.word	0x080065b1
 8006544:	0800657b 	.word	0x0800657b
 8006548:	080065b1 	.word	0x080065b1
 800654c:	080065b1 	.word	0x080065b1
 8006550:	080065b1 	.word	0x080065b1
 8006554:	0800658d 	.word	0x0800658d
 8006558:	080065b1 	.word	0x080065b1
 800655c:	080065b1 	.word	0x080065b1
 8006560:	080065b1 	.word	0x080065b1
 8006564:	0800659f 	.word	0x0800659f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68da      	ldr	r2, [r3, #12]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f042 0202 	orr.w	r2, r2, #2
 8006576:	60da      	str	r2, [r3, #12]
      break;
 8006578:	e01b      	b.n	80065b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68da      	ldr	r2, [r3, #12]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f042 0204 	orr.w	r2, r2, #4
 8006588:	60da      	str	r2, [r3, #12]
      break;
 800658a:	e012      	b.n	80065b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	68da      	ldr	r2, [r3, #12]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f042 0208 	orr.w	r2, r2, #8
 800659a:	60da      	str	r2, [r3, #12]
      break;
 800659c:	e009      	b.n	80065b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68da      	ldr	r2, [r3, #12]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0210 	orr.w	r2, r2, #16
 80065ac:	60da      	str	r2, [r3, #12]
      break;
 80065ae:	e000      	b.n	80065b2 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80065b0:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	2201      	movs	r2, #1
 80065b8:	6839      	ldr	r1, [r7, #0]
 80065ba:	4618      	mov	r0, r3
 80065bc:	f001 f8aa 	bl	8007714 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2b06      	cmp	r3, #6
 80065d0:	d007      	beq.n	80065e2 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f042 0201 	orr.w	r2, r2, #1
 80065e0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065e2:	2300      	movs	r3, #0
}
 80065e4:	4618      	mov	r0, r3
 80065e6:	3710      	adds	r7, #16
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d101      	bne.n	8006600 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80065fc:	2301      	movs	r3, #1
 80065fe:	e083      	b.n	8006708 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006606:	b2db      	uxtb	r3, r3
 8006608:	2b00      	cmp	r3, #0
 800660a:	d106      	bne.n	800661a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f006 fc37 	bl	800ce88 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2202      	movs	r2, #2
 800661e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006630:	f023 0307 	bic.w	r3, r3, #7
 8006634:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681a      	ldr	r2, [r3, #0]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	3304      	adds	r3, #4
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f000 fc53 	bl	8006eec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	4313      	orrs	r3, r2
 8006666:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666e:	f023 0303 	bic.w	r3, r3, #3
 8006672:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	689a      	ldr	r2, [r3, #8]
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	021b      	lsls	r3, r3, #8
 800667e:	4313      	orrs	r3, r2
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800668c:	f023 030c 	bic.w	r3, r3, #12
 8006690:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006698:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800669c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68da      	ldr	r2, [r3, #12]
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	021b      	lsls	r3, r3, #8
 80066a8:	4313      	orrs	r3, r2
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	691b      	ldr	r3, [r3, #16]
 80066b4:	011a      	lsls	r2, r3, #4
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	031b      	lsls	r3, r3, #12
 80066bc:	4313      	orrs	r3, r2
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80066ca:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	695b      	ldr	r3, [r3, #20]
 80066dc:	011b      	lsls	r3, r3, #4
 80066de:	4313      	orrs	r3, r2
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68fa      	ldr	r2, [r7, #12]
 80066fc:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b082      	sub	sp, #8
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d002      	beq.n	8006726 <HAL_TIM_Encoder_Start_IT+0x16>
 8006720:	2b04      	cmp	r3, #4
 8006722:	d010      	beq.n	8006746 <HAL_TIM_Encoder_Start_IT+0x36>
 8006724:	e01f      	b.n	8006766 <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	2201      	movs	r2, #1
 800672c:	2100      	movs	r1, #0
 800672e:	4618      	mov	r0, r3
 8006730:	f000 fff0 	bl	8007714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68da      	ldr	r2, [r3, #12]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f042 0202 	orr.w	r2, r2, #2
 8006742:	60da      	str	r2, [r3, #12]
      break;
 8006744:	e02e      	b.n	80067a4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	2201      	movs	r2, #1
 800674c:	2104      	movs	r1, #4
 800674e:	4618      	mov	r0, r3
 8006750:	f000 ffe0 	bl	8007714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	68da      	ldr	r2, [r3, #12]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f042 0204 	orr.w	r2, r2, #4
 8006762:	60da      	str	r2, [r3, #12]
      break;
 8006764:	e01e      	b.n	80067a4 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2201      	movs	r2, #1
 800676c:	2100      	movs	r1, #0
 800676e:	4618      	mov	r0, r3
 8006770:	f000 ffd0 	bl	8007714 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2201      	movs	r2, #1
 800677a:	2104      	movs	r1, #4
 800677c:	4618      	mov	r0, r3
 800677e:	f000 ffc9 	bl	8007714 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68da      	ldr	r2, [r3, #12]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f042 0202 	orr.w	r2, r2, #2
 8006790:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f042 0204 	orr.w	r2, r2, #4
 80067a0:	60da      	str	r2, [r3, #12]
      break;
 80067a2:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067b4:	2300      	movs	r3, #0
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3708      	adds	r7, #8
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b082      	sub	sp, #8
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	f003 0302 	and.w	r3, r3, #2
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d122      	bne.n	800681a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d11b      	bne.n	800681a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f06f 0202 	mvn.w	r2, #2
 80067ea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f005 f9af 	bl	800bb64 <HAL_TIM_IC_CaptureCallback>
 8006806:	e005      	b.n	8006814 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f005 fa1d 	bl	800bc48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fb57 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f003 0304 	and.w	r3, r3, #4
 8006824:	2b04      	cmp	r3, #4
 8006826:	d122      	bne.n	800686e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b04      	cmp	r3, #4
 8006834:	d11b      	bne.n	800686e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f06f 0204 	mvn.w	r2, #4
 800683e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2202      	movs	r2, #2
 8006844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	699b      	ldr	r3, [r3, #24]
 800684c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f005 f985 	bl	800bb64 <HAL_TIM_IC_CaptureCallback>
 800685a:	e005      	b.n	8006868 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f005 f9f3 	bl	800bc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fb2d 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	691b      	ldr	r3, [r3, #16]
 8006874:	f003 0308 	and.w	r3, r3, #8
 8006878:	2b08      	cmp	r3, #8
 800687a:	d122      	bne.n	80068c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b08      	cmp	r3, #8
 8006888:	d11b      	bne.n	80068c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f06f 0208 	mvn.w	r2, #8
 8006892:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2204      	movs	r2, #4
 8006898:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	f003 0303 	and.w	r3, r3, #3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f005 f95b 	bl	800bb64 <HAL_TIM_IC_CaptureCallback>
 80068ae:	e005      	b.n	80068bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f005 f9c9 	bl	800bc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fb03 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f003 0310 	and.w	r3, r3, #16
 80068cc:	2b10      	cmp	r3, #16
 80068ce:	d122      	bne.n	8006916 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	f003 0310 	and.w	r3, r3, #16
 80068da:	2b10      	cmp	r3, #16
 80068dc:	d11b      	bne.n	8006916 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f06f 0210 	mvn.w	r2, #16
 80068e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2208      	movs	r2, #8
 80068ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	69db      	ldr	r3, [r3, #28]
 80068f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d003      	beq.n	8006904 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f005 f931 	bl	800bb64 <HAL_TIM_IC_CaptureCallback>
 8006902:	e005      	b.n	8006910 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f005 f99f 	bl	800bc48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800690a:	6878      	ldr	r0, [r7, #4]
 800690c:	f000 fad9 	bl	8006ec2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2200      	movs	r2, #0
 8006914:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	2b01      	cmp	r3, #1
 8006922:	d10e      	bne.n	8006942 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b01      	cmp	r3, #1
 8006930:	d107      	bne.n	8006942 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f06f 0201 	mvn.w	r2, #1
 800693a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f004 ffe9 	bl	800b914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
 8006948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800694c:	2b80      	cmp	r3, #128	; 0x80
 800694e:	d10e      	bne.n	800696e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	2b80      	cmp	r3, #128	; 0x80
 800695c:	d107      	bne.n	800696e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fffb 	bl	8007964 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d10e      	bne.n	800699a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006986:	2b40      	cmp	r3, #64	; 0x40
 8006988:	d107      	bne.n	800699a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006992:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 fa9e 	bl	8006ed6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d10e      	bne.n	80069c6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b20      	cmp	r3, #32
 80069b4:	d107      	bne.n	80069c6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f06f 0220 	mvn.w	r2, #32
 80069be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 ffc5 	bl	8007950 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80069c6:	bf00      	nop
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d101      	bne.n	80069ea <HAL_TIM_OC_ConfigChannel+0x1a>
 80069e6:	2302      	movs	r3, #2
 80069e8:	e04e      	b.n	8006a88 <HAL_TIM_OC_ConfigChannel+0xb8>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2202      	movs	r2, #2
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b0c      	cmp	r3, #12
 80069fe:	d839      	bhi.n	8006a74 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006a00:	a201      	add	r2, pc, #4	; (adr r2, 8006a08 <HAL_TIM_OC_ConfigChannel+0x38>)
 8006a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a06:	bf00      	nop
 8006a08:	08006a3d 	.word	0x08006a3d
 8006a0c:	08006a75 	.word	0x08006a75
 8006a10:	08006a75 	.word	0x08006a75
 8006a14:	08006a75 	.word	0x08006a75
 8006a18:	08006a4b 	.word	0x08006a4b
 8006a1c:	08006a75 	.word	0x08006a75
 8006a20:	08006a75 	.word	0x08006a75
 8006a24:	08006a75 	.word	0x08006a75
 8006a28:	08006a59 	.word	0x08006a59
 8006a2c:	08006a75 	.word	0x08006a75
 8006a30:	08006a75 	.word	0x08006a75
 8006a34:	08006a75 	.word	0x08006a75
 8006a38:	08006a67 	.word	0x08006a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 faf2 	bl	800702c <TIM_OC1_SetConfig>
      break;
 8006a48:	e015      	b.n	8006a76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68b9      	ldr	r1, [r7, #8]
 8006a50:	4618      	mov	r0, r3
 8006a52:	f000 fb5b 	bl	800710c <TIM_OC2_SetConfig>
      break;
 8006a56:	e00e      	b.n	8006a76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	68b9      	ldr	r1, [r7, #8]
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fbca 	bl	80071f8 <TIM_OC3_SetConfig>
      break;
 8006a64:	e007      	b.n	8006a76 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68b9      	ldr	r1, [r7, #8]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f000 fc37 	bl	80072e0 <TIM_OC4_SetConfig>
      break;
 8006a72:	e000      	b.n	8006a76 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8006a74:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3710      	adds	r7, #16
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b084      	sub	sp, #16
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	60f8      	str	r0, [r7, #12]
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_IC_ConfigChannel+0x1a>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e08a      	b.n	8006bc0 <HAL_TIM_IC_ConfigChannel+0x130>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2202      	movs	r2, #2
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d11b      	bne.n	8006af8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	6819      	ldr	r1, [r3, #0]
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	685a      	ldr	r2, [r3, #4]
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	f000 fc5c 	bl	800738c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	699a      	ldr	r2, [r3, #24]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f022 020c 	bic.w	r2, r2, #12
 8006ae2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6999      	ldr	r1, [r3, #24]
 8006aea:	68bb      	ldr	r3, [r7, #8]
 8006aec:	689a      	ldr	r2, [r3, #8]
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	430a      	orrs	r2, r1
 8006af4:	619a      	str	r2, [r3, #24]
 8006af6:	e05a      	b.n	8006bae <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2b04      	cmp	r3, #4
 8006afc:	d11c      	bne.n	8006b38 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	6818      	ldr	r0, [r3, #0]
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	6819      	ldr	r1, [r3, #0]
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f000 fce0 	bl	80074d2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	699a      	ldr	r2, [r3, #24]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b20:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	6999      	ldr	r1, [r3, #24]
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	021a      	lsls	r2, r3, #8
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	430a      	orrs	r2, r1
 8006b34:	619a      	str	r2, [r3, #24]
 8006b36:	e03a      	b.n	8006bae <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2b08      	cmp	r3, #8
 8006b3c:	d11b      	bne.n	8006b76 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6818      	ldr	r0, [r3, #0]
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	6819      	ldr	r1, [r3, #0]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	685a      	ldr	r2, [r3, #4]
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	f000 fd2d 	bl	80075ac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 020c 	bic.w	r2, r2, #12
 8006b60:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	69d9      	ldr	r1, [r3, #28]
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	430a      	orrs	r2, r1
 8006b72:	61da      	str	r2, [r3, #28]
 8006b74:	e01b      	b.n	8006bae <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6818      	ldr	r0, [r3, #0]
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	6819      	ldr	r1, [r3, #0]
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	f000 fd4d 	bl	8007624 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006b98:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	69d9      	ldr	r1, [r3, #28]
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	021a      	lsls	r2, r3, #8
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	430a      	orrs	r2, r1
 8006bac:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2201      	movs	r2, #1
 8006bb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3710      	adds	r7, #16
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	bd80      	pop	{r7, pc}

08006bc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d101      	bne.n	8006be2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006bde:	2302      	movs	r3, #2
 8006be0:	e0b4      	b.n	8006d4c <HAL_TIM_PWM_ConfigChannel+0x184>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2202      	movs	r2, #2
 8006bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b0c      	cmp	r3, #12
 8006bf6:	f200 809f 	bhi.w	8006d38 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006bfa:	a201      	add	r2, pc, #4	; (adr r2, 8006c00 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c00:	08006c35 	.word	0x08006c35
 8006c04:	08006d39 	.word	0x08006d39
 8006c08:	08006d39 	.word	0x08006d39
 8006c0c:	08006d39 	.word	0x08006d39
 8006c10:	08006c75 	.word	0x08006c75
 8006c14:	08006d39 	.word	0x08006d39
 8006c18:	08006d39 	.word	0x08006d39
 8006c1c:	08006d39 	.word	0x08006d39
 8006c20:	08006cb7 	.word	0x08006cb7
 8006c24:	08006d39 	.word	0x08006d39
 8006c28:	08006d39 	.word	0x08006d39
 8006c2c:	08006d39 	.word	0x08006d39
 8006c30:	08006cf7 	.word	0x08006cf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 f9f6 	bl	800702c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f042 0208 	orr.w	r2, r2, #8
 8006c4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	699a      	ldr	r2, [r3, #24]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f022 0204 	bic.w	r2, r2, #4
 8006c5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	6999      	ldr	r1, [r3, #24]
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	691a      	ldr	r2, [r3, #16]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	619a      	str	r2, [r3, #24]
      break;
 8006c72:	e062      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68b9      	ldr	r1, [r7, #8]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f000 fa46 	bl	800710c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	699a      	ldr	r2, [r3, #24]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006c8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006c9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6999      	ldr	r1, [r3, #24]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	691b      	ldr	r3, [r3, #16]
 8006caa:	021a      	lsls	r2, r3, #8
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	430a      	orrs	r2, r1
 8006cb2:	619a      	str	r2, [r3, #24]
      break;
 8006cb4:	e041      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	68b9      	ldr	r1, [r7, #8]
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f000 fa9b 	bl	80071f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	69da      	ldr	r2, [r3, #28]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f042 0208 	orr.w	r2, r2, #8
 8006cd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69da      	ldr	r2, [r3, #28]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0204 	bic.w	r2, r2, #4
 8006ce0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	69d9      	ldr	r1, [r3, #28]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	691a      	ldr	r2, [r3, #16]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	430a      	orrs	r2, r1
 8006cf2:	61da      	str	r2, [r3, #28]
      break;
 8006cf4:	e021      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 faef 	bl	80072e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	69da      	ldr	r2, [r3, #28]
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	69d9      	ldr	r1, [r3, #28]
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	021a      	lsls	r2, r3, #8
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	430a      	orrs	r2, r1
 8006d34:	61da      	str	r2, [r3, #28]
      break;
 8006d36:	e000      	b.n	8006d3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006d38:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d101      	bne.n	8006d6c <HAL_TIM_ConfigClockSource+0x18>
 8006d68:	2302      	movs	r3, #2
 8006d6a:	e0a6      	b.n	8006eba <HAL_TIM_ConfigClockSource+0x166>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2202      	movs	r2, #2
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	689b      	ldr	r3, [r3, #8]
 8006d82:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006d8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d92:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b40      	cmp	r3, #64	; 0x40
 8006da2:	d067      	beq.n	8006e74 <HAL_TIM_ConfigClockSource+0x120>
 8006da4:	2b40      	cmp	r3, #64	; 0x40
 8006da6:	d80b      	bhi.n	8006dc0 <HAL_TIM_ConfigClockSource+0x6c>
 8006da8:	2b10      	cmp	r3, #16
 8006daa:	d073      	beq.n	8006e94 <HAL_TIM_ConfigClockSource+0x140>
 8006dac:	2b10      	cmp	r3, #16
 8006dae:	d802      	bhi.n	8006db6 <HAL_TIM_ConfigClockSource+0x62>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d06f      	beq.n	8006e94 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006db4:	e078      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d06c      	beq.n	8006e94 <HAL_TIM_ConfigClockSource+0x140>
 8006dba:	2b30      	cmp	r3, #48	; 0x30
 8006dbc:	d06a      	beq.n	8006e94 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006dbe:	e073      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dc0:	2b70      	cmp	r3, #112	; 0x70
 8006dc2:	d00d      	beq.n	8006de0 <HAL_TIM_ConfigClockSource+0x8c>
 8006dc4:	2b70      	cmp	r3, #112	; 0x70
 8006dc6:	d804      	bhi.n	8006dd2 <HAL_TIM_ConfigClockSource+0x7e>
 8006dc8:	2b50      	cmp	r3, #80	; 0x50
 8006dca:	d033      	beq.n	8006e34 <HAL_TIM_ConfigClockSource+0xe0>
 8006dcc:	2b60      	cmp	r3, #96	; 0x60
 8006dce:	d041      	beq.n	8006e54 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006dd0:	e06a      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd6:	d066      	beq.n	8006ea6 <HAL_TIM_ConfigClockSource+0x152>
 8006dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ddc:	d017      	beq.n	8006e0e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006dde:	e063      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6818      	ldr	r0, [r3, #0]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	6899      	ldr	r1, [r3, #8]
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	685a      	ldr	r2, [r3, #4]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f000 fc70 	bl	80076d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006e02:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	609a      	str	r2, [r3, #8]
      break;
 8006e0c:	e04c      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	683b      	ldr	r3, [r7, #0]
 8006e14:	6899      	ldr	r1, [r3, #8]
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	685a      	ldr	r2, [r3, #4]
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f000 fc59 	bl	80076d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e30:	609a      	str	r2, [r3, #8]
      break;
 8006e32:	e039      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	6859      	ldr	r1, [r3, #4]
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	461a      	mov	r2, r3
 8006e42:	f000 fb17 	bl	8007474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2150      	movs	r1, #80	; 0x50
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	f000 fc26 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8006e52:	e029      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6818      	ldr	r0, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	6859      	ldr	r1, [r3, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	461a      	mov	r2, r3
 8006e62:	f000 fb73 	bl	800754c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2160      	movs	r1, #96	; 0x60
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	f000 fc16 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8006e72:	e019      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	6859      	ldr	r1, [r3, #4]
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	461a      	mov	r2, r3
 8006e82:	f000 faf7 	bl	8007474 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2140      	movs	r1, #64	; 0x40
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f000 fc06 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8006e92:	e009      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	4610      	mov	r0, r2
 8006ea0:	f000 fbfd 	bl	800769e <TIM_ITRx_SetConfig>
      break;
 8006ea4:	e000      	b.n	8006ea8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	b083      	sub	sp, #12
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ede:	bf00      	nop
 8006ee0:	370c      	adds	r7, #12
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a40      	ldr	r2, [pc, #256]	; (8007000 <TIM_Base_SetConfig+0x114>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d013      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f0a:	d00f      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4a3d      	ldr	r2, [pc, #244]	; (8007004 <TIM_Base_SetConfig+0x118>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d00b      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a3c      	ldr	r2, [pc, #240]	; (8007008 <TIM_Base_SetConfig+0x11c>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d007      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a3b      	ldr	r2, [pc, #236]	; (800700c <TIM_Base_SetConfig+0x120>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d003      	beq.n	8006f2c <TIM_Base_SetConfig+0x40>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a3a      	ldr	r2, [pc, #232]	; (8007010 <TIM_Base_SetConfig+0x124>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d108      	bne.n	8006f3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a2f      	ldr	r2, [pc, #188]	; (8007000 <TIM_Base_SetConfig+0x114>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d02b      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d027      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	4a2c      	ldr	r2, [pc, #176]	; (8007004 <TIM_Base_SetConfig+0x118>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d023      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	4a2b      	ldr	r2, [pc, #172]	; (8007008 <TIM_Base_SetConfig+0x11c>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d01f      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	4a2a      	ldr	r2, [pc, #168]	; (800700c <TIM_Base_SetConfig+0x120>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d01b      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	4a29      	ldr	r2, [pc, #164]	; (8007010 <TIM_Base_SetConfig+0x124>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d017      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a28      	ldr	r2, [pc, #160]	; (8007014 <TIM_Base_SetConfig+0x128>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d013      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a27      	ldr	r2, [pc, #156]	; (8007018 <TIM_Base_SetConfig+0x12c>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00f      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a26      	ldr	r2, [pc, #152]	; (800701c <TIM_Base_SetConfig+0x130>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d00b      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a25      	ldr	r2, [pc, #148]	; (8007020 <TIM_Base_SetConfig+0x134>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d007      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a24      	ldr	r2, [pc, #144]	; (8007024 <TIM_Base_SetConfig+0x138>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d003      	beq.n	8006f9e <TIM_Base_SetConfig+0xb2>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	4a23      	ldr	r2, [pc, #140]	; (8007028 <TIM_Base_SetConfig+0x13c>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d108      	bne.n	8006fb0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	4313      	orrs	r3, r2
 8006fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	695b      	ldr	r3, [r3, #20]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	; (8007000 <TIM_Base_SetConfig+0x114>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d003      	beq.n	8006fe4 <TIM_Base_SetConfig+0xf8>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	4a0c      	ldr	r2, [pc, #48]	; (8007010 <TIM_Base_SetConfig+0x124>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d103      	bne.n	8006fec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	691a      	ldr	r2, [r3, #16]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	615a      	str	r2, [r3, #20]
}
 8006ff2:	bf00      	nop
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40014400 	.word	0x40014400
 800701c:	40014800 	.word	0x40014800
 8007020:	40001800 	.word	0x40001800
 8007024:	40001c00 	.word	0x40001c00
 8007028:	40002000 	.word	0x40002000

0800702c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800702c:	b480      	push	{r7}
 800702e:	b087      	sub	sp, #28
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	f023 0201 	bic.w	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6a1b      	ldr	r3, [r3, #32]
 8007046:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	699b      	ldr	r3, [r3, #24]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800705a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0303 	bic.w	r3, r3, #3
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f023 0302 	bic.w	r3, r3, #2
 8007074:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	697a      	ldr	r2, [r7, #20]
 800707c:	4313      	orrs	r3, r2
 800707e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a20      	ldr	r2, [pc, #128]	; (8007104 <TIM_OC1_SetConfig+0xd8>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d003      	beq.n	8007090 <TIM_OC1_SetConfig+0x64>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	4a1f      	ldr	r2, [pc, #124]	; (8007108 <TIM_OC1_SetConfig+0xdc>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d10c      	bne.n	80070aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 0308 	bic.w	r3, r3, #8
 8007096:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	697a      	ldr	r2, [r7, #20]
 800709e:	4313      	orrs	r3, r2
 80070a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	f023 0304 	bic.w	r3, r3, #4
 80070a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	4a15      	ldr	r2, [pc, #84]	; (8007104 <TIM_OC1_SetConfig+0xd8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d003      	beq.n	80070ba <TIM_OC1_SetConfig+0x8e>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	4a14      	ldr	r2, [pc, #80]	; (8007108 <TIM_OC1_SetConfig+0xdc>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d111      	bne.n	80070de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80070c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	693a      	ldr	r2, [r7, #16]
 80070d0:	4313      	orrs	r3, r2
 80070d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	4313      	orrs	r3, r2
 80070dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	685a      	ldr	r2, [r3, #4]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	697a      	ldr	r2, [r7, #20]
 80070f6:	621a      	str	r2, [r3, #32]
}
 80070f8:	bf00      	nop
 80070fa:	371c      	adds	r7, #28
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	40010000 	.word	0x40010000
 8007108:	40010400 	.word	0x40010400

0800710c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800710c:	b480      	push	{r7}
 800710e:	b087      	sub	sp, #28
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a1b      	ldr	r3, [r3, #32]
 800711a:	f023 0210 	bic.w	r2, r3, #16
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	699b      	ldr	r3, [r3, #24]
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f023 0320 	bic.w	r3, r3, #32
 8007156:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	011b      	lsls	r3, r3, #4
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	4313      	orrs	r3, r2
 8007162:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a22      	ldr	r2, [pc, #136]	; (80071f0 <TIM_OC2_SetConfig+0xe4>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d003      	beq.n	8007174 <TIM_OC2_SetConfig+0x68>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a21      	ldr	r2, [pc, #132]	; (80071f4 <TIM_OC2_SetConfig+0xe8>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d10d      	bne.n	8007190 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800717a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	011b      	lsls	r3, r3, #4
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	4313      	orrs	r3, r2
 8007186:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800718e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	4a17      	ldr	r2, [pc, #92]	; (80071f0 <TIM_OC2_SetConfig+0xe4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d003      	beq.n	80071a0 <TIM_OC2_SetConfig+0x94>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a16      	ldr	r2, [pc, #88]	; (80071f4 <TIM_OC2_SetConfig+0xe8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d113      	bne.n	80071c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	695b      	ldr	r3, [r3, #20]
 80071b4:	009b      	lsls	r3, r3, #2
 80071b6:	693a      	ldr	r2, [r7, #16]
 80071b8:	4313      	orrs	r3, r2
 80071ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	693a      	ldr	r2, [r7, #16]
 80071c4:	4313      	orrs	r3, r2
 80071c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	693a      	ldr	r2, [r7, #16]
 80071cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	685a      	ldr	r2, [r3, #4]
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	697a      	ldr	r2, [r7, #20]
 80071e0:	621a      	str	r2, [r3, #32]
}
 80071e2:	bf00      	nop
 80071e4:	371c      	adds	r7, #28
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40010000 	.word	0x40010000
 80071f4:	40010400 	.word	0x40010400

080071f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	021b      	lsls	r3, r3, #8
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	4a21      	ldr	r2, [pc, #132]	; (80072d8 <TIM_OC3_SetConfig+0xe0>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d003      	beq.n	800725e <TIM_OC3_SetConfig+0x66>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a20      	ldr	r2, [pc, #128]	; (80072dc <TIM_OC3_SetConfig+0xe4>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d10d      	bne.n	800727a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	021b      	lsls	r3, r3, #8
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	4313      	orrs	r3, r2
 8007270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a16      	ldr	r2, [pc, #88]	; (80072d8 <TIM_OC3_SetConfig+0xe0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d003      	beq.n	800728a <TIM_OC3_SetConfig+0x92>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a15      	ldr	r2, [pc, #84]	; (80072dc <TIM_OC3_SetConfig+0xe4>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d113      	bne.n	80072b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	011b      	lsls	r3, r3, #4
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	699b      	ldr	r3, [r3, #24]
 80072aa:	011b      	lsls	r3, r3, #4
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	693a      	ldr	r2, [r7, #16]
 80072b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	68fa      	ldr	r2, [r7, #12]
 80072bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	685a      	ldr	r2, [r3, #4]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	621a      	str	r2, [r3, #32]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr
 80072d8:	40010000 	.word	0x40010000
 80072dc:	40010400 	.word	0x40010400

080072e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b087      	sub	sp, #28
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800730e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007316:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	021b      	lsls	r3, r3, #8
 800731e:	68fa      	ldr	r2, [r7, #12]
 8007320:	4313      	orrs	r3, r2
 8007322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800732a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	031b      	lsls	r3, r3, #12
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a12      	ldr	r2, [pc, #72]	; (8007384 <TIM_OC4_SetConfig+0xa4>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d003      	beq.n	8007348 <TIM_OC4_SetConfig+0x68>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	4a11      	ldr	r2, [pc, #68]	; (8007388 <TIM_OC4_SetConfig+0xa8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d109      	bne.n	800735c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800734e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	019b      	lsls	r3, r3, #6
 8007356:	697a      	ldr	r2, [r7, #20]
 8007358:	4313      	orrs	r3, r2
 800735a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	693a      	ldr	r2, [r7, #16]
 8007374:	621a      	str	r2, [r3, #32]
}
 8007376:	bf00      	nop
 8007378:	371c      	adds	r7, #28
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	40010000 	.word	0x40010000
 8007388:	40010400 	.word	0x40010400

0800738c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800738c:	b480      	push	{r7}
 800738e:	b087      	sub	sp, #28
 8007390:	af00      	add	r7, sp, #0
 8007392:	60f8      	str	r0, [r7, #12]
 8007394:	60b9      	str	r1, [r7, #8]
 8007396:	607a      	str	r2, [r7, #4]
 8007398:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f023 0201 	bic.w	r2, r3, #1
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	699b      	ldr	r3, [r3, #24]
 80073aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6a1b      	ldr	r3, [r3, #32]
 80073b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	4a28      	ldr	r2, [pc, #160]	; (8007458 <TIM_TI1_SetConfig+0xcc>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d01b      	beq.n	80073f2 <TIM_TI1_SetConfig+0x66>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073c0:	d017      	beq.n	80073f2 <TIM_TI1_SetConfig+0x66>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4a25      	ldr	r2, [pc, #148]	; (800745c <TIM_TI1_SetConfig+0xd0>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d013      	beq.n	80073f2 <TIM_TI1_SetConfig+0x66>
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	4a24      	ldr	r2, [pc, #144]	; (8007460 <TIM_TI1_SetConfig+0xd4>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d00f      	beq.n	80073f2 <TIM_TI1_SetConfig+0x66>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4a23      	ldr	r2, [pc, #140]	; (8007464 <TIM_TI1_SetConfig+0xd8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d00b      	beq.n	80073f2 <TIM_TI1_SetConfig+0x66>
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	4a22      	ldr	r2, [pc, #136]	; (8007468 <TIM_TI1_SetConfig+0xdc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d007      	beq.n	80073f2 <TIM_TI1_SetConfig+0x66>
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	4a21      	ldr	r2, [pc, #132]	; (800746c <TIM_TI1_SetConfig+0xe0>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d003      	beq.n	80073f2 <TIM_TI1_SetConfig+0x66>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4a20      	ldr	r2, [pc, #128]	; (8007470 <TIM_TI1_SetConfig+0xe4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d101      	bne.n	80073f6 <TIM_TI1_SetConfig+0x6a>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e000      	b.n	80073f8 <TIM_TI1_SetConfig+0x6c>
 80073f6:	2300      	movs	r3, #0
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d008      	beq.n	800740e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f023 0303 	bic.w	r3, r3, #3
 8007402:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4313      	orrs	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
 800740c:	e003      	b.n	8007416 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	f043 0301 	orr.w	r3, r3, #1
 8007414:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007416:	697b      	ldr	r3, [r7, #20]
 8007418:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800741c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	011b      	lsls	r3, r3, #4
 8007422:	b2db      	uxtb	r3, r3
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	4313      	orrs	r3, r2
 8007428:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	f023 030a 	bic.w	r3, r3, #10
 8007430:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f003 030a 	and.w	r3, r3, #10
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	4313      	orrs	r3, r2
 800743c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	697a      	ldr	r2, [r7, #20]
 8007442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	693a      	ldr	r2, [r7, #16]
 8007448:	621a      	str	r2, [r3, #32]
}
 800744a:	bf00      	nop
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40010000 	.word	0x40010000
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800
 8007464:	40000c00 	.word	0x40000c00
 8007468:	40010400 	.word	0x40010400
 800746c:	40014000 	.word	0x40014000
 8007470:	40001800 	.word	0x40001800

08007474 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007474:	b480      	push	{r7}
 8007476:	b087      	sub	sp, #28
 8007478:	af00      	add	r7, sp, #0
 800747a:	60f8      	str	r0, [r7, #12]
 800747c:	60b9      	str	r1, [r7, #8]
 800747e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	6a1b      	ldr	r3, [r3, #32]
 8007484:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	f023 0201 	bic.w	r2, r3, #1
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	699b      	ldr	r3, [r3, #24]
 8007496:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800749e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	011b      	lsls	r3, r3, #4
 80074a4:	693a      	ldr	r2, [r7, #16]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074aa:	697b      	ldr	r3, [r7, #20]
 80074ac:	f023 030a 	bic.w	r3, r3, #10
 80074b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074b2:	697a      	ldr	r2, [r7, #20]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	4313      	orrs	r3, r2
 80074b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	693a      	ldr	r2, [r7, #16]
 80074be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	697a      	ldr	r2, [r7, #20]
 80074c4:	621a      	str	r2, [r3, #32]
}
 80074c6:	bf00      	nop
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr

080074d2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80074d2:	b480      	push	{r7}
 80074d4:	b087      	sub	sp, #28
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	60f8      	str	r0, [r7, #12]
 80074da:	60b9      	str	r1, [r7, #8]
 80074dc:	607a      	str	r2, [r7, #4]
 80074de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6a1b      	ldr	r3, [r3, #32]
 80074e4:	f023 0210 	bic.w	r2, r3, #16
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	6a1b      	ldr	r3, [r3, #32]
 80074f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80074f8:	697b      	ldr	r3, [r7, #20]
 80074fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	021b      	lsls	r3, r3, #8
 8007504:	697a      	ldr	r2, [r7, #20]
 8007506:	4313      	orrs	r3, r2
 8007508:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	031b      	lsls	r3, r3, #12
 8007516:	b29b      	uxth	r3, r3
 8007518:	697a      	ldr	r2, [r7, #20]
 800751a:	4313      	orrs	r3, r2
 800751c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007524:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	011b      	lsls	r3, r3, #4
 800752a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800752e:	693a      	ldr	r2, [r7, #16]
 8007530:	4313      	orrs	r3, r2
 8007532:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	621a      	str	r2, [r3, #32]
}
 8007540:	bf00      	nop
 8007542:	371c      	adds	r7, #28
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800754c:	b480      	push	{r7}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	6a1b      	ldr	r3, [r3, #32]
 800755c:	f023 0210 	bic.w	r2, r3, #16
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	699b      	ldr	r3, [r3, #24]
 8007568:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007576:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	031b      	lsls	r3, r3, #12
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	4313      	orrs	r3, r2
 8007580:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007588:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	011b      	lsls	r3, r3, #4
 800758e:	693a      	ldr	r2, [r7, #16]
 8007590:	4313      	orrs	r3, r2
 8007592:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	621a      	str	r2, [r3, #32]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b087      	sub	sp, #28
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	60f8      	str	r0, [r7, #12]
 80075b4:	60b9      	str	r1, [r7, #8]
 80075b6:	607a      	str	r2, [r7, #4]
 80075b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	69db      	ldr	r3, [r3, #28]
 80075ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6a1b      	ldr	r3, [r3, #32]
 80075d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f023 0303 	bic.w	r3, r3, #3
 80075d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4313      	orrs	r3, r2
 80075e0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075e8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	4313      	orrs	r3, r2
 80075f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80075fc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	021b      	lsls	r3, r3, #8
 8007602:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	693a      	ldr	r2, [r7, #16]
 8007616:	621a      	str	r2, [r3, #32]
}
 8007618:	bf00      	nop
 800761a:	371c      	adds	r7, #28
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007624:	b480      	push	{r7}
 8007626:	b087      	sub	sp, #28
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
 8007630:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	69db      	ldr	r3, [r3, #28]
 8007642:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6a1b      	ldr	r3, [r3, #32]
 8007648:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007650:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	021b      	lsls	r3, r3, #8
 8007656:	697a      	ldr	r2, [r7, #20]
 8007658:	4313      	orrs	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007662:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	031b      	lsls	r3, r3, #12
 8007668:	b29b      	uxth	r3, r3
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	4313      	orrs	r3, r2
 800766e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007676:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	031b      	lsls	r3, r3, #12
 800767c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	621a      	str	r2, [r3, #32]
}
 8007692:	bf00      	nop
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800769e:	b480      	push	{r7}
 80076a0:	b085      	sub	sp, #20
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
 80076a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	689b      	ldr	r3, [r3, #8]
 80076ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076b6:	683a      	ldr	r2, [r7, #0]
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	f043 0307 	orr.w	r3, r3, #7
 80076c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	609a      	str	r2, [r3, #8]
}
 80076c8:	bf00      	nop
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b087      	sub	sp, #28
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	607a      	str	r2, [r7, #4]
 80076e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076e8:	697b      	ldr	r3, [r7, #20]
 80076ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	021a      	lsls	r2, r3, #8
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	431a      	orrs	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	4313      	orrs	r3, r2
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	609a      	str	r2, [r3, #8]
}
 8007708:	bf00      	nop
 800770a:	371c      	adds	r7, #28
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007714:	b480      	push	{r7}
 8007716:	b087      	sub	sp, #28
 8007718:	af00      	add	r7, sp, #0
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	60b9      	str	r1, [r7, #8]
 800771e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	f003 031f 	and.w	r3, r3, #31
 8007726:	2201      	movs	r2, #1
 8007728:	fa02 f303 	lsl.w	r3, r2, r3
 800772c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	6a1a      	ldr	r2, [r3, #32]
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	43db      	mvns	r3, r3
 8007736:	401a      	ands	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	6a1a      	ldr	r2, [r3, #32]
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f003 031f 	and.w	r3, r3, #31
 8007746:	6879      	ldr	r1, [r7, #4]
 8007748:	fa01 f303 	lsl.w	r3, r1, r3
 800774c:	431a      	orrs	r2, r3
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	621a      	str	r2, [r3, #32]
}
 8007752:	bf00      	nop
 8007754:	371c      	adds	r7, #28
 8007756:	46bd      	mov	sp, r7
 8007758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775c:	4770      	bx	lr

0800775e <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
 8007766:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2204      	movs	r2, #4
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	4618      	mov	r0, r3
 8007772:	f000 f901 	bl	8007978 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007784:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0307 	and.w	r3, r3, #7
 8007790:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2b06      	cmp	r3, #6
 8007796:	d007      	beq.n	80077a8 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f042 0201 	orr.w	r2, r2, #1
 80077a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3710      	adds	r7, #16
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
	...

080077b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d101      	bne.n	80077cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077c8:	2302      	movs	r3, #2
 80077ca:	e05a      	b.n	8007882 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2202      	movs	r2, #2
 80077d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a21      	ldr	r2, [pc, #132]	; (8007890 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d022      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007818:	d01d      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a1d      	ldr	r2, [pc, #116]	; (8007894 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d018      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a1b      	ldr	r2, [pc, #108]	; (8007898 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d013      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a1a      	ldr	r2, [pc, #104]	; (800789c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d00e      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a18      	ldr	r2, [pc, #96]	; (80078a0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d009      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a17      	ldr	r2, [pc, #92]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d004      	beq.n	8007856 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d10c      	bne.n	8007870 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800785c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	68ba      	ldr	r2, [r7, #8]
 8007864:	4313      	orrs	r3, r2
 8007866:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3714      	adds	r7, #20
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	40010000 	.word	0x40010000
 8007894:	40000400 	.word	0x40000400
 8007898:	40000800 	.word	0x40000800
 800789c:	40000c00 	.word	0x40000c00
 80078a0:	40010400 	.word	0x40010400
 80078a4:	40014000 	.word	0x40014000
 80078a8:	40001800 	.word	0x40001800

080078ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80078ac:	b480      	push	{r7}
 80078ae:	b085      	sub	sp, #20
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
 80078b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078c0:	2b01      	cmp	r3, #1
 80078c2:	d101      	bne.n	80078c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80078c4:	2302      	movs	r3, #2
 80078c6:	e03d      	b.n	8007944 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	4313      	orrs	r3, r2
 80078dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	685b      	ldr	r3, [r3, #4]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4313      	orrs	r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	691b      	ldr	r3, [r3, #16]
 8007912:	4313      	orrs	r3, r2
 8007914:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	695b      	ldr	r3, [r3, #20]
 8007920:	4313      	orrs	r3, r2
 8007922:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	69db      	ldr	r3, [r3, #28]
 800792e:	4313      	orrs	r3, r2
 8007930:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68fa      	ldr	r2, [r7, #12]
 8007938:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3714      	adds	r7, #20
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007978:	b480      	push	{r7}
 800797a:	b087      	sub	sp, #28
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	f003 031f 	and.w	r3, r3, #31
 800798a:	2204      	movs	r2, #4
 800798c:	fa02 f303 	lsl.w	r3, r2, r3
 8007990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6a1a      	ldr	r2, [r3, #32]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	43db      	mvns	r3, r3
 800799a:	401a      	ands	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	6a1a      	ldr	r2, [r3, #32]
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f003 031f 	and.w	r3, r3, #31
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	fa01 f303 	lsl.w	r3, r1, r3
 80079b0:	431a      	orrs	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	621a      	str	r2, [r3, #32]
}
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c0:	4770      	bx	lr

080079c2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079c2:	b580      	push	{r7, lr}
 80079c4:	b082      	sub	sp, #8
 80079c6:	af00      	add	r7, sp, #0
 80079c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e03f      	b.n	8007a54 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d106      	bne.n	80079ee <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2200      	movs	r2, #0
 80079e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f005 fb15 	bl	800d018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2224      	movs	r2, #36	; 0x24
 80079f2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	68da      	ldr	r2, [r3, #12]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a04:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fabe 	bl	8007f88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	691a      	ldr	r2, [r3, #16]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a1a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	695a      	ldr	r2, [r3, #20]
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a2a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68da      	ldr	r2, [r3, #12]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a3a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4613      	mov	r3, r2
 8007a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b20      	cmp	r3, #32
 8007a74:	d140      	bne.n	8007af8 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d002      	beq.n	8007a82 <HAL_UART_Receive_IT+0x26>
 8007a7c:	88fb      	ldrh	r3, [r7, #6]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d101      	bne.n	8007a86 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e039      	b.n	8007afa <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d101      	bne.n	8007a94 <HAL_UART_Receive_IT+0x38>
 8007a90:	2302      	movs	r3, #2
 8007a92:	e032      	b.n	8007afa <HAL_UART_Receive_IT+0x9e>
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2201      	movs	r2, #1
 8007a98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	88fa      	ldrh	r2, [r7, #6]
 8007aa6:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	88fa      	ldrh	r2, [r7, #6]
 8007aac:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2222      	movs	r2, #34	; 0x22
 8007ab8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68da      	ldr	r2, [r3, #12]
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ad2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695a      	ldr	r2, [r3, #20]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f042 0201 	orr.w	r2, r2, #1
 8007ae2:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0220 	orr.w	r2, r2, #32
 8007af2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8007af4:	2300      	movs	r3, #0
 8007af6:	e000      	b.n	8007afa <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007af8:	2302      	movs	r3, #2
  }
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b04:	4770      	bx	lr
	...

08007b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b088      	sub	sp, #32
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	f003 030f 	and.w	r3, r3, #15
 8007b36:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10d      	bne.n	8007b5a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f003 0320 	and.w	r3, r3, #32
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <HAL_UART_IRQHandler+0x52>
 8007b48:	69bb      	ldr	r3, [r7, #24]
 8007b4a:	f003 0320 	and.w	r3, r3, #32
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d003      	beq.n	8007b5a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f996 	bl	8007e84 <UART_Receive_IT>
      return;
 8007b58:	e0d1      	b.n	8007cfe <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	f000 80b0 	beq.w	8007cc2 <HAL_UART_IRQHandler+0x1ba>
 8007b62:	697b      	ldr	r3, [r7, #20]
 8007b64:	f003 0301 	and.w	r3, r3, #1
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d105      	bne.n	8007b78 <HAL_UART_IRQHandler+0x70>
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 80a5 	beq.w	8007cc2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b78:	69fb      	ldr	r3, [r7, #28]
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_UART_IRQHandler+0x90>
 8007b82:	69bb      	ldr	r3, [r7, #24]
 8007b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b90:	f043 0201 	orr.w	r2, r3, #1
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f003 0304 	and.w	r3, r3, #4
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <HAL_UART_IRQHandler+0xb0>
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	f003 0301 	and.w	r3, r3, #1
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb0:	f043 0202 	orr.w	r2, r3, #2
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007bb8:	69fb      	ldr	r3, [r7, #28]
 8007bba:	f003 0302 	and.w	r3, r3, #2
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xd0>
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd0:	f043 0204 	orr.w	r2, r3, #4
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d00f      	beq.n	8007c02 <HAL_UART_IRQHandler+0xfa>
 8007be2:	69bb      	ldr	r3, [r7, #24]
 8007be4:	f003 0320 	and.w	r3, r3, #32
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <HAL_UART_IRQHandler+0xee>
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	f003 0301 	and.w	r3, r3, #1
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfa:	f043 0208 	orr.w	r2, r3, #8
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d078      	beq.n	8007cfc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c0a:	69fb      	ldr	r3, [r7, #28]
 8007c0c:	f003 0320 	and.w	r3, r3, #32
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d007      	beq.n	8007c24 <HAL_UART_IRQHandler+0x11c>
 8007c14:	69bb      	ldr	r3, [r7, #24]
 8007c16:	f003 0320 	and.w	r3, r3, #32
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d002      	beq.n	8007c24 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 f930 	bl	8007e84 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c2e:	2b40      	cmp	r3, #64	; 0x40
 8007c30:	bf0c      	ite	eq
 8007c32:	2301      	moveq	r3, #1
 8007c34:	2300      	movne	r3, #0
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <HAL_UART_IRQHandler+0x144>
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d031      	beq.n	8007cb0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 f879 	bl	8007d44 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695b      	ldr	r3, [r3, #20]
 8007c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c5c:	2b40      	cmp	r3, #64	; 0x40
 8007c5e:	d123      	bne.n	8007ca8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	695a      	ldr	r2, [r3, #20]
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c6e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d013      	beq.n	8007ca0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7c:	4a21      	ldr	r2, [pc, #132]	; (8007d04 <HAL_UART_IRQHandler+0x1fc>)
 8007c7e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fb f8a9 	bl	8002ddc <HAL_DMA_Abort_IT>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d016      	beq.n	8007cbe <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c96:	687a      	ldr	r2, [r7, #4]
 8007c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007c9a:	4610      	mov	r0, r2
 8007c9c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c9e:	e00e      	b.n	8007cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f845 	bl	8007d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca6:	e00a      	b.n	8007cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f000 f841 	bl	8007d30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cae:	e006      	b.n	8007cbe <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f000 f83d 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007cbc:	e01e      	b.n	8007cfc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cbe:	bf00      	nop
    return;
 8007cc0:	e01c      	b.n	8007cfc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007cc2:	69fb      	ldr	r3, [r7, #28]
 8007cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d008      	beq.n	8007cde <HAL_UART_IRQHandler+0x1d6>
 8007ccc:	69bb      	ldr	r3, [r7, #24]
 8007cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f866 	bl	8007da8 <UART_Transmit_IT>
    return;
 8007cdc:	e00f      	b.n	8007cfe <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <HAL_UART_IRQHandler+0x1f6>
 8007ce8:	69bb      	ldr	r3, [r7, #24]
 8007cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f8ae 	bl	8007e54 <UART_EndTransmit_IT>
    return;
 8007cf8:	bf00      	nop
 8007cfa:	e000      	b.n	8007cfe <HAL_UART_IRQHandler+0x1f6>
    return;
 8007cfc:	bf00      	nop
  }
}
 8007cfe:	3720      	adds	r7, #32
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	08007d81 	.word	0x08007d81

08007d08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d10:	bf00      	nop
 8007d12:	370c      	adds	r7, #12
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d24:	bf00      	nop
 8007d26:	370c      	adds	r7, #12
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b083      	sub	sp, #12
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d38:	bf00      	nop
 8007d3a:	370c      	adds	r7, #12
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr

08007d44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d44:	b480      	push	{r7}
 8007d46:	b083      	sub	sp, #12
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	68da      	ldr	r2, [r3, #12]
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007d5a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	695a      	ldr	r2, [r3, #20]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0201 	bic.w	r2, r2, #1
 8007d6a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2220      	movs	r2, #32
 8007d70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2200      	movs	r2, #0
 8007d92:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff ffc8 	bl	8007d30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007da0:	bf00      	nop
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b21      	cmp	r3, #33	; 0x21
 8007dba:	d144      	bne.n	8007e46 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dc4:	d11a      	bne.n	8007dfc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	881b      	ldrh	r3, [r3, #0]
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007dda:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a1b      	ldr	r3, [r3, #32]
 8007de8:	1c9a      	adds	r2, r3, #2
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	621a      	str	r2, [r3, #32]
 8007dee:	e00e      	b.n	8007e0e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6a1b      	ldr	r3, [r3, #32]
 8007df4:	1c5a      	adds	r2, r3, #1
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	621a      	str	r2, [r3, #32]
 8007dfa:	e008      	b.n	8007e0e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	1c59      	adds	r1, r3, #1
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	6211      	str	r1, [r2, #32]
 8007e06:	781a      	ldrb	r2, [r3, #0]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e12:	b29b      	uxth	r3, r3
 8007e14:	3b01      	subs	r3, #1
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10f      	bne.n	8007e42 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	68da      	ldr	r2, [r3, #12]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e30:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68da      	ldr	r2, [r3, #12]
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e40:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007e42:	2300      	movs	r3, #0
 8007e44:	e000      	b.n	8007e48 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007e46:	2302      	movs	r3, #2
  }
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	3714      	adds	r7, #20
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e6a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2220      	movs	r2, #32
 8007e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff ff47 	bl	8007d08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007e7a:	2300      	movs	r3, #0
}
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	3708      	adds	r7, #8
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b22      	cmp	r3, #34	; 0x22
 8007e96:	d171      	bne.n	8007f7c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ea0:	d123      	bne.n	8007eea <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10e      	bne.n	8007ece <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ebc:	b29a      	uxth	r2, r3
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ec6:	1c9a      	adds	r2, r3, #2
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	629a      	str	r2, [r3, #40]	; 0x28
 8007ecc:	e029      	b.n	8007f22 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	b29b      	uxth	r3, r3
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee2:	1c5a      	adds	r2, r3, #1
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8007ee8:	e01b      	b.n	8007f22 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	691b      	ldr	r3, [r3, #16]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	6858      	ldr	r0, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007efc:	1c59      	adds	r1, r3, #1
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	6291      	str	r1, [r2, #40]	; 0x28
 8007f02:	b2c2      	uxtb	r2, r0
 8007f04:	701a      	strb	r2, [r3, #0]
 8007f06:	e00c      	b.n	8007f22 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f14:	1c58      	adds	r0, r3, #1
 8007f16:	6879      	ldr	r1, [r7, #4]
 8007f18:	6288      	str	r0, [r1, #40]	; 0x28
 8007f1a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f1e:	b2d2      	uxtb	r2, r2
 8007f20:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	3b01      	subs	r3, #1
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	4619      	mov	r1, r3
 8007f30:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d120      	bne.n	8007f78 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	68da      	ldr	r2, [r3, #12]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 0220 	bic.w	r2, r2, #32
 8007f44:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007f54:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	695a      	ldr	r2, [r3, #20]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0201 	bic.w	r2, r2, #1
 8007f64:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	2220      	movs	r2, #32
 8007f6a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7ff fed4 	bl	8007d1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e002      	b.n	8007f7e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e000      	b.n	8007f7e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007f7c:	2302      	movs	r3, #2
  }
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3710      	adds	r7, #16
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f8c:	b085      	sub	sp, #20
 8007f8e:	af00      	add	r7, sp, #0
 8007f90:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	430a      	orrs	r2, r1
 8007fa6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	689a      	ldr	r2, [r3, #8]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	691b      	ldr	r3, [r3, #16]
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	695b      	ldr	r3, [r3, #20]
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	69db      	ldr	r3, [r3, #28]
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007fca:	f023 030c 	bic.w	r3, r3, #12
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6812      	ldr	r2, [r2, #0]
 8007fd2:	68f9      	ldr	r1, [r7, #12]
 8007fd4:	430b      	orrs	r3, r1
 8007fd6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	699a      	ldr	r2, [r3, #24]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	430a      	orrs	r2, r1
 8007fec:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	69db      	ldr	r3, [r3, #28]
 8007ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ff6:	f040 818b 	bne.w	8008310 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4ac1      	ldr	r2, [pc, #772]	; (8008304 <UART_SetConfig+0x37c>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d005      	beq.n	8008010 <UART_SetConfig+0x88>
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4abf      	ldr	r2, [pc, #764]	; (8008308 <UART_SetConfig+0x380>)
 800800a:	4293      	cmp	r3, r2
 800800c:	f040 80bd 	bne.w	800818a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008010:	f7fd f8a6 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 8008014:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	461d      	mov	r5, r3
 800801a:	f04f 0600 	mov.w	r6, #0
 800801e:	46a8      	mov	r8, r5
 8008020:	46b1      	mov	r9, r6
 8008022:	eb18 0308 	adds.w	r3, r8, r8
 8008026:	eb49 0409 	adc.w	r4, r9, r9
 800802a:	4698      	mov	r8, r3
 800802c:	46a1      	mov	r9, r4
 800802e:	eb18 0805 	adds.w	r8, r8, r5
 8008032:	eb49 0906 	adc.w	r9, r9, r6
 8008036:	f04f 0100 	mov.w	r1, #0
 800803a:	f04f 0200 	mov.w	r2, #0
 800803e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008042:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008046:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800804a:	4688      	mov	r8, r1
 800804c:	4691      	mov	r9, r2
 800804e:	eb18 0005 	adds.w	r0, r8, r5
 8008052:	eb49 0106 	adc.w	r1, r9, r6
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	461d      	mov	r5, r3
 800805c:	f04f 0600 	mov.w	r6, #0
 8008060:	196b      	adds	r3, r5, r5
 8008062:	eb46 0406 	adc.w	r4, r6, r6
 8008066:	461a      	mov	r2, r3
 8008068:	4623      	mov	r3, r4
 800806a:	f7f8 fe0d 	bl	8000c88 <__aeabi_uldivmod>
 800806e:	4603      	mov	r3, r0
 8008070:	460c      	mov	r4, r1
 8008072:	461a      	mov	r2, r3
 8008074:	4ba5      	ldr	r3, [pc, #660]	; (800830c <UART_SetConfig+0x384>)
 8008076:	fba3 2302 	umull	r2, r3, r3, r2
 800807a:	095b      	lsrs	r3, r3, #5
 800807c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	461d      	mov	r5, r3
 8008084:	f04f 0600 	mov.w	r6, #0
 8008088:	46a9      	mov	r9, r5
 800808a:	46b2      	mov	sl, r6
 800808c:	eb19 0309 	adds.w	r3, r9, r9
 8008090:	eb4a 040a 	adc.w	r4, sl, sl
 8008094:	4699      	mov	r9, r3
 8008096:	46a2      	mov	sl, r4
 8008098:	eb19 0905 	adds.w	r9, r9, r5
 800809c:	eb4a 0a06 	adc.w	sl, sl, r6
 80080a0:	f04f 0100 	mov.w	r1, #0
 80080a4:	f04f 0200 	mov.w	r2, #0
 80080a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80080ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80080b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80080b4:	4689      	mov	r9, r1
 80080b6:	4692      	mov	sl, r2
 80080b8:	eb19 0005 	adds.w	r0, r9, r5
 80080bc:	eb4a 0106 	adc.w	r1, sl, r6
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	461d      	mov	r5, r3
 80080c6:	f04f 0600 	mov.w	r6, #0
 80080ca:	196b      	adds	r3, r5, r5
 80080cc:	eb46 0406 	adc.w	r4, r6, r6
 80080d0:	461a      	mov	r2, r3
 80080d2:	4623      	mov	r3, r4
 80080d4:	f7f8 fdd8 	bl	8000c88 <__aeabi_uldivmod>
 80080d8:	4603      	mov	r3, r0
 80080da:	460c      	mov	r4, r1
 80080dc:	461a      	mov	r2, r3
 80080de:	4b8b      	ldr	r3, [pc, #556]	; (800830c <UART_SetConfig+0x384>)
 80080e0:	fba3 1302 	umull	r1, r3, r3, r2
 80080e4:	095b      	lsrs	r3, r3, #5
 80080e6:	2164      	movs	r1, #100	; 0x64
 80080e8:	fb01 f303 	mul.w	r3, r1, r3
 80080ec:	1ad3      	subs	r3, r2, r3
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	3332      	adds	r3, #50	; 0x32
 80080f2:	4a86      	ldr	r2, [pc, #536]	; (800830c <UART_SetConfig+0x384>)
 80080f4:	fba2 2303 	umull	r2, r3, r2, r3
 80080f8:	095b      	lsrs	r3, r3, #5
 80080fa:	005b      	lsls	r3, r3, #1
 80080fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008100:	4498      	add	r8, r3
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	461d      	mov	r5, r3
 8008106:	f04f 0600 	mov.w	r6, #0
 800810a:	46a9      	mov	r9, r5
 800810c:	46b2      	mov	sl, r6
 800810e:	eb19 0309 	adds.w	r3, r9, r9
 8008112:	eb4a 040a 	adc.w	r4, sl, sl
 8008116:	4699      	mov	r9, r3
 8008118:	46a2      	mov	sl, r4
 800811a:	eb19 0905 	adds.w	r9, r9, r5
 800811e:	eb4a 0a06 	adc.w	sl, sl, r6
 8008122:	f04f 0100 	mov.w	r1, #0
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800812e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008132:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008136:	4689      	mov	r9, r1
 8008138:	4692      	mov	sl, r2
 800813a:	eb19 0005 	adds.w	r0, r9, r5
 800813e:	eb4a 0106 	adc.w	r1, sl, r6
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	461d      	mov	r5, r3
 8008148:	f04f 0600 	mov.w	r6, #0
 800814c:	196b      	adds	r3, r5, r5
 800814e:	eb46 0406 	adc.w	r4, r6, r6
 8008152:	461a      	mov	r2, r3
 8008154:	4623      	mov	r3, r4
 8008156:	f7f8 fd97 	bl	8000c88 <__aeabi_uldivmod>
 800815a:	4603      	mov	r3, r0
 800815c:	460c      	mov	r4, r1
 800815e:	461a      	mov	r2, r3
 8008160:	4b6a      	ldr	r3, [pc, #424]	; (800830c <UART_SetConfig+0x384>)
 8008162:	fba3 1302 	umull	r1, r3, r3, r2
 8008166:	095b      	lsrs	r3, r3, #5
 8008168:	2164      	movs	r1, #100	; 0x64
 800816a:	fb01 f303 	mul.w	r3, r1, r3
 800816e:	1ad3      	subs	r3, r2, r3
 8008170:	00db      	lsls	r3, r3, #3
 8008172:	3332      	adds	r3, #50	; 0x32
 8008174:	4a65      	ldr	r2, [pc, #404]	; (800830c <UART_SetConfig+0x384>)
 8008176:	fba2 2303 	umull	r2, r3, r2, r3
 800817a:	095b      	lsrs	r3, r3, #5
 800817c:	f003 0207 	and.w	r2, r3, #7
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4442      	add	r2, r8
 8008186:	609a      	str	r2, [r3, #8]
 8008188:	e26f      	b.n	800866a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800818a:	f7fc ffd5 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 800818e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	461d      	mov	r5, r3
 8008194:	f04f 0600 	mov.w	r6, #0
 8008198:	46a8      	mov	r8, r5
 800819a:	46b1      	mov	r9, r6
 800819c:	eb18 0308 	adds.w	r3, r8, r8
 80081a0:	eb49 0409 	adc.w	r4, r9, r9
 80081a4:	4698      	mov	r8, r3
 80081a6:	46a1      	mov	r9, r4
 80081a8:	eb18 0805 	adds.w	r8, r8, r5
 80081ac:	eb49 0906 	adc.w	r9, r9, r6
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80081bc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80081c0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80081c4:	4688      	mov	r8, r1
 80081c6:	4691      	mov	r9, r2
 80081c8:	eb18 0005 	adds.w	r0, r8, r5
 80081cc:	eb49 0106 	adc.w	r1, r9, r6
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	461d      	mov	r5, r3
 80081d6:	f04f 0600 	mov.w	r6, #0
 80081da:	196b      	adds	r3, r5, r5
 80081dc:	eb46 0406 	adc.w	r4, r6, r6
 80081e0:	461a      	mov	r2, r3
 80081e2:	4623      	mov	r3, r4
 80081e4:	f7f8 fd50 	bl	8000c88 <__aeabi_uldivmod>
 80081e8:	4603      	mov	r3, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	461a      	mov	r2, r3
 80081ee:	4b47      	ldr	r3, [pc, #284]	; (800830c <UART_SetConfig+0x384>)
 80081f0:	fba3 2302 	umull	r2, r3, r3, r2
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	461d      	mov	r5, r3
 80081fe:	f04f 0600 	mov.w	r6, #0
 8008202:	46a9      	mov	r9, r5
 8008204:	46b2      	mov	sl, r6
 8008206:	eb19 0309 	adds.w	r3, r9, r9
 800820a:	eb4a 040a 	adc.w	r4, sl, sl
 800820e:	4699      	mov	r9, r3
 8008210:	46a2      	mov	sl, r4
 8008212:	eb19 0905 	adds.w	r9, r9, r5
 8008216:	eb4a 0a06 	adc.w	sl, sl, r6
 800821a:	f04f 0100 	mov.w	r1, #0
 800821e:	f04f 0200 	mov.w	r2, #0
 8008222:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008226:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800822a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800822e:	4689      	mov	r9, r1
 8008230:	4692      	mov	sl, r2
 8008232:	eb19 0005 	adds.w	r0, r9, r5
 8008236:	eb4a 0106 	adc.w	r1, sl, r6
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	461d      	mov	r5, r3
 8008240:	f04f 0600 	mov.w	r6, #0
 8008244:	196b      	adds	r3, r5, r5
 8008246:	eb46 0406 	adc.w	r4, r6, r6
 800824a:	461a      	mov	r2, r3
 800824c:	4623      	mov	r3, r4
 800824e:	f7f8 fd1b 	bl	8000c88 <__aeabi_uldivmod>
 8008252:	4603      	mov	r3, r0
 8008254:	460c      	mov	r4, r1
 8008256:	461a      	mov	r2, r3
 8008258:	4b2c      	ldr	r3, [pc, #176]	; (800830c <UART_SetConfig+0x384>)
 800825a:	fba3 1302 	umull	r1, r3, r3, r2
 800825e:	095b      	lsrs	r3, r3, #5
 8008260:	2164      	movs	r1, #100	; 0x64
 8008262:	fb01 f303 	mul.w	r3, r1, r3
 8008266:	1ad3      	subs	r3, r2, r3
 8008268:	00db      	lsls	r3, r3, #3
 800826a:	3332      	adds	r3, #50	; 0x32
 800826c:	4a27      	ldr	r2, [pc, #156]	; (800830c <UART_SetConfig+0x384>)
 800826e:	fba2 2303 	umull	r2, r3, r2, r3
 8008272:	095b      	lsrs	r3, r3, #5
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800827a:	4498      	add	r8, r3
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	461d      	mov	r5, r3
 8008280:	f04f 0600 	mov.w	r6, #0
 8008284:	46a9      	mov	r9, r5
 8008286:	46b2      	mov	sl, r6
 8008288:	eb19 0309 	adds.w	r3, r9, r9
 800828c:	eb4a 040a 	adc.w	r4, sl, sl
 8008290:	4699      	mov	r9, r3
 8008292:	46a2      	mov	sl, r4
 8008294:	eb19 0905 	adds.w	r9, r9, r5
 8008298:	eb4a 0a06 	adc.w	sl, sl, r6
 800829c:	f04f 0100 	mov.w	r1, #0
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80082a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80082ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80082b0:	4689      	mov	r9, r1
 80082b2:	4692      	mov	sl, r2
 80082b4:	eb19 0005 	adds.w	r0, r9, r5
 80082b8:	eb4a 0106 	adc.w	r1, sl, r6
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	461d      	mov	r5, r3
 80082c2:	f04f 0600 	mov.w	r6, #0
 80082c6:	196b      	adds	r3, r5, r5
 80082c8:	eb46 0406 	adc.w	r4, r6, r6
 80082cc:	461a      	mov	r2, r3
 80082ce:	4623      	mov	r3, r4
 80082d0:	f7f8 fcda 	bl	8000c88 <__aeabi_uldivmod>
 80082d4:	4603      	mov	r3, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	461a      	mov	r2, r3
 80082da:	4b0c      	ldr	r3, [pc, #48]	; (800830c <UART_SetConfig+0x384>)
 80082dc:	fba3 1302 	umull	r1, r3, r3, r2
 80082e0:	095b      	lsrs	r3, r3, #5
 80082e2:	2164      	movs	r1, #100	; 0x64
 80082e4:	fb01 f303 	mul.w	r3, r1, r3
 80082e8:	1ad3      	subs	r3, r2, r3
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	3332      	adds	r3, #50	; 0x32
 80082ee:	4a07      	ldr	r2, [pc, #28]	; (800830c <UART_SetConfig+0x384>)
 80082f0:	fba2 2303 	umull	r2, r3, r2, r3
 80082f4:	095b      	lsrs	r3, r3, #5
 80082f6:	f003 0207 	and.w	r2, r3, #7
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4442      	add	r2, r8
 8008300:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8008302:	e1b2      	b.n	800866a <UART_SetConfig+0x6e2>
 8008304:	40011000 	.word	0x40011000
 8008308:	40011400 	.word	0x40011400
 800830c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4ad7      	ldr	r2, [pc, #860]	; (8008674 <UART_SetConfig+0x6ec>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d005      	beq.n	8008326 <UART_SetConfig+0x39e>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4ad6      	ldr	r2, [pc, #856]	; (8008678 <UART_SetConfig+0x6f0>)
 8008320:	4293      	cmp	r3, r2
 8008322:	f040 80d1 	bne.w	80084c8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8008326:	f7fc ff1b 	bl	8005160 <HAL_RCC_GetPCLK2Freq>
 800832a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800832c:	68bb      	ldr	r3, [r7, #8]
 800832e:	469a      	mov	sl, r3
 8008330:	f04f 0b00 	mov.w	fp, #0
 8008334:	46d0      	mov	r8, sl
 8008336:	46d9      	mov	r9, fp
 8008338:	eb18 0308 	adds.w	r3, r8, r8
 800833c:	eb49 0409 	adc.w	r4, r9, r9
 8008340:	4698      	mov	r8, r3
 8008342:	46a1      	mov	r9, r4
 8008344:	eb18 080a 	adds.w	r8, r8, sl
 8008348:	eb49 090b 	adc.w	r9, r9, fp
 800834c:	f04f 0100 	mov.w	r1, #0
 8008350:	f04f 0200 	mov.w	r2, #0
 8008354:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008358:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800835c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008360:	4688      	mov	r8, r1
 8008362:	4691      	mov	r9, r2
 8008364:	eb1a 0508 	adds.w	r5, sl, r8
 8008368:	eb4b 0609 	adc.w	r6, fp, r9
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	4619      	mov	r1, r3
 8008372:	f04f 0200 	mov.w	r2, #0
 8008376:	f04f 0300 	mov.w	r3, #0
 800837a:	f04f 0400 	mov.w	r4, #0
 800837e:	0094      	lsls	r4, r2, #2
 8008380:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008384:	008b      	lsls	r3, r1, #2
 8008386:	461a      	mov	r2, r3
 8008388:	4623      	mov	r3, r4
 800838a:	4628      	mov	r0, r5
 800838c:	4631      	mov	r1, r6
 800838e:	f7f8 fc7b 	bl	8000c88 <__aeabi_uldivmod>
 8008392:	4603      	mov	r3, r0
 8008394:	460c      	mov	r4, r1
 8008396:	461a      	mov	r2, r3
 8008398:	4bb8      	ldr	r3, [pc, #736]	; (800867c <UART_SetConfig+0x6f4>)
 800839a:	fba3 2302 	umull	r2, r3, r3, r2
 800839e:	095b      	lsrs	r3, r3, #5
 80083a0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80083a4:	68bb      	ldr	r3, [r7, #8]
 80083a6:	469b      	mov	fp, r3
 80083a8:	f04f 0c00 	mov.w	ip, #0
 80083ac:	46d9      	mov	r9, fp
 80083ae:	46e2      	mov	sl, ip
 80083b0:	eb19 0309 	adds.w	r3, r9, r9
 80083b4:	eb4a 040a 	adc.w	r4, sl, sl
 80083b8:	4699      	mov	r9, r3
 80083ba:	46a2      	mov	sl, r4
 80083bc:	eb19 090b 	adds.w	r9, r9, fp
 80083c0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80083c4:	f04f 0100 	mov.w	r1, #0
 80083c8:	f04f 0200 	mov.w	r2, #0
 80083cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083d0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80083d4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80083d8:	4689      	mov	r9, r1
 80083da:	4692      	mov	sl, r2
 80083dc:	eb1b 0509 	adds.w	r5, fp, r9
 80083e0:	eb4c 060a 	adc.w	r6, ip, sl
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	4619      	mov	r1, r3
 80083ea:	f04f 0200 	mov.w	r2, #0
 80083ee:	f04f 0300 	mov.w	r3, #0
 80083f2:	f04f 0400 	mov.w	r4, #0
 80083f6:	0094      	lsls	r4, r2, #2
 80083f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80083fc:	008b      	lsls	r3, r1, #2
 80083fe:	461a      	mov	r2, r3
 8008400:	4623      	mov	r3, r4
 8008402:	4628      	mov	r0, r5
 8008404:	4631      	mov	r1, r6
 8008406:	f7f8 fc3f 	bl	8000c88 <__aeabi_uldivmod>
 800840a:	4603      	mov	r3, r0
 800840c:	460c      	mov	r4, r1
 800840e:	461a      	mov	r2, r3
 8008410:	4b9a      	ldr	r3, [pc, #616]	; (800867c <UART_SetConfig+0x6f4>)
 8008412:	fba3 1302 	umull	r1, r3, r3, r2
 8008416:	095b      	lsrs	r3, r3, #5
 8008418:	2164      	movs	r1, #100	; 0x64
 800841a:	fb01 f303 	mul.w	r3, r1, r3
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	011b      	lsls	r3, r3, #4
 8008422:	3332      	adds	r3, #50	; 0x32
 8008424:	4a95      	ldr	r2, [pc, #596]	; (800867c <UART_SetConfig+0x6f4>)
 8008426:	fba2 2303 	umull	r2, r3, r2, r3
 800842a:	095b      	lsrs	r3, r3, #5
 800842c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008430:	4498      	add	r8, r3
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	469b      	mov	fp, r3
 8008436:	f04f 0c00 	mov.w	ip, #0
 800843a:	46d9      	mov	r9, fp
 800843c:	46e2      	mov	sl, ip
 800843e:	eb19 0309 	adds.w	r3, r9, r9
 8008442:	eb4a 040a 	adc.w	r4, sl, sl
 8008446:	4699      	mov	r9, r3
 8008448:	46a2      	mov	sl, r4
 800844a:	eb19 090b 	adds.w	r9, r9, fp
 800844e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008452:	f04f 0100 	mov.w	r1, #0
 8008456:	f04f 0200 	mov.w	r2, #0
 800845a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800845e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008466:	4689      	mov	r9, r1
 8008468:	4692      	mov	sl, r2
 800846a:	eb1b 0509 	adds.w	r5, fp, r9
 800846e:	eb4c 060a 	adc.w	r6, ip, sl
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	4619      	mov	r1, r3
 8008478:	f04f 0200 	mov.w	r2, #0
 800847c:	f04f 0300 	mov.w	r3, #0
 8008480:	f04f 0400 	mov.w	r4, #0
 8008484:	0094      	lsls	r4, r2, #2
 8008486:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800848a:	008b      	lsls	r3, r1, #2
 800848c:	461a      	mov	r2, r3
 800848e:	4623      	mov	r3, r4
 8008490:	4628      	mov	r0, r5
 8008492:	4631      	mov	r1, r6
 8008494:	f7f8 fbf8 	bl	8000c88 <__aeabi_uldivmod>
 8008498:	4603      	mov	r3, r0
 800849a:	460c      	mov	r4, r1
 800849c:	461a      	mov	r2, r3
 800849e:	4b77      	ldr	r3, [pc, #476]	; (800867c <UART_SetConfig+0x6f4>)
 80084a0:	fba3 1302 	umull	r1, r3, r3, r2
 80084a4:	095b      	lsrs	r3, r3, #5
 80084a6:	2164      	movs	r1, #100	; 0x64
 80084a8:	fb01 f303 	mul.w	r3, r1, r3
 80084ac:	1ad3      	subs	r3, r2, r3
 80084ae:	011b      	lsls	r3, r3, #4
 80084b0:	3332      	adds	r3, #50	; 0x32
 80084b2:	4a72      	ldr	r2, [pc, #456]	; (800867c <UART_SetConfig+0x6f4>)
 80084b4:	fba2 2303 	umull	r2, r3, r2, r3
 80084b8:	095b      	lsrs	r3, r3, #5
 80084ba:	f003 020f 	and.w	r2, r3, #15
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4442      	add	r2, r8
 80084c4:	609a      	str	r2, [r3, #8]
 80084c6:	e0d0      	b.n	800866a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80084c8:	f7fc fe36 	bl	8005138 <HAL_RCC_GetPCLK1Freq>
 80084cc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	469a      	mov	sl, r3
 80084d2:	f04f 0b00 	mov.w	fp, #0
 80084d6:	46d0      	mov	r8, sl
 80084d8:	46d9      	mov	r9, fp
 80084da:	eb18 0308 	adds.w	r3, r8, r8
 80084de:	eb49 0409 	adc.w	r4, r9, r9
 80084e2:	4698      	mov	r8, r3
 80084e4:	46a1      	mov	r9, r4
 80084e6:	eb18 080a 	adds.w	r8, r8, sl
 80084ea:	eb49 090b 	adc.w	r9, r9, fp
 80084ee:	f04f 0100 	mov.w	r1, #0
 80084f2:	f04f 0200 	mov.w	r2, #0
 80084f6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80084fa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80084fe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008502:	4688      	mov	r8, r1
 8008504:	4691      	mov	r9, r2
 8008506:	eb1a 0508 	adds.w	r5, sl, r8
 800850a:	eb4b 0609 	adc.w	r6, fp, r9
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	4619      	mov	r1, r3
 8008514:	f04f 0200 	mov.w	r2, #0
 8008518:	f04f 0300 	mov.w	r3, #0
 800851c:	f04f 0400 	mov.w	r4, #0
 8008520:	0094      	lsls	r4, r2, #2
 8008522:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008526:	008b      	lsls	r3, r1, #2
 8008528:	461a      	mov	r2, r3
 800852a:	4623      	mov	r3, r4
 800852c:	4628      	mov	r0, r5
 800852e:	4631      	mov	r1, r6
 8008530:	f7f8 fbaa 	bl	8000c88 <__aeabi_uldivmod>
 8008534:	4603      	mov	r3, r0
 8008536:	460c      	mov	r4, r1
 8008538:	461a      	mov	r2, r3
 800853a:	4b50      	ldr	r3, [pc, #320]	; (800867c <UART_SetConfig+0x6f4>)
 800853c:	fba3 2302 	umull	r2, r3, r3, r2
 8008540:	095b      	lsrs	r3, r3, #5
 8008542:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	469b      	mov	fp, r3
 800854a:	f04f 0c00 	mov.w	ip, #0
 800854e:	46d9      	mov	r9, fp
 8008550:	46e2      	mov	sl, ip
 8008552:	eb19 0309 	adds.w	r3, r9, r9
 8008556:	eb4a 040a 	adc.w	r4, sl, sl
 800855a:	4699      	mov	r9, r3
 800855c:	46a2      	mov	sl, r4
 800855e:	eb19 090b 	adds.w	r9, r9, fp
 8008562:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008566:	f04f 0100 	mov.w	r1, #0
 800856a:	f04f 0200 	mov.w	r2, #0
 800856e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008572:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008576:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800857a:	4689      	mov	r9, r1
 800857c:	4692      	mov	sl, r2
 800857e:	eb1b 0509 	adds.w	r5, fp, r9
 8008582:	eb4c 060a 	adc.w	r6, ip, sl
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	4619      	mov	r1, r3
 800858c:	f04f 0200 	mov.w	r2, #0
 8008590:	f04f 0300 	mov.w	r3, #0
 8008594:	f04f 0400 	mov.w	r4, #0
 8008598:	0094      	lsls	r4, r2, #2
 800859a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800859e:	008b      	lsls	r3, r1, #2
 80085a0:	461a      	mov	r2, r3
 80085a2:	4623      	mov	r3, r4
 80085a4:	4628      	mov	r0, r5
 80085a6:	4631      	mov	r1, r6
 80085a8:	f7f8 fb6e 	bl	8000c88 <__aeabi_uldivmod>
 80085ac:	4603      	mov	r3, r0
 80085ae:	460c      	mov	r4, r1
 80085b0:	461a      	mov	r2, r3
 80085b2:	4b32      	ldr	r3, [pc, #200]	; (800867c <UART_SetConfig+0x6f4>)
 80085b4:	fba3 1302 	umull	r1, r3, r3, r2
 80085b8:	095b      	lsrs	r3, r3, #5
 80085ba:	2164      	movs	r1, #100	; 0x64
 80085bc:	fb01 f303 	mul.w	r3, r1, r3
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	011b      	lsls	r3, r3, #4
 80085c4:	3332      	adds	r3, #50	; 0x32
 80085c6:	4a2d      	ldr	r2, [pc, #180]	; (800867c <UART_SetConfig+0x6f4>)
 80085c8:	fba2 2303 	umull	r2, r3, r2, r3
 80085cc:	095b      	lsrs	r3, r3, #5
 80085ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80085d2:	4498      	add	r8, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	469b      	mov	fp, r3
 80085d8:	f04f 0c00 	mov.w	ip, #0
 80085dc:	46d9      	mov	r9, fp
 80085de:	46e2      	mov	sl, ip
 80085e0:	eb19 0309 	adds.w	r3, r9, r9
 80085e4:	eb4a 040a 	adc.w	r4, sl, sl
 80085e8:	4699      	mov	r9, r3
 80085ea:	46a2      	mov	sl, r4
 80085ec:	eb19 090b 	adds.w	r9, r9, fp
 80085f0:	eb4a 0a0c 	adc.w	sl, sl, ip
 80085f4:	f04f 0100 	mov.w	r1, #0
 80085f8:	f04f 0200 	mov.w	r2, #0
 80085fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008600:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008604:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008608:	4689      	mov	r9, r1
 800860a:	4692      	mov	sl, r2
 800860c:	eb1b 0509 	adds.w	r5, fp, r9
 8008610:	eb4c 060a 	adc.w	r6, ip, sl
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	685b      	ldr	r3, [r3, #4]
 8008618:	4619      	mov	r1, r3
 800861a:	f04f 0200 	mov.w	r2, #0
 800861e:	f04f 0300 	mov.w	r3, #0
 8008622:	f04f 0400 	mov.w	r4, #0
 8008626:	0094      	lsls	r4, r2, #2
 8008628:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800862c:	008b      	lsls	r3, r1, #2
 800862e:	461a      	mov	r2, r3
 8008630:	4623      	mov	r3, r4
 8008632:	4628      	mov	r0, r5
 8008634:	4631      	mov	r1, r6
 8008636:	f7f8 fb27 	bl	8000c88 <__aeabi_uldivmod>
 800863a:	4603      	mov	r3, r0
 800863c:	460c      	mov	r4, r1
 800863e:	461a      	mov	r2, r3
 8008640:	4b0e      	ldr	r3, [pc, #56]	; (800867c <UART_SetConfig+0x6f4>)
 8008642:	fba3 1302 	umull	r1, r3, r3, r2
 8008646:	095b      	lsrs	r3, r3, #5
 8008648:	2164      	movs	r1, #100	; 0x64
 800864a:	fb01 f303 	mul.w	r3, r1, r3
 800864e:	1ad3      	subs	r3, r2, r3
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	3332      	adds	r3, #50	; 0x32
 8008654:	4a09      	ldr	r2, [pc, #36]	; (800867c <UART_SetConfig+0x6f4>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	095b      	lsrs	r3, r3, #5
 800865c:	f003 020f 	and.w	r2, r3, #15
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4442      	add	r2, r8
 8008666:	609a      	str	r2, [r3, #8]
}
 8008668:	e7ff      	b.n	800866a <UART_SetConfig+0x6e2>
 800866a:	bf00      	nop
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	40011000 	.word	0x40011000
 8008678:	40011400 	.word	0x40011400
 800867c:	51eb851f 	.word	0x51eb851f

08008680 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008680:	b084      	sub	sp, #16
 8008682:	b580      	push	{r7, lr}
 8008684:	b084      	sub	sp, #16
 8008686:	af00      	add	r7, sp, #0
 8008688:	6078      	str	r0, [r7, #4]
 800868a:	f107 001c 	add.w	r0, r7, #28
 800868e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008694:	2b01      	cmp	r3, #1
 8008696:	d122      	bne.n	80086de <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800869c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	68db      	ldr	r3, [r3, #12]
 80086a8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80086ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b0:	687a      	ldr	r2, [r7, #4]
 80086b2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80086c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d105      	bne.n	80086d2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80086d2:	6878      	ldr	r0, [r7, #4]
 80086d4:	f000 fa5c 	bl	8008b90 <USB_CoreReset>
 80086d8:	4603      	mov	r3, r0
 80086da:	73fb      	strb	r3, [r7, #15]
 80086dc:	e01a      	b.n	8008714 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	68db      	ldr	r3, [r3, #12]
 80086e2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa50 	bl	8008b90 <USB_CoreReset>
 80086f0:	4603      	mov	r3, r0
 80086f2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80086f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086fe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	639a      	str	r2, [r3, #56]	; 0x38
 8008706:	e005      	b.n	8008714 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008716:	2b01      	cmp	r3, #1
 8008718:	d10b      	bne.n	8008732 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	f043 0206 	orr.w	r2, r3, #6
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f043 0220 	orr.w	r2, r3, #32
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008732:	7bfb      	ldrb	r3, [r7, #15]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3710      	adds	r7, #16
 8008738:	46bd      	mov	sp, r7
 800873a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800873e:	b004      	add	sp, #16
 8008740:	4770      	bx	lr

08008742 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008742:	b480      	push	{r7}
 8008744:	b083      	sub	sp, #12
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	689b      	ldr	r3, [r3, #8]
 800874e:	f023 0201 	bic.w	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008756:	2300      	movs	r3, #0
}
 8008758:	4618      	mov	r0, r3
 800875a:	370c      	adds	r7, #12
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
 800876c:	460b      	mov	r3, r1
 800876e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68db      	ldr	r3, [r3, #12]
 8008774:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800877c:	78fb      	ldrb	r3, [r7, #3]
 800877e:	2b01      	cmp	r3, #1
 8008780:	d106      	bne.n	8008790 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	68db      	ldr	r3, [r3, #12]
 8008786:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60da      	str	r2, [r3, #12]
 800878e:	e00b      	b.n	80087a8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008790:	78fb      	ldrb	r3, [r7, #3]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	60da      	str	r2, [r3, #12]
 80087a2:	e001      	b.n	80087a8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	e003      	b.n	80087b0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80087a8:	2032      	movs	r0, #50	; 0x32
 80087aa:	f7f8 fc5f 	bl	800106c <HAL_Delay>

  return HAL_OK;
 80087ae:	2300      	movs	r3, #0
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087b8:	b084      	sub	sp, #16
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b086      	sub	sp, #24
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
 80087c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80087c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80087ca:	2300      	movs	r3, #0
 80087cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80087d2:	2300      	movs	r3, #0
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	e009      	b.n	80087ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80087d8:	687a      	ldr	r2, [r7, #4]
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	3340      	adds	r3, #64	; 0x40
 80087de:	009b      	lsls	r3, r3, #2
 80087e0:	4413      	add	r3, r2
 80087e2:	2200      	movs	r2, #0
 80087e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	3301      	adds	r3, #1
 80087ea:	613b      	str	r3, [r7, #16]
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	2b0e      	cmp	r3, #14
 80087f0:	d9f2      	bls.n	80087d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80087f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d112      	bne.n	800881e <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008808:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008814:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	639a      	str	r2, [r3, #56]	; 0x38
 800881c:	e00b      	b.n	8008836 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800883c:	461a      	mov	r2, r3
 800883e:	2300      	movs	r3, #0
 8008840:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008848:	4619      	mov	r1, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008850:	461a      	mov	r2, r3
 8008852:	680b      	ldr	r3, [r1, #0]
 8008854:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008858:	2b01      	cmp	r3, #1
 800885a:	d10c      	bne.n	8008876 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800885c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800885e:	2b00      	cmp	r3, #0
 8008860:	d104      	bne.n	800886c <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008862:	2100      	movs	r1, #0
 8008864:	6878      	ldr	r0, [r7, #4]
 8008866:	f000 f961 	bl	8008b2c <USB_SetDevSpeed>
 800886a:	e008      	b.n	800887e <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800886c:	2101      	movs	r1, #1
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f95c 	bl	8008b2c <USB_SetDevSpeed>
 8008874:	e003      	b.n	800887e <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008876:	2103      	movs	r1, #3
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 f957 	bl	8008b2c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800887e:	2110      	movs	r1, #16
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f90b 	bl	8008a9c <USB_FlushTxFifo>
 8008886:	4603      	mov	r3, r0
 8008888:	2b00      	cmp	r3, #0
 800888a:	d001      	beq.n	8008890 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 800888c:	2301      	movs	r3, #1
 800888e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 f929 	bl	8008ae8 <USB_FlushRxFifo>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088a6:	461a      	mov	r2, r3
 80088a8:	2300      	movs	r3, #0
 80088aa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088b2:	461a      	mov	r2, r3
 80088b4:	2300      	movs	r3, #0
 80088b6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088be:	461a      	mov	r2, r3
 80088c0:	2300      	movs	r3, #0
 80088c2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80088c4:	2300      	movs	r3, #0
 80088c6:	613b      	str	r3, [r7, #16]
 80088c8:	e043      	b.n	8008952 <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80088ca:	693b      	ldr	r3, [r7, #16]
 80088cc:	015a      	lsls	r2, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	4413      	add	r3, r2
 80088d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088e0:	d118      	bne.n	8008914 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d10a      	bne.n	80088fe <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80088e8:	693b      	ldr	r3, [r7, #16]
 80088ea:	015a      	lsls	r2, r3, #5
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	4413      	add	r3, r2
 80088f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088f4:	461a      	mov	r2, r3
 80088f6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088fa:	6013      	str	r3, [r2, #0]
 80088fc:	e013      	b.n	8008926 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80088fe:	693b      	ldr	r3, [r7, #16]
 8008900:	015a      	lsls	r2, r3, #5
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	4413      	add	r3, r2
 8008906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800890a:	461a      	mov	r2, r3
 800890c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008910:	6013      	str	r3, [r2, #0]
 8008912:	e008      	b.n	8008926 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	015a      	lsls	r2, r3, #5
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4413      	add	r3, r2
 800891c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008920:	461a      	mov	r2, r3
 8008922:	2300      	movs	r3, #0
 8008924:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	015a      	lsls	r2, r3, #5
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	4413      	add	r3, r2
 800892e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008932:	461a      	mov	r2, r3
 8008934:	2300      	movs	r3, #0
 8008936:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008938:	693b      	ldr	r3, [r7, #16]
 800893a:	015a      	lsls	r2, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	4413      	add	r3, r2
 8008940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008944:	461a      	mov	r2, r3
 8008946:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800894a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	3301      	adds	r3, #1
 8008950:	613b      	str	r3, [r7, #16]
 8008952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008954:	693a      	ldr	r2, [r7, #16]
 8008956:	429a      	cmp	r2, r3
 8008958:	d3b7      	bcc.n	80088ca <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800895a:	2300      	movs	r3, #0
 800895c:	613b      	str	r3, [r7, #16]
 800895e:	e043      	b.n	80089e8 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	4413      	add	r3, r2
 8008968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008972:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008976:	d118      	bne.n	80089aa <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008978:	693b      	ldr	r3, [r7, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d10a      	bne.n	8008994 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	015a      	lsls	r2, r3, #5
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	4413      	add	r3, r2
 8008986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800898a:	461a      	mov	r2, r3
 800898c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008990:	6013      	str	r3, [r2, #0]
 8008992:	e013      	b.n	80089bc <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008994:	693b      	ldr	r3, [r7, #16]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	461a      	mov	r2, r3
 80089a2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089a6:	6013      	str	r3, [r2, #0]
 80089a8:	e008      	b.n	80089bc <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089b6:	461a      	mov	r2, r3
 80089b8:	2300      	movs	r3, #0
 80089ba:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	015a      	lsls	r2, r3, #5
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c8:	461a      	mov	r2, r3
 80089ca:	2300      	movs	r3, #0
 80089cc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80089ce:	693b      	ldr	r3, [r7, #16]
 80089d0:	015a      	lsls	r2, r3, #5
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	4413      	add	r3, r2
 80089d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089da:	461a      	mov	r2, r3
 80089dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80089e0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089e2:	693b      	ldr	r3, [r7, #16]
 80089e4:	3301      	adds	r3, #1
 80089e6:	613b      	str	r3, [r7, #16]
 80089e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ea:	693a      	ldr	r2, [r7, #16]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d3b7      	bcc.n	8008960 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089f6:	691b      	ldr	r3, [r3, #16]
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80089fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a02:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8008a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d111      	bne.n	8008a2e <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a10:	461a      	mov	r2, r3
 8008a12:	4b20      	ldr	r3, [pc, #128]	; (8008a94 <USB_DevInit+0x2dc>)
 8008a14:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a28:	f043 0303 	orr.w	r3, r3, #3
 8008a2c:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008a3a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d105      	bne.n	8008a4e <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	699b      	ldr	r3, [r3, #24]
 8008a46:	f043 0210 	orr.w	r2, r3, #16
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	699a      	ldr	r2, [r3, #24]
 8008a52:	4b11      	ldr	r3, [pc, #68]	; (8008a98 <USB_DevInit+0x2e0>)
 8008a54:	4313      	orrs	r3, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d005      	beq.n	8008a6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	f043 0208 	orr.w	r2, r3, #8
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008a6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d107      	bne.n	8008a82 <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a7a:	f043 0304 	orr.w	r3, r3, #4
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008a8e:	b004      	add	sp, #16
 8008a90:	4770      	bx	lr
 8008a92:	bf00      	nop
 8008a94:	00800100 	.word	0x00800100
 8008a98:	803c3800 	.word	0x803c3800

08008a9c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	019b      	lsls	r3, r3, #6
 8008aae:	f043 0220 	orr.w	r2, r3, #32
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	4a09      	ldr	r2, [pc, #36]	; (8008ae4 <USB_FlushTxFifo+0x48>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d901      	bls.n	8008ac8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e006      	b.n	8008ad6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	691b      	ldr	r3, [r3, #16]
 8008acc:	f003 0320 	and.w	r3, r3, #32
 8008ad0:	2b20      	cmp	r3, #32
 8008ad2:	d0f0      	beq.n	8008ab6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008ad4:	2300      	movs	r3, #0
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3714      	adds	r7, #20
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
 8008ae2:	bf00      	nop
 8008ae4:	00030d40 	.word	0x00030d40

08008ae8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008ae8:	b480      	push	{r7}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008af0:	2300      	movs	r3, #0
 8008af2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2210      	movs	r2, #16
 8008af8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	3301      	adds	r3, #1
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	4a09      	ldr	r2, [pc, #36]	; (8008b28 <USB_FlushRxFifo+0x40>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d901      	bls.n	8008b0c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008b08:	2303      	movs	r3, #3
 8008b0a:	e006      	b.n	8008b1a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	691b      	ldr	r3, [r3, #16]
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b10      	cmp	r3, #16
 8008b16:	d0f0      	beq.n	8008afa <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008b18:	2300      	movs	r3, #0
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3714      	adds	r7, #20
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b24:	4770      	bx	lr
 8008b26:	bf00      	nop
 8008b28:	00030d40 	.word	0x00030d40

08008b2c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b085      	sub	sp, #20
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b42:	681a      	ldr	r2, [r3, #0]
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	68f9      	ldr	r1, [r7, #12]
 8008b48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008b50:	2300      	movs	r3, #0
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3714      	adds	r7, #20
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	68fa      	ldr	r2, [r7, #12]
 8008b74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b78:	f043 0302 	orr.w	r3, r3, #2
 8008b7c:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008b7e:	2003      	movs	r0, #3
 8008b80:	f7f8 fa74 	bl	800106c <HAL_Delay>

  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
	...

08008b90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b90:	b480      	push	{r7}
 8008b92:	b085      	sub	sp, #20
 8008b94:	af00      	add	r7, sp, #0
 8008b96:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	60fb      	str	r3, [r7, #12]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4a13      	ldr	r2, [pc, #76]	; (8008bf4 <USB_CoreReset+0x64>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d901      	bls.n	8008bae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008baa:	2303      	movs	r3, #3
 8008bac:	e01b      	b.n	8008be6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	daf2      	bge.n	8008b9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	f043 0201 	orr.w	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	3301      	adds	r3, #1
 8008bca:	60fb      	str	r3, [r7, #12]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4a09      	ldr	r2, [pc, #36]	; (8008bf4 <USB_CoreReset+0x64>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d901      	bls.n	8008bd8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008bd4:	2303      	movs	r3, #3
 8008bd6:	e006      	b.n	8008be6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	f003 0301 	and.w	r3, r3, #1
 8008be0:	2b01      	cmp	r3, #1
 8008be2:	d0f0      	beq.n	8008bc6 <USB_CoreReset+0x36>

  return HAL_OK;
 8008be4:	2300      	movs	r3, #0
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr
 8008bf2:	bf00      	nop
 8008bf4:	00030d40 	.word	0x00030d40

08008bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008bf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008bfc:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 8008c00:	af04      	add	r7, sp, #16
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c02:	f7f8 f9c1 	bl	8000f88 <HAL_Init>
  // todo transfer init part of code here

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c06:	f001 f9b5 	bl	8009f74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c0a:	f002 f9d9 	bl	800afc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8008c0e:	f002 f991 	bl	800af34 <MX_DMA_Init>
  MX_TIM9_Init();
 8008c12:	f002 f81f 	bl	800ac54 <MX_TIM9_Init>
  MX_SPI2_Init();
 8008c16:	f001 fd51 	bl	800a6bc <MX_SPI2_Init>
  MX_ADC1_Init();
 8008c1a:	f001 fa2f 	bl	800a07c <MX_ADC1_Init>
  MX_ADC2_Init();
 8008c1e:	f001 fb11 	bl	800a244 <MX_ADC2_Init>
  MX_CAN1_Init();
 8008c22:	f001 fc93 	bl	800a54c <MX_CAN1_Init>
  MX_I2C1_Init();
 8008c26:	f001 fcc7 	bl	800a5b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8008c2a:	f001 fcf3 	bl	800a614 <MX_I2C2_Init>
  MX_TIM1_Init();
 8008c2e:	f001 fd7d 	bl	800a72c <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8008c32:	f002 f927 	bl	800ae84 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8008c36:	f001 ffb5 	bl	800aba4 <MX_TIM8_Init>
  MX_TIM13_Init();
 8008c3a:	f002 f8dd 	bl	800adf8 <MX_TIM13_Init>
  MX_TIM12_Init();
 8008c3e:	f002 f87b 	bl	800ad38 <MX_TIM12_Init>
  MX_TIM2_Init();
 8008c42:	f001 fe45 	bl	800a8d0 <MX_TIM2_Init>
  MX_ADC3_Init();
 8008c46:	f001 fbbf 	bl	800a3c8 <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 8008c4a:	f002 f945 	bl	800aed8 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8008c4e:	f001 fd0f 	bl	800a670 <MX_RTC_Init>
  MX_TIM6_Init();
 8008c52:	f001 ff71 	bl	800ab38 <MX_TIM6_Init>
  MX_TIM3_Init();
 8008c56:	f001 fead 	bl	800a9b4 <MX_TIM3_Init>
  MX_TIM5_Init();
 8008c5a:	f001 ff1f 	bl	800aa9c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  calc_lookup(lookup);
 8008c5e:	4866      	ldr	r0, [pc, #408]	; (8008df8 <main+0x200>)
 8008c60:	f002 fcca 	bl	800b5f8 <calc_lookup>
  calc_sin_lookup(sin_lookup);
 8008c64:	4865      	ldr	r0, [pc, #404]	; (8008dfc <main+0x204>)
 8008c66:	f002 fd4d 	bl	800b704 <calc_sin_lookup>
  calc_cos_lookup(cos_lookup);
 8008c6a:	4865      	ldr	r0, [pc, #404]	; (8008e00 <main+0x208>)
 8008c6c:	f002 fd7c 	bl	800b768 <calc_cos_lookup>

	char buf[BUF_LEN]; //todo switch to char
	char buf_add[BUF_ADD_LEN];
	//uint8_t plot[300];

	char ch='.';
 8008c70:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8008c74:	222e      	movs	r2, #46	; 0x2e
 8008c76:	701a      	strb	r2, [r3, #0]
	int16_t accel16;
	uint8_t accel8l;
	uint8_t accel8h;

  // --- SET STATUS LEDS
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8008c78:	2100      	movs	r1, #0
 8008c7a:	4862      	ldr	r0, [pc, #392]	; (8008e04 <main+0x20c>)
 8008c7c:	f7fd fbda 	bl	8006434 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8008c80:	2104      	movs	r1, #4
 8008c82:	4860      	ldr	r0, [pc, #384]	; (8008e04 <main+0x20c>)
 8008c84:	f7fd fb62 	bl	800634c <HAL_TIM_OC_Start>

  HAL_TIM_OC_Start(&htim12, TIM_CHANNEL_1);
 8008c88:	2100      	movs	r1, #0
 8008c8a:	485f      	ldr	r0, [pc, #380]	; (8008e08 <main+0x210>)
 8008c8c:	f7fd fb5e 	bl	800634c <HAL_TIM_OC_Start>
  HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8008c90:	2100      	movs	r1, #0
 8008c92:	485e      	ldr	r0, [pc, #376]	; (8008e0c <main+0x214>)
 8008c94:	f7fd fb5a 	bl	800634c <HAL_TIM_OC_Start>

  // --- ENABLE DRV
  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1); //todo maybe redundant since its also done below
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008c9e:	485c      	ldr	r0, [pc, #368]	; (8008e10 <main+0x218>)
 8008ca0:	f7fa fd14 	bl	80036cc <HAL_GPIO_WritePin>


  SCB->CPACR |= 0xf00000;
 8008ca4:	4b5b      	ldr	r3, [pc, #364]	; (8008e14 <main+0x21c>)
 8008ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008caa:	4a5a      	ldr	r2, [pc, #360]	; (8008e14 <main+0x21c>)
 8008cac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008cb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  int i=0;
 8008cb4:	2300      	movs	r3, #0
 8008cb6:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
	uint32_t i_fast = 0;
 8008cba:	2300      	movs	r3, #0
 8008cbc:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
	uint32_t i_slow = 0;
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	uint32_t fast2slow = 100;
 8008cc6:	2364      	movs	r3, #100	; 0x64
 8008cc8:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8

	int blink_duration = 100;
 8008ccc:	2364      	movs	r3, #100	; 0x64
 8008cce:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
  //  HAL_Delay(2);


	// --- MOTOR DRIVER ----------------------------------------------------
	//EN_GATE
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008cd2:	2100      	movs	r1, #0
 8008cd4:	4850      	ldr	r0, [pc, #320]	; (8008e18 <main+0x220>)
 8008cd6:	f7fd fbad 	bl	8006434 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8008cda:	2100      	movs	r1, #0
 8008cdc:	484e      	ldr	r0, [pc, #312]	; (8008e18 <main+0x220>)
 8008cde:	f7fe fd3e 	bl	800775e <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008ce2:	2104      	movs	r1, #4
 8008ce4:	484c      	ldr	r0, [pc, #304]	; (8008e18 <main+0x220>)
 8008ce6:	f7fd fba5 	bl	8006434 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8008cea:	2104      	movs	r1, #4
 8008cec:	484a      	ldr	r0, [pc, #296]	; (8008e18 <main+0x220>)
 8008cee:	f7fe fd36 	bl	800775e <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008cf2:	2108      	movs	r1, #8
 8008cf4:	4848      	ldr	r0, [pc, #288]	; (8008e18 <main+0x220>)
 8008cf6:	f7fd fb9d 	bl	8006434 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8008cfa:	2108      	movs	r1, #8
 8008cfc:	4846      	ldr	r0, [pc, #280]	; (8008e18 <main+0x220>)
 8008cfe:	f7fe fd2e 	bl	800775e <HAL_TIMEx_PWMN_Start>
	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 8008d02:	210c      	movs	r1, #12
 8008d04:	4844      	ldr	r0, [pc, #272]	; (8008e18 <main+0x220>)
 8008d06:	f7fd fb21 	bl	800634c <HAL_TIM_OC_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8008d0a:	210c      	movs	r1, #12
 8008d0c:	4842      	ldr	r0, [pc, #264]	; (8008e18 <main+0x220>)
 8008d0e:	f7fd fc05 	bl	800651c <HAL_TIM_IC_Start_IT>

	playSound( 3, 100, 20);
 8008d12:	2214      	movs	r2, #20
 8008d14:	2164      	movs	r1, #100	; 0x64
 8008d16:	2003      	movs	r0, #3
 8008d18:	f002 fc34 	bl	800b584 <playSound>

	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008d22:	483b      	ldr	r0, [pc, #236]	; (8008e10 <main+0x218>)
 8008d24:	f7fa fcd2 	bl	80036cc <HAL_GPIO_WritePin>


	// --- used for heartbeat of microcontroller
	HAL_TIM_Base_Start_IT(&htim3);
 8008d28:	483c      	ldr	r0, [pc, #240]	; (8008e1c <main+0x224>)
 8008d2a:	f7fd fab6 	bl	800629a <HAL_TIM_Base_Start_IT>

	// --- 32bit timer used to measure time in10mus
	HAL_TIM_Base_Start(&htim5);
 8008d2e:	483c      	ldr	r0, [pc, #240]	; (8008e20 <main+0x228>)
 8008d30:	f7fd fa8f 	bl	8006252 <HAL_TIM_Base_Start>
	// --- I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 8008d34:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008d38:	226b      	movs	r2, #107	; 0x6b
 8008d3a:	701a      	strb	r2, [r3, #0]
	buf[1] = 0x00; //switch on
 8008d3c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008d40:	2200      	movs	r2, #0
 8008d42:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8008d44:	23d0      	movs	r3, #208	; 0xd0
 8008d46:	b299      	uxth	r1, r3
 8008d48:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8008d4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d50:	9300      	str	r3, [sp, #0]
 8008d52:	2302      	movs	r3, #2
 8008d54:	4833      	ldr	r0, [pc, #204]	; (8008e24 <main+0x22c>)
 8008d56:	f7fa fe3d 	bl	80039d4 <HAL_I2C_Master_Transmit>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f887 32c3 	strb.w	r3, [r7, #707]	; 0x2c3
	if (ret != HAL_OK){
 8008d60:	f897 32c3 	ldrb.w	r3, [r7, #707]	; 0x2c3
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d008      	beq.n	8008d7a <main+0x182>
		strcpy((char*)buf, "Error IMU T\r\n");
 8008d68:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008d6c:	4a2e      	ldr	r2, [pc, #184]	; (8008e28 <main+0x230>)
 8008d6e:	461c      	mov	r4, r3
 8008d70:	4613      	mov	r3, r2
 8008d72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008d74:	c407      	stmia	r4!, {r0, r1, r2}
 8008d76:	8023      	strh	r3, [r4, #0]
 8008d78:	e003      	b.n	8008d82 <main+0x18a>
	} else {
		buf[0] = 0x00;
 8008d7a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008d7e:	2200      	movs	r2, #0
 8008d80:	701a      	strb	r2, [r3, #0]
	}

	buf[0] = 0x3B;
 8008d82:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008d86:	223b      	movs	r2, #59	; 0x3b
 8008d88:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8008d8a:	23d0      	movs	r3, #208	; 0xd0
 8008d8c:	b299      	uxth	r1, r3
 8008d8e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8008d92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d96:	9300      	str	r3, [sp, #0]
 8008d98:	2301      	movs	r3, #1
 8008d9a:	4822      	ldr	r0, [pc, #136]	; (8008e24 <main+0x22c>)
 8008d9c:	f7fa fe1a 	bl	80039d4 <HAL_I2C_Master_Transmit>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 32c3 	strb.w	r3, [r7, #707]	; 0x2c3
	if (ret != HAL_OK){
 8008da6:	f897 32c3 	ldrb.w	r3, [r7, #707]	; 0x2c3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d008      	beq.n	8008dc0 <main+0x1c8>
		strcpy((char*)buf, "Error IMU T\r\n");
 8008dae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008db2:	4a1d      	ldr	r2, [pc, #116]	; (8008e28 <main+0x230>)
 8008db4:	461c      	mov	r4, r3
 8008db6:	4613      	mov	r3, r2
 8008db8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008dba:	c407      	stmia	r4!, {r0, r1, r2}
 8008dbc:	8023      	strh	r3, [r4, #0]
 8008dbe:	e044      	b.n	8008e4a <main+0x252>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8008dc0:	23d0      	movs	r3, #208	; 0xd0
 8008dc2:	b299      	uxth	r1, r3
 8008dc4:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8008dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008dcc:	9300      	str	r3, [sp, #0]
 8008dce:	2301      	movs	r3, #1
 8008dd0:	4814      	ldr	r0, [pc, #80]	; (8008e24 <main+0x22c>)
 8008dd2:	f7fa fefd 	bl	8003bd0 <HAL_I2C_Master_Receive>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	f887 32c3 	strb.w	r3, [r7, #707]	; 0x2c3
		if (ret != HAL_OK){
 8008ddc:	f897 32c3 	ldrb.w	r3, [r7, #707]	; 0x2c3
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d025      	beq.n	8008e30 <main+0x238>
			strcpy((char*)buf, "Error IMU R\r\n");
 8008de4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008de8:	4a10      	ldr	r2, [pc, #64]	; (8008e2c <main+0x234>)
 8008dea:	461c      	mov	r4, r3
 8008dec:	4613      	mov	r3, r2
 8008dee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008df0:	c407      	stmia	r4!, {r0, r1, r2}
 8008df2:	8023      	strh	r3, [r4, #0]
 8008df4:	e029      	b.n	8008e4a <main+0x252>
 8008df6:	bf00      	nop
 8008df8:	20000370 	.word	0x20000370
 8008dfc:	20001b70 	.word	0x20001b70
 8008e00:	20000fa8 	.word	0x20000fa8
 8008e04:	20001978 	.word	0x20001978
 8008e08:	20001b18 	.word	0x20001b18
 8008e0c:	20001a30 	.word	0x20001a30
 8008e10:	40021000 	.word	0x40021000
 8008e14:	e000ed00 	.word	0xe000ed00
 8008e18:	20000f2c 	.word	0x20000f2c
 8008e1c:	20000d40 	.word	0x20000d40
 8008e20:	20000cfc 	.word	0x20000cfc
 8008e24:	20000bdc 	.word	0x20000bdc
 8008e28:	08013110 	.word	0x08013110
 8008e2c:	08013120 	.word	0x08013120
		} else {
			accel8l = (int8_t)buf[0];
 8008e30:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8008e34:	781b      	ldrb	r3, [r3, #0]
 8008e36:	f887 32c2 	strb.w	r3, [r7, #706]	; 0x2c2
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8008e3a:	f897 22c2 	ldrb.w	r2, [r7, #706]	; 0x2c2
 8008e3e:	f107 030c 	add.w	r3, r7, #12
 8008e42:	49d4      	ldr	r1, [pc, #848]	; (8009194 <main+0x59c>)
 8008e44:	4618      	mov	r0, r3
 8008e46:	f005 f9d5 	bl	800e1f4 <siprintf>
  //					}
  //
  //				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 8008e4a:	4ad3      	ldr	r2, [pc, #844]	; (8009198 <main+0x5a0>)
 8008e4c:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008e50:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 8008e52:	4ad1      	ldr	r2, [pc, #836]	; (8009198 <main+0x5a0>)
 8008e54:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8008e58:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8008e5a:	4bd0      	ldr	r3, [pc, #832]	; (800919c <main+0x5a4>)
 8008e5c:	2210      	movs	r2, #16
 8008e5e:	619a      	str	r2, [r3, #24]




	playSound( 2, 100, 40);
 8008e60:	2228      	movs	r2, #40	; 0x28
 8008e62:	2164      	movs	r1, #100	; 0x64
 8008e64:	2002      	movs	r0, #2
 8008e66:	f002 fb8d 	bl	800b584 <playSound>
	playSound( 1, 100, 80);
 8008e6a:	2250      	movs	r2, #80	; 0x50
 8008e6c:	2164      	movs	r1, #100	; 0x64
 8008e6e:	2001      	movs	r0, #1
 8008e70:	f002 fb88 	bl	800b584 <playSound>
	HAL_Delay(100); // So the system stops vibrating
 8008e74:	2064      	movs	r0, #100	; 0x64
 8008e76:	f7f8 f8f9 	bl	800106c <HAL_Delay>




	// --- ROTATION SENSOR INIT ----------------------------------------------------
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 8008e7a:	213c      	movs	r1, #60	; 0x3c
 8008e7c:	48c8      	ldr	r0, [pc, #800]	; (80091a0 <main+0x5a8>)
 8008e7e:	f7fd fc47 	bl	8006710 <HAL_TIM_Encoder_Start_IT>
	uint8_t spi_value_8[2];

	//todo UGLY BUG - Ugly FIX: now i just send the init below twice because somehow the communication of the first transaction does not seem to work-- i sse on the MISO signal the lines just pulls up to 0.5fV instead of 3V but it works fine for the next transmission so it gets initialized correctly if i sent it twice

	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	2200      	movs	r2, #0
 8008e88:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;//00000000 00011000
 8008e8a:	f107 0308 	add.w	r3, r7, #8
 8008e8e:	2218      	movs	r2, #24
 8008e90:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 8008e92:	1d3b      	adds	r3, r7, #4
 8008e94:	2280      	movs	r2, #128	; 0x80
 8008e96:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;  //10000000 10000000
 8008e98:	1d3b      	adds	r3, r7, #4
 8008e9a:	2280      	movs	r2, #128	; 0x80
 8008e9c:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008e9e:	f002 fb59 	bl	800b554 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ea8:	48be      	ldr	r0, [pc, #760]	; (80091a4 <main+0x5ac>)
 8008eaa:	f7fa fc0f 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008eae:	f107 0108 	add.w	r1, r7, #8
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	2201      	movs	r2, #1
 8008eb6:	48bc      	ldr	r0, [pc, #752]	; (80091a8 <main+0x5b0>)
 8008eb8:	f7fc fb91 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008ebc:	2201      	movs	r2, #1
 8008ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ec2:	48b8      	ldr	r0, [pc, #736]	; (80091a4 <main+0x5ac>)
 8008ec4:	f7fa fc02 	bl	80036cc <HAL_GPIO_WritePin>
	delay_SPI();
 8008ec8:	f002 fb44 	bl	800b554 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008ecc:	2200      	movs	r2, #0
 8008ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ed2:	48b4      	ldr	r0, [pc, #720]	; (80091a4 <main+0x5ac>)
 8008ed4:	f7fa fbfa 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008ed8:	1d39      	adds	r1, r7, #4
 8008eda:	2301      	movs	r3, #1
 8008edc:	2201      	movs	r2, #1
 8008ede:	48b2      	ldr	r0, [pc, #712]	; (80091a8 <main+0x5b0>)
 8008ee0:	f7fc fb7d 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008eea:	48ae      	ldr	r0, [pc, #696]	; (80091a4 <main+0x5ac>)
 8008eec:	f7fa fbee 	bl	80036cc <HAL_GPIO_WritePin>

	// --- set ABI and enable PWM
		spi_address_8[1]= 0x00;//
 8008ef0:	f107 0308 	add.w	r3, r7, #8
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	705a      	strb	r2, [r3, #1]
		spi_address_8[0]= 0x18;//00000000 00011000
 8008ef8:	f107 0308 	add.w	r3, r7, #8
 8008efc:	2218      	movs	r2, #24
 8008efe:	701a      	strb	r2, [r3, #0]
		spi_value_8[1]= 0x80;
 8008f00:	1d3b      	adds	r3, r7, #4
 8008f02:	2280      	movs	r2, #128	; 0x80
 8008f04:	705a      	strb	r2, [r3, #1]
		spi_value_8[0]= 0x80;  //10000000 10000000
 8008f06:	1d3b      	adds	r3, r7, #4
 8008f08:	2280      	movs	r2, #128	; 0x80
 8008f0a:	701a      	strb	r2, [r3, #0]
		delay_SPI();
 8008f0c:	f002 fb22 	bl	800b554 <delay_SPI>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008f10:	2200      	movs	r2, #0
 8008f12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f16:	48a3      	ldr	r0, [pc, #652]	; (80091a4 <main+0x5ac>)
 8008f18:	f7fa fbd8 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008f1c:	f107 0108 	add.w	r1, r7, #8
 8008f20:	2301      	movs	r3, #1
 8008f22:	2201      	movs	r2, #1
 8008f24:	48a0      	ldr	r0, [pc, #640]	; (80091a8 <main+0x5b0>)
 8008f26:	f7fc fb5a 	bl	80055de <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f30:	489c      	ldr	r0, [pc, #624]	; (80091a4 <main+0x5ac>)
 8008f32:	f7fa fbcb 	bl	80036cc <HAL_GPIO_WritePin>
		delay_SPI();
 8008f36:	f002 fb0d 	bl	800b554 <delay_SPI>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f40:	4898      	ldr	r0, [pc, #608]	; (80091a4 <main+0x5ac>)
 8008f42:	f7fa fbc3 	bl	80036cc <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008f46:	1d39      	adds	r1, r7, #4
 8008f48:	2301      	movs	r3, #1
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	4896      	ldr	r0, [pc, #600]	; (80091a8 <main+0x5b0>)
 8008f4e:	f7fc fb46 	bl	80055de <HAL_SPI_Transmit>
		HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008f52:	2201      	movs	r2, #1
 8008f54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f58:	4892      	ldr	r0, [pc, #584]	; (80091a4 <main+0x5ac>)
 8008f5a:	f7fa fbb7 	bl	80036cc <HAL_GPIO_WritePin>



	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 8008f5e:	f107 0308 	add.w	r3, r7, #8
 8008f62:	2200      	movs	r2, #0
 8008f64:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x18;//00000000 00011000
 8008f66:	f107 0308 	add.w	r3, r7, #8
 8008f6a:	2218      	movs	r2, #24
 8008f6c:	701a      	strb	r2, [r3, #0]
	spi_value_8[1]= 0x80;
 8008f6e:	1d3b      	adds	r3, r7, #4
 8008f70:	2280      	movs	r2, #128	; 0x80
 8008f72:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x80;  //10000000 10000000
 8008f74:	1d3b      	adds	r3, r7, #4
 8008f76:	2280      	movs	r2, #128	; 0x80
 8008f78:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008f7a:	f002 faeb 	bl	800b554 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f84:	4887      	ldr	r0, [pc, #540]	; (80091a4 <main+0x5ac>)
 8008f86:	f7fa fba1 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008f8a:	f107 0108 	add.w	r1, r7, #8
 8008f8e:	2301      	movs	r3, #1
 8008f90:	2201      	movs	r2, #1
 8008f92:	4885      	ldr	r0, [pc, #532]	; (80091a8 <main+0x5b0>)
 8008f94:	f7fc fb23 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f9e:	4881      	ldr	r0, [pc, #516]	; (80091a4 <main+0x5ac>)
 8008fa0:	f7fa fb94 	bl	80036cc <HAL_GPIO_WritePin>
	delay_SPI();
 8008fa4:	f002 fad6 	bl	800b554 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008fa8:	2200      	movs	r2, #0
 8008faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fae:	487d      	ldr	r0, [pc, #500]	; (80091a4 <main+0x5ac>)
 8008fb0:	f7fa fb8c 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008fb4:	1d39      	adds	r1, r7, #4
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	2201      	movs	r2, #1
 8008fba:	487b      	ldr	r0, [pc, #492]	; (80091a8 <main+0x5b0>)
 8008fbc:	f7fc fb0f 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fc6:	4877      	ldr	r0, [pc, #476]	; (80091a4 <main+0x5ac>)
 8008fc8:	f7fa fb80 	bl	80036cc <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses //todo this seems not to work as I get 4000 steps
	spi_address_8[1]= 0x80;
 8008fcc:	f107 0308 	add.w	r3, r7, #8
 8008fd0:	2280      	movs	r2, #128	; 0x80
 8008fd2:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0x19; //00001000 00011001
 8008fd4:	f107 0308 	add.w	r3, r7, #8
 8008fd8:	2219      	movs	r2, #25
 8008fda:	701a      	strb	r2, [r3, #0]
	//address = AS_ADDR_SETTINGS2 | AS_WRITE ; // 0x8019
	//value = 0x0020 | AS_ODD; // 0x8020
	//value = 0x00E0 | AS_ODD;
	spi_value_8[1]= 0x80;
 8008fdc:	1d3b      	adds	r3, r7, #4
 8008fde:	2280      	movs	r2, #128	; 0x80
 8008fe0:	705a      	strb	r2, [r3, #1]
	spi_value_8[0]= 0x20;  // 10000000 00100000
 8008fe2:	1d3b      	adds	r3, r7, #4
 8008fe4:	2220      	movs	r2, #32
 8008fe6:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8008fe8:	f002 fab4 	bl	800b554 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008fec:	2200      	movs	r2, #0
 8008fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ff2:	486c      	ldr	r0, [pc, #432]	; (80091a4 <main+0x5ac>)
 8008ff4:	f7fa fb6a 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008ff8:	f107 0108 	add.w	r1, r7, #8
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	2201      	movs	r2, #1
 8009000:	4869      	ldr	r0, [pc, #420]	; (80091a8 <main+0x5b0>)
 8009002:	f7fc faec 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009006:	2201      	movs	r2, #1
 8009008:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800900c:	4865      	ldr	r0, [pc, #404]	; (80091a4 <main+0x5ac>)
 800900e:	f7fa fb5d 	bl	80036cc <HAL_GPIO_WritePin>
	delay_SPI();
 8009012:	f002 fa9f 	bl	800b554 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009016:	2200      	movs	r2, #0
 8009018:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800901c:	4861      	ldr	r0, [pc, #388]	; (80091a4 <main+0x5ac>)
 800901e:	f7fa fb55 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009022:	1d39      	adds	r1, r7, #4
 8009024:	2301      	movs	r3, #1
 8009026:	2201      	movs	r2, #1
 8009028:	485f      	ldr	r0, [pc, #380]	; (80091a8 <main+0x5b0>)
 800902a:	f7fc fad8 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800902e:	2201      	movs	r2, #1
 8009030:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009034:	485b      	ldr	r0, [pc, #364]	; (80091a4 <main+0x5ac>)
 8009036:	f7fa fb49 	bl	80036cc <HAL_GPIO_WritePin>

	// --- read angle
	HAL_Delay(1);
 800903a:	2001      	movs	r0, #1
 800903c:	f7f8 f816 	bl	800106c <HAL_Delay>

	uint8_t angle8[2];
	uint16_t angle;

	//for (int i=0; i<4; i++)
	spi_address_8[1]= 0x7F;
 8009040:	f107 0308 	add.w	r3, r7, #8
 8009044:	227f      	movs	r2, #127	; 0x7f
 8009046:	705a      	strb	r2, [r3, #1]
	spi_address_8[0]= 0xFE;
 8009048:	f107 0308 	add.w	r3, r7, #8
 800904c:	22fe      	movs	r2, #254	; 0xfe
 800904e:	701a      	strb	r2, [r3, #0]
	delay_SPI();
 8009050:	f002 fa80 	bl	800b554 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8009054:	2200      	movs	r2, #0
 8009056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800905a:	4852      	ldr	r0, [pc, #328]	; (80091a4 <main+0x5ac>)
 800905c:	f7fa fb36 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009060:	f107 0108 	add.w	r1, r7, #8
 8009064:	2301      	movs	r3, #1
 8009066:	2201      	movs	r2, #1
 8009068:	484f      	ldr	r0, [pc, #316]	; (80091a8 <main+0x5b0>)
 800906a:	f7fc fab8 	bl	80055de <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 800906e:	2201      	movs	r2, #1
 8009070:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009074:	484b      	ldr	r0, [pc, #300]	; (80091a4 <main+0x5ac>)
 8009076:	f7fa fb29 	bl	80036cc <HAL_GPIO_WritePin>
	delay_SPI();
 800907a:	f002 fa6b 	bl	800b554 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800907e:	2200      	movs	r2, #0
 8009080:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009084:	4847      	ldr	r0, [pc, #284]	; (80091a4 <main+0x5ac>)
 8009086:	f7fa fb21 	bl	80036cc <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 800908a:	4639      	mov	r1, r7
 800908c:	2301      	movs	r3, #1
 800908e:	2201      	movs	r2, #1
 8009090:	4845      	ldr	r0, [pc, #276]	; (80091a8 <main+0x5b0>)
 8009092:	f7fc fbd8 	bl	8005846 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009096:	2201      	movs	r2, #1
 8009098:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800909c:	4841      	ldr	r0, [pc, #260]	; (80091a4 <main+0x5ac>)
 800909e:	f7fa fb15 	bl	80036cc <HAL_GPIO_WritePin>

	angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 80090a2:	463b      	mov	r3, r7
 80090a4:	781b      	ldrb	r3, [r3, #0]
 80090a6:	b21a      	sxth	r2, r3
 80090a8:	463b      	mov	r3, r7
 80090aa:	785b      	ldrb	r3, [r3, #1]
 80090ac:	021b      	lsls	r3, r3, #8
 80090ae:	b21b      	sxth	r3, r3
 80090b0:	4313      	orrs	r3, r2
 80090b2:	b21b      	sxth	r3, r3
 80090b4:	f8a7 32c0 	strh.w	r3, [r7, #704]	; 0x2c0
	angle &= AS_DATA_MASK;
 80090b8:	f8b7 32c0 	ldrh.w	r3, [r7, #704]	; 0x2c0
 80090bc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80090c0:	f8a7 32c0 	strh.w	r3, [r7, #704]	; 0x2c0


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	//angle &= AS_DATA_MASK;
	EncVal = (uint32_t) ((float)angle /16384.0f * ENC_STEPS);
 80090c4:	f8b7 32c0 	ldrh.w	r3, [r7, #704]	; 0x2c0
 80090c8:	ee07 3a90 	vmov	s15, r3
 80090cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80090d0:	eddf 6a36 	vldr	s13, [pc, #216]	; 80091ac <main+0x5b4>
 80090d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80090d8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80091b0 <main+0x5b8>
 80090dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80090e4:	ee17 2a90 	vmov	r2, s15
 80090e8:	4b32      	ldr	r3, [pc, #200]	; (80091b4 <main+0x5bc>)
 80090ea:	601a      	str	r2, [r3, #0]
	last_EncVal = EncVal;
 80090ec:	4b31      	ldr	r3, [pc, #196]	; (80091b4 <main+0x5bc>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a31      	ldr	r2, [pc, #196]	; (80091b8 <main+0x5c0>)
 80090f2:	6013      	str	r3, [r2, #0]
	last_EncVal_v = EncVal;
 80090f4:	4b2f      	ldr	r3, [pc, #188]	; (80091b4 <main+0x5bc>)
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	4a30      	ldr	r2, [pc, #192]	; (80091bc <main+0x5c4>)
 80090fa:	6013      	str	r3, [r2, #0]
	TIM8->CNT = EncVal;
 80090fc:	4b2d      	ldr	r3, [pc, #180]	; (80091b4 <main+0x5bc>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b2f      	ldr	r3, [pc, #188]	; (80091c0 <main+0x5c8>)
 8009102:	625a      	str	r2, [r3, #36]	; 0x24
//	EncVal = TIM8->CNT;//takes 200ns
//	TIM1->CCR1 = 0;
//	phase = (float) EncVal * 0.02199f ;

	// --- UART DMA
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 8009104:	4a2f      	ldr	r2, [pc, #188]	; (80091c4 <main+0x5cc>)
 8009106:	2100      	movs	r1, #0
 8009108:	482f      	ldr	r0, [pc, #188]	; (80091c8 <main+0x5d0>)
 800910a:	f7fa f813 	bl	8003134 <HAL_DMA_RegisterCallback>


	//HAL_TIM_RegisterCallback(&htim8, HAL_TIM_IC_CAPTURE_CB_ID, &EncoderStepCallback );

	// --- ADC DMA
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, 30); // this is the only one working // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 800910e:	221e      	movs	r2, #30
 8009110:	492e      	ldr	r1, [pc, #184]	; (80091cc <main+0x5d4>)
 8009112:	482f      	ldr	r0, [pc, #188]	; (80091d0 <main+0x5d8>)
 8009114:	f7f8 f950 	bl	80013b8 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, 30); // TODO enabling this only leads to no change all values stay zero
 8009118:	221e      	movs	r2, #30
 800911a:	492e      	ldr	r1, [pc, #184]	; (80091d4 <main+0x5dc>)
 800911c:	482e      	ldr	r0, [pc, #184]	; (80091d8 <main+0x5e0>)
 800911e:	f7f8 f94b 	bl	80013b8 <HAL_ADC_Start_DMA>
 	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, 30); // TODO enabling this breaks transmission entirely
 8009122:	221e      	movs	r2, #30
 8009124:	492d      	ldr	r1, [pc, #180]	; (80091dc <main+0x5e4>)
 8009126:	482e      	ldr	r0, [pc, #184]	; (80091e0 <main+0x5e8>)
 8009128:	f7f8 f946 	bl	80013b8 <HAL_ADC_Start_DMA>


	HAL_ADCEx_InjectedStart (&hadc1);
 800912c:	4828      	ldr	r0, [pc, #160]	; (80091d0 <main+0x5d8>)
 800912e:	f7f8 fce9 	bl	8001b04 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 8009132:	4829      	ldr	r0, [pc, #164]	; (80091d8 <main+0x5e0>)
 8009134:	f7f8 fce6 	bl	8001b04 <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3); // again this seems to break  the full loop
 8009138:	4829      	ldr	r0, [pc, #164]	; (80091e0 <main+0x5e8>)
 800913a:	f7f8 fce3 	bl	8001b04 <HAL_ADCEx_InjectedStart>

//
//


	sprintf((char*)buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\nangle: %d EncVal %d \r\nangle: %u EncVal %u \r\n\r\n",
 800913e:	f8b7 12c0 	ldrh.w	r1, [r7, #704]	; 0x2c0
 8009142:	4b1c      	ldr	r3, [pc, #112]	; (80091b4 <main+0x5bc>)
 8009144:	681c      	ldr	r4, [r3, #0]
 8009146:	f8b7 32c0 	ldrh.w	r3, [r7, #704]	; 0x2c0
 800914a:	4a1a      	ldr	r2, [pc, #104]	; (80091b4 <main+0x5bc>)
 800914c:	6812      	ldr	r2, [r2, #0]
 800914e:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 8009152:	9201      	str	r2, [sp, #4]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	4623      	mov	r3, r4
 8009158:	460a      	mov	r2, r1
 800915a:	4922      	ldr	r1, [pc, #136]	; (80091e4 <main+0x5ec>)
 800915c:	f005 f84a 	bl	800e1f4 <siprintf>
			angle, EncVal ,
			angle, EncVal );
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8009160:	4b21      	ldr	r3, [pc, #132]	; (80091e8 <main+0x5f0>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	695a      	ldr	r2, [r3, #20]
 8009166:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <main+0x5f0>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800916e:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8009170:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8009174:	4b1c      	ldr	r3, [pc, #112]	; (80091e8 <main+0x5f0>)
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	3304      	adds	r3, #4
 800917a:	461d      	mov	r5, r3
 800917c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009180:	4618      	mov	r0, r3
 8009182:	f7f7 f825 	bl	80001d0 <strlen>
 8009186:	4603      	mov	r3, r0
 8009188:	462a      	mov	r2, r5
 800918a:	4621      	mov	r1, r4
 800918c:	480e      	ldr	r0, [pc, #56]	; (80091c8 <main+0x5d0>)
 800918e:	f7f9 fdcd 	bl	8002d2c <HAL_DMA_Start_IT>
 8009192:	e02b      	b.n	80091ec <main+0x5f4>
 8009194:	08013130 	.word	0x08013130
 8009198:	40014000 	.word	0x40014000
 800919c:	40021000 	.word	0x40021000
 80091a0:	200006b8 	.word	0x200006b8
 80091a4:	40020c00 	.word	0x40020c00
 80091a8:	20000318 	.word	0x20000318
 80091ac:	46800000 	.word	0x46800000
 80091b0:	44fa0000 	.word	0x44fa0000
 80091b4:	20000e68 	.word	0x20000e68
 80091b8:	20000c30 	.word	0x20000c30
 80091bc:	20000d3c 	.word	0x20000d3c
 80091c0:	40010400 	.word	0x40010400
 80091c4:	0800b7cd 	.word	0x0800b7cd
 80091c8:	20000c9c 	.word	0x20000c9c
 80091cc:	20000d84 	.word	0x20000d84
 80091d0:	20000d98 	.word	0x20000d98
 80091d4:	20001a20 	.word	0x20001a20
 80091d8:	20000738 	.word	0x20000738
 80091dc:	20000f98 	.word	0x20000f98
 80091e0:	20000de0 	.word	0x20000de0
 80091e4:	08013138 	.word	0x08013138
 80091e8:	200006f8 	.word	0x200006f8

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 80091ec:	200a      	movs	r0, #10
 80091ee:	f7f7 ff3d 	bl	800106c <HAL_Delay>
	//HAL_TIM_Base_Start(&htim3);


	//HAL_TIM_OC_Start(&htim3, TIM_CHANNEL_1);

	mode_of_operation = 1;
 80091f2:	4bc8      	ldr	r3, [pc, #800]	; (8009514 <main+0x91c>)
 80091f4:	2201      	movs	r2, #1
 80091f6:	701a      	strb	r2, [r3, #0]


	pHeader.DLC =6;
 80091f8:	4bc7      	ldr	r3, [pc, #796]	; (8009518 <main+0x920>)
 80091fa:	2206      	movs	r2, #6
 80091fc:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 80091fe:	4bc6      	ldr	r3, [pc, #792]	; (8009518 <main+0x920>)
 8009200:	2200      	movs	r2, #0
 8009202:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 8009204:	4bc4      	ldr	r3, [pc, #784]	; (8009518 <main+0x920>)
 8009206:	2200      	movs	r2, #0
 8009208:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x001;
 800920a:	4bc3      	ldr	r3, [pc, #780]	; (8009518 <main+0x920>)
 800920c:	2201      	movs	r2, #1
 800920e:	601a      	str	r2, [r3, #0]

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8009210:	4bc2      	ldr	r3, [pc, #776]	; (800951c <main+0x924>)
 8009212:	2200      	movs	r2, #0
 8009214:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = CAN_ID<<5;
 8009216:	4bc1      	ldr	r3, [pc, #772]	; (800951c <main+0x924>)
 8009218:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800921c:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 800921e:	4bbf      	ldr	r3, [pc, #764]	; (800951c <main+0x924>)
 8009220:	2200      	movs	r2, #0
 8009222:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 8009224:	4bbd      	ldr	r3, [pc, #756]	; (800951c <main+0x924>)
 8009226:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800922a:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0xFFFF;
 800922c:	4bbb      	ldr	r3, [pc, #748]	; (800951c <main+0x924>)
 800922e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009232:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8009234:	4bb9      	ldr	r3, [pc, #740]	; (800951c <main+0x924>)
 8009236:	2200      	movs	r2, #0
 8009238:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 800923a:	4bb8      	ldr	r3, [pc, #736]	; (800951c <main+0x924>)
 800923c:	2201      	movs	r2, #1
 800923e:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8009240:	49b6      	ldr	r1, [pc, #728]	; (800951c <main+0x924>)
 8009242:	48b7      	ldr	r0, [pc, #732]	; (8009520 <main+0x928>)
 8009244:	f7f9 f834 	bl	80022b0 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8009248:	48b5      	ldr	r0, [pc, #724]	; (8009520 <main+0x928>)
 800924a:	f7f9 f911 	bl	8002470 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 800924e:	2102      	movs	r1, #2
 8009250:	48b3      	ldr	r0, [pc, #716]	; (8009520 <main+0x928>)
 8009252:	f7f9 f951 	bl	80024f8 <HAL_CAN_ActivateNotification>

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 8009256:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 800925a:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 800925e:	fbb3 f2f2 	udiv	r2, r3, r2
 8009262:	f8d7 12c8 	ldr.w	r1, [r7, #712]	; 0x2c8
 8009266:	fb01 f202 	mul.w	r2, r1, r2
 800926a:	1a9b      	subs	r3, r3, r2
 800926c:	2b00      	cmp	r3, #0
 800926e:	f040 8648 	bne.w	8009f02 <main+0x130a>
	  	//a++;
	  	//HAL_CAN_AddTxMessage(&hcan1, &pHeader, &a, &TxMailbox);

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 8009272:	2110      	movs	r1, #16
 8009274:	48ab      	ldr	r0, [pc, #684]	; (8009524 <main+0x92c>)
 8009276:	f7fa fa42 	bl	80036fe <HAL_GPIO_TogglePin>

			// --- UART ----------------------------------------------------


			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 800927a:	f107 0333 	add.w	r3, r7, #51	; 0x33
 800927e:	2201      	movs	r2, #1
 8009280:	4619      	mov	r1, r3
 8009282:	48a9      	ldr	r0, [pc, #676]	; (8009528 <main+0x930>)
 8009284:	f7fe fbea 	bl	8007a5c <HAL_UART_Receive_IT>

			if (rx_character_buffered != '.'){
 8009288:	4ba8      	ldr	r3, [pc, #672]	; (800952c <main+0x934>)
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	2b2e      	cmp	r3, #46	; 0x2e
 800928e:	d007      	beq.n	80092a0 <main+0x6a8>
				ch = rx_character_buffered;
 8009290:	4ba6      	ldr	r3, [pc, #664]	; (800952c <main+0x934>)
 8009292:	781a      	ldrb	r2, [r3, #0]
 8009294:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009298:	701a      	strb	r2, [r3, #0]
				//rx_character_armed = 0;
				rx_character_buffered = '.';
 800929a:	4ba4      	ldr	r3, [pc, #656]	; (800952c <main+0x934>)
 800929c:	222e      	movs	r2, #46	; 0x2e
 800929e:	701a      	strb	r2, [r3, #0]
			}



			switch(ch){
 80092a0:	f107 0333 	add.w	r3, r7, #51	; 0x33
 80092a4:	781b      	ldrb	r3, [r3, #0]
 80092a6:	3b41      	subs	r3, #65	; 0x41
 80092a8:	2b39      	cmp	r3, #57	; 0x39
 80092aa:	f200 8237 	bhi.w	800971c <main+0xb24>
 80092ae:	a201      	add	r2, pc, #4	; (adr r2, 80092b4 <main+0x6bc>)
 80092b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092b4:	0800959d 	.word	0x0800959d
 80092b8:	08009641 	.word	0x08009641
 80092bc:	080095b3 	.word	0x080095b3
 80092c0:	0800958b 	.word	0x0800958b
 80092c4:	080095f1 	.word	0x080095f1
 80092c8:	080095dd 	.word	0x080095dd
 80092cc:	08009639 	.word	0x08009639
 80092d0:	0800971d 	.word	0x0800971d
 80092d4:	0800964f 	.word	0x0800964f
 80092d8:	0800971d 	.word	0x0800971d
 80092dc:	0800966b 	.word	0x0800966b
 80092e0:	08009649 	.word	0x08009649
 80092e4:	08009609 	.word	0x08009609
 80092e8:	0800961b 	.word	0x0800961b
 80092ec:	0800971d 	.word	0x0800971d
 80092f0:	08009507 	.word	0x08009507
 80092f4:	080095fd 	.word	0x080095fd
 80092f8:	080095cb 	.word	0x080095cb
 80092fc:	08009575 	.word	0x08009575
 8009300:	08009631 	.word	0x08009631
 8009304:	0800971d 	.word	0x0800971d
 8009308:	0800971d 	.word	0x0800971d
 800930c:	08009563 	.word	0x08009563
 8009310:	08009501 	.word	0x08009501
 8009314:	0800971d 	.word	0x0800971d
 8009318:	0800971d 	.word	0x0800971d
 800931c:	0800971d 	.word	0x0800971d
 8009320:	0800971d 	.word	0x0800971d
 8009324:	0800971d 	.word	0x0800971d
 8009328:	0800971d 	.word	0x0800971d
 800932c:	0800971d 	.word	0x0800971d
 8009330:	0800971d 	.word	0x0800971d
 8009334:	080093c5 	.word	0x080093c5
 8009338:	080096c5 	.word	0x080096c5
 800933c:	0800971d 	.word	0x0800971d
 8009340:	080093db 	.word	0x080093db
 8009344:	08009407 	.word	0x08009407
 8009348:	08009451 	.word	0x08009451
 800934c:	08009425 	.word	0x08009425
 8009350:	0800942d 	.word	0x0800942d
 8009354:	0800950d 	.word	0x0800950d
 8009358:	080094ab 	.word	0x080094ab
 800935c:	08009555 	.word	0x08009555
 8009360:	080094eb 	.word	0x080094eb
 8009364:	08009687 	.word	0x08009687
 8009368:	08009699 	.word	0x08009699
 800936c:	080094e1 	.word	0x080094e1
 8009370:	080094c1 	.word	0x080094c1
 8009374:	080093f1 	.word	0x080093f1
 8009378:	08009477 	.word	0x08009477
 800937c:	080093af 	.word	0x080093af
 8009380:	0800941d 	.word	0x0800941d
 8009384:	08009495 	.word	0x08009495
 8009388:	080096af 	.word	0x080096af
 800938c:	0800939d 	.word	0x0800939d
 8009390:	0800971d 	.word	0x0800971d
 8009394:	0800971d 	.word	0x0800971d
 8009398:	08009489 	.word	0x08009489
				case 'w':
					amp *= 2;
 800939c:	4b64      	ldr	r3, [pc, #400]	; (8009530 <main+0x938>)
 800939e:	edd3 7a00 	vldr	s15, [r3]
 80093a2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80093a6:	4b62      	ldr	r3, [pc, #392]	; (8009530 <main+0x938>)
 80093a8:	edc3 7a00 	vstr	s15, [r3]
					break;
 80093ac:	e1ba      	b.n	8009724 <main+0xb2c>
				case 's':
					amp /= 2;
 80093ae:	4b60      	ldr	r3, [pc, #384]	; (8009530 <main+0x938>)
 80093b0:	ed93 7a00 	vldr	s14, [r3]
 80093b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80093b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80093bc:	4b5c      	ldr	r3, [pc, #368]	; (8009530 <main+0x938>)
 80093be:	edc3 7a00 	vstr	s15, [r3]
					break;
 80093c2:	e1af      	b.n	8009724 <main+0xb2c>
				case 'a':
					phase_shift -= 0.05f;
 80093c4:	4b5b      	ldr	r3, [pc, #364]	; (8009534 <main+0x93c>)
 80093c6:	edd3 7a00 	vldr	s15, [r3]
 80093ca:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8009538 <main+0x940>
 80093ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093d2:	4b58      	ldr	r3, [pc, #352]	; (8009534 <main+0x93c>)
 80093d4:	edc3 7a00 	vstr	s15, [r3]
					break;
 80093d8:	e1a4      	b.n	8009724 <main+0xb2c>
				case 'd':
					phase_shift += 0.05f;
 80093da:	4b56      	ldr	r3, [pc, #344]	; (8009534 <main+0x93c>)
 80093dc:	edd3 7a00 	vldr	s15, [r3]
 80093e0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8009538 <main+0x940>
 80093e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80093e8:	4b52      	ldr	r3, [pc, #328]	; (8009534 <main+0x93c>)
 80093ea:	edc3 7a00 	vstr	s15, [r3]
					break;
 80093ee:	e199      	b.n	8009724 <main+0xb2c>
				case 'q':
					phase0 -= 0.05f;
 80093f0:	4b52      	ldr	r3, [pc, #328]	; (800953c <main+0x944>)
 80093f2:	edd3 7a00 	vldr	s15, [r3]
 80093f6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8009538 <main+0x940>
 80093fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80093fe:	4b4f      	ldr	r3, [pc, #316]	; (800953c <main+0x944>)
 8009400:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009404:	e18e      	b.n	8009724 <main+0xb2c>
				case 'e':
					phase0 += 0.05f;
 8009406:	4b4d      	ldr	r3, [pc, #308]	; (800953c <main+0x944>)
 8009408:	edd3 7a00 	vldr	s15, [r3]
 800940c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8009538 <main+0x940>
 8009410:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009414:	4b49      	ldr	r3, [pc, #292]	; (800953c <main+0x944>)
 8009416:	edc3 7a00 	vstr	s15, [r3]
					break;
 800941a:	e183      	b.n	8009724 <main+0xb2c>
				case 't':
					sw_enable_pwm = true;
 800941c:	4b48      	ldr	r3, [pc, #288]	; (8009540 <main+0x948>)
 800941e:	2201      	movs	r2, #1
 8009420:	701a      	strb	r2, [r3, #0]
					break;
 8009422:	e17f      	b.n	8009724 <main+0xb2c>
				case 'g':
					sw_enable_pwm = false;
 8009424:	4b46      	ldr	r3, [pc, #280]	; (8009540 <main+0x948>)
 8009426:	2200      	movs	r2, #0
 8009428:	701a      	strb	r2, [r3, #0]
					break;
 800942a:	e17b      	b.n	8009724 <main+0xb2c>
				case 'h':
					amp = abs(amp); //positive should be clockwise == EncVal increases positive :)
 800942c:	4b40      	ldr	r3, [pc, #256]	; (8009530 <main+0x938>)
 800942e:	edd3 7a00 	vldr	s15, [r3]
 8009432:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009436:	ee17 3a90 	vmov	r3, s15
 800943a:	2b00      	cmp	r3, #0
 800943c:	bfb8      	it	lt
 800943e:	425b      	neglt	r3, r3
 8009440:	ee07 3a90 	vmov	s15, r3
 8009444:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009448:	4b39      	ldr	r3, [pc, #228]	; (8009530 <main+0x938>)
 800944a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800944e:	e169      	b.n	8009724 <main+0xb2c>
				case 'f':
					amp = -abs(amp);
 8009450:	4b37      	ldr	r3, [pc, #220]	; (8009530 <main+0x938>)
 8009452:	edd3 7a00 	vldr	s15, [r3]
 8009456:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800945a:	ee17 3a90 	vmov	r3, s15
 800945e:	2b00      	cmp	r3, #0
 8009460:	bfb8      	it	lt
 8009462:	425b      	neglt	r3, r3
 8009464:	425b      	negs	r3, r3
 8009466:	ee07 3a90 	vmov	s15, r3
 800946a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800946e:	4b30      	ldr	r3, [pc, #192]	; (8009530 <main+0x938>)
 8009470:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009474:	e156      	b.n	8009724 <main+0xb2c>
				case 'r':
					amp = -amp;
 8009476:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <main+0x938>)
 8009478:	edd3 7a00 	vldr	s15, [r3]
 800947c:	eef1 7a67 	vneg.f32	s15, s15
 8009480:	4b2b      	ldr	r3, [pc, #172]	; (8009530 <main+0x938>)
 8009482:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009486:	e14d      	b.n	8009724 <main+0xb2c>
				case 'z':
					playSound( 1, 20, 100);
 8009488:	2264      	movs	r2, #100	; 0x64
 800948a:	2114      	movs	r1, #20
 800948c:	2001      	movs	r0, #1
 800948e:	f002 f879 	bl	800b584 <playSound>
					break;
 8009492:	e147      	b.n	8009724 <main+0xb2c>
				case 'u':
					stiffness += 0.001f;
 8009494:	4b2b      	ldr	r3, [pc, #172]	; (8009544 <main+0x94c>)
 8009496:	edd3 7a00 	vldr	s15, [r3]
 800949a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8009548 <main+0x950>
 800949e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80094a2:	4b28      	ldr	r3, [pc, #160]	; (8009544 <main+0x94c>)
 80094a4:	edc3 7a00 	vstr	s15, [r3]
					break;
 80094a8:	e13c      	b.n	8009724 <main+0xb2c>
				case 'j':
					stiffness -= 0.001f;
 80094aa:	4b26      	ldr	r3, [pc, #152]	; (8009544 <main+0x94c>)
 80094ac:	edd3 7a00 	vldr	s15, [r3]
 80094b0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009548 <main+0x950>
 80094b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80094b8:	4b22      	ldr	r3, [pc, #136]	; (8009544 <main+0x94c>)
 80094ba:	edc3 7a00 	vstr	s15, [r3]
					break;
 80094be:	e131      	b.n	8009724 <main+0xb2c>
				case 'p':
					//print2uart = false;
					print2uart = !print2uart;
 80094c0:	4b22      	ldr	r3, [pc, #136]	; (800954c <main+0x954>)
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bf14      	ite	ne
 80094c8:	2301      	movne	r3, #1
 80094ca:	2300      	moveq	r3, #0
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	f083 0301 	eor.w	r3, r3, #1
 80094d2:	b2db      	uxtb	r3, r3
 80094d4:	f003 0301 	and.w	r3, r3, #1
 80094d8:	b2da      	uxtb	r2, r3
 80094da:	4b1c      	ldr	r3, [pc, #112]	; (800954c <main+0x954>)
 80094dc:	701a      	strb	r2, [r3, #0]
					break;
 80094de:	e121      	b.n	8009724 <main+0xb2c>
				case 'o':
					//HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
					EN_GATE_GPIO_Port->BSRR = (uint32_t)EN_GATE_Pin << 16U;
 80094e0:	4b10      	ldr	r3, [pc, #64]	; (8009524 <main+0x92c>)
 80094e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80094e6:	619a      	str	r2, [r3, #24]
					break;
 80094e8:	e11c      	b.n	8009724 <main+0xb2c>
				case 'l':
					HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 80094ea:	2201      	movs	r2, #1
 80094ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80094f0:	480c      	ldr	r0, [pc, #48]	; (8009524 <main+0x92c>)
 80094f2:	f7fa f8eb 	bl	80036cc <HAL_GPIO_WritePin>
					EN_GATE_GPIO_Port->BSRR = EN_GATE_Pin ;
 80094f6:	4b0b      	ldr	r3, [pc, #44]	; (8009524 <main+0x92c>)
 80094f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80094fc:	619a      	str	r2, [r3, #24]
					break;
 80094fe:	e111      	b.n	8009724 <main+0xb2c>
				case 'X':
					step_through_pole_angles();
 8009500:	f001 fe4a 	bl	800b198 <step_through_pole_angles>
					break;
 8009504:	e10e      	b.n	8009724 <main+0xb2c>
				case 'P':
					step_through_pwm_percent();
 8009506:	f001 ff6f 	bl	800b3e8 <step_through_pwm_percent>
					break;
 800950a:	e10b      	b.n	8009724 <main+0xb2c>
				case 'i':
					mode_of_control = 1;
 800950c:	4b10      	ldr	r3, [pc, #64]	; (8009550 <main+0x958>)
 800950e:	2201      	movs	r2, #1
 8009510:	701a      	strb	r2, [r3, #0]
					break;
 8009512:	e107      	b.n	8009724 <main+0xb2c>
 8009514:	2000025e 	.word	0x2000025e
 8009518:	20001b58 	.word	0x20001b58
 800951c:	200002c0 	.word	0x200002c0
 8009520:	20001aec 	.word	0x20001aec
 8009524:	40021000 	.word	0x40021000
 8009528:	200006f8 	.word	0x200006f8
 800952c:	20000005 	.word	0x20000005
 8009530:	20000010 	.word	0x20000010
 8009534:	20000018 	.word	0x20000018
 8009538:	3d4ccccd 	.word	0x3d4ccccd
 800953c:	20000008 	.word	0x20000008
 8009540:	20000014 	.word	0x20000014
 8009544:	2000023c 	.word	0x2000023c
 8009548:	3a83126f 	.word	0x3a83126f
 800954c:	2000002d 	.word	0x2000002d
 8009550:	2000025f 	.word	0x2000025f
				case 'k':
					mode_of_control = 0;
 8009554:	4b61      	ldr	r3, [pc, #388]	; (80096dc <main+0xae4>)
 8009556:	2200      	movs	r2, #0
 8009558:	701a      	strb	r2, [r3, #0]
					amp = 0.05f;
 800955a:	4b61      	ldr	r3, [pc, #388]	; (80096e0 <main+0xae8>)
 800955c:	4a61      	ldr	r2, [pc, #388]	; (80096e4 <main+0xaec>)
 800955e:	601a      	str	r2, [r3, #0]
					break;
 8009560:	e0e0      	b.n	8009724 <main+0xb2c>

				// pos control
				case 'W':
					pos_amp *= 2;
 8009562:	4b61      	ldr	r3, [pc, #388]	; (80096e8 <main+0xaf0>)
 8009564:	edd3 7a00 	vldr	s15, [r3]
 8009568:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800956c:	4b5e      	ldr	r3, [pc, #376]	; (80096e8 <main+0xaf0>)
 800956e:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009572:	e0d7      	b.n	8009724 <main+0xb2c>
				case 'S':
					pos_amp *= 0.5f;
 8009574:	4b5c      	ldr	r3, [pc, #368]	; (80096e8 <main+0xaf0>)
 8009576:	edd3 7a00 	vldr	s15, [r3]
 800957a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800957e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009582:	4b59      	ldr	r3, [pc, #356]	; (80096e8 <main+0xaf0>)
 8009584:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009588:	e0cc      	b.n	8009724 <main+0xb2c>
				case 'D':
					pos_freq *= 2;
 800958a:	4b58      	ldr	r3, [pc, #352]	; (80096ec <main+0xaf4>)
 800958c:	edd3 7a00 	vldr	s15, [r3]
 8009590:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009594:	4b55      	ldr	r3, [pc, #340]	; (80096ec <main+0xaf4>)
 8009596:	edc3 7a00 	vstr	s15, [r3]
					break;
 800959a:	e0c3      	b.n	8009724 <main+0xb2c>
				case 'A':
					pos_freq *= 0.5f;
 800959c:	4b53      	ldr	r3, [pc, #332]	; (80096ec <main+0xaf4>)
 800959e:	edd3 7a00 	vldr	s15, [r3]
 80095a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80095a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095aa:	4b50      	ldr	r3, [pc, #320]	; (80096ec <main+0xaf4>)
 80095ac:	edc3 7a00 	vstr	s15, [r3]
					break;
 80095b0:	e0b8      	b.n	8009724 <main+0xb2c>
				case 'C':
					if (CONVERT){
 80095b2:	4b4f      	ldr	r3, [pc, #316]	; (80096f0 <main+0xaf8>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d003      	beq.n	80095c2 <main+0x9ca>
						CONVERT = 0;
 80095ba:	4b4d      	ldr	r3, [pc, #308]	; (80096f0 <main+0xaf8>)
 80095bc:	2200      	movs	r2, #0
 80095be:	701a      	strb	r2, [r3, #0]
					}
					else {
						CONVERT = 1;
					}
					break;
 80095c0:	e0b0      	b.n	8009724 <main+0xb2c>
						CONVERT = 1;
 80095c2:	4b4b      	ldr	r3, [pc, #300]	; (80096f0 <main+0xaf8>)
 80095c4:	2201      	movs	r2, #1
 80095c6:	701a      	strb	r2, [r3, #0]
					break;
 80095c8:	e0ac      	b.n	8009724 <main+0xb2c>
				case 'R':
					pos_amp_limit *= 2;
 80095ca:	4b4a      	ldr	r3, [pc, #296]	; (80096f4 <main+0xafc>)
 80095cc:	edd3 7a00 	vldr	s15, [r3]
 80095d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80095d4:	4b47      	ldr	r3, [pc, #284]	; (80096f4 <main+0xafc>)
 80095d6:	edc3 7a00 	vstr	s15, [r3]
					break;
 80095da:	e0a3      	b.n	8009724 <main+0xb2c>
				case 'F':
					pos_amp_limit *= 0.5f;
 80095dc:	4b45      	ldr	r3, [pc, #276]	; (80096f4 <main+0xafc>)
 80095de:	edd3 7a00 	vldr	s15, [r3]
 80095e2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80095e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80095ea:	4b42      	ldr	r3, [pc, #264]	; (80096f4 <main+0xafc>)
 80095ec:	edc3 7a00 	vstr	s15, [r3]
				case 'E':
					pos_offset += 200;
 80095f0:	4b41      	ldr	r3, [pc, #260]	; (80096f8 <main+0xb00>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	33c8      	adds	r3, #200	; 0xc8
 80095f6:	4a40      	ldr	r2, [pc, #256]	; (80096f8 <main+0xb00>)
 80095f8:	6013      	str	r3, [r2, #0]
					break;
 80095fa:	e093      	b.n	8009724 <main+0xb2c>
				case 'Q':
					pos_offset -= 200;
 80095fc:	4b3e      	ldr	r3, [pc, #248]	; (80096f8 <main+0xb00>)
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3bc8      	subs	r3, #200	; 0xc8
 8009602:	4a3d      	ldr	r2, [pc, #244]	; (80096f8 <main+0xb00>)
 8009604:	6013      	str	r3, [r2, #0]
					break;
 8009606:	e08d      	b.n	8009724 <main+0xb2c>
				case 'M':
					P_gain *= 2;
 8009608:	4b3c      	ldr	r3, [pc, #240]	; (80096fc <main+0xb04>)
 800960a:	edd3 7a00 	vldr	s15, [r3]
 800960e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009612:	4b3a      	ldr	r3, [pc, #232]	; (80096fc <main+0xb04>)
 8009614:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009618:	e084      	b.n	8009724 <main+0xb2c>
				case 'N':
					P_gain *= 0.5f;
 800961a:	4b38      	ldr	r3, [pc, #224]	; (80096fc <main+0xb04>)
 800961c:	edd3 7a00 	vldr	s15, [r3]
 8009620:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8009624:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009628:	4b34      	ldr	r3, [pc, #208]	; (80096fc <main+0xb04>)
 800962a:	edc3 7a00 	vstr	s15, [r3]
					break;
 800962e:	e079      	b.n	8009724 <main+0xb2c>
				case 'T':
					control_method = sinusoidal;
 8009630:	4b33      	ldr	r3, [pc, #204]	; (8009700 <main+0xb08>)
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
					break;
 8009636:	e075      	b.n	8009724 <main+0xb2c>
				case 'G':
					control_method = trapezoidal;
 8009638:	4b31      	ldr	r3, [pc, #196]	; (8009700 <main+0xb08>)
 800963a:	2201      	movs	r2, #1
 800963c:	601a      	str	r2, [r3, #0]
					break;
 800963e:	e071      	b.n	8009724 <main+0xb2c>
				case 'B':
					control_method = freerun;
 8009640:	4b2f      	ldr	r3, [pc, #188]	; (8009700 <main+0xb08>)
 8009642:	2202      	movs	r2, #2
 8009644:	601a      	str	r2, [r3, #0]
					break;
 8009646:	e06d      	b.n	8009724 <main+0xb2c>
				case 'L':
					explore_limits();
 8009648:	f001 ff06 	bl	800b458 <explore_limits>
					break;
 800964c:	e06a      	b.n	8009724 <main+0xb2c>
				case 'I':
					amp_harmonic += 0.1f;
 800964e:	4b2d      	ldr	r3, [pc, #180]	; (8009704 <main+0xb0c>)
 8009650:	edd3 7a00 	vldr	s15, [r3]
 8009654:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8009708 <main+0xb10>
 8009658:	ee77 7a87 	vadd.f32	s15, s15, s14
 800965c:	4b29      	ldr	r3, [pc, #164]	; (8009704 <main+0xb0c>)
 800965e:	edc3 7a00 	vstr	s15, [r3]
					calc_lookup(lookup);
 8009662:	482a      	ldr	r0, [pc, #168]	; (800970c <main+0xb14>)
 8009664:	f001 ffc8 	bl	800b5f8 <calc_lookup>
					break;
 8009668:	e05c      	b.n	8009724 <main+0xb2c>
				case 'K':
					amp_harmonic -= 0.1f;
 800966a:	4b26      	ldr	r3, [pc, #152]	; (8009704 <main+0xb0c>)
 800966c:	edd3 7a00 	vldr	s15, [r3]
 8009670:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8009708 <main+0xb10>
 8009674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009678:	4b22      	ldr	r3, [pc, #136]	; (8009704 <main+0xb0c>)
 800967a:	edc3 7a00 	vstr	s15, [r3]
					calc_lookup(lookup);
 800967e:	4823      	ldr	r0, [pc, #140]	; (800970c <main+0xb14>)
 8009680:	f001 ffba 	bl	800b5f8 <calc_lookup>
					break;
 8009684:	e04e      	b.n	8009724 <main+0xb2c>
				case 'm':
					generic_gain *= 2;
 8009686:	4b22      	ldr	r3, [pc, #136]	; (8009710 <main+0xb18>)
 8009688:	edd3 7a00 	vldr	s15, [r3]
 800968c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8009690:	4b1f      	ldr	r3, [pc, #124]	; (8009710 <main+0xb18>)
 8009692:	edc3 7a00 	vstr	s15, [r3]
					break;
 8009696:	e045      	b.n	8009724 <main+0xb2c>
				case 'n':
					generic_gain *= 0.5f;
 8009698:	4b1d      	ldr	r3, [pc, #116]	; (8009710 <main+0xb18>)
 800969a:	edd3 7a00 	vldr	s15, [r3]
 800969e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80096a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80096a6:	4b1a      	ldr	r3, [pc, #104]	; (8009710 <main+0xb18>)
 80096a8:	edc3 7a00 	vstr	s15, [r3]
					break;
 80096ac:	e03a      	b.n	8009724 <main+0xb2c>
				case 'v':
					generic_n += PI/6;
 80096ae:	4b19      	ldr	r3, [pc, #100]	; (8009714 <main+0xb1c>)
 80096b0:	edd3 7a00 	vldr	s15, [r3]
 80096b4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8009718 <main+0xb20>
 80096b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80096bc:	4b15      	ldr	r3, [pc, #84]	; (8009714 <main+0xb1c>)
 80096be:	edc3 7a00 	vstr	s15, [r3]
					break;
 80096c2:	e02f      	b.n	8009724 <main+0xb2c>
				case 'b':
					generic_n -= PI/6;
 80096c4:	4b13      	ldr	r3, [pc, #76]	; (8009714 <main+0xb1c>)
 80096c6:	edd3 7a00 	vldr	s15, [r3]
 80096ca:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8009718 <main+0xb20>
 80096ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80096d2:	4b10      	ldr	r3, [pc, #64]	; (8009714 <main+0xb1c>)
 80096d4:	edc3 7a00 	vstr	s15, [r3]
					break;
 80096d8:	e024      	b.n	8009724 <main+0xb2c>
 80096da:	bf00      	nop
 80096dc:	2000025f 	.word	0x2000025f
 80096e0:	20000010 	.word	0x20000010
 80096e4:	3d4ccccd 	.word	0x3d4ccccd
 80096e8:	2000001c 	.word	0x2000001c
 80096ec:	20000020 	.word	0x20000020
 80096f0:	20000238 	.word	0x20000238
 80096f4:	20000024 	.word	0x20000024
 80096f8:	20000240 	.word	0x20000240
 80096fc:	20000028 	.word	0x20000028
 8009700:	20000234 	.word	0x20000234
 8009704:	20000030 	.word	0x20000030
 8009708:	3dcccccd 	.word	0x3dcccccd
 800970c:	20000370 	.word	0x20000370
 8009710:	2000003c 	.word	0x2000003c
 8009714:	200002a4 	.word	0x200002a4
 8009718:	3f060a8b 	.word	0x3f060a8b

				default:
					ch='.';
 800971c:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009720:	222e      	movs	r2, #46	; 0x2e
 8009722:	701a      	strb	r2, [r3, #0]
			}

			//HAL_ADCEx_InjectedStart (&hadc1);
			//HAL_ADCEx_InjectedPollForConversion (&hadc1, 1); //this command is not necessary to get values - it was in for a long time

			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 8009724:	2101      	movs	r1, #1
 8009726:	48d0      	ldr	r0, [pc, #832]	; (8009a68 <main+0xe70>)
 8009728:	f7f8 faaa 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800972c:	f8c7 02bc 	str.w	r0, [r7, #700]	; 0x2bc
//			uint32_t val_ASENSE = HAL_ADCEx_InjectedGetValue (&hadc1, 2);
//			uint32_t val_STRAIN0 = HAL_ADCEx_InjectedGetValue (&hadc1, 3); //last number refers to rank
//			uint32_t val_M0_TEMP = HAL_ADCEx_InjectedGetValue (&hadc1, 4);
//
			uint32_t val_SO1 = HAL_ADCEx_InjectedGetValue (&hadc2, 1);
 8009730:	2101      	movs	r1, #1
 8009732:	48ce      	ldr	r0, [pc, #824]	; (8009a6c <main+0xe74>)
 8009734:	f7f8 faa4 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009738:	f8c7 02b8 	str.w	r0, [r7, #696]	; 0x2b8
//			uint32_t val_BSENSE = HAL_ADCEx_InjectedGetValue (&hadc2, 2);
//			uint32_t val_STRAIN1 = HAL_ADCEx_InjectedGetValue (&hadc2, 3);
//			uint32_t val_TEMP = HAL_ADCEx_InjectedGetValue (&hadc2, 4);
//			uint32_t val_VBUS = HAL_ADCEx_InjectedGetValue (&hadc2, 5); //TODO this value is not read out correctly - always comes as 0
//
			uint32_t val_SO2 = HAL_ADCEx_InjectedGetValue (&hadc3, 1);
 800973c:	2101      	movs	r1, #1
 800973e:	48cc      	ldr	r0, [pc, #816]	; (8009a70 <main+0xe78>)
 8009740:	f7f8 fa9e 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 8009744:	f8c7 02b4 	str.w	r0, [r7, #692]	; 0x2b4
//			uint32_t val_CSENSE = HAL_ADCEx_InjectedGetValue (&hadc3, 2);

			if (analog_samples_counter == ANALOG_SAMPLES_N){
 8009748:	4bca      	ldr	r3, [pc, #808]	; (8009a74 <main+0xe7c>)
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	2b20      	cmp	r3, #32
 800974e:	d10a      	bne.n	8009766 <main+0xb6e>
				val_STRAIN0 = acc_STRAIN0 >> ANALOG_SAMPLES_BITSHIFT;
 8009750:	4bc9      	ldr	r3, [pc, #804]	; (8009a78 <main+0xe80>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	095b      	lsrs	r3, r3, #5
 8009756:	4ac9      	ldr	r2, [pc, #804]	; (8009a7c <main+0xe84>)
 8009758:	6013      	str	r3, [r2, #0]
				acc_STRAIN0 = 0;
 800975a:	4bc7      	ldr	r3, [pc, #796]	; (8009a78 <main+0xe80>)
 800975c:	2200      	movs	r2, #0
 800975e:	601a      	str	r2, [r3, #0]
				analog_samples_counter = 0;
 8009760:	4bc4      	ldr	r3, [pc, #784]	; (8009a74 <main+0xe7c>)
 8009762:	2200      	movs	r2, #0
 8009764:	701a      	strb	r2, [r3, #0]
			}

//			// --- read angle
				//uint8_t spi_address_8[2];
				//uint8_t angle8[2];
				spi_address_8[1]= 0x7F;
 8009766:	f107 0308 	add.w	r3, r7, #8
 800976a:	227f      	movs	r2, #127	; 0x7f
 800976c:	705a      	strb	r2, [r3, #1]
				spi_address_8[0]= 0xFE;
 800976e:	f107 0308 	add.w	r3, r7, #8
 8009772:	22fe      	movs	r2, #254	; 0xfe
 8009774:	701a      	strb	r2, [r3, #0]
				//address8 = {0xFE, 0x7F};
				//address = 0x3FFE | AS_READ ;
				delay_SPI();
 8009776:	f001 feed 	bl	800b554 <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 800977a:	2200      	movs	r2, #0
 800977c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009780:	48bf      	ldr	r0, [pc, #764]	; (8009a80 <main+0xe88>)
 8009782:	f7f9 ffa3 	bl	80036cc <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8009786:	f107 0108 	add.w	r1, r7, #8
 800978a:	2301      	movs	r3, #1
 800978c:	2201      	movs	r2, #1
 800978e:	48bd      	ldr	r0, [pc, #756]	; (8009a84 <main+0xe8c>)
 8009790:	f7fb ff25 	bl	80055de <HAL_SPI_Transmit>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8009794:	2201      	movs	r2, #1
 8009796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800979a:	48b9      	ldr	r0, [pc, #740]	; (8009a80 <main+0xe88>)
 800979c:	f7f9 ff96 	bl	80036cc <HAL_GPIO_WritePin>
				delay_SPI();
 80097a0:	f001 fed8 	bl	800b554 <delay_SPI>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80097a4:	2200      	movs	r2, #0
 80097a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097aa:	48b5      	ldr	r0, [pc, #724]	; (8009a80 <main+0xe88>)
 80097ac:	f7f9 ff8e 	bl	80036cc <HAL_GPIO_WritePin>
				HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 80097b0:	4639      	mov	r1, r7
 80097b2:	2301      	movs	r3, #1
 80097b4:	2201      	movs	r2, #1
 80097b6:	48b3      	ldr	r0, [pc, #716]	; (8009a84 <main+0xe8c>)
 80097b8:	f7fc f845 	bl	8005846 <HAL_SPI_Receive>
				HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80097bc:	2201      	movs	r2, #1
 80097be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097c2:	48af      	ldr	r0, [pc, #700]	; (8009a80 <main+0xe88>)
 80097c4:	f7f9 ff82 	bl	80036cc <HAL_GPIO_WritePin>
				angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 80097c8:	463b      	mov	r3, r7
 80097ca:	781b      	ldrb	r3, [r3, #0]
 80097cc:	b21a      	sxth	r2, r3
 80097ce:	463b      	mov	r3, r7
 80097d0:	785b      	ldrb	r3, [r3, #1]
 80097d2:	021b      	lsls	r3, r3, #8
 80097d4:	b21b      	sxth	r3, r3
 80097d6:	4313      	orrs	r3, r2
 80097d8:	b21b      	sxth	r3, r3
 80097da:	f8a7 32c0 	strh.w	r3, [r7, #704]	; 0x2c0
				angle &= AS_DATA_MASK;
 80097de:	f8b7 32c0 	ldrh.w	r3, [r7, #704]	; 0x2c0
 80097e2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80097e6:	f8a7 32c0 	strh.w	r3, [r7, #704]	; 0x2c0

				uint32_t time10mus = TIM5->CNT;
 80097ea:	4ba7      	ldr	r3, [pc, #668]	; (8009a88 <main+0xe90>)
 80097ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ee:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0

				if (print2uart){
 80097f2:	4ba6      	ldr	r3, [pc, #664]	; (8009a8c <main+0xe94>)
 80097f4:	781b      	ldrb	r3, [r3, #0]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	f000 837a 	beq.w	8009ef0 <main+0x12f8>


						//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5


						sprintf((char*)buf, "tx: %c %4d %4d %4d %4d ", ch, tx_msg[0],rx_msg[1],rx_msg[2],rx_msg[3]);
 80097fc:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	461c      	mov	r4, r3
 8009804:	4ba2      	ldr	r3, [pc, #648]	; (8009a90 <main+0xe98>)
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	461d      	mov	r5, r3
 800980a:	4ba2      	ldr	r3, [pc, #648]	; (8009a94 <main+0xe9c>)
 800980c:	785b      	ldrb	r3, [r3, #1]
 800980e:	461a      	mov	r2, r3
 8009810:	4ba0      	ldr	r3, [pc, #640]	; (8009a94 <main+0xe9c>)
 8009812:	789b      	ldrb	r3, [r3, #2]
 8009814:	4619      	mov	r1, r3
 8009816:	4b9f      	ldr	r3, [pc, #636]	; (8009a94 <main+0xe9c>)
 8009818:	78db      	ldrb	r3, [r3, #3]
 800981a:	f107 00fc 	add.w	r0, r7, #252	; 0xfc
 800981e:	9302      	str	r3, [sp, #8]
 8009820:	9101      	str	r1, [sp, #4]
 8009822:	9200      	str	r2, [sp, #0]
 8009824:	462b      	mov	r3, r5
 8009826:	4622      	mov	r2, r4
 8009828:	499b      	ldr	r1, [pc, #620]	; (8009a98 <main+0xea0>)
 800982a:	f004 fce3 	bl	800e1f4 <siprintf>

						//sprintf((char*)buf_add, " rx:%c %4d %4d %4d %4d %4d", rx_character, rx_control_0, rx_control_1, rx_mode_0, rx_mode_1, rx_intent); strcat(buf, buf_add);

						//snprintf(buf_add, BUF_ADD_LEN, " p0:%4.2f", phase0);
						//strcat(buf, buf_add);
						int pos = strlen(buf);
 800982e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009832:	4618      	mov	r0, r3
 8009834:	f7f6 fccc 	bl	80001d0 <strlen>
 8009838:	4603      	mov	r3, r0
 800983a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
						int left  = BUF_LEN - pos;
 800983e:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8009842:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 8009846:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
						int n;
#define ADD_VAL(fmt, val)                 \
	n = snprintf(buf+pos, left, fmt, val);  \
	pos += n;                               \
	left -= n;
						ADD_VAL(" p0:%4.2f", phase0);
 800984a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800984e:	f107 02fc 	add.w	r2, r7, #252	; 0xfc
 8009852:	18d5      	adds	r5, r2, r3
 8009854:	f8d7 62a8 	ldr.w	r6, [r7, #680]	; 0x2a8
 8009858:	4b90      	ldr	r3, [pc, #576]	; (8009a9c <main+0xea4>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4618      	mov	r0, r3
 800985e:	f7f6 fe73 	bl	8000548 <__aeabi_f2d>
 8009862:	4603      	mov	r3, r0
 8009864:	460c      	mov	r4, r1
 8009866:	e9cd 3400 	strd	r3, r4, [sp]
 800986a:	4a8d      	ldr	r2, [pc, #564]	; (8009aa0 <main+0xea8>)
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	f004 fc8c 	bl	800e18c <sniprintf>
 8009874:	f8c7 02a4 	str.w	r0, [r7, #676]	; 0x2a4
 8009878:	f8d7 22ac 	ldr.w	r2, [r7, #684]	; 0x2ac
 800987c:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 8009880:	4413      	add	r3, r2
 8009882:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 8009886:	f8d7 22a8 	ldr.w	r2, [r7, #680]	; 0x2a8
 800988a:	f8d7 32a4 	ldr.w	r3, [r7, #676]	; 0x2a4
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
						// snprintf(buf, BUF_LEN, "%s p0:%4.2f", buf, phase0);

						sprintf((char*)buf_add, " ps:%4.2f", phase_shift); strcat(buf, buf_add);
 8009894:	4b83      	ldr	r3, [pc, #524]	; (8009aa4 <main+0xeac>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	4618      	mov	r0, r3
 800989a:	f7f6 fe55 	bl	8000548 <__aeabi_f2d>
 800989e:	4603      	mov	r3, r0
 80098a0:	460c      	mov	r4, r1
 80098a2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80098a6:	461a      	mov	r2, r3
 80098a8:	4623      	mov	r3, r4
 80098aa:	497f      	ldr	r1, [pc, #508]	; (8009aa8 <main+0xeb0>)
 80098ac:	f004 fca2 	bl	800e1f4 <siprintf>
 80098b0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80098b4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80098b8:	4611      	mov	r1, r2
 80098ba:	4618      	mov	r0, r3
 80098bc:	f004 fcba 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " amp:%3.2f", amp); strcat(buf, buf_add);
 80098c0:	4b7a      	ldr	r3, [pc, #488]	; (8009aac <main+0xeb4>)
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4618      	mov	r0, r3
 80098c6:	f7f6 fe3f 	bl	8000548 <__aeabi_f2d>
 80098ca:	4603      	mov	r3, r0
 80098cc:	460c      	mov	r4, r1
 80098ce:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80098d2:	461a      	mov	r2, r3
 80098d4:	4623      	mov	r3, r4
 80098d6:	4976      	ldr	r1, [pc, #472]	; (8009ab0 <main+0xeb8>)
 80098d8:	f004 fc8c 	bl	800e1f4 <siprintf>
 80098dc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80098e0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80098e4:	4611      	mov	r1, r2
 80098e6:	4618      	mov	r0, r3
 80098e8:	f004 fca4 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " av:%5.2f", av_start_angle); strcat(buf, buf_add);
 80098ec:	4b71      	ldr	r3, [pc, #452]	; (8009ab4 <main+0xebc>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	4618      	mov	r0, r3
 80098f2:	f7f6 fe29 	bl	8000548 <__aeabi_f2d>
 80098f6:	4603      	mov	r3, r0
 80098f8:	460c      	mov	r4, r1
 80098fa:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80098fe:	461a      	mov	r2, r3
 8009900:	4623      	mov	r3, r4
 8009902:	496d      	ldr	r1, [pc, #436]	; (8009ab8 <main+0xec0>)
 8009904:	f004 fc76 	bl	800e1f4 <siprintf>
 8009908:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800990c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f004 fc8e 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " a:%5d", angle); strcat(buf, buf_add);
 8009918:	f8b7 22c0 	ldrh.w	r2, [r7, #704]	; 0x2c0
 800991c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009920:	4966      	ldr	r1, [pc, #408]	; (8009abc <main+0xec4>)
 8009922:	4618      	mov	r0, r3
 8009924:	f004 fc66 	bl	800e1f4 <siprintf>
 8009928:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800992c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009930:	4611      	mov	r1, r2
 8009932:	4618      	mov	r0, r3
 8009934:	f004 fc7e 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " E:%5d", EncVal); strcat(buf, buf_add);
 8009938:	4b61      	ldr	r3, [pc, #388]	; (8009ac0 <main+0xec8>)
 800993a:	681a      	ldr	r2, [r3, #0]
 800993c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009940:	4960      	ldr	r1, [pc, #384]	; (8009ac4 <main+0xecc>)
 8009942:	4618      	mov	r0, r3
 8009944:	f004 fc56 	bl	800e1f4 <siprintf>
 8009948:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800994c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009950:	4611      	mov	r1, r2
 8009952:	4618      	mov	r0, r3
 8009954:	f004 fc6e 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " c:%5d", rotation_counter); strcat(buf, buf_add);
 8009958:	4b5b      	ldr	r3, [pc, #364]	; (8009ac8 <main+0xed0>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009960:	495a      	ldr	r1, [pc, #360]	; (8009acc <main+0xed4>)
 8009962:	4618      	mov	r0, r3
 8009964:	f004 fc46 	bl	800e1f4 <siprintf>
 8009968:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800996c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f004 fc5e 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " v:%6.2f", velocity); strcat(buf, buf_add);
 8009978:	4b55      	ldr	r3, [pc, #340]	; (8009ad0 <main+0xed8>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4618      	mov	r0, r3
 800997e:	f7f6 fde3 	bl	8000548 <__aeabi_f2d>
 8009982:	4603      	mov	r3, r0
 8009984:	460c      	mov	r4, r1
 8009986:	f107 0034 	add.w	r0, r7, #52	; 0x34
 800998a:	461a      	mov	r2, r3
 800998c:	4623      	mov	r3, r4
 800998e:	4951      	ldr	r1, [pc, #324]	; (8009ad4 <main+0xedc>)
 8009990:	f004 fc30 	bl	800e1f4 <siprintf>
 8009994:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009998:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800999c:	4611      	mov	r1, r2
 800999e:	4618      	mov	r0, r3
 80099a0:	f004 fc48 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " p:%6.2f", p); strcat(buf, buf_add);
 80099a4:	4b4c      	ldr	r3, [pc, #304]	; (8009ad8 <main+0xee0>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	4618      	mov	r0, r3
 80099aa:	f7f6 fdcd 	bl	8000548 <__aeabi_f2d>
 80099ae:	4603      	mov	r3, r0
 80099b0:	460c      	mov	r4, r1
 80099b2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80099b6:	461a      	mov	r2, r3
 80099b8:	4623      	mov	r3, r4
 80099ba:	4948      	ldr	r1, [pc, #288]	; (8009adc <main+0xee4>)
 80099bc:	f004 fc1a 	bl	800e1f4 <siprintf>
 80099c0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80099c4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80099c8:	4611      	mov	r1, r2
 80099ca:	4618      	mov	r0, r3
 80099cc:	f004 fc32 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " FOC:%4.2f", FOC_phase_shift); strcat(buf, buf_add);
 80099d0:	4b43      	ldr	r3, [pc, #268]	; (8009ae0 <main+0xee8>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4618      	mov	r0, r3
 80099d6:	f7f6 fdb7 	bl	8000548 <__aeabi_f2d>
 80099da:	4603      	mov	r3, r0
 80099dc:	460c      	mov	r4, r1
 80099de:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80099e2:	461a      	mov	r2, r3
 80099e4:	4623      	mov	r3, r4
 80099e6:	493f      	ldr	r1, [pc, #252]	; (8009ae4 <main+0xeec>)
 80099e8:	f004 fc04 	bl	800e1f4 <siprintf>
 80099ec:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80099f0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80099f4:	4611      	mov	r1, r2
 80099f6:	4618      	mov	r0, r3
 80099f8:	f004 fc1c 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " gg:%6.3f", generic_gain); strcat(buf, buf_add);
 80099fc:	4b3a      	ldr	r3, [pc, #232]	; (8009ae8 <main+0xef0>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4618      	mov	r0, r3
 8009a02:	f7f6 fda1 	bl	8000548 <__aeabi_f2d>
 8009a06:	4603      	mov	r3, r0
 8009a08:	460c      	mov	r4, r1
 8009a0a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009a0e:	461a      	mov	r2, r3
 8009a10:	4623      	mov	r3, r4
 8009a12:	4936      	ldr	r1, [pc, #216]	; (8009aec <main+0xef4>)
 8009a14:	f004 fbee 	bl	800e1f4 <siprintf>
 8009a18:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009a1c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009a20:	4611      	mov	r1, r2
 8009a22:	4618      	mov	r0, r3
 8009a24:	f004 fc06 	bl	800e234 <strcat>
						sprintf((char*)buf_add, " gn:%6.3f", generic_n); strcat(buf, buf_add);
 8009a28:	4b31      	ldr	r3, [pc, #196]	; (8009af0 <main+0xef8>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f7f6 fd8b 	bl	8000548 <__aeabi_f2d>
 8009a32:	4603      	mov	r3, r0
 8009a34:	460c      	mov	r4, r1
 8009a36:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	4623      	mov	r3, r4
 8009a3e:	492d      	ldr	r1, [pc, #180]	; (8009af4 <main+0xefc>)
 8009a40:	f004 fbd8 	bl	800e1f4 <siprintf>
 8009a44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009a48:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009a4c:	4611      	mov	r1, r2
 8009a4e:	4618      	mov	r0, r3
 8009a50:	f004 fbf0 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " dcl:%6.2f qcl:%6.2f", direct_component_lp, quadrature_component_lp); strcat(buf, buf_add);
 8009a54:	4b28      	ldr	r3, [pc, #160]	; (8009af8 <main+0xf00>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f6 fd75 	bl	8000548 <__aeabi_f2d>
 8009a5e:	4605      	mov	r5, r0
 8009a60:	460e      	mov	r6, r1
 8009a62:	4b26      	ldr	r3, [pc, #152]	; (8009afc <main+0xf04>)
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	e04b      	b.n	8009b00 <main+0xf08>
 8009a68:	20000d98 	.word	0x20000d98
 8009a6c:	20000738 	.word	0x20000738
 8009a70:	20000de0 	.word	0x20000de0
 8009a74:	2000028c 	.word	0x2000028c
 8009a78:	2000026c 	.word	0x2000026c
 8009a7c:	20000274 	.word	0x20000274
 8009a80:	40020c00 	.word	0x40020c00
 8009a84:	20000318 	.word	0x20000318
 8009a88:	40000c00 	.word	0x40000c00
 8009a8c:	2000002d 	.word	0x2000002d
 8009a90:	20000c34 	.word	0x20000c34
 8009a94:	20000d80 	.word	0x20000d80
 8009a98:	08013188 	.word	0x08013188
 8009a9c:	20000008 	.word	0x20000008
 8009aa0:	080131a0 	.word	0x080131a0
 8009aa4:	20000018 	.word	0x20000018
 8009aa8:	080131ac 	.word	0x080131ac
 8009aac:	20000010 	.word	0x20000010
 8009ab0:	080131b8 	.word	0x080131b8
 8009ab4:	20000f94 	.word	0x20000f94
 8009ab8:	080131c4 	.word	0x080131c4
 8009abc:	080131d0 	.word	0x080131d0
 8009ac0:	20000e68 	.word	0x20000e68
 8009ac4:	080131d8 	.word	0x080131d8
 8009ac8:	20000244 	.word	0x20000244
 8009acc:	080131e0 	.word	0x080131e0
 8009ad0:	20000248 	.word	0x20000248
 8009ad4:	080131e8 	.word	0x080131e8
 8009ad8:	200002a8 	.word	0x200002a8
 8009adc:	080131f4 	.word	0x080131f4
 8009ae0:	200002a0 	.word	0x200002a0
 8009ae4:	08013200 	.word	0x08013200
 8009ae8:	2000003c 	.word	0x2000003c
 8009aec:	0801320c 	.word	0x0801320c
 8009af0:	200002a4 	.word	0x200002a4
 8009af4:	08013218 	.word	0x08013218
 8009af8:	20000294 	.word	0x20000294
 8009afc:	2000029c 	.word	0x2000029c
 8009b00:	4618      	mov	r0, r3
 8009b02:	f7f6 fd21 	bl	8000548 <__aeabi_f2d>
 8009b06:	4603      	mov	r3, r0
 8009b08:	460c      	mov	r4, r1
 8009b0a:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009b0e:	e9cd 3400 	strd	r3, r4, [sp]
 8009b12:	462a      	mov	r2, r5
 8009b14:	4633      	mov	r3, r6
 8009b16:	4973      	ldr	r1, [pc, #460]	; (8009ce4 <main+0x10ec>)
 8009b18:	f004 fb6c 	bl	800e1f4 <siprintf>
 8009b1c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009b20:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009b24:	4611      	mov	r1, r2
 8009b26:	4618      	mov	r0, r3
 8009b28:	f004 fb84 	bl	800e234 <strcat>



						sprintf((char*)buf_add, " dc:%6.2f qc:%6.2f", direct_component, quadrature_component); strcat(buf, buf_add);
 8009b2c:	4b6e      	ldr	r3, [pc, #440]	; (8009ce8 <main+0x10f0>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	4618      	mov	r0, r3
 8009b32:	f7f6 fd09 	bl	8000548 <__aeabi_f2d>
 8009b36:	4605      	mov	r5, r0
 8009b38:	460e      	mov	r6, r1
 8009b3a:	4b6c      	ldr	r3, [pc, #432]	; (8009cec <main+0x10f4>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4618      	mov	r0, r3
 8009b40:	f7f6 fd02 	bl	8000548 <__aeabi_f2d>
 8009b44:	4603      	mov	r3, r0
 8009b46:	460c      	mov	r4, r1
 8009b48:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009b4c:	e9cd 3400 	strd	r3, r4, [sp]
 8009b50:	462a      	mov	r2, r5
 8009b52:	4633      	mov	r3, r6
 8009b54:	4966      	ldr	r1, [pc, #408]	; (8009cf0 <main+0x10f8>)
 8009b56:	f004 fb4d 	bl	800e1f4 <siprintf>
 8009b5a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009b5e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009b62:	4611      	mov	r1, r2
 8009b64:	4618      	mov	r0, r3
 8009b66:	f004 fb65 	bl	800e234 <strcat>


						sprintf((char*)buf_add, " a:%6.2f b:%6.2f", a, b); strcat(buf, buf_add);
 8009b6a:	4b62      	ldr	r3, [pc, #392]	; (8009cf4 <main+0x10fc>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4618      	mov	r0, r3
 8009b70:	f7f6 fcea 	bl	8000548 <__aeabi_f2d>
 8009b74:	4605      	mov	r5, r0
 8009b76:	460e      	mov	r6, r1
 8009b78:	4b5f      	ldr	r3, [pc, #380]	; (8009cf8 <main+0x1100>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f7f6 fce3 	bl	8000548 <__aeabi_f2d>
 8009b82:	4603      	mov	r3, r0
 8009b84:	460c      	mov	r4, r1
 8009b86:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009b8a:	e9cd 3400 	strd	r3, r4, [sp]
 8009b8e:	462a      	mov	r2, r5
 8009b90:	4633      	mov	r3, r6
 8009b92:	495a      	ldr	r1, [pc, #360]	; (8009cfc <main+0x1104>)
 8009b94:	f004 fb2e 	bl	800e1f4 <siprintf>
 8009b98:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009b9c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009ba0:	4611      	mov	r1, r2
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f004 fb46 	bl	800e234 <strcat>

						//sprintf((char*)buf_add, " h:%4.3f", amp_harmonic); strcat(buf, buf_add);

						//sprintf((char*)buf_add, " d:%2d", direction); strcat(buf, buf_add);

						if (CONVERT){
 8009ba8:	4b55      	ldr	r3, [pc, #340]	; (8009d00 <main+0x1108>)
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	f000 80b5 	beq.w	8009d1c <main+0x1124>
							float SO0 = ((float)val_I - 2040.0f) * 0.134f; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134
 8009bb2:	f8d7 32bc 	ldr.w	r3, [r7, #700]	; 0x2bc
 8009bb6:	ee07 3a90 	vmov	s15, r3
 8009bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bbe:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8009d04 <main+0x110c>
 8009bc2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009bc6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8009d08 <main+0x1110>
 8009bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bce:	edc7 7aa8 	vstr	s15, [r7, #672]	; 0x2a0
							float SO1 = ((float)val_SO1 - 2002.0f) * 0.189f; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134 //TODO verify SPI setting in DRV8301 the factor sqrt(2) comes out of thin air
 8009bd2:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8009bd6:	ee07 3a90 	vmov	s15, r3
 8009bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bde:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8009d0c <main+0x1114>
 8009be2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009be6:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8009d10 <main+0x1118>
 8009bea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009bee:	edc7 7aa7 	vstr	s15, [r7, #668]	; 0x29c
							float SO2 = ((float)val_SO2 - 2002.0f) * 0.189f; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134
 8009bf2:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8009bf6:	ee07 3a90 	vmov	s15, r3
 8009bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfe:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8009d0c <main+0x1114>
 8009c02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009c06:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8009d10 <main+0x1118>
 8009c0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c0e:	edc7 7aa6 	vstr	s15, [r7, #664]	; 0x298
							sprintf((char*)buf_add, " I:%5.2fA SO1:%5.2fA SO2:%5.2fA", SO0, SO1, SO2); strcat(buf, buf_add);
 8009c12:	f8d7 02a0 	ldr.w	r0, [r7, #672]	; 0x2a0
 8009c16:	f7f6 fc97 	bl	8000548 <__aeabi_f2d>
 8009c1a:	4680      	mov	r8, r0
 8009c1c:	4689      	mov	r9, r1
 8009c1e:	f8d7 029c 	ldr.w	r0, [r7, #668]	; 0x29c
 8009c22:	f7f6 fc91 	bl	8000548 <__aeabi_f2d>
 8009c26:	4604      	mov	r4, r0
 8009c28:	460d      	mov	r5, r1
 8009c2a:	f8d7 0298 	ldr.w	r0, [r7, #664]	; 0x298
 8009c2e:	f7f6 fc8b 	bl	8000548 <__aeabi_f2d>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009c3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c3e:	e9cd 4500 	strd	r4, r5, [sp]
 8009c42:	4642      	mov	r2, r8
 8009c44:	464b      	mov	r3, r9
 8009c46:	4933      	ldr	r1, [pc, #204]	; (8009d14 <main+0x111c>)
 8009c48:	f004 fad4 	bl	800e1f4 <siprintf>
 8009c4c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009c50:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009c54:	4611      	mov	r1, r2
 8009c56:	4618      	mov	r0, r3
 8009c58:	f004 faec 	bl	800e234 <strcat>

							float I_tot = sqrt((SO0*SO0 + SO1*SO1 + SO2*SO2)/1.5f); //see colab - the factor 1.5 allows to extract the distance from center of triangle to tip
 8009c5c:	ed97 7aa8 	vldr	s14, [r7, #672]	; 0x2a0
 8009c60:	edd7 7aa8 	vldr	s15, [r7, #672]	; 0x2a0
 8009c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009c68:	edd7 6aa7 	vldr	s13, [r7, #668]	; 0x29c
 8009c6c:	edd7 7aa7 	vldr	s15, [r7, #668]	; 0x29c
 8009c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c74:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009c78:	edd7 6aa6 	vldr	s13, [r7, #664]	; 0x298
 8009c7c:	edd7 7aa6 	vldr	s15, [r7, #664]	; 0x298
 8009c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8009c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009c88:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8009c8c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8009c90:	ee16 0a90 	vmov	r0, s13
 8009c94:	f7f6 fc58 	bl	8000548 <__aeabi_f2d>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	ec44 3b10 	vmov	d0, r3, r4
 8009ca0:	f007 fbaa 	bl	80113f8 <sqrt>
 8009ca4:	ec54 3b10 	vmov	r3, r4, d0
 8009ca8:	4618      	mov	r0, r3
 8009caa:	4621      	mov	r1, r4
 8009cac:	f7f6 ff9c 	bl	8000be8 <__aeabi_d2f>
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
							sprintf((char*)buf_add, " It:%5.2fA", I_tot); strcat(buf, buf_add);
 8009cb6:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8009cba:	f7f6 fc45 	bl	8000548 <__aeabi_f2d>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	460c      	mov	r4, r1
 8009cc2:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009cc6:	461a      	mov	r2, r3
 8009cc8:	4623      	mov	r3, r4
 8009cca:	4913      	ldr	r1, [pc, #76]	; (8009d18 <main+0x1120>)
 8009ccc:	f004 fa92 	bl	800e1f4 <siprintf>
 8009cd0:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009cd4:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009cd8:	4611      	mov	r1, r2
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f004 faaa 	bl	800e234 <strcat>
 8009ce0:	e030      	b.n	8009d44 <main+0x114c>
 8009ce2:	bf00      	nop
 8009ce4:	08013224 	.word	0x08013224
 8009ce8:	20000290 	.word	0x20000290
 8009cec:	20000298 	.word	0x20000298
 8009cf0:	0801323c 	.word	0x0801323c
 8009cf4:	20001b14 	.word	0x20001b14
 8009cf8:	200002e8 	.word	0x200002e8
 8009cfc:	08013250 	.word	0x08013250
 8009d00:	20000238 	.word	0x20000238
 8009d04:	44ff0000 	.word	0x44ff0000
 8009d08:	3e09374c 	.word	0x3e09374c
 8009d0c:	44fa4000 	.word	0x44fa4000
 8009d10:	3e418937 	.word	0x3e418937
 8009d14:	08013264 	.word	0x08013264
 8009d18:	08013284 	.word	0x08013284
						}
						else{
							sprintf((char*)buf_add, " I:%4d SO1:%4d SO2:%4d", val_I, val_SO1, val_SO2); strcat(buf, buf_add);
 8009d1c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009d20:	f8d7 32b4 	ldr.w	r3, [r7, #692]	; 0x2b4
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	f8d7 32b8 	ldr.w	r3, [r7, #696]	; 0x2b8
 8009d2a:	f8d7 22bc 	ldr.w	r2, [r7, #700]	; 0x2bc
 8009d2e:	497a      	ldr	r1, [pc, #488]	; (8009f18 <main+0x1320>)
 8009d30:	f004 fa60 	bl	800e1f4 <siprintf>
 8009d34:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009d38:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009d3c:	4611      	mov	r1, r2
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f004 fa78 	bl	800e234 <strcat>
						}

						sprintf((char*)buf_add, " A:%4d B:%4d C:%4d", val_ASENSE, val_BSENSE, val_CSENSE); strcat(buf, buf_add);
 8009d44:	4b75      	ldr	r3, [pc, #468]	; (8009f1c <main+0x1324>)
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	4b75      	ldr	r3, [pc, #468]	; (8009f20 <main+0x1328>)
 8009d4a:	6819      	ldr	r1, [r3, #0]
 8009d4c:	4b75      	ldr	r3, [pc, #468]	; (8009f24 <main+0x132c>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	460b      	mov	r3, r1
 8009d58:	4973      	ldr	r1, [pc, #460]	; (8009f28 <main+0x1330>)
 8009d5a:	f004 fa4b 	bl	800e1f4 <siprintf>
 8009d5e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009d62:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009d66:	4611      	mov	r1, r2
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f004 fa63 	bl	800e234 <strcat>

						if (CONVERT){
 8009d6e:	4b6f      	ldr	r3, [pc, #444]	; (8009f2c <main+0x1334>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d037      	beq.n	8009de6 <main+0x11ee>
							float STRAIN0 = ((float)val_STRAIN0 - 2235.0f) * 1.678f; // 3.3/4095/0.00048[gain see page 114] = 1.678
 8009d76:	4b6e      	ldr	r3, [pc, #440]	; (8009f30 <main+0x1338>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	ee07 3a90 	vmov	s15, r3
 8009d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d82:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8009f34 <main+0x133c>
 8009d86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d8a:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8009f38 <main+0x1340>
 8009d8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009d92:	edc7 7aa4 	vstr	s15, [r7, #656]	; 0x290
							float STRAIN1 = ((float)val_STRAIN1 - 2235.0f) * 1.678f;
 8009d96:	4b69      	ldr	r3, [pc, #420]	; (8009f3c <main+0x1344>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	ee07 3a90 	vmov	s15, r3
 8009d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009da2:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8009f34 <main+0x133c>
 8009da6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009daa:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8009f38 <main+0x1340>
 8009dae:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009db2:	edc7 7aa3 	vstr	s15, [r7, #652]	; 0x28c
							sprintf((char*)buf_add, " S0:%5.1fN S1:%4dN", STRAIN0, val_STRAIN1); strcat(buf, buf_add);
 8009db6:	f8d7 0290 	ldr.w	r0, [r7, #656]	; 0x290
 8009dba:	f7f6 fbc5 	bl	8000548 <__aeabi_f2d>
 8009dbe:	460a      	mov	r2, r1
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	4b5e      	ldr	r3, [pc, #376]	; (8009f3c <main+0x1344>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009dca:	9300      	str	r3, [sp, #0]
 8009dcc:	4613      	mov	r3, r2
 8009dce:	460a      	mov	r2, r1
 8009dd0:	495b      	ldr	r1, [pc, #364]	; (8009f40 <main+0x1348>)
 8009dd2:	f004 fa0f 	bl	800e1f4 <siprintf>
 8009dd6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009dda:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009dde:	4611      	mov	r1, r2
 8009de0:	4618      	mov	r0, r3
 8009de2:	f004 fa27 	bl	800e234 <strcat>

						//sprintf((char*)buf_add, " ADC1: %4d %4d %4d %4d %4d %4d %4d %4d", adc1_buf[0], adc1_buf[1], adc1_buf[2], adc1_buf[3], adc1_buf[4], adc1_buf[5], adc1_buf[6], adc1_buf[7]); strcat(buf, buf_add);
						//sprintf((char*)buf_add, " ADC2: %4d %4d %4d %4d %4d %4d %4d %4d", adc2_buf[0], adc2_buf[1], adc2_buf[2], adc2_buf[3], adc2_buf[4], adc2_buf[5], adc2_buf[6], adc2_buf[7]); strcat(buf, buf_add);
						//sprintf((char*)buf_add, " ADC3: %4d %4d %4d %4d %4d %4d %4d %4d", adc3_buf[0], adc3_buf[1], adc3_buf[2], adc3_buf[3], adc3_buf[4], adc3_buf[5], adc3_buf[6], adc3_buf[7]); strcat(buf, buf_add);

						if (val_TEMP > 1900){
 8009de6:	4b57      	ldr	r3, [pc, #348]	; (8009f44 <main+0x134c>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f240 726c 	movw	r2, #1900	; 0x76c
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d90f      	bls.n	8009e12 <main+0x121a>
							sprintf((char*)buf_add, "* >50C on ESC"); strcat(buf, buf_add);
 8009df2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009df6:	4a54      	ldr	r2, [pc, #336]	; (8009f48 <main+0x1350>)
 8009df8:	461c      	mov	r4, r3
 8009dfa:	4613      	mov	r3, r2
 8009dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009dfe:	c407      	stmia	r4!, {r0, r1, r2}
 8009e00:	8023      	strh	r3, [r4, #0]
 8009e02:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009e06:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f004 fa11 	bl	800e234 <strcat>
						}

						if (val_M0_TEMP > 1900){
 8009e12:	4b4e      	ldr	r3, [pc, #312]	; (8009f4c <main+0x1354>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f240 726c 	movw	r2, #1900	; 0x76c
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d90f      	bls.n	8009e3e <main+0x1246>
							sprintf((char*)buf_add, "* >50C on MOTOR"); strcat(buf, buf_add);
 8009e1e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e22:	4a4b      	ldr	r2, [pc, #300]	; (8009f50 <main+0x1358>)
 8009e24:	461c      	mov	r4, r3
 8009e26:	4613      	mov	r3, r2
 8009e28:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8009e2e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009e32:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009e36:	4611      	mov	r1, r2
 8009e38:	4618      	mov	r0, r3
 8009e3a:	f004 f9fb 	bl	800e234 <strcat>
						}

						if (val_STRAIN0 < 2170){
 8009e3e:	4b3c      	ldr	r3, [pc, #240]	; (8009f30 <main+0x1338>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	f640 0279 	movw	r2, #2169	; 0x879
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d80f      	bhi.n	8009e6a <main+0x1272>
							sprintf((char*)buf_add, "* -100N force"); strcat(buf, buf_add);
 8009e4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e4e:	4a41      	ldr	r2, [pc, #260]	; (8009f54 <main+0x135c>)
 8009e50:	461c      	mov	r4, r3
 8009e52:	4613      	mov	r3, r2
 8009e54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009e56:	c407      	stmia	r4!, {r0, r1, r2}
 8009e58:	8023      	strh	r3, [r4, #0]
 8009e5a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009e5e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009e62:	4611      	mov	r1, r2
 8009e64:	4618      	mov	r0, r3
 8009e66:	f004 f9e5 	bl	800e234 <strcat>
						}

						sprintf((char*)buf_add, " p:%5d m:%5d", Enc_Val_total_lim_p, Enc_Val_total_lim_m); strcat(buf, buf_add);
 8009e6a:	4b3b      	ldr	r3, [pc, #236]	; (8009f58 <main+0x1360>)
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	4b3b      	ldr	r3, [pc, #236]	; (8009f5c <main+0x1364>)
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8009e76:	493a      	ldr	r1, [pc, #232]	; (8009f60 <main+0x1368>)
 8009e78:	f004 f9bc 	bl	800e1f4 <siprintf>
 8009e7c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009e80:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009e84:	4611      	mov	r1, r2
 8009e86:	4618      	mov	r0, r3
 8009e88:	f004 f9d4 	bl	800e234 <strcat>

						sprintf((char*)buf_add, " \r\n"); strcat(buf, buf_add);
 8009e8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8009e90:	4a34      	ldr	r2, [pc, #208]	; (8009f64 <main+0x136c>)
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8009e98:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f004 f9c8 	bl	800e234 <strcat>
			//			buf[50] = '|';
			//			buf[100 + max(-50, min(50, (int)av_velocity))] = 'v';



						if (buf_msgs[0] != '\0'){
 8009ea4:	4b30      	ldr	r3, [pc, #192]	; (8009f68 <main+0x1370>)
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d008      	beq.n	8009ebe <main+0x12c6>
							strcat(buf, buf_msgs);
 8009eac:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009eb0:	492d      	ldr	r1, [pc, #180]	; (8009f68 <main+0x1370>)
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f004 f9be 	bl	800e234 <strcat>
							buf_msgs[0] = '\0';
 8009eb8:	4b2b      	ldr	r3, [pc, #172]	; (8009f68 <main+0x1370>)
 8009eba:	2200      	movs	r2, #0
 8009ebc:	701a      	strb	r2, [r3, #0]
						}



						//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
						huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8009ebe:	4b2b      	ldr	r3, [pc, #172]	; (8009f6c <main+0x1374>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	695a      	ldr	r2, [r3, #20]
 8009ec4:	4b29      	ldr	r3, [pc, #164]	; (8009f6c <main+0x1374>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ecc:	615a      	str	r2, [r3, #20]
						HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8009ece:	f107 04fc 	add.w	r4, r7, #252	; 0xfc
 8009ed2:	4b26      	ldr	r3, [pc, #152]	; (8009f6c <main+0x1374>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3304      	adds	r3, #4
 8009ed8:	461d      	mov	r5, r3
 8009eda:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8009ede:	4618      	mov	r0, r3
 8009ee0:	f7f6 f976 	bl	80001d0 <strlen>
 8009ee4:	4603      	mov	r3, r0
 8009ee6:	462a      	mov	r2, r5
 8009ee8:	4621      	mov	r1, r4
 8009eea:	4821      	ldr	r0, [pc, #132]	; (8009f70 <main+0x1378>)
 8009eec:	f7f8 ff1e 	bl	8002d2c <HAL_DMA_Start_IT>
				}
			ch='.';
 8009ef0:	f107 0333 	add.w	r3, r7, #51	; 0x33
 8009ef4:	222e      	movs	r2, #46	; 0x2e
 8009ef6:	701a      	strb	r2, [r3, #0]

			i_slow++;
 8009ef8:	f8d7 32d0 	ldr.w	r3, [r7, #720]	; 0x2d0
 8009efc:	3301      	adds	r3, #1
 8009efe:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	  }

	  i_fast++;
 8009f02:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8009f06:	3301      	adds	r3, #1
 8009f08:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
	  HAL_Delay(1);
 8009f0c:	2001      	movs	r0, #1
 8009f0e:	f7f7 f8ad 	bl	800106c <HAL_Delay>
	  if (i_fast%fast2slow == 0){
 8009f12:	f7ff b9a0 	b.w	8009256 <main+0x65e>
 8009f16:	bf00      	nop
 8009f18:	08013290 	.word	0x08013290
 8009f1c:	20000270 	.word	0x20000270
 8009f20:	2000027c 	.word	0x2000027c
 8009f24:	20000288 	.word	0x20000288
 8009f28:	080132a8 	.word	0x080132a8
 8009f2c:	20000238 	.word	0x20000238
 8009f30:	20000274 	.word	0x20000274
 8009f34:	450bb000 	.word	0x450bb000
 8009f38:	3fd6c8b4 	.word	0x3fd6c8b4
 8009f3c:	20000280 	.word	0x20000280
 8009f40:	080132bc 	.word	0x080132bc
 8009f44:	20000284 	.word	0x20000284
 8009f48:	080132d0 	.word	0x080132d0
 8009f4c:	20000278 	.word	0x20000278
 8009f50:	080132e0 	.word	0x080132e0
 8009f54:	080132f0 	.word	0x080132f0
 8009f58:	20000264 	.word	0x20000264
 8009f5c:	20000260 	.word	0x20000260
 8009f60:	08013300 	.word	0x08013300
 8009f64:	000a0d20 	.word	0x000a0d20
 8009f68:	200019bc 	.word	0x200019bc
 8009f6c:	200006f8 	.word	0x200006f8
 8009f70:	20000c9c 	.word	0x20000c9c

08009f74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b098      	sub	sp, #96	; 0x60
 8009f78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009f7a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009f7e:	2230      	movs	r2, #48	; 0x30
 8009f80:	2100      	movs	r1, #0
 8009f82:	4618      	mov	r0, r3
 8009f84:	f003 fab6 	bl	800d4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009f88:	f107 031c 	add.w	r3, r7, #28
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]
 8009f90:	605a      	str	r2, [r3, #4]
 8009f92:	609a      	str	r2, [r3, #8]
 8009f94:	60da      	str	r2, [r3, #12]
 8009f96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	605a      	str	r2, [r3, #4]
 8009fa2:	609a      	str	r2, [r3, #8]
 8009fa4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	60bb      	str	r3, [r7, #8]
 8009faa:	4b32      	ldr	r3, [pc, #200]	; (800a074 <SystemClock_Config+0x100>)
 8009fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fae:	4a31      	ldr	r2, [pc, #196]	; (800a074 <SystemClock_Config+0x100>)
 8009fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8009fb6:	4b2f      	ldr	r3, [pc, #188]	; (800a074 <SystemClock_Config+0x100>)
 8009fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009fbe:	60bb      	str	r3, [r7, #8]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	607b      	str	r3, [r7, #4]
 8009fc6:	4b2c      	ldr	r3, [pc, #176]	; (800a078 <SystemClock_Config+0x104>)
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	4a2b      	ldr	r2, [pc, #172]	; (800a078 <SystemClock_Config+0x104>)
 8009fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009fd0:	6013      	str	r3, [r2, #0]
 8009fd2:	4b29      	ldr	r3, [pc, #164]	; (800a078 <SystemClock_Config+0x104>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fda:	607b      	str	r3, [r7, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8009fde:	2309      	movs	r3, #9
 8009fe0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8009fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009fe6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8009fe8:	2301      	movs	r3, #1
 8009fea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009fec:	2302      	movs	r3, #2
 8009fee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8009ff0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8009ff6:	2304      	movs	r3, #4
 8009ff8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 8009ffa:	23a8      	movs	r3, #168	; 0xa8
 8009ffc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009ffe:	2302      	movs	r3, #2
 800a000:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800a002:	2307      	movs	r3, #7
 800a004:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a006:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7fa fc4e 	bl	80048ac <HAL_RCC_OscConfig>
 800a010:	4603      	mov	r3, r0
 800a012:	2b00      	cmp	r3, #0
 800a014:	d001      	beq.n	800a01a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800a016:	f002 fab9 	bl	800c58c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a01a:	230f      	movs	r3, #15
 800a01c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800a01e:	2302      	movs	r3, #2
 800a020:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800a022:	2300      	movs	r3, #0
 800a024:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800a026:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800a02a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800a02c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a030:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800a032:	f107 031c 	add.w	r3, r7, #28
 800a036:	2105      	movs	r1, #5
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fa fea7 	bl	8004d8c <HAL_RCC_ClockConfig>
 800a03e:	4603      	mov	r3, r0
 800a040:	2b00      	cmp	r3, #0
 800a042:	d001      	beq.n	800a048 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800a044:	f002 faa2 	bl	800c58c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800a048:	2302      	movs	r3, #2
 800a04a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800a04c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a050:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a052:	f107 030c 	add.w	r3, r7, #12
 800a056:	4618      	mov	r0, r3
 800a058:	f7fb f896 	bl	8005188 <HAL_RCCEx_PeriphCLKConfig>
 800a05c:	4603      	mov	r3, r0
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d001      	beq.n	800a066 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800a062:	f002 fa93 	bl	800c58c <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800a066:	f7fa ff77 	bl	8004f58 <HAL_RCC_EnableCSS>
}
 800a06a:	bf00      	nop
 800a06c:	3760      	adds	r7, #96	; 0x60
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	40023800 	.word	0x40023800
 800a078:	40007000 	.word	0x40007000

0800a07c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b090      	sub	sp, #64	; 0x40
 800a080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800a082:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a086:	2200      	movs	r2, #0
 800a088:	601a      	str	r2, [r3, #0]
 800a08a:	605a      	str	r2, [r3, #4]
 800a08c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800a08e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a092:	2200      	movs	r2, #0
 800a094:	601a      	str	r2, [r3, #0]
 800a096:	605a      	str	r2, [r3, #4]
 800a098:	609a      	str	r2, [r3, #8]
 800a09a:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a09c:	1d3b      	adds	r3, r7, #4
 800a09e:	2220      	movs	r2, #32
 800a0a0:	2100      	movs	r1, #0
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f003 fa26 	bl	800d4f4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800a0a8:	4b63      	ldr	r3, [pc, #396]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0aa:	4a64      	ldr	r2, [pc, #400]	; (800a23c <MX_ADC1_Init+0x1c0>)
 800a0ac:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a0ae:	4b62      	ldr	r3, [pc, #392]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0b0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a0b4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800a0b6:	4b60      	ldr	r3, [pc, #384]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800a0bc:	4b5e      	ldr	r3, [pc, #376]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0be:	2201      	movs	r2, #1
 800a0c0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800a0c2:	4b5d      	ldr	r3, [pc, #372]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800a0c8:	4b5b      	ldr	r3, [pc, #364]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800a0d0:	4b59      	ldr	r3, [pc, #356]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800a0d6:	4b58      	ldr	r3, [pc, #352]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0d8:	4a59      	ldr	r2, [pc, #356]	; (800a240 <MX_ADC1_Init+0x1c4>)
 800a0da:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a0dc:	4b56      	ldr	r3, [pc, #344]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0de:	2200      	movs	r2, #0
 800a0e0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800a0e2:	4b55      	ldr	r3, [pc, #340]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0e4:	2204      	movs	r2, #4
 800a0e6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800a0e8:	4b53      	ldr	r3, [pc, #332]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a0f0:	4b51      	ldr	r3, [pc, #324]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800a0f6:	4850      	ldr	r0, [pc, #320]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a0f8:	f7f6 ffda 	bl	80010b0 <HAL_ADC_Init>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d001      	beq.n	800a106 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800a102:	f002 fa43 	bl	800c58c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_INJECSIMULT;
 800a106:	2315      	movs	r3, #21
 800a108:	637b      	str	r3, [r7, #52]	; 0x34
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 800a10a:	2300      	movs	r3, #0
 800a10c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800a10e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800a112:	4619      	mov	r1, r3
 800a114:	4848      	ldr	r0, [pc, #288]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a116:	f7f7 ff89 	bl	800202c <HAL_ADCEx_MultiModeConfigChannel>
 800a11a:	4603      	mov	r3, r0
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	d001      	beq.n	800a124 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800a120:	f002 fa34 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a124:	2301      	movs	r3, #1
 800a126:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 1;
 800a128:	2301      	movs	r3, #1
 800a12a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a12c:	2301      	movs	r3, #1
 800a12e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a130:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a134:	4619      	mov	r1, r3
 800a136:	4840      	ldr	r0, [pc, #256]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a138:	f7f7 fa44 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a13c:	4603      	mov	r3, r0
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d001      	beq.n	800a146 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800a142:	f002 fa23 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800a146:	2305      	movs	r3, #5
 800a148:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 2;
 800a14a:	2302      	movs	r3, #2
 800a14c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a14e:	2300      	movs	r3, #0
 800a150:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a152:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a156:	4619      	mov	r1, r3
 800a158:	4837      	ldr	r0, [pc, #220]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a15a:	f7f7 fa33 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d001      	beq.n	800a168 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 800a164:	f002 fa12 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 3;
 800a168:	2303      	movs	r3, #3
 800a16a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a16c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a170:	4619      	mov	r1, r3
 800a172:	4831      	ldr	r0, [pc, #196]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a174:	f7f7 fa26 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d001      	beq.n	800a182 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 800a17e:	f002 fa05 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800a182:	2301      	movs	r3, #1
 800a184:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 4;
 800a186:	2304      	movs	r3, #4
 800a188:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800a18a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a18e:	4619      	mov	r1, r3
 800a190:	4829      	ldr	r0, [pc, #164]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a192:	f7f7 fa17 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <MX_ADC1_Init+0x124>
  {
    Error_Handler();
 800a19c:	f002 f9f6 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 1;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a1a8:	2304      	movs	r3, #4
 800a1aa:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800a1b0:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800a1b4:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a1be:	2300      	movs	r3, #0
 800a1c0:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a1c6:	1d3b      	adds	r3, r7, #4
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	481b      	ldr	r0, [pc, #108]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a1cc:	f7f7 fd9a 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <MX_ADC1_Init+0x15e>
  {
    Error_Handler();
 800a1d6:	f002 f9d9 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800a1da:	230b      	movs	r3, #11
 800a1dc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 2;
 800a1de:	2302      	movs	r3, #2
 800a1e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a1e2:	1d3b      	adds	r3, r7, #4
 800a1e4:	4619      	mov	r1, r3
 800a1e6:	4814      	ldr	r0, [pc, #80]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a1e8:	f7f7 fd8c 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d001      	beq.n	800a1f6 <MX_ADC1_Init+0x17a>
  {
    Error_Handler();
 800a1f2:	f002 f9cb 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 800a1f6:	230e      	movs	r3, #14
 800a1f8:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 3;
 800a1fa:	2303      	movs	r3, #3
 800a1fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a1fe:	1d3b      	adds	r3, r7, #4
 800a200:	4619      	mov	r1, r3
 800a202:	480d      	ldr	r0, [pc, #52]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a204:	f7f7 fd7e 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a208:	4603      	mov	r3, r0
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d001      	beq.n	800a212 <MX_ADC1_Init+0x196>
  {
    Error_Handler();
 800a20e:	f002 f9bd 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 800a212:	2305      	movs	r3, #5
 800a214:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 4;
 800a216:	2304      	movs	r3, #4
 800a218:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800a21a:	1d3b      	adds	r3, r7, #4
 800a21c:	4619      	mov	r1, r3
 800a21e:	4806      	ldr	r0, [pc, #24]	; (800a238 <MX_ADC1_Init+0x1bc>)
 800a220:	f7f7 fd70 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d001      	beq.n	800a22e <MX_ADC1_Init+0x1b2>
  {
    Error_Handler();
 800a22a:	f002 f9af 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800a22e:	bf00      	nop
 800a230:	3740      	adds	r7, #64	; 0x40
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	20000d98 	.word	0x20000d98
 800a23c:	40012000 	.word	0x40012000
 800a240:	0f000001 	.word	0x0f000001

0800a244 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800a244:	b580      	push	{r7, lr}
 800a246:	b08c      	sub	sp, #48	; 0x30
 800a248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a24a:	f107 0320 	add.w	r3, r7, #32
 800a24e:	2200      	movs	r2, #0
 800a250:	601a      	str	r2, [r3, #0]
 800a252:	605a      	str	r2, [r3, #4]
 800a254:	609a      	str	r2, [r3, #8]
 800a256:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a258:	463b      	mov	r3, r7
 800a25a:	2220      	movs	r2, #32
 800a25c:	2100      	movs	r1, #0
 800a25e:	4618      	mov	r0, r3
 800a260:	f003 f948 	bl	800d4f4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 800a264:	4b56      	ldr	r3, [pc, #344]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a266:	4a57      	ldr	r2, [pc, #348]	; (800a3c4 <MX_ADC2_Init+0x180>)
 800a268:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a26a:	4b55      	ldr	r3, [pc, #340]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a26c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a270:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800a272:	4b53      	ldr	r3, [pc, #332]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a274:	2200      	movs	r2, #0
 800a276:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 800a278:	4b51      	ldr	r3, [pc, #324]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a27a:	2201      	movs	r2, #1
 800a27c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800a27e:	4b50      	ldr	r3, [pc, #320]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a280:	2200      	movs	r2, #0
 800a282:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800a284:	4b4e      	ldr	r3, [pc, #312]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a28c:	4b4c      	ldr	r3, [pc, #304]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a28e:	2200      	movs	r2, #0
 800a290:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 800a292:	4b4b      	ldr	r3, [pc, #300]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a294:	2204      	movs	r2, #4
 800a296:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800a298:	4b49      	ldr	r3, [pc, #292]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a29a:	2201      	movs	r2, #1
 800a29c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a2a0:	4b47      	ldr	r3, [pc, #284]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800a2a6:	4846      	ldr	r0, [pc, #280]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a2a8:	f7f6 ff02 	bl	80010b0 <HAL_ADC_Init>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d001      	beq.n	800a2b6 <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 800a2b2:	f002 f96b 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a2c2:	f107 0320 	add.w	r3, r7, #32
 800a2c6:	4619      	mov	r1, r3
 800a2c8:	483d      	ldr	r0, [pc, #244]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a2ca:	f7f7 f97b 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d001      	beq.n	800a2d8 <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 800a2d4:	f002 f95a 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800a2d8:	230c      	movs	r3, #12
 800a2da:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a2dc:	2302      	movs	r3, #2
 800a2de:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a2e0:	f107 0320 	add.w	r3, r7, #32
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	4836      	ldr	r0, [pc, #216]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a2e8:	f7f7 f96c 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d001      	beq.n	800a2f6 <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 800a2f2:	f002 f94b 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800a2f6:	230f      	movs	r3, #15
 800a2f8:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a2fa:	2303      	movs	r3, #3
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a2fe:	f107 0320 	add.w	r3, r7, #32
 800a302:	4619      	mov	r1, r3
 800a304:	482e      	ldr	r0, [pc, #184]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a306:	f7f7 f95d 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a30a:	4603      	mov	r3, r0
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d001      	beq.n	800a314 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 800a310:	f002 f93c 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800a314:	2304      	movs	r3, #4
 800a316:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a318:	2304      	movs	r3, #4
 800a31a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800a31c:	f107 0320 	add.w	r3, r7, #32
 800a320:	4619      	mov	r1, r3
 800a322:	4827      	ldr	r0, [pc, #156]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a324:	f7f7 f94e 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a328:	4603      	mov	r3, r0
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800a32e:	f002 f92d 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800a332:	2302      	movs	r3, #2
 800a334:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a336:	2301      	movs	r3, #1
 800a338:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a33a:	2304      	movs	r3, #4
 800a33c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a33e:	2300      	movs	r3, #0
 800a340:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a342:	2300      	movs	r3, #0
 800a344:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a346:	2300      	movs	r3, #0
 800a348:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a34a:	2300      	movs	r3, #0
 800a34c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a34e:	463b      	mov	r3, r7
 800a350:	4619      	mov	r1, r3
 800a352:	481b      	ldr	r0, [pc, #108]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a354:	f7f7 fcd6 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <MX_ADC2_Init+0x11e>
  {
    Error_Handler();
 800a35e:	f002 f915 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 800a362:	230c      	movs	r3, #12
 800a364:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a366:	2302      	movs	r3, #2
 800a368:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a36a:	463b      	mov	r3, r7
 800a36c:	4619      	mov	r1, r3
 800a36e:	4814      	ldr	r0, [pc, #80]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a370:	f7f7 fcc8 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d001      	beq.n	800a37e <MX_ADC2_Init+0x13a>
  {
    Error_Handler();
 800a37a:	f002 f907 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800a37e:	230f      	movs	r3, #15
 800a380:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a382:	2303      	movs	r3, #3
 800a384:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a386:	463b      	mov	r3, r7
 800a388:	4619      	mov	r1, r3
 800a38a:	480d      	ldr	r0, [pc, #52]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a38c:	f7f7 fcba 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d001      	beq.n	800a39a <MX_ADC2_Init+0x156>
  {
    Error_Handler();
 800a396:	f002 f8f9 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 800a39a:	2304      	movs	r3, #4
 800a39c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a39e:	2304      	movs	r3, #4
 800a3a0:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800a3a2:	463b      	mov	r3, r7
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	4806      	ldr	r0, [pc, #24]	; (800a3c0 <MX_ADC2_Init+0x17c>)
 800a3a8:	f7f7 fcac 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d001      	beq.n	800a3b6 <MX_ADC2_Init+0x172>
  {
    Error_Handler();
 800a3b2:	f002 f8eb 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800a3b6:	bf00      	nop
 800a3b8:	3730      	adds	r7, #48	; 0x30
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}
 800a3be:	bf00      	nop
 800a3c0:	20000738 	.word	0x20000738
 800a3c4:	40012100 	.word	0x40012100

0800a3c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b08c      	sub	sp, #48	; 0x30
 800a3cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800a3ce:	f107 0320 	add.w	r3, r7, #32
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	601a      	str	r2, [r3, #0]
 800a3d6:	605a      	str	r2, [r3, #4]
 800a3d8:	609a      	str	r2, [r3, #8]
 800a3da:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800a3dc:	463b      	mov	r3, r7
 800a3de:	2220      	movs	r2, #32
 800a3e0:	2100      	movs	r1, #0
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	f003 f886 	bl	800d4f4 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800a3e8:	4b56      	ldr	r3, [pc, #344]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a3ea:	4a57      	ldr	r2, [pc, #348]	; (800a548 <MX_ADC3_Init+0x180>)
 800a3ec:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800a3ee:	4b55      	ldr	r3, [pc, #340]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a3f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a3f4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800a3f6:	4b53      	ldr	r3, [pc, #332]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 800a3fc:	4b51      	ldr	r3, [pc, #324]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a3fe:	2201      	movs	r2, #1
 800a400:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800a402:	4b50      	ldr	r3, [pc, #320]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a404:	2200      	movs	r2, #0
 800a406:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800a408:	4b4e      	ldr	r3, [pc, #312]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800a410:	4b4c      	ldr	r3, [pc, #304]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a412:	2200      	movs	r2, #0
 800a414:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 800a416:	4b4b      	ldr	r3, [pc, #300]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a418:	2204      	movs	r2, #4
 800a41a:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800a41c:	4b49      	ldr	r3, [pc, #292]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800a424:	4b47      	ldr	r3, [pc, #284]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a426:	2200      	movs	r2, #0
 800a428:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800a42a:	4846      	ldr	r0, [pc, #280]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a42c:	f7f6 fe40 	bl	80010b0 <HAL_ADC_Init>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d001      	beq.n	800a43a <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 800a436:	f002 f8a9 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a43a:	2303      	movs	r3, #3
 800a43c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800a43e:	2301      	movs	r3, #1
 800a440:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800a442:	2301      	movs	r3, #1
 800a444:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a446:	f107 0320 	add.w	r3, r7, #32
 800a44a:	4619      	mov	r1, r3
 800a44c:	483d      	ldr	r0, [pc, #244]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a44e:	f7f7 f8b9 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a452:	4603      	mov	r3, r0
 800a454:	2b00      	cmp	r3, #0
 800a456:	d001      	beq.n	800a45c <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 800a458:	f002 f898 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800a45c:	230d      	movs	r3, #13
 800a45e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 800a460:	2302      	movs	r3, #2
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a464:	f107 0320 	add.w	r3, r7, #32
 800a468:	4619      	mov	r1, r3
 800a46a:	4836      	ldr	r0, [pc, #216]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a46c:	f7f7 f8aa 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a470:	4603      	mov	r3, r0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d001      	beq.n	800a47a <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 800a476:	f002 f889 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800a47a:	2303      	movs	r3, #3
 800a47c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800a47e:	2303      	movs	r3, #3
 800a480:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a482:	f107 0320 	add.w	r3, r7, #32
 800a486:	4619      	mov	r1, r3
 800a488:	482e      	ldr	r0, [pc, #184]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a48a:	f7f7 f89b 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <MX_ADC3_Init+0xd0>
  {
    Error_Handler();
 800a494:	f002 f87a 	bl	800c58c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800a498:	230d      	movs	r3, #13
 800a49a:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 800a49c:	2304      	movs	r3, #4
 800a49e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800a4a0:	f107 0320 	add.w	r3, r7, #32
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	4827      	ldr	r0, [pc, #156]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a4a8:	f7f7 f88c 	bl	80015c4 <HAL_ADC_ConfigChannel>
 800a4ac:	4603      	mov	r3, r0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d001      	beq.n	800a4b6 <MX_ADC3_Init+0xee>
  {
    Error_Handler();
 800a4b2:	f002 f86b 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800a4be:	2304      	movs	r3, #4
 800a4c0:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800a4c2:	2300      	movs	r3, #0
 800a4c4:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a4d2:	463b      	mov	r3, r7
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	481b      	ldr	r0, [pc, #108]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a4d8:	f7f7 fc14 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d001      	beq.n	800a4e6 <MX_ADC3_Init+0x11e>
  {
    Error_Handler();
 800a4e2:	f002 f853 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800a4e6:	230d      	movs	r3, #13
 800a4e8:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 800a4ea:	2302      	movs	r3, #2
 800a4ec:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4814      	ldr	r0, [pc, #80]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a4f4:	f7f7 fc06 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a4f8:	4603      	mov	r3, r0
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d001      	beq.n	800a502 <MX_ADC3_Init+0x13a>
  {
    Error_Handler();
 800a4fe:	f002 f845 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800a502:	2303      	movs	r3, #3
 800a504:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800a506:	2303      	movs	r3, #3
 800a508:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a50a:	463b      	mov	r3, r7
 800a50c:	4619      	mov	r1, r3
 800a50e:	480d      	ldr	r0, [pc, #52]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a510:	f7f7 fbf8 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a514:	4603      	mov	r3, r0
 800a516:	2b00      	cmp	r3, #0
 800a518:	d001      	beq.n	800a51e <MX_ADC3_Init+0x156>
  {
    Error_Handler();
 800a51a:	f002 f837 	bl	800c58c <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 800a51e:	230d      	movs	r3, #13
 800a520:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800a522:	2304      	movs	r3, #4
 800a524:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800a526:	463b      	mov	r3, r7
 800a528:	4619      	mov	r1, r3
 800a52a:	4806      	ldr	r0, [pc, #24]	; (800a544 <MX_ADC3_Init+0x17c>)
 800a52c:	f7f7 fbea 	bl	8001d04 <HAL_ADCEx_InjectedConfigChannel>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <MX_ADC3_Init+0x172>
  {
    Error_Handler();
 800a536:	f002 f829 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800a53a:	bf00      	nop
 800a53c:	3730      	adds	r7, #48	; 0x30
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd80      	pop	{r7, pc}
 800a542:	bf00      	nop
 800a544:	20000de0 	.word	0x20000de0
 800a548:	40012200 	.word	0x40012200

0800a54c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800a550:	4b17      	ldr	r3, [pc, #92]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a552:	4a18      	ldr	r2, [pc, #96]	; (800a5b4 <MX_CAN1_Init+0x68>)
 800a554:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800a556:	4b16      	ldr	r3, [pc, #88]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a558:	2203      	movs	r2, #3
 800a55a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800a55c:	4b14      	ldr	r3, [pc, #80]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a55e:	2200      	movs	r2, #0
 800a560:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800a562:	4b13      	ldr	r3, [pc, #76]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a564:	2200      	movs	r2, #0
 800a566:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800a568:	4b11      	ldr	r3, [pc, #68]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a56a:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 800a56e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800a570:	4b0f      	ldr	r3, [pc, #60]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a572:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a576:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800a578:	4b0d      	ldr	r3, [pc, #52]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800a57e:	4b0c      	ldr	r3, [pc, #48]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a580:	2200      	movs	r2, #0
 800a582:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800a584:	4b0a      	ldr	r3, [pc, #40]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a586:	2200      	movs	r2, #0
 800a588:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800a58a:	4b09      	ldr	r3, [pc, #36]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800a590:	4b07      	ldr	r3, [pc, #28]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a592:	2200      	movs	r2, #0
 800a594:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800a596:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a598:	2200      	movs	r2, #0
 800a59a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800a59c:	4804      	ldr	r0, [pc, #16]	; (800a5b0 <MX_CAN1_Init+0x64>)
 800a59e:	f7f7 fd8b 	bl	80020b8 <HAL_CAN_Init>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d001      	beq.n	800a5ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800a5a8:	f001 fff0 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800a5ac:	bf00      	nop
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20001aec 	.word	0x20001aec
 800a5b4:	40006400 	.word	0x40006400

0800a5b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800a5bc:	4b12      	ldr	r3, [pc, #72]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5be:	4a13      	ldr	r2, [pc, #76]	; (800a60c <MX_I2C1_Init+0x54>)
 800a5c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800a5c2:	4b11      	ldr	r3, [pc, #68]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5c4:	4a12      	ldr	r2, [pc, #72]	; (800a610 <MX_I2C1_Init+0x58>)
 800a5c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a5c8:	4b0f      	ldr	r3, [pc, #60]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800a5ce:	4b0e      	ldr	r3, [pc, #56]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a5d4:	4b0c      	ldr	r3, [pc, #48]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a5da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a5dc:	4b0a      	ldr	r3, [pc, #40]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5de:	2200      	movs	r2, #0
 800a5e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800a5e2:	4b09      	ldr	r3, [pc, #36]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a5e8:	4b07      	ldr	r3, [pc, #28]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800a5f4:	4804      	ldr	r0, [pc, #16]	; (800a608 <MX_I2C1_Init+0x50>)
 800a5f6:	f7f9 f8b5 	bl	8003764 <HAL_I2C_Init>
 800a5fa:	4603      	mov	r3, r0
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d001      	beq.n	800a604 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800a600:	f001 ffc4 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800a604:	bf00      	nop
 800a606:	bd80      	pop	{r7, pc}
 800a608:	20000780 	.word	0x20000780
 800a60c:	40005400 	.word	0x40005400
 800a610:	000186a0 	.word	0x000186a0

0800a614 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a618:	4b12      	ldr	r3, [pc, #72]	; (800a664 <MX_I2C2_Init+0x50>)
 800a61a:	4a13      	ldr	r2, [pc, #76]	; (800a668 <MX_I2C2_Init+0x54>)
 800a61c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800a61e:	4b11      	ldr	r3, [pc, #68]	; (800a664 <MX_I2C2_Init+0x50>)
 800a620:	4a12      	ldr	r2, [pc, #72]	; (800a66c <MX_I2C2_Init+0x58>)
 800a622:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800a624:	4b0f      	ldr	r3, [pc, #60]	; (800a664 <MX_I2C2_Init+0x50>)
 800a626:	2200      	movs	r2, #0
 800a628:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800a62a:	4b0e      	ldr	r3, [pc, #56]	; (800a664 <MX_I2C2_Init+0x50>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a630:	4b0c      	ldr	r3, [pc, #48]	; (800a664 <MX_I2C2_Init+0x50>)
 800a632:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a636:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800a638:	4b0a      	ldr	r3, [pc, #40]	; (800a664 <MX_I2C2_Init+0x50>)
 800a63a:	2200      	movs	r2, #0
 800a63c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800a63e:	4b09      	ldr	r3, [pc, #36]	; (800a664 <MX_I2C2_Init+0x50>)
 800a640:	2200      	movs	r2, #0
 800a642:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a644:	4b07      	ldr	r3, [pc, #28]	; (800a664 <MX_I2C2_Init+0x50>)
 800a646:	2200      	movs	r2, #0
 800a648:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a64a:	4b06      	ldr	r3, [pc, #24]	; (800a664 <MX_I2C2_Init+0x50>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a650:	4804      	ldr	r0, [pc, #16]	; (800a664 <MX_I2C2_Init+0x50>)
 800a652:	f7f9 f887 	bl	8003764 <HAL_I2C_Init>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800a65c:	f001 ff96 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a660:	bf00      	nop
 800a662:	bd80      	pop	{r7, pc}
 800a664:	20000bdc 	.word	0x20000bdc
 800a668:	40005800 	.word	0x40005800
 800a66c:	000186a0 	.word	0x000186a0

0800a670 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800a674:	4b0f      	ldr	r3, [pc, #60]	; (800a6b4 <MX_RTC_Init+0x44>)
 800a676:	4a10      	ldr	r2, [pc, #64]	; (800a6b8 <MX_RTC_Init+0x48>)
 800a678:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800a67a:	4b0e      	ldr	r3, [pc, #56]	; (800a6b4 <MX_RTC_Init+0x44>)
 800a67c:	2200      	movs	r2, #0
 800a67e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800a680:	4b0c      	ldr	r3, [pc, #48]	; (800a6b4 <MX_RTC_Init+0x44>)
 800a682:	227f      	movs	r2, #127	; 0x7f
 800a684:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800a686:	4b0b      	ldr	r3, [pc, #44]	; (800a6b4 <MX_RTC_Init+0x44>)
 800a688:	22ff      	movs	r2, #255	; 0xff
 800a68a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800a68c:	4b09      	ldr	r3, [pc, #36]	; (800a6b4 <MX_RTC_Init+0x44>)
 800a68e:	2200      	movs	r2, #0
 800a690:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800a692:	4b08      	ldr	r3, [pc, #32]	; (800a6b4 <MX_RTC_Init+0x44>)
 800a694:	2200      	movs	r2, #0
 800a696:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800a698:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <MX_RTC_Init+0x44>)
 800a69a:	2200      	movs	r2, #0
 800a69c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800a69e:	4805      	ldr	r0, [pc, #20]	; (800a6b4 <MX_RTC_Init+0x44>)
 800a6a0:	f7fa fe54 	bl	800534c <HAL_RTC_Init>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800a6aa:	f001 ff6f 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800a6ae:	bf00      	nop
 800a6b0:	bd80      	pop	{r7, pc}
 800a6b2:	bf00      	nop
 800a6b4:	20000ecc 	.word	0x20000ecc
 800a6b8:	40002800 	.word	0x40002800

0800a6bc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800a6c0:	4b18      	ldr	r3, [pc, #96]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6c2:	4a19      	ldr	r2, [pc, #100]	; (800a728 <MX_SPI2_Init+0x6c>)
 800a6c4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800a6c6:	4b17      	ldr	r3, [pc, #92]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a6cc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a6ce:	4b15      	ldr	r3, [pc, #84]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800a6d4:	4b13      	ldr	r3, [pc, #76]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6da:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6dc:	4b11      	ldr	r3, [pc, #68]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6de:	2200      	movs	r2, #0
 800a6e0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a6e2:	4b10      	ldr	r3, [pc, #64]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6e4:	2201      	movs	r2, #1
 800a6e6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800a6e8:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6ea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a6ee:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800a6f0:	4b0c      	ldr	r3, [pc, #48]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6f2:	2220      	movs	r2, #32
 800a6f4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a6f6:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6f8:	2200      	movs	r2, #0
 800a6fa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800a6fc:	4b09      	ldr	r3, [pc, #36]	; (800a724 <MX_SPI2_Init+0x68>)
 800a6fe:	2200      	movs	r2, #0
 800a700:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a702:	4b08      	ldr	r3, [pc, #32]	; (800a724 <MX_SPI2_Init+0x68>)
 800a704:	2200      	movs	r2, #0
 800a706:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800a708:	4b06      	ldr	r3, [pc, #24]	; (800a724 <MX_SPI2_Init+0x68>)
 800a70a:	220a      	movs	r2, #10
 800a70c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a70e:	4805      	ldr	r0, [pc, #20]	; (800a724 <MX_SPI2_Init+0x68>)
 800a710:	f7fa ff01 	bl	8005516 <HAL_SPI_Init>
 800a714:	4603      	mov	r3, r0
 800a716:	2b00      	cmp	r3, #0
 800a718:	d001      	beq.n	800a71e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800a71a:	f001 ff37 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a71e:	bf00      	nop
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	20000318 	.word	0x20000318
 800a728:	40003800 	.word	0x40003800

0800a72c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b096      	sub	sp, #88	; 0x58
 800a730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a732:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a736:	2200      	movs	r2, #0
 800a738:	601a      	str	r2, [r3, #0]
 800a73a:	605a      	str	r2, [r3, #4]
 800a73c:	609a      	str	r2, [r3, #8]
 800a73e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a740:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a744:	2200      	movs	r2, #0
 800a746:	601a      	str	r2, [r3, #0]
 800a748:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a74a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a74e:	2200      	movs	r2, #0
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	605a      	str	r2, [r3, #4]
 800a754:	609a      	str	r2, [r3, #8]
 800a756:	60da      	str	r2, [r3, #12]
 800a758:	611a      	str	r2, [r3, #16]
 800a75a:	615a      	str	r2, [r3, #20]
 800a75c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800a75e:	1d3b      	adds	r3, r7, #4
 800a760:	2220      	movs	r2, #32
 800a762:	2100      	movs	r1, #0
 800a764:	4618      	mov	r0, r3
 800a766:	f002 fec5 	bl	800d4f4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800a76a:	4b57      	ldr	r3, [pc, #348]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a76c:	4a57      	ldr	r2, [pc, #348]	; (800a8cc <MX_TIM1_Init+0x1a0>)
 800a76e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800a770:	4b55      	ldr	r3, [pc, #340]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a772:	2200      	movs	r2, #0
 800a774:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a776:	4b54      	ldr	r3, [pc, #336]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a778:	2200      	movs	r2, #0
 800a77a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 800a77c:	4b52      	ldr	r3, [pc, #328]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a77e:	f640 72ff 	movw	r2, #4095	; 0xfff
 800a782:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a784:	4b50      	ldr	r3, [pc, #320]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a786:	2200      	movs	r2, #0
 800a788:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800a78a:	4b4f      	ldr	r3, [pc, #316]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a78c:	2200      	movs	r2, #0
 800a78e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a790:	4b4d      	ldr	r3, [pc, #308]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a792:	2200      	movs	r2, #0
 800a794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800a796:	484c      	ldr	r0, [pc, #304]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a798:	f7fb fd30 	bl	80061fc <HAL_TIM_Base_Init>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800a7a2:	f001 fef3 	bl	800c58c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a7a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a7aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800a7ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a7b0:	4619      	mov	r1, r3
 800a7b2:	4845      	ldr	r0, [pc, #276]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a7b4:	f7fc face 	bl	8006d54 <HAL_TIM_ConfigClockSource>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d001      	beq.n	800a7c2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800a7be:	f001 fee5 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800a7c2:	4841      	ldr	r0, [pc, #260]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a7c4:	f7fb fe00 	bl	80063c8 <HAL_TIM_PWM_Init>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800a7ce:	f001 fedd 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800a7d2:	483d      	ldr	r0, [pc, #244]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a7d4:	f7fb fd85 	bl	80062e2 <HAL_TIM_OC_Init>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d001      	beq.n	800a7e2 <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800a7de:	f001 fed5 	bl	800c58c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800a7ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a7ee:	4619      	mov	r1, r3
 800a7f0:	4835      	ldr	r0, [pc, #212]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a7f2:	f7fc ffdf 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 800a7fc:	f001 fec6 	bl	800c58c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a800:	2360      	movs	r3, #96	; 0x60
 800a802:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800a804:	2300      	movs	r3, #0
 800a806:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a808:	2300      	movs	r3, #0
 800a80a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800a80c:	2300      	movs	r3, #0
 800a80e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a810:	2300      	movs	r3, #0
 800a812:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800a814:	2300      	movs	r3, #0
 800a816:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800a818:	2300      	movs	r3, #0
 800a81a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a81c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a820:	2200      	movs	r2, #0
 800a822:	4619      	mov	r1, r3
 800a824:	4828      	ldr	r0, [pc, #160]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a826:	f7fc f9cf 	bl	8006bc8 <HAL_TIM_PWM_ConfigChannel>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800a830:	f001 feac 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a838:	2204      	movs	r2, #4
 800a83a:	4619      	mov	r1, r3
 800a83c:	4822      	ldr	r0, [pc, #136]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a83e:	f7fc f9c3 	bl	8006bc8 <HAL_TIM_PWM_ConfigChannel>
 800a842:	4603      	mov	r3, r0
 800a844:	2b00      	cmp	r3, #0
 800a846:	d001      	beq.n	800a84c <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 800a848:	f001 fea0 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a84c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a850:	2208      	movs	r2, #8
 800a852:	4619      	mov	r1, r3
 800a854:	481c      	ldr	r0, [pc, #112]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a856:	f7fc f9b7 	bl	8006bc8 <HAL_TIM_PWM_ConfigChannel>
 800a85a:	4603      	mov	r3, r0
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d001      	beq.n	800a864 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 800a860:	f001 fe94 	bl	800c58c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800a864:	2330      	movs	r3, #48	; 0x30
 800a866:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 1900;
 800a868:	f240 736c 	movw	r3, #1900	; 0x76c
 800a86c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a86e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a872:	220c      	movs	r2, #12
 800a874:	4619      	mov	r1, r3
 800a876:	4814      	ldr	r0, [pc, #80]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a878:	f7fc f8aa 	bl	80069d0 <HAL_TIM_OC_ConfigChannel>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800a882:	f001 fe83 	bl	800c58c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800a886:	2300      	movs	r3, #0
 800a888:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800a88a:	2300      	movs	r3, #0
 800a88c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800a896:	2300      	movs	r3, #0
 800a898:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800a89a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a89e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800a8a4:	1d3b      	adds	r3, r7, #4
 800a8a6:	4619      	mov	r1, r3
 800a8a8:	4807      	ldr	r0, [pc, #28]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a8aa:	f7fc ffff 	bl	80078ac <HAL_TIMEx_ConfigBreakDeadTime>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d001      	beq.n	800a8b8 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 800a8b4:	f001 fe6a 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800a8b8:	4803      	ldr	r0, [pc, #12]	; (800a8c8 <MX_TIM1_Init+0x19c>)
 800a8ba:	f002 fb4d 	bl	800cf58 <HAL_TIM_MspPostInit>

}
 800a8be:	bf00      	nop
 800a8c0:	3758      	adds	r7, #88	; 0x58
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
 800a8c6:	bf00      	nop
 800a8c8:	20000f2c 	.word	0x20000f2c
 800a8cc:	40010000 	.word	0x40010000

0800a8d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08e      	sub	sp, #56	; 0x38
 800a8d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a8d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a8da:	2200      	movs	r2, #0
 800a8dc:	601a      	str	r2, [r3, #0]
 800a8de:	605a      	str	r2, [r3, #4]
 800a8e0:	609a      	str	r2, [r3, #8]
 800a8e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a8e4:	f107 0320 	add.w	r3, r7, #32
 800a8e8:	2200      	movs	r2, #0
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a8ee:	1d3b      	adds	r3, r7, #4
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]
 800a8f4:	605a      	str	r2, [r3, #4]
 800a8f6:	609a      	str	r2, [r3, #8]
 800a8f8:	60da      	str	r2, [r3, #12]
 800a8fa:	611a      	str	r2, [r3, #16]
 800a8fc:	615a      	str	r2, [r3, #20]
 800a8fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a900:	4b2b      	ldr	r3, [pc, #172]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a902:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a906:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7;
 800a908:	4b29      	ldr	r3, [pc, #164]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a90a:	2207      	movs	r2, #7
 800a90c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a90e:	4b28      	ldr	r3, [pc, #160]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a910:	2200      	movs	r2, #0
 800a912:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800a914:	4b26      	ldr	r3, [pc, #152]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a916:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a91a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a91c:	4b24      	ldr	r3, [pc, #144]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a91e:	2200      	movs	r2, #0
 800a920:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a922:	4b23      	ldr	r3, [pc, #140]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a924:	2200      	movs	r2, #0
 800a926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a928:	4821      	ldr	r0, [pc, #132]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a92a:	f7fb fc67 	bl	80061fc <HAL_TIM_Base_Init>
 800a92e:	4603      	mov	r3, r0
 800a930:	2b00      	cmp	r3, #0
 800a932:	d001      	beq.n	800a938 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800a934:	f001 fe2a 	bl	800c58c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a93c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a93e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a942:	4619      	mov	r1, r3
 800a944:	481a      	ldr	r0, [pc, #104]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a946:	f7fc fa05 	bl	8006d54 <HAL_TIM_ConfigClockSource>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d001      	beq.n	800a954 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800a950:	f001 fe1c 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800a954:	4816      	ldr	r0, [pc, #88]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a956:	f7fb fcc4 	bl	80062e2 <HAL_TIM_OC_Init>
 800a95a:	4603      	mov	r3, r0
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d001      	beq.n	800a964 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800a960:	f001 fe14 	bl	800c58c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a964:	2300      	movs	r3, #0
 800a966:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a968:	2300      	movs	r3, #0
 800a96a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a96c:	f107 0320 	add.w	r3, r7, #32
 800a970:	4619      	mov	r1, r3
 800a972:	480f      	ldr	r0, [pc, #60]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a974:	f7fc ff1e 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 800a978:	4603      	mov	r3, r0
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d001      	beq.n	800a982 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800a97e:	f001 fe05 	bl	800c58c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800a982:	2300      	movs	r3, #0
 800a984:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a986:	2300      	movs	r3, #0
 800a988:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a98a:	2300      	movs	r3, #0
 800a98c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a98e:	2300      	movs	r3, #0
 800a990:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a992:	1d3b      	adds	r3, r7, #4
 800a994:	2200      	movs	r2, #0
 800a996:	4619      	mov	r1, r3
 800a998:	4805      	ldr	r0, [pc, #20]	; (800a9b0 <MX_TIM2_Init+0xe0>)
 800a99a:	f7fc f819 	bl	80069d0 <HAL_TIM_OC_ConfigChannel>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d001      	beq.n	800a9a8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800a9a4:	f001 fdf2 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a9a8:	bf00      	nop
 800a9aa:	3738      	adds	r7, #56	; 0x38
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	20001a30 	.word	0x20001a30

0800a9b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b08e      	sub	sp, #56	; 0x38
 800a9b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a9ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	605a      	str	r2, [r3, #4]
 800a9c4:	609a      	str	r2, [r3, #8]
 800a9c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a9c8:	f107 0320 	add.w	r3, r7, #32
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	601a      	str	r2, [r3, #0]
 800a9d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a9d2:	1d3b      	adds	r3, r7, #4
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	601a      	str	r2, [r3, #0]
 800a9d8:	605a      	str	r2, [r3, #4]
 800a9da:	609a      	str	r2, [r3, #8]
 800a9dc:	60da      	str	r2, [r3, #12]
 800a9de:	611a      	str	r2, [r3, #16]
 800a9e0:	615a      	str	r2, [r3, #20]
 800a9e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800a9e4:	4b2b      	ldr	r3, [pc, #172]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800a9e6:	4a2c      	ldr	r2, [pc, #176]	; (800aa98 <MX_TIM3_Init+0xe4>)
 800a9e8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 800a9ea:	4b2a      	ldr	r3, [pc, #168]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800a9ec:	2253      	movs	r2, #83	; 0x53
 800a9ee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a9f0:	4b28      	ldr	r3, [pc, #160]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 800a9f6:	4b27      	ldr	r3, [pc, #156]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800a9f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a9fc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a9fe:	4b25      	ldr	r3, [pc, #148]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800aa00:	2200      	movs	r2, #0
 800aa02:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aa04:	4b23      	ldr	r3, [pc, #140]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800aa0a:	4822      	ldr	r0, [pc, #136]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800aa0c:	f7fb fbf6 	bl	80061fc <HAL_TIM_Base_Init>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d001      	beq.n	800aa1a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800aa16:	f001 fdb9 	bl	800c58c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aa1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa1e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800aa20:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aa24:	4619      	mov	r1, r3
 800aa26:	481b      	ldr	r0, [pc, #108]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800aa28:	f7fc f994 	bl	8006d54 <HAL_TIM_ConfigClockSource>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d001      	beq.n	800aa36 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800aa32:	f001 fdab 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800aa36:	4817      	ldr	r0, [pc, #92]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800aa38:	f7fb fc53 	bl	80062e2 <HAL_TIM_OC_Init>
 800aa3c:	4603      	mov	r3, r0
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d001      	beq.n	800aa46 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800aa42:	f001 fda3 	bl	800c58c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800aa46:	2300      	movs	r3, #0
 800aa48:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800aa4e:	f107 0320 	add.w	r3, r7, #32
 800aa52:	4619      	mov	r1, r3
 800aa54:	480f      	ldr	r0, [pc, #60]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800aa56:	f7fc fead 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d001      	beq.n	800aa64 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800aa60:	f001 fd94 	bl	800c58c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800aa64:	2330      	movs	r3, #48	; 0x30
 800aa66:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800aa70:	2300      	movs	r3, #0
 800aa72:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800aa74:	1d3b      	adds	r3, r7, #4
 800aa76:	2200      	movs	r2, #0
 800aa78:	4619      	mov	r1, r3
 800aa7a:	4806      	ldr	r0, [pc, #24]	; (800aa94 <MX_TIM3_Init+0xe0>)
 800aa7c:	f7fb ffa8 	bl	80069d0 <HAL_TIM_OC_ConfigChannel>
 800aa80:	4603      	mov	r3, r0
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d001      	beq.n	800aa8a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800aa86:	f001 fd81 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800aa8a:	bf00      	nop
 800aa8c:	3738      	adds	r7, #56	; 0x38
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	20000d40 	.word	0x20000d40
 800aa98:	40000400 	.word	0x40000400

0800aa9c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b086      	sub	sp, #24
 800aaa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800aaa2:	f107 0308 	add.w	r3, r7, #8
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]
 800aaaa:	605a      	str	r2, [r3, #4]
 800aaac:	609a      	str	r2, [r3, #8]
 800aaae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800aab0:	463b      	mov	r3, r7
 800aab2:	2200      	movs	r2, #0
 800aab4:	601a      	str	r2, [r3, #0]
 800aab6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800aab8:	4b1d      	ldr	r3, [pc, #116]	; (800ab30 <MX_TIM5_Init+0x94>)
 800aaba:	4a1e      	ldr	r2, [pc, #120]	; (800ab34 <MX_TIM5_Init+0x98>)
 800aabc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 800aabe:	4b1c      	ldr	r3, [pc, #112]	; (800ab30 <MX_TIM5_Init+0x94>)
 800aac0:	f240 3247 	movw	r2, #839	; 0x347
 800aac4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800aac6:	4b1a      	ldr	r3, [pc, #104]	; (800ab30 <MX_TIM5_Init+0x94>)
 800aac8:	2200      	movs	r2, #0
 800aaca:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800aacc:	4b18      	ldr	r3, [pc, #96]	; (800ab30 <MX_TIM5_Init+0x94>)
 800aace:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800aad2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800aad4:	4b16      	ldr	r3, [pc, #88]	; (800ab30 <MX_TIM5_Init+0x94>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800aada:	4b15      	ldr	r3, [pc, #84]	; (800ab30 <MX_TIM5_Init+0x94>)
 800aadc:	2200      	movs	r2, #0
 800aade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800aae0:	4813      	ldr	r0, [pc, #76]	; (800ab30 <MX_TIM5_Init+0x94>)
 800aae2:	f7fb fb8b 	bl	80061fc <HAL_TIM_Base_Init>
 800aae6:	4603      	mov	r3, r0
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800aaec:	f001 fd4e 	bl	800c58c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800aaf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaf4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800aaf6:	f107 0308 	add.w	r3, r7, #8
 800aafa:	4619      	mov	r1, r3
 800aafc:	480c      	ldr	r0, [pc, #48]	; (800ab30 <MX_TIM5_Init+0x94>)
 800aafe:	f7fc f929 	bl	8006d54 <HAL_TIM_ConfigClockSource>
 800ab02:	4603      	mov	r3, r0
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d001      	beq.n	800ab0c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800ab08:	f001 fd40 	bl	800c58c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab10:	2300      	movs	r3, #0
 800ab12:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800ab14:	463b      	mov	r3, r7
 800ab16:	4619      	mov	r1, r3
 800ab18:	4805      	ldr	r0, [pc, #20]	; (800ab30 <MX_TIM5_Init+0x94>)
 800ab1a:	f7fc fe4b 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d001      	beq.n	800ab28 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 800ab24:	f001 fd32 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800ab28:	bf00      	nop
 800ab2a:	3718      	adds	r7, #24
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}
 800ab30:	20000cfc 	.word	0x20000cfc
 800ab34:	40000c00 	.word	0x40000c00

0800ab38 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b082      	sub	sp, #8
 800ab3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800ab3e:	463b      	mov	r3, r7
 800ab40:	2200      	movs	r2, #0
 800ab42:	601a      	str	r2, [r3, #0]
 800ab44:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800ab46:	4b15      	ldr	r3, [pc, #84]	; (800ab9c <MX_TIM6_Init+0x64>)
 800ab48:	4a15      	ldr	r2, [pc, #84]	; (800aba0 <MX_TIM6_Init+0x68>)
 800ab4a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 83;
 800ab4c:	4b13      	ldr	r3, [pc, #76]	; (800ab9c <MX_TIM6_Init+0x64>)
 800ab4e:	2253      	movs	r2, #83	; 0x53
 800ab50:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ab52:	4b12      	ldr	r3, [pc, #72]	; (800ab9c <MX_TIM6_Init+0x64>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 800ab58:	4b10      	ldr	r3, [pc, #64]	; (800ab9c <MX_TIM6_Init+0x64>)
 800ab5a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ab5e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ab60:	4b0e      	ldr	r3, [pc, #56]	; (800ab9c <MX_TIM6_Init+0x64>)
 800ab62:	2200      	movs	r2, #0
 800ab64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800ab66:	480d      	ldr	r0, [pc, #52]	; (800ab9c <MX_TIM6_Init+0x64>)
 800ab68:	f7fb fb48 	bl	80061fc <HAL_TIM_Base_Init>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d001      	beq.n	800ab76 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800ab72:	f001 fd0b 	bl	800c58c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800ab76:	2300      	movs	r3, #0
 800ab78:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800ab7e:	463b      	mov	r3, r7
 800ab80:	4619      	mov	r1, r3
 800ab82:	4806      	ldr	r0, [pc, #24]	; (800ab9c <MX_TIM6_Init+0x64>)
 800ab84:	f7fc fe16 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 800ab88:	4603      	mov	r3, r0
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d001      	beq.n	800ab92 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800ab8e:	f001 fcfd 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800ab92:	bf00      	nop
 800ab94:	3708      	adds	r7, #8
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	20000eec 	.word	0x20000eec
 800aba0:	40001000 	.word	0x40001000

0800aba4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08c      	sub	sp, #48	; 0x30
 800aba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800abaa:	f107 030c 	add.w	r3, r7, #12
 800abae:	2224      	movs	r2, #36	; 0x24
 800abb0:	2100      	movs	r1, #0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f002 fc9e 	bl	800d4f4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800abb8:	1d3b      	adds	r3, r7, #4
 800abba:	2200      	movs	r2, #0
 800abbc:	601a      	str	r2, [r3, #0]
 800abbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800abc0:	4b22      	ldr	r3, [pc, #136]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800abc2:	4a23      	ldr	r2, [pc, #140]	; (800ac50 <MX_TIM8_Init+0xac>)
 800abc4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800abc6:	4b21      	ldr	r3, [pc, #132]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800abc8:	2200      	movs	r2, #0
 800abca:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800abcc:	4b1f      	ldr	r3, [pc, #124]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800abce:	2200      	movs	r2, #0
 800abd0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1999;
 800abd2:	4b1e      	ldr	r3, [pc, #120]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800abd4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800abd8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800abda:	4b1c      	ldr	r3, [pc, #112]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800abdc:	2200      	movs	r2, #0
 800abde:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800abe0:	4b1a      	ldr	r3, [pc, #104]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800abe2:	2200      	movs	r2, #0
 800abe4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800abe6:	4b19      	ldr	r3, [pc, #100]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800abe8:	2200      	movs	r2, #0
 800abea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800abec:	2303      	movs	r3, #3
 800abee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800abf0:	2300      	movs	r3, #0
 800abf2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800abf4:	2301      	movs	r3, #1
 800abf6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800abf8:	2300      	movs	r3, #0
 800abfa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800abfc:	2300      	movs	r3, #0
 800abfe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800ac00:	2300      	movs	r3, #0
 800ac02:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800ac04:	2301      	movs	r3, #1
 800ac06:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800ac08:	2300      	movs	r3, #0
 800ac0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800ac10:	f107 030c 	add.w	r3, r7, #12
 800ac14:	4619      	mov	r1, r3
 800ac16:	480d      	ldr	r0, [pc, #52]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800ac18:	f7fb fce8 	bl	80065ec <HAL_TIM_Encoder_Init>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800ac22:	f001 fcb3 	bl	800c58c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800ac26:	2320      	movs	r3, #32
 800ac28:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800ac2a:	2300      	movs	r3, #0
 800ac2c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800ac2e:	1d3b      	adds	r3, r7, #4
 800ac30:	4619      	mov	r1, r3
 800ac32:	4806      	ldr	r0, [pc, #24]	; (800ac4c <MX_TIM8_Init+0xa8>)
 800ac34:	f7fc fdbe 	bl	80077b4 <HAL_TIMEx_MasterConfigSynchronization>
 800ac38:	4603      	mov	r3, r0
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d001      	beq.n	800ac42 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 800ac3e:	f001 fca5 	bl	800c58c <Error_Handler>
  //HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 800ac42:	bf00      	nop
 800ac44:	3730      	adds	r7, #48	; 0x30
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}
 800ac4a:	bf00      	nop
 800ac4c:	200006b8 	.word	0x200006b8
 800ac50:	40010400 	.word	0x40010400

0800ac54 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b08c      	sub	sp, #48	; 0x30
 800ac58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ac5a:	f107 0320 	add.w	r3, r7, #32
 800ac5e:	2200      	movs	r2, #0
 800ac60:	601a      	str	r2, [r3, #0]
 800ac62:	605a      	str	r2, [r3, #4]
 800ac64:	609a      	str	r2, [r3, #8]
 800ac66:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ac68:	1d3b      	adds	r3, r7, #4
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	601a      	str	r2, [r3, #0]
 800ac6e:	605a      	str	r2, [r3, #4]
 800ac70:	609a      	str	r2, [r3, #8]
 800ac72:	60da      	str	r2, [r3, #12]
 800ac74:	611a      	str	r2, [r3, #16]
 800ac76:	615a      	str	r2, [r3, #20]
 800ac78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800ac7a:	4b2d      	ldr	r3, [pc, #180]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800ac7c:	4a2d      	ldr	r2, [pc, #180]	; (800ad34 <MX_TIM9_Init+0xe0>)
 800ac7e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 167;
 800ac80:	4b2b      	ldr	r3, [pc, #172]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800ac82:	22a7      	movs	r2, #167	; 0xa7
 800ac84:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac86:	4b2a      	ldr	r3, [pc, #168]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800ac88:	2200      	movs	r2, #0
 800ac8a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 800ac8c:	4b28      	ldr	r3, [pc, #160]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800ac8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ac92:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ac94:	4b26      	ldr	r3, [pc, #152]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800ac96:	2200      	movs	r2, #0
 800ac98:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac9a:	4b25      	ldr	r3, [pc, #148]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800aca0:	4823      	ldr	r0, [pc, #140]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800aca2:	f7fb faab 	bl	80061fc <HAL_TIM_Base_Init>
 800aca6:	4603      	mov	r3, r0
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d001      	beq.n	800acb0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800acac:	f001 fc6e 	bl	800c58c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800acb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acb4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800acb6:	f107 0320 	add.w	r3, r7, #32
 800acba:	4619      	mov	r1, r3
 800acbc:	481c      	ldr	r0, [pc, #112]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800acbe:	f7fc f849 	bl	8006d54 <HAL_TIM_ConfigClockSource>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d001      	beq.n	800accc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 800acc8:	f001 fc60 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800accc:	4818      	ldr	r0, [pc, #96]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800acce:	f7fb fb7b 	bl	80063c8 <HAL_TIM_PWM_Init>
 800acd2:	4603      	mov	r3, r0
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d001      	beq.n	800acdc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 800acd8:	f001 fc58 	bl	800c58c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800acdc:	2360      	movs	r3, #96	; 0x60
 800acde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 800ace0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ace4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800acee:	1d3b      	adds	r3, r7, #4
 800acf0:	2200      	movs	r2, #0
 800acf2:	4619      	mov	r1, r3
 800acf4:	480e      	ldr	r0, [pc, #56]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800acf6:	f7fb ff67 	bl	8006bc8 <HAL_TIM_PWM_ConfigChannel>
 800acfa:	4603      	mov	r3, r0
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d001      	beq.n	800ad04 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 800ad00:	f001 fc44 	bl	800c58c <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 800ad04:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800ad08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800ad0a:	1d3b      	adds	r3, r7, #4
 800ad0c:	2204      	movs	r2, #4
 800ad0e:	4619      	mov	r1, r3
 800ad10:	4807      	ldr	r0, [pc, #28]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800ad12:	f7fb ff59 	bl	8006bc8 <HAL_TIM_PWM_ConfigChannel>
 800ad16:	4603      	mov	r3, r0
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d001      	beq.n	800ad20 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 800ad1c:	f001 fc36 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800ad20:	4803      	ldr	r0, [pc, #12]	; (800ad30 <MX_TIM9_Init+0xdc>)
 800ad22:	f002 f919 	bl	800cf58 <HAL_TIM_MspPostInit>

}
 800ad26:	bf00      	nop
 800ad28:	3730      	adds	r7, #48	; 0x30
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	bf00      	nop
 800ad30:	20001978 	.word	0x20001978
 800ad34:	40014000 	.word	0x40014000

0800ad38 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b08c      	sub	sp, #48	; 0x30
 800ad3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800ad3e:	f107 0320 	add.w	r3, r7, #32
 800ad42:	2200      	movs	r2, #0
 800ad44:	601a      	str	r2, [r3, #0]
 800ad46:	605a      	str	r2, [r3, #4]
 800ad48:	609a      	str	r2, [r3, #8]
 800ad4a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800ad4c:	1d3b      	adds	r3, r7, #4
 800ad4e:	2200      	movs	r2, #0
 800ad50:	601a      	str	r2, [r3, #0]
 800ad52:	605a      	str	r2, [r3, #4]
 800ad54:	609a      	str	r2, [r3, #8]
 800ad56:	60da      	str	r2, [r3, #12]
 800ad58:	611a      	str	r2, [r3, #16]
 800ad5a:	615a      	str	r2, [r3, #20]
 800ad5c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800ad5e:	4b24      	ldr	r3, [pc, #144]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800ad60:	4a24      	ldr	r2, [pc, #144]	; (800adf4 <MX_TIM12_Init+0xbc>)
 800ad62:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 7;
 800ad64:	4b22      	ldr	r3, [pc, #136]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800ad66:	2207      	movs	r2, #7
 800ad68:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ad6a:	4b21      	ldr	r3, [pc, #132]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800ad70:	4b1f      	ldr	r3, [pc, #124]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800ad72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad76:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ad78:	4b1d      	ldr	r3, [pc, #116]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ad7e:	4b1c      	ldr	r3, [pc, #112]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800ad80:	2200      	movs	r2, #0
 800ad82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 800ad84:	481a      	ldr	r0, [pc, #104]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800ad86:	f7fb fa39 	bl	80061fc <HAL_TIM_Base_Init>
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d001      	beq.n	800ad94 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800ad90:	f001 fbfc 	bl	800c58c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800ad94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad98:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 800ad9a:	f107 0320 	add.w	r3, r7, #32
 800ad9e:	4619      	mov	r1, r3
 800ada0:	4813      	ldr	r0, [pc, #76]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800ada2:	f7fb ffd7 	bl	8006d54 <HAL_TIM_ConfigClockSource>
 800ada6:	4603      	mov	r3, r0
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d001      	beq.n	800adb0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 800adac:	f001 fbee 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim12) != HAL_OK)
 800adb0:	480f      	ldr	r0, [pc, #60]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800adb2:	f7fb fa96 	bl	80062e2 <HAL_TIM_OC_Init>
 800adb6:	4603      	mov	r3, r0
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d001      	beq.n	800adc0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 800adbc:	f001 fbe6 	bl	800c58c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800adc0:	2300      	movs	r3, #0
 800adc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800adc4:	2300      	movs	r3, #0
 800adc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800adc8:	2300      	movs	r3, #0
 800adca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800adcc:	2300      	movs	r3, #0
 800adce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800add0:	1d3b      	adds	r3, r7, #4
 800add2:	2200      	movs	r2, #0
 800add4:	4619      	mov	r1, r3
 800add6:	4806      	ldr	r0, [pc, #24]	; (800adf0 <MX_TIM12_Init+0xb8>)
 800add8:	f7fb fdfa 	bl	80069d0 <HAL_TIM_OC_ConfigChannel>
 800addc:	4603      	mov	r3, r0
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d001      	beq.n	800ade6 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 800ade2:	f001 fbd3 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 800ade6:	bf00      	nop
 800ade8:	3730      	adds	r7, #48	; 0x30
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20001b18 	.word	0x20001b18
 800adf4:	40001800 	.word	0x40001800

0800adf8 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 800adfe:	463b      	mov	r3, r7
 800ae00:	2200      	movs	r2, #0
 800ae02:	601a      	str	r2, [r3, #0]
 800ae04:	605a      	str	r2, [r3, #4]
 800ae06:	609a      	str	r2, [r3, #8]
 800ae08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800ae0a:	4b1c      	ldr	r3, [pc, #112]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae0c:	4a1c      	ldr	r2, [pc, #112]	; (800ae80 <MX_TIM13_Init+0x88>)
 800ae0e:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800ae10:	4b1a      	ldr	r3, [pc, #104]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae12:	2200      	movs	r2, #0
 800ae14:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ae16:	4b19      	ldr	r3, [pc, #100]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae18:	2200      	movs	r2, #0
 800ae1a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 800ae1c:	4b17      	ldr	r3, [pc, #92]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae1e:	2200      	movs	r2, #0
 800ae20:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800ae22:	4b16      	ldr	r3, [pc, #88]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae24:	2200      	movs	r2, #0
 800ae26:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ae28:	4b14      	ldr	r3, [pc, #80]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800ae2e:	4813      	ldr	r0, [pc, #76]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae30:	f7fb f9e4 	bl	80061fc <HAL_TIM_Base_Init>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 800ae3a:	f001 fba7 	bl	800c58c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 800ae3e:	480f      	ldr	r0, [pc, #60]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae40:	f7fb fb36 	bl	80064b0 <HAL_TIM_IC_Init>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 800ae4a:	f001 fb9f 	bl	800c58c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800ae4e:	2300      	movs	r3, #0
 800ae50:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800ae52:	2301      	movs	r3, #1
 800ae54:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800ae56:	2300      	movs	r3, #0
 800ae58:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800ae5e:	463b      	mov	r3, r7
 800ae60:	2200      	movs	r2, #0
 800ae62:	4619      	mov	r1, r3
 800ae64:	4805      	ldr	r0, [pc, #20]	; (800ae7c <MX_TIM13_Init+0x84>)
 800ae66:	f7fb fe13 	bl	8006a90 <HAL_TIM_IC_ConfigChannel>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 800ae70:	f001 fb8c 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800ae74:	bf00      	nop
 800ae76:	3710      	adds	r7, #16
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	20000e28 	.word	0x20000e28
 800ae80:	40001c00 	.word	0x40001c00

0800ae84 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800ae88:	4b11      	ldr	r3, [pc, #68]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800ae8a:	4a12      	ldr	r2, [pc, #72]	; (800aed4 <MX_USART3_UART_Init+0x50>)
 800ae8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800ae8e:	4b10      	ldr	r3, [pc, #64]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800ae90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800ae94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800ae96:	4b0e      	ldr	r3, [pc, #56]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800ae98:	2200      	movs	r2, #0
 800ae9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800ae9c:	4b0c      	ldr	r3, [pc, #48]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800ae9e:	2200      	movs	r2, #0
 800aea0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800aea2:	4b0b      	ldr	r3, [pc, #44]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800aea8:	4b09      	ldr	r3, [pc, #36]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800aeaa:	220c      	movs	r2, #12
 800aeac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800aeae:	4b08      	ldr	r3, [pc, #32]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800aeb4:	4b06      	ldr	r3, [pc, #24]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800aeba:	4805      	ldr	r0, [pc, #20]	; (800aed0 <MX_USART3_UART_Init+0x4c>)
 800aebc:	f7fc fd81 	bl	80079c2 <HAL_UART_Init>
 800aec0:	4603      	mov	r3, r0
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d001      	beq.n	800aeca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800aec6:	f001 fb61 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800aeca:	bf00      	nop
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	200006f8 	.word	0x200006f8
 800aed4:	40004800 	.word	0x40004800

0800aed8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aedc:	4b14      	ldr	r3, [pc, #80]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aede:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aee2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aee4:	4b12      	ldr	r3, [pc, #72]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aee6:	2204      	movs	r2, #4
 800aee8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aeea:	4b11      	ldr	r3, [pc, #68]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aeec:	2202      	movs	r2, #2
 800aeee:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aef0:	4b0f      	ldr	r3, [pc, #60]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aef2:	2200      	movs	r2, #0
 800aef4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aef6:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aef8:	2202      	movs	r2, #2
 800aefa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aefc:	4b0c      	ldr	r3, [pc, #48]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800aefe:	2200      	movs	r2, #0
 800af00:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800af02:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800af04:	2200      	movs	r2, #0
 800af06:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800af08:	4b09      	ldr	r3, [pc, #36]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800af0a:	2200      	movs	r2, #0
 800af0c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800af0e:	4b08      	ldr	r3, [pc, #32]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800af10:	2200      	movs	r2, #0
 800af12:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800af14:	4b06      	ldr	r3, [pc, #24]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800af16:	2200      	movs	r2, #0
 800af18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800af1a:	4805      	ldr	r0, [pc, #20]	; (800af30 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800af1c:	f7f9 fba9 	bl	8004672 <HAL_PCD_Init>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d001      	beq.n	800af2a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800af26:	f001 fb31 	bl	800c58c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800af2a:	bf00      	nop
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	200007d4 	.word	0x200007d4

0800af34 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b082      	sub	sp, #8
 800af38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800af3a:	2300      	movs	r3, #0
 800af3c:	607b      	str	r3, [r7, #4]
 800af3e:	4b1f      	ldr	r3, [pc, #124]	; (800afbc <MX_DMA_Init+0x88>)
 800af40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af42:	4a1e      	ldr	r2, [pc, #120]	; (800afbc <MX_DMA_Init+0x88>)
 800af44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800af48:	6313      	str	r3, [r2, #48]	; 0x30
 800af4a:	4b1c      	ldr	r3, [pc, #112]	; (800afbc <MX_DMA_Init+0x88>)
 800af4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af52:	607b      	str	r3, [r7, #4]
 800af54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800af56:	2300      	movs	r3, #0
 800af58:	603b      	str	r3, [r7, #0]
 800af5a:	4b18      	ldr	r3, [pc, #96]	; (800afbc <MX_DMA_Init+0x88>)
 800af5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af5e:	4a17      	ldr	r2, [pc, #92]	; (800afbc <MX_DMA_Init+0x88>)
 800af60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800af64:	6313      	str	r3, [r2, #48]	; 0x30
 800af66:	4b15      	ldr	r3, [pc, #84]	; (800afbc <MX_DMA_Init+0x88>)
 800af68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af6e:	603b      	str	r3, [r7, #0]
 800af70:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800af72:	2200      	movs	r2, #0
 800af74:	2100      	movs	r1, #0
 800af76:	200e      	movs	r0, #14
 800af78:	f7f7 fdf3 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800af7c:	200e      	movs	r0, #14
 800af7e:	f7f7 fe0c 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800af82:	2200      	movs	r2, #0
 800af84:	2100      	movs	r1, #0
 800af86:	2038      	movs	r0, #56	; 0x38
 800af88:	f7f7 fdeb 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800af8c:	2038      	movs	r0, #56	; 0x38
 800af8e:	f7f7 fe04 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800af92:	2200      	movs	r2, #0
 800af94:	2100      	movs	r1, #0
 800af96:	2039      	movs	r0, #57	; 0x39
 800af98:	f7f7 fde3 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800af9c:	2039      	movs	r0, #57	; 0x39
 800af9e:	f7f7 fdfc 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800afa2:	2200      	movs	r2, #0
 800afa4:	2100      	movs	r1, #0
 800afa6:	203a      	movs	r0, #58	; 0x3a
 800afa8:	f7f7 fddb 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800afac:	203a      	movs	r0, #58	; 0x3a
 800afae:	f7f7 fdf4 	bl	8002b9a <HAL_NVIC_EnableIRQ>

}
 800afb2:	bf00      	nop
 800afb4:	3708      	adds	r7, #8
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	40023800 	.word	0x40023800

0800afc0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b08c      	sub	sp, #48	; 0x30
 800afc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800afc6:	f107 031c 	add.w	r3, r7, #28
 800afca:	2200      	movs	r2, #0
 800afcc:	601a      	str	r2, [r3, #0]
 800afce:	605a      	str	r2, [r3, #4]
 800afd0:	609a      	str	r2, [r3, #8]
 800afd2:	60da      	str	r2, [r3, #12]
 800afd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800afd6:	2300      	movs	r3, #0
 800afd8:	61bb      	str	r3, [r7, #24]
 800afda:	4b61      	ldr	r3, [pc, #388]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800afdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afde:	4a60      	ldr	r2, [pc, #384]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800afe0:	f043 0310 	orr.w	r3, r3, #16
 800afe4:	6313      	str	r3, [r2, #48]	; 0x30
 800afe6:	4b5e      	ldr	r3, [pc, #376]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800afe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afea:	f003 0310 	and.w	r3, r3, #16
 800afee:	61bb      	str	r3, [r7, #24]
 800aff0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800aff2:	2300      	movs	r3, #0
 800aff4:	617b      	str	r3, [r7, #20]
 800aff6:	4b5a      	ldr	r3, [pc, #360]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800aff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800affa:	4a59      	ldr	r2, [pc, #356]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800affc:	f043 0304 	orr.w	r3, r3, #4
 800b000:	6313      	str	r3, [r2, #48]	; 0x30
 800b002:	4b57      	ldr	r3, [pc, #348]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b006:	f003 0304 	and.w	r3, r3, #4
 800b00a:	617b      	str	r3, [r7, #20]
 800b00c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800b00e:	2300      	movs	r3, #0
 800b010:	613b      	str	r3, [r7, #16]
 800b012:	4b53      	ldr	r3, [pc, #332]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b016:	4a52      	ldr	r2, [pc, #328]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b01c:	6313      	str	r3, [r2, #48]	; 0x30
 800b01e:	4b50      	ldr	r3, [pc, #320]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b026:	613b      	str	r3, [r7, #16]
 800b028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800b02a:	2300      	movs	r3, #0
 800b02c:	60fb      	str	r3, [r7, #12]
 800b02e:	4b4c      	ldr	r3, [pc, #304]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b032:	4a4b      	ldr	r2, [pc, #300]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b034:	f043 0301 	orr.w	r3, r3, #1
 800b038:	6313      	str	r3, [r2, #48]	; 0x30
 800b03a:	4b49      	ldr	r3, [pc, #292]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b03c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b03e:	f003 0301 	and.w	r3, r3, #1
 800b042:	60fb      	str	r3, [r7, #12]
 800b044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800b046:	2300      	movs	r3, #0
 800b048:	60bb      	str	r3, [r7, #8]
 800b04a:	4b45      	ldr	r3, [pc, #276]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b04e:	4a44      	ldr	r2, [pc, #272]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b050:	f043 0302 	orr.w	r3, r3, #2
 800b054:	6313      	str	r3, [r2, #48]	; 0x30
 800b056:	4b42      	ldr	r3, [pc, #264]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b05a:	f003 0302 	and.w	r3, r3, #2
 800b05e:	60bb      	str	r3, [r7, #8]
 800b060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800b062:	2300      	movs	r3, #0
 800b064:	607b      	str	r3, [r7, #4]
 800b066:	4b3e      	ldr	r3, [pc, #248]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b06a:	4a3d      	ldr	r2, [pc, #244]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b06c:	f043 0308 	orr.w	r3, r3, #8
 800b070:	6313      	str	r3, [r2, #48]	; 0x30
 800b072:	4b3b      	ldr	r3, [pc, #236]	; (800b160 <MX_GPIO_Init+0x1a0>)
 800b074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b076:	f003 0308 	and.w	r3, r3, #8
 800b07a:	607b      	str	r3, [r7, #4]
 800b07c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 800b07e:	2200      	movs	r2, #0
 800b080:	f24c 0118 	movw	r1, #49176	; 0xc018
 800b084:	4837      	ldr	r0, [pc, #220]	; (800b164 <MX_GPIO_Init+0x1a4>)
 800b086:	f7f8 fb21 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800b08a:	2200      	movs	r2, #0
 800b08c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800b090:	4835      	ldr	r0, [pc, #212]	; (800b168 <MX_GPIO_Init+0x1a8>)
 800b092:	f7f8 fb1b 	bl	80036cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800b096:	2200      	movs	r2, #0
 800b098:	f64b 0180 	movw	r1, #47232	; 0xb880
 800b09c:	4833      	ldr	r0, [pc, #204]	; (800b16c <MX_GPIO_Init+0x1ac>)
 800b09e:	f7f8 fb15 	bl	80036cc <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 800b0a2:	f24c 0318 	movw	r3, #49176	; 0xc018
 800b0a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0a8:	2301      	movs	r3, #1
 800b0aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b0b4:	f107 031c 	add.w	r3, r7, #28
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	482a      	ldr	r0, [pc, #168]	; (800b164 <MX_GPIO_Init+0x1a4>)
 800b0bc:	f7f8 f96c 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800b0c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b0c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b0d2:	f107 031c 	add.w	r3, r7, #28
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	4823      	ldr	r0, [pc, #140]	; (800b168 <MX_GPIO_Init+0x1a8>)
 800b0da:	f7f8 f95d 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 800b0de:	f64b 0380 	movw	r3, #47232	; 0xb880
 800b0e2:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b0f0:	f107 031c 	add.w	r3, r7, #28
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	481d      	ldr	r0, [pc, #116]	; (800b16c <MX_GPIO_Init+0x1ac>)
 800b0f8:	f7f8 f94e 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 800b0fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b100:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b102:	2300      	movs	r3, #0
 800b104:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b106:	2300      	movs	r3, #0
 800b108:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 800b10a:	f107 031c 	add.w	r3, r7, #28
 800b10e:	4619      	mov	r1, r3
 800b110:	4816      	ldr	r0, [pc, #88]	; (800b16c <MX_GPIO_Init+0x1ac>)
 800b112:	f7f8 f941 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 800b116:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b11a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b11c:	4b14      	ldr	r3, [pc, #80]	; (800b170 <MX_GPIO_Init+0x1b0>)
 800b11e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b120:	2300      	movs	r3, #0
 800b122:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800b124:	f107 031c 	add.w	r3, r7, #28
 800b128:	4619      	mov	r1, r3
 800b12a:	480f      	ldr	r0, [pc, #60]	; (800b168 <MX_GPIO_Init+0x1a8>)
 800b12c:	f7f8 f934 	bl	8003398 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800b130:	2370      	movs	r3, #112	; 0x70
 800b132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b134:	2300      	movs	r3, #0
 800b136:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b138:	2301      	movs	r3, #1
 800b13a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800b13c:	f107 031c 	add.w	r3, r7, #28
 800b140:	4619      	mov	r1, r3
 800b142:	480a      	ldr	r0, [pc, #40]	; (800b16c <MX_GPIO_Init+0x1ac>)
 800b144:	f7f8 f928 	bl	8003398 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800b148:	2200      	movs	r2, #0
 800b14a:	2100      	movs	r1, #0
 800b14c:	2017      	movs	r0, #23
 800b14e:	f7f7 fd08 	bl	8002b62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800b152:	2017      	movs	r0, #23
 800b154:	f7f7 fd21 	bl	8002b9a <HAL_NVIC_EnableIRQ>

}
 800b158:	bf00      	nop
 800b15a:	3730      	adds	r7, #48	; 0x30
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}
 800b160:	40023800 	.word	0x40023800
 800b164:	40021000 	.word	0x40021000
 800b168:	40020800 	.word	0x40020800
 800b16c:	40020c00 	.word	0x40020c00
 800b170:	10110000 	.word	0x10110000

0800b174 <set_pwm_off>:

/* USER CODE BEGIN 4 */

void set_pwm_off(void){
 800b174:	b480      	push	{r7}
 800b176:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800b178:	4b06      	ldr	r3, [pc, #24]	; (800b194 <set_pwm_off+0x20>)
 800b17a:	2200      	movs	r2, #0
 800b17c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800b17e:	4b05      	ldr	r3, [pc, #20]	; (800b194 <set_pwm_off+0x20>)
 800b180:	2200      	movs	r2, #0
 800b182:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800b184:	4b03      	ldr	r3, [pc, #12]	; (800b194 <set_pwm_off+0x20>)
 800b186:	2200      	movs	r2, #0
 800b188:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800b18a:	bf00      	nop
 800b18c:	46bd      	mov	sp, r7
 800b18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b192:	4770      	bx	lr
 800b194:	40010000 	.word	0x40010000

0800b198 <step_through_pole_angles>:

void step_through_pole_angles(void){
 800b198:	b5b0      	push	{r4, r5, r7, lr}
 800b19a:	b0d4      	sub	sp, #336	; 0x150
 800b19c:	af02      	add	r7, sp, #8
	normal_operation_enabled = false;
 800b19e:	4b84      	ldr	r3, [pc, #528]	; (800b3b0 <step_through_pole_angles+0x218>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b1a4:	f7ff ffe6 	bl	800b174 <set_pwm_off>
	HAL_Delay(100);
 800b1a8:	2064      	movs	r0, #100	; 0x64
 800b1aa:	f7f5 ff5f 	bl	800106c <HAL_Delay>
	uint32_t step_through_amp = 5 * PWM_1PERCENT;
 800b1ae:	23cd      	movs	r3, #205	; 0xcd
 800b1b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800b1ba:	e07f      	b.n	800b2bc <step_through_pole_angles+0x124>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800b1c2:	e072      	b.n	800b2aa <step_through_pole_angles+0x112>
			set_pwm_off();
 800b1c4:	f7ff ffd6 	bl	800b174 <set_pwm_off>
			if (ABC==0){
 800b1c8:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d104      	bne.n	800b1da <step_through_pole_angles+0x42>
				TIM1->CCR1 = step_through_amp;
 800b1d0:	4a78      	ldr	r2, [pc, #480]	; (800b3b4 <step_through_pole_angles+0x21c>)
 800b1d2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b1d6:	6353      	str	r3, [r2, #52]	; 0x34
 800b1d8:	e00c      	b.n	800b1f4 <step_through_pole_angles+0x5c>
			}
			else if (ABC==1){
 800b1da:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d104      	bne.n	800b1ec <step_through_pole_angles+0x54>
				if (INVERT){
					TIM1->CCR3 = step_through_amp;
				}
				else{
					TIM1->CCR2 = step_through_amp;
 800b1e2:	4a74      	ldr	r2, [pc, #464]	; (800b3b4 <step_through_pole_angles+0x21c>)
 800b1e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b1e8:	6393      	str	r3, [r2, #56]	; 0x38
 800b1ea:	e003      	b.n	800b1f4 <step_through_pole_angles+0x5c>
			else {
				if (INVERT){
					TIM1->CCR2 = step_through_amp;
				}
				else{
					TIM1->CCR3 = step_through_amp;
 800b1ec:	4a71      	ldr	r2, [pc, #452]	; (800b3b4 <step_through_pole_angles+0x21c>)
 800b1ee:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800b1f2:	63d3      	str	r3, [r2, #60]	; 0x3c
				}
			}
			HAL_Delay(200);
 800b1f4:	20c8      	movs	r0, #200	; 0xc8
 800b1f6:	f7f5 ff39 	bl	800106c <HAL_Delay>
			pole_angles[pole * N_PHASES + ABC]=TIM8->CNT;
 800b1fa:	4b6f      	ldr	r3, [pc, #444]	; (800b3b8 <step_through_pole_angles+0x220>)
 800b1fc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b1fe:	f897 2146 	ldrb.w	r2, [r7, #326]	; 0x146
 800b202:	4613      	mov	r3, r2
 800b204:	005b      	lsls	r3, r3, #1
 800b206:	441a      	add	r2, r3
 800b208:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800b20c:	4413      	add	r3, r2
 800b20e:	b289      	uxth	r1, r1
 800b210:	4a6a      	ldr	r2, [pc, #424]	; (800b3bc <step_through_pole_angles+0x224>)
 800b212:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]



			uint8_t buf[300];
			buf[0] = '\0';
 800b216:	463b      	mov	r3, r7
 800b218:	2200      	movs	r2, #0
 800b21a:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[step_through_pole_angles] pole: %d ABC: %d angle: %d \r\n", pole, ABC, TIM8->CNT);
 800b21c:	f897 2146 	ldrb.w	r2, [r7, #326]	; 0x146
 800b220:	f897 1147 	ldrb.w	r1, [r7, #327]	; 0x147
 800b224:	4b64      	ldr	r3, [pc, #400]	; (800b3b8 <step_through_pole_angles+0x220>)
 800b226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b228:	9300      	str	r3, [sp, #0]
 800b22a:	460b      	mov	r3, r1
 800b22c:	4964      	ldr	r1, [pc, #400]	; (800b3c0 <step_through_pole_angles+0x228>)
 800b22e:	4865      	ldr	r0, [pc, #404]	; (800b3c4 <step_through_pole_angles+0x22c>)
 800b230:	f002 ffe0 	bl	800e1f4 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800b234:	4863      	ldr	r0, [pc, #396]	; (800b3c4 <step_through_pole_angles+0x22c>)
 800b236:	f7f4 ffcb 	bl	80001d0 <strlen>
 800b23a:	4604      	mov	r4, r0
 800b23c:	4862      	ldr	r0, [pc, #392]	; (800b3c8 <step_through_pole_angles+0x230>)
 800b23e:	f7f4 ffc7 	bl	80001d0 <strlen>
 800b242:	4603      	mov	r3, r0
 800b244:	4423      	add	r3, r4
 800b246:	2b63      	cmp	r3, #99	; 0x63
 800b248:	d804      	bhi.n	800b254 <step_through_pole_angles+0xbc>
				strcat(buf_msgs, buf_msg);
 800b24a:	495e      	ldr	r1, [pc, #376]	; (800b3c4 <step_through_pole_angles+0x22c>)
 800b24c:	485e      	ldr	r0, [pc, #376]	; (800b3c8 <step_through_pole_angles+0x230>)
 800b24e:	f002 fff1 	bl	800e234 <strcat>
 800b252:	e002      	b.n	800b25a <step_through_pole_angles+0xc2>
			}
			else {
				buf_msgs[0] = '#';
 800b254:	4b5c      	ldr	r3, [pc, #368]	; (800b3c8 <step_through_pole_angles+0x230>)
 800b256:	2223      	movs	r2, #35	; 0x23
 800b258:	701a      	strb	r2, [r3, #0]
			}
			if (buf_msgs[0] != '\0'){
 800b25a:	4b5b      	ldr	r3, [pc, #364]	; (800b3c8 <step_through_pole_angles+0x230>)
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d007      	beq.n	800b272 <step_through_pole_angles+0xda>
				strcat(buf, buf_msgs);
 800b262:	463b      	mov	r3, r7
 800b264:	4958      	ldr	r1, [pc, #352]	; (800b3c8 <step_through_pole_angles+0x230>)
 800b266:	4618      	mov	r0, r3
 800b268:	f002 ffe4 	bl	800e234 <strcat>
				buf_msgs[0] = '\0';
 800b26c:	4b56      	ldr	r3, [pc, #344]	; (800b3c8 <step_through_pole_angles+0x230>)
 800b26e:	2200      	movs	r2, #0
 800b270:	701a      	strb	r2, [r3, #0]
			}
			//HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf)); //WORKS but replaced by DMA below
			huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800b272:	4b56      	ldr	r3, [pc, #344]	; (800b3cc <step_through_pole_angles+0x234>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	695a      	ldr	r2, [r3, #20]
 800b278:	4b54      	ldr	r3, [pc, #336]	; (800b3cc <step_through_pole_angles+0x234>)
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b280:	615a      	str	r2, [r3, #20]
			HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800b282:	463c      	mov	r4, r7
 800b284:	4b51      	ldr	r3, [pc, #324]	; (800b3cc <step_through_pole_angles+0x234>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	3304      	adds	r3, #4
 800b28a:	461d      	mov	r5, r3
 800b28c:	463b      	mov	r3, r7
 800b28e:	4618      	mov	r0, r3
 800b290:	f7f4 ff9e 	bl	80001d0 <strlen>
 800b294:	4603      	mov	r3, r0
 800b296:	462a      	mov	r2, r5
 800b298:	4621      	mov	r1, r4
 800b29a:	484d      	ldr	r0, [pc, #308]	; (800b3d0 <step_through_pole_angles+0x238>)
 800b29c:	f7f7 fd46 	bl	8002d2c <HAL_DMA_Start_IT>
		for (uint8_t ABC = 0; ABC < N_PHASES ; ABC++){
 800b2a0:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800b2aa:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d988      	bls.n	800b1c4 <step_through_pole_angles+0x2c>
	for (uint8_t pole = 0; pole < N_POLES ; pole++){
 800b2b2:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	f887 3146 	strb.w	r3, [r7, #326]	; 0x146
 800b2bc:	f897 3146 	ldrb.w	r3, [r7, #326]	; 0x146
 800b2c0:	2b06      	cmp	r3, #6
 800b2c2:	f67f af7b 	bls.w	800b1bc <step_through_pole_angles+0x24>

		}
	}
	set_pwm_off();
 800b2c6:	f7ff ff55 	bl	800b174 <set_pwm_off>
	normal_operation_enabled = true;
 800b2ca:	4b39      	ldr	r3, [pc, #228]	; (800b3b0 <step_through_pole_angles+0x218>)
 800b2cc:	2201      	movs	r2, #1
 800b2ce:	701a      	strb	r2, [r3, #0]

	float sum = 0.0f;
 800b2d0:	f04f 0300 	mov.w	r3, #0
 800b2d4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
	float enc_steps_per_A2B = (float)ENC_STEPS / (float)(N_POLES * N_PHASES);
 800b2d8:	4b3e      	ldr	r3, [pc, #248]	; (800b3d4 <step_through_pole_angles+0x23c>)
 800b2da:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
	float enc_steps_per_A2A = (float)ENC_STEPS / (float)N_POLES;
 800b2de:	4b3e      	ldr	r3, [pc, #248]	; (800b3d8 <step_through_pole_angles+0x240>)
 800b2e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b2ea:	e057      	b.n	800b39c <step_through_pole_angles+0x204>
		float reduced_pole_angle = pole_angles[i] - i * enc_steps_per_A2B ;//should be 95.238=ENC_STEPS/21 = ENC_STEPS/ (N_POLES * N_PHASES)
 800b2ec:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b2f0:	4a32      	ldr	r2, [pc, #200]	; (800b3bc <step_through_pole_angles+0x224>)
 800b2f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2f6:	ee07 3a90 	vmov	s15, r3
 800b2fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2fe:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b302:	ee07 3a90 	vmov	s15, r3
 800b306:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b30a:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800b30e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b312:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b316:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
		if (reduced_pole_angle > -ENC_STEPS_HALF){
 800b31a:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 800b31e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b3dc <step_through_pole_angles+0x244>
 800b322:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b32a:	dd08      	ble.n	800b33e <step_through_pole_angles+0x1a6>
			sum += reduced_pole_angle;
 800b32c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800b330:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 800b334:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b338:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
 800b33c:	e00b      	b.n	800b356 <step_through_pole_angles+0x1be>
		}
		else{
			sum += reduced_pole_angle + ENC_STEPS;
 800b33e:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 800b342:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800b3e0 <step_through_pole_angles+0x248>
 800b346:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b34a:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800b34e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b352:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
		}
		av_start_angle = sum / (float)(N_POLES * N_PHASES);
 800b356:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800b35a:	eef3 6a05 	vmov.f32	s13, #53	; 0x41a80000  21.0
 800b35e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b362:	4b20      	ldr	r3, [pc, #128]	; (800b3e4 <step_through_pole_angles+0x24c>)
 800b364:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800b368:	e009      	b.n	800b37e <step_through_pole_angles+0x1e6>
			av_start_angle -= enc_steps_per_A2A;
 800b36a:	4b1e      	ldr	r3, [pc, #120]	; (800b3e4 <step_through_pole_angles+0x24c>)
 800b36c:	ed93 7a00 	vldr	s14, [r3]
 800b370:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800b374:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b378:	4b1a      	ldr	r3, [pc, #104]	; (800b3e4 <step_through_pole_angles+0x24c>)
 800b37a:	edc3 7a00 	vstr	s15, [r3]
		while(av_start_angle > enc_steps_per_A2A){
 800b37e:	4b19      	ldr	r3, [pc, #100]	; (800b3e4 <step_through_pole_angles+0x24c>)
 800b380:	edd3 7a00 	vldr	s15, [r3]
 800b384:	ed97 7a4c 	vldr	s14, [r7, #304]	; 0x130
 800b388:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b38c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b390:	d4eb      	bmi.n	800b36a <step_through_pole_angles+0x1d2>
	for (uint8_t i = 0; i < N_POLES * N_PHASES ; i++){
 800b392:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b396:	3301      	adds	r3, #1
 800b398:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800b39c:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800b3a0:	2b14      	cmp	r3, #20
 800b3a2:	d9a3      	bls.n	800b2ec <step_through_pole_angles+0x154>
		//float av_angle_first_A =

	}


}
 800b3a4:	bf00      	nop
 800b3a6:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800b3aa:	46bd      	mov	sp, r7
 800b3ac:	bdb0      	pop	{r4, r5, r7, pc}
 800b3ae:	bf00      	nop
 800b3b0:	2000002e 	.word	0x2000002e
 800b3b4:	40010000 	.word	0x40010000
 800b3b8:	40010400 	.word	0x40010400
 800b3bc:	200002ec 	.word	0x200002ec
 800b3c0:	08013310 	.word	0x08013310
 800b3c4:	20002540 	.word	0x20002540
 800b3c8:	200019bc 	.word	0x200019bc
 800b3cc:	200006f8 	.word	0x200006f8
 800b3d0:	20000c9c 	.word	0x20000c9c
 800b3d4:	42be79e8 	.word	0x42be79e8
 800b3d8:	438edb6e 	.word	0x438edb6e
 800b3dc:	c47a0000 	.word	0xc47a0000
 800b3e0:	44fa0000 	.word	0x44fa0000
 800b3e4:	20000f94 	.word	0x20000f94

0800b3e8 <step_through_pwm_percent>:

void step_through_pwm_percent(void){
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
	normal_operation_enabled = false;
 800b3ee:	4b16      	ldr	r3, [pc, #88]	; (800b448 <step_through_pwm_percent+0x60>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b3f4:	f7ff febe 	bl	800b174 <set_pwm_off>
	HAL_Delay(100);
 800b3f8:	2064      	movs	r0, #100	; 0x64
 800b3fa:	f7f5 fe37 	bl	800106c <HAL_Delay>
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800b3fe:	2300      	movs	r3, #0
 800b400:	71fb      	strb	r3, [r7, #7]
 800b402:	e014      	b.n	800b42e <step_through_pwm_percent+0x46>
		TIM1->CCR1 = percent * PWM_1PERCENT;
 800b404:	79fa      	ldrb	r2, [r7, #7]
 800b406:	4613      	mov	r3, r2
 800b408:	009b      	lsls	r3, r3, #2
 800b40a:	4413      	add	r3, r2
 800b40c:	00db      	lsls	r3, r3, #3
 800b40e:	441a      	add	r2, r3
 800b410:	4b0e      	ldr	r3, [pc, #56]	; (800b44c <step_through_pwm_percent+0x64>)
 800b412:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 800b414:	20c8      	movs	r0, #200	; 0xc8
 800b416:	f7f5 fe29 	bl	800106c <HAL_Delay>
		pole_angle_by_amp[percent]=TIM8->CNT;
 800b41a:	4b0d      	ldr	r3, [pc, #52]	; (800b450 <step_through_pwm_percent+0x68>)
 800b41c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b41e:	79fb      	ldrb	r3, [r7, #7]
 800b420:	b291      	uxth	r1, r2
 800b422:	4a0c      	ldr	r2, [pc, #48]	; (800b454 <step_through_pwm_percent+0x6c>)
 800b424:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	3301      	adds	r3, #1
 800b42c:	71fb      	strb	r3, [r7, #7]
 800b42e:	79fb      	ldrb	r3, [r7, #7]
 800b430:	2b09      	cmp	r3, #9
 800b432:	d9e7      	bls.n	800b404 <step_through_pwm_percent+0x1c>
	}
	set_pwm_off();
 800b434:	f7ff fe9e 	bl	800b174 <set_pwm_off>
	normal_operation_enabled = true;
 800b438:	4b03      	ldr	r3, [pc, #12]	; (800b448 <step_through_pwm_percent+0x60>)
 800b43a:	2201      	movs	r2, #1
 800b43c:	701a      	strb	r2, [r3, #0]
}
 800b43e:	bf00      	nop
 800b440:	3708      	adds	r7, #8
 800b442:	46bd      	mov	sp, r7
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	2000002e 	.word	0x2000002e
 800b44c:	40010000 	.word	0x40010000
 800b450:	40010400 	.word	0x40010400
 800b454:	20000f6c 	.word	0x20000f6c

0800b458 <explore_limits>:

void explore_limits(void){
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
	amp = 0;
 800b45e:	4b35      	ldr	r3, [pc, #212]	; (800b534 <explore_limits+0xdc>)
 800b460:	f04f 0200 	mov.w	r2, #0
 800b464:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800b466:	2064      	movs	r0, #100	; 0x64
 800b468:	f7f5 fe00 	bl	800106c <HAL_Delay>
	for (int8_t dir=-1;dir<2; dir+=2){
 800b46c:	23ff      	movs	r3, #255	; 0xff
 800b46e:	73fb      	strb	r3, [r7, #15]
 800b470:	e055      	b.n	800b51e <explore_limits+0xc6>
		HAL_Delay(500);
 800b472:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800b476:	f7f5 fdf9 	bl	800106c <HAL_Delay>
		amp= dir * 0.1f;
 800b47a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b47e:	ee07 3a90 	vmov	s15, r3
 800b482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b486:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b538 <explore_limits+0xe0>
 800b48a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b48e:	4b29      	ldr	r3, [pc, #164]	; (800b534 <explore_limits+0xdc>)
 800b490:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = 0; i<50; i++){
 800b494:	2300      	movs	r3, #0
 800b496:	60bb      	str	r3, [r7, #8]
 800b498:	e03a      	b.n	800b510 <explore_limits+0xb8>
			HAL_Delay(100);
 800b49a:	2064      	movs	r0, #100	; 0x64
 800b49c:	f7f5 fde6 	bl	800106c <HAL_Delay>
			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, 1);
 800b4a0:	2101      	movs	r1, #1
 800b4a2:	4826      	ldr	r0, [pc, #152]	; (800b53c <explore_limits+0xe4>)
 800b4a4:	f7f6 fbec 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800b4a8:	6078      	str	r0, [r7, #4]
			if (val_I > 2100 || val_I < 1980){
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f640 0234 	movw	r2, #2100	; 0x834
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d804      	bhi.n	800b4be <explore_limits+0x66>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d825      	bhi.n	800b50a <explore_limits+0xb2>
				amp=0;
 800b4be:	4b1d      	ldr	r3, [pc, #116]	; (800b534 <explore_limits+0xdc>)
 800b4c0:	f04f 0200 	mov.w	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
				uint32_t EncVal_lim = TIM8->CNT;
 800b4c6:	4b1e      	ldr	r3, [pc, #120]	; (800b540 <explore_limits+0xe8>)
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	603b      	str	r3, [r7, #0]
				if (dir==-1){
 800b4cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b4d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4d4:	d10c      	bne.n	800b4f0 <explore_limits+0x98>
					Enc_Val_total_lim_m = EncVal_lim + rotation_counter * ENC_STEPS;
 800b4d6:	4b1b      	ldr	r3, [pc, #108]	; (800b544 <explore_limits+0xec>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b4de:	fb02 f303 	mul.w	r3, r2, r3
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	4413      	add	r3, r2
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	4b17      	ldr	r3, [pc, #92]	; (800b548 <explore_limits+0xf0>)
 800b4ec:	601a      	str	r2, [r3, #0]
				else{
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;

				}

				break;
 800b4ee:	e012      	b.n	800b516 <explore_limits+0xbe>
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;
 800b4f0:	4b14      	ldr	r3, [pc, #80]	; (800b544 <explore_limits+0xec>)
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b4f8:	fb02 f303 	mul.w	r3, r2, r3
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	4413      	add	r3, r2
 800b502:	461a      	mov	r2, r3
 800b504:	4b11      	ldr	r3, [pc, #68]	; (800b54c <explore_limits+0xf4>)
 800b506:	601a      	str	r2, [r3, #0]
				break;
 800b508:	e005      	b.n	800b516 <explore_limits+0xbe>
		for (int32_t i = 0; i<50; i++){
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	3301      	adds	r3, #1
 800b50e:	60bb      	str	r3, [r7, #8]
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	2b31      	cmp	r3, #49	; 0x31
 800b514:	ddc1      	ble.n	800b49a <explore_limits+0x42>
	for (int8_t dir=-1;dir<2; dir+=2){
 800b516:	7bfb      	ldrb	r3, [r7, #15]
 800b518:	3302      	adds	r3, #2
 800b51a:	b2db      	uxtb	r3, r3
 800b51c:	73fb      	strb	r3, [r7, #15]
 800b51e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b522:	2b01      	cmp	r3, #1
 800b524:	dda5      	ble.n	800b472 <explore_limits+0x1a>
			}
		}
	}

	amp = 0.01f;
 800b526:	4b03      	ldr	r3, [pc, #12]	; (800b534 <explore_limits+0xdc>)
 800b528:	4a09      	ldr	r2, [pc, #36]	; (800b550 <explore_limits+0xf8>)
 800b52a:	601a      	str	r2, [r3, #0]
}
 800b52c:	bf00      	nop
 800b52e:	3710      	adds	r7, #16
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20000010 	.word	0x20000010
 800b538:	3dcccccd 	.word	0x3dcccccd
 800b53c:	20000d98 	.word	0x20000d98
 800b540:	40010400 	.word	0x40010400
 800b544:	20000244 	.word	0x20000244
 800b548:	20000260 	.word	0x20000260
 800b54c:	20000264 	.word	0x20000264
 800b550:	3c23d70a 	.word	0x3c23d70a

0800b554 <delay_SPI>:
    //for (i=0; i<3195; i++);
  	for (i=0; i<1; i++);
  }
}

void delay_SPI(void){
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
	int g =0;
 800b55a:	2300      	movs	r3, #0
 800b55c:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800b55e:	2300      	movs	r3, #0
 800b560:	603b      	str	r3, [r7, #0]
 800b562:	e005      	b.n	800b570 <delay_SPI+0x1c>
		g++;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	3301      	adds	r3, #1
 800b568:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800b56a:	683b      	ldr	r3, [r7, #0]
 800b56c:	3301      	adds	r3, #1
 800b56e:	603b      	str	r3, [r7, #0]
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	2b13      	cmp	r3, #19
 800b574:	ddf6      	ble.n	800b564 <delay_SPI+0x10>
	}
}
 800b576:	bf00      	nop
 800b578:	370c      	adds	r7, #12
 800b57a:	46bd      	mov	sp, r7
 800b57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b580:	4770      	bx	lr
	...

0800b584 <playSound>:

void myDelay(void){
	HAL_Delay(1);
}

void playSound(uint32_t periode, uint32_t volume, uint32_t cycles){
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	60b9      	str	r1, [r7, #8]
 800b58e:	607a      	str	r2, [r7, #4]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);
	normal_operation_enabled = false;
 800b590:	4b16      	ldr	r3, [pc, #88]	; (800b5ec <playSound+0x68>)
 800b592:	2200      	movs	r2, #0
 800b594:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800b596:	f7ff fded 	bl	800b174 <set_pwm_off>
	HAL_Delay(10);
 800b59a:	200a      	movs	r0, #10
 800b59c:	f7f5 fd66 	bl	800106c <HAL_Delay>

	for (uint32_t i=0; i<cycles; i++){
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	617b      	str	r3, [r7, #20]
 800b5a4:	e014      	b.n	800b5d0 <playSound+0x4c>
		TIM1->CCR1 = 0; //takes<150ns
 800b5a6:	4b12      	ldr	r3, [pc, #72]	; (800b5f0 <playSound+0x6c>)
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800b5ac:	4a10      	ldr	r2, [pc, #64]	; (800b5f0 <playSound+0x6c>)
 800b5ae:	68bb      	ldr	r3, [r7, #8]
 800b5b0:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7f5 fd5a 	bl	800106c <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800b5b8:	4a0d      	ldr	r2, [pc, #52]	; (800b5f0 <playSound+0x6c>)
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 800b5be:	4b0c      	ldr	r3, [pc, #48]	; (800b5f0 <playSound+0x6c>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 800b5c4:	68f8      	ldr	r0, [r7, #12]
 800b5c6:	f7f5 fd51 	bl	800106c <HAL_Delay>
	for (uint32_t i=0; i<cycles; i++){
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	617b      	str	r3, [r7, #20]
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	429a      	cmp	r2, r3
 800b5d6:	d3e6      	bcc.n	800b5a6 <playSound+0x22>
	}
	set_pwm_off();
 800b5d8:	f7ff fdcc 	bl	800b174 <set_pwm_off>
	normal_operation_enabled = true;
 800b5dc:	4b03      	ldr	r3, [pc, #12]	; (800b5ec <playSound+0x68>)
 800b5de:	2201      	movs	r2, #1
 800b5e0:	701a      	strb	r2, [r3, #0]



	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 800b5e2:	bf00      	nop
 800b5e4:	3718      	adds	r7, #24
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	2000002e 	.word	0x2000002e
 800b5f0:	40010000 	.word	0x40010000
 800b5f4:	00000000 	.word	0x00000000

0800b5f8 <calc_lookup>:
//	}
//}



void calc_lookup(float *lookup){
 800b5f8:	b5b0      	push	{r4, r5, r7, lr}
 800b5fa:	ed2d 8b02 	vpush	{d8}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
	// TODO plug in a higher order harmonic and see if system gets more energy efficient or more silent
	for (int i=0; i<210; i++){
 800b604:	2300      	movs	r3, #0
 800b606:	60fb      	str	r3, [r7, #12]
 800b608:	e068      	b.n	800b6dc <calc_lookup+0xe4>

		  // --- harmonic
	    //lookup[i] = cos((float)i/100.0f)       + amp_harmonic * cos( (float)i/100.0f       * 3.0f)    +  cos((float)i/100.0f-1.047f) + amp_harmonic * cos(((float)i/100.0f-1.047f)* 3.0f) ;// the harmonic tends to fully cancel out

			// --- power law
			lookup[i] = pow( cos((float)i/100.0f) + cos((float)i/100.0f-1.047f),amp_harmonic)/ pow(amp_harmonic,0.5f); //looks like 1.0 is already best in terms of overtones
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	ee07 3a90 	vmov	s15, r3
 800b610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b614:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b6f8 <calc_lookup+0x100>
 800b618:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b61c:	ee16 0a90 	vmov	r0, s13
 800b620:	f7f4 ff92 	bl	8000548 <__aeabi_f2d>
 800b624:	4603      	mov	r3, r0
 800b626:	460c      	mov	r4, r1
 800b628:	ec44 3b10 	vmov	d0, r3, r4
 800b62c:	f005 fce8 	bl	8011000 <cos>
 800b630:	ec55 4b10 	vmov	r4, r5, d0
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	ee07 3a90 	vmov	s15, r3
 800b63a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b63e:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800b6f8 <calc_lookup+0x100>
 800b642:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b646:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 800b6fc <calc_lookup+0x104>
 800b64a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b64e:	ee17 0a90 	vmov	r0, s15
 800b652:	f7f4 ff79 	bl	8000548 <__aeabi_f2d>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	ec43 2b10 	vmov	d0, r2, r3
 800b65e:	f005 fccf 	bl	8011000 <cos>
 800b662:	ec53 2b10 	vmov	r2, r3, d0
 800b666:	4620      	mov	r0, r4
 800b668:	4629      	mov	r1, r5
 800b66a:	f7f4 fe0f 	bl	800028c <__adddf3>
 800b66e:	4603      	mov	r3, r0
 800b670:	460c      	mov	r4, r1
 800b672:	ec44 3b18 	vmov	d8, r3, r4
 800b676:	4b22      	ldr	r3, [pc, #136]	; (800b700 <calc_lookup+0x108>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4618      	mov	r0, r3
 800b67c:	f7f4 ff64 	bl	8000548 <__aeabi_f2d>
 800b680:	4603      	mov	r3, r0
 800b682:	460c      	mov	r4, r1
 800b684:	ec44 3b11 	vmov	d1, r3, r4
 800b688:	eeb0 0a48 	vmov.f32	s0, s16
 800b68c:	eef0 0a68 	vmov.f32	s1, s17
 800b690:	f005 fd42 	bl	8011118 <pow>
 800b694:	ec55 4b10 	vmov	r4, r5, d0
 800b698:	4b19      	ldr	r3, [pc, #100]	; (800b700 <calc_lookup+0x108>)
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	4618      	mov	r0, r3
 800b69e:	f7f4 ff53 	bl	8000548 <__aeabi_f2d>
 800b6a2:	4602      	mov	r2, r0
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	ed9f 1b12 	vldr	d1, [pc, #72]	; 800b6f0 <calc_lookup+0xf8>
 800b6aa:	ec43 2b10 	vmov	d0, r2, r3
 800b6ae:	f005 fd33 	bl	8011118 <pow>
 800b6b2:	ec53 2b10 	vmov	r2, r3, d0
 800b6b6:	4620      	mov	r0, r4
 800b6b8:	4629      	mov	r1, r5
 800b6ba:	f7f5 f8c7 	bl	800084c <__aeabi_ddiv>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	460c      	mov	r4, r1
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	4621      	mov	r1, r4
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	009b      	lsls	r3, r3, #2
 800b6ca:	687a      	ldr	r2, [r7, #4]
 800b6cc:	18d4      	adds	r4, r2, r3
 800b6ce:	f7f5 fa8b 	bl	8000be8 <__aeabi_d2f>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	2bd1      	cmp	r3, #209	; 0xd1
 800b6e0:	dd93      	ble.n	800b60a <calc_lookup+0x12>
	}
}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	ecbd 8b02 	vpop	{d8}
 800b6ec:	bdb0      	pop	{r4, r5, r7, pc}
 800b6ee:	bf00      	nop
 800b6f0:	00000000 	.word	0x00000000
 800b6f4:	3fe00000 	.word	0x3fe00000
 800b6f8:	42c80000 	.word	0x42c80000
 800b6fc:	3f860419 	.word	0x3f860419
 800b700:	20000030 	.word	0x20000030

0800b704 <calc_sin_lookup>:

void calc_sin_lookup(float *sin_lookup){
 800b704:	b590      	push	{r4, r7, lr}
 800b706:	b085      	sub	sp, #20
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	for (int i=0; i<628; i++){
 800b70c:	2300      	movs	r3, #0
 800b70e:	60fb      	str	r3, [r7, #12]
 800b710:	e01f      	b.n	800b752 <calc_sin_lookup+0x4e>
			sin_lookup[i] = sin((float)i/100.0f);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	ee07 3a90 	vmov	s15, r3
 800b718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b71c:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b764 <calc_sin_lookup+0x60>
 800b720:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b724:	ee16 0a90 	vmov	r0, s13
 800b728:	f7f4 ff0e 	bl	8000548 <__aeabi_f2d>
 800b72c:	4603      	mov	r3, r0
 800b72e:	460c      	mov	r4, r1
 800b730:	ec44 3b10 	vmov	d0, r3, r4
 800b734:	f005 fca8 	bl	8011088 <sin>
 800b738:	ec51 0b10 	vmov	r0, r1, d0
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	009b      	lsls	r3, r3, #2
 800b740:	687a      	ldr	r2, [r7, #4]
 800b742:	18d4      	adds	r4, r2, r3
 800b744:	f7f5 fa50 	bl	8000be8 <__aeabi_d2f>
 800b748:	4603      	mov	r3, r0
 800b74a:	6023      	str	r3, [r4, #0]
	for (int i=0; i<628; i++){
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	3301      	adds	r3, #1
 800b750:	60fb      	str	r3, [r7, #12]
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 800b758:	dbdb      	blt.n	800b712 <calc_sin_lookup+0xe>
	}
}
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	bd90      	pop	{r4, r7, pc}
 800b762:	bf00      	nop
 800b764:	42c80000 	.word	0x42c80000

0800b768 <calc_cos_lookup>:

void calc_cos_lookup(float *cos_lookup){
 800b768:	b590      	push	{r4, r7, lr}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<628; i++){
 800b770:	2300      	movs	r3, #0
 800b772:	60fb      	str	r3, [r7, #12]
 800b774:	e01f      	b.n	800b7b6 <calc_cos_lookup+0x4e>
			cos_lookup[i] = cos((float)i/100.0f);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	ee07 3a90 	vmov	s15, r3
 800b77c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b780:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800b7c8 <calc_cos_lookup+0x60>
 800b784:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b788:	ee16 0a90 	vmov	r0, s13
 800b78c:	f7f4 fedc 	bl	8000548 <__aeabi_f2d>
 800b790:	4603      	mov	r3, r0
 800b792:	460c      	mov	r4, r1
 800b794:	ec44 3b10 	vmov	d0, r3, r4
 800b798:	f005 fc32 	bl	8011000 <cos>
 800b79c:	ec51 0b10 	vmov	r0, r1, d0
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	009b      	lsls	r3, r3, #2
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	18d4      	adds	r4, r2, r3
 800b7a8:	f7f5 fa1e 	bl	8000be8 <__aeabi_d2f>
 800b7ac:	4603      	mov	r3, r0
 800b7ae:	6023      	str	r3, [r4, #0]
	for (int i=0; i<628; i++){
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	60fb      	str	r3, [r7, #12]
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 800b7bc:	dbdb      	blt.n	800b776 <calc_cos_lookup+0xe>
	}
}
 800b7be:	bf00      	nop
 800b7c0:	3714      	adds	r7, #20
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd90      	pop	{r4, r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	42c80000 	.word	0x42c80000

0800b7cc <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 800b7cc:	b480      	push	{r7}
 800b7ce:	b083      	sub	sp, #12
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800b7d4:	4b06      	ldr	r3, [pc, #24]	; (800b7f0 <DMAUSARTTransferComplete+0x24>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	695a      	ldr	r2, [r3, #20]
 800b7da:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <DMAUSARTTransferComplete+0x24>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b7e2:	615a      	str	r2, [r3, #20]
}
 800b7e4:	bf00      	nop
 800b7e6:	370c      	adds	r7, #12
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ee:	4770      	bx	lr
 800b7f0:	200006f8 	.word	0x200006f8

0800b7f4 <HAL_ADC_ConvHalfCpltCallback>:

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 800b7f4:	b480      	push	{r7}
 800b7f6:	b083      	sub	sp, #12
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin;
 800b7fc:	4b04      	ldr	r3, [pc, #16]	; (800b810 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800b7fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b802:	619a      	str	r2, [r3, #24]
}
 800b804:	bf00      	nop
 800b806:	370c      	adds	r7, #12
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr
 800b810:	40020c00 	.word	0x40020c00

0800b814 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800b814:	b480      	push	{r7}
 800b816:	b083      	sub	sp, #12
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
	debug2_out_GPIO_Port->BSRR = (uint32_t)debug2_out_Pin << 16U;
 800b81c:	4b04      	ldr	r3, [pc, #16]	; (800b830 <HAL_ADC_ConvCpltCallback+0x1c>)
 800b81e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b822:	619a      	str	r2, [r3, #24]
}
 800b824:	bf00      	nop
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	40020c00 	.word	0x40020c00

0800b834 <calc_v>:
//	}
//}


// I find 80 at 25V this would be 192kV arrg
void calc_v(void){
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
	int16_t tim2_counter = TIM2->CNT; //has prescalor of 8-1 ==> 10.5MHz ==> will always be around 10500 for heartbeat 1ms
 800b83a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b83e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b840:	80bb      	strh	r3, [r7, #4]
	TIM2->CNT = 0;
 800b842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b846:	2200      	movs	r2, #0
 800b848:	625a      	str	r2, [r3, #36]	; 0x24

	int16_t EncDiff = EncVal-last_EncVal_v; // will be 200 for 100Hz rotation or 2 for 1Hz rotation
 800b84a:	4b2b      	ldr	r3, [pc, #172]	; (800b8f8 <calc_v+0xc4>)
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	b29a      	uxth	r2, r3
 800b850:	4b2a      	ldr	r3, [pc, #168]	; (800b8fc <calc_v+0xc8>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	b29b      	uxth	r3, r3
 800b856:	1ad3      	subs	r3, r2, r3
 800b858:	b29b      	uxth	r3, r3
 800b85a:	80fb      	strh	r3, [r7, #6]
	last_EncVal_v = EncVal;
 800b85c:	4b26      	ldr	r3, [pc, #152]	; (800b8f8 <calc_v+0xc4>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a26      	ldr	r2, [pc, #152]	; (800b8fc <calc_v+0xc8>)
 800b862:	6013      	str	r3, [r2, #0]

	if (EncDiff > ENC_STEPS_HALF){ // if jump is more than a half rotation it's most likely the 0 crossing
 800b864:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b868:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b86c:	dd05      	ble.n	800b87a <calc_v+0x46>
		EncDiff -= ENC_STEPS;
 800b86e:	88fb      	ldrh	r3, [r7, #6]
 800b870:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 800b874:	b29b      	uxth	r3, r3
 800b876:	80fb      	strh	r3, [r7, #6]
 800b878:	e009      	b.n	800b88e <calc_v+0x5a>
	}
	else if (EncDiff < -ENC_STEPS_HALF){
 800b87a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b87e:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800b882:	da04      	bge.n	800b88e <calc_v+0x5a>
		EncDiff += ENC_STEPS;
 800b884:	88fb      	ldrh	r3, [r7, #6]
 800b886:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800b88a:	b29b      	uxth	r3, r3
 800b88c:	80fb      	strh	r3, [r7, #6]
	}

	velocity = (float)(EncDiff) / (float)tim2_counter; //[steps/counts]
 800b88e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b892:	ee07 3a90 	vmov	s15, r3
 800b896:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b89a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800b89e:	ee07 3a90 	vmov	s15, r3
 800b8a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b8a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b8aa:	4b15      	ldr	r3, [pc, #84]	; (800b900 <calc_v+0xcc>)
 800b8ac:	edc3 7a00 	vstr	s15, [r3]
	velocity *= 10500000/ENC_STEPS; // /ENC_STEPS steps/round * 21000000 counts/sec --> [round/sec]  //TODO velocity seems too high by factor of 2 or 3 maybe same clock frequency issue that we actually run at 42 MHz. !!! TODO check clock frequency  // TODO divided by 10 as well
 800b8b0:	4b13      	ldr	r3, [pc, #76]	; (800b900 <calc_v+0xcc>)
 800b8b2:	edd3 7a00 	vldr	s15, [r3]
 800b8b6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800b904 <calc_v+0xd0>
 800b8ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b8be:	4b10      	ldr	r3, [pc, #64]	; (800b900 <calc_v+0xcc>)
 800b8c0:	edc3 7a00 	vstr	s15, [r3]
	av_velocity = 0.95f * av_velocity + 0.05f * velocity;
 800b8c4:	4b10      	ldr	r3, [pc, #64]	; (800b908 <calc_v+0xd4>)
 800b8c6:	edd3 7a00 	vldr	s15, [r3]
 800b8ca:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800b90c <calc_v+0xd8>
 800b8ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b8d2:	4b0b      	ldr	r3, [pc, #44]	; (800b900 <calc_v+0xcc>)
 800b8d4:	edd3 7a00 	vldr	s15, [r3]
 800b8d8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 800b910 <calc_v+0xdc>
 800b8dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b8e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8e4:	4b08      	ldr	r3, [pc, #32]	; (800b908 <calc_v+0xd4>)
 800b8e6:	edc3 7a00 	vstr	s15, [r3]

}
 800b8ea:	bf00      	nop
 800b8ec:	370c      	adds	r7, #12
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f4:	4770      	bx	lr
 800b8f6:	bf00      	nop
 800b8f8:	20000e68 	.word	0x20000e68
 800b8fc:	20000d3c 	.word	0x20000d3c
 800b900:	20000248 	.word	0x20000248
 800b904:	45a41000 	.word	0x45a41000
 800b908:	2000024c 	.word	0x2000024c
 800b90c:	3f733333 	.word	0x3f733333
 800b910:	3d4ccccd 	.word	0x3d4ccccd

0800b914 <HAL_TIM_PeriodElapsedCallback>:

// -----------------------------------------------------------
// --- HEARTBEAT (1ms)  of the microcontroller
// -----------------------------------------------------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim3){
 800b914:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b918:	b090      	sub	sp, #64	; 0x40
 800b91a:	af08      	add	r7, sp, #32
 800b91c:	6078      	str	r0, [r7, #4]

	calc_v();
 800b91e:	f7ff ff89 	bl	800b834 <calc_v>


	if (mode_of_control == 1){
 800b922:	4b7d      	ldr	r3, [pc, #500]	; (800bb18 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	2b01      	cmp	r3, #1
 800b928:	f040 80ed 	bne.w	800bb06 <HAL_TIM_PeriodElapsedCallback+0x1f2>
		float t = (float)((TIM5->CNT - last_tim5_cnt) / 100) / 1000.0f;
 800b92c:	4b7b      	ldr	r3, [pc, #492]	; (800bb1c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800b92e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b930:	4b7b      	ldr	r3, [pc, #492]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	1ad3      	subs	r3, r2, r3
 800b936:	4a7b      	ldr	r2, [pc, #492]	; (800bb24 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800b938:	fba2 2303 	umull	r2, r3, r2, r3
 800b93c:	095b      	lsrs	r3, r3, #5
 800b93e:	ee07 3a90 	vmov	s15, r3
 800b942:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b946:	eddf 6a78 	vldr	s13, [pc, #480]	; 800bb28 <HAL_TIM_PeriodElapsedCallback+0x214>
 800b94a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b94e:	edc7 7a06 	vstr	s15, [r7, #24]

		int32_t desired_EncVal = pos_offset + pos_amp * sin(6.28f * pos_freq * t);
 800b952:	4b76      	ldr	r3, [pc, #472]	; (800bb2c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	4618      	mov	r0, r3
 800b958:	f7f4 fde4 	bl	8000524 <__aeabi_i2d>
 800b95c:	4604      	mov	r4, r0
 800b95e:	460d      	mov	r5, r1
 800b960:	4b73      	ldr	r3, [pc, #460]	; (800bb30 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	4618      	mov	r0, r3
 800b966:	f7f4 fdef 	bl	8000548 <__aeabi_f2d>
 800b96a:	4680      	mov	r8, r0
 800b96c:	4689      	mov	r9, r1
 800b96e:	4b71      	ldr	r3, [pc, #452]	; (800bb34 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800b970:	edd3 7a00 	vldr	s15, [r3]
 800b974:	ed9f 7a70 	vldr	s14, [pc, #448]	; 800bb38 <HAL_TIM_PeriodElapsedCallback+0x224>
 800b978:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b97c:	edd7 7a06 	vldr	s15, [r7, #24]
 800b980:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b984:	ee17 0a90 	vmov	r0, s15
 800b988:	f7f4 fdde 	bl	8000548 <__aeabi_f2d>
 800b98c:	4602      	mov	r2, r0
 800b98e:	460b      	mov	r3, r1
 800b990:	ec43 2b10 	vmov	d0, r2, r3
 800b994:	f005 fb78 	bl	8011088 <sin>
 800b998:	ec53 2b10 	vmov	r2, r3, d0
 800b99c:	4640      	mov	r0, r8
 800b99e:	4649      	mov	r1, r9
 800b9a0:	f7f4 fe2a 	bl	80005f8 <__aeabi_dmul>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	4629      	mov	r1, r5
 800b9ac:	f7f4 fc6e 	bl	800028c <__adddf3>
 800b9b0:	4603      	mov	r3, r0
 800b9b2:	460c      	mov	r4, r1
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	4621      	mov	r1, r4
 800b9b8:	f7f5 f8ce 	bl	8000b58 <__aeabi_d2iz>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	617b      	str	r3, [r7, #20]
//		else{
//			desired_EncVal = 0;
//		}


		int32_t Enc_Val_total = EncVal + rotation_counter * ENC_STEPS;
 800b9c0:	4b5e      	ldr	r3, [pc, #376]	; (800bb3c <HAL_TIM_PeriodElapsedCallback+0x228>)
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800b9c8:	fb02 f203 	mul.w	r2, r2, r3
 800b9cc:	4b5c      	ldr	r3, [pc, #368]	; (800bb40 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]
		float raw_amp = (float)(Enc_Val_total - desired_EncVal) * P_gain; //oscillates for P_gain > 0.005f
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	1ad3      	subs	r3, r2, r3
 800b9da:	ee07 3a90 	vmov	s15, r3
 800b9de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9e2:	4b58      	ldr	r3, [pc, #352]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800b9e4:	edd3 7a00 	vldr	s15, [r3]
 800b9e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9ec:	edc7 7a07 	vstr	s15, [r7, #28]
		float raw_amp_check = raw_amp;
 800b9f0:	69fb      	ldr	r3, [r7, #28]
 800b9f2:	60fb      	str	r3, [r7, #12]
//			direction = -1;
//		}
//		else{
//			direction = 1;
//		}
		if (raw_amp > pos_amp_limit){
 800b9f4:	4b54      	ldr	r3, [pc, #336]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800b9f6:	edd3 7a00 	vldr	s15, [r3]
 800b9fa:	ed97 7a07 	vldr	s14, [r7, #28]
 800b9fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba06:	dd02      	ble.n	800ba0e <HAL_TIM_PeriodElapsedCallback+0xfa>
			raw_amp = pos_amp_limit;
 800ba08:	4b4f      	ldr	r3, [pc, #316]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	61fb      	str	r3, [r7, #28]
		}
		if (raw_amp < - pos_amp_limit){
 800ba0e:	4b4e      	ldr	r3, [pc, #312]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800ba10:	edd3 7a00 	vldr	s15, [r3]
 800ba14:	eef1 7a67 	vneg.f32	s15, s15
 800ba18:	ed97 7a07 	vldr	s14, [r7, #28]
 800ba1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ba20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba24:	d506      	bpl.n	800ba34 <HAL_TIM_PeriodElapsedCallback+0x120>
			raw_amp = - pos_amp_limit;
 800ba26:	4b48      	ldr	r3, [pc, #288]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800ba28:	edd3 7a00 	vldr	s15, [r3]
 800ba2c:	eef1 7a67 	vneg.f32	s15, s15
 800ba30:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		amp = raw_amp;
 800ba34:	4a45      	ldr	r2, [pc, #276]	; (800bb4c <HAL_TIM_PeriodElapsedCallback+0x238>)
 800ba36:	69fb      	ldr	r3, [r7, #28]
 800ba38:	6013      	str	r3, [r2, #0]

		if (buf_msgs[0] == '\0'){
 800ba3a:	4b45      	ldr	r3, [pc, #276]	; (800bb50 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800ba3c:	781b      	ldrb	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d165      	bne.n	800bb0e <HAL_TIM_PeriodElapsedCallback+0x1fa>
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
					(int)((float)(Enc_Val_total - desired_EncVal) * 0.0005f*1000.0f),
 800ba42:	693a      	ldr	r2, [r7, #16]
 800ba44:	697b      	ldr	r3, [r7, #20]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	ee07 3a90 	vmov	s15, r3
 800ba4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba50:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800bb54 <HAL_TIM_PeriodElapsedCallback+0x240>
 800ba54:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ba58:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800bb28 <HAL_TIM_PeriodElapsedCallback+0x214>
 800ba5c:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800ba60:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int)(raw_amp*1000),
 800ba64:	edd7 7a07 	vldr	s15, [r7, #28]
 800ba68:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800bb28 <HAL_TIM_PeriodElapsedCallback+0x214>
 800ba6c:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800ba70:	eebd 6ae7 	vcvt.s32.f32	s12, s15
					(int)(raw_amp_check*1000),
 800ba74:	edd7 7a03 	vldr	s15, [r7, #12]
 800ba78:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800bb28 <HAL_TIM_PeriodElapsedCallback+0x214>
 800ba7c:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800ba80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba84:	ee17 1a90 	vmov	r1, s15
 800ba88:	4b29      	ldr	r3, [pc, #164]	; (800bb30 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800ba8a:	edd3 7a00 	vldr	s15, [r3]
 800ba8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba92:	ee17 0a90 	vmov	r0, s15
					(int)Enc_Val_total,
					(int)(pos_amp),
					(int)(pos_freq*1000),
 800ba96:	4b27      	ldr	r3, [pc, #156]	; (800bb34 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800ba98:	edd3 7a00 	vldr	s15, [r3]
 800ba9c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800bb28 <HAL_TIM_PeriodElapsedCallback+0x214>
 800baa0:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800baa4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800baa8:	ee17 4a90 	vmov	r4, s15
					(int)(pos_amp_limit * 1000),
 800baac:	4b26      	ldr	r3, [pc, #152]	; (800bb48 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800baae:	edd3 7a00 	vldr	s15, [r3]
 800bab2:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800bb28 <HAL_TIM_PeriodElapsedCallback+0x214>
 800bab6:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800baba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800babe:	ee17 5a90 	vmov	r5, s15
 800bac2:	4b1a      	ldr	r3, [pc, #104]	; (800bb2c <HAL_TIM_PeriodElapsedCallback+0x218>)
 800bac4:	681b      	ldr	r3, [r3, #0]
					(int)(pos_offset),
					(int)(P_gain*1000000));
 800bac6:	4a1f      	ldr	r2, [pc, #124]	; (800bb44 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800bac8:	edd2 7a00 	vldr	s15, [r2]
 800bacc:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800bb58 <HAL_TIM_PeriodElapsedCallback+0x244>
 800bad0:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf((char*)buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800bad4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bad8:	ee17 2a90 	vmov	r2, s15
 800badc:	9206      	str	r2, [sp, #24]
 800bade:	9305      	str	r3, [sp, #20]
 800bae0:	9504      	str	r5, [sp, #16]
 800bae2:	9403      	str	r4, [sp, #12]
 800bae4:	9002      	str	r0, [sp, #8]
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	9301      	str	r3, [sp, #4]
 800baea:	9100      	str	r1, [sp, #0]
 800baec:	ee16 3a10 	vmov	r3, s12
 800baf0:	ee16 2a90 	vmov	r2, s13
 800baf4:	4919      	ldr	r1, [pc, #100]	; (800bb5c <HAL_TIM_PeriodElapsedCallback+0x248>)
 800baf6:	481a      	ldr	r0, [pc, #104]	; (800bb60 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800baf8:	f002 fb7c 	bl	800e1f4 <siprintf>
			strcat(buf_msgs, buf_msg);
 800bafc:	4918      	ldr	r1, [pc, #96]	; (800bb60 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800bafe:	4814      	ldr	r0, [pc, #80]	; (800bb50 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800bb00:	f002 fb98 	bl	800e234 <strcat>
	else{
		last_tim5_cnt = TIM5->CNT;
	}


}
 800bb04:	e003      	b.n	800bb0e <HAL_TIM_PeriodElapsedCallback+0x1fa>
		last_tim5_cnt = TIM5->CNT;
 800bb06:	4b05      	ldr	r3, [pc, #20]	; (800bb1c <HAL_TIM_PeriodElapsedCallback+0x208>)
 800bb08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb0a:	4a05      	ldr	r2, [pc, #20]	; (800bb20 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 800bb0c:	6013      	str	r3, [r2, #0]
}
 800bb0e:	bf00      	nop
 800bb10:	3720      	adds	r7, #32
 800bb12:	46bd      	mov	sp, r7
 800bb14:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800bb18:	2000025f 	.word	0x2000025f
 800bb1c:	40000c00 	.word	0x40000c00
 800bb20:	20000268 	.word	0x20000268
 800bb24:	51eb851f 	.word	0x51eb851f
 800bb28:	447a0000 	.word	0x447a0000
 800bb2c:	20000240 	.word	0x20000240
 800bb30:	2000001c 	.word	0x2000001c
 800bb34:	20000020 	.word	0x20000020
 800bb38:	40c8f5c3 	.word	0x40c8f5c3
 800bb3c:	20000244 	.word	0x20000244
 800bb40:	20000e68 	.word	0x20000e68
 800bb44:	20000028 	.word	0x20000028
 800bb48:	20000024 	.word	0x20000024
 800bb4c:	20000010 	.word	0x20000010
 800bb50:	200019bc 	.word	0x200019bc
 800bb54:	3a03126f 	.word	0x3a03126f
 800bb58:	49742400 	.word	0x49742400
 800bb5c:	0801334c 	.word	0x0801334c
 800bb60:	20002540 	.word	0x20002540

0800bb64 <HAL_TIM_IC_CaptureCallback>:


//called every second step of the quadrature encoder
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ // see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder
 800bb64:	b480      	push	{r7}
 800bb66:	b083      	sub	sp, #12
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8){
	}
}
 800bb6c:	bf00      	nop
 800bb6e:	370c      	adds	r7, #12
 800bb70:	46bd      	mov	sp, r7
 800bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb76:	4770      	bx	lr

0800bb78 <HAL_GPIO_EXTI_Callback>:

// --- Callback when Encoder fires the I at zero point
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800bb78:	b590      	push	{r4, r7, lr}
 800bb7a:	b085      	sub	sp, #20
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	4603      	mov	r3, r0
 800bb80:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800bb82:	88fb      	ldrh	r3, [r7, #6]
 800bb84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb88:	d14a      	bne.n	800bc20 <HAL_GPIO_EXTI_Callback+0xa8>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
		uint16_t encoder_belief = TIM8->CNT;
 800bb8a:	4b28      	ldr	r3, [pc, #160]	; (800bc2c <HAL_GPIO_EXTI_Callback+0xb4>)
 800bb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb8e:	81fb      	strh	r3, [r7, #14]

		if (counter0ing_at0crossing){
 800bb90:	4b27      	ldr	r3, [pc, #156]	; (800bc30 <HAL_GPIO_EXTI_Callback+0xb8>)
 800bb92:	781b      	ldrb	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d01e      	beq.n	800bbd6 <HAL_GPIO_EXTI_Callback+0x5e>
			TIM8->CNT = 0;     //TODO: this could lead to an offset of 1 since the CNT value may not be set yet and get incremented thereafter if this interrupt is executed before the CNT increment.
 800bb98:	4b24      	ldr	r3, [pc, #144]	; (800bc2c <HAL_GPIO_EXTI_Callback+0xb4>)
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	625a      	str	r2, [r3, #36]	; 0x24
			counter0ing_at0crossing = false;
 800bb9e:	4b24      	ldr	r3, [pc, #144]	; (800bc30 <HAL_GPIO_EXTI_Callback+0xb8>)
 800bba0:	2200      	movs	r2, #0
 800bba2:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at FIRST ZERO: %d \r\n", encoder_belief);
 800bba4:	89fb      	ldrh	r3, [r7, #14]
 800bba6:	461a      	mov	r2, r3
 800bba8:	4922      	ldr	r1, [pc, #136]	; (800bc34 <HAL_GPIO_EXTI_Callback+0xbc>)
 800bbaa:	4823      	ldr	r0, [pc, #140]	; (800bc38 <HAL_GPIO_EXTI_Callback+0xc0>)
 800bbac:	f002 fb22 	bl	800e1f4 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800bbb0:	4821      	ldr	r0, [pc, #132]	; (800bc38 <HAL_GPIO_EXTI_Callback+0xc0>)
 800bbb2:	f7f4 fb0d 	bl	80001d0 <strlen>
 800bbb6:	4604      	mov	r4, r0
 800bbb8:	4820      	ldr	r0, [pc, #128]	; (800bc3c <HAL_GPIO_EXTI_Callback+0xc4>)
 800bbba:	f7f4 fb09 	bl	80001d0 <strlen>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	4423      	add	r3, r4
 800bbc2:	2b63      	cmp	r3, #99	; 0x63
 800bbc4:	d804      	bhi.n	800bbd0 <HAL_GPIO_EXTI_Callback+0x58>
				strcat(buf_msgs, buf_msg);
 800bbc6:	491c      	ldr	r1, [pc, #112]	; (800bc38 <HAL_GPIO_EXTI_Callback+0xc0>)
 800bbc8:	481c      	ldr	r0, [pc, #112]	; (800bc3c <HAL_GPIO_EXTI_Callback+0xc4>)
 800bbca:	f002 fb33 	bl	800e234 <strcat>
 800bbce:	e002      	b.n	800bbd6 <HAL_GPIO_EXTI_Callback+0x5e>
			}
			else {
				buf_msgs[0] = '#';
 800bbd0:	4b1a      	ldr	r3, [pc, #104]	; (800bc3c <HAL_GPIO_EXTI_Callback+0xc4>)
 800bbd2:	2223      	movs	r2, #35	; 0x23
 800bbd4:	701a      	strb	r2, [r3, #0]
			}
		}
		val_SO1_buf_index = 0;
 800bbd6:	4b1a      	ldr	r3, [pc, #104]	; (800bc40 <HAL_GPIO_EXTI_Callback+0xc8>)
 800bbd8:	2200      	movs	r2, #0
 800bbda:	801a      	strh	r2, [r3, #0]

		if (encoder_belief > ENC_TOLERANCE && encoder_belief < ENC_STEPS - ENC_TOLERANCE){
 800bbdc:	89fb      	ldrh	r3, [r7, #14]
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	d91f      	bls.n	800bc22 <HAL_GPIO_EXTI_Callback+0xaa>
 800bbe2:	89fb      	ldrh	r3, [r7, #14]
 800bbe4:	f240 72cd 	movw	r2, #1997	; 0x7cd
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d81a      	bhi.n	800bc22 <HAL_GPIO_EXTI_Callback+0xaa>
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at ZERO MISMATCH: %d \r\n", encoder_belief);
 800bbec:	89fb      	ldrh	r3, [r7, #14]
 800bbee:	461a      	mov	r2, r3
 800bbf0:	4914      	ldr	r1, [pc, #80]	; (800bc44 <HAL_GPIO_EXTI_Callback+0xcc>)
 800bbf2:	4811      	ldr	r0, [pc, #68]	; (800bc38 <HAL_GPIO_EXTI_Callback+0xc0>)
 800bbf4:	f002 fafe 	bl	800e1f4 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800bbf8:	480f      	ldr	r0, [pc, #60]	; (800bc38 <HAL_GPIO_EXTI_Callback+0xc0>)
 800bbfa:	f7f4 fae9 	bl	80001d0 <strlen>
 800bbfe:	4604      	mov	r4, r0
 800bc00:	480e      	ldr	r0, [pc, #56]	; (800bc3c <HAL_GPIO_EXTI_Callback+0xc4>)
 800bc02:	f7f4 fae5 	bl	80001d0 <strlen>
 800bc06:	4603      	mov	r3, r0
 800bc08:	4423      	add	r3, r4
 800bc0a:	2b63      	cmp	r3, #99	; 0x63
 800bc0c:	d804      	bhi.n	800bc18 <HAL_GPIO_EXTI_Callback+0xa0>
				strcat(buf_msgs, buf_msg);
 800bc0e:	490a      	ldr	r1, [pc, #40]	; (800bc38 <HAL_GPIO_EXTI_Callback+0xc0>)
 800bc10:	480a      	ldr	r0, [pc, #40]	; (800bc3c <HAL_GPIO_EXTI_Callback+0xc4>)
 800bc12:	f002 fb0f 	bl	800e234 <strcat>
		}
	}
	else{
		__NOP();
	}
}
 800bc16:	e004      	b.n	800bc22 <HAL_GPIO_EXTI_Callback+0xaa>
				buf_msgs[0] = '#';
 800bc18:	4b08      	ldr	r3, [pc, #32]	; (800bc3c <HAL_GPIO_EXTI_Callback+0xc4>)
 800bc1a:	2223      	movs	r2, #35	; 0x23
 800bc1c:	701a      	strb	r2, [r3, #0]
}
 800bc1e:	e000      	b.n	800bc22 <HAL_GPIO_EXTI_Callback+0xaa>
		__NOP();
 800bc20:	bf00      	nop
}
 800bc22:	bf00      	nop
 800bc24:	3714      	adds	r7, #20
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd90      	pop	{r4, r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	40010400 	.word	0x40010400
 800bc30:	2000002c 	.word	0x2000002c
 800bc34:	08013394 	.word	0x08013394
 800bc38:	20002540 	.word	0x20002540
 800bc3c:	200019bc 	.word	0x200019bc
 800bc40:	2000025c 	.word	0x2000025c
 800bc44:	080133c0 	.word	0x080133c0

0800bc48 <HAL_TIM_OC_DelayElapsedCallback>:


// -----------------------------------------------------------
// MAIN UPDATE STEP interrupt triggered by timer 1 channel 4 towards end of each pwm cycle
// -----------------------------------------------------------
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	ed2d 8b02 	vpush	{d8}
 800bc4e:	b082      	sub	sp, #8
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
	if (htim != &htim1){
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4ab5      	ldr	r2, [pc, #724]	; (800bf2c <HAL_TIM_OC_DelayElapsedCallback+0x2e4>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	f040 8161 	bne.w	800bf20 <HAL_TIM_OC_DelayElapsedCallback+0x2d8>
		return;
	}

#if DB_TIMING
	DB1H;
 800bc5e:	4bb4      	ldr	r3, [pc, #720]	; (800bf30 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 800bc60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bc64:	619a      	str	r2, [r3, #24]
#endif

	timing_party();
 800bc66:	f000 fc13 	bl	800c490 <timing_party>

	// --- get current encoder position
	last_EncVal = EncVal;
 800bc6a:	4bb2      	ldr	r3, [pc, #712]	; (800bf34 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4ab2      	ldr	r2, [pc, #712]	; (800bf38 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 800bc70:	6013      	str	r3, [r2, #0]
	EncVal = TIM8->CNT;//both lines 200ns
 800bc72:	4bb2      	ldr	r3, [pc, #712]	; (800bf3c <HAL_TIM_OC_DelayElapsedCallback+0x2f4>)
 800bc74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc76:	461a      	mov	r2, r3
 800bc78:	4bae      	ldr	r3, [pc, #696]	; (800bf34 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800bc7a:	601a      	str	r2, [r3, #0]

	// --- determine whether 0 crossing happened and adjust rotation_counter accordingly
	if (EncVal - last_EncVal > ENC_STEPS_HALF) {
 800bc7c:	4bad      	ldr	r3, [pc, #692]	; (800bf34 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800bc7e:	681a      	ldr	r2, [r3, #0]
 800bc80:	4bad      	ldr	r3, [pc, #692]	; (800bf38 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	1ad3      	subs	r3, r2, r3
 800bc86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bc8a:	dd05      	ble.n	800bc98 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		rotation_counter--;
 800bc8c:	4bac      	ldr	r3, [pc, #688]	; (800bf40 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	3b01      	subs	r3, #1
 800bc92:	4aab      	ldr	r2, [pc, #684]	; (800bf40 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 800bc94:	6013      	str	r3, [r2, #0]
 800bc96:	e00c      	b.n	800bcb2 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
	}
	else if (last_EncVal - EncVal > ENC_STEPS_HALF){
 800bc98:	4ba7      	ldr	r3, [pc, #668]	; (800bf38 <HAL_TIM_OC_DelayElapsedCallback+0x2f0>)
 800bc9a:	681a      	ldr	r2, [r3, #0]
 800bc9c:	4ba5      	ldr	r3, [pc, #660]	; (800bf34 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	1ad3      	subs	r3, r2, r3
 800bca2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bca6:	dd04      	ble.n	800bcb2 <HAL_TIM_OC_DelayElapsedCallback+0x6a>
		rotation_counter++;
 800bca8:	4ba5      	ldr	r3, [pc, #660]	; (800bf40 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3301      	adds	r3, #1
 800bcae:	4aa4      	ldr	r2, [pc, #656]	; (800bf40 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>)
 800bcb0:	6013      	str	r3, [r2, #0]
	}// both statements 300ns

	// --- accumulate analog readings till we have enough samples which is a flag for the heart beat (= all MCU internal control loops)
	if (analog_samples_counter < ANALOG_SAMPLES_N ){  // TODO: if n_samples >= 32
 800bcb2:	4ba4      	ldr	r3, [pc, #656]	; (800bf44 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800bcb4:	781b      	ldrb	r3, [r3, #0]
 800bcb6:	2b1f      	cmp	r3, #31
 800bcb8:	d80f      	bhi.n	800bcda <HAL_TIM_OC_DelayElapsedCallback+0x92>
		acc_STRAIN0 += HAL_ADCEx_InjectedGetValue (&hadc1, 3);
 800bcba:	2103      	movs	r1, #3
 800bcbc:	48a2      	ldr	r0, [pc, #648]	; (800bf48 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 800bcbe:	f7f5 ffdf 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800bcc2:	4602      	mov	r2, r0
 800bcc4:	4ba1      	ldr	r3, [pc, #644]	; (800bf4c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4413      	add	r3, r2
 800bcca:	4aa0      	ldr	r2, [pc, #640]	; (800bf4c <HAL_TIM_OC_DelayElapsedCallback+0x304>)
 800bccc:	6013      	str	r3, [r2, #0]
		analog_samples_counter ++;
 800bcce:	4b9d      	ldr	r3, [pc, #628]	; (800bf44 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	3301      	adds	r3, #1
 800bcd4:	b2da      	uxtb	r2, r3
 800bcd6:	4b9b      	ldr	r3, [pc, #620]	; (800bf44 <HAL_TIM_OC_DelayElapsedCallback+0x2fc>)
 800bcd8:	701a      	strb	r2, [r3, #0]
	}//200ns when not entering presumably

	// --- calculate the phase with respect to a pole cycle in 100x int
	pole_phase_int = (int)((PI2 * N_POLES / ENC_STEPS * (float) EncVal - phase0 + PI2) * 100.0f) % 628 ; //400ns when consolidated in one line
 800bcda:	4b96      	ldr	r3, [pc, #600]	; (800bf34 <HAL_TIM_OC_DelayElapsedCallback+0x2ec>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	ee07 3a90 	vmov	s15, r3
 800bce2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bce6:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800bf50 <HAL_TIM_OC_DelayElapsedCallback+0x308>
 800bcea:	ee27 7a87 	vmul.f32	s14, s15, s14
 800bcee:	4b99      	ldr	r3, [pc, #612]	; (800bf54 <HAL_TIM_OC_DelayElapsedCallback+0x30c>)
 800bcf0:	edd3 7a00 	vldr	s15, [r3]
 800bcf4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcf8:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800bf58 <HAL_TIM_OC_DelayElapsedCallback+0x310>
 800bcfc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bd00:	ed9f 7a96 	vldr	s14, [pc, #600]	; 800bf5c <HAL_TIM_OC_DelayElapsedCallback+0x314>
 800bd04:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bd0c:	ee17 2a90 	vmov	r2, s15
 800bd10:	4b93      	ldr	r3, [pc, #588]	; (800bf60 <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800bd12:	fb83 1302 	smull	r1, r3, r3, r2
 800bd16:	11d9      	asrs	r1, r3, #7
 800bd18:	17d3      	asrs	r3, r2, #31
 800bd1a:	1acb      	subs	r3, r1, r3
 800bd1c:	f44f 711d 	mov.w	r1, #628	; 0x274
 800bd20:	fb01 f303 	mul.w	r3, r1, r3
 800bd24:	1ad3      	subs	r3, r2, r3
 800bd26:	4a8f      	ldr	r2, [pc, #572]	; (800bf64 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 800bd28:	6013      	str	r3, [r2, #0]



#if FOC_ALG

	register int32_t A = HAL_ADCEx_InjectedGetValue (&hadc1, 1);//500ns
 800bd2a:	2101      	movs	r1, #1
 800bd2c:	4886      	ldr	r0, [pc, #536]	; (800bf48 <HAL_TIM_OC_DelayElapsedCallback+0x300>)
 800bd2e:	f7f5 ffa7 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800bd32:	4603      	mov	r3, r0
 800bd34:	ee08 3a90 	vmov	s17, r3
	register int32_t B = HAL_ADCEx_InjectedGetValue (&hadc2, 1);//500ns
 800bd38:	2101      	movs	r1, #1
 800bd3a:	488b      	ldr	r0, [pc, #556]	; (800bf68 <HAL_TIM_OC_DelayElapsedCallback+0x320>)
 800bd3c:	f7f5 ffa0 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
 800bd40:	4603      	mov	r3, r0
 800bd42:	ee08 3a10 	vmov	s16, r3
	register int32_t C = HAL_ADCEx_InjectedGetValue (&hadc3, 1);//500ns
 800bd46:	2101      	movs	r1, #1
 800bd48:	4888      	ldr	r0, [pc, #544]	; (800bf6c <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 800bd4a:	f7f5 ff99 	bl	8001c80 <HAL_ADCEx_InjectedGetValue>
//	A_mean = 2040.0f;
//	B_mean = 2005.0f;
//	C_mean = 2005.0f;

	// --- Park transform
	a = 0.7f * ((float)A-A_mean);
 800bd4e:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
 800bd52:	4b87      	ldr	r3, [pc, #540]	; (800bf70 <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800bd54:	edd3 7a00 	vldr	s15, [r3]
 800bd58:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd5c:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800bf74 <HAL_TIM_OC_DelayElapsedCallback+0x32c>
 800bd60:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd64:	4b84      	ldr	r3, [pc, #528]	; (800bf78 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 800bd66:	edc3 7a00 	vstr	s15, [r3]
	b = INV_SQRT_3 * (a + 2.0f * ((float)B-B_mean)); //200ns thanks to precalc of SQRT
 800bd6a:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 800bd6e:	4b83      	ldr	r3, [pc, #524]	; (800bf7c <HAL_TIM_OC_DelayElapsedCallback+0x334>)
 800bd70:	edd3 7a00 	vldr	s15, [r3]
 800bd74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd78:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800bd7c:	4b7e      	ldr	r3, [pc, #504]	; (800bf78 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 800bd7e:	edd3 7a00 	vldr	s15, [r3]
 800bd82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd86:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800bf80 <HAL_TIM_OC_DelayElapsedCallback+0x338>
 800bd8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd8e:	4b7d      	ldr	r3, [pc, #500]	; (800bf84 <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 800bd90:	edc3 7a00 	vstr	s15, [r3]

	// -- Clark transform
	direct_component = a * cos_lookup[pole_phase_int] + b * sin_lookup[pole_phase_int];
 800bd94:	4b73      	ldr	r3, [pc, #460]	; (800bf64 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a7b      	ldr	r2, [pc, #492]	; (800bf88 <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	ed93 7a00 	vldr	s14, [r3]
 800bda2:	4b75      	ldr	r3, [pc, #468]	; (800bf78 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 800bda4:	edd3 7a00 	vldr	s15, [r3]
 800bda8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdac:	4b6d      	ldr	r3, [pc, #436]	; (800bf64 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	4a76      	ldr	r2, [pc, #472]	; (800bf8c <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	4413      	add	r3, r2
 800bdb6:	edd3 6a00 	vldr	s13, [r3]
 800bdba:	4b72      	ldr	r3, [pc, #456]	; (800bf84 <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 800bdbc:	edd3 7a00 	vldr	s15, [r3]
 800bdc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800bdc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdc8:	4b71      	ldr	r3, [pc, #452]	; (800bf90 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 800bdca:	edc3 7a00 	vstr	s15, [r3]
	quadrature_component = -a * sin_lookup[pole_phase_int] + b * cos_lookup[pole_phase_int]; //300ns
 800bdce:	4b6a      	ldr	r3, [pc, #424]	; (800bf78 <HAL_TIM_OC_DelayElapsedCallback+0x330>)
 800bdd0:	edd3 7a00 	vldr	s15, [r3]
 800bdd4:	eeb1 7a67 	vneg.f32	s14, s15
 800bdd8:	4b62      	ldr	r3, [pc, #392]	; (800bf64 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	4a6b      	ldr	r2, [pc, #428]	; (800bf8c <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 800bdde:	009b      	lsls	r3, r3, #2
 800bde0:	4413      	add	r3, r2
 800bde2:	edd3 7a00 	vldr	s15, [r3]
 800bde6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bdea:	4b5e      	ldr	r3, [pc, #376]	; (800bf64 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a66      	ldr	r2, [pc, #408]	; (800bf88 <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800bdf0:	009b      	lsls	r3, r3, #2
 800bdf2:	4413      	add	r3, r2
 800bdf4:	edd3 6a00 	vldr	s13, [r3]
 800bdf8:	4b62      	ldr	r3, [pc, #392]	; (800bf84 <HAL_TIM_OC_DelayElapsedCallback+0x33c>)
 800bdfa:	edd3 7a00 	vldr	s15, [r3]
 800bdfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800be02:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be06:	4b63      	ldr	r3, [pc, #396]	; (800bf94 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800be08:	edc3 7a00 	vstr	s15, [r3]

	// --- low pass filter
	register float lp = 0.001f;
 800be0c:	ed9f 8a62 	vldr	s16, [pc, #392]	; 800bf98 <HAL_TIM_OC_DelayElapsedCallback+0x350>
	direct_component_lp = (1-lp) * direct_component_lp + lp * direct_component;
 800be10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800be14:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800be18:	4b60      	ldr	r3, [pc, #384]	; (800bf9c <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800be1a:	edd3 7a00 	vldr	s15, [r3]
 800be1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be22:	4b5b      	ldr	r3, [pc, #364]	; (800bf90 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 800be24:	edd3 7a00 	vldr	s15, [r3]
 800be28:	ee68 7a27 	vmul.f32	s15, s16, s15
 800be2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be30:	4b5a      	ldr	r3, [pc, #360]	; (800bf9c <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800be32:	edc3 7a00 	vstr	s15, [r3]
	quadrature_component_lp = (1-lp) * quadrature_component_lp + lp * quadrature_component;//with register 240 without register 380ns for the 3 lines
 800be36:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800be3a:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800be3e:	4b58      	ldr	r3, [pc, #352]	; (800bfa0 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800be40:	edd3 7a00 	vldr	s15, [r3]
 800be44:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be48:	4b52      	ldr	r3, [pc, #328]	; (800bf94 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800be4a:	edd3 7a00 	vldr	s15, [r3]
 800be4e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800be52:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be56:	4b52      	ldr	r3, [pc, #328]	; (800bfa0 <HAL_TIM_OC_DelayElapsedCallback+0x358>)
 800be58:	edc3 7a00 	vstr	s15, [r3]


	static float direct_component_lp_integral = 0.0f;
	direct_component_lp_integral += direct_component_lp;//150ns for 2lines
 800be5c:	4b51      	ldr	r3, [pc, #324]	; (800bfa4 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800be5e:	ed93 7a00 	vldr	s14, [r3]
 800be62:	4b4e      	ldr	r3, [pc, #312]	; (800bf9c <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800be64:	edd3 7a00 	vldr	s15, [r3]
 800be68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be6c:	4b4d      	ldr	r3, [pc, #308]	; (800bfa4 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800be6e:	edc3 7a00 	vstr	s15, [r3]

	// --- PI controller
	FOC_phase_shift = 0.005f* generic_gain * direct_component_lp + 0.00001f  * direct_component_lp_integral; //220ns//starts oscillating at I = 0.00008f and alternatively at P = 0.03f
 800be72:	4b4d      	ldr	r3, [pc, #308]	; (800bfa8 <HAL_TIM_OC_DelayElapsedCallback+0x360>)
 800be74:	edd3 7a00 	vldr	s15, [r3]
 800be78:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800bfac <HAL_TIM_OC_DelayElapsedCallback+0x364>
 800be7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800be80:	4b46      	ldr	r3, [pc, #280]	; (800bf9c <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800be82:	edd3 7a00 	vldr	s15, [r3]
 800be86:	ee27 7a27 	vmul.f32	s14, s14, s15
 800be8a:	4b46      	ldr	r3, [pc, #280]	; (800bfa4 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800be8c:	edd3 7a00 	vldr	s15, [r3]
 800be90:	eddf 6a47 	vldr	s13, [pc, #284]	; 800bfb0 <HAL_TIM_OC_DelayElapsedCallback+0x368>
 800be94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800be98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be9c:	4b45      	ldr	r3, [pc, #276]	; (800bfb4 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800be9e:	edc3 7a00 	vstr	s15, [r3]


	if (FOC_phase_shift > FOC_PHASE_LIM){
 800bea2:	4b44      	ldr	r3, [pc, #272]	; (800bfb4 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800bea4:	edd3 7a00 	vldr	s15, [r3]
 800bea8:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800bfb8 <HAL_TIM_OC_DelayElapsedCallback+0x370>
 800beac:	eef4 7ac7 	vcmpe.f32	s15, s14
 800beb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb4:	dd03      	ble.n	800bebe <HAL_TIM_OC_DelayElapsedCallback+0x276>
		FOC_phase_shift = FOC_PHASE_LIM;
 800beb6:	4b3f      	ldr	r3, [pc, #252]	; (800bfb4 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800beb8:	4a40      	ldr	r2, [pc, #256]	; (800bfbc <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 800beba:	601a      	str	r2, [r3, #0]
 800bebc:	e00c      	b.n	800bed8 <HAL_TIM_OC_DelayElapsedCallback+0x290>
	}
	else if (FOC_phase_shift < -FOC_PHASE_LIM){
 800bebe:	4b3d      	ldr	r3, [pc, #244]	; (800bfb4 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800bec0:	edd3 7a00 	vldr	s15, [r3]
 800bec4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800bfc0 <HAL_TIM_OC_DelayElapsedCallback+0x378>
 800bec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800becc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bed0:	d502      	bpl.n	800bed8 <HAL_TIM_OC_DelayElapsedCallback+0x290>
		FOC_phase_shift = -FOC_PHASE_LIM;
 800bed2:	4b38      	ldr	r3, [pc, #224]	; (800bfb4 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800bed4:	4a3b      	ldr	r2, [pc, #236]	; (800bfc4 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800bed6:	601a      	str	r2, [r3, #0]
	}//350ns for checks

	if (abs(av_velocity) < 1.0f){
 800bed8:	4b3b      	ldr	r3, [pc, #236]	; (800bfc8 <HAL_TIM_OC_DelayElapsedCallback+0x380>)
 800beda:	edd3 7a00 	vldr	s15, [r3]
 800bede:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bee2:	ee17 3a90 	vmov	r3, s15
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	bfb8      	it	lt
 800beea:	425b      	neglt	r3, r3
 800beec:	ee07 3a90 	vmov	s15, r3
 800bef0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bef4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bef8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800befc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf00:	d507      	bpl.n	800bf12 <HAL_TIM_OC_DelayElapsedCallback+0x2ca>
		FOC_phase_shift = 0.0f;
 800bf02:	4b2c      	ldr	r3, [pc, #176]	; (800bfb4 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800bf04:	f04f 0200 	mov.w	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]
		direct_component_lp_integral = 0.0f;
 800bf0a:	4b26      	ldr	r3, [pc, #152]	; (800bfa4 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800bf0c:	f04f 0200 	mov.w	r2, #0
 800bf10:	601a      	str	r2, [r3, #0]
	FOC_phase_shift = 0.1f;
#endif


#if DB_TIMING
	DB1L;
 800bf12:	4b07      	ldr	r3, [pc, #28]	; (800bf30 <HAL_TIM_OC_DelayElapsedCallback+0x2e8>)
 800bf14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf18:	619a      	str	r2, [r3, #24]
#endif


	update_pwm();
 800bf1a:	f000 f857 	bl	800bfcc <update_pwm>
 800bf1e:	e000      	b.n	800bf22 <HAL_TIM_OC_DelayElapsedCallback+0x2da>
		return;
 800bf20:	bf00      	nop

}
 800bf22:	3708      	adds	r7, #8
 800bf24:	46bd      	mov	sp, r7
 800bf26:	ecbd 8b02 	vpop	{d8}
 800bf2a:	bd80      	pop	{r7, pc}
 800bf2c:	20000f2c 	.word	0x20000f2c
 800bf30:	40020c00 	.word	0x40020c00
 800bf34:	20000e68 	.word	0x20000e68
 800bf38:	20000c30 	.word	0x20000c30
 800bf3c:	40010400 	.word	0x40010400
 800bf40:	20000244 	.word	0x20000244
 800bf44:	2000028c 	.word	0x2000028c
 800bf48:	20000d98 	.word	0x20000d98
 800bf4c:	2000026c 	.word	0x2000026c
 800bf50:	3cb426be 	.word	0x3cb426be
 800bf54:	20000008 	.word	0x20000008
 800bf58:	40c90fd0 	.word	0x40c90fd0
 800bf5c:	42c80000 	.word	0x42c80000
 800bf60:	342da7f3 	.word	0x342da7f3
 800bf64:	20000d94 	.word	0x20000d94
 800bf68:	20000738 	.word	0x20000738
 800bf6c:	20000de0 	.word	0x20000de0
 800bf70:	20000034 	.word	0x20000034
 800bf74:	3f333333 	.word	0x3f333333
 800bf78:	20001b14 	.word	0x20001b14
 800bf7c:	20000038 	.word	0x20000038
 800bf80:	3f13cd36 	.word	0x3f13cd36
 800bf84:	200002e8 	.word	0x200002e8
 800bf88:	20000fa8 	.word	0x20000fa8
 800bf8c:	20001b70 	.word	0x20001b70
 800bf90:	20000290 	.word	0x20000290
 800bf94:	20000298 	.word	0x20000298
 800bf98:	3a83126f 	.word	0x3a83126f
 800bf9c:	20000294 	.word	0x20000294
 800bfa0:	2000029c 	.word	0x2000029c
 800bfa4:	200002ac 	.word	0x200002ac
 800bfa8:	2000003c 	.word	0x2000003c
 800bfac:	3ba3d70a 	.word	0x3ba3d70a
 800bfb0:	3727c5ac 	.word	0x3727c5ac
 800bfb4:	200002a0 	.word	0x200002a0
 800bfb8:	3e99999a 	.word	0x3e99999a
 800bfbc:	3e99999a 	.word	0x3e99999a
 800bfc0:	be99999a 	.word	0xbe99999a
 800bfc4:	be99999a 	.word	0xbe99999a
 800bfc8:	2000024c 	.word	0x2000024c

0800bfcc <update_pwm>:


// -----------------------------------------------------------
// called from MAIN UPDATE STEP to calc and write pwm values to FETdriver
// -----------------------------------------------------------
void update_pwm(void){
 800bfcc:	b490      	push	{r4, r7}
 800bfce:	ed2d 8b04 	vpush	{d8-d9}
 800bfd2:	af00      	add	r7, sp, #0

#if DB_TIMING
	DB1H;
 800bfd4:	4bbf      	ldr	r3, [pc, #764]	; (800c2d4 <update_pwm+0x308>)
 800bfd6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800bfda:	619a      	str	r2, [r3, #24]
#endif

	register int32_t field_phase_int;
	register float u0 = 0.5773f; //0.5f * 2.0f / 1.73205f;// maximal possible U on one coil thanks to wankel //takes<200ns
 800bfdc:	ed9f 8abe 	vldr	s16, [pc, #760]	; 800c2d8 <update_pwm+0x30c>
	register float modified_amp = amp + stiffness * av_velocity;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 800bfe0:	4bbe      	ldr	r3, [pc, #760]	; (800c2dc <update_pwm+0x310>)
 800bfe2:	ed93 7a00 	vldr	s14, [r3]
 800bfe6:	4bbe      	ldr	r3, [pc, #760]	; (800c2e0 <update_pwm+0x314>)
 800bfe8:	edd3 7a00 	vldr	s15, [r3]
 800bfec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bff0:	4bbc      	ldr	r3, [pc, #752]	; (800c2e4 <update_pwm+0x318>)
 800bff2:	edd3 7a00 	vldr	s15, [r3]
 800bff6:	ee77 8a27 	vadd.f32	s17, s14, s15

	if (modified_amp > AMP_LIMIT){
 800bffa:	eddf 7abb 	vldr	s15, [pc, #748]	; 800c2e8 <update_pwm+0x31c>
 800bffe:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c006:	dd01      	ble.n	800c00c <update_pwm+0x40>
		modified_amp = AMP_LIMIT;
 800c008:	eddf 8ab7 	vldr	s17, [pc, #732]	; 800c2e8 <update_pwm+0x31c>
	}
	if (modified_amp < -AMP_LIMIT){
 800c00c:	eddf 7ab7 	vldr	s15, [pc, #732]	; 800c2ec <update_pwm+0x320>
 800c010:	eef4 8ae7 	vcmpe.f32	s17, s15
 800c014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c018:	d501      	bpl.n	800c01e <update_pwm+0x52>
		modified_amp = -AMP_LIMIT;
 800c01a:	eddf 8ab4 	vldr	s17, [pc, #720]	; 800c2ec <update_pwm+0x320>
	}

	if (modified_amp > 0){
 800c01e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c026:	dd15      	ble.n	800c054 <update_pwm+0x88>
		field_phase_int = pole_phase_int - (int)((phase_shift + FOC_phase_shift) * 100.0f);
 800c028:	4bb1      	ldr	r3, [pc, #708]	; (800c2f0 <update_pwm+0x324>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	4ab1      	ldr	r2, [pc, #708]	; (800c2f4 <update_pwm+0x328>)
 800c02e:	ed92 7a00 	vldr	s14, [r2]
 800c032:	4ab1      	ldr	r2, [pc, #708]	; (800c2f8 <update_pwm+0x32c>)
 800c034:	edd2 7a00 	vldr	s15, [r2]
 800c038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c03c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800c2fc <update_pwm+0x330>
 800c040:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c048:	ee17 2a90 	vmov	r2, s15
 800c04c:	1a9c      	subs	r4, r3, r2
		u0 *= modified_amp;  //takes<200ns
 800c04e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800c052:	e016      	b.n	800c082 <update_pwm+0xb6>
	}
	else {
		field_phase_int = pole_phase_int + (int)((phase_shift + FOC_phase_shift) * 100.0f);
 800c054:	4ba7      	ldr	r3, [pc, #668]	; (800c2f4 <update_pwm+0x328>)
 800c056:	ed93 7a00 	vldr	s14, [r3]
 800c05a:	4ba7      	ldr	r3, [pc, #668]	; (800c2f8 <update_pwm+0x32c>)
 800c05c:	edd3 7a00 	vldr	s15, [r3]
 800c060:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c064:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 800c2fc <update_pwm+0x330>
 800c068:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c06c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c070:	ee17 2a90 	vmov	r2, s15
 800c074:	4b9e      	ldr	r3, [pc, #632]	; (800c2f0 <update_pwm+0x324>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	18d4      	adds	r4, r2, r3
		u0 *= -modified_amp;  //takes<200ns
 800c07a:	eef1 7a68 	vneg.f32	s15, s17
 800c07e:	ee28 8a27 	vmul.f32	s16, s16, s15
	}

	if (!sw_enable_pwm){
 800c082:	4b9f      	ldr	r3, [pc, #636]	; (800c300 <update_pwm+0x334>)
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	f083 0301 	eor.w	r3, r3, #1
 800c08a:	b2db      	uxtb	r3, r3
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <update_pwm+0xc8>
		u0 = 0;
 800c090:	ed9f 8a9c 	vldr	s16, [pc, #624]	; 800c304 <update_pwm+0x338>
	}

	if (field_phase_int < 0) {
 800c094:	2c00      	cmp	r4, #0
 800c096:	da02      	bge.n	800c09e <update_pwm+0xd2>
		field_phase_int += 628;
 800c098:	f504 741d 	add.w	r4, r4, #628	; 0x274
 800c09c:	e004      	b.n	800c0a8 <update_pwm+0xdc>
	}
	else if (field_phase_int >= 628) {
 800c09e:	f5b4 7f1d 	cmp.w	r4, #628	; 0x274
 800c0a2:	db01      	blt.n	800c0a8 <update_pwm+0xdc>
		field_phase_int -= 628;
 800c0a4:	f5a4 741d 	sub.w	r4, r4, #628	; 0x274
	}//150ns

	register float uA = 0;
 800c0a8:	eddf 8a96 	vldr	s17, [pc, #600]	; 800c304 <update_pwm+0x338>
	register float uB = 0;
 800c0ac:	eddf 9a95 	vldr	s19, [pc, #596]	; 800c304 <update_pwm+0x338>
	register float uC = 0;
 800c0b0:	ed9f 9a94 	vldr	s18, [pc, #592]	; 800c304 <update_pwm+0x338>

	if (control_method != freerun ){
 800c0b4:	4b94      	ldr	r3, [pc, #592]	; (800c308 <update_pwm+0x33c>)
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	2b02      	cmp	r3, #2
 800c0ba:	f000 80bd 	beq.w	800c238 <update_pwm+0x26c>
		if (control_method == sinusoidal ){
 800c0be:	4b92      	ldr	r3, [pc, #584]	; (800c308 <update_pwm+0x33c>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d137      	bne.n	800c136 <update_pwm+0x16a>

			if  (field_phase_int < 210)	{
 800c0c6:	2cd1      	cmp	r4, #209	; 0xd1
 800c0c8:	dc0e      	bgt.n	800c0e8 <update_pwm+0x11c>
				uA = lookup[field_phase_int]; //took<32000ns - with lookup implement it's just 2000ns
 800c0ca:	4a90      	ldr	r2, [pc, #576]	; (800c30c <update_pwm+0x340>)
 800c0cc:	00a3      	lsls	r3, r4, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	edd3 8a00 	vldr	s17, [r3]
				uB = lookup[210 - 1 - field_phase_int]; //
 800c0d4:	f1c4 03d1 	rsb	r3, r4, #209	; 0xd1
 800c0d8:	4a8c      	ldr	r2, [pc, #560]	; (800c30c <update_pwm+0x340>)
 800c0da:	009b      	lsls	r3, r3, #2
 800c0dc:	4413      	add	r3, r2
 800c0de:	edd3 9a00 	vldr	s19, [r3]
				uC = 0;
 800c0e2:	ed9f 9a88 	vldr	s18, [pc, #544]	; 800c304 <update_pwm+0x338>
 800c0e6:	e06b      	b.n	800c1c0 <update_pwm+0x1f4>
			}
		 else if  (field_phase_int < 420){	 //210...419
 800c0e8:	f5b4 7fd2 	cmp.w	r4, #420	; 0x1a4
 800c0ec:	da11      	bge.n	800c112 <update_pwm+0x146>
				uA = 0;
 800c0ee:	eddf 8a85 	vldr	s17, [pc, #532]	; 800c304 <update_pwm+0x338>
				uB = lookup[field_phase_int - 210];
 800c0f2:	f1a4 03d2 	sub.w	r3, r4, #210	; 0xd2
 800c0f6:	4a85      	ldr	r2, [pc, #532]	; (800c30c <update_pwm+0x340>)
 800c0f8:	009b      	lsls	r3, r3, #2
 800c0fa:	4413      	add	r3, r2
 800c0fc:	edd3 9a00 	vldr	s19, [r3]
				uC = lookup[420 - 1 - field_phase_int];
 800c100:	f5c4 73d1 	rsb	r3, r4, #418	; 0x1a2
 800c104:	3301      	adds	r3, #1
 800c106:	4a81      	ldr	r2, [pc, #516]	; (800c30c <update_pwm+0x340>)
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	4413      	add	r3, r2
 800c10c:	ed93 9a00 	vldr	s18, [r3]
 800c110:	e056      	b.n	800c1c0 <update_pwm+0x1f4>
		 }
		 else	{  //420...629
				uA = lookup[630 - 1 - field_phase_int];
 800c112:	f5c4 731d 	rsb	r3, r4, #628	; 0x274
 800c116:	3301      	adds	r3, #1
 800c118:	4a7c      	ldr	r2, [pc, #496]	; (800c30c <update_pwm+0x340>)
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	4413      	add	r3, r2
 800c11e:	edd3 8a00 	vldr	s17, [r3]
				uB = 0;
 800c122:	eddf 9a78 	vldr	s19, [pc, #480]	; 800c304 <update_pwm+0x338>
				uC = lookup[field_phase_int - 420];
 800c126:	f5a4 73d2 	sub.w	r3, r4, #420	; 0x1a4
 800c12a:	4a78      	ldr	r2, [pc, #480]	; (800c30c <update_pwm+0x340>)
 800c12c:	009b      	lsls	r3, r3, #2
 800c12e:	4413      	add	r3, r2
 800c130:	ed93 9a00 	vldr	s18, [r3]
 800c134:	e044      	b.n	800c1c0 <update_pwm+0x1f4>
			}
		}//400ns

		else if (control_method == trapezoidal){
 800c136:	4b74      	ldr	r3, [pc, #464]	; (800c308 <update_pwm+0x33c>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d140      	bne.n	800c1c0 <update_pwm+0x1f4>
			if  (field_phase_int < 105-52)	{
 800c13e:	2c34      	cmp	r4, #52	; 0x34
 800c140:	dc06      	bgt.n	800c150 <update_pwm+0x184>
				uA = 1;
 800c142:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800c146:	eddf 9a6f 	vldr	s19, [pc, #444]	; 800c304 <update_pwm+0x338>
				uC = 0;
 800c14a:	ed9f 9a6e 	vldr	s18, [pc, #440]	; 800c304 <update_pwm+0x338>
 800c14e:	e037      	b.n	800c1c0 <update_pwm+0x1f4>
			}
			else if  (field_phase_int < 210-52)	{
 800c150:	2c9d      	cmp	r4, #157	; 0x9d
 800c152:	dc06      	bgt.n	800c162 <update_pwm+0x196>
				uA = 1;
 800c154:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 1;
 800c158:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 0;
 800c15c:	ed9f 9a69 	vldr	s18, [pc, #420]	; 800c304 <update_pwm+0x338>
 800c160:	e02e      	b.n	800c1c0 <update_pwm+0x1f4>
			}
			else if  (field_phase_int < 315-52)	{
 800c162:	f5b4 7f83 	cmp.w	r4, #262	; 0x106
 800c166:	dc06      	bgt.n	800c176 <update_pwm+0x1aa>
				uA = 0;
 800c168:	eddf 8a66 	vldr	s17, [pc, #408]	; 800c304 <update_pwm+0x338>
				uB = 1;
 800c16c:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 0;
 800c170:	ed9f 9a64 	vldr	s18, [pc, #400]	; 800c304 <update_pwm+0x338>
 800c174:	e024      	b.n	800c1c0 <update_pwm+0x1f4>
			}
			else if  (field_phase_int < 420-52)	{
 800c176:	f5b4 7fb8 	cmp.w	r4, #368	; 0x170
 800c17a:	da06      	bge.n	800c18a <update_pwm+0x1be>
				uA = 0;
 800c17c:	eddf 8a61 	vldr	s17, [pc, #388]	; 800c304 <update_pwm+0x338>
				uB = 1;
 800c180:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 1;
 800c184:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c188:	e01a      	b.n	800c1c0 <update_pwm+0x1f4>
			}
			else if  (field_phase_int < 525-52)	{
 800c18a:	f5b4 7fec 	cmp.w	r4, #472	; 0x1d8
 800c18e:	dc06      	bgt.n	800c19e <update_pwm+0x1d2>
				uA = 0;
 800c190:	eddf 8a5c 	vldr	s17, [pc, #368]	; 800c304 <update_pwm+0x338>
				uB = 0;
 800c194:	eddf 9a5b 	vldr	s19, [pc, #364]	; 800c304 <update_pwm+0x338>
				uC = 1;
 800c198:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c19c:	e010      	b.n	800c1c0 <update_pwm+0x1f4>
			}
			else if  (field_phase_int < 630-52)	{
 800c19e:	f240 2341 	movw	r3, #577	; 0x241
 800c1a2:	429c      	cmp	r4, r3
 800c1a4:	dc06      	bgt.n	800c1b4 <update_pwm+0x1e8>
				uA = 1;
 800c1a6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800c1aa:	eddf 9a56 	vldr	s19, [pc, #344]	; 800c304 <update_pwm+0x338>
				uC = 1;
 800c1ae:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c1b2:	e005      	b.n	800c1c0 <update_pwm+0x1f4>
			}
			else 	{ //same as first half phase
				uA = 1;
 800c1b4:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800c1b8:	eddf 9a52 	vldr	s19, [pc, #328]	; 800c304 <update_pwm+0x338>
				uC = 0;
 800c1bc:	ed9f 9a51 	vldr	s18, [pc, #324]	; 800c304 <update_pwm+0x338>
			}
		}

		pwmA = (uint16_t) (PWM_F * u0 * uA); //180ns
 800c1c0:	eddf 7a53 	vldr	s15, [pc, #332]	; 800c310 <update_pwm+0x344>
 800c1c4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c1c8:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800c1cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1d0:	ee17 3a90 	vmov	r3, s15
 800c1d4:	b29b      	uxth	r3, r3
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	4b4e      	ldr	r3, [pc, #312]	; (800c314 <update_pwm+0x348>)
 800c1da:	601a      	str	r2, [r3, #0]
		pwmB = (uint16_t) (PWM_F * u0 * uB); //180ns
 800c1dc:	eddf 7a4c 	vldr	s15, [pc, #304]	; 800c310 <update_pwm+0x344>
 800c1e0:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c1e4:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800c1e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c1ec:	ee17 3a90 	vmov	r3, s15
 800c1f0:	b29b      	uxth	r3, r3
 800c1f2:	461a      	mov	r2, r3
 800c1f4:	4b48      	ldr	r3, [pc, #288]	; (800c318 <update_pwm+0x34c>)
 800c1f6:	601a      	str	r2, [r3, #0]
		pwmC = (uint16_t) (PWM_F * u0 * uC); //180ns
 800c1f8:	eddf 7a45 	vldr	s15, [pc, #276]	; 800c310 <update_pwm+0x344>
 800c1fc:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c200:	ee69 7a27 	vmul.f32	s15, s18, s15
 800c204:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c208:	ee17 3a90 	vmov	r3, s15
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	461a      	mov	r2, r3
 800c210:	4b42      	ldr	r3, [pc, #264]	; (800c31c <update_pwm+0x350>)
 800c212:	601a      	str	r2, [r3, #0]

		// --- send out PWM pulses 0...2048
		if (normal_operation_enabled){
 800c214:	4b42      	ldr	r3, [pc, #264]	; (800c320 <update_pwm+0x354>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 8123 	beq.w	800c464 <update_pwm+0x498>
			TIM1->CCR1 = pwmA; //takes<150ns
 800c21e:	4b3d      	ldr	r3, [pc, #244]	; (800c314 <update_pwm+0x348>)
 800c220:	681a      	ldr	r2, [r3, #0]
 800c222:	4b40      	ldr	r3, [pc, #256]	; (800c324 <update_pwm+0x358>)
 800c224:	635a      	str	r2, [r3, #52]	; 0x34
			if (INVERT){
				TIM1->CCR3 = pwmB; //takes<150ns
				TIM1->CCR2 = pwmC; //takes<150ns
			}
			else {
				TIM1->CCR2 = pwmB; //takes<150ns
 800c226:	4b3c      	ldr	r3, [pc, #240]	; (800c318 <update_pwm+0x34c>)
 800c228:	681a      	ldr	r2, [r3, #0]
 800c22a:	4b3e      	ldr	r3, [pc, #248]	; (800c324 <update_pwm+0x358>)
 800c22c:	639a      	str	r2, [r3, #56]	; 0x38
				TIM1->CCR3 = pwmC; //takes<150ns
 800c22e:	4b3b      	ldr	r3, [pc, #236]	; (800c31c <update_pwm+0x350>)
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b3c      	ldr	r3, [pc, #240]	; (800c324 <update_pwm+0x358>)
 800c234:	63da      	str	r2, [r3, #60]	; 0x3c
 800c236:	e115      	b.n	800c464 <update_pwm+0x498>

		}//300ns
	}

	else{ // NOTE this mode is still experimental
		if  (field_phase_int < 105)	{
 800c238:	2c68      	cmp	r4, #104	; 0x68
 800c23a:	dc24      	bgt.n	800c286 <update_pwm+0x2ba>
			uA = 1;
 800c23c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c240:	4b39      	ldr	r3, [pc, #228]	; (800c328 <update_pwm+0x35c>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	ee07 3a90 	vmov	s15, r3
 800c248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c24c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c250:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800c254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c258:	ee17 3a90 	vmov	r3, s15
 800c25c:	b29b      	uxth	r3, r3
 800c25e:	461a      	mov	r2, r3
 800c260:	4b2c      	ldr	r3, [pc, #176]	; (800c314 <update_pwm+0x348>)
 800c262:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = pwmA; //takes<150ns
 800c264:	4b2b      	ldr	r3, [pc, #172]	; (800c314 <update_pwm+0x348>)
 800c266:	681a      	ldr	r2, [r3, #0]
 800c268:	4b2e      	ldr	r3, [pc, #184]	; (800c324 <update_pwm+0x358>)
 800c26a:	635a      	str	r2, [r3, #52]	; 0x34
//			SET_BIT(TIM1->CCMR1, TIM_CCMR1_OC2CE);
//			CLEAR_BIT(TIM1->CCMR1, TIM_CCMR1_OC2CE);
//			SET_BIT(TIM1->CCMR2, TIM_CCMR2_OC3CE);
//			CLEAR_BIT(TIM1->CCMR2, TIM_CCMR2_OC3CE);

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c26c:	4b2d      	ldr	r3, [pc, #180]	; (800c324 <update_pwm+0x358>)
 800c26e:	699b      	ldr	r3, [r3, #24]
 800c270:	4a2c      	ldr	r2, [pc, #176]	; (800c324 <update_pwm+0x358>)
 800c272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c276:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c278:	4b2a      	ldr	r3, [pc, #168]	; (800c324 <update_pwm+0x358>)
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	4a29      	ldr	r2, [pc, #164]	; (800c324 <update_pwm+0x358>)
 800c27e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c282:	6193      	str	r3, [r2, #24]
 800c284:	e0ee      	b.n	800c464 <update_pwm+0x498>
		}
		else if  (field_phase_int < 210)	{
 800c286:	2cd1      	cmp	r4, #209	; 0xd1
 800c288:	dc50      	bgt.n	800c32c <update_pwm+0x360>
			uB = 1;
 800c28a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			pwmB = (uint16_t) (pwm * u0 * uB); //takes<2s00ns
 800c28e:	4b26      	ldr	r3, [pc, #152]	; (800c328 <update_pwm+0x35c>)
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	ee07 3a90 	vmov	s15, r3
 800c296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c29a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c29e:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800c2a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c2a6:	ee17 3a90 	vmov	r3, s15
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	461a      	mov	r2, r3
 800c2ae:	4b1a      	ldr	r3, [pc, #104]	; (800c318 <update_pwm+0x34c>)
 800c2b0:	601a      	str	r2, [r3, #0]
			TIM1->CCR2 = pwmB; //takes<150ns
 800c2b2:	4b19      	ldr	r3, [pc, #100]	; (800c318 <update_pwm+0x34c>)
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	4b1b      	ldr	r3, [pc, #108]	; (800c324 <update_pwm+0x358>)
 800c2b8:	639a      	str	r2, [r3, #56]	; 0x38

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c2ba:	4b1a      	ldr	r3, [pc, #104]	; (800c324 <update_pwm+0x358>)
 800c2bc:	699b      	ldr	r3, [r3, #24]
 800c2be:	4a19      	ldr	r2, [pc, #100]	; (800c324 <update_pwm+0x358>)
 800c2c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c2c4:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c2c6:	4b17      	ldr	r3, [pc, #92]	; (800c324 <update_pwm+0x358>)
 800c2c8:	699b      	ldr	r3, [r3, #24]
 800c2ca:	4a16      	ldr	r2, [pc, #88]	; (800c324 <update_pwm+0x358>)
 800c2cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c2d0:	6193      	str	r3, [r2, #24]
 800c2d2:	e0c7      	b.n	800c464 <update_pwm+0x498>
 800c2d4:	40020c00 	.word	0x40020c00
 800c2d8:	3f13c9ef 	.word	0x3f13c9ef
 800c2dc:	2000023c 	.word	0x2000023c
 800c2e0:	2000024c 	.word	0x2000024c
 800c2e4:	20000010 	.word	0x20000010
 800c2e8:	3f666666 	.word	0x3f666666
 800c2ec:	bf666666 	.word	0xbf666666
 800c2f0:	20000d94 	.word	0x20000d94
 800c2f4:	20000018 	.word	0x20000018
 800c2f8:	200002a0 	.word	0x200002a0
 800c2fc:	42c80000 	.word	0x42c80000
 800c300:	20000014 	.word	0x20000014
 800c304:	00000000 	.word	0x00000000
 800c308:	20000234 	.word	0x20000234
 800c30c:	20000370 	.word	0x20000370
 800c310:	45000000 	.word	0x45000000
 800c314:	20000250 	.word	0x20000250
 800c318:	20000254 	.word	0x20000254
 800c31c:	20000258 	.word	0x20000258
 800c320:	2000002e 	.word	0x2000002e
 800c324:	40010000 	.word	0x40010000
 800c328:	2000000c 	.word	0x2000000c
		}
		else if  (field_phase_int < 315)	{
 800c32c:	f5b4 7f9d 	cmp.w	r4, #314	; 0x13a
 800c330:	dc24      	bgt.n	800c37c <update_pwm+0x3b0>
			uB = 1;
 800c332:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			pwmB = (uint16_t) (pwm * u0 * uB); //takes<2s00ns
 800c336:	4b50      	ldr	r3, [pc, #320]	; (800c478 <update_pwm+0x4ac>)
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	ee07 3a90 	vmov	s15, r3
 800c33e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c342:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c346:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800c34a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c34e:	ee17 3a90 	vmov	r3, s15
 800c352:	b29b      	uxth	r3, r3
 800c354:	461a      	mov	r2, r3
 800c356:	4b49      	ldr	r3, [pc, #292]	; (800c47c <update_pwm+0x4b0>)
 800c358:	601a      	str	r2, [r3, #0]
			TIM1->CCR2 = pwmB; //takes<150ns
 800c35a:	4b48      	ldr	r3, [pc, #288]	; (800c47c <update_pwm+0x4b0>)
 800c35c:	681a      	ldr	r2, [r3, #0]
 800c35e:	4b48      	ldr	r3, [pc, #288]	; (800c480 <update_pwm+0x4b4>)
 800c360:	639a      	str	r2, [r3, #56]	; 0x38

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c362:	4b47      	ldr	r3, [pc, #284]	; (800c480 <update_pwm+0x4b4>)
 800c364:	699b      	ldr	r3, [r3, #24]
 800c366:	4a46      	ldr	r2, [pc, #280]	; (800c480 <update_pwm+0x4b4>)
 800c368:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c36c:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c36e:	4b44      	ldr	r3, [pc, #272]	; (800c480 <update_pwm+0x4b4>)
 800c370:	699b      	ldr	r3, [r3, #24]
 800c372:	4a43      	ldr	r2, [pc, #268]	; (800c480 <update_pwm+0x4b4>)
 800c374:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c378:	6193      	str	r3, [r2, #24]
 800c37a:	e073      	b.n	800c464 <update_pwm+0x498>
		}
		else if  (field_phase_int < 420)	{
 800c37c:	f5b4 7fd2 	cmp.w	r4, #420	; 0x1a4
 800c380:	da24      	bge.n	800c3cc <update_pwm+0x400>
			uC = 1;
 800c382:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			pwmC = (uint16_t) (pwm * u0 * uC); //takes<2s00ns
 800c386:	4b3c      	ldr	r3, [pc, #240]	; (800c478 <update_pwm+0x4ac>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	ee07 3a90 	vmov	s15, r3
 800c38e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c392:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c396:	ee69 7a27 	vmul.f32	s15, s18, s15
 800c39a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c39e:	ee17 3a90 	vmov	r3, s15
 800c3a2:	b29b      	uxth	r3, r3
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	4b37      	ldr	r3, [pc, #220]	; (800c484 <update_pwm+0x4b8>)
 800c3a8:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = pwmC; //takes<150ns
 800c3aa:	4b36      	ldr	r3, [pc, #216]	; (800c484 <update_pwm+0x4b8>)
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	4b34      	ldr	r3, [pc, #208]	; (800c480 <update_pwm+0x4b4>)
 800c3b0:	63da      	str	r2, [r3, #60]	; 0x3c

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c3b2:	4b33      	ldr	r3, [pc, #204]	; (800c480 <update_pwm+0x4b4>)
 800c3b4:	699b      	ldr	r3, [r3, #24]
 800c3b6:	4a32      	ldr	r2, [pc, #200]	; (800c480 <update_pwm+0x4b4>)
 800c3b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c3bc:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c3be:	4b30      	ldr	r3, [pc, #192]	; (800c480 <update_pwm+0x4b4>)
 800c3c0:	699b      	ldr	r3, [r3, #24]
 800c3c2:	4a2f      	ldr	r2, [pc, #188]	; (800c480 <update_pwm+0x4b4>)
 800c3c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800c3c8:	6193      	str	r3, [r2, #24]
 800c3ca:	e04b      	b.n	800c464 <update_pwm+0x498>
		}
		else if  (field_phase_int < 525)	{
 800c3cc:	f5b4 7f03 	cmp.w	r4, #524	; 0x20c
 800c3d0:	dc24      	bgt.n	800c41c <update_pwm+0x450>
			uC = 1;
 800c3d2:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			pwmC = (uint16_t) (pwm * u0 * uC); //takes<2s00ns
 800c3d6:	4b28      	ldr	r3, [pc, #160]	; (800c478 <update_pwm+0x4ac>)
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	ee07 3a90 	vmov	s15, r3
 800c3de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c3e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c3e6:	ee69 7a27 	vmul.f32	s15, s18, s15
 800c3ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3ee:	ee17 3a90 	vmov	r3, s15
 800c3f2:	b29b      	uxth	r3, r3
 800c3f4:	461a      	mov	r2, r3
 800c3f6:	4b23      	ldr	r3, [pc, #140]	; (800c484 <update_pwm+0x4b8>)
 800c3f8:	601a      	str	r2, [r3, #0]
			TIM1->CCR3 = pwmC; //takes<150ns
 800c3fa:	4b22      	ldr	r3, [pc, #136]	; (800c484 <update_pwm+0x4b8>)
 800c3fc:	681a      	ldr	r2, [r3, #0]
 800c3fe:	4b20      	ldr	r3, [pc, #128]	; (800c480 <update_pwm+0x4b4>)
 800c400:	63da      	str	r2, [r3, #60]	; 0x3c

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800c402:	4b1f      	ldr	r3, [pc, #124]	; (800c480 <update_pwm+0x4b4>)
 800c404:	699b      	ldr	r3, [r3, #24]
 800c406:	4a1e      	ldr	r2, [pc, #120]	; (800c480 <update_pwm+0x4b4>)
 800c408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c40c:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c40e:	4b1c      	ldr	r3, [pc, #112]	; (800c480 <update_pwm+0x4b4>)
 800c410:	699b      	ldr	r3, [r3, #24]
 800c412:	4a1b      	ldr	r2, [pc, #108]	; (800c480 <update_pwm+0x4b4>)
 800c414:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c418:	6193      	str	r3, [r2, #24]
 800c41a:	e023      	b.n	800c464 <update_pwm+0x498>
		}
		else 	{
			uA = 1;
 800c41c:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			pwmA = (uint16_t) (pwm * u0 * uA); //takes<2s00ns
 800c420:	4b15      	ldr	r3, [pc, #84]	; (800c478 <update_pwm+0x4ac>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	ee07 3a90 	vmov	s15, r3
 800c428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c42c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800c430:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800c434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c438:	ee17 3a90 	vmov	r3, s15
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	461a      	mov	r2, r3
 800c440:	4b11      	ldr	r3, [pc, #68]	; (800c488 <update_pwm+0x4bc>)
 800c442:	601a      	str	r2, [r3, #0]
			TIM1->CCR1 = pwmA; //takes<150ns
 800c444:	4b10      	ldr	r3, [pc, #64]	; (800c488 <update_pwm+0x4bc>)
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	4b0d      	ldr	r3, [pc, #52]	; (800c480 <update_pwm+0x4b4>)
 800c44a:	635a      	str	r2, [r3, #52]	; 0x34

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800c44c:	4b0c      	ldr	r3, [pc, #48]	; (800c480 <update_pwm+0x4b4>)
 800c44e:	699b      	ldr	r3, [r3, #24]
 800c450:	4a0b      	ldr	r2, [pc, #44]	; (800c480 <update_pwm+0x4b4>)
 800c452:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800c456:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800c458:	4b09      	ldr	r3, [pc, #36]	; (800c480 <update_pwm+0x4b4>)
 800c45a:	699b      	ldr	r3, [r3, #24]
 800c45c:	4a08      	ldr	r2, [pc, #32]	; (800c480 <update_pwm+0x4b4>)
 800c45e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c462:	6193      	str	r3, [r2, #24]
		}

	}

#if DB_TIMING
	DB1L;
 800c464:	4b09      	ldr	r3, [pc, #36]	; (800c48c <update_pwm+0x4c0>)
 800c466:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c46a:	619a      	str	r2, [r3, #24]
#endif

}
 800c46c:	bf00      	nop
 800c46e:	46bd      	mov	sp, r7
 800c470:	ecbd 8b04 	vpop	{d8-d9}
 800c474:	bc90      	pop	{r4, r7}
 800c476:	4770      	bx	lr
 800c478:	2000000c 	.word	0x2000000c
 800c47c:	20000254 	.word	0x20000254
 800c480:	40010000 	.word	0x40010000
 800c484:	20000258 	.word	0x20000258
 800c488:	20000250 	.word	0x20000250
 800c48c:	40020c00 	.word	0x40020c00

0800c490 <timing_party>:

// -----------------------------------------------------------
// Just a helpful util to check processing times for different operations
// -----------------------------------------------------------
void timing_party(){
 800c490:	b480      	push	{r7}
 800c492:	b087      	sub	sp, #28
 800c494:	af00      	add	r7, sp, #0
	DB1L;
 800c496:	4b3c      	ldr	r3, [pc, #240]	; (800c588 <timing_party+0xf8>)
 800c498:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c49c:	619a      	str	r2, [r3, #24]
	DB1H;
 800c49e:	4b3a      	ldr	r3, [pc, #232]	; (800c588 <timing_party+0xf8>)
 800c4a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c4a4:	619a      	str	r2, [r3, #24]
	DB1L;
 800c4a6:	4b38      	ldr	r3, [pc, #224]	; (800c588 <timing_party+0xf8>)
 800c4a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4ac:	619a      	str	r2, [r3, #24]
	DB1H;
 800c4ae:	4b36      	ldr	r3, [pc, #216]	; (800c588 <timing_party+0xf8>)
 800c4b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c4b4:	619a      	str	r2, [r3, #24]
	DB1L;
 800c4b6:	4b34      	ldr	r3, [pc, #208]	; (800c588 <timing_party+0xf8>)
 800c4b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4bc:	619a      	str	r2, [r3, #24]
	DB1H;
 800c4be:	4b32      	ldr	r3, [pc, #200]	; (800c588 <timing_party+0xf8>)
 800c4c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c4c4:	619a      	str	r2, [r3, #24]
	DB1L;
 800c4c6:	4b30      	ldr	r3, [pc, #192]	; (800c588 <timing_party+0xf8>)
 800c4c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4cc:	619a      	str	r2, [r3, #24]
	DB1H;
 800c4ce:	4b2e      	ldr	r3, [pc, #184]	; (800c588 <timing_party+0xf8>)
 800c4d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c4d4:	619a      	str	r2, [r3, #24]

	}

	if (1) {

		DB1L;
 800c4d6:	4b2c      	ldr	r3, [pc, #176]	; (800c588 <timing_party+0xf8>)
 800c4d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4dc:	619a      	str	r2, [r3, #24]
		bool v = true;//
 800c4de:	2301      	movs	r3, #1
 800c4e0:	75fb      	strb	r3, [r7, #23]
		int ff = 1;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	613b      	str	r3, [r7, #16]
		DB1H;//100
 800c4e6:	4b28      	ldr	r3, [pc, #160]	; (800c588 <timing_party+0xf8>)
 800c4e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c4ec:	619a      	str	r2, [r3, #24]
		if (v){
 800c4ee:	7dfb      	ldrb	r3, [r7, #23]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d001      	beq.n	800c4f8 <timing_party+0x68>
			int ff = 0;
 800c4f4:	2300      	movs	r3, #0
 800c4f6:	60fb      	str	r3, [r7, #12]
		}

		DB1L;//80
 800c4f8:	4b23      	ldr	r3, [pc, #140]	; (800c588 <timing_party+0xf8>)
 800c4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4fe:	619a      	str	r2, [r3, #24]
		int vv = 1;
 800c500:	2301      	movs	r3, #1
 800c502:	60bb      	str	r3, [r7, #8]
		int fff = 1;
 800c504:	2301      	movs	r3, #1
 800c506:	607b      	str	r3, [r7, #4]
		DB1H;//40
 800c508:	4b1f      	ldr	r3, [pc, #124]	; (800c588 <timing_party+0xf8>)
 800c50a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c50e:	619a      	str	r2, [r3, #24]
		fff *= vv;//0 <<<<<<<<<<<<,OK this is not resolvable anymore
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	fb02 f303 	mul.w	r3, r2, r3
 800c518:	607b      	str	r3, [r7, #4]



		DB1L;//80
 800c51a:	4b1b      	ldr	r3, [pc, #108]	; (800c588 <timing_party+0xf8>)
 800c51c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c520:	619a      	str	r2, [r3, #24]
		DB1H;
 800c522:	4b19      	ldr	r3, [pc, #100]	; (800c588 <timing_party+0xf8>)
 800c524:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c528:	619a      	str	r2, [r3, #24]
		DB1L;
 800c52a:	4b17      	ldr	r3, [pc, #92]	; (800c588 <timing_party+0xf8>)
 800c52c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c530:	619a      	str	r2, [r3, #24]
		DB1H;
 800c532:	4b15      	ldr	r3, [pc, #84]	; (800c588 <timing_party+0xf8>)
 800c534:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c538:	619a      	str	r2, [r3, #24]
	}

	// --- MORE LEARINGS
	// - avoid fmod - 4000ns

	DB1L;
 800c53a:	4b13      	ldr	r3, [pc, #76]	; (800c588 <timing_party+0xf8>)
 800c53c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c540:	619a      	str	r2, [r3, #24]
	DB1H;
 800c542:	4b11      	ldr	r3, [pc, #68]	; (800c588 <timing_party+0xf8>)
 800c544:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c548:	619a      	str	r2, [r3, #24]
	DB1L;
 800c54a:	4b0f      	ldr	r3, [pc, #60]	; (800c588 <timing_party+0xf8>)
 800c54c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c550:	619a      	str	r2, [r3, #24]
	DB1H;
 800c552:	4b0d      	ldr	r3, [pc, #52]	; (800c588 <timing_party+0xf8>)
 800c554:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c558:	619a      	str	r2, [r3, #24]

	DB1L;
 800c55a:	4b0b      	ldr	r3, [pc, #44]	; (800c588 <timing_party+0xf8>)
 800c55c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c560:	619a      	str	r2, [r3, #24]
	DB1H;
 800c562:	4b09      	ldr	r3, [pc, #36]	; (800c588 <timing_party+0xf8>)
 800c564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c568:	619a      	str	r2, [r3, #24]
	DB1L;
 800c56a:	4b07      	ldr	r3, [pc, #28]	; (800c588 <timing_party+0xf8>)
 800c56c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c570:	619a      	str	r2, [r3, #24]
	DB1H;
 800c572:	4b05      	ldr	r3, [pc, #20]	; (800c588 <timing_party+0xf8>)
 800c574:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c578:	619a      	str	r2, [r3, #24]



}
 800c57a:	bf00      	nop
 800c57c:	371c      	adds	r7, #28
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	40020c00 	.word	0x40020c00

0800c58c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c58c:	b480      	push	{r7}
 800c58e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c590:	bf00      	nop
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
	...

0800c59c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	607b      	str	r3, [r7, #4]
 800c5a6:	4b10      	ldr	r3, [pc, #64]	; (800c5e8 <HAL_MspInit+0x4c>)
 800c5a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5aa:	4a0f      	ldr	r2, [pc, #60]	; (800c5e8 <HAL_MspInit+0x4c>)
 800c5ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c5b0:	6453      	str	r3, [r2, #68]	; 0x44
 800c5b2:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <HAL_MspInit+0x4c>)
 800c5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c5b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c5ba:	607b      	str	r3, [r7, #4]
 800c5bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c5be:	2300      	movs	r3, #0
 800c5c0:	603b      	str	r3, [r7, #0]
 800c5c2:	4b09      	ldr	r3, [pc, #36]	; (800c5e8 <HAL_MspInit+0x4c>)
 800c5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5c6:	4a08      	ldr	r2, [pc, #32]	; (800c5e8 <HAL_MspInit+0x4c>)
 800c5c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c5cc:	6413      	str	r3, [r2, #64]	; 0x40
 800c5ce:	4b06      	ldr	r3, [pc, #24]	; (800c5e8 <HAL_MspInit+0x4c>)
 800c5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c5d6:	603b      	str	r3, [r7, #0]
 800c5d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c5da:	bf00      	nop
 800c5dc:	370c      	adds	r7, #12
 800c5de:	46bd      	mov	sp, r7
 800c5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e4:	4770      	bx	lr
 800c5e6:	bf00      	nop
 800c5e8:	40023800 	.word	0x40023800

0800c5ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b092      	sub	sp, #72	; 0x48
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c5f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c5f8:	2200      	movs	r2, #0
 800c5fa:	601a      	str	r2, [r3, #0]
 800c5fc:	605a      	str	r2, [r3, #4]
 800c5fe:	609a      	str	r2, [r3, #8]
 800c600:	60da      	str	r2, [r3, #12]
 800c602:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a9b      	ldr	r2, [pc, #620]	; (800c878 <HAL_ADC_MspInit+0x28c>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	f040 8096 	bne.w	800c73c <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c610:	2300      	movs	r3, #0
 800c612:	633b      	str	r3, [r7, #48]	; 0x30
 800c614:	4b99      	ldr	r3, [pc, #612]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c618:	4a98      	ldr	r2, [pc, #608]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c61a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c61e:	6453      	str	r3, [r2, #68]	; 0x44
 800c620:	4b96      	ldr	r3, [pc, #600]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c628:	633b      	str	r3, [r7, #48]	; 0x30
 800c62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c62c:	2300      	movs	r3, #0
 800c62e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c630:	4b92      	ldr	r3, [pc, #584]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c634:	4a91      	ldr	r2, [pc, #580]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c636:	f043 0304 	orr.w	r3, r3, #4
 800c63a:	6313      	str	r3, [r2, #48]	; 0x30
 800c63c:	4b8f      	ldr	r3, [pc, #572]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c63e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c648:	2300      	movs	r3, #0
 800c64a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c64c:	4b8b      	ldr	r3, [pc, #556]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c64e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c650:	4a8a      	ldr	r2, [pc, #552]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c652:	f043 0301 	orr.w	r3, r3, #1
 800c656:	6313      	str	r3, [r2, #48]	; 0x30
 800c658:	4b88      	ldr	r3, [pc, #544]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c65a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c65c:	f003 0301 	and.w	r3, r3, #1
 800c660:	62bb      	str	r3, [r7, #40]	; 0x28
 800c662:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c664:	2300      	movs	r3, #0
 800c666:	627b      	str	r3, [r7, #36]	; 0x24
 800c668:	4b84      	ldr	r3, [pc, #528]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c66a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c66c:	4a83      	ldr	r2, [pc, #524]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c66e:	f043 0302 	orr.w	r3, r3, #2
 800c672:	6313      	str	r3, [r2, #48]	; 0x30
 800c674:	4b81      	ldr	r3, [pc, #516]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c678:	f003 0302 	and.w	r3, r3, #2
 800c67c:	627b      	str	r3, [r7, #36]	; 0x24
 800c67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c680:	233e      	movs	r3, #62	; 0x3e
 800c682:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c684:	2303      	movs	r3, #3
 800c686:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c688:	2300      	movs	r3, #0
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c68c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c690:	4619      	mov	r1, r3
 800c692:	487b      	ldr	r0, [pc, #492]	; (800c880 <HAL_ADC_MspInit+0x294>)
 800c694:	f7f6 fe80 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c698:	233e      	movs	r3, #62	; 0x3e
 800c69a:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c69c:	2303      	movs	r3, #3
 800c69e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c6a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	4876      	ldr	r0, [pc, #472]	; (800c884 <HAL_ADC_MspInit+0x298>)
 800c6ac:	f7f6 fe74 	bl	8003398 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c6b0:	2301      	movs	r3, #1
 800c6b2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c6b4:	2303      	movs	r3, #3
 800c6b6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6b8:	2300      	movs	r3, #0
 800c6ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c6c0:	4619      	mov	r1, r3
 800c6c2:	4871      	ldr	r0, [pc, #452]	; (800c888 <HAL_ADC_MspInit+0x29c>)
 800c6c4:	f7f6 fe68 	bl	8003398 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c6c8:	4b70      	ldr	r3, [pc, #448]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c6ca:	4a71      	ldr	r2, [pc, #452]	; (800c890 <HAL_ADC_MspInit+0x2a4>)
 800c6cc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c6ce:	4b6f      	ldr	r3, [pc, #444]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c6d4:	4b6d      	ldr	r3, [pc, #436]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c6da:	4b6c      	ldr	r3, [pc, #432]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c6dc:	2200      	movs	r2, #0
 800c6de:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c6e0:	4b6a      	ldr	r3, [pc, #424]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c6e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c6e6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c6e8:	4b68      	ldr	r3, [pc, #416]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c6ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c6ee:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c6f0:	4b66      	ldr	r3, [pc, #408]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c6f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c6f6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c6f8:	4b64      	ldr	r3, [pc, #400]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c6fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c6fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800c700:	4b62      	ldr	r3, [pc, #392]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c702:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c706:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c708:	4b60      	ldr	r3, [pc, #384]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c70a:	2200      	movs	r2, #0
 800c70c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c70e:	485f      	ldr	r0, [pc, #380]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c710:	f7f6 fa5e 	bl	8002bd0 <HAL_DMA_Init>
 800c714:	4603      	mov	r3, r0
 800c716:	2b00      	cmp	r3, #0
 800c718:	d001      	beq.n	800c71e <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800c71a:	f7ff ff37 	bl	800c58c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a5a      	ldr	r2, [pc, #360]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c722:	639a      	str	r2, [r3, #56]	; 0x38
 800c724:	4a59      	ldr	r2, [pc, #356]	; (800c88c <HAL_ADC_MspInit+0x2a0>)
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c72a:	2200      	movs	r2, #0
 800c72c:	2100      	movs	r1, #0
 800c72e:	2012      	movs	r0, #18
 800c730:	f7f6 fa17 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c734:	2012      	movs	r0, #18
 800c736:	f7f6 fa30 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c73a:	e132      	b.n	800c9a2 <HAL_ADC_MspInit+0x3b6>
  else if(hadc->Instance==ADC2)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	4a54      	ldr	r2, [pc, #336]	; (800c894 <HAL_ADC_MspInit+0x2a8>)
 800c742:	4293      	cmp	r3, r2
 800c744:	f040 80ac 	bne.w	800c8a0 <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c748:	2300      	movs	r3, #0
 800c74a:	623b      	str	r3, [r7, #32]
 800c74c:	4b4b      	ldr	r3, [pc, #300]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c74e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c750:	4a4a      	ldr	r2, [pc, #296]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c756:	6453      	str	r3, [r2, #68]	; 0x44
 800c758:	4b48      	ldr	r3, [pc, #288]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c75a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c75c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c760:	623b      	str	r3, [r7, #32]
 800c762:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c764:	2300      	movs	r3, #0
 800c766:	61fb      	str	r3, [r7, #28]
 800c768:	4b44      	ldr	r3, [pc, #272]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c76a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c76c:	4a43      	ldr	r2, [pc, #268]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c76e:	f043 0304 	orr.w	r3, r3, #4
 800c772:	6313      	str	r3, [r2, #48]	; 0x30
 800c774:	4b41      	ldr	r3, [pc, #260]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c778:	f003 0304 	and.w	r3, r3, #4
 800c77c:	61fb      	str	r3, [r7, #28]
 800c77e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c780:	2300      	movs	r3, #0
 800c782:	61bb      	str	r3, [r7, #24]
 800c784:	4b3d      	ldr	r3, [pc, #244]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c788:	4a3c      	ldr	r2, [pc, #240]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c78a:	f043 0301 	orr.w	r3, r3, #1
 800c78e:	6313      	str	r3, [r2, #48]	; 0x30
 800c790:	4b3a      	ldr	r3, [pc, #232]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c794:	f003 0301 	and.w	r3, r3, #1
 800c798:	61bb      	str	r3, [r7, #24]
 800c79a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c79c:	2300      	movs	r3, #0
 800c79e:	617b      	str	r3, [r7, #20]
 800c7a0:	4b36      	ldr	r3, [pc, #216]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7a4:	4a35      	ldr	r2, [pc, #212]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c7a6:	f043 0302 	orr.w	r3, r3, #2
 800c7aa:	6313      	str	r3, [r2, #48]	; 0x30
 800c7ac:	4b33      	ldr	r3, [pc, #204]	; (800c87c <HAL_ADC_MspInit+0x290>)
 800c7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7b0:	f003 0302 	and.w	r3, r3, #2
 800c7b4:	617b      	str	r3, [r7, #20]
 800c7b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c7b8:	233e      	movs	r3, #62	; 0x3e
 800c7ba:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7bc:	2303      	movs	r3, #3
 800c7be:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c7c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c7c8:	4619      	mov	r1, r3
 800c7ca:	482d      	ldr	r0, [pc, #180]	; (800c880 <HAL_ADC_MspInit+0x294>)
 800c7cc:	f7f6 fde4 	bl	8003398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800c7d0:	2316      	movs	r3, #22
 800c7d2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c7dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c7e0:	4619      	mov	r1, r3
 800c7e2:	4828      	ldr	r0, [pc, #160]	; (800c884 <HAL_ADC_MspInit+0x298>)
 800c7e4:	f7f6 fdd8 	bl	8003398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c7ec:	2303      	movs	r3, #3
 800c7ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c7f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4823      	ldr	r0, [pc, #140]	; (800c888 <HAL_ADC_MspInit+0x29c>)
 800c7fc:	f7f6 fdcc 	bl	8003398 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c800:	4b25      	ldr	r3, [pc, #148]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c802:	4a26      	ldr	r2, [pc, #152]	; (800c89c <HAL_ADC_MspInit+0x2b0>)
 800c804:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c806:	4b24      	ldr	r3, [pc, #144]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c808:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c80c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c80e:	4b22      	ldr	r3, [pc, #136]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c810:	2200      	movs	r2, #0
 800c812:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c814:	4b20      	ldr	r3, [pc, #128]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c816:	2200      	movs	r2, #0
 800c818:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c81a:	4b1f      	ldr	r3, [pc, #124]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c81c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c820:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c822:	4b1d      	ldr	r3, [pc, #116]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c828:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c82a:	4b1b      	ldr	r3, [pc, #108]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c82c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c830:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c832:	4b19      	ldr	r3, [pc, #100]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c834:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c838:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800c83a:	4b17      	ldr	r3, [pc, #92]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c83c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c840:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c842:	4b15      	ldr	r3, [pc, #84]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c844:	2200      	movs	r2, #0
 800c846:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c848:	4813      	ldr	r0, [pc, #76]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c84a:	f7f6 f9c1 	bl	8002bd0 <HAL_DMA_Init>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 800c854:	f7ff fe9a 	bl	800c58c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	4a0f      	ldr	r2, [pc, #60]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c85c:	639a      	str	r2, [r3, #56]	; 0x38
 800c85e:	4a0e      	ldr	r2, [pc, #56]	; (800c898 <HAL_ADC_MspInit+0x2ac>)
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c864:	2200      	movs	r2, #0
 800c866:	2100      	movs	r1, #0
 800c868:	2012      	movs	r0, #18
 800c86a:	f7f6 f97a 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c86e:	2012      	movs	r0, #18
 800c870:	f7f6 f993 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800c874:	e095      	b.n	800c9a2 <HAL_ADC_MspInit+0x3b6>
 800c876:	bf00      	nop
 800c878:	40012000 	.word	0x40012000
 800c87c:	40023800 	.word	0x40023800
 800c880:	40020800 	.word	0x40020800
 800c884:	40020000 	.word	0x40020000
 800c888:	40020400 	.word	0x40020400
 800c88c:	20000e6c 	.word	0x20000e6c
 800c890:	40026410 	.word	0x40026410
 800c894:	40012100 	.word	0x40012100
 800c898:	20001a8c 	.word	0x20001a8c
 800c89c:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4a41      	ldr	r2, [pc, #260]	; (800c9ac <HAL_ADC_MspInit+0x3c0>)
 800c8a6:	4293      	cmp	r3, r2
 800c8a8:	d17b      	bne.n	800c9a2 <HAL_ADC_MspInit+0x3b6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	613b      	str	r3, [r7, #16]
 800c8ae:	4b40      	ldr	r3, [pc, #256]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8b2:	4a3f      	ldr	r2, [pc, #252]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c8b8:	6453      	str	r3, [r2, #68]	; 0x44
 800c8ba:	4b3d      	ldr	r3, [pc, #244]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c8c2:	613b      	str	r3, [r7, #16]
 800c8c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	60fb      	str	r3, [r7, #12]
 800c8ca:	4b39      	ldr	r3, [pc, #228]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ce:	4a38      	ldr	r2, [pc, #224]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8d0:	f043 0304 	orr.w	r3, r3, #4
 800c8d4:	6313      	str	r3, [r2, #48]	; 0x30
 800c8d6:	4b36      	ldr	r3, [pc, #216]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8da:	f003 0304 	and.w	r3, r3, #4
 800c8de:	60fb      	str	r3, [r7, #12]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	60bb      	str	r3, [r7, #8]
 800c8e6:	4b32      	ldr	r3, [pc, #200]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ea:	4a31      	ldr	r2, [pc, #196]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8ec:	f043 0301 	orr.w	r3, r3, #1
 800c8f0:	6313      	str	r3, [r2, #48]	; 0x30
 800c8f2:	4b2f      	ldr	r3, [pc, #188]	; (800c9b0 <HAL_ADC_MspInit+0x3c4>)
 800c8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f6:	f003 0301 	and.w	r3, r3, #1
 800c8fa:	60bb      	str	r3, [r7, #8]
 800c8fc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c8fe:	2308      	movs	r3, #8
 800c900:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c902:	2303      	movs	r3, #3
 800c904:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c906:	2300      	movs	r3, #0
 800c908:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c90a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c90e:	4619      	mov	r1, r3
 800c910:	4828      	ldr	r0, [pc, #160]	; (800c9b4 <HAL_ADC_MspInit+0x3c8>)
 800c912:	f7f6 fd41 	bl	8003398 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c916:	2308      	movs	r3, #8
 800c918:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c91a:	2303      	movs	r3, #3
 800c91c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c91e:	2300      	movs	r3, #0
 800c920:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c922:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c926:	4619      	mov	r1, r3
 800c928:	4823      	ldr	r0, [pc, #140]	; (800c9b8 <HAL_ADC_MspInit+0x3cc>)
 800c92a:	f7f6 fd35 	bl	8003398 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800c92e:	4b23      	ldr	r3, [pc, #140]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c930:	4a23      	ldr	r2, [pc, #140]	; (800c9c0 <HAL_ADC_MspInit+0x3d4>)
 800c932:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800c934:	4b21      	ldr	r3, [pc, #132]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c936:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c93a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c93c:	4b1f      	ldr	r3, [pc, #124]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c93e:	2200      	movs	r2, #0
 800c940:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800c942:	4b1e      	ldr	r3, [pc, #120]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c944:	2200      	movs	r2, #0
 800c946:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800c948:	4b1c      	ldr	r3, [pc, #112]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c94a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c94e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c950:	4b1a      	ldr	r3, [pc, #104]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c956:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c958:	4b18      	ldr	r3, [pc, #96]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c95a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c95e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800c960:	4b16      	ldr	r3, [pc, #88]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c962:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c966:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800c968:	4b14      	ldr	r3, [pc, #80]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c96a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c96e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c970:	4b12      	ldr	r3, [pc, #72]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c972:	2200      	movs	r2, #0
 800c974:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800c976:	4811      	ldr	r0, [pc, #68]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c978:	f7f6 f92a 	bl	8002bd0 <HAL_DMA_Init>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <HAL_ADC_MspInit+0x39a>
      Error_Handler();
 800c982:	f7ff fe03 	bl	800c58c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	4a0c      	ldr	r2, [pc, #48]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c98a:	639a      	str	r2, [r3, #56]	; 0x38
 800c98c:	4a0b      	ldr	r2, [pc, #44]	; (800c9bc <HAL_ADC_MspInit+0x3d0>)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c992:	2200      	movs	r2, #0
 800c994:	2100      	movs	r1, #0
 800c996:	2012      	movs	r0, #18
 800c998:	f7f6 f8e3 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c99c:	2012      	movs	r0, #18
 800c99e:	f7f6 f8fc 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800c9a2:	bf00      	nop
 800c9a4:	3748      	adds	r7, #72	; 0x48
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	40012200 	.word	0x40012200
 800c9b0:	40023800 	.word	0x40023800
 800c9b4:	40020800 	.word	0x40020800
 800c9b8:	40020000 	.word	0x40020000
 800c9bc:	20000c3c 	.word	0x20000c3c
 800c9c0:	40026428 	.word	0x40026428

0800c9c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b08a      	sub	sp, #40	; 0x28
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9cc:	f107 0314 	add.w	r3, r7, #20
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	605a      	str	r2, [r3, #4]
 800c9d6:	609a      	str	r2, [r3, #8]
 800c9d8:	60da      	str	r2, [r3, #12]
 800c9da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	4a1d      	ldr	r2, [pc, #116]	; (800ca58 <HAL_CAN_MspInit+0x94>)
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	d133      	bne.n	800ca4e <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	613b      	str	r3, [r7, #16]
 800c9ea:	4b1c      	ldr	r3, [pc, #112]	; (800ca5c <HAL_CAN_MspInit+0x98>)
 800c9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ee:	4a1b      	ldr	r2, [pc, #108]	; (800ca5c <HAL_CAN_MspInit+0x98>)
 800c9f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c9f4:	6413      	str	r3, [r2, #64]	; 0x40
 800c9f6:	4b19      	ldr	r3, [pc, #100]	; (800ca5c <HAL_CAN_MspInit+0x98>)
 800c9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9fe:	613b      	str	r3, [r7, #16]
 800ca00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800ca02:	2300      	movs	r3, #0
 800ca04:	60fb      	str	r3, [r7, #12]
 800ca06:	4b15      	ldr	r3, [pc, #84]	; (800ca5c <HAL_CAN_MspInit+0x98>)
 800ca08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca0a:	4a14      	ldr	r2, [pc, #80]	; (800ca5c <HAL_CAN_MspInit+0x98>)
 800ca0c:	f043 0308 	orr.w	r3, r3, #8
 800ca10:	6313      	str	r3, [r2, #48]	; 0x30
 800ca12:	4b12      	ldr	r3, [pc, #72]	; (800ca5c <HAL_CAN_MspInit+0x98>)
 800ca14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca16:	f003 0308 	and.w	r3, r3, #8
 800ca1a:	60fb      	str	r3, [r7, #12]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800ca1e:	2303      	movs	r3, #3
 800ca20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca22:	2302      	movs	r3, #2
 800ca24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca26:	2300      	movs	r3, #0
 800ca28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca2a:	2303      	movs	r3, #3
 800ca2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800ca2e:	2309      	movs	r3, #9
 800ca30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ca32:	f107 0314 	add.w	r3, r7, #20
 800ca36:	4619      	mov	r1, r3
 800ca38:	4809      	ldr	r0, [pc, #36]	; (800ca60 <HAL_CAN_MspInit+0x9c>)
 800ca3a:	f7f6 fcad 	bl	8003398 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800ca3e:	2200      	movs	r2, #0
 800ca40:	2100      	movs	r1, #0
 800ca42:	2014      	movs	r0, #20
 800ca44:	f7f6 f88d 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800ca48:	2014      	movs	r0, #20
 800ca4a:	f7f6 f8a6 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800ca4e:	bf00      	nop
 800ca50:	3728      	adds	r7, #40	; 0x28
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	40006400 	.word	0x40006400
 800ca5c:	40023800 	.word	0x40023800
 800ca60:	40020c00 	.word	0x40020c00

0800ca64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b08c      	sub	sp, #48	; 0x30
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca6c:	f107 031c 	add.w	r3, r7, #28
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]
 800ca74:	605a      	str	r2, [r3, #4]
 800ca76:	609a      	str	r2, [r3, #8]
 800ca78:	60da      	str	r2, [r3, #12]
 800ca7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	4a32      	ldr	r2, [pc, #200]	; (800cb4c <HAL_I2C_MspInit+0xe8>)
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d12c      	bne.n	800cae0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ca86:	2300      	movs	r3, #0
 800ca88:	61bb      	str	r3, [r7, #24]
 800ca8a:	4b31      	ldr	r3, [pc, #196]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800ca8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca8e:	4a30      	ldr	r2, [pc, #192]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800ca90:	f043 0302 	orr.w	r3, r3, #2
 800ca94:	6313      	str	r3, [r2, #48]	; 0x30
 800ca96:	4b2e      	ldr	r3, [pc, #184]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800ca98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca9a:	f003 0302 	and.w	r3, r3, #2
 800ca9e:	61bb      	str	r3, [r7, #24]
 800caa0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800caa2:	23c0      	movs	r3, #192	; 0xc0
 800caa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800caa6:	2312      	movs	r3, #18
 800caa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800caaa:	2301      	movs	r3, #1
 800caac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800caae:	2303      	movs	r3, #3
 800cab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800cab2:	2304      	movs	r3, #4
 800cab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cab6:	f107 031c 	add.w	r3, r7, #28
 800caba:	4619      	mov	r1, r3
 800cabc:	4825      	ldr	r0, [pc, #148]	; (800cb54 <HAL_I2C_MspInit+0xf0>)
 800cabe:	f7f6 fc6b 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800cac2:	2300      	movs	r3, #0
 800cac4:	617b      	str	r3, [r7, #20]
 800cac6:	4b22      	ldr	r3, [pc, #136]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800cac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caca:	4a21      	ldr	r2, [pc, #132]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800cacc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cad0:	6413      	str	r3, [r2, #64]	; 0x40
 800cad2:	4b1f      	ldr	r3, [pc, #124]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800cad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cada:	617b      	str	r3, [r7, #20]
 800cadc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800cade:	e031      	b.n	800cb44 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	4a1c      	ldr	r2, [pc, #112]	; (800cb58 <HAL_I2C_MspInit+0xf4>)
 800cae6:	4293      	cmp	r3, r2
 800cae8:	d12c      	bne.n	800cb44 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800caea:	2300      	movs	r3, #0
 800caec:	613b      	str	r3, [r7, #16]
 800caee:	4b18      	ldr	r3, [pc, #96]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800caf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caf2:	4a17      	ldr	r2, [pc, #92]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800caf4:	f043 0302 	orr.w	r3, r3, #2
 800caf8:	6313      	str	r3, [r2, #48]	; 0x30
 800cafa:	4b15      	ldr	r3, [pc, #84]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800cafc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cafe:	f003 0302 	and.w	r3, r3, #2
 800cb02:	613b      	str	r3, [r7, #16]
 800cb04:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800cb06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800cb0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800cb0c:	2312      	movs	r3, #18
 800cb0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cb10:	2301      	movs	r3, #1
 800cb12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cb14:	2303      	movs	r3, #3
 800cb16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800cb18:	2304      	movs	r3, #4
 800cb1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb1c:	f107 031c 	add.w	r3, r7, #28
 800cb20:	4619      	mov	r1, r3
 800cb22:	480c      	ldr	r0, [pc, #48]	; (800cb54 <HAL_I2C_MspInit+0xf0>)
 800cb24:	f7f6 fc38 	bl	8003398 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800cb28:	2300      	movs	r3, #0
 800cb2a:	60fb      	str	r3, [r7, #12]
 800cb2c:	4b08      	ldr	r3, [pc, #32]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800cb2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb30:	4a07      	ldr	r2, [pc, #28]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800cb32:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cb36:	6413      	str	r3, [r2, #64]	; 0x40
 800cb38:	4b05      	ldr	r3, [pc, #20]	; (800cb50 <HAL_I2C_MspInit+0xec>)
 800cb3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cb40:	60fb      	str	r3, [r7, #12]
 800cb42:	68fb      	ldr	r3, [r7, #12]
}
 800cb44:	bf00      	nop
 800cb46:	3730      	adds	r7, #48	; 0x30
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}
 800cb4c:	40005400 	.word	0x40005400
 800cb50:	40023800 	.word	0x40023800
 800cb54:	40020400 	.word	0x40020400
 800cb58:	40005800 	.word	0x40005800

0800cb5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	4a05      	ldr	r2, [pc, #20]	; (800cb80 <HAL_RTC_MspInit+0x24>)
 800cb6a:	4293      	cmp	r3, r2
 800cb6c:	d102      	bne.n	800cb74 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800cb6e:	4b05      	ldr	r3, [pc, #20]	; (800cb84 <HAL_RTC_MspInit+0x28>)
 800cb70:	2201      	movs	r2, #1
 800cb72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800cb74:	bf00      	nop
 800cb76:	370c      	adds	r7, #12
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7e:	4770      	bx	lr
 800cb80:	40002800 	.word	0x40002800
 800cb84:	42470e3c 	.word	0x42470e3c

0800cb88 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b08a      	sub	sp, #40	; 0x28
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb90:	f107 0314 	add.w	r3, r7, #20
 800cb94:	2200      	movs	r2, #0
 800cb96:	601a      	str	r2, [r3, #0]
 800cb98:	605a      	str	r2, [r3, #4]
 800cb9a:	609a      	str	r2, [r3, #8]
 800cb9c:	60da      	str	r2, [r3, #12]
 800cb9e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a1d      	ldr	r2, [pc, #116]	; (800cc1c <HAL_SPI_MspInit+0x94>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d134      	bne.n	800cc14 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800cbaa:	2300      	movs	r3, #0
 800cbac:	613b      	str	r3, [r7, #16]
 800cbae:	4b1c      	ldr	r3, [pc, #112]	; (800cc20 <HAL_SPI_MspInit+0x98>)
 800cbb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbb2:	4a1b      	ldr	r2, [pc, #108]	; (800cc20 <HAL_SPI_MspInit+0x98>)
 800cbb4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800cbb8:	6413      	str	r3, [r2, #64]	; 0x40
 800cbba:	4b19      	ldr	r3, [pc, #100]	; (800cc20 <HAL_SPI_MspInit+0x98>)
 800cbbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cbc2:	613b      	str	r3, [r7, #16]
 800cbc4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60fb      	str	r3, [r7, #12]
 800cbca:	4b15      	ldr	r3, [pc, #84]	; (800cc20 <HAL_SPI_MspInit+0x98>)
 800cbcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbce:	4a14      	ldr	r2, [pc, #80]	; (800cc20 <HAL_SPI_MspInit+0x98>)
 800cbd0:	f043 0302 	orr.w	r3, r3, #2
 800cbd4:	6313      	str	r3, [r2, #48]	; 0x30
 800cbd6:	4b12      	ldr	r3, [pc, #72]	; (800cc20 <HAL_SPI_MspInit+0x98>)
 800cbd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbda:	f003 0302 	and.w	r3, r3, #2
 800cbde:	60fb      	str	r3, [r7, #12]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800cbe2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800cbe6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbe8:	2302      	movs	r3, #2
 800cbea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbec:	2300      	movs	r3, #0
 800cbee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cbf0:	2303      	movs	r3, #3
 800cbf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800cbf4:	2305      	movs	r3, #5
 800cbf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cbf8:	f107 0314 	add.w	r3, r7, #20
 800cbfc:	4619      	mov	r1, r3
 800cbfe:	4809      	ldr	r0, [pc, #36]	; (800cc24 <HAL_SPI_MspInit+0x9c>)
 800cc00:	f7f6 fbca 	bl	8003398 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800cc04:	2200      	movs	r2, #0
 800cc06:	2100      	movs	r1, #0
 800cc08:	2024      	movs	r0, #36	; 0x24
 800cc0a:	f7f5 ffaa 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800cc0e:	2024      	movs	r0, #36	; 0x24
 800cc10:	f7f5 ffc3 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800cc14:	bf00      	nop
 800cc16:	3728      	adds	r7, #40	; 0x28
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	40003800 	.word	0x40003800
 800cc20:	40023800 	.word	0x40023800
 800cc24:	40020400 	.word	0x40020400

0800cc28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800cc28:	b580      	push	{r7, lr}
 800cc2a:	b090      	sub	sp, #64	; 0x40
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800cc34:	2200      	movs	r2, #0
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	605a      	str	r2, [r3, #4]
 800cc3a:	609a      	str	r2, [r3, #8]
 800cc3c:	60da      	str	r2, [r3, #12]
 800cc3e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a87      	ldr	r2, [pc, #540]	; (800ce64 <HAL_TIM_Base_MspInit+0x23c>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d12e      	bne.n	800cca8 <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc4e:	4b86      	ldr	r3, [pc, #536]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cc50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc52:	4a85      	ldr	r2, [pc, #532]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cc54:	f043 0301 	orr.w	r3, r3, #1
 800cc58:	6453      	str	r3, [r2, #68]	; 0x44
 800cc5a:	4b83      	ldr	r3, [pc, #524]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cc5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc5e:	f003 0301 	and.w	r3, r3, #1
 800cc62:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800cc66:	2200      	movs	r2, #0
 800cc68:	2100      	movs	r1, #0
 800cc6a:	2018      	movs	r0, #24
 800cc6c:	f7f5 ff79 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800cc70:	2018      	movs	r0, #24
 800cc72:	f7f5 ff92 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800cc76:	2200      	movs	r2, #0
 800cc78:	2100      	movs	r1, #0
 800cc7a:	2019      	movs	r0, #25
 800cc7c:	f7f5 ff71 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800cc80:	2019      	movs	r0, #25
 800cc82:	f7f5 ff8a 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800cc86:	2200      	movs	r2, #0
 800cc88:	2100      	movs	r1, #0
 800cc8a:	201a      	movs	r0, #26
 800cc8c:	f7f5 ff69 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800cc90:	201a      	movs	r0, #26
 800cc92:	f7f5 ff82 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800cc96:	2200      	movs	r2, #0
 800cc98:	2100      	movs	r1, #0
 800cc9a:	201b      	movs	r0, #27
 800cc9c:	f7f5 ff61 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800cca0:	201b      	movs	r0, #27
 800cca2:	f7f5 ff7a 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800cca6:	e0d8      	b.n	800ce5a <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM2)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccb0:	d10e      	bne.n	800ccd0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	627b      	str	r3, [r7, #36]	; 0x24
 800ccb6:	4b6c      	ldr	r3, [pc, #432]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800ccb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccba:	4a6b      	ldr	r2, [pc, #428]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800ccbc:	f043 0301 	orr.w	r3, r3, #1
 800ccc0:	6413      	str	r3, [r2, #64]	; 0x40
 800ccc2:	4b69      	ldr	r3, [pc, #420]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800ccc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccc6:	f003 0301 	and.w	r3, r3, #1
 800ccca:	627b      	str	r3, [r7, #36]	; 0x24
 800cccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ccce:	e0c4      	b.n	800ce5a <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM3)
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	4a65      	ldr	r2, [pc, #404]	; (800ce6c <HAL_TIM_Base_MspInit+0x244>)
 800ccd6:	4293      	cmp	r3, r2
 800ccd8:	d116      	bne.n	800cd08 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800ccda:	2300      	movs	r3, #0
 800ccdc:	623b      	str	r3, [r7, #32]
 800ccde:	4b62      	ldr	r3, [pc, #392]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cce2:	4a61      	ldr	r2, [pc, #388]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cce4:	f043 0302 	orr.w	r3, r3, #2
 800cce8:	6413      	str	r3, [r2, #64]	; 0x40
 800ccea:	4b5f      	ldr	r3, [pc, #380]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccee:	f003 0302 	and.w	r3, r3, #2
 800ccf2:	623b      	str	r3, [r7, #32]
 800ccf4:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	2100      	movs	r1, #0
 800ccfa:	201d      	movs	r0, #29
 800ccfc:	f7f5 ff31 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800cd00:	201d      	movs	r0, #29
 800cd02:	f7f5 ff4a 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cd06:	e0a8      	b.n	800ce5a <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM5)
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	4a58      	ldr	r2, [pc, #352]	; (800ce70 <HAL_TIM_Base_MspInit+0x248>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d116      	bne.n	800cd40 <HAL_TIM_Base_MspInit+0x118>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cd12:	2300      	movs	r3, #0
 800cd14:	61fb      	str	r3, [r7, #28]
 800cd16:	4b54      	ldr	r3, [pc, #336]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1a:	4a53      	ldr	r2, [pc, #332]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd1c:	f043 0308 	orr.w	r3, r3, #8
 800cd20:	6413      	str	r3, [r2, #64]	; 0x40
 800cd22:	4b51      	ldr	r3, [pc, #324]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd26:	f003 0308 	and.w	r3, r3, #8
 800cd2a:	61fb      	str	r3, [r7, #28]
 800cd2c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2100      	movs	r1, #0
 800cd32:	2032      	movs	r0, #50	; 0x32
 800cd34:	f7f5 ff15 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800cd38:	2032      	movs	r0, #50	; 0x32
 800cd3a:	f7f5 ff2e 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cd3e:	e08c      	b.n	800ce5a <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM6)
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a4b      	ldr	r2, [pc, #300]	; (800ce74 <HAL_TIM_Base_MspInit+0x24c>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d116      	bne.n	800cd78 <HAL_TIM_Base_MspInit+0x150>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	61bb      	str	r3, [r7, #24]
 800cd4e:	4b46      	ldr	r3, [pc, #280]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd52:	4a45      	ldr	r2, [pc, #276]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd54:	f043 0310 	orr.w	r3, r3, #16
 800cd58:	6413      	str	r3, [r2, #64]	; 0x40
 800cd5a:	4b43      	ldr	r3, [pc, #268]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd5e:	f003 0310 	and.w	r3, r3, #16
 800cd62:	61bb      	str	r3, [r7, #24]
 800cd64:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800cd66:	2200      	movs	r2, #0
 800cd68:	2100      	movs	r1, #0
 800cd6a:	2036      	movs	r0, #54	; 0x36
 800cd6c:	f7f5 fef9 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800cd70:	2036      	movs	r0, #54	; 0x36
 800cd72:	f7f5 ff12 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cd76:	e070      	b.n	800ce5a <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM9)
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4a3e      	ldr	r2, [pc, #248]	; (800ce78 <HAL_TIM_Base_MspInit+0x250>)
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	d116      	bne.n	800cdb0 <HAL_TIM_Base_MspInit+0x188>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]
 800cd86:	4b38      	ldr	r3, [pc, #224]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd8a:	4a37      	ldr	r2, [pc, #220]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cd90:	6453      	str	r3, [r2, #68]	; 0x44
 800cd92:	4b35      	ldr	r3, [pc, #212]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cd94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cd9a:	617b      	str	r3, [r7, #20]
 800cd9c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800cd9e:	2200      	movs	r2, #0
 800cda0:	2100      	movs	r1, #0
 800cda2:	2018      	movs	r0, #24
 800cda4:	f7f5 fedd 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800cda8:	2018      	movs	r0, #24
 800cdaa:	f7f5 fef6 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cdae:	e054      	b.n	800ce5a <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM12)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	4a31      	ldr	r2, [pc, #196]	; (800ce7c <HAL_TIM_Base_MspInit+0x254>)
 800cdb6:	4293      	cmp	r3, r2
 800cdb8:	d116      	bne.n	800cde8 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800cdba:	2300      	movs	r3, #0
 800cdbc:	613b      	str	r3, [r7, #16]
 800cdbe:	4b2a      	ldr	r3, [pc, #168]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cdc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc2:	4a29      	ldr	r2, [pc, #164]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cdc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cdc8:	6413      	str	r3, [r2, #64]	; 0x40
 800cdca:	4b27      	ldr	r3, [pc, #156]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cdcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdd2:	613b      	str	r3, [r7, #16]
 800cdd4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	2100      	movs	r1, #0
 800cdda:	202b      	movs	r0, #43	; 0x2b
 800cddc:	f7f5 fec1 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800cde0:	202b      	movs	r0, #43	; 0x2b
 800cde2:	f7f5 feda 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800cde6:	e038      	b.n	800ce5a <HAL_TIM_Base_MspInit+0x232>
  else if(htim_base->Instance==TIM13)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4a24      	ldr	r2, [pc, #144]	; (800ce80 <HAL_TIM_Base_MspInit+0x258>)
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	d133      	bne.n	800ce5a <HAL_TIM_Base_MspInit+0x232>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	60fb      	str	r3, [r7, #12]
 800cdf6:	4b1c      	ldr	r3, [pc, #112]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfa:	4a1b      	ldr	r2, [pc, #108]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800cdfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce00:	6413      	str	r3, [r2, #64]	; 0x40
 800ce02:	4b19      	ldr	r3, [pc, #100]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800ce04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce0a:	60fb      	str	r3, [r7, #12]
 800ce0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce0e:	2300      	movs	r3, #0
 800ce10:	60bb      	str	r3, [r7, #8]
 800ce12:	4b15      	ldr	r3, [pc, #84]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800ce14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce16:	4a14      	ldr	r2, [pc, #80]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800ce18:	f043 0301 	orr.w	r3, r3, #1
 800ce1c:	6313      	str	r3, [r2, #48]	; 0x30
 800ce1e:	4b12      	ldr	r3, [pc, #72]	; (800ce68 <HAL_TIM_Base_MspInit+0x240>)
 800ce20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce22:	f003 0301 	and.w	r3, r3, #1
 800ce26:	60bb      	str	r3, [r7, #8]
 800ce28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800ce2a:	2340      	movs	r3, #64	; 0x40
 800ce2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce2e:	2302      	movs	r3, #2
 800ce30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce32:	2300      	movs	r3, #0
 800ce34:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ce36:	2300      	movs	r3, #0
 800ce38:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800ce3a:	2309      	movs	r3, #9
 800ce3c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800ce42:	4619      	mov	r1, r3
 800ce44:	480f      	ldr	r0, [pc, #60]	; (800ce84 <HAL_TIM_Base_MspInit+0x25c>)
 800ce46:	f7f6 faa7 	bl	8003398 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	202c      	movs	r0, #44	; 0x2c
 800ce50:	f7f5 fe87 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800ce54:	202c      	movs	r0, #44	; 0x2c
 800ce56:	f7f5 fea0 	bl	8002b9a <HAL_NVIC_EnableIRQ>
}
 800ce5a:	bf00      	nop
 800ce5c:	3740      	adds	r7, #64	; 0x40
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}
 800ce62:	bf00      	nop
 800ce64:	40010000 	.word	0x40010000
 800ce68:	40023800 	.word	0x40023800
 800ce6c:	40000400 	.word	0x40000400
 800ce70:	40000c00 	.word	0x40000c00
 800ce74:	40001000 	.word	0x40001000
 800ce78:	40014000 	.word	0x40014000
 800ce7c:	40001800 	.word	0x40001800
 800ce80:	40001c00 	.word	0x40001c00
 800ce84:	40020000 	.word	0x40020000

0800ce88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b08a      	sub	sp, #40	; 0x28
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce90:	f107 0314 	add.w	r3, r7, #20
 800ce94:	2200      	movs	r2, #0
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	605a      	str	r2, [r3, #4]
 800ce9a:	609a      	str	r2, [r3, #8]
 800ce9c:	60da      	str	r2, [r3, #12]
 800ce9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	4a29      	ldr	r2, [pc, #164]	; (800cf4c <HAL_TIM_Encoder_MspInit+0xc4>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d14b      	bne.n	800cf42 <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800ceaa:	2300      	movs	r3, #0
 800ceac:	613b      	str	r3, [r7, #16]
 800ceae:	4b28      	ldr	r3, [pc, #160]	; (800cf50 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ceb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb2:	4a27      	ldr	r2, [pc, #156]	; (800cf50 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ceb4:	f043 0302 	orr.w	r3, r3, #2
 800ceb8:	6453      	str	r3, [r2, #68]	; 0x44
 800ceba:	4b25      	ldr	r3, [pc, #148]	; (800cf50 <HAL_TIM_Encoder_MspInit+0xc8>)
 800cebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cebe:	f003 0302 	and.w	r3, r3, #2
 800cec2:	613b      	str	r3, [r7, #16]
 800cec4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cec6:	2300      	movs	r3, #0
 800cec8:	60fb      	str	r3, [r7, #12]
 800ceca:	4b21      	ldr	r3, [pc, #132]	; (800cf50 <HAL_TIM_Encoder_MspInit+0xc8>)
 800cecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cece:	4a20      	ldr	r2, [pc, #128]	; (800cf50 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ced0:	f043 0304 	orr.w	r3, r3, #4
 800ced4:	6313      	str	r3, [r2, #48]	; 0x30
 800ced6:	4b1e      	ldr	r3, [pc, #120]	; (800cf50 <HAL_TIM_Encoder_MspInit+0xc8>)
 800ced8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceda:	f003 0304 	and.w	r3, r3, #4
 800cede:	60fb      	str	r3, [r7, #12]
 800cee0:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cee2:	23c0      	movs	r3, #192	; 0xc0
 800cee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cee6:	2302      	movs	r3, #2
 800cee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ceea:	2300      	movs	r3, #0
 800ceec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ceee:	2300      	movs	r3, #0
 800cef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cef2:	2303      	movs	r3, #3
 800cef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cef6:	f107 0314 	add.w	r3, r7, #20
 800cefa:	4619      	mov	r1, r3
 800cefc:	4815      	ldr	r0, [pc, #84]	; (800cf54 <HAL_TIM_Encoder_MspInit+0xcc>)
 800cefe:	f7f6 fa4b 	bl	8003398 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800cf02:	2200      	movs	r2, #0
 800cf04:	2100      	movs	r1, #0
 800cf06:	202b      	movs	r0, #43	; 0x2b
 800cf08:	f7f5 fe2b 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800cf0c:	202b      	movs	r0, #43	; 0x2b
 800cf0e:	f7f5 fe44 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800cf12:	2200      	movs	r2, #0
 800cf14:	2100      	movs	r1, #0
 800cf16:	202c      	movs	r0, #44	; 0x2c
 800cf18:	f7f5 fe23 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cf1c:	202c      	movs	r0, #44	; 0x2c
 800cf1e:	f7f5 fe3c 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800cf22:	2200      	movs	r2, #0
 800cf24:	2100      	movs	r1, #0
 800cf26:	202d      	movs	r0, #45	; 0x2d
 800cf28:	f7f5 fe1b 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800cf2c:	202d      	movs	r0, #45	; 0x2d
 800cf2e:	f7f5 fe34 	bl	8002b9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800cf32:	2200      	movs	r2, #0
 800cf34:	2100      	movs	r1, #0
 800cf36:	202e      	movs	r0, #46	; 0x2e
 800cf38:	f7f5 fe13 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800cf3c:	202e      	movs	r0, #46	; 0x2e
 800cf3e:	f7f5 fe2c 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800cf42:	bf00      	nop
 800cf44:	3728      	adds	r7, #40	; 0x28
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	40010400 	.word	0x40010400
 800cf50:	40023800 	.word	0x40023800
 800cf54:	40020800 	.word	0x40020800

0800cf58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	; 0x28
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cf60:	f107 0314 	add.w	r3, r7, #20
 800cf64:	2200      	movs	r2, #0
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	605a      	str	r2, [r3, #4]
 800cf6a:	609a      	str	r2, [r3, #8]
 800cf6c:	60da      	str	r2, [r3, #12]
 800cf6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4a24      	ldr	r2, [pc, #144]	; (800d008 <HAL_TIM_MspPostInit+0xb0>)
 800cf76:	4293      	cmp	r3, r2
 800cf78:	d11f      	bne.n	800cfba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	613b      	str	r3, [r7, #16]
 800cf7e:	4b23      	ldr	r3, [pc, #140]	; (800d00c <HAL_TIM_MspPostInit+0xb4>)
 800cf80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf82:	4a22      	ldr	r2, [pc, #136]	; (800d00c <HAL_TIM_MspPostInit+0xb4>)
 800cf84:	f043 0310 	orr.w	r3, r3, #16
 800cf88:	6313      	str	r3, [r2, #48]	; 0x30
 800cf8a:	4b20      	ldr	r3, [pc, #128]	; (800d00c <HAL_TIM_MspPostInit+0xb4>)
 800cf8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf8e:	f003 0310 	and.w	r3, r3, #16
 800cf92:	613b      	str	r3, [r7, #16]
 800cf94:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800cf96:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800cf9a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cf9c:	2302      	movs	r3, #2
 800cf9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfa0:	2300      	movs	r3, #0
 800cfa2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfa4:	2300      	movs	r3, #0
 800cfa6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cfac:	f107 0314 	add.w	r3, r7, #20
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	4817      	ldr	r0, [pc, #92]	; (800d010 <HAL_TIM_MspPostInit+0xb8>)
 800cfb4:	f7f6 f9f0 	bl	8003398 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800cfb8:	e022      	b.n	800d000 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	4a15      	ldr	r2, [pc, #84]	; (800d014 <HAL_TIM_MspPostInit+0xbc>)
 800cfc0:	4293      	cmp	r3, r2
 800cfc2:	d11d      	bne.n	800d000 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	4b10      	ldr	r3, [pc, #64]	; (800d00c <HAL_TIM_MspPostInit+0xb4>)
 800cfca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfcc:	4a0f      	ldr	r2, [pc, #60]	; (800d00c <HAL_TIM_MspPostInit+0xb4>)
 800cfce:	f043 0310 	orr.w	r3, r3, #16
 800cfd2:	6313      	str	r3, [r2, #48]	; 0x30
 800cfd4:	4b0d      	ldr	r3, [pc, #52]	; (800d00c <HAL_TIM_MspPostInit+0xb4>)
 800cfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd8:	f003 0310 	and.w	r3, r3, #16
 800cfdc:	60fb      	str	r3, [r7, #12]
 800cfde:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800cfe0:	2360      	movs	r3, #96	; 0x60
 800cfe2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cfe4:	2302      	movs	r3, #2
 800cfe6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cfe8:	2300      	movs	r3, #0
 800cfea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cfec:	2300      	movs	r3, #0
 800cfee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800cff0:	2303      	movs	r3, #3
 800cff2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cff4:	f107 0314 	add.w	r3, r7, #20
 800cff8:	4619      	mov	r1, r3
 800cffa:	4805      	ldr	r0, [pc, #20]	; (800d010 <HAL_TIM_MspPostInit+0xb8>)
 800cffc:	f7f6 f9cc 	bl	8003398 <HAL_GPIO_Init>
}
 800d000:	bf00      	nop
 800d002:	3728      	adds	r7, #40	; 0x28
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	40010000 	.word	0x40010000
 800d00c:	40023800 	.word	0x40023800
 800d010:	40021000 	.word	0x40021000
 800d014:	40014000 	.word	0x40014000

0800d018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b08a      	sub	sp, #40	; 0x28
 800d01c:	af00      	add	r7, sp, #0
 800d01e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d020:	f107 0314 	add.w	r3, r7, #20
 800d024:	2200      	movs	r2, #0
 800d026:	601a      	str	r2, [r3, #0]
 800d028:	605a      	str	r2, [r3, #4]
 800d02a:	609a      	str	r2, [r3, #8]
 800d02c:	60da      	str	r2, [r3, #12]
 800d02e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	4a34      	ldr	r2, [pc, #208]	; (800d108 <HAL_UART_MspInit+0xf0>)
 800d036:	4293      	cmp	r3, r2
 800d038:	d162      	bne.n	800d100 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800d03a:	2300      	movs	r3, #0
 800d03c:	613b      	str	r3, [r7, #16]
 800d03e:	4b33      	ldr	r3, [pc, #204]	; (800d10c <HAL_UART_MspInit+0xf4>)
 800d040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d042:	4a32      	ldr	r2, [pc, #200]	; (800d10c <HAL_UART_MspInit+0xf4>)
 800d044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800d048:	6413      	str	r3, [r2, #64]	; 0x40
 800d04a:	4b30      	ldr	r3, [pc, #192]	; (800d10c <HAL_UART_MspInit+0xf4>)
 800d04c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d052:	613b      	str	r3, [r7, #16]
 800d054:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800d056:	2300      	movs	r3, #0
 800d058:	60fb      	str	r3, [r7, #12]
 800d05a:	4b2c      	ldr	r3, [pc, #176]	; (800d10c <HAL_UART_MspInit+0xf4>)
 800d05c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05e:	4a2b      	ldr	r2, [pc, #172]	; (800d10c <HAL_UART_MspInit+0xf4>)
 800d060:	f043 0308 	orr.w	r3, r3, #8
 800d064:	6313      	str	r3, [r2, #48]	; 0x30
 800d066:	4b29      	ldr	r3, [pc, #164]	; (800d10c <HAL_UART_MspInit+0xf4>)
 800d068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d06a:	f003 0308 	and.w	r3, r3, #8
 800d06e:	60fb      	str	r3, [r7, #12]
 800d070:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800d072:	f44f 7340 	mov.w	r3, #768	; 0x300
 800d076:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d078:	2302      	movs	r3, #2
 800d07a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800d07c:	2301      	movs	r3, #1
 800d07e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d080:	2303      	movs	r3, #3
 800d082:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800d084:	2307      	movs	r3, #7
 800d086:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800d088:	f107 0314 	add.w	r3, r7, #20
 800d08c:	4619      	mov	r1, r3
 800d08e:	4820      	ldr	r0, [pc, #128]	; (800d110 <HAL_UART_MspInit+0xf8>)
 800d090:	f7f6 f982 	bl	8003398 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800d094:	4b1f      	ldr	r3, [pc, #124]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d096:	4a20      	ldr	r2, [pc, #128]	; (800d118 <HAL_UART_MspInit+0x100>)
 800d098:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800d09a:	4b1e      	ldr	r3, [pc, #120]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d09c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d0a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800d0a2:	4b1c      	ldr	r3, [pc, #112]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0a4:	2240      	movs	r2, #64	; 0x40
 800d0a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800d0a8:	4b1a      	ldr	r3, [pc, #104]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800d0ae:	4b19      	ldr	r3, [pc, #100]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d0b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800d0b6:	4b17      	ldr	r3, [pc, #92]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800d0bc:	4b15      	ldr	r3, [pc, #84]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0be:	2200      	movs	r2, #0
 800d0c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800d0c2:	4b14      	ldr	r3, [pc, #80]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800d0c8:	4b12      	ldr	r3, [pc, #72]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0ca:	2200      	movs	r2, #0
 800d0cc:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800d0ce:	4b11      	ldr	r3, [pc, #68]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0d0:	2200      	movs	r2, #0
 800d0d2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800d0d4:	480f      	ldr	r0, [pc, #60]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0d6:	f7f5 fd7b 	bl	8002bd0 <HAL_DMA_Init>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d001      	beq.n	800d0e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800d0e0:	f7ff fa54 	bl	800c58c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	4a0b      	ldr	r2, [pc, #44]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0e8:	631a      	str	r2, [r3, #48]	; 0x30
 800d0ea:	4a0a      	ldr	r2, [pc, #40]	; (800d114 <HAL_UART_MspInit+0xfc>)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	2100      	movs	r1, #0
 800d0f4:	2027      	movs	r0, #39	; 0x27
 800d0f6:	f7f5 fd34 	bl	8002b62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800d0fa:	2027      	movs	r0, #39	; 0x27
 800d0fc:	f7f5 fd4d 	bl	8002b9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800d100:	bf00      	nop
 800d102:	3728      	adds	r7, #40	; 0x28
 800d104:	46bd      	mov	sp, r7
 800d106:	bd80      	pop	{r7, pc}
 800d108:	40004800 	.word	0x40004800
 800d10c:	40023800 	.word	0x40023800
 800d110:	40020c00 	.word	0x40020c00
 800d114:	20000c9c 	.word	0x20000c9c
 800d118:	40026058 	.word	0x40026058

0800d11c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b08a      	sub	sp, #40	; 0x28
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d124:	f107 0314 	add.w	r3, r7, #20
 800d128:	2200      	movs	r2, #0
 800d12a:	601a      	str	r2, [r3, #0]
 800d12c:	605a      	str	r2, [r3, #4]
 800d12e:	609a      	str	r2, [r3, #8]
 800d130:	60da      	str	r2, [r3, #12]
 800d132:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d13c:	d132      	bne.n	800d1a4 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d13e:	2300      	movs	r3, #0
 800d140:	613b      	str	r3, [r7, #16]
 800d142:	4b1a      	ldr	r3, [pc, #104]	; (800d1ac <HAL_PCD_MspInit+0x90>)
 800d144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d146:	4a19      	ldr	r2, [pc, #100]	; (800d1ac <HAL_PCD_MspInit+0x90>)
 800d148:	f043 0301 	orr.w	r3, r3, #1
 800d14c:	6313      	str	r3, [r2, #48]	; 0x30
 800d14e:	4b17      	ldr	r3, [pc, #92]	; (800d1ac <HAL_PCD_MspInit+0x90>)
 800d150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d152:	f003 0301 	and.w	r3, r3, #1
 800d156:	613b      	str	r3, [r7, #16]
 800d158:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d15a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d15e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d160:	2302      	movs	r3, #2
 800d162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d164:	2300      	movs	r3, #0
 800d166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d168:	2303      	movs	r3, #3
 800d16a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d16c:	230a      	movs	r3, #10
 800d16e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d170:	f107 0314 	add.w	r3, r7, #20
 800d174:	4619      	mov	r1, r3
 800d176:	480e      	ldr	r0, [pc, #56]	; (800d1b0 <HAL_PCD_MspInit+0x94>)
 800d178:	f7f6 f90e 	bl	8003398 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d17c:	4b0b      	ldr	r3, [pc, #44]	; (800d1ac <HAL_PCD_MspInit+0x90>)
 800d17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d180:	4a0a      	ldr	r2, [pc, #40]	; (800d1ac <HAL_PCD_MspInit+0x90>)
 800d182:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d186:	6353      	str	r3, [r2, #52]	; 0x34
 800d188:	2300      	movs	r3, #0
 800d18a:	60fb      	str	r3, [r7, #12]
 800d18c:	4b07      	ldr	r3, [pc, #28]	; (800d1ac <HAL_PCD_MspInit+0x90>)
 800d18e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d190:	4a06      	ldr	r2, [pc, #24]	; (800d1ac <HAL_PCD_MspInit+0x90>)
 800d192:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d196:	6453      	str	r3, [r2, #68]	; 0x44
 800d198:	4b04      	ldr	r3, [pc, #16]	; (800d1ac <HAL_PCD_MspInit+0x90>)
 800d19a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d19c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d1a0:	60fb      	str	r3, [r7, #12]
 800d1a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800d1a4:	bf00      	nop
 800d1a6:	3728      	adds	r7, #40	; 0x28
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}
 800d1ac:	40023800 	.word	0x40023800
 800d1b0:	40020000 	.word	0x40020000

0800d1b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800d1b4:	b480      	push	{r7}
 800d1b6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800d1b8:	bf00      	nop
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr

0800d1c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800d1c2:	b480      	push	{r7}
 800d1c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800d1c6:	e7fe      	b.n	800d1c6 <HardFault_Handler+0x4>

0800d1c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800d1cc:	e7fe      	b.n	800d1cc <MemManage_Handler+0x4>

0800d1ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800d1ce:	b480      	push	{r7}
 800d1d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800d1d2:	e7fe      	b.n	800d1d2 <BusFault_Handler+0x4>

0800d1d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800d1d4:	b480      	push	{r7}
 800d1d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800d1d8:	e7fe      	b.n	800d1d8 <UsageFault_Handler+0x4>

0800d1da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800d1da:	b480      	push	{r7}
 800d1dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800d1de:	bf00      	nop
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800d1e8:	b480      	push	{r7}
 800d1ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800d1ec:	bf00      	nop
 800d1ee:	46bd      	mov	sp, r7
 800d1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1f4:	4770      	bx	lr

0800d1f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800d1f6:	b480      	push	{r7}
 800d1f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800d1fa:	bf00      	nop
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800d208:	f7f3 ff10 	bl	800102c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800d20c:	bf00      	nop
 800d20e:	bd80      	pop	{r7, pc}

0800d210 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800d214:	4802      	ldr	r0, [pc, #8]	; (800d220 <DMA1_Stream3_IRQHandler+0x10>)
 800d216:	f7f5 fe03 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800d21a:	bf00      	nop
 800d21c:	bd80      	pop	{r7, pc}
 800d21e:	bf00      	nop
 800d220:	20000c9c 	.word	0x20000c9c

0800d224 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800d224:	b580      	push	{r7, lr}
 800d226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800d228:	4805      	ldr	r0, [pc, #20]	; (800d240 <ADC_IRQHandler+0x1c>)
 800d22a:	f7f3 ff84 	bl	8001136 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800d22e:	4805      	ldr	r0, [pc, #20]	; (800d244 <ADC_IRQHandler+0x20>)
 800d230:	f7f3 ff81 	bl	8001136 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800d234:	4804      	ldr	r0, [pc, #16]	; (800d248 <ADC_IRQHandler+0x24>)
 800d236:	f7f3 ff7e 	bl	8001136 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800d23a:	bf00      	nop
 800d23c:	bd80      	pop	{r7, pc}
 800d23e:	bf00      	nop
 800d240:	20000d98 	.word	0x20000d98
 800d244:	20000738 	.word	0x20000738
 800d248:	20000de0 	.word	0x20000de0

0800d24c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800d250:	4802      	ldr	r0, [pc, #8]	; (800d25c <CAN1_RX0_IRQHandler+0x10>)
 800d252:	f7f5 f977 	bl	8002544 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800d256:	bf00      	nop
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop
 800d25c:	20001aec 	.word	0x20001aec

0800d260 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800d264:	f44f 7080 	mov.w	r0, #256	; 0x100
 800d268:	f7f6 fa64 	bl	8003734 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800d26c:	bf00      	nop
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d274:	4803      	ldr	r0, [pc, #12]	; (800d284 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800d276:	f7f9 faa2 	bl	80067be <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800d27a:	4803      	ldr	r0, [pc, #12]	; (800d288 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800d27c:	f7f9 fa9f 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800d280:	bf00      	nop
 800d282:	bd80      	pop	{r7, pc}
 800d284:	20000f2c 	.word	0x20000f2c
 800d288:	20001978 	.word	0x20001978

0800d28c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d290:	4802      	ldr	r0, [pc, #8]	; (800d29c <TIM1_UP_TIM10_IRQHandler+0x10>)
 800d292:	f7f9 fa94 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800d296:	bf00      	nop
 800d298:	bd80      	pop	{r7, pc}
 800d29a:	bf00      	nop
 800d29c:	20000f2c 	.word	0x20000f2c

0800d2a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d2a4:	4802      	ldr	r0, [pc, #8]	; (800d2b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800d2a6:	f7f9 fa8a 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800d2aa:	bf00      	nop
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000f2c 	.word	0x20000f2c

0800d2b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
	//debug1_out_GPIO_Port->BSRR = debug1_out_Pin << 16U; //takes 60ns == 5 clock cycles

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800d2b8:	4802      	ldr	r0, [pc, #8]	; (800d2c4 <TIM1_CC_IRQHandler+0x10>)
 800d2ba:	f7f9 fa80 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800d2be:	bf00      	nop
 800d2c0:	bd80      	pop	{r7, pc}
 800d2c2:	bf00      	nop
 800d2c4:	20000f2c 	.word	0x20000f2c

0800d2c8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800d2c8:	b580      	push	{r7, lr}
 800d2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800d2cc:	4802      	ldr	r0, [pc, #8]	; (800d2d8 <TIM3_IRQHandler+0x10>)
 800d2ce:	f7f9 fa76 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM3_IRQn 1 */
}
 800d2d2:	bf00      	nop
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	20000d40 	.word	0x20000d40

0800d2dc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800d2e0:	4802      	ldr	r0, [pc, #8]	; (800d2ec <SPI2_IRQHandler+0x10>)
 800d2e2:	f7f8 fd5b 	bl	8005d9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800d2e6:	bf00      	nop
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20000318 	.word	0x20000318

0800d2f0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800d2f0:	b580      	push	{r7, lr}
 800d2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800d2f4:	4802      	ldr	r0, [pc, #8]	; (800d300 <USART3_IRQHandler+0x10>)
 800d2f6:	f7fa fc07 	bl	8007b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800d2fa:	bf00      	nop
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	200006f8 	.word	0x200006f8

0800d304 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800d304:	b580      	push	{r7, lr}
 800d306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d308:	4803      	ldr	r0, [pc, #12]	; (800d318 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 800d30a:	f7f9 fa58 	bl	80067be <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 800d30e:	4803      	ldr	r0, [pc, #12]	; (800d31c <TIM8_BRK_TIM12_IRQHandler+0x18>)
 800d310:	f7f9 fa55 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800d314:	bf00      	nop
 800d316:	bd80      	pop	{r7, pc}
 800d318:	200006b8 	.word	0x200006b8
 800d31c:	20001b18 	.word	0x20001b18

0800d320 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800d320:	b580      	push	{r7, lr}
 800d322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d324:	4803      	ldr	r0, [pc, #12]	; (800d334 <TIM8_UP_TIM13_IRQHandler+0x14>)
 800d326:	f7f9 fa4a 	bl	80067be <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800d32a:	4803      	ldr	r0, [pc, #12]	; (800d338 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800d32c:	f7f9 fa47 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800d330:	bf00      	nop
 800d332:	bd80      	pop	{r7, pc}
 800d334:	200006b8 	.word	0x200006b8
 800d338:	20000e28 	.word	0x20000e28

0800d33c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d340:	4802      	ldr	r0, [pc, #8]	; (800d34c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800d342:	f7f9 fa3c 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800d346:	bf00      	nop
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	200006b8 	.word	0x200006b8

0800d350 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d354:	4802      	ldr	r0, [pc, #8]	; (800d360 <TIM8_CC_IRQHandler+0x10>)
 800d356:	f7f9 fa32 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800d35a:	bf00      	nop
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop
 800d360:	200006b8 	.word	0x200006b8

0800d364 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800d368:	4802      	ldr	r0, [pc, #8]	; (800d374 <TIM5_IRQHandler+0x10>)
 800d36a:	f7f9 fa28 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800d36e:	bf00      	nop
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	20000cfc 	.word	0x20000cfc

0800d378 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800d378:	b580      	push	{r7, lr}
 800d37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800d37c:	4802      	ldr	r0, [pc, #8]	; (800d388 <TIM6_DAC_IRQHandler+0x10>)
 800d37e:	f7f9 fa1e 	bl	80067be <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */
  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800d382:	bf00      	nop
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	20000eec 	.word	0x20000eec

0800d38c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d390:	4802      	ldr	r0, [pc, #8]	; (800d39c <DMA2_Stream0_IRQHandler+0x10>)
 800d392:	f7f5 fd45 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d396:	bf00      	nop
 800d398:	bd80      	pop	{r7, pc}
 800d39a:	bf00      	nop
 800d39c:	20000e6c 	.word	0x20000e6c

0800d3a0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800d3a4:	4802      	ldr	r0, [pc, #8]	; (800d3b0 <DMA2_Stream1_IRQHandler+0x10>)
 800d3a6:	f7f5 fd3b 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800d3aa:	bf00      	nop
 800d3ac:	bd80      	pop	{r7, pc}
 800d3ae:	bf00      	nop
 800d3b0:	20000c3c 	.word	0x20000c3c

0800d3b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d3b8:	4802      	ldr	r0, [pc, #8]	; (800d3c4 <DMA2_Stream2_IRQHandler+0x10>)
 800d3ba:	f7f5 fd31 	bl	8002e20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d3be:	bf00      	nop
 800d3c0:	bd80      	pop	{r7, pc}
 800d3c2:	bf00      	nop
 800d3c4:	20001a8c 	.word	0x20001a8c

0800d3c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d3d0:	4b11      	ldr	r3, [pc, #68]	; (800d418 <_sbrk+0x50>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d102      	bne.n	800d3de <_sbrk+0x16>
		heap_end = &end;
 800d3d8:	4b0f      	ldr	r3, [pc, #60]	; (800d418 <_sbrk+0x50>)
 800d3da:	4a10      	ldr	r2, [pc, #64]	; (800d41c <_sbrk+0x54>)
 800d3dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d3de:	4b0e      	ldr	r3, [pc, #56]	; (800d418 <_sbrk+0x50>)
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d3e4:	4b0c      	ldr	r3, [pc, #48]	; (800d418 <_sbrk+0x50>)
 800d3e6:	681a      	ldr	r2, [r3, #0]
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	4413      	add	r3, r2
 800d3ec:	466a      	mov	r2, sp
 800d3ee:	4293      	cmp	r3, r2
 800d3f0:	d907      	bls.n	800d402 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d3f2:	f000 f855 	bl	800d4a0 <__errno>
 800d3f6:	4602      	mov	r2, r0
 800d3f8:	230c      	movs	r3, #12
 800d3fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d3fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d400:	e006      	b.n	800d410 <_sbrk+0x48>
	}

	heap_end += incr;
 800d402:	4b05      	ldr	r3, [pc, #20]	; (800d418 <_sbrk+0x50>)
 800d404:	681a      	ldr	r2, [r3, #0]
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	4413      	add	r3, r2
 800d40a:	4a03      	ldr	r2, [pc, #12]	; (800d418 <_sbrk+0x50>)
 800d40c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d40e:	68fb      	ldr	r3, [r7, #12]
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}
 800d418:	200002b0 	.word	0x200002b0
 800d41c:	20002708 	.word	0x20002708

0800d420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d420:	b480      	push	{r7}
 800d422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d424:	4b08      	ldr	r3, [pc, #32]	; (800d448 <SystemInit+0x28>)
 800d426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d42a:	4a07      	ldr	r2, [pc, #28]	; (800d448 <SystemInit+0x28>)
 800d42c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d434:	4b04      	ldr	r3, [pc, #16]	; (800d448 <SystemInit+0x28>)
 800d436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d43a:	609a      	str	r2, [r3, #8]
#endif
}
 800d43c:	bf00      	nop
 800d43e:	46bd      	mov	sp, r7
 800d440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d444:	4770      	bx	lr
 800d446:	bf00      	nop
 800d448:	e000ed00 	.word	0xe000ed00

0800d44c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d44c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d484 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d452:	e003      	b.n	800d45c <LoopCopyDataInit>

0800d454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d454:	4b0c      	ldr	r3, [pc, #48]	; (800d488 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d45a:	3104      	adds	r1, #4

0800d45c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d45c:	480b      	ldr	r0, [pc, #44]	; (800d48c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d45e:	4b0c      	ldr	r3, [pc, #48]	; (800d490 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d464:	d3f6      	bcc.n	800d454 <CopyDataInit>
  ldr  r2, =_sbss
 800d466:	4a0b      	ldr	r2, [pc, #44]	; (800d494 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d468:	e002      	b.n	800d470 <LoopFillZerobss>

0800d46a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d46a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d46c:	f842 3b04 	str.w	r3, [r2], #4

0800d470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d470:	4b09      	ldr	r3, [pc, #36]	; (800d498 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d474:	d3f9      	bcc.n	800d46a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d476:	f7ff ffd3 	bl	800d420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d47a:	f000 f817 	bl	800d4ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d47e:	f7fb fbbb 	bl	8008bf8 <main>
  bx  lr    
 800d482:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d484:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d488:	080138f8 	.word	0x080138f8
  ldr  r0, =_sdata
 800d48c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d490:	20000218 	.word	0x20000218
  ldr  r2, =_sbss
 800d494:	20000218 	.word	0x20000218
  ldr  r3, = _ebss
 800d498:	20002708 	.word	0x20002708

0800d49c <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d49c:	e7fe      	b.n	800d49c <CAN1_RX1_IRQHandler>
	...

0800d4a0 <__errno>:
 800d4a0:	4b01      	ldr	r3, [pc, #4]	; (800d4a8 <__errno+0x8>)
 800d4a2:	6818      	ldr	r0, [r3, #0]
 800d4a4:	4770      	bx	lr
 800d4a6:	bf00      	nop
 800d4a8:	20000044 	.word	0x20000044

0800d4ac <__libc_init_array>:
 800d4ac:	b570      	push	{r4, r5, r6, lr}
 800d4ae:	4e0d      	ldr	r6, [pc, #52]	; (800d4e4 <__libc_init_array+0x38>)
 800d4b0:	4c0d      	ldr	r4, [pc, #52]	; (800d4e8 <__libc_init_array+0x3c>)
 800d4b2:	1ba4      	subs	r4, r4, r6
 800d4b4:	10a4      	asrs	r4, r4, #2
 800d4b6:	2500      	movs	r5, #0
 800d4b8:	42a5      	cmp	r5, r4
 800d4ba:	d109      	bne.n	800d4d0 <__libc_init_array+0x24>
 800d4bc:	4e0b      	ldr	r6, [pc, #44]	; (800d4ec <__libc_init_array+0x40>)
 800d4be:	4c0c      	ldr	r4, [pc, #48]	; (800d4f0 <__libc_init_array+0x44>)
 800d4c0:	f005 fe18 	bl	80130f4 <_init>
 800d4c4:	1ba4      	subs	r4, r4, r6
 800d4c6:	10a4      	asrs	r4, r4, #2
 800d4c8:	2500      	movs	r5, #0
 800d4ca:	42a5      	cmp	r5, r4
 800d4cc:	d105      	bne.n	800d4da <__libc_init_array+0x2e>
 800d4ce:	bd70      	pop	{r4, r5, r6, pc}
 800d4d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d4d4:	4798      	blx	r3
 800d4d6:	3501      	adds	r5, #1
 800d4d8:	e7ee      	b.n	800d4b8 <__libc_init_array+0xc>
 800d4da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d4de:	4798      	blx	r3
 800d4e0:	3501      	adds	r5, #1
 800d4e2:	e7f2      	b.n	800d4ca <__libc_init_array+0x1e>
 800d4e4:	080138f0 	.word	0x080138f0
 800d4e8:	080138f0 	.word	0x080138f0
 800d4ec:	080138f0 	.word	0x080138f0
 800d4f0:	080138f4 	.word	0x080138f4

0800d4f4 <memset>:
 800d4f4:	4402      	add	r2, r0
 800d4f6:	4603      	mov	r3, r0
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d100      	bne.n	800d4fe <memset+0xa>
 800d4fc:	4770      	bx	lr
 800d4fe:	f803 1b01 	strb.w	r1, [r3], #1
 800d502:	e7f9      	b.n	800d4f8 <memset+0x4>

0800d504 <__cvt>:
 800d504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d508:	ec55 4b10 	vmov	r4, r5, d0
 800d50c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800d50e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800d512:	2d00      	cmp	r5, #0
 800d514:	460e      	mov	r6, r1
 800d516:	4691      	mov	r9, r2
 800d518:	4619      	mov	r1, r3
 800d51a:	bfb8      	it	lt
 800d51c:	4622      	movlt	r2, r4
 800d51e:	462b      	mov	r3, r5
 800d520:	f027 0720 	bic.w	r7, r7, #32
 800d524:	bfbb      	ittet	lt
 800d526:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800d52a:	461d      	movlt	r5, r3
 800d52c:	2300      	movge	r3, #0
 800d52e:	232d      	movlt	r3, #45	; 0x2d
 800d530:	bfb8      	it	lt
 800d532:	4614      	movlt	r4, r2
 800d534:	2f46      	cmp	r7, #70	; 0x46
 800d536:	700b      	strb	r3, [r1, #0]
 800d538:	d004      	beq.n	800d544 <__cvt+0x40>
 800d53a:	2f45      	cmp	r7, #69	; 0x45
 800d53c:	d100      	bne.n	800d540 <__cvt+0x3c>
 800d53e:	3601      	adds	r6, #1
 800d540:	2102      	movs	r1, #2
 800d542:	e000      	b.n	800d546 <__cvt+0x42>
 800d544:	2103      	movs	r1, #3
 800d546:	ab03      	add	r3, sp, #12
 800d548:	9301      	str	r3, [sp, #4]
 800d54a:	ab02      	add	r3, sp, #8
 800d54c:	9300      	str	r3, [sp, #0]
 800d54e:	4632      	mov	r2, r6
 800d550:	4653      	mov	r3, sl
 800d552:	ec45 4b10 	vmov	d0, r4, r5
 800d556:	f001 fdbb 	bl	800f0d0 <_dtoa_r>
 800d55a:	2f47      	cmp	r7, #71	; 0x47
 800d55c:	4680      	mov	r8, r0
 800d55e:	d102      	bne.n	800d566 <__cvt+0x62>
 800d560:	f019 0f01 	tst.w	r9, #1
 800d564:	d026      	beq.n	800d5b4 <__cvt+0xb0>
 800d566:	2f46      	cmp	r7, #70	; 0x46
 800d568:	eb08 0906 	add.w	r9, r8, r6
 800d56c:	d111      	bne.n	800d592 <__cvt+0x8e>
 800d56e:	f898 3000 	ldrb.w	r3, [r8]
 800d572:	2b30      	cmp	r3, #48	; 0x30
 800d574:	d10a      	bne.n	800d58c <__cvt+0x88>
 800d576:	2200      	movs	r2, #0
 800d578:	2300      	movs	r3, #0
 800d57a:	4620      	mov	r0, r4
 800d57c:	4629      	mov	r1, r5
 800d57e:	f7f3 faa3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d582:	b918      	cbnz	r0, 800d58c <__cvt+0x88>
 800d584:	f1c6 0601 	rsb	r6, r6, #1
 800d588:	f8ca 6000 	str.w	r6, [sl]
 800d58c:	f8da 3000 	ldr.w	r3, [sl]
 800d590:	4499      	add	r9, r3
 800d592:	2200      	movs	r2, #0
 800d594:	2300      	movs	r3, #0
 800d596:	4620      	mov	r0, r4
 800d598:	4629      	mov	r1, r5
 800d59a:	f7f3 fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800d59e:	b938      	cbnz	r0, 800d5b0 <__cvt+0xac>
 800d5a0:	2230      	movs	r2, #48	; 0x30
 800d5a2:	9b03      	ldr	r3, [sp, #12]
 800d5a4:	454b      	cmp	r3, r9
 800d5a6:	d205      	bcs.n	800d5b4 <__cvt+0xb0>
 800d5a8:	1c59      	adds	r1, r3, #1
 800d5aa:	9103      	str	r1, [sp, #12]
 800d5ac:	701a      	strb	r2, [r3, #0]
 800d5ae:	e7f8      	b.n	800d5a2 <__cvt+0x9e>
 800d5b0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d5b4:	9b03      	ldr	r3, [sp, #12]
 800d5b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d5b8:	eba3 0308 	sub.w	r3, r3, r8
 800d5bc:	4640      	mov	r0, r8
 800d5be:	6013      	str	r3, [r2, #0]
 800d5c0:	b004      	add	sp, #16
 800d5c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800d5c6 <__exponent>:
 800d5c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d5c8:	2900      	cmp	r1, #0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	bfba      	itte	lt
 800d5ce:	4249      	neglt	r1, r1
 800d5d0:	232d      	movlt	r3, #45	; 0x2d
 800d5d2:	232b      	movge	r3, #43	; 0x2b
 800d5d4:	2909      	cmp	r1, #9
 800d5d6:	f804 2b02 	strb.w	r2, [r4], #2
 800d5da:	7043      	strb	r3, [r0, #1]
 800d5dc:	dd20      	ble.n	800d620 <__exponent+0x5a>
 800d5de:	f10d 0307 	add.w	r3, sp, #7
 800d5e2:	461f      	mov	r7, r3
 800d5e4:	260a      	movs	r6, #10
 800d5e6:	fb91 f5f6 	sdiv	r5, r1, r6
 800d5ea:	fb06 1115 	mls	r1, r6, r5, r1
 800d5ee:	3130      	adds	r1, #48	; 0x30
 800d5f0:	2d09      	cmp	r5, #9
 800d5f2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d5f6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800d5fa:	4629      	mov	r1, r5
 800d5fc:	dc09      	bgt.n	800d612 <__exponent+0x4c>
 800d5fe:	3130      	adds	r1, #48	; 0x30
 800d600:	3b02      	subs	r3, #2
 800d602:	f802 1c01 	strb.w	r1, [r2, #-1]
 800d606:	42bb      	cmp	r3, r7
 800d608:	4622      	mov	r2, r4
 800d60a:	d304      	bcc.n	800d616 <__exponent+0x50>
 800d60c:	1a10      	subs	r0, r2, r0
 800d60e:	b003      	add	sp, #12
 800d610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d612:	4613      	mov	r3, r2
 800d614:	e7e7      	b.n	800d5e6 <__exponent+0x20>
 800d616:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d61a:	f804 2b01 	strb.w	r2, [r4], #1
 800d61e:	e7f2      	b.n	800d606 <__exponent+0x40>
 800d620:	2330      	movs	r3, #48	; 0x30
 800d622:	4419      	add	r1, r3
 800d624:	7083      	strb	r3, [r0, #2]
 800d626:	1d02      	adds	r2, r0, #4
 800d628:	70c1      	strb	r1, [r0, #3]
 800d62a:	e7ef      	b.n	800d60c <__exponent+0x46>

0800d62c <_printf_float>:
 800d62c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d630:	b08d      	sub	sp, #52	; 0x34
 800d632:	460c      	mov	r4, r1
 800d634:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800d638:	4616      	mov	r6, r2
 800d63a:	461f      	mov	r7, r3
 800d63c:	4605      	mov	r5, r0
 800d63e:	f002 fe2b 	bl	8010298 <_localeconv_r>
 800d642:	6803      	ldr	r3, [r0, #0]
 800d644:	9304      	str	r3, [sp, #16]
 800d646:	4618      	mov	r0, r3
 800d648:	f7f2 fdc2 	bl	80001d0 <strlen>
 800d64c:	2300      	movs	r3, #0
 800d64e:	930a      	str	r3, [sp, #40]	; 0x28
 800d650:	f8d8 3000 	ldr.w	r3, [r8]
 800d654:	9005      	str	r0, [sp, #20]
 800d656:	3307      	adds	r3, #7
 800d658:	f023 0307 	bic.w	r3, r3, #7
 800d65c:	f103 0208 	add.w	r2, r3, #8
 800d660:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d664:	f8d4 b000 	ldr.w	fp, [r4]
 800d668:	f8c8 2000 	str.w	r2, [r8]
 800d66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d670:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800d674:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800d678:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800d67c:	9307      	str	r3, [sp, #28]
 800d67e:	f8cd 8018 	str.w	r8, [sp, #24]
 800d682:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d686:	4ba7      	ldr	r3, [pc, #668]	; (800d924 <_printf_float+0x2f8>)
 800d688:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d68c:	f7f3 fa4e 	bl	8000b2c <__aeabi_dcmpun>
 800d690:	bb70      	cbnz	r0, 800d6f0 <_printf_float+0xc4>
 800d692:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d696:	4ba3      	ldr	r3, [pc, #652]	; (800d924 <_printf_float+0x2f8>)
 800d698:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d69c:	f7f3 fa28 	bl	8000af0 <__aeabi_dcmple>
 800d6a0:	bb30      	cbnz	r0, 800d6f0 <_printf_float+0xc4>
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	4640      	mov	r0, r8
 800d6a8:	4649      	mov	r1, r9
 800d6aa:	f7f3 fa17 	bl	8000adc <__aeabi_dcmplt>
 800d6ae:	b110      	cbz	r0, 800d6b6 <_printf_float+0x8a>
 800d6b0:	232d      	movs	r3, #45	; 0x2d
 800d6b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d6b6:	4a9c      	ldr	r2, [pc, #624]	; (800d928 <_printf_float+0x2fc>)
 800d6b8:	4b9c      	ldr	r3, [pc, #624]	; (800d92c <_printf_float+0x300>)
 800d6ba:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d6be:	bf8c      	ite	hi
 800d6c0:	4690      	movhi	r8, r2
 800d6c2:	4698      	movls	r8, r3
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	f02b 0204 	bic.w	r2, fp, #4
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	6022      	str	r2, [r4, #0]
 800d6ce:	f04f 0900 	mov.w	r9, #0
 800d6d2:	9700      	str	r7, [sp, #0]
 800d6d4:	4633      	mov	r3, r6
 800d6d6:	aa0b      	add	r2, sp, #44	; 0x2c
 800d6d8:	4621      	mov	r1, r4
 800d6da:	4628      	mov	r0, r5
 800d6dc:	f000 f9e6 	bl	800daac <_printf_common>
 800d6e0:	3001      	adds	r0, #1
 800d6e2:	f040 808d 	bne.w	800d800 <_printf_float+0x1d4>
 800d6e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d6ea:	b00d      	add	sp, #52	; 0x34
 800d6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6f0:	4642      	mov	r2, r8
 800d6f2:	464b      	mov	r3, r9
 800d6f4:	4640      	mov	r0, r8
 800d6f6:	4649      	mov	r1, r9
 800d6f8:	f7f3 fa18 	bl	8000b2c <__aeabi_dcmpun>
 800d6fc:	b110      	cbz	r0, 800d704 <_printf_float+0xd8>
 800d6fe:	4a8c      	ldr	r2, [pc, #560]	; (800d930 <_printf_float+0x304>)
 800d700:	4b8c      	ldr	r3, [pc, #560]	; (800d934 <_printf_float+0x308>)
 800d702:	e7da      	b.n	800d6ba <_printf_float+0x8e>
 800d704:	6861      	ldr	r1, [r4, #4]
 800d706:	1c4b      	adds	r3, r1, #1
 800d708:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800d70c:	a80a      	add	r0, sp, #40	; 0x28
 800d70e:	d13e      	bne.n	800d78e <_printf_float+0x162>
 800d710:	2306      	movs	r3, #6
 800d712:	6063      	str	r3, [r4, #4]
 800d714:	2300      	movs	r3, #0
 800d716:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800d71a:	ab09      	add	r3, sp, #36	; 0x24
 800d71c:	9300      	str	r3, [sp, #0]
 800d71e:	ec49 8b10 	vmov	d0, r8, r9
 800d722:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d726:	6022      	str	r2, [r4, #0]
 800d728:	f8cd a004 	str.w	sl, [sp, #4]
 800d72c:	6861      	ldr	r1, [r4, #4]
 800d72e:	4628      	mov	r0, r5
 800d730:	f7ff fee8 	bl	800d504 <__cvt>
 800d734:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800d738:	2b47      	cmp	r3, #71	; 0x47
 800d73a:	4680      	mov	r8, r0
 800d73c:	d109      	bne.n	800d752 <_printf_float+0x126>
 800d73e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d740:	1cd8      	adds	r0, r3, #3
 800d742:	db02      	blt.n	800d74a <_printf_float+0x11e>
 800d744:	6862      	ldr	r2, [r4, #4]
 800d746:	4293      	cmp	r3, r2
 800d748:	dd47      	ble.n	800d7da <_printf_float+0x1ae>
 800d74a:	f1aa 0a02 	sub.w	sl, sl, #2
 800d74e:	fa5f fa8a 	uxtb.w	sl, sl
 800d752:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d756:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d758:	d824      	bhi.n	800d7a4 <_printf_float+0x178>
 800d75a:	3901      	subs	r1, #1
 800d75c:	4652      	mov	r2, sl
 800d75e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d762:	9109      	str	r1, [sp, #36]	; 0x24
 800d764:	f7ff ff2f 	bl	800d5c6 <__exponent>
 800d768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d76a:	1813      	adds	r3, r2, r0
 800d76c:	2a01      	cmp	r2, #1
 800d76e:	4681      	mov	r9, r0
 800d770:	6123      	str	r3, [r4, #16]
 800d772:	dc02      	bgt.n	800d77a <_printf_float+0x14e>
 800d774:	6822      	ldr	r2, [r4, #0]
 800d776:	07d1      	lsls	r1, r2, #31
 800d778:	d501      	bpl.n	800d77e <_printf_float+0x152>
 800d77a:	3301      	adds	r3, #1
 800d77c:	6123      	str	r3, [r4, #16]
 800d77e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d782:	2b00      	cmp	r3, #0
 800d784:	d0a5      	beq.n	800d6d2 <_printf_float+0xa6>
 800d786:	232d      	movs	r3, #45	; 0x2d
 800d788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d78c:	e7a1      	b.n	800d6d2 <_printf_float+0xa6>
 800d78e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800d792:	f000 8177 	beq.w	800da84 <_printf_float+0x458>
 800d796:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800d79a:	d1bb      	bne.n	800d714 <_printf_float+0xe8>
 800d79c:	2900      	cmp	r1, #0
 800d79e:	d1b9      	bne.n	800d714 <_printf_float+0xe8>
 800d7a0:	2301      	movs	r3, #1
 800d7a2:	e7b6      	b.n	800d712 <_printf_float+0xe6>
 800d7a4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800d7a8:	d119      	bne.n	800d7de <_printf_float+0x1b2>
 800d7aa:	2900      	cmp	r1, #0
 800d7ac:	6863      	ldr	r3, [r4, #4]
 800d7ae:	dd0c      	ble.n	800d7ca <_printf_float+0x19e>
 800d7b0:	6121      	str	r1, [r4, #16]
 800d7b2:	b913      	cbnz	r3, 800d7ba <_printf_float+0x18e>
 800d7b4:	6822      	ldr	r2, [r4, #0]
 800d7b6:	07d2      	lsls	r2, r2, #31
 800d7b8:	d502      	bpl.n	800d7c0 <_printf_float+0x194>
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	440b      	add	r3, r1
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c2:	65a3      	str	r3, [r4, #88]	; 0x58
 800d7c4:	f04f 0900 	mov.w	r9, #0
 800d7c8:	e7d9      	b.n	800d77e <_printf_float+0x152>
 800d7ca:	b913      	cbnz	r3, 800d7d2 <_printf_float+0x1a6>
 800d7cc:	6822      	ldr	r2, [r4, #0]
 800d7ce:	07d0      	lsls	r0, r2, #31
 800d7d0:	d501      	bpl.n	800d7d6 <_printf_float+0x1aa>
 800d7d2:	3302      	adds	r3, #2
 800d7d4:	e7f3      	b.n	800d7be <_printf_float+0x192>
 800d7d6:	2301      	movs	r3, #1
 800d7d8:	e7f1      	b.n	800d7be <_printf_float+0x192>
 800d7da:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800d7de:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	db05      	blt.n	800d7f2 <_printf_float+0x1c6>
 800d7e6:	6822      	ldr	r2, [r4, #0]
 800d7e8:	6123      	str	r3, [r4, #16]
 800d7ea:	07d1      	lsls	r1, r2, #31
 800d7ec:	d5e8      	bpl.n	800d7c0 <_printf_float+0x194>
 800d7ee:	3301      	adds	r3, #1
 800d7f0:	e7e5      	b.n	800d7be <_printf_float+0x192>
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	bfd4      	ite	le
 800d7f6:	f1c3 0302 	rsble	r3, r3, #2
 800d7fa:	2301      	movgt	r3, #1
 800d7fc:	4413      	add	r3, r2
 800d7fe:	e7de      	b.n	800d7be <_printf_float+0x192>
 800d800:	6823      	ldr	r3, [r4, #0]
 800d802:	055a      	lsls	r2, r3, #21
 800d804:	d407      	bmi.n	800d816 <_printf_float+0x1ea>
 800d806:	6923      	ldr	r3, [r4, #16]
 800d808:	4642      	mov	r2, r8
 800d80a:	4631      	mov	r1, r6
 800d80c:	4628      	mov	r0, r5
 800d80e:	47b8      	blx	r7
 800d810:	3001      	adds	r0, #1
 800d812:	d12b      	bne.n	800d86c <_printf_float+0x240>
 800d814:	e767      	b.n	800d6e6 <_printf_float+0xba>
 800d816:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800d81a:	f240 80dc 	bls.w	800d9d6 <_printf_float+0x3aa>
 800d81e:	2200      	movs	r2, #0
 800d820:	2300      	movs	r3, #0
 800d822:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d826:	f7f3 f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d82a:	2800      	cmp	r0, #0
 800d82c:	d033      	beq.n	800d896 <_printf_float+0x26a>
 800d82e:	2301      	movs	r3, #1
 800d830:	4a41      	ldr	r2, [pc, #260]	; (800d938 <_printf_float+0x30c>)
 800d832:	4631      	mov	r1, r6
 800d834:	4628      	mov	r0, r5
 800d836:	47b8      	blx	r7
 800d838:	3001      	adds	r0, #1
 800d83a:	f43f af54 	beq.w	800d6e6 <_printf_float+0xba>
 800d83e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d842:	429a      	cmp	r2, r3
 800d844:	db02      	blt.n	800d84c <_printf_float+0x220>
 800d846:	6823      	ldr	r3, [r4, #0]
 800d848:	07d8      	lsls	r0, r3, #31
 800d84a:	d50f      	bpl.n	800d86c <_printf_float+0x240>
 800d84c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d850:	4631      	mov	r1, r6
 800d852:	4628      	mov	r0, r5
 800d854:	47b8      	blx	r7
 800d856:	3001      	adds	r0, #1
 800d858:	f43f af45 	beq.w	800d6e6 <_printf_float+0xba>
 800d85c:	f04f 0800 	mov.w	r8, #0
 800d860:	f104 091a 	add.w	r9, r4, #26
 800d864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d866:	3b01      	subs	r3, #1
 800d868:	4543      	cmp	r3, r8
 800d86a:	dc09      	bgt.n	800d880 <_printf_float+0x254>
 800d86c:	6823      	ldr	r3, [r4, #0]
 800d86e:	079b      	lsls	r3, r3, #30
 800d870:	f100 8103 	bmi.w	800da7a <_printf_float+0x44e>
 800d874:	68e0      	ldr	r0, [r4, #12]
 800d876:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d878:	4298      	cmp	r0, r3
 800d87a:	bfb8      	it	lt
 800d87c:	4618      	movlt	r0, r3
 800d87e:	e734      	b.n	800d6ea <_printf_float+0xbe>
 800d880:	2301      	movs	r3, #1
 800d882:	464a      	mov	r2, r9
 800d884:	4631      	mov	r1, r6
 800d886:	4628      	mov	r0, r5
 800d888:	47b8      	blx	r7
 800d88a:	3001      	adds	r0, #1
 800d88c:	f43f af2b 	beq.w	800d6e6 <_printf_float+0xba>
 800d890:	f108 0801 	add.w	r8, r8, #1
 800d894:	e7e6      	b.n	800d864 <_printf_float+0x238>
 800d896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d898:	2b00      	cmp	r3, #0
 800d89a:	dc2b      	bgt.n	800d8f4 <_printf_float+0x2c8>
 800d89c:	2301      	movs	r3, #1
 800d89e:	4a26      	ldr	r2, [pc, #152]	; (800d938 <_printf_float+0x30c>)
 800d8a0:	4631      	mov	r1, r6
 800d8a2:	4628      	mov	r0, r5
 800d8a4:	47b8      	blx	r7
 800d8a6:	3001      	adds	r0, #1
 800d8a8:	f43f af1d 	beq.w	800d6e6 <_printf_float+0xba>
 800d8ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8ae:	b923      	cbnz	r3, 800d8ba <_printf_float+0x28e>
 800d8b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8b2:	b913      	cbnz	r3, 800d8ba <_printf_float+0x28e>
 800d8b4:	6823      	ldr	r3, [r4, #0]
 800d8b6:	07d9      	lsls	r1, r3, #31
 800d8b8:	d5d8      	bpl.n	800d86c <_printf_float+0x240>
 800d8ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8be:	4631      	mov	r1, r6
 800d8c0:	4628      	mov	r0, r5
 800d8c2:	47b8      	blx	r7
 800d8c4:	3001      	adds	r0, #1
 800d8c6:	f43f af0e 	beq.w	800d6e6 <_printf_float+0xba>
 800d8ca:	f04f 0900 	mov.w	r9, #0
 800d8ce:	f104 0a1a 	add.w	sl, r4, #26
 800d8d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d8d4:	425b      	negs	r3, r3
 800d8d6:	454b      	cmp	r3, r9
 800d8d8:	dc01      	bgt.n	800d8de <_printf_float+0x2b2>
 800d8da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8dc:	e794      	b.n	800d808 <_printf_float+0x1dc>
 800d8de:	2301      	movs	r3, #1
 800d8e0:	4652      	mov	r2, sl
 800d8e2:	4631      	mov	r1, r6
 800d8e4:	4628      	mov	r0, r5
 800d8e6:	47b8      	blx	r7
 800d8e8:	3001      	adds	r0, #1
 800d8ea:	f43f aefc 	beq.w	800d6e6 <_printf_float+0xba>
 800d8ee:	f109 0901 	add.w	r9, r9, #1
 800d8f2:	e7ee      	b.n	800d8d2 <_printf_float+0x2a6>
 800d8f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d8f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d8f8:	429a      	cmp	r2, r3
 800d8fa:	bfa8      	it	ge
 800d8fc:	461a      	movge	r2, r3
 800d8fe:	2a00      	cmp	r2, #0
 800d900:	4691      	mov	r9, r2
 800d902:	dd07      	ble.n	800d914 <_printf_float+0x2e8>
 800d904:	4613      	mov	r3, r2
 800d906:	4631      	mov	r1, r6
 800d908:	4642      	mov	r2, r8
 800d90a:	4628      	mov	r0, r5
 800d90c:	47b8      	blx	r7
 800d90e:	3001      	adds	r0, #1
 800d910:	f43f aee9 	beq.w	800d6e6 <_printf_float+0xba>
 800d914:	f104 031a 	add.w	r3, r4, #26
 800d918:	f04f 0b00 	mov.w	fp, #0
 800d91c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d920:	9306      	str	r3, [sp, #24]
 800d922:	e015      	b.n	800d950 <_printf_float+0x324>
 800d924:	7fefffff 	.word	0x7fefffff
 800d928:	08013414 	.word	0x08013414
 800d92c:	08013410 	.word	0x08013410
 800d930:	0801341c 	.word	0x0801341c
 800d934:	08013418 	.word	0x08013418
 800d938:	08013420 	.word	0x08013420
 800d93c:	2301      	movs	r3, #1
 800d93e:	9a06      	ldr	r2, [sp, #24]
 800d940:	4631      	mov	r1, r6
 800d942:	4628      	mov	r0, r5
 800d944:	47b8      	blx	r7
 800d946:	3001      	adds	r0, #1
 800d948:	f43f aecd 	beq.w	800d6e6 <_printf_float+0xba>
 800d94c:	f10b 0b01 	add.w	fp, fp, #1
 800d950:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800d954:	ebaa 0309 	sub.w	r3, sl, r9
 800d958:	455b      	cmp	r3, fp
 800d95a:	dcef      	bgt.n	800d93c <_printf_float+0x310>
 800d95c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d960:	429a      	cmp	r2, r3
 800d962:	44d0      	add	r8, sl
 800d964:	db15      	blt.n	800d992 <_printf_float+0x366>
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	07da      	lsls	r2, r3, #31
 800d96a:	d412      	bmi.n	800d992 <_printf_float+0x366>
 800d96c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d96e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d970:	eba3 020a 	sub.w	r2, r3, sl
 800d974:	eba3 0a01 	sub.w	sl, r3, r1
 800d978:	4592      	cmp	sl, r2
 800d97a:	bfa8      	it	ge
 800d97c:	4692      	movge	sl, r2
 800d97e:	f1ba 0f00 	cmp.w	sl, #0
 800d982:	dc0e      	bgt.n	800d9a2 <_printf_float+0x376>
 800d984:	f04f 0800 	mov.w	r8, #0
 800d988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d98c:	f104 091a 	add.w	r9, r4, #26
 800d990:	e019      	b.n	800d9c6 <_printf_float+0x39a>
 800d992:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d996:	4631      	mov	r1, r6
 800d998:	4628      	mov	r0, r5
 800d99a:	47b8      	blx	r7
 800d99c:	3001      	adds	r0, #1
 800d99e:	d1e5      	bne.n	800d96c <_printf_float+0x340>
 800d9a0:	e6a1      	b.n	800d6e6 <_printf_float+0xba>
 800d9a2:	4653      	mov	r3, sl
 800d9a4:	4642      	mov	r2, r8
 800d9a6:	4631      	mov	r1, r6
 800d9a8:	4628      	mov	r0, r5
 800d9aa:	47b8      	blx	r7
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	d1e9      	bne.n	800d984 <_printf_float+0x358>
 800d9b0:	e699      	b.n	800d6e6 <_printf_float+0xba>
 800d9b2:	2301      	movs	r3, #1
 800d9b4:	464a      	mov	r2, r9
 800d9b6:	4631      	mov	r1, r6
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	47b8      	blx	r7
 800d9bc:	3001      	adds	r0, #1
 800d9be:	f43f ae92 	beq.w	800d6e6 <_printf_float+0xba>
 800d9c2:	f108 0801 	add.w	r8, r8, #1
 800d9c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d9ca:	1a9b      	subs	r3, r3, r2
 800d9cc:	eba3 030a 	sub.w	r3, r3, sl
 800d9d0:	4543      	cmp	r3, r8
 800d9d2:	dcee      	bgt.n	800d9b2 <_printf_float+0x386>
 800d9d4:	e74a      	b.n	800d86c <_printf_float+0x240>
 800d9d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d9d8:	2a01      	cmp	r2, #1
 800d9da:	dc01      	bgt.n	800d9e0 <_printf_float+0x3b4>
 800d9dc:	07db      	lsls	r3, r3, #31
 800d9de:	d53a      	bpl.n	800da56 <_printf_float+0x42a>
 800d9e0:	2301      	movs	r3, #1
 800d9e2:	4642      	mov	r2, r8
 800d9e4:	4631      	mov	r1, r6
 800d9e6:	4628      	mov	r0, r5
 800d9e8:	47b8      	blx	r7
 800d9ea:	3001      	adds	r0, #1
 800d9ec:	f43f ae7b 	beq.w	800d6e6 <_printf_float+0xba>
 800d9f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9f4:	4631      	mov	r1, r6
 800d9f6:	4628      	mov	r0, r5
 800d9f8:	47b8      	blx	r7
 800d9fa:	3001      	adds	r0, #1
 800d9fc:	f108 0801 	add.w	r8, r8, #1
 800da00:	f43f ae71 	beq.w	800d6e6 <_printf_float+0xba>
 800da04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da06:	2200      	movs	r2, #0
 800da08:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800da0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800da10:	2300      	movs	r3, #0
 800da12:	f7f3 f859 	bl	8000ac8 <__aeabi_dcmpeq>
 800da16:	b9c8      	cbnz	r0, 800da4c <_printf_float+0x420>
 800da18:	4653      	mov	r3, sl
 800da1a:	4642      	mov	r2, r8
 800da1c:	4631      	mov	r1, r6
 800da1e:	4628      	mov	r0, r5
 800da20:	47b8      	blx	r7
 800da22:	3001      	adds	r0, #1
 800da24:	d10e      	bne.n	800da44 <_printf_float+0x418>
 800da26:	e65e      	b.n	800d6e6 <_printf_float+0xba>
 800da28:	2301      	movs	r3, #1
 800da2a:	4652      	mov	r2, sl
 800da2c:	4631      	mov	r1, r6
 800da2e:	4628      	mov	r0, r5
 800da30:	47b8      	blx	r7
 800da32:	3001      	adds	r0, #1
 800da34:	f43f ae57 	beq.w	800d6e6 <_printf_float+0xba>
 800da38:	f108 0801 	add.w	r8, r8, #1
 800da3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800da3e:	3b01      	subs	r3, #1
 800da40:	4543      	cmp	r3, r8
 800da42:	dcf1      	bgt.n	800da28 <_printf_float+0x3fc>
 800da44:	464b      	mov	r3, r9
 800da46:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800da4a:	e6de      	b.n	800d80a <_printf_float+0x1de>
 800da4c:	f04f 0800 	mov.w	r8, #0
 800da50:	f104 0a1a 	add.w	sl, r4, #26
 800da54:	e7f2      	b.n	800da3c <_printf_float+0x410>
 800da56:	2301      	movs	r3, #1
 800da58:	e7df      	b.n	800da1a <_printf_float+0x3ee>
 800da5a:	2301      	movs	r3, #1
 800da5c:	464a      	mov	r2, r9
 800da5e:	4631      	mov	r1, r6
 800da60:	4628      	mov	r0, r5
 800da62:	47b8      	blx	r7
 800da64:	3001      	adds	r0, #1
 800da66:	f43f ae3e 	beq.w	800d6e6 <_printf_float+0xba>
 800da6a:	f108 0801 	add.w	r8, r8, #1
 800da6e:	68e3      	ldr	r3, [r4, #12]
 800da70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800da72:	1a9b      	subs	r3, r3, r2
 800da74:	4543      	cmp	r3, r8
 800da76:	dcf0      	bgt.n	800da5a <_printf_float+0x42e>
 800da78:	e6fc      	b.n	800d874 <_printf_float+0x248>
 800da7a:	f04f 0800 	mov.w	r8, #0
 800da7e:	f104 0919 	add.w	r9, r4, #25
 800da82:	e7f4      	b.n	800da6e <_printf_float+0x442>
 800da84:	2900      	cmp	r1, #0
 800da86:	f43f ae8b 	beq.w	800d7a0 <_printf_float+0x174>
 800da8a:	2300      	movs	r3, #0
 800da8c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800da90:	ab09      	add	r3, sp, #36	; 0x24
 800da92:	9300      	str	r3, [sp, #0]
 800da94:	ec49 8b10 	vmov	d0, r8, r9
 800da98:	6022      	str	r2, [r4, #0]
 800da9a:	f8cd a004 	str.w	sl, [sp, #4]
 800da9e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800daa2:	4628      	mov	r0, r5
 800daa4:	f7ff fd2e 	bl	800d504 <__cvt>
 800daa8:	4680      	mov	r8, r0
 800daaa:	e648      	b.n	800d73e <_printf_float+0x112>

0800daac <_printf_common>:
 800daac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dab0:	4691      	mov	r9, r2
 800dab2:	461f      	mov	r7, r3
 800dab4:	688a      	ldr	r2, [r1, #8]
 800dab6:	690b      	ldr	r3, [r1, #16]
 800dab8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dabc:	4293      	cmp	r3, r2
 800dabe:	bfb8      	it	lt
 800dac0:	4613      	movlt	r3, r2
 800dac2:	f8c9 3000 	str.w	r3, [r9]
 800dac6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800daca:	4606      	mov	r6, r0
 800dacc:	460c      	mov	r4, r1
 800dace:	b112      	cbz	r2, 800dad6 <_printf_common+0x2a>
 800dad0:	3301      	adds	r3, #1
 800dad2:	f8c9 3000 	str.w	r3, [r9]
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	0699      	lsls	r1, r3, #26
 800dada:	bf42      	ittt	mi
 800dadc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800dae0:	3302      	addmi	r3, #2
 800dae2:	f8c9 3000 	strmi.w	r3, [r9]
 800dae6:	6825      	ldr	r5, [r4, #0]
 800dae8:	f015 0506 	ands.w	r5, r5, #6
 800daec:	d107      	bne.n	800dafe <_printf_common+0x52>
 800daee:	f104 0a19 	add.w	sl, r4, #25
 800daf2:	68e3      	ldr	r3, [r4, #12]
 800daf4:	f8d9 2000 	ldr.w	r2, [r9]
 800daf8:	1a9b      	subs	r3, r3, r2
 800dafa:	42ab      	cmp	r3, r5
 800dafc:	dc28      	bgt.n	800db50 <_printf_common+0xa4>
 800dafe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800db02:	6822      	ldr	r2, [r4, #0]
 800db04:	3300      	adds	r3, #0
 800db06:	bf18      	it	ne
 800db08:	2301      	movne	r3, #1
 800db0a:	0692      	lsls	r2, r2, #26
 800db0c:	d42d      	bmi.n	800db6a <_printf_common+0xbe>
 800db0e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800db12:	4639      	mov	r1, r7
 800db14:	4630      	mov	r0, r6
 800db16:	47c0      	blx	r8
 800db18:	3001      	adds	r0, #1
 800db1a:	d020      	beq.n	800db5e <_printf_common+0xb2>
 800db1c:	6823      	ldr	r3, [r4, #0]
 800db1e:	68e5      	ldr	r5, [r4, #12]
 800db20:	f8d9 2000 	ldr.w	r2, [r9]
 800db24:	f003 0306 	and.w	r3, r3, #6
 800db28:	2b04      	cmp	r3, #4
 800db2a:	bf08      	it	eq
 800db2c:	1aad      	subeq	r5, r5, r2
 800db2e:	68a3      	ldr	r3, [r4, #8]
 800db30:	6922      	ldr	r2, [r4, #16]
 800db32:	bf0c      	ite	eq
 800db34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800db38:	2500      	movne	r5, #0
 800db3a:	4293      	cmp	r3, r2
 800db3c:	bfc4      	itt	gt
 800db3e:	1a9b      	subgt	r3, r3, r2
 800db40:	18ed      	addgt	r5, r5, r3
 800db42:	f04f 0900 	mov.w	r9, #0
 800db46:	341a      	adds	r4, #26
 800db48:	454d      	cmp	r5, r9
 800db4a:	d11a      	bne.n	800db82 <_printf_common+0xd6>
 800db4c:	2000      	movs	r0, #0
 800db4e:	e008      	b.n	800db62 <_printf_common+0xb6>
 800db50:	2301      	movs	r3, #1
 800db52:	4652      	mov	r2, sl
 800db54:	4639      	mov	r1, r7
 800db56:	4630      	mov	r0, r6
 800db58:	47c0      	blx	r8
 800db5a:	3001      	adds	r0, #1
 800db5c:	d103      	bne.n	800db66 <_printf_common+0xba>
 800db5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800db62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db66:	3501      	adds	r5, #1
 800db68:	e7c3      	b.n	800daf2 <_printf_common+0x46>
 800db6a:	18e1      	adds	r1, r4, r3
 800db6c:	1c5a      	adds	r2, r3, #1
 800db6e:	2030      	movs	r0, #48	; 0x30
 800db70:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800db74:	4422      	add	r2, r4
 800db76:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800db7a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800db7e:	3302      	adds	r3, #2
 800db80:	e7c5      	b.n	800db0e <_printf_common+0x62>
 800db82:	2301      	movs	r3, #1
 800db84:	4622      	mov	r2, r4
 800db86:	4639      	mov	r1, r7
 800db88:	4630      	mov	r0, r6
 800db8a:	47c0      	blx	r8
 800db8c:	3001      	adds	r0, #1
 800db8e:	d0e6      	beq.n	800db5e <_printf_common+0xb2>
 800db90:	f109 0901 	add.w	r9, r9, #1
 800db94:	e7d8      	b.n	800db48 <_printf_common+0x9c>
	...

0800db98 <_printf_i>:
 800db98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db9c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800dba0:	460c      	mov	r4, r1
 800dba2:	7e09      	ldrb	r1, [r1, #24]
 800dba4:	b085      	sub	sp, #20
 800dba6:	296e      	cmp	r1, #110	; 0x6e
 800dba8:	4617      	mov	r7, r2
 800dbaa:	4606      	mov	r6, r0
 800dbac:	4698      	mov	r8, r3
 800dbae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dbb0:	f000 80b3 	beq.w	800dd1a <_printf_i+0x182>
 800dbb4:	d822      	bhi.n	800dbfc <_printf_i+0x64>
 800dbb6:	2963      	cmp	r1, #99	; 0x63
 800dbb8:	d036      	beq.n	800dc28 <_printf_i+0x90>
 800dbba:	d80a      	bhi.n	800dbd2 <_printf_i+0x3a>
 800dbbc:	2900      	cmp	r1, #0
 800dbbe:	f000 80b9 	beq.w	800dd34 <_printf_i+0x19c>
 800dbc2:	2958      	cmp	r1, #88	; 0x58
 800dbc4:	f000 8083 	beq.w	800dcce <_printf_i+0x136>
 800dbc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dbcc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800dbd0:	e032      	b.n	800dc38 <_printf_i+0xa0>
 800dbd2:	2964      	cmp	r1, #100	; 0x64
 800dbd4:	d001      	beq.n	800dbda <_printf_i+0x42>
 800dbd6:	2969      	cmp	r1, #105	; 0x69
 800dbd8:	d1f6      	bne.n	800dbc8 <_printf_i+0x30>
 800dbda:	6820      	ldr	r0, [r4, #0]
 800dbdc:	6813      	ldr	r3, [r2, #0]
 800dbde:	0605      	lsls	r5, r0, #24
 800dbe0:	f103 0104 	add.w	r1, r3, #4
 800dbe4:	d52a      	bpl.n	800dc3c <_printf_i+0xa4>
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	6011      	str	r1, [r2, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	da03      	bge.n	800dbf6 <_printf_i+0x5e>
 800dbee:	222d      	movs	r2, #45	; 0x2d
 800dbf0:	425b      	negs	r3, r3
 800dbf2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800dbf6:	486f      	ldr	r0, [pc, #444]	; (800ddb4 <_printf_i+0x21c>)
 800dbf8:	220a      	movs	r2, #10
 800dbfa:	e039      	b.n	800dc70 <_printf_i+0xd8>
 800dbfc:	2973      	cmp	r1, #115	; 0x73
 800dbfe:	f000 809d 	beq.w	800dd3c <_printf_i+0x1a4>
 800dc02:	d808      	bhi.n	800dc16 <_printf_i+0x7e>
 800dc04:	296f      	cmp	r1, #111	; 0x6f
 800dc06:	d020      	beq.n	800dc4a <_printf_i+0xb2>
 800dc08:	2970      	cmp	r1, #112	; 0x70
 800dc0a:	d1dd      	bne.n	800dbc8 <_printf_i+0x30>
 800dc0c:	6823      	ldr	r3, [r4, #0]
 800dc0e:	f043 0320 	orr.w	r3, r3, #32
 800dc12:	6023      	str	r3, [r4, #0]
 800dc14:	e003      	b.n	800dc1e <_printf_i+0x86>
 800dc16:	2975      	cmp	r1, #117	; 0x75
 800dc18:	d017      	beq.n	800dc4a <_printf_i+0xb2>
 800dc1a:	2978      	cmp	r1, #120	; 0x78
 800dc1c:	d1d4      	bne.n	800dbc8 <_printf_i+0x30>
 800dc1e:	2378      	movs	r3, #120	; 0x78
 800dc20:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800dc24:	4864      	ldr	r0, [pc, #400]	; (800ddb8 <_printf_i+0x220>)
 800dc26:	e055      	b.n	800dcd4 <_printf_i+0x13c>
 800dc28:	6813      	ldr	r3, [r2, #0]
 800dc2a:	1d19      	adds	r1, r3, #4
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	6011      	str	r1, [r2, #0]
 800dc30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dc34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800dc38:	2301      	movs	r3, #1
 800dc3a:	e08c      	b.n	800dd56 <_printf_i+0x1be>
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	6011      	str	r1, [r2, #0]
 800dc40:	f010 0f40 	tst.w	r0, #64	; 0x40
 800dc44:	bf18      	it	ne
 800dc46:	b21b      	sxthne	r3, r3
 800dc48:	e7cf      	b.n	800dbea <_printf_i+0x52>
 800dc4a:	6813      	ldr	r3, [r2, #0]
 800dc4c:	6825      	ldr	r5, [r4, #0]
 800dc4e:	1d18      	adds	r0, r3, #4
 800dc50:	6010      	str	r0, [r2, #0]
 800dc52:	0628      	lsls	r0, r5, #24
 800dc54:	d501      	bpl.n	800dc5a <_printf_i+0xc2>
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	e002      	b.n	800dc60 <_printf_i+0xc8>
 800dc5a:	0668      	lsls	r0, r5, #25
 800dc5c:	d5fb      	bpl.n	800dc56 <_printf_i+0xbe>
 800dc5e:	881b      	ldrh	r3, [r3, #0]
 800dc60:	4854      	ldr	r0, [pc, #336]	; (800ddb4 <_printf_i+0x21c>)
 800dc62:	296f      	cmp	r1, #111	; 0x6f
 800dc64:	bf14      	ite	ne
 800dc66:	220a      	movne	r2, #10
 800dc68:	2208      	moveq	r2, #8
 800dc6a:	2100      	movs	r1, #0
 800dc6c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dc70:	6865      	ldr	r5, [r4, #4]
 800dc72:	60a5      	str	r5, [r4, #8]
 800dc74:	2d00      	cmp	r5, #0
 800dc76:	f2c0 8095 	blt.w	800dda4 <_printf_i+0x20c>
 800dc7a:	6821      	ldr	r1, [r4, #0]
 800dc7c:	f021 0104 	bic.w	r1, r1, #4
 800dc80:	6021      	str	r1, [r4, #0]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d13d      	bne.n	800dd02 <_printf_i+0x16a>
 800dc86:	2d00      	cmp	r5, #0
 800dc88:	f040 808e 	bne.w	800dda8 <_printf_i+0x210>
 800dc8c:	4665      	mov	r5, ip
 800dc8e:	2a08      	cmp	r2, #8
 800dc90:	d10b      	bne.n	800dcaa <_printf_i+0x112>
 800dc92:	6823      	ldr	r3, [r4, #0]
 800dc94:	07db      	lsls	r3, r3, #31
 800dc96:	d508      	bpl.n	800dcaa <_printf_i+0x112>
 800dc98:	6923      	ldr	r3, [r4, #16]
 800dc9a:	6862      	ldr	r2, [r4, #4]
 800dc9c:	429a      	cmp	r2, r3
 800dc9e:	bfde      	ittt	le
 800dca0:	2330      	movle	r3, #48	; 0x30
 800dca2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800dca6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800dcaa:	ebac 0305 	sub.w	r3, ip, r5
 800dcae:	6123      	str	r3, [r4, #16]
 800dcb0:	f8cd 8000 	str.w	r8, [sp]
 800dcb4:	463b      	mov	r3, r7
 800dcb6:	aa03      	add	r2, sp, #12
 800dcb8:	4621      	mov	r1, r4
 800dcba:	4630      	mov	r0, r6
 800dcbc:	f7ff fef6 	bl	800daac <_printf_common>
 800dcc0:	3001      	adds	r0, #1
 800dcc2:	d14d      	bne.n	800dd60 <_printf_i+0x1c8>
 800dcc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcc8:	b005      	add	sp, #20
 800dcca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcce:	4839      	ldr	r0, [pc, #228]	; (800ddb4 <_printf_i+0x21c>)
 800dcd0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800dcd4:	6813      	ldr	r3, [r2, #0]
 800dcd6:	6821      	ldr	r1, [r4, #0]
 800dcd8:	1d1d      	adds	r5, r3, #4
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	6015      	str	r5, [r2, #0]
 800dcde:	060a      	lsls	r2, r1, #24
 800dce0:	d50b      	bpl.n	800dcfa <_printf_i+0x162>
 800dce2:	07ca      	lsls	r2, r1, #31
 800dce4:	bf44      	itt	mi
 800dce6:	f041 0120 	orrmi.w	r1, r1, #32
 800dcea:	6021      	strmi	r1, [r4, #0]
 800dcec:	b91b      	cbnz	r3, 800dcf6 <_printf_i+0x15e>
 800dcee:	6822      	ldr	r2, [r4, #0]
 800dcf0:	f022 0220 	bic.w	r2, r2, #32
 800dcf4:	6022      	str	r2, [r4, #0]
 800dcf6:	2210      	movs	r2, #16
 800dcf8:	e7b7      	b.n	800dc6a <_printf_i+0xd2>
 800dcfa:	064d      	lsls	r5, r1, #25
 800dcfc:	bf48      	it	mi
 800dcfe:	b29b      	uxthmi	r3, r3
 800dd00:	e7ef      	b.n	800dce2 <_printf_i+0x14a>
 800dd02:	4665      	mov	r5, ip
 800dd04:	fbb3 f1f2 	udiv	r1, r3, r2
 800dd08:	fb02 3311 	mls	r3, r2, r1, r3
 800dd0c:	5cc3      	ldrb	r3, [r0, r3]
 800dd0e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800dd12:	460b      	mov	r3, r1
 800dd14:	2900      	cmp	r1, #0
 800dd16:	d1f5      	bne.n	800dd04 <_printf_i+0x16c>
 800dd18:	e7b9      	b.n	800dc8e <_printf_i+0xf6>
 800dd1a:	6813      	ldr	r3, [r2, #0]
 800dd1c:	6825      	ldr	r5, [r4, #0]
 800dd1e:	6961      	ldr	r1, [r4, #20]
 800dd20:	1d18      	adds	r0, r3, #4
 800dd22:	6010      	str	r0, [r2, #0]
 800dd24:	0628      	lsls	r0, r5, #24
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	d501      	bpl.n	800dd2e <_printf_i+0x196>
 800dd2a:	6019      	str	r1, [r3, #0]
 800dd2c:	e002      	b.n	800dd34 <_printf_i+0x19c>
 800dd2e:	066a      	lsls	r2, r5, #25
 800dd30:	d5fb      	bpl.n	800dd2a <_printf_i+0x192>
 800dd32:	8019      	strh	r1, [r3, #0]
 800dd34:	2300      	movs	r3, #0
 800dd36:	6123      	str	r3, [r4, #16]
 800dd38:	4665      	mov	r5, ip
 800dd3a:	e7b9      	b.n	800dcb0 <_printf_i+0x118>
 800dd3c:	6813      	ldr	r3, [r2, #0]
 800dd3e:	1d19      	adds	r1, r3, #4
 800dd40:	6011      	str	r1, [r2, #0]
 800dd42:	681d      	ldr	r5, [r3, #0]
 800dd44:	6862      	ldr	r2, [r4, #4]
 800dd46:	2100      	movs	r1, #0
 800dd48:	4628      	mov	r0, r5
 800dd4a:	f7f2 fa49 	bl	80001e0 <memchr>
 800dd4e:	b108      	cbz	r0, 800dd54 <_printf_i+0x1bc>
 800dd50:	1b40      	subs	r0, r0, r5
 800dd52:	6060      	str	r0, [r4, #4]
 800dd54:	6863      	ldr	r3, [r4, #4]
 800dd56:	6123      	str	r3, [r4, #16]
 800dd58:	2300      	movs	r3, #0
 800dd5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd5e:	e7a7      	b.n	800dcb0 <_printf_i+0x118>
 800dd60:	6923      	ldr	r3, [r4, #16]
 800dd62:	462a      	mov	r2, r5
 800dd64:	4639      	mov	r1, r7
 800dd66:	4630      	mov	r0, r6
 800dd68:	47c0      	blx	r8
 800dd6a:	3001      	adds	r0, #1
 800dd6c:	d0aa      	beq.n	800dcc4 <_printf_i+0x12c>
 800dd6e:	6823      	ldr	r3, [r4, #0]
 800dd70:	079b      	lsls	r3, r3, #30
 800dd72:	d413      	bmi.n	800dd9c <_printf_i+0x204>
 800dd74:	68e0      	ldr	r0, [r4, #12]
 800dd76:	9b03      	ldr	r3, [sp, #12]
 800dd78:	4298      	cmp	r0, r3
 800dd7a:	bfb8      	it	lt
 800dd7c:	4618      	movlt	r0, r3
 800dd7e:	e7a3      	b.n	800dcc8 <_printf_i+0x130>
 800dd80:	2301      	movs	r3, #1
 800dd82:	464a      	mov	r2, r9
 800dd84:	4639      	mov	r1, r7
 800dd86:	4630      	mov	r0, r6
 800dd88:	47c0      	blx	r8
 800dd8a:	3001      	adds	r0, #1
 800dd8c:	d09a      	beq.n	800dcc4 <_printf_i+0x12c>
 800dd8e:	3501      	adds	r5, #1
 800dd90:	68e3      	ldr	r3, [r4, #12]
 800dd92:	9a03      	ldr	r2, [sp, #12]
 800dd94:	1a9b      	subs	r3, r3, r2
 800dd96:	42ab      	cmp	r3, r5
 800dd98:	dcf2      	bgt.n	800dd80 <_printf_i+0x1e8>
 800dd9a:	e7eb      	b.n	800dd74 <_printf_i+0x1dc>
 800dd9c:	2500      	movs	r5, #0
 800dd9e:	f104 0919 	add.w	r9, r4, #25
 800dda2:	e7f5      	b.n	800dd90 <_printf_i+0x1f8>
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d1ac      	bne.n	800dd02 <_printf_i+0x16a>
 800dda8:	7803      	ldrb	r3, [r0, #0]
 800ddaa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ddb2:	e76c      	b.n	800dc8e <_printf_i+0xf6>
 800ddb4:	08013422 	.word	0x08013422
 800ddb8:	08013433 	.word	0x08013433

0800ddbc <_scanf_float>:
 800ddbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddc0:	469a      	mov	sl, r3
 800ddc2:	688b      	ldr	r3, [r1, #8]
 800ddc4:	4616      	mov	r6, r2
 800ddc6:	1e5a      	subs	r2, r3, #1
 800ddc8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ddcc:	b087      	sub	sp, #28
 800ddce:	bf83      	ittte	hi
 800ddd0:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 800ddd4:	189b      	addhi	r3, r3, r2
 800ddd6:	9301      	strhi	r3, [sp, #4]
 800ddd8:	2300      	movls	r3, #0
 800ddda:	bf86      	itte	hi
 800dddc:	f240 135d 	movwhi	r3, #349	; 0x15d
 800dde0:	608b      	strhi	r3, [r1, #8]
 800dde2:	9301      	strls	r3, [sp, #4]
 800dde4:	680b      	ldr	r3, [r1, #0]
 800dde6:	4688      	mov	r8, r1
 800dde8:	f04f 0b00 	mov.w	fp, #0
 800ddec:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ddf0:	f848 3b1c 	str.w	r3, [r8], #28
 800ddf4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 800ddf8:	4607      	mov	r7, r0
 800ddfa:	460c      	mov	r4, r1
 800ddfc:	4645      	mov	r5, r8
 800ddfe:	465a      	mov	r2, fp
 800de00:	46d9      	mov	r9, fp
 800de02:	f8cd b008 	str.w	fp, [sp, #8]
 800de06:	68a1      	ldr	r1, [r4, #8]
 800de08:	b181      	cbz	r1, 800de2c <_scanf_float+0x70>
 800de0a:	6833      	ldr	r3, [r6, #0]
 800de0c:	781b      	ldrb	r3, [r3, #0]
 800de0e:	2b49      	cmp	r3, #73	; 0x49
 800de10:	d071      	beq.n	800def6 <_scanf_float+0x13a>
 800de12:	d84d      	bhi.n	800deb0 <_scanf_float+0xf4>
 800de14:	2b39      	cmp	r3, #57	; 0x39
 800de16:	d840      	bhi.n	800de9a <_scanf_float+0xde>
 800de18:	2b31      	cmp	r3, #49	; 0x31
 800de1a:	f080 8088 	bcs.w	800df2e <_scanf_float+0x172>
 800de1e:	2b2d      	cmp	r3, #45	; 0x2d
 800de20:	f000 8090 	beq.w	800df44 <_scanf_float+0x188>
 800de24:	d815      	bhi.n	800de52 <_scanf_float+0x96>
 800de26:	2b2b      	cmp	r3, #43	; 0x2b
 800de28:	f000 808c 	beq.w	800df44 <_scanf_float+0x188>
 800de2c:	f1b9 0f00 	cmp.w	r9, #0
 800de30:	d003      	beq.n	800de3a <_scanf_float+0x7e>
 800de32:	6823      	ldr	r3, [r4, #0]
 800de34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de38:	6023      	str	r3, [r4, #0]
 800de3a:	3a01      	subs	r2, #1
 800de3c:	2a01      	cmp	r2, #1
 800de3e:	f200 80ea 	bhi.w	800e016 <_scanf_float+0x25a>
 800de42:	4545      	cmp	r5, r8
 800de44:	f200 80dc 	bhi.w	800e000 <_scanf_float+0x244>
 800de48:	2601      	movs	r6, #1
 800de4a:	4630      	mov	r0, r6
 800de4c:	b007      	add	sp, #28
 800de4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de52:	2b2e      	cmp	r3, #46	; 0x2e
 800de54:	f000 809f 	beq.w	800df96 <_scanf_float+0x1da>
 800de58:	2b30      	cmp	r3, #48	; 0x30
 800de5a:	d1e7      	bne.n	800de2c <_scanf_float+0x70>
 800de5c:	6820      	ldr	r0, [r4, #0]
 800de5e:	f410 7f80 	tst.w	r0, #256	; 0x100
 800de62:	d064      	beq.n	800df2e <_scanf_float+0x172>
 800de64:	9b01      	ldr	r3, [sp, #4]
 800de66:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800de6a:	6020      	str	r0, [r4, #0]
 800de6c:	f109 0901 	add.w	r9, r9, #1
 800de70:	b11b      	cbz	r3, 800de7a <_scanf_float+0xbe>
 800de72:	3b01      	subs	r3, #1
 800de74:	3101      	adds	r1, #1
 800de76:	9301      	str	r3, [sp, #4]
 800de78:	60a1      	str	r1, [r4, #8]
 800de7a:	68a3      	ldr	r3, [r4, #8]
 800de7c:	3b01      	subs	r3, #1
 800de7e:	60a3      	str	r3, [r4, #8]
 800de80:	6923      	ldr	r3, [r4, #16]
 800de82:	3301      	adds	r3, #1
 800de84:	6123      	str	r3, [r4, #16]
 800de86:	6873      	ldr	r3, [r6, #4]
 800de88:	3b01      	subs	r3, #1
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	6073      	str	r3, [r6, #4]
 800de8e:	f340 80ac 	ble.w	800dfea <_scanf_float+0x22e>
 800de92:	6833      	ldr	r3, [r6, #0]
 800de94:	3301      	adds	r3, #1
 800de96:	6033      	str	r3, [r6, #0]
 800de98:	e7b5      	b.n	800de06 <_scanf_float+0x4a>
 800de9a:	2b45      	cmp	r3, #69	; 0x45
 800de9c:	f000 8085 	beq.w	800dfaa <_scanf_float+0x1ee>
 800dea0:	2b46      	cmp	r3, #70	; 0x46
 800dea2:	d06a      	beq.n	800df7a <_scanf_float+0x1be>
 800dea4:	2b41      	cmp	r3, #65	; 0x41
 800dea6:	d1c1      	bne.n	800de2c <_scanf_float+0x70>
 800dea8:	2a01      	cmp	r2, #1
 800deaa:	d1bf      	bne.n	800de2c <_scanf_float+0x70>
 800deac:	2202      	movs	r2, #2
 800deae:	e046      	b.n	800df3e <_scanf_float+0x182>
 800deb0:	2b65      	cmp	r3, #101	; 0x65
 800deb2:	d07a      	beq.n	800dfaa <_scanf_float+0x1ee>
 800deb4:	d818      	bhi.n	800dee8 <_scanf_float+0x12c>
 800deb6:	2b54      	cmp	r3, #84	; 0x54
 800deb8:	d066      	beq.n	800df88 <_scanf_float+0x1cc>
 800deba:	d811      	bhi.n	800dee0 <_scanf_float+0x124>
 800debc:	2b4e      	cmp	r3, #78	; 0x4e
 800debe:	d1b5      	bne.n	800de2c <_scanf_float+0x70>
 800dec0:	2a00      	cmp	r2, #0
 800dec2:	d146      	bne.n	800df52 <_scanf_float+0x196>
 800dec4:	f1b9 0f00 	cmp.w	r9, #0
 800dec8:	d145      	bne.n	800df56 <_scanf_float+0x19a>
 800deca:	6821      	ldr	r1, [r4, #0]
 800decc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800ded0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800ded4:	d13f      	bne.n	800df56 <_scanf_float+0x19a>
 800ded6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800deda:	6021      	str	r1, [r4, #0]
 800dedc:	2201      	movs	r2, #1
 800dede:	e02e      	b.n	800df3e <_scanf_float+0x182>
 800dee0:	2b59      	cmp	r3, #89	; 0x59
 800dee2:	d01e      	beq.n	800df22 <_scanf_float+0x166>
 800dee4:	2b61      	cmp	r3, #97	; 0x61
 800dee6:	e7de      	b.n	800dea6 <_scanf_float+0xea>
 800dee8:	2b6e      	cmp	r3, #110	; 0x6e
 800deea:	d0e9      	beq.n	800dec0 <_scanf_float+0x104>
 800deec:	d815      	bhi.n	800df1a <_scanf_float+0x15e>
 800deee:	2b66      	cmp	r3, #102	; 0x66
 800def0:	d043      	beq.n	800df7a <_scanf_float+0x1be>
 800def2:	2b69      	cmp	r3, #105	; 0x69
 800def4:	d19a      	bne.n	800de2c <_scanf_float+0x70>
 800def6:	f1bb 0f00 	cmp.w	fp, #0
 800defa:	d138      	bne.n	800df6e <_scanf_float+0x1b2>
 800defc:	f1b9 0f00 	cmp.w	r9, #0
 800df00:	d197      	bne.n	800de32 <_scanf_float+0x76>
 800df02:	6821      	ldr	r1, [r4, #0]
 800df04:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800df08:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 800df0c:	d195      	bne.n	800de3a <_scanf_float+0x7e>
 800df0e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800df12:	6021      	str	r1, [r4, #0]
 800df14:	f04f 0b01 	mov.w	fp, #1
 800df18:	e011      	b.n	800df3e <_scanf_float+0x182>
 800df1a:	2b74      	cmp	r3, #116	; 0x74
 800df1c:	d034      	beq.n	800df88 <_scanf_float+0x1cc>
 800df1e:	2b79      	cmp	r3, #121	; 0x79
 800df20:	d184      	bne.n	800de2c <_scanf_float+0x70>
 800df22:	f1bb 0f07 	cmp.w	fp, #7
 800df26:	d181      	bne.n	800de2c <_scanf_float+0x70>
 800df28:	f04f 0b08 	mov.w	fp, #8
 800df2c:	e007      	b.n	800df3e <_scanf_float+0x182>
 800df2e:	eb12 0f0b 	cmn.w	r2, fp
 800df32:	f47f af7b 	bne.w	800de2c <_scanf_float+0x70>
 800df36:	6821      	ldr	r1, [r4, #0]
 800df38:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 800df3c:	6021      	str	r1, [r4, #0]
 800df3e:	702b      	strb	r3, [r5, #0]
 800df40:	3501      	adds	r5, #1
 800df42:	e79a      	b.n	800de7a <_scanf_float+0xbe>
 800df44:	6821      	ldr	r1, [r4, #0]
 800df46:	0608      	lsls	r0, r1, #24
 800df48:	f57f af70 	bpl.w	800de2c <_scanf_float+0x70>
 800df4c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800df50:	e7f4      	b.n	800df3c <_scanf_float+0x180>
 800df52:	2a02      	cmp	r2, #2
 800df54:	d047      	beq.n	800dfe6 <_scanf_float+0x22a>
 800df56:	f1bb 0f01 	cmp.w	fp, #1
 800df5a:	d003      	beq.n	800df64 <_scanf_float+0x1a8>
 800df5c:	f1bb 0f04 	cmp.w	fp, #4
 800df60:	f47f af64 	bne.w	800de2c <_scanf_float+0x70>
 800df64:	f10b 0b01 	add.w	fp, fp, #1
 800df68:	fa5f fb8b 	uxtb.w	fp, fp
 800df6c:	e7e7      	b.n	800df3e <_scanf_float+0x182>
 800df6e:	f1bb 0f03 	cmp.w	fp, #3
 800df72:	d0f7      	beq.n	800df64 <_scanf_float+0x1a8>
 800df74:	f1bb 0f05 	cmp.w	fp, #5
 800df78:	e7f2      	b.n	800df60 <_scanf_float+0x1a4>
 800df7a:	f1bb 0f02 	cmp.w	fp, #2
 800df7e:	f47f af55 	bne.w	800de2c <_scanf_float+0x70>
 800df82:	f04f 0b03 	mov.w	fp, #3
 800df86:	e7da      	b.n	800df3e <_scanf_float+0x182>
 800df88:	f1bb 0f06 	cmp.w	fp, #6
 800df8c:	f47f af4e 	bne.w	800de2c <_scanf_float+0x70>
 800df90:	f04f 0b07 	mov.w	fp, #7
 800df94:	e7d3      	b.n	800df3e <_scanf_float+0x182>
 800df96:	6821      	ldr	r1, [r4, #0]
 800df98:	0588      	lsls	r0, r1, #22
 800df9a:	f57f af47 	bpl.w	800de2c <_scanf_float+0x70>
 800df9e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800dfa2:	6021      	str	r1, [r4, #0]
 800dfa4:	f8cd 9008 	str.w	r9, [sp, #8]
 800dfa8:	e7c9      	b.n	800df3e <_scanf_float+0x182>
 800dfaa:	6821      	ldr	r1, [r4, #0]
 800dfac:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800dfb0:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800dfb4:	d006      	beq.n	800dfc4 <_scanf_float+0x208>
 800dfb6:	0548      	lsls	r0, r1, #21
 800dfb8:	f57f af38 	bpl.w	800de2c <_scanf_float+0x70>
 800dfbc:	f1b9 0f00 	cmp.w	r9, #0
 800dfc0:	f43f af3b 	beq.w	800de3a <_scanf_float+0x7e>
 800dfc4:	0588      	lsls	r0, r1, #22
 800dfc6:	bf58      	it	pl
 800dfc8:	9802      	ldrpl	r0, [sp, #8]
 800dfca:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800dfce:	bf58      	it	pl
 800dfd0:	eba9 0000 	subpl.w	r0, r9, r0
 800dfd4:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 800dfd8:	bf58      	it	pl
 800dfda:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800dfde:	6021      	str	r1, [r4, #0]
 800dfe0:	f04f 0900 	mov.w	r9, #0
 800dfe4:	e7ab      	b.n	800df3e <_scanf_float+0x182>
 800dfe6:	2203      	movs	r2, #3
 800dfe8:	e7a9      	b.n	800df3e <_scanf_float+0x182>
 800dfea:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dfee:	9205      	str	r2, [sp, #20]
 800dff0:	4631      	mov	r1, r6
 800dff2:	4638      	mov	r0, r7
 800dff4:	4798      	blx	r3
 800dff6:	9a05      	ldr	r2, [sp, #20]
 800dff8:	2800      	cmp	r0, #0
 800dffa:	f43f af04 	beq.w	800de06 <_scanf_float+0x4a>
 800dffe:	e715      	b.n	800de2c <_scanf_float+0x70>
 800e000:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e004:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e008:	4632      	mov	r2, r6
 800e00a:	4638      	mov	r0, r7
 800e00c:	4798      	blx	r3
 800e00e:	6923      	ldr	r3, [r4, #16]
 800e010:	3b01      	subs	r3, #1
 800e012:	6123      	str	r3, [r4, #16]
 800e014:	e715      	b.n	800de42 <_scanf_float+0x86>
 800e016:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800e01a:	2b06      	cmp	r3, #6
 800e01c:	d80a      	bhi.n	800e034 <_scanf_float+0x278>
 800e01e:	f1bb 0f02 	cmp.w	fp, #2
 800e022:	d968      	bls.n	800e0f6 <_scanf_float+0x33a>
 800e024:	f1ab 0b03 	sub.w	fp, fp, #3
 800e028:	fa5f fb8b 	uxtb.w	fp, fp
 800e02c:	eba5 0b0b 	sub.w	fp, r5, fp
 800e030:	455d      	cmp	r5, fp
 800e032:	d14b      	bne.n	800e0cc <_scanf_float+0x310>
 800e034:	6823      	ldr	r3, [r4, #0]
 800e036:	05da      	lsls	r2, r3, #23
 800e038:	d51f      	bpl.n	800e07a <_scanf_float+0x2be>
 800e03a:	055b      	lsls	r3, r3, #21
 800e03c:	d468      	bmi.n	800e110 <_scanf_float+0x354>
 800e03e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800e042:	6923      	ldr	r3, [r4, #16]
 800e044:	2965      	cmp	r1, #101	; 0x65
 800e046:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800e04a:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 800e04e:	6123      	str	r3, [r4, #16]
 800e050:	d00d      	beq.n	800e06e <_scanf_float+0x2b2>
 800e052:	2945      	cmp	r1, #69	; 0x45
 800e054:	d00b      	beq.n	800e06e <_scanf_float+0x2b2>
 800e056:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e05a:	4632      	mov	r2, r6
 800e05c:	4638      	mov	r0, r7
 800e05e:	4798      	blx	r3
 800e060:	6923      	ldr	r3, [r4, #16]
 800e062:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800e066:	3b01      	subs	r3, #1
 800e068:	f1a5 0b02 	sub.w	fp, r5, #2
 800e06c:	6123      	str	r3, [r4, #16]
 800e06e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e072:	4632      	mov	r2, r6
 800e074:	4638      	mov	r0, r7
 800e076:	4798      	blx	r3
 800e078:	465d      	mov	r5, fp
 800e07a:	6826      	ldr	r6, [r4, #0]
 800e07c:	f016 0610 	ands.w	r6, r6, #16
 800e080:	d17a      	bne.n	800e178 <_scanf_float+0x3bc>
 800e082:	702e      	strb	r6, [r5, #0]
 800e084:	6823      	ldr	r3, [r4, #0]
 800e086:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800e08a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e08e:	d142      	bne.n	800e116 <_scanf_float+0x35a>
 800e090:	9b02      	ldr	r3, [sp, #8]
 800e092:	eba9 0303 	sub.w	r3, r9, r3
 800e096:	425a      	negs	r2, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d149      	bne.n	800e130 <_scanf_float+0x374>
 800e09c:	2200      	movs	r2, #0
 800e09e:	4641      	mov	r1, r8
 800e0a0:	4638      	mov	r0, r7
 800e0a2:	f000 fee9 	bl	800ee78 <_strtod_r>
 800e0a6:	6825      	ldr	r5, [r4, #0]
 800e0a8:	f8da 3000 	ldr.w	r3, [sl]
 800e0ac:	f015 0f02 	tst.w	r5, #2
 800e0b0:	f103 0204 	add.w	r2, r3, #4
 800e0b4:	ec59 8b10 	vmov	r8, r9, d0
 800e0b8:	f8ca 2000 	str.w	r2, [sl]
 800e0bc:	d043      	beq.n	800e146 <_scanf_float+0x38a>
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	e9c3 8900 	strd	r8, r9, [r3]
 800e0c4:	68e3      	ldr	r3, [r4, #12]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	60e3      	str	r3, [r4, #12]
 800e0ca:	e6be      	b.n	800de4a <_scanf_float+0x8e>
 800e0cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0d0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e0d4:	4632      	mov	r2, r6
 800e0d6:	4638      	mov	r0, r7
 800e0d8:	4798      	blx	r3
 800e0da:	6923      	ldr	r3, [r4, #16]
 800e0dc:	3b01      	subs	r3, #1
 800e0de:	6123      	str	r3, [r4, #16]
 800e0e0:	e7a6      	b.n	800e030 <_scanf_float+0x274>
 800e0e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e0e6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e0ea:	4632      	mov	r2, r6
 800e0ec:	4638      	mov	r0, r7
 800e0ee:	4798      	blx	r3
 800e0f0:	6923      	ldr	r3, [r4, #16]
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	6123      	str	r3, [r4, #16]
 800e0f6:	4545      	cmp	r5, r8
 800e0f8:	d8f3      	bhi.n	800e0e2 <_scanf_float+0x326>
 800e0fa:	e6a5      	b.n	800de48 <_scanf_float+0x8c>
 800e0fc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800e100:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 800e104:	4632      	mov	r2, r6
 800e106:	4638      	mov	r0, r7
 800e108:	4798      	blx	r3
 800e10a:	6923      	ldr	r3, [r4, #16]
 800e10c:	3b01      	subs	r3, #1
 800e10e:	6123      	str	r3, [r4, #16]
 800e110:	4545      	cmp	r5, r8
 800e112:	d8f3      	bhi.n	800e0fc <_scanf_float+0x340>
 800e114:	e698      	b.n	800de48 <_scanf_float+0x8c>
 800e116:	9b03      	ldr	r3, [sp, #12]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d0bf      	beq.n	800e09c <_scanf_float+0x2e0>
 800e11c:	9904      	ldr	r1, [sp, #16]
 800e11e:	230a      	movs	r3, #10
 800e120:	4632      	mov	r2, r6
 800e122:	3101      	adds	r1, #1
 800e124:	4638      	mov	r0, r7
 800e126:	f000 ff33 	bl	800ef90 <_strtol_r>
 800e12a:	9b03      	ldr	r3, [sp, #12]
 800e12c:	9d04      	ldr	r5, [sp, #16]
 800e12e:	1ac2      	subs	r2, r0, r3
 800e130:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800e134:	429d      	cmp	r5, r3
 800e136:	bf28      	it	cs
 800e138:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 800e13c:	490f      	ldr	r1, [pc, #60]	; (800e17c <_scanf_float+0x3c0>)
 800e13e:	4628      	mov	r0, r5
 800e140:	f000 f858 	bl	800e1f4 <siprintf>
 800e144:	e7aa      	b.n	800e09c <_scanf_float+0x2e0>
 800e146:	f015 0504 	ands.w	r5, r5, #4
 800e14a:	d1b8      	bne.n	800e0be <_scanf_float+0x302>
 800e14c:	681f      	ldr	r7, [r3, #0]
 800e14e:	ee10 2a10 	vmov	r2, s0
 800e152:	464b      	mov	r3, r9
 800e154:	ee10 0a10 	vmov	r0, s0
 800e158:	4649      	mov	r1, r9
 800e15a:	f7f2 fce7 	bl	8000b2c <__aeabi_dcmpun>
 800e15e:	b128      	cbz	r0, 800e16c <_scanf_float+0x3b0>
 800e160:	4628      	mov	r0, r5
 800e162:	f000 f80d 	bl	800e180 <nanf>
 800e166:	ed87 0a00 	vstr	s0, [r7]
 800e16a:	e7ab      	b.n	800e0c4 <_scanf_float+0x308>
 800e16c:	4640      	mov	r0, r8
 800e16e:	4649      	mov	r1, r9
 800e170:	f7f2 fd3a 	bl	8000be8 <__aeabi_d2f>
 800e174:	6038      	str	r0, [r7, #0]
 800e176:	e7a5      	b.n	800e0c4 <_scanf_float+0x308>
 800e178:	2600      	movs	r6, #0
 800e17a:	e666      	b.n	800de4a <_scanf_float+0x8e>
 800e17c:	08013444 	.word	0x08013444

0800e180 <nanf>:
 800e180:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e188 <nanf+0x8>
 800e184:	4770      	bx	lr
 800e186:	bf00      	nop
 800e188:	7fc00000 	.word	0x7fc00000

0800e18c <sniprintf>:
 800e18c:	b40c      	push	{r2, r3}
 800e18e:	b530      	push	{r4, r5, lr}
 800e190:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <sniprintf+0x64>)
 800e192:	1e0c      	subs	r4, r1, #0
 800e194:	b09d      	sub	sp, #116	; 0x74
 800e196:	681d      	ldr	r5, [r3, #0]
 800e198:	da08      	bge.n	800e1ac <sniprintf+0x20>
 800e19a:	238b      	movs	r3, #139	; 0x8b
 800e19c:	602b      	str	r3, [r5, #0]
 800e19e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e1a2:	b01d      	add	sp, #116	; 0x74
 800e1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e1a8:	b002      	add	sp, #8
 800e1aa:	4770      	bx	lr
 800e1ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e1b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e1b4:	bf14      	ite	ne
 800e1b6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e1ba:	4623      	moveq	r3, r4
 800e1bc:	9304      	str	r3, [sp, #16]
 800e1be:	9307      	str	r3, [sp, #28]
 800e1c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e1c4:	9002      	str	r0, [sp, #8]
 800e1c6:	9006      	str	r0, [sp, #24]
 800e1c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e1cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e1ce:	ab21      	add	r3, sp, #132	; 0x84
 800e1d0:	a902      	add	r1, sp, #8
 800e1d2:	4628      	mov	r0, r5
 800e1d4:	9301      	str	r3, [sp, #4]
 800e1d6:	f002 fda1 	bl	8010d1c <_svfiprintf_r>
 800e1da:	1c43      	adds	r3, r0, #1
 800e1dc:	bfbc      	itt	lt
 800e1de:	238b      	movlt	r3, #139	; 0x8b
 800e1e0:	602b      	strlt	r3, [r5, #0]
 800e1e2:	2c00      	cmp	r4, #0
 800e1e4:	d0dd      	beq.n	800e1a2 <sniprintf+0x16>
 800e1e6:	9b02      	ldr	r3, [sp, #8]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	701a      	strb	r2, [r3, #0]
 800e1ec:	e7d9      	b.n	800e1a2 <sniprintf+0x16>
 800e1ee:	bf00      	nop
 800e1f0:	20000044 	.word	0x20000044

0800e1f4 <siprintf>:
 800e1f4:	b40e      	push	{r1, r2, r3}
 800e1f6:	b500      	push	{lr}
 800e1f8:	b09c      	sub	sp, #112	; 0x70
 800e1fa:	ab1d      	add	r3, sp, #116	; 0x74
 800e1fc:	9002      	str	r0, [sp, #8]
 800e1fe:	9006      	str	r0, [sp, #24]
 800e200:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e204:	4809      	ldr	r0, [pc, #36]	; (800e22c <siprintf+0x38>)
 800e206:	9107      	str	r1, [sp, #28]
 800e208:	9104      	str	r1, [sp, #16]
 800e20a:	4909      	ldr	r1, [pc, #36]	; (800e230 <siprintf+0x3c>)
 800e20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e210:	9105      	str	r1, [sp, #20]
 800e212:	6800      	ldr	r0, [r0, #0]
 800e214:	9301      	str	r3, [sp, #4]
 800e216:	a902      	add	r1, sp, #8
 800e218:	f002 fd80 	bl	8010d1c <_svfiprintf_r>
 800e21c:	9b02      	ldr	r3, [sp, #8]
 800e21e:	2200      	movs	r2, #0
 800e220:	701a      	strb	r2, [r3, #0]
 800e222:	b01c      	add	sp, #112	; 0x70
 800e224:	f85d eb04 	ldr.w	lr, [sp], #4
 800e228:	b003      	add	sp, #12
 800e22a:	4770      	bx	lr
 800e22c:	20000044 	.word	0x20000044
 800e230:	ffff0208 	.word	0xffff0208

0800e234 <strcat>:
 800e234:	b510      	push	{r4, lr}
 800e236:	4603      	mov	r3, r0
 800e238:	781a      	ldrb	r2, [r3, #0]
 800e23a:	1c5c      	adds	r4, r3, #1
 800e23c:	b93a      	cbnz	r2, 800e24e <strcat+0x1a>
 800e23e:	3b01      	subs	r3, #1
 800e240:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e244:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e248:	2a00      	cmp	r2, #0
 800e24a:	d1f9      	bne.n	800e240 <strcat+0xc>
 800e24c:	bd10      	pop	{r4, pc}
 800e24e:	4623      	mov	r3, r4
 800e250:	e7f2      	b.n	800e238 <strcat+0x4>

0800e252 <sulp>:
 800e252:	b570      	push	{r4, r5, r6, lr}
 800e254:	4604      	mov	r4, r0
 800e256:	460d      	mov	r5, r1
 800e258:	ec45 4b10 	vmov	d0, r4, r5
 800e25c:	4616      	mov	r6, r2
 800e25e:	f002 fb19 	bl	8010894 <__ulp>
 800e262:	ec51 0b10 	vmov	r0, r1, d0
 800e266:	b17e      	cbz	r6, 800e288 <sulp+0x36>
 800e268:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e26c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e270:	2b00      	cmp	r3, #0
 800e272:	dd09      	ble.n	800e288 <sulp+0x36>
 800e274:	051b      	lsls	r3, r3, #20
 800e276:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e27a:	2400      	movs	r4, #0
 800e27c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e280:	4622      	mov	r2, r4
 800e282:	462b      	mov	r3, r5
 800e284:	f7f2 f9b8 	bl	80005f8 <__aeabi_dmul>
 800e288:	bd70      	pop	{r4, r5, r6, pc}
 800e28a:	0000      	movs	r0, r0
 800e28c:	0000      	movs	r0, r0
	...

0800e290 <_strtod_l>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	461f      	mov	r7, r3
 800e296:	b0a1      	sub	sp, #132	; 0x84
 800e298:	2300      	movs	r3, #0
 800e29a:	4681      	mov	r9, r0
 800e29c:	4638      	mov	r0, r7
 800e29e:	460e      	mov	r6, r1
 800e2a0:	9217      	str	r2, [sp, #92]	; 0x5c
 800e2a2:	931c      	str	r3, [sp, #112]	; 0x70
 800e2a4:	f001 fff5 	bl	8010292 <__localeconv_l>
 800e2a8:	4680      	mov	r8, r0
 800e2aa:	6800      	ldr	r0, [r0, #0]
 800e2ac:	f7f1 ff90 	bl	80001d0 <strlen>
 800e2b0:	f04f 0a00 	mov.w	sl, #0
 800e2b4:	4604      	mov	r4, r0
 800e2b6:	f04f 0b00 	mov.w	fp, #0
 800e2ba:	961b      	str	r6, [sp, #108]	; 0x6c
 800e2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e2be:	781a      	ldrb	r2, [r3, #0]
 800e2c0:	2a0d      	cmp	r2, #13
 800e2c2:	d832      	bhi.n	800e32a <_strtod_l+0x9a>
 800e2c4:	2a09      	cmp	r2, #9
 800e2c6:	d236      	bcs.n	800e336 <_strtod_l+0xa6>
 800e2c8:	2a00      	cmp	r2, #0
 800e2ca:	d03e      	beq.n	800e34a <_strtod_l+0xba>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	930d      	str	r3, [sp, #52]	; 0x34
 800e2d0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e2d2:	782b      	ldrb	r3, [r5, #0]
 800e2d4:	2b30      	cmp	r3, #48	; 0x30
 800e2d6:	f040 80ac 	bne.w	800e432 <_strtod_l+0x1a2>
 800e2da:	786b      	ldrb	r3, [r5, #1]
 800e2dc:	2b58      	cmp	r3, #88	; 0x58
 800e2de:	d001      	beq.n	800e2e4 <_strtod_l+0x54>
 800e2e0:	2b78      	cmp	r3, #120	; 0x78
 800e2e2:	d167      	bne.n	800e3b4 <_strtod_l+0x124>
 800e2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2e6:	9301      	str	r3, [sp, #4]
 800e2e8:	ab1c      	add	r3, sp, #112	; 0x70
 800e2ea:	9300      	str	r3, [sp, #0]
 800e2ec:	9702      	str	r7, [sp, #8]
 800e2ee:	ab1d      	add	r3, sp, #116	; 0x74
 800e2f0:	4a88      	ldr	r2, [pc, #544]	; (800e514 <_strtod_l+0x284>)
 800e2f2:	a91b      	add	r1, sp, #108	; 0x6c
 800e2f4:	4648      	mov	r0, r9
 800e2f6:	f001 fcf2 	bl	800fcde <__gethex>
 800e2fa:	f010 0407 	ands.w	r4, r0, #7
 800e2fe:	4606      	mov	r6, r0
 800e300:	d005      	beq.n	800e30e <_strtod_l+0x7e>
 800e302:	2c06      	cmp	r4, #6
 800e304:	d12b      	bne.n	800e35e <_strtod_l+0xce>
 800e306:	3501      	adds	r5, #1
 800e308:	2300      	movs	r3, #0
 800e30a:	951b      	str	r5, [sp, #108]	; 0x6c
 800e30c:	930d      	str	r3, [sp, #52]	; 0x34
 800e30e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e310:	2b00      	cmp	r3, #0
 800e312:	f040 859a 	bne.w	800ee4a <_strtod_l+0xbba>
 800e316:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e318:	b1e3      	cbz	r3, 800e354 <_strtod_l+0xc4>
 800e31a:	4652      	mov	r2, sl
 800e31c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e320:	ec43 2b10 	vmov	d0, r2, r3
 800e324:	b021      	add	sp, #132	; 0x84
 800e326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e32a:	2a2b      	cmp	r2, #43	; 0x2b
 800e32c:	d015      	beq.n	800e35a <_strtod_l+0xca>
 800e32e:	2a2d      	cmp	r2, #45	; 0x2d
 800e330:	d004      	beq.n	800e33c <_strtod_l+0xac>
 800e332:	2a20      	cmp	r2, #32
 800e334:	d1ca      	bne.n	800e2cc <_strtod_l+0x3c>
 800e336:	3301      	adds	r3, #1
 800e338:	931b      	str	r3, [sp, #108]	; 0x6c
 800e33a:	e7bf      	b.n	800e2bc <_strtod_l+0x2c>
 800e33c:	2201      	movs	r2, #1
 800e33e:	920d      	str	r2, [sp, #52]	; 0x34
 800e340:	1c5a      	adds	r2, r3, #1
 800e342:	921b      	str	r2, [sp, #108]	; 0x6c
 800e344:	785b      	ldrb	r3, [r3, #1]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d1c2      	bne.n	800e2d0 <_strtod_l+0x40>
 800e34a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e34c:	961b      	str	r6, [sp, #108]	; 0x6c
 800e34e:	2b00      	cmp	r3, #0
 800e350:	f040 8579 	bne.w	800ee46 <_strtod_l+0xbb6>
 800e354:	4652      	mov	r2, sl
 800e356:	465b      	mov	r3, fp
 800e358:	e7e2      	b.n	800e320 <_strtod_l+0x90>
 800e35a:	2200      	movs	r2, #0
 800e35c:	e7ef      	b.n	800e33e <_strtod_l+0xae>
 800e35e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e360:	b13a      	cbz	r2, 800e372 <_strtod_l+0xe2>
 800e362:	2135      	movs	r1, #53	; 0x35
 800e364:	a81e      	add	r0, sp, #120	; 0x78
 800e366:	f002 fb8d 	bl	8010a84 <__copybits>
 800e36a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e36c:	4648      	mov	r0, r9
 800e36e:	f001 fffa 	bl	8010366 <_Bfree>
 800e372:	3c01      	subs	r4, #1
 800e374:	2c04      	cmp	r4, #4
 800e376:	d806      	bhi.n	800e386 <_strtod_l+0xf6>
 800e378:	e8df f004 	tbb	[pc, r4]
 800e37c:	1714030a 	.word	0x1714030a
 800e380:	0a          	.byte	0x0a
 800e381:	00          	.byte	0x00
 800e382:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e386:	0730      	lsls	r0, r6, #28
 800e388:	d5c1      	bpl.n	800e30e <_strtod_l+0x7e>
 800e38a:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e38e:	e7be      	b.n	800e30e <_strtod_l+0x7e>
 800e390:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e394:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e396:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e39a:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e39e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e3a2:	e7f0      	b.n	800e386 <_strtod_l+0xf6>
 800e3a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e518 <_strtod_l+0x288>
 800e3a8:	e7ed      	b.n	800e386 <_strtod_l+0xf6>
 800e3aa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e3ae:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e3b2:	e7e8      	b.n	800e386 <_strtod_l+0xf6>
 800e3b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e3b6:	1c5a      	adds	r2, r3, #1
 800e3b8:	921b      	str	r2, [sp, #108]	; 0x6c
 800e3ba:	785b      	ldrb	r3, [r3, #1]
 800e3bc:	2b30      	cmp	r3, #48	; 0x30
 800e3be:	d0f9      	beq.n	800e3b4 <_strtod_l+0x124>
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d0a4      	beq.n	800e30e <_strtod_l+0x7e>
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	2500      	movs	r5, #0
 800e3c8:	9306      	str	r3, [sp, #24]
 800e3ca:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e3cc:	9308      	str	r3, [sp, #32]
 800e3ce:	9507      	str	r5, [sp, #28]
 800e3d0:	9505      	str	r5, [sp, #20]
 800e3d2:	220a      	movs	r2, #10
 800e3d4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e3d6:	7807      	ldrb	r7, [r0, #0]
 800e3d8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e3dc:	b2d9      	uxtb	r1, r3
 800e3de:	2909      	cmp	r1, #9
 800e3e0:	d929      	bls.n	800e436 <_strtod_l+0x1a6>
 800e3e2:	4622      	mov	r2, r4
 800e3e4:	f8d8 1000 	ldr.w	r1, [r8]
 800e3e8:	f002 fda0 	bl	8010f2c <strncmp>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d031      	beq.n	800e454 <_strtod_l+0x1c4>
 800e3f0:	2000      	movs	r0, #0
 800e3f2:	9c05      	ldr	r4, [sp, #20]
 800e3f4:	9004      	str	r0, [sp, #16]
 800e3f6:	463b      	mov	r3, r7
 800e3f8:	4602      	mov	r2, r0
 800e3fa:	2b65      	cmp	r3, #101	; 0x65
 800e3fc:	d001      	beq.n	800e402 <_strtod_l+0x172>
 800e3fe:	2b45      	cmp	r3, #69	; 0x45
 800e400:	d114      	bne.n	800e42c <_strtod_l+0x19c>
 800e402:	b924      	cbnz	r4, 800e40e <_strtod_l+0x17e>
 800e404:	b910      	cbnz	r0, 800e40c <_strtod_l+0x17c>
 800e406:	9b06      	ldr	r3, [sp, #24]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d09e      	beq.n	800e34a <_strtod_l+0xba>
 800e40c:	2400      	movs	r4, #0
 800e40e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e410:	1c73      	adds	r3, r6, #1
 800e412:	931b      	str	r3, [sp, #108]	; 0x6c
 800e414:	7873      	ldrb	r3, [r6, #1]
 800e416:	2b2b      	cmp	r3, #43	; 0x2b
 800e418:	d078      	beq.n	800e50c <_strtod_l+0x27c>
 800e41a:	2b2d      	cmp	r3, #45	; 0x2d
 800e41c:	d070      	beq.n	800e500 <_strtod_l+0x270>
 800e41e:	f04f 0c00 	mov.w	ip, #0
 800e422:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e426:	2f09      	cmp	r7, #9
 800e428:	d97c      	bls.n	800e524 <_strtod_l+0x294>
 800e42a:	961b      	str	r6, [sp, #108]	; 0x6c
 800e42c:	f04f 0e00 	mov.w	lr, #0
 800e430:	e09a      	b.n	800e568 <_strtod_l+0x2d8>
 800e432:	2300      	movs	r3, #0
 800e434:	e7c7      	b.n	800e3c6 <_strtod_l+0x136>
 800e436:	9905      	ldr	r1, [sp, #20]
 800e438:	2908      	cmp	r1, #8
 800e43a:	bfdd      	ittte	le
 800e43c:	9907      	ldrle	r1, [sp, #28]
 800e43e:	fb02 3301 	mlale	r3, r2, r1, r3
 800e442:	9307      	strle	r3, [sp, #28]
 800e444:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e448:	9b05      	ldr	r3, [sp, #20]
 800e44a:	3001      	adds	r0, #1
 800e44c:	3301      	adds	r3, #1
 800e44e:	9305      	str	r3, [sp, #20]
 800e450:	901b      	str	r0, [sp, #108]	; 0x6c
 800e452:	e7bf      	b.n	800e3d4 <_strtod_l+0x144>
 800e454:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e456:	191a      	adds	r2, r3, r4
 800e458:	921b      	str	r2, [sp, #108]	; 0x6c
 800e45a:	9a05      	ldr	r2, [sp, #20]
 800e45c:	5d1b      	ldrb	r3, [r3, r4]
 800e45e:	2a00      	cmp	r2, #0
 800e460:	d037      	beq.n	800e4d2 <_strtod_l+0x242>
 800e462:	9c05      	ldr	r4, [sp, #20]
 800e464:	4602      	mov	r2, r0
 800e466:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e46a:	2909      	cmp	r1, #9
 800e46c:	d913      	bls.n	800e496 <_strtod_l+0x206>
 800e46e:	2101      	movs	r1, #1
 800e470:	9104      	str	r1, [sp, #16]
 800e472:	e7c2      	b.n	800e3fa <_strtod_l+0x16a>
 800e474:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e476:	1c5a      	adds	r2, r3, #1
 800e478:	921b      	str	r2, [sp, #108]	; 0x6c
 800e47a:	785b      	ldrb	r3, [r3, #1]
 800e47c:	3001      	adds	r0, #1
 800e47e:	2b30      	cmp	r3, #48	; 0x30
 800e480:	d0f8      	beq.n	800e474 <_strtod_l+0x1e4>
 800e482:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e486:	2a08      	cmp	r2, #8
 800e488:	f200 84e4 	bhi.w	800ee54 <_strtod_l+0xbc4>
 800e48c:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e48e:	9208      	str	r2, [sp, #32]
 800e490:	4602      	mov	r2, r0
 800e492:	2000      	movs	r0, #0
 800e494:	4604      	mov	r4, r0
 800e496:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e49a:	f100 0101 	add.w	r1, r0, #1
 800e49e:	d012      	beq.n	800e4c6 <_strtod_l+0x236>
 800e4a0:	440a      	add	r2, r1
 800e4a2:	eb00 0c04 	add.w	ip, r0, r4
 800e4a6:	4621      	mov	r1, r4
 800e4a8:	270a      	movs	r7, #10
 800e4aa:	458c      	cmp	ip, r1
 800e4ac:	d113      	bne.n	800e4d6 <_strtod_l+0x246>
 800e4ae:	1821      	adds	r1, r4, r0
 800e4b0:	2908      	cmp	r1, #8
 800e4b2:	f104 0401 	add.w	r4, r4, #1
 800e4b6:	4404      	add	r4, r0
 800e4b8:	dc19      	bgt.n	800e4ee <_strtod_l+0x25e>
 800e4ba:	9b07      	ldr	r3, [sp, #28]
 800e4bc:	210a      	movs	r1, #10
 800e4be:	fb01 e303 	mla	r3, r1, r3, lr
 800e4c2:	9307      	str	r3, [sp, #28]
 800e4c4:	2100      	movs	r1, #0
 800e4c6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4c8:	1c58      	adds	r0, r3, #1
 800e4ca:	901b      	str	r0, [sp, #108]	; 0x6c
 800e4cc:	785b      	ldrb	r3, [r3, #1]
 800e4ce:	4608      	mov	r0, r1
 800e4d0:	e7c9      	b.n	800e466 <_strtod_l+0x1d6>
 800e4d2:	9805      	ldr	r0, [sp, #20]
 800e4d4:	e7d3      	b.n	800e47e <_strtod_l+0x1ee>
 800e4d6:	2908      	cmp	r1, #8
 800e4d8:	f101 0101 	add.w	r1, r1, #1
 800e4dc:	dc03      	bgt.n	800e4e6 <_strtod_l+0x256>
 800e4de:	9b07      	ldr	r3, [sp, #28]
 800e4e0:	437b      	muls	r3, r7
 800e4e2:	9307      	str	r3, [sp, #28]
 800e4e4:	e7e1      	b.n	800e4aa <_strtod_l+0x21a>
 800e4e6:	2910      	cmp	r1, #16
 800e4e8:	bfd8      	it	le
 800e4ea:	437d      	mulle	r5, r7
 800e4ec:	e7dd      	b.n	800e4aa <_strtod_l+0x21a>
 800e4ee:	2c10      	cmp	r4, #16
 800e4f0:	bfdc      	itt	le
 800e4f2:	210a      	movle	r1, #10
 800e4f4:	fb01 e505 	mlale	r5, r1, r5, lr
 800e4f8:	e7e4      	b.n	800e4c4 <_strtod_l+0x234>
 800e4fa:	2301      	movs	r3, #1
 800e4fc:	9304      	str	r3, [sp, #16]
 800e4fe:	e781      	b.n	800e404 <_strtod_l+0x174>
 800e500:	f04f 0c01 	mov.w	ip, #1
 800e504:	1cb3      	adds	r3, r6, #2
 800e506:	931b      	str	r3, [sp, #108]	; 0x6c
 800e508:	78b3      	ldrb	r3, [r6, #2]
 800e50a:	e78a      	b.n	800e422 <_strtod_l+0x192>
 800e50c:	f04f 0c00 	mov.w	ip, #0
 800e510:	e7f8      	b.n	800e504 <_strtod_l+0x274>
 800e512:	bf00      	nop
 800e514:	0801344c 	.word	0x0801344c
 800e518:	7ff00000 	.word	0x7ff00000
 800e51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e51e:	1c5f      	adds	r7, r3, #1
 800e520:	971b      	str	r7, [sp, #108]	; 0x6c
 800e522:	785b      	ldrb	r3, [r3, #1]
 800e524:	2b30      	cmp	r3, #48	; 0x30
 800e526:	d0f9      	beq.n	800e51c <_strtod_l+0x28c>
 800e528:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e52c:	2f08      	cmp	r7, #8
 800e52e:	f63f af7d 	bhi.w	800e42c <_strtod_l+0x19c>
 800e532:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e536:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e538:	930a      	str	r3, [sp, #40]	; 0x28
 800e53a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e53c:	1c5f      	adds	r7, r3, #1
 800e53e:	971b      	str	r7, [sp, #108]	; 0x6c
 800e540:	785b      	ldrb	r3, [r3, #1]
 800e542:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e546:	f1b8 0f09 	cmp.w	r8, #9
 800e54a:	d937      	bls.n	800e5bc <_strtod_l+0x32c>
 800e54c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e54e:	1a7f      	subs	r7, r7, r1
 800e550:	2f08      	cmp	r7, #8
 800e552:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e556:	dc37      	bgt.n	800e5c8 <_strtod_l+0x338>
 800e558:	45be      	cmp	lr, r7
 800e55a:	bfa8      	it	ge
 800e55c:	46be      	movge	lr, r7
 800e55e:	f1bc 0f00 	cmp.w	ip, #0
 800e562:	d001      	beq.n	800e568 <_strtod_l+0x2d8>
 800e564:	f1ce 0e00 	rsb	lr, lr, #0
 800e568:	2c00      	cmp	r4, #0
 800e56a:	d151      	bne.n	800e610 <_strtod_l+0x380>
 800e56c:	2800      	cmp	r0, #0
 800e56e:	f47f aece 	bne.w	800e30e <_strtod_l+0x7e>
 800e572:	9a06      	ldr	r2, [sp, #24]
 800e574:	2a00      	cmp	r2, #0
 800e576:	f47f aeca 	bne.w	800e30e <_strtod_l+0x7e>
 800e57a:	9a04      	ldr	r2, [sp, #16]
 800e57c:	2a00      	cmp	r2, #0
 800e57e:	f47f aee4 	bne.w	800e34a <_strtod_l+0xba>
 800e582:	2b4e      	cmp	r3, #78	; 0x4e
 800e584:	d027      	beq.n	800e5d6 <_strtod_l+0x346>
 800e586:	dc21      	bgt.n	800e5cc <_strtod_l+0x33c>
 800e588:	2b49      	cmp	r3, #73	; 0x49
 800e58a:	f47f aede 	bne.w	800e34a <_strtod_l+0xba>
 800e58e:	49a0      	ldr	r1, [pc, #640]	; (800e810 <_strtod_l+0x580>)
 800e590:	a81b      	add	r0, sp, #108	; 0x6c
 800e592:	f001 fdd7 	bl	8010144 <__match>
 800e596:	2800      	cmp	r0, #0
 800e598:	f43f aed7 	beq.w	800e34a <_strtod_l+0xba>
 800e59c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e59e:	499d      	ldr	r1, [pc, #628]	; (800e814 <_strtod_l+0x584>)
 800e5a0:	3b01      	subs	r3, #1
 800e5a2:	a81b      	add	r0, sp, #108	; 0x6c
 800e5a4:	931b      	str	r3, [sp, #108]	; 0x6c
 800e5a6:	f001 fdcd 	bl	8010144 <__match>
 800e5aa:	b910      	cbnz	r0, 800e5b2 <_strtod_l+0x322>
 800e5ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5ae:	3301      	adds	r3, #1
 800e5b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800e5b2:	f8df b274 	ldr.w	fp, [pc, #628]	; 800e828 <_strtod_l+0x598>
 800e5b6:	f04f 0a00 	mov.w	sl, #0
 800e5ba:	e6a8      	b.n	800e30e <_strtod_l+0x7e>
 800e5bc:	210a      	movs	r1, #10
 800e5be:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e5c2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e5c6:	e7b8      	b.n	800e53a <_strtod_l+0x2aa>
 800e5c8:	46be      	mov	lr, r7
 800e5ca:	e7c8      	b.n	800e55e <_strtod_l+0x2ce>
 800e5cc:	2b69      	cmp	r3, #105	; 0x69
 800e5ce:	d0de      	beq.n	800e58e <_strtod_l+0x2fe>
 800e5d0:	2b6e      	cmp	r3, #110	; 0x6e
 800e5d2:	f47f aeba 	bne.w	800e34a <_strtod_l+0xba>
 800e5d6:	4990      	ldr	r1, [pc, #576]	; (800e818 <_strtod_l+0x588>)
 800e5d8:	a81b      	add	r0, sp, #108	; 0x6c
 800e5da:	f001 fdb3 	bl	8010144 <__match>
 800e5de:	2800      	cmp	r0, #0
 800e5e0:	f43f aeb3 	beq.w	800e34a <_strtod_l+0xba>
 800e5e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5e6:	781b      	ldrb	r3, [r3, #0]
 800e5e8:	2b28      	cmp	r3, #40	; 0x28
 800e5ea:	d10e      	bne.n	800e60a <_strtod_l+0x37a>
 800e5ec:	aa1e      	add	r2, sp, #120	; 0x78
 800e5ee:	498b      	ldr	r1, [pc, #556]	; (800e81c <_strtod_l+0x58c>)
 800e5f0:	a81b      	add	r0, sp, #108	; 0x6c
 800e5f2:	f001 fdbb 	bl	801016c <__hexnan>
 800e5f6:	2805      	cmp	r0, #5
 800e5f8:	d107      	bne.n	800e60a <_strtod_l+0x37a>
 800e5fa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e5fc:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e600:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e604:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e608:	e681      	b.n	800e30e <_strtod_l+0x7e>
 800e60a:	f8df b224 	ldr.w	fp, [pc, #548]	; 800e830 <_strtod_l+0x5a0>
 800e60e:	e7d2      	b.n	800e5b6 <_strtod_l+0x326>
 800e610:	ebae 0302 	sub.w	r3, lr, r2
 800e614:	9306      	str	r3, [sp, #24]
 800e616:	9b05      	ldr	r3, [sp, #20]
 800e618:	9807      	ldr	r0, [sp, #28]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	bf08      	it	eq
 800e61e:	4623      	moveq	r3, r4
 800e620:	2c10      	cmp	r4, #16
 800e622:	9305      	str	r3, [sp, #20]
 800e624:	46a0      	mov	r8, r4
 800e626:	bfa8      	it	ge
 800e628:	f04f 0810 	movge.w	r8, #16
 800e62c:	f7f1 ff6a 	bl	8000504 <__aeabi_ui2d>
 800e630:	2c09      	cmp	r4, #9
 800e632:	4682      	mov	sl, r0
 800e634:	468b      	mov	fp, r1
 800e636:	dc13      	bgt.n	800e660 <_strtod_l+0x3d0>
 800e638:	9b06      	ldr	r3, [sp, #24]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	f43f ae67 	beq.w	800e30e <_strtod_l+0x7e>
 800e640:	9b06      	ldr	r3, [sp, #24]
 800e642:	dd7a      	ble.n	800e73a <_strtod_l+0x4aa>
 800e644:	2b16      	cmp	r3, #22
 800e646:	dc61      	bgt.n	800e70c <_strtod_l+0x47c>
 800e648:	4a75      	ldr	r2, [pc, #468]	; (800e820 <_strtod_l+0x590>)
 800e64a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e64e:	e9de 0100 	ldrd	r0, r1, [lr]
 800e652:	4652      	mov	r2, sl
 800e654:	465b      	mov	r3, fp
 800e656:	f7f1 ffcf 	bl	80005f8 <__aeabi_dmul>
 800e65a:	4682      	mov	sl, r0
 800e65c:	468b      	mov	fp, r1
 800e65e:	e656      	b.n	800e30e <_strtod_l+0x7e>
 800e660:	4b6f      	ldr	r3, [pc, #444]	; (800e820 <_strtod_l+0x590>)
 800e662:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e666:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e66a:	f7f1 ffc5 	bl	80005f8 <__aeabi_dmul>
 800e66e:	4606      	mov	r6, r0
 800e670:	4628      	mov	r0, r5
 800e672:	460f      	mov	r7, r1
 800e674:	f7f1 ff46 	bl	8000504 <__aeabi_ui2d>
 800e678:	4602      	mov	r2, r0
 800e67a:	460b      	mov	r3, r1
 800e67c:	4630      	mov	r0, r6
 800e67e:	4639      	mov	r1, r7
 800e680:	f7f1 fe04 	bl	800028c <__adddf3>
 800e684:	2c0f      	cmp	r4, #15
 800e686:	4682      	mov	sl, r0
 800e688:	468b      	mov	fp, r1
 800e68a:	ddd5      	ble.n	800e638 <_strtod_l+0x3a8>
 800e68c:	9b06      	ldr	r3, [sp, #24]
 800e68e:	eba4 0808 	sub.w	r8, r4, r8
 800e692:	4498      	add	r8, r3
 800e694:	f1b8 0f00 	cmp.w	r8, #0
 800e698:	f340 8096 	ble.w	800e7c8 <_strtod_l+0x538>
 800e69c:	f018 030f 	ands.w	r3, r8, #15
 800e6a0:	d00a      	beq.n	800e6b8 <_strtod_l+0x428>
 800e6a2:	495f      	ldr	r1, [pc, #380]	; (800e820 <_strtod_l+0x590>)
 800e6a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e6a8:	4652      	mov	r2, sl
 800e6aa:	465b      	mov	r3, fp
 800e6ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e6b0:	f7f1 ffa2 	bl	80005f8 <__aeabi_dmul>
 800e6b4:	4682      	mov	sl, r0
 800e6b6:	468b      	mov	fp, r1
 800e6b8:	f038 080f 	bics.w	r8, r8, #15
 800e6bc:	d073      	beq.n	800e7a6 <_strtod_l+0x516>
 800e6be:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e6c2:	dd47      	ble.n	800e754 <_strtod_l+0x4c4>
 800e6c4:	2400      	movs	r4, #0
 800e6c6:	46a0      	mov	r8, r4
 800e6c8:	9407      	str	r4, [sp, #28]
 800e6ca:	9405      	str	r4, [sp, #20]
 800e6cc:	2322      	movs	r3, #34	; 0x22
 800e6ce:	f8df b158 	ldr.w	fp, [pc, #344]	; 800e828 <_strtod_l+0x598>
 800e6d2:	f8c9 3000 	str.w	r3, [r9]
 800e6d6:	f04f 0a00 	mov.w	sl, #0
 800e6da:	9b07      	ldr	r3, [sp, #28]
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f43f ae16 	beq.w	800e30e <_strtod_l+0x7e>
 800e6e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e6e4:	4648      	mov	r0, r9
 800e6e6:	f001 fe3e 	bl	8010366 <_Bfree>
 800e6ea:	9905      	ldr	r1, [sp, #20]
 800e6ec:	4648      	mov	r0, r9
 800e6ee:	f001 fe3a 	bl	8010366 <_Bfree>
 800e6f2:	4641      	mov	r1, r8
 800e6f4:	4648      	mov	r0, r9
 800e6f6:	f001 fe36 	bl	8010366 <_Bfree>
 800e6fa:	9907      	ldr	r1, [sp, #28]
 800e6fc:	4648      	mov	r0, r9
 800e6fe:	f001 fe32 	bl	8010366 <_Bfree>
 800e702:	4621      	mov	r1, r4
 800e704:	4648      	mov	r0, r9
 800e706:	f001 fe2e 	bl	8010366 <_Bfree>
 800e70a:	e600      	b.n	800e30e <_strtod_l+0x7e>
 800e70c:	9a06      	ldr	r2, [sp, #24]
 800e70e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e712:	4293      	cmp	r3, r2
 800e714:	dbba      	blt.n	800e68c <_strtod_l+0x3fc>
 800e716:	4d42      	ldr	r5, [pc, #264]	; (800e820 <_strtod_l+0x590>)
 800e718:	f1c4 040f 	rsb	r4, r4, #15
 800e71c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e720:	4652      	mov	r2, sl
 800e722:	465b      	mov	r3, fp
 800e724:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e728:	f7f1 ff66 	bl	80005f8 <__aeabi_dmul>
 800e72c:	9b06      	ldr	r3, [sp, #24]
 800e72e:	1b1c      	subs	r4, r3, r4
 800e730:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e734:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e738:	e78d      	b.n	800e656 <_strtod_l+0x3c6>
 800e73a:	f113 0f16 	cmn.w	r3, #22
 800e73e:	dba5      	blt.n	800e68c <_strtod_l+0x3fc>
 800e740:	4a37      	ldr	r2, [pc, #220]	; (800e820 <_strtod_l+0x590>)
 800e742:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800e746:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e74a:	4650      	mov	r0, sl
 800e74c:	4659      	mov	r1, fp
 800e74e:	f7f2 f87d 	bl	800084c <__aeabi_ddiv>
 800e752:	e782      	b.n	800e65a <_strtod_l+0x3ca>
 800e754:	2300      	movs	r3, #0
 800e756:	4e33      	ldr	r6, [pc, #204]	; (800e824 <_strtod_l+0x594>)
 800e758:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e75c:	4650      	mov	r0, sl
 800e75e:	4659      	mov	r1, fp
 800e760:	461d      	mov	r5, r3
 800e762:	f1b8 0f01 	cmp.w	r8, #1
 800e766:	dc21      	bgt.n	800e7ac <_strtod_l+0x51c>
 800e768:	b10b      	cbz	r3, 800e76e <_strtod_l+0x4de>
 800e76a:	4682      	mov	sl, r0
 800e76c:	468b      	mov	fp, r1
 800e76e:	4b2d      	ldr	r3, [pc, #180]	; (800e824 <_strtod_l+0x594>)
 800e770:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e774:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e778:	4652      	mov	r2, sl
 800e77a:	465b      	mov	r3, fp
 800e77c:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e780:	f7f1 ff3a 	bl	80005f8 <__aeabi_dmul>
 800e784:	4b28      	ldr	r3, [pc, #160]	; (800e828 <_strtod_l+0x598>)
 800e786:	460a      	mov	r2, r1
 800e788:	400b      	ands	r3, r1
 800e78a:	4928      	ldr	r1, [pc, #160]	; (800e82c <_strtod_l+0x59c>)
 800e78c:	428b      	cmp	r3, r1
 800e78e:	4682      	mov	sl, r0
 800e790:	d898      	bhi.n	800e6c4 <_strtod_l+0x434>
 800e792:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e796:	428b      	cmp	r3, r1
 800e798:	bf86      	itte	hi
 800e79a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e834 <_strtod_l+0x5a4>
 800e79e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e7a2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e7a6:	2300      	movs	r3, #0
 800e7a8:	9304      	str	r3, [sp, #16]
 800e7aa:	e077      	b.n	800e89c <_strtod_l+0x60c>
 800e7ac:	f018 0f01 	tst.w	r8, #1
 800e7b0:	d006      	beq.n	800e7c0 <_strtod_l+0x530>
 800e7b2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ba:	f7f1 ff1d 	bl	80005f8 <__aeabi_dmul>
 800e7be:	2301      	movs	r3, #1
 800e7c0:	3501      	adds	r5, #1
 800e7c2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e7c6:	e7cc      	b.n	800e762 <_strtod_l+0x4d2>
 800e7c8:	d0ed      	beq.n	800e7a6 <_strtod_l+0x516>
 800e7ca:	f1c8 0800 	rsb	r8, r8, #0
 800e7ce:	f018 020f 	ands.w	r2, r8, #15
 800e7d2:	d00a      	beq.n	800e7ea <_strtod_l+0x55a>
 800e7d4:	4b12      	ldr	r3, [pc, #72]	; (800e820 <_strtod_l+0x590>)
 800e7d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e7da:	4650      	mov	r0, sl
 800e7dc:	4659      	mov	r1, fp
 800e7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7e2:	f7f2 f833 	bl	800084c <__aeabi_ddiv>
 800e7e6:	4682      	mov	sl, r0
 800e7e8:	468b      	mov	fp, r1
 800e7ea:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e7ee:	d0da      	beq.n	800e7a6 <_strtod_l+0x516>
 800e7f0:	f1b8 0f1f 	cmp.w	r8, #31
 800e7f4:	dd20      	ble.n	800e838 <_strtod_l+0x5a8>
 800e7f6:	2400      	movs	r4, #0
 800e7f8:	46a0      	mov	r8, r4
 800e7fa:	9407      	str	r4, [sp, #28]
 800e7fc:	9405      	str	r4, [sp, #20]
 800e7fe:	2322      	movs	r3, #34	; 0x22
 800e800:	f04f 0a00 	mov.w	sl, #0
 800e804:	f04f 0b00 	mov.w	fp, #0
 800e808:	f8c9 3000 	str.w	r3, [r9]
 800e80c:	e765      	b.n	800e6da <_strtod_l+0x44a>
 800e80e:	bf00      	nop
 800e810:	08013415 	.word	0x08013415
 800e814:	080134a3 	.word	0x080134a3
 800e818:	0801341d 	.word	0x0801341d
 800e81c:	08013460 	.word	0x08013460
 800e820:	080134e0 	.word	0x080134e0
 800e824:	080134b8 	.word	0x080134b8
 800e828:	7ff00000 	.word	0x7ff00000
 800e82c:	7ca00000 	.word	0x7ca00000
 800e830:	fff80000 	.word	0xfff80000
 800e834:	7fefffff 	.word	0x7fefffff
 800e838:	f018 0310 	ands.w	r3, r8, #16
 800e83c:	bf18      	it	ne
 800e83e:	236a      	movne	r3, #106	; 0x6a
 800e840:	4da0      	ldr	r5, [pc, #640]	; (800eac4 <_strtod_l+0x834>)
 800e842:	9304      	str	r3, [sp, #16]
 800e844:	4650      	mov	r0, sl
 800e846:	4659      	mov	r1, fp
 800e848:	2300      	movs	r3, #0
 800e84a:	f1b8 0f00 	cmp.w	r8, #0
 800e84e:	f300 810a 	bgt.w	800ea66 <_strtod_l+0x7d6>
 800e852:	b10b      	cbz	r3, 800e858 <_strtod_l+0x5c8>
 800e854:	4682      	mov	sl, r0
 800e856:	468b      	mov	fp, r1
 800e858:	9b04      	ldr	r3, [sp, #16]
 800e85a:	b1bb      	cbz	r3, 800e88c <_strtod_l+0x5fc>
 800e85c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e860:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e864:	2b00      	cmp	r3, #0
 800e866:	4659      	mov	r1, fp
 800e868:	dd10      	ble.n	800e88c <_strtod_l+0x5fc>
 800e86a:	2b1f      	cmp	r3, #31
 800e86c:	f340 8107 	ble.w	800ea7e <_strtod_l+0x7ee>
 800e870:	2b34      	cmp	r3, #52	; 0x34
 800e872:	bfde      	ittt	le
 800e874:	3b20      	suble	r3, #32
 800e876:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800e87a:	fa02 f303 	lslle.w	r3, r2, r3
 800e87e:	f04f 0a00 	mov.w	sl, #0
 800e882:	bfcc      	ite	gt
 800e884:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e888:	ea03 0b01 	andle.w	fp, r3, r1
 800e88c:	2200      	movs	r2, #0
 800e88e:	2300      	movs	r3, #0
 800e890:	4650      	mov	r0, sl
 800e892:	4659      	mov	r1, fp
 800e894:	f7f2 f918 	bl	8000ac8 <__aeabi_dcmpeq>
 800e898:	2800      	cmp	r0, #0
 800e89a:	d1ac      	bne.n	800e7f6 <_strtod_l+0x566>
 800e89c:	9b07      	ldr	r3, [sp, #28]
 800e89e:	9300      	str	r3, [sp, #0]
 800e8a0:	9a05      	ldr	r2, [sp, #20]
 800e8a2:	9908      	ldr	r1, [sp, #32]
 800e8a4:	4623      	mov	r3, r4
 800e8a6:	4648      	mov	r0, r9
 800e8a8:	f001 fdaf 	bl	801040a <__s2b>
 800e8ac:	9007      	str	r0, [sp, #28]
 800e8ae:	2800      	cmp	r0, #0
 800e8b0:	f43f af08 	beq.w	800e6c4 <_strtod_l+0x434>
 800e8b4:	9a06      	ldr	r2, [sp, #24]
 800e8b6:	9b06      	ldr	r3, [sp, #24]
 800e8b8:	2a00      	cmp	r2, #0
 800e8ba:	f1c3 0300 	rsb	r3, r3, #0
 800e8be:	bfa8      	it	ge
 800e8c0:	2300      	movge	r3, #0
 800e8c2:	930e      	str	r3, [sp, #56]	; 0x38
 800e8c4:	2400      	movs	r4, #0
 800e8c6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e8ca:	9316      	str	r3, [sp, #88]	; 0x58
 800e8cc:	46a0      	mov	r8, r4
 800e8ce:	9b07      	ldr	r3, [sp, #28]
 800e8d0:	4648      	mov	r0, r9
 800e8d2:	6859      	ldr	r1, [r3, #4]
 800e8d4:	f001 fd13 	bl	80102fe <_Balloc>
 800e8d8:	9005      	str	r0, [sp, #20]
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	f43f aef6 	beq.w	800e6cc <_strtod_l+0x43c>
 800e8e0:	9b07      	ldr	r3, [sp, #28]
 800e8e2:	691a      	ldr	r2, [r3, #16]
 800e8e4:	3202      	adds	r2, #2
 800e8e6:	f103 010c 	add.w	r1, r3, #12
 800e8ea:	0092      	lsls	r2, r2, #2
 800e8ec:	300c      	adds	r0, #12
 800e8ee:	f001 fcfb 	bl	80102e8 <memcpy>
 800e8f2:	aa1e      	add	r2, sp, #120	; 0x78
 800e8f4:	a91d      	add	r1, sp, #116	; 0x74
 800e8f6:	ec4b ab10 	vmov	d0, sl, fp
 800e8fa:	4648      	mov	r0, r9
 800e8fc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800e900:	f002 f83e 	bl	8010980 <__d2b>
 800e904:	901c      	str	r0, [sp, #112]	; 0x70
 800e906:	2800      	cmp	r0, #0
 800e908:	f43f aee0 	beq.w	800e6cc <_strtod_l+0x43c>
 800e90c:	2101      	movs	r1, #1
 800e90e:	4648      	mov	r0, r9
 800e910:	f001 fe07 	bl	8010522 <__i2b>
 800e914:	4680      	mov	r8, r0
 800e916:	2800      	cmp	r0, #0
 800e918:	f43f aed8 	beq.w	800e6cc <_strtod_l+0x43c>
 800e91c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800e91e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800e920:	2e00      	cmp	r6, #0
 800e922:	bfab      	itete	ge
 800e924:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800e926:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800e928:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800e92a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800e92c:	bfac      	ite	ge
 800e92e:	18f7      	addge	r7, r6, r3
 800e930:	1b9d      	sublt	r5, r3, r6
 800e932:	9b04      	ldr	r3, [sp, #16]
 800e934:	1af6      	subs	r6, r6, r3
 800e936:	4416      	add	r6, r2
 800e938:	4b63      	ldr	r3, [pc, #396]	; (800eac8 <_strtod_l+0x838>)
 800e93a:	3e01      	subs	r6, #1
 800e93c:	429e      	cmp	r6, r3
 800e93e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800e942:	f280 80af 	bge.w	800eaa4 <_strtod_l+0x814>
 800e946:	1b9b      	subs	r3, r3, r6
 800e948:	2b1f      	cmp	r3, #31
 800e94a:	eba2 0203 	sub.w	r2, r2, r3
 800e94e:	f04f 0101 	mov.w	r1, #1
 800e952:	f300 809b 	bgt.w	800ea8c <_strtod_l+0x7fc>
 800e956:	fa01 f303 	lsl.w	r3, r1, r3
 800e95a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e95c:	2300      	movs	r3, #0
 800e95e:	930a      	str	r3, [sp, #40]	; 0x28
 800e960:	18be      	adds	r6, r7, r2
 800e962:	9b04      	ldr	r3, [sp, #16]
 800e964:	42b7      	cmp	r7, r6
 800e966:	4415      	add	r5, r2
 800e968:	441d      	add	r5, r3
 800e96a:	463b      	mov	r3, r7
 800e96c:	bfa8      	it	ge
 800e96e:	4633      	movge	r3, r6
 800e970:	42ab      	cmp	r3, r5
 800e972:	bfa8      	it	ge
 800e974:	462b      	movge	r3, r5
 800e976:	2b00      	cmp	r3, #0
 800e978:	bfc2      	ittt	gt
 800e97a:	1af6      	subgt	r6, r6, r3
 800e97c:	1aed      	subgt	r5, r5, r3
 800e97e:	1aff      	subgt	r7, r7, r3
 800e980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e982:	b1bb      	cbz	r3, 800e9b4 <_strtod_l+0x724>
 800e984:	4641      	mov	r1, r8
 800e986:	461a      	mov	r2, r3
 800e988:	4648      	mov	r0, r9
 800e98a:	f001 fe69 	bl	8010660 <__pow5mult>
 800e98e:	4680      	mov	r8, r0
 800e990:	2800      	cmp	r0, #0
 800e992:	f43f ae9b 	beq.w	800e6cc <_strtod_l+0x43c>
 800e996:	4601      	mov	r1, r0
 800e998:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e99a:	4648      	mov	r0, r9
 800e99c:	f001 fdca 	bl	8010534 <__multiply>
 800e9a0:	900c      	str	r0, [sp, #48]	; 0x30
 800e9a2:	2800      	cmp	r0, #0
 800e9a4:	f43f ae92 	beq.w	800e6cc <_strtod_l+0x43c>
 800e9a8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e9aa:	4648      	mov	r0, r9
 800e9ac:	f001 fcdb 	bl	8010366 <_Bfree>
 800e9b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9b2:	931c      	str	r3, [sp, #112]	; 0x70
 800e9b4:	2e00      	cmp	r6, #0
 800e9b6:	dc7a      	bgt.n	800eaae <_strtod_l+0x81e>
 800e9b8:	9b06      	ldr	r3, [sp, #24]
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	dd08      	ble.n	800e9d0 <_strtod_l+0x740>
 800e9be:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800e9c0:	9905      	ldr	r1, [sp, #20]
 800e9c2:	4648      	mov	r0, r9
 800e9c4:	f001 fe4c 	bl	8010660 <__pow5mult>
 800e9c8:	9005      	str	r0, [sp, #20]
 800e9ca:	2800      	cmp	r0, #0
 800e9cc:	f43f ae7e 	beq.w	800e6cc <_strtod_l+0x43c>
 800e9d0:	2d00      	cmp	r5, #0
 800e9d2:	dd08      	ble.n	800e9e6 <_strtod_l+0x756>
 800e9d4:	462a      	mov	r2, r5
 800e9d6:	9905      	ldr	r1, [sp, #20]
 800e9d8:	4648      	mov	r0, r9
 800e9da:	f001 fe8f 	bl	80106fc <__lshift>
 800e9de:	9005      	str	r0, [sp, #20]
 800e9e0:	2800      	cmp	r0, #0
 800e9e2:	f43f ae73 	beq.w	800e6cc <_strtod_l+0x43c>
 800e9e6:	2f00      	cmp	r7, #0
 800e9e8:	dd08      	ble.n	800e9fc <_strtod_l+0x76c>
 800e9ea:	4641      	mov	r1, r8
 800e9ec:	463a      	mov	r2, r7
 800e9ee:	4648      	mov	r0, r9
 800e9f0:	f001 fe84 	bl	80106fc <__lshift>
 800e9f4:	4680      	mov	r8, r0
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	f43f ae68 	beq.w	800e6cc <_strtod_l+0x43c>
 800e9fc:	9a05      	ldr	r2, [sp, #20]
 800e9fe:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ea00:	4648      	mov	r0, r9
 800ea02:	f001 fee9 	bl	80107d8 <__mdiff>
 800ea06:	4604      	mov	r4, r0
 800ea08:	2800      	cmp	r0, #0
 800ea0a:	f43f ae5f 	beq.w	800e6cc <_strtod_l+0x43c>
 800ea0e:	68c3      	ldr	r3, [r0, #12]
 800ea10:	930c      	str	r3, [sp, #48]	; 0x30
 800ea12:	2300      	movs	r3, #0
 800ea14:	60c3      	str	r3, [r0, #12]
 800ea16:	4641      	mov	r1, r8
 800ea18:	f001 fec4 	bl	80107a4 <__mcmp>
 800ea1c:	2800      	cmp	r0, #0
 800ea1e:	da55      	bge.n	800eacc <_strtod_l+0x83c>
 800ea20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea22:	b9e3      	cbnz	r3, 800ea5e <_strtod_l+0x7ce>
 800ea24:	f1ba 0f00 	cmp.w	sl, #0
 800ea28:	d119      	bne.n	800ea5e <_strtod_l+0x7ce>
 800ea2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea2e:	b9b3      	cbnz	r3, 800ea5e <_strtod_l+0x7ce>
 800ea30:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea34:	0d1b      	lsrs	r3, r3, #20
 800ea36:	051b      	lsls	r3, r3, #20
 800ea38:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ea3c:	d90f      	bls.n	800ea5e <_strtod_l+0x7ce>
 800ea3e:	6963      	ldr	r3, [r4, #20]
 800ea40:	b913      	cbnz	r3, 800ea48 <_strtod_l+0x7b8>
 800ea42:	6923      	ldr	r3, [r4, #16]
 800ea44:	2b01      	cmp	r3, #1
 800ea46:	dd0a      	ble.n	800ea5e <_strtod_l+0x7ce>
 800ea48:	4621      	mov	r1, r4
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	4648      	mov	r0, r9
 800ea4e:	f001 fe55 	bl	80106fc <__lshift>
 800ea52:	4641      	mov	r1, r8
 800ea54:	4604      	mov	r4, r0
 800ea56:	f001 fea5 	bl	80107a4 <__mcmp>
 800ea5a:	2800      	cmp	r0, #0
 800ea5c:	dc67      	bgt.n	800eb2e <_strtod_l+0x89e>
 800ea5e:	9b04      	ldr	r3, [sp, #16]
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d171      	bne.n	800eb48 <_strtod_l+0x8b8>
 800ea64:	e63d      	b.n	800e6e2 <_strtod_l+0x452>
 800ea66:	f018 0f01 	tst.w	r8, #1
 800ea6a:	d004      	beq.n	800ea76 <_strtod_l+0x7e6>
 800ea6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ea70:	f7f1 fdc2 	bl	80005f8 <__aeabi_dmul>
 800ea74:	2301      	movs	r3, #1
 800ea76:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ea7a:	3508      	adds	r5, #8
 800ea7c:	e6e5      	b.n	800e84a <_strtod_l+0x5ba>
 800ea7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ea82:	fa02 f303 	lsl.w	r3, r2, r3
 800ea86:	ea03 0a0a 	and.w	sl, r3, sl
 800ea8a:	e6ff      	b.n	800e88c <_strtod_l+0x5fc>
 800ea8c:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800ea90:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ea94:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ea98:	36e2      	adds	r6, #226	; 0xe2
 800ea9a:	fa01 f306 	lsl.w	r3, r1, r6
 800ea9e:	930a      	str	r3, [sp, #40]	; 0x28
 800eaa0:	910f      	str	r1, [sp, #60]	; 0x3c
 800eaa2:	e75d      	b.n	800e960 <_strtod_l+0x6d0>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	930a      	str	r3, [sp, #40]	; 0x28
 800eaa8:	2301      	movs	r3, #1
 800eaaa:	930f      	str	r3, [sp, #60]	; 0x3c
 800eaac:	e758      	b.n	800e960 <_strtod_l+0x6d0>
 800eaae:	4632      	mov	r2, r6
 800eab0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eab2:	4648      	mov	r0, r9
 800eab4:	f001 fe22 	bl	80106fc <__lshift>
 800eab8:	901c      	str	r0, [sp, #112]	; 0x70
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f47f af7c 	bne.w	800e9b8 <_strtod_l+0x728>
 800eac0:	e604      	b.n	800e6cc <_strtod_l+0x43c>
 800eac2:	bf00      	nop
 800eac4:	08013478 	.word	0x08013478
 800eac8:	fffffc02 	.word	0xfffffc02
 800eacc:	465d      	mov	r5, fp
 800eace:	f040 8086 	bne.w	800ebde <_strtod_l+0x94e>
 800ead2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ead4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ead8:	b32a      	cbz	r2, 800eb26 <_strtod_l+0x896>
 800eada:	4aaf      	ldr	r2, [pc, #700]	; (800ed98 <_strtod_l+0xb08>)
 800eadc:	4293      	cmp	r3, r2
 800eade:	d153      	bne.n	800eb88 <_strtod_l+0x8f8>
 800eae0:	9b04      	ldr	r3, [sp, #16]
 800eae2:	4650      	mov	r0, sl
 800eae4:	b1d3      	cbz	r3, 800eb1c <_strtod_l+0x88c>
 800eae6:	4aad      	ldr	r2, [pc, #692]	; (800ed9c <_strtod_l+0xb0c>)
 800eae8:	402a      	ands	r2, r5
 800eaea:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800eaee:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800eaf2:	d816      	bhi.n	800eb22 <_strtod_l+0x892>
 800eaf4:	0d12      	lsrs	r2, r2, #20
 800eaf6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800eafa:	fa01 f303 	lsl.w	r3, r1, r3
 800eafe:	4298      	cmp	r0, r3
 800eb00:	d142      	bne.n	800eb88 <_strtod_l+0x8f8>
 800eb02:	4ba7      	ldr	r3, [pc, #668]	; (800eda0 <_strtod_l+0xb10>)
 800eb04:	429d      	cmp	r5, r3
 800eb06:	d102      	bne.n	800eb0e <_strtod_l+0x87e>
 800eb08:	3001      	adds	r0, #1
 800eb0a:	f43f addf 	beq.w	800e6cc <_strtod_l+0x43c>
 800eb0e:	4ba3      	ldr	r3, [pc, #652]	; (800ed9c <_strtod_l+0xb0c>)
 800eb10:	402b      	ands	r3, r5
 800eb12:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800eb16:	f04f 0a00 	mov.w	sl, #0
 800eb1a:	e7a0      	b.n	800ea5e <_strtod_l+0x7ce>
 800eb1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb20:	e7ed      	b.n	800eafe <_strtod_l+0x86e>
 800eb22:	460b      	mov	r3, r1
 800eb24:	e7eb      	b.n	800eafe <_strtod_l+0x86e>
 800eb26:	bb7b      	cbnz	r3, 800eb88 <_strtod_l+0x8f8>
 800eb28:	f1ba 0f00 	cmp.w	sl, #0
 800eb2c:	d12c      	bne.n	800eb88 <_strtod_l+0x8f8>
 800eb2e:	9904      	ldr	r1, [sp, #16]
 800eb30:	4a9a      	ldr	r2, [pc, #616]	; (800ed9c <_strtod_l+0xb0c>)
 800eb32:	465b      	mov	r3, fp
 800eb34:	b1f1      	cbz	r1, 800eb74 <_strtod_l+0x8e4>
 800eb36:	ea02 010b 	and.w	r1, r2, fp
 800eb3a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800eb3e:	dc19      	bgt.n	800eb74 <_strtod_l+0x8e4>
 800eb40:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800eb44:	f77f ae5b 	ble.w	800e7fe <_strtod_l+0x56e>
 800eb48:	4a96      	ldr	r2, [pc, #600]	; (800eda4 <_strtod_l+0xb14>)
 800eb4a:	2300      	movs	r3, #0
 800eb4c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800eb50:	4650      	mov	r0, sl
 800eb52:	4659      	mov	r1, fp
 800eb54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800eb58:	f7f1 fd4e 	bl	80005f8 <__aeabi_dmul>
 800eb5c:	4682      	mov	sl, r0
 800eb5e:	468b      	mov	fp, r1
 800eb60:	2900      	cmp	r1, #0
 800eb62:	f47f adbe 	bne.w	800e6e2 <_strtod_l+0x452>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	f47f adbb 	bne.w	800e6e2 <_strtod_l+0x452>
 800eb6c:	2322      	movs	r3, #34	; 0x22
 800eb6e:	f8c9 3000 	str.w	r3, [r9]
 800eb72:	e5b6      	b.n	800e6e2 <_strtod_l+0x452>
 800eb74:	4013      	ands	r3, r2
 800eb76:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800eb7a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800eb7e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800eb82:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800eb86:	e76a      	b.n	800ea5e <_strtod_l+0x7ce>
 800eb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb8a:	b193      	cbz	r3, 800ebb2 <_strtod_l+0x922>
 800eb8c:	422b      	tst	r3, r5
 800eb8e:	f43f af66 	beq.w	800ea5e <_strtod_l+0x7ce>
 800eb92:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb94:	9a04      	ldr	r2, [sp, #16]
 800eb96:	4650      	mov	r0, sl
 800eb98:	4659      	mov	r1, fp
 800eb9a:	b173      	cbz	r3, 800ebba <_strtod_l+0x92a>
 800eb9c:	f7ff fb59 	bl	800e252 <sulp>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eba8:	f7f1 fb70 	bl	800028c <__adddf3>
 800ebac:	4682      	mov	sl, r0
 800ebae:	468b      	mov	fp, r1
 800ebb0:	e755      	b.n	800ea5e <_strtod_l+0x7ce>
 800ebb2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebb4:	ea13 0f0a 	tst.w	r3, sl
 800ebb8:	e7e9      	b.n	800eb8e <_strtod_l+0x8fe>
 800ebba:	f7ff fb4a 	bl	800e252 <sulp>
 800ebbe:	4602      	mov	r2, r0
 800ebc0:	460b      	mov	r3, r1
 800ebc2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ebc6:	f7f1 fb5f 	bl	8000288 <__aeabi_dsub>
 800ebca:	2200      	movs	r2, #0
 800ebcc:	2300      	movs	r3, #0
 800ebce:	4682      	mov	sl, r0
 800ebd0:	468b      	mov	fp, r1
 800ebd2:	f7f1 ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 800ebd6:	2800      	cmp	r0, #0
 800ebd8:	f47f ae11 	bne.w	800e7fe <_strtod_l+0x56e>
 800ebdc:	e73f      	b.n	800ea5e <_strtod_l+0x7ce>
 800ebde:	4641      	mov	r1, r8
 800ebe0:	4620      	mov	r0, r4
 800ebe2:	f001 ff1c 	bl	8010a1e <__ratio>
 800ebe6:	ec57 6b10 	vmov	r6, r7, d0
 800ebea:	2200      	movs	r2, #0
 800ebec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ebf0:	ee10 0a10 	vmov	r0, s0
 800ebf4:	4639      	mov	r1, r7
 800ebf6:	f7f1 ff7b 	bl	8000af0 <__aeabi_dcmple>
 800ebfa:	2800      	cmp	r0, #0
 800ebfc:	d077      	beq.n	800ecee <_strtod_l+0xa5e>
 800ebfe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d04a      	beq.n	800ec9a <_strtod_l+0xa0a>
 800ec04:	4b68      	ldr	r3, [pc, #416]	; (800eda8 <_strtod_l+0xb18>)
 800ec06:	2200      	movs	r2, #0
 800ec08:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ec0c:	4f66      	ldr	r7, [pc, #408]	; (800eda8 <_strtod_l+0xb18>)
 800ec0e:	2600      	movs	r6, #0
 800ec10:	4b62      	ldr	r3, [pc, #392]	; (800ed9c <_strtod_l+0xb0c>)
 800ec12:	402b      	ands	r3, r5
 800ec14:	930f      	str	r3, [sp, #60]	; 0x3c
 800ec16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ec18:	4b64      	ldr	r3, [pc, #400]	; (800edac <_strtod_l+0xb1c>)
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	f040 80ce 	bne.w	800edbc <_strtod_l+0xb2c>
 800ec20:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ec24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec28:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ec2c:	ec4b ab10 	vmov	d0, sl, fp
 800ec30:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ec34:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ec38:	f001 fe2c 	bl	8010894 <__ulp>
 800ec3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ec40:	ec53 2b10 	vmov	r2, r3, d0
 800ec44:	f7f1 fcd8 	bl	80005f8 <__aeabi_dmul>
 800ec48:	4652      	mov	r2, sl
 800ec4a:	465b      	mov	r3, fp
 800ec4c:	f7f1 fb1e 	bl	800028c <__adddf3>
 800ec50:	460b      	mov	r3, r1
 800ec52:	4952      	ldr	r1, [pc, #328]	; (800ed9c <_strtod_l+0xb0c>)
 800ec54:	4a56      	ldr	r2, [pc, #344]	; (800edb0 <_strtod_l+0xb20>)
 800ec56:	4019      	ands	r1, r3
 800ec58:	4291      	cmp	r1, r2
 800ec5a:	4682      	mov	sl, r0
 800ec5c:	d95b      	bls.n	800ed16 <_strtod_l+0xa86>
 800ec5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec60:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ec64:	4293      	cmp	r3, r2
 800ec66:	d103      	bne.n	800ec70 <_strtod_l+0x9e0>
 800ec68:	9b08      	ldr	r3, [sp, #32]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	f43f ad2e 	beq.w	800e6cc <_strtod_l+0x43c>
 800ec70:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800eda0 <_strtod_l+0xb10>
 800ec74:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ec78:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ec7a:	4648      	mov	r0, r9
 800ec7c:	f001 fb73 	bl	8010366 <_Bfree>
 800ec80:	9905      	ldr	r1, [sp, #20]
 800ec82:	4648      	mov	r0, r9
 800ec84:	f001 fb6f 	bl	8010366 <_Bfree>
 800ec88:	4641      	mov	r1, r8
 800ec8a:	4648      	mov	r0, r9
 800ec8c:	f001 fb6b 	bl	8010366 <_Bfree>
 800ec90:	4621      	mov	r1, r4
 800ec92:	4648      	mov	r0, r9
 800ec94:	f001 fb67 	bl	8010366 <_Bfree>
 800ec98:	e619      	b.n	800e8ce <_strtod_l+0x63e>
 800ec9a:	f1ba 0f00 	cmp.w	sl, #0
 800ec9e:	d11a      	bne.n	800ecd6 <_strtod_l+0xa46>
 800eca0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eca4:	b9eb      	cbnz	r3, 800ece2 <_strtod_l+0xa52>
 800eca6:	2200      	movs	r2, #0
 800eca8:	4b3f      	ldr	r3, [pc, #252]	; (800eda8 <_strtod_l+0xb18>)
 800ecaa:	4630      	mov	r0, r6
 800ecac:	4639      	mov	r1, r7
 800ecae:	f7f1 ff15 	bl	8000adc <__aeabi_dcmplt>
 800ecb2:	b9c8      	cbnz	r0, 800ece8 <_strtod_l+0xa58>
 800ecb4:	4630      	mov	r0, r6
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	2200      	movs	r2, #0
 800ecba:	4b3e      	ldr	r3, [pc, #248]	; (800edb4 <_strtod_l+0xb24>)
 800ecbc:	f7f1 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ecc0:	4606      	mov	r6, r0
 800ecc2:	460f      	mov	r7, r1
 800ecc4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ecc8:	9618      	str	r6, [sp, #96]	; 0x60
 800ecca:	9319      	str	r3, [sp, #100]	; 0x64
 800eccc:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ecd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ecd4:	e79c      	b.n	800ec10 <_strtod_l+0x980>
 800ecd6:	f1ba 0f01 	cmp.w	sl, #1
 800ecda:	d102      	bne.n	800ece2 <_strtod_l+0xa52>
 800ecdc:	2d00      	cmp	r5, #0
 800ecde:	f43f ad8e 	beq.w	800e7fe <_strtod_l+0x56e>
 800ece2:	2200      	movs	r2, #0
 800ece4:	4b34      	ldr	r3, [pc, #208]	; (800edb8 <_strtod_l+0xb28>)
 800ece6:	e78f      	b.n	800ec08 <_strtod_l+0x978>
 800ece8:	2600      	movs	r6, #0
 800ecea:	4f32      	ldr	r7, [pc, #200]	; (800edb4 <_strtod_l+0xb24>)
 800ecec:	e7ea      	b.n	800ecc4 <_strtod_l+0xa34>
 800ecee:	4b31      	ldr	r3, [pc, #196]	; (800edb4 <_strtod_l+0xb24>)
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	4639      	mov	r1, r7
 800ecf4:	2200      	movs	r2, #0
 800ecf6:	f7f1 fc7f 	bl	80005f8 <__aeabi_dmul>
 800ecfa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecfc:	4606      	mov	r6, r0
 800ecfe:	460f      	mov	r7, r1
 800ed00:	b933      	cbnz	r3, 800ed10 <_strtod_l+0xa80>
 800ed02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ed06:	9010      	str	r0, [sp, #64]	; 0x40
 800ed08:	9311      	str	r3, [sp, #68]	; 0x44
 800ed0a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ed0e:	e7df      	b.n	800ecd0 <_strtod_l+0xa40>
 800ed10:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ed14:	e7f9      	b.n	800ed0a <_strtod_l+0xa7a>
 800ed16:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ed1a:	9b04      	ldr	r3, [sp, #16]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d1ab      	bne.n	800ec78 <_strtod_l+0x9e8>
 800ed20:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ed24:	0d1b      	lsrs	r3, r3, #20
 800ed26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed28:	051b      	lsls	r3, r3, #20
 800ed2a:	429a      	cmp	r2, r3
 800ed2c:	465d      	mov	r5, fp
 800ed2e:	d1a3      	bne.n	800ec78 <_strtod_l+0x9e8>
 800ed30:	4639      	mov	r1, r7
 800ed32:	4630      	mov	r0, r6
 800ed34:	f7f1 ff10 	bl	8000b58 <__aeabi_d2iz>
 800ed38:	f7f1 fbf4 	bl	8000524 <__aeabi_i2d>
 800ed3c:	460b      	mov	r3, r1
 800ed3e:	4602      	mov	r2, r0
 800ed40:	4639      	mov	r1, r7
 800ed42:	4630      	mov	r0, r6
 800ed44:	f7f1 faa0 	bl	8000288 <__aeabi_dsub>
 800ed48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed4a:	4606      	mov	r6, r0
 800ed4c:	460f      	mov	r7, r1
 800ed4e:	b933      	cbnz	r3, 800ed5e <_strtod_l+0xace>
 800ed50:	f1ba 0f00 	cmp.w	sl, #0
 800ed54:	d103      	bne.n	800ed5e <_strtod_l+0xace>
 800ed56:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ed5a:	2d00      	cmp	r5, #0
 800ed5c:	d06d      	beq.n	800ee3a <_strtod_l+0xbaa>
 800ed5e:	a30a      	add	r3, pc, #40	; (adr r3, 800ed88 <_strtod_l+0xaf8>)
 800ed60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed64:	4630      	mov	r0, r6
 800ed66:	4639      	mov	r1, r7
 800ed68:	f7f1 feb8 	bl	8000adc <__aeabi_dcmplt>
 800ed6c:	2800      	cmp	r0, #0
 800ed6e:	f47f acb8 	bne.w	800e6e2 <_strtod_l+0x452>
 800ed72:	a307      	add	r3, pc, #28	; (adr r3, 800ed90 <_strtod_l+0xb00>)
 800ed74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed78:	4630      	mov	r0, r6
 800ed7a:	4639      	mov	r1, r7
 800ed7c:	f7f1 fecc 	bl	8000b18 <__aeabi_dcmpgt>
 800ed80:	2800      	cmp	r0, #0
 800ed82:	f43f af79 	beq.w	800ec78 <_strtod_l+0x9e8>
 800ed86:	e4ac      	b.n	800e6e2 <_strtod_l+0x452>
 800ed88:	94a03595 	.word	0x94a03595
 800ed8c:	3fdfffff 	.word	0x3fdfffff
 800ed90:	35afe535 	.word	0x35afe535
 800ed94:	3fe00000 	.word	0x3fe00000
 800ed98:	000fffff 	.word	0x000fffff
 800ed9c:	7ff00000 	.word	0x7ff00000
 800eda0:	7fefffff 	.word	0x7fefffff
 800eda4:	39500000 	.word	0x39500000
 800eda8:	3ff00000 	.word	0x3ff00000
 800edac:	7fe00000 	.word	0x7fe00000
 800edb0:	7c9fffff 	.word	0x7c9fffff
 800edb4:	3fe00000 	.word	0x3fe00000
 800edb8:	bff00000 	.word	0xbff00000
 800edbc:	9b04      	ldr	r3, [sp, #16]
 800edbe:	b333      	cbz	r3, 800ee0e <_strtod_l+0xb7e>
 800edc0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800edc2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800edc6:	d822      	bhi.n	800ee0e <_strtod_l+0xb7e>
 800edc8:	a327      	add	r3, pc, #156	; (adr r3, 800ee68 <_strtod_l+0xbd8>)
 800edca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800edce:	4630      	mov	r0, r6
 800edd0:	4639      	mov	r1, r7
 800edd2:	f7f1 fe8d 	bl	8000af0 <__aeabi_dcmple>
 800edd6:	b1a0      	cbz	r0, 800ee02 <_strtod_l+0xb72>
 800edd8:	4639      	mov	r1, r7
 800edda:	4630      	mov	r0, r6
 800eddc:	f7f1 fee4 	bl	8000ba8 <__aeabi_d2uiz>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	bf08      	it	eq
 800ede4:	2001      	moveq	r0, #1
 800ede6:	f7f1 fb8d 	bl	8000504 <__aeabi_ui2d>
 800edea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800edec:	4606      	mov	r6, r0
 800edee:	460f      	mov	r7, r1
 800edf0:	bb03      	cbnz	r3, 800ee34 <_strtod_l+0xba4>
 800edf2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800edf6:	9012      	str	r0, [sp, #72]	; 0x48
 800edf8:	9313      	str	r3, [sp, #76]	; 0x4c
 800edfa:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800edfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ee02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee06:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ee0a:	1a9b      	subs	r3, r3, r2
 800ee0c:	930b      	str	r3, [sp, #44]	; 0x2c
 800ee0e:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ee12:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ee16:	f001 fd3d 	bl	8010894 <__ulp>
 800ee1a:	4650      	mov	r0, sl
 800ee1c:	ec53 2b10 	vmov	r2, r3, d0
 800ee20:	4659      	mov	r1, fp
 800ee22:	f7f1 fbe9 	bl	80005f8 <__aeabi_dmul>
 800ee26:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ee2a:	f7f1 fa2f 	bl	800028c <__adddf3>
 800ee2e:	4682      	mov	sl, r0
 800ee30:	468b      	mov	fp, r1
 800ee32:	e772      	b.n	800ed1a <_strtod_l+0xa8a>
 800ee34:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ee38:	e7df      	b.n	800edfa <_strtod_l+0xb6a>
 800ee3a:	a30d      	add	r3, pc, #52	; (adr r3, 800ee70 <_strtod_l+0xbe0>)
 800ee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee40:	f7f1 fe4c 	bl	8000adc <__aeabi_dcmplt>
 800ee44:	e79c      	b.n	800ed80 <_strtod_l+0xaf0>
 800ee46:	2300      	movs	r3, #0
 800ee48:	930d      	str	r3, [sp, #52]	; 0x34
 800ee4a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ee4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ee4e:	6013      	str	r3, [r2, #0]
 800ee50:	f7ff ba61 	b.w	800e316 <_strtod_l+0x86>
 800ee54:	2b65      	cmp	r3, #101	; 0x65
 800ee56:	f04f 0200 	mov.w	r2, #0
 800ee5a:	f43f ab4e 	beq.w	800e4fa <_strtod_l+0x26a>
 800ee5e:	2101      	movs	r1, #1
 800ee60:	4614      	mov	r4, r2
 800ee62:	9104      	str	r1, [sp, #16]
 800ee64:	f7ff bacb 	b.w	800e3fe <_strtod_l+0x16e>
 800ee68:	ffc00000 	.word	0xffc00000
 800ee6c:	41dfffff 	.word	0x41dfffff
 800ee70:	94a03595 	.word	0x94a03595
 800ee74:	3fcfffff 	.word	0x3fcfffff

0800ee78 <_strtod_r>:
 800ee78:	4b05      	ldr	r3, [pc, #20]	; (800ee90 <_strtod_r+0x18>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	b410      	push	{r4}
 800ee7e:	6a1b      	ldr	r3, [r3, #32]
 800ee80:	4c04      	ldr	r4, [pc, #16]	; (800ee94 <_strtod_r+0x1c>)
 800ee82:	2b00      	cmp	r3, #0
 800ee84:	bf08      	it	eq
 800ee86:	4623      	moveq	r3, r4
 800ee88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ee8c:	f7ff ba00 	b.w	800e290 <_strtod_l>
 800ee90:	20000044 	.word	0x20000044
 800ee94:	200000a8 	.word	0x200000a8

0800ee98 <_strtol_l.isra.0>:
 800ee98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ee9c:	4680      	mov	r8, r0
 800ee9e:	4689      	mov	r9, r1
 800eea0:	4692      	mov	sl, r2
 800eea2:	461e      	mov	r6, r3
 800eea4:	460f      	mov	r7, r1
 800eea6:	463d      	mov	r5, r7
 800eea8:	9808      	ldr	r0, [sp, #32]
 800eeaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eeae:	f001 f9ed 	bl	801028c <__locale_ctype_ptr_l>
 800eeb2:	4420      	add	r0, r4
 800eeb4:	7843      	ldrb	r3, [r0, #1]
 800eeb6:	f013 0308 	ands.w	r3, r3, #8
 800eeba:	d132      	bne.n	800ef22 <_strtol_l.isra.0+0x8a>
 800eebc:	2c2d      	cmp	r4, #45	; 0x2d
 800eebe:	d132      	bne.n	800ef26 <_strtol_l.isra.0+0x8e>
 800eec0:	787c      	ldrb	r4, [r7, #1]
 800eec2:	1cbd      	adds	r5, r7, #2
 800eec4:	2201      	movs	r2, #1
 800eec6:	2e00      	cmp	r6, #0
 800eec8:	d05d      	beq.n	800ef86 <_strtol_l.isra.0+0xee>
 800eeca:	2e10      	cmp	r6, #16
 800eecc:	d109      	bne.n	800eee2 <_strtol_l.isra.0+0x4a>
 800eece:	2c30      	cmp	r4, #48	; 0x30
 800eed0:	d107      	bne.n	800eee2 <_strtol_l.isra.0+0x4a>
 800eed2:	782b      	ldrb	r3, [r5, #0]
 800eed4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eed8:	2b58      	cmp	r3, #88	; 0x58
 800eeda:	d14f      	bne.n	800ef7c <_strtol_l.isra.0+0xe4>
 800eedc:	786c      	ldrb	r4, [r5, #1]
 800eede:	2610      	movs	r6, #16
 800eee0:	3502      	adds	r5, #2
 800eee2:	2a00      	cmp	r2, #0
 800eee4:	bf14      	ite	ne
 800eee6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800eeea:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800eeee:	2700      	movs	r7, #0
 800eef0:	fbb1 fcf6 	udiv	ip, r1, r6
 800eef4:	4638      	mov	r0, r7
 800eef6:	fb06 1e1c 	mls	lr, r6, ip, r1
 800eefa:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800eefe:	2b09      	cmp	r3, #9
 800ef00:	d817      	bhi.n	800ef32 <_strtol_l.isra.0+0x9a>
 800ef02:	461c      	mov	r4, r3
 800ef04:	42a6      	cmp	r6, r4
 800ef06:	dd23      	ble.n	800ef50 <_strtol_l.isra.0+0xb8>
 800ef08:	1c7b      	adds	r3, r7, #1
 800ef0a:	d007      	beq.n	800ef1c <_strtol_l.isra.0+0x84>
 800ef0c:	4584      	cmp	ip, r0
 800ef0e:	d31c      	bcc.n	800ef4a <_strtol_l.isra.0+0xb2>
 800ef10:	d101      	bne.n	800ef16 <_strtol_l.isra.0+0x7e>
 800ef12:	45a6      	cmp	lr, r4
 800ef14:	db19      	blt.n	800ef4a <_strtol_l.isra.0+0xb2>
 800ef16:	fb00 4006 	mla	r0, r0, r6, r4
 800ef1a:	2701      	movs	r7, #1
 800ef1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ef20:	e7eb      	b.n	800eefa <_strtol_l.isra.0+0x62>
 800ef22:	462f      	mov	r7, r5
 800ef24:	e7bf      	b.n	800eea6 <_strtol_l.isra.0+0xe>
 800ef26:	2c2b      	cmp	r4, #43	; 0x2b
 800ef28:	bf04      	itt	eq
 800ef2a:	1cbd      	addeq	r5, r7, #2
 800ef2c:	787c      	ldrbeq	r4, [r7, #1]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	e7c9      	b.n	800eec6 <_strtol_l.isra.0+0x2e>
 800ef32:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800ef36:	2b19      	cmp	r3, #25
 800ef38:	d801      	bhi.n	800ef3e <_strtol_l.isra.0+0xa6>
 800ef3a:	3c37      	subs	r4, #55	; 0x37
 800ef3c:	e7e2      	b.n	800ef04 <_strtol_l.isra.0+0x6c>
 800ef3e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800ef42:	2b19      	cmp	r3, #25
 800ef44:	d804      	bhi.n	800ef50 <_strtol_l.isra.0+0xb8>
 800ef46:	3c57      	subs	r4, #87	; 0x57
 800ef48:	e7dc      	b.n	800ef04 <_strtol_l.isra.0+0x6c>
 800ef4a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800ef4e:	e7e5      	b.n	800ef1c <_strtol_l.isra.0+0x84>
 800ef50:	1c7b      	adds	r3, r7, #1
 800ef52:	d108      	bne.n	800ef66 <_strtol_l.isra.0+0xce>
 800ef54:	2322      	movs	r3, #34	; 0x22
 800ef56:	f8c8 3000 	str.w	r3, [r8]
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	f1ba 0f00 	cmp.w	sl, #0
 800ef60:	d107      	bne.n	800ef72 <_strtol_l.isra.0+0xda>
 800ef62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef66:	b102      	cbz	r2, 800ef6a <_strtol_l.isra.0+0xd2>
 800ef68:	4240      	negs	r0, r0
 800ef6a:	f1ba 0f00 	cmp.w	sl, #0
 800ef6e:	d0f8      	beq.n	800ef62 <_strtol_l.isra.0+0xca>
 800ef70:	b10f      	cbz	r7, 800ef76 <_strtol_l.isra.0+0xde>
 800ef72:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800ef76:	f8ca 9000 	str.w	r9, [sl]
 800ef7a:	e7f2      	b.n	800ef62 <_strtol_l.isra.0+0xca>
 800ef7c:	2430      	movs	r4, #48	; 0x30
 800ef7e:	2e00      	cmp	r6, #0
 800ef80:	d1af      	bne.n	800eee2 <_strtol_l.isra.0+0x4a>
 800ef82:	2608      	movs	r6, #8
 800ef84:	e7ad      	b.n	800eee2 <_strtol_l.isra.0+0x4a>
 800ef86:	2c30      	cmp	r4, #48	; 0x30
 800ef88:	d0a3      	beq.n	800eed2 <_strtol_l.isra.0+0x3a>
 800ef8a:	260a      	movs	r6, #10
 800ef8c:	e7a9      	b.n	800eee2 <_strtol_l.isra.0+0x4a>
	...

0800ef90 <_strtol_r>:
 800ef90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ef92:	4c06      	ldr	r4, [pc, #24]	; (800efac <_strtol_r+0x1c>)
 800ef94:	4d06      	ldr	r5, [pc, #24]	; (800efb0 <_strtol_r+0x20>)
 800ef96:	6824      	ldr	r4, [r4, #0]
 800ef98:	6a24      	ldr	r4, [r4, #32]
 800ef9a:	2c00      	cmp	r4, #0
 800ef9c:	bf08      	it	eq
 800ef9e:	462c      	moveq	r4, r5
 800efa0:	9400      	str	r4, [sp, #0]
 800efa2:	f7ff ff79 	bl	800ee98 <_strtol_l.isra.0>
 800efa6:	b003      	add	sp, #12
 800efa8:	bd30      	pop	{r4, r5, pc}
 800efaa:	bf00      	nop
 800efac:	20000044 	.word	0x20000044
 800efb0:	200000a8 	.word	0x200000a8

0800efb4 <quorem>:
 800efb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efb8:	6903      	ldr	r3, [r0, #16]
 800efba:	690c      	ldr	r4, [r1, #16]
 800efbc:	42a3      	cmp	r3, r4
 800efbe:	4680      	mov	r8, r0
 800efc0:	f2c0 8082 	blt.w	800f0c8 <quorem+0x114>
 800efc4:	3c01      	subs	r4, #1
 800efc6:	f101 0714 	add.w	r7, r1, #20
 800efca:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800efce:	f100 0614 	add.w	r6, r0, #20
 800efd2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800efd6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800efda:	eb06 030c 	add.w	r3, r6, ip
 800efde:	3501      	adds	r5, #1
 800efe0:	eb07 090c 	add.w	r9, r7, ip
 800efe4:	9301      	str	r3, [sp, #4]
 800efe6:	fbb0 f5f5 	udiv	r5, r0, r5
 800efea:	b395      	cbz	r5, 800f052 <quorem+0x9e>
 800efec:	f04f 0a00 	mov.w	sl, #0
 800eff0:	4638      	mov	r0, r7
 800eff2:	46b6      	mov	lr, r6
 800eff4:	46d3      	mov	fp, sl
 800eff6:	f850 2b04 	ldr.w	r2, [r0], #4
 800effa:	b293      	uxth	r3, r2
 800effc:	fb05 a303 	mla	r3, r5, r3, sl
 800f000:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f004:	b29b      	uxth	r3, r3
 800f006:	ebab 0303 	sub.w	r3, fp, r3
 800f00a:	0c12      	lsrs	r2, r2, #16
 800f00c:	f8de b000 	ldr.w	fp, [lr]
 800f010:	fb05 a202 	mla	r2, r5, r2, sl
 800f014:	fa13 f38b 	uxtah	r3, r3, fp
 800f018:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f01c:	fa1f fb82 	uxth.w	fp, r2
 800f020:	f8de 2000 	ldr.w	r2, [lr]
 800f024:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f028:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f032:	4581      	cmp	r9, r0
 800f034:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f038:	f84e 3b04 	str.w	r3, [lr], #4
 800f03c:	d2db      	bcs.n	800eff6 <quorem+0x42>
 800f03e:	f856 300c 	ldr.w	r3, [r6, ip]
 800f042:	b933      	cbnz	r3, 800f052 <quorem+0x9e>
 800f044:	9b01      	ldr	r3, [sp, #4]
 800f046:	3b04      	subs	r3, #4
 800f048:	429e      	cmp	r6, r3
 800f04a:	461a      	mov	r2, r3
 800f04c:	d330      	bcc.n	800f0b0 <quorem+0xfc>
 800f04e:	f8c8 4010 	str.w	r4, [r8, #16]
 800f052:	4640      	mov	r0, r8
 800f054:	f001 fba6 	bl	80107a4 <__mcmp>
 800f058:	2800      	cmp	r0, #0
 800f05a:	db25      	blt.n	800f0a8 <quorem+0xf4>
 800f05c:	3501      	adds	r5, #1
 800f05e:	4630      	mov	r0, r6
 800f060:	f04f 0c00 	mov.w	ip, #0
 800f064:	f857 2b04 	ldr.w	r2, [r7], #4
 800f068:	f8d0 e000 	ldr.w	lr, [r0]
 800f06c:	b293      	uxth	r3, r2
 800f06e:	ebac 0303 	sub.w	r3, ip, r3
 800f072:	0c12      	lsrs	r2, r2, #16
 800f074:	fa13 f38e 	uxtah	r3, r3, lr
 800f078:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f07c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f080:	b29b      	uxth	r3, r3
 800f082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f086:	45b9      	cmp	r9, r7
 800f088:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f08c:	f840 3b04 	str.w	r3, [r0], #4
 800f090:	d2e8      	bcs.n	800f064 <quorem+0xb0>
 800f092:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f096:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f09a:	b92a      	cbnz	r2, 800f0a8 <quorem+0xf4>
 800f09c:	3b04      	subs	r3, #4
 800f09e:	429e      	cmp	r6, r3
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	d30b      	bcc.n	800f0bc <quorem+0x108>
 800f0a4:	f8c8 4010 	str.w	r4, [r8, #16]
 800f0a8:	4628      	mov	r0, r5
 800f0aa:	b003      	add	sp, #12
 800f0ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0b0:	6812      	ldr	r2, [r2, #0]
 800f0b2:	3b04      	subs	r3, #4
 800f0b4:	2a00      	cmp	r2, #0
 800f0b6:	d1ca      	bne.n	800f04e <quorem+0x9a>
 800f0b8:	3c01      	subs	r4, #1
 800f0ba:	e7c5      	b.n	800f048 <quorem+0x94>
 800f0bc:	6812      	ldr	r2, [r2, #0]
 800f0be:	3b04      	subs	r3, #4
 800f0c0:	2a00      	cmp	r2, #0
 800f0c2:	d1ef      	bne.n	800f0a4 <quorem+0xf0>
 800f0c4:	3c01      	subs	r4, #1
 800f0c6:	e7ea      	b.n	800f09e <quorem+0xea>
 800f0c8:	2000      	movs	r0, #0
 800f0ca:	e7ee      	b.n	800f0aa <quorem+0xf6>
 800f0cc:	0000      	movs	r0, r0
	...

0800f0d0 <_dtoa_r>:
 800f0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0d4:	ec57 6b10 	vmov	r6, r7, d0
 800f0d8:	b097      	sub	sp, #92	; 0x5c
 800f0da:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f0dc:	9106      	str	r1, [sp, #24]
 800f0de:	4604      	mov	r4, r0
 800f0e0:	920b      	str	r2, [sp, #44]	; 0x2c
 800f0e2:	9312      	str	r3, [sp, #72]	; 0x48
 800f0e4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f0e8:	e9cd 6700 	strd	r6, r7, [sp]
 800f0ec:	b93d      	cbnz	r5, 800f0fe <_dtoa_r+0x2e>
 800f0ee:	2010      	movs	r0, #16
 800f0f0:	f001 f8e0 	bl	80102b4 <malloc>
 800f0f4:	6260      	str	r0, [r4, #36]	; 0x24
 800f0f6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f0fa:	6005      	str	r5, [r0, #0]
 800f0fc:	60c5      	str	r5, [r0, #12]
 800f0fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f100:	6819      	ldr	r1, [r3, #0]
 800f102:	b151      	cbz	r1, 800f11a <_dtoa_r+0x4a>
 800f104:	685a      	ldr	r2, [r3, #4]
 800f106:	604a      	str	r2, [r1, #4]
 800f108:	2301      	movs	r3, #1
 800f10a:	4093      	lsls	r3, r2
 800f10c:	608b      	str	r3, [r1, #8]
 800f10e:	4620      	mov	r0, r4
 800f110:	f001 f929 	bl	8010366 <_Bfree>
 800f114:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f116:	2200      	movs	r2, #0
 800f118:	601a      	str	r2, [r3, #0]
 800f11a:	1e3b      	subs	r3, r7, #0
 800f11c:	bfbb      	ittet	lt
 800f11e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f122:	9301      	strlt	r3, [sp, #4]
 800f124:	2300      	movge	r3, #0
 800f126:	2201      	movlt	r2, #1
 800f128:	bfac      	ite	ge
 800f12a:	f8c8 3000 	strge.w	r3, [r8]
 800f12e:	f8c8 2000 	strlt.w	r2, [r8]
 800f132:	4baf      	ldr	r3, [pc, #700]	; (800f3f0 <_dtoa_r+0x320>)
 800f134:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f138:	ea33 0308 	bics.w	r3, r3, r8
 800f13c:	d114      	bne.n	800f168 <_dtoa_r+0x98>
 800f13e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f140:	f242 730f 	movw	r3, #9999	; 0x270f
 800f144:	6013      	str	r3, [r2, #0]
 800f146:	9b00      	ldr	r3, [sp, #0]
 800f148:	b923      	cbnz	r3, 800f154 <_dtoa_r+0x84>
 800f14a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f14e:	2800      	cmp	r0, #0
 800f150:	f000 8542 	beq.w	800fbd8 <_dtoa_r+0xb08>
 800f154:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f156:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f404 <_dtoa_r+0x334>
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	f000 8544 	beq.w	800fbe8 <_dtoa_r+0xb18>
 800f160:	f10b 0303 	add.w	r3, fp, #3
 800f164:	f000 bd3e 	b.w	800fbe4 <_dtoa_r+0xb14>
 800f168:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f16c:	2200      	movs	r2, #0
 800f16e:	2300      	movs	r3, #0
 800f170:	4630      	mov	r0, r6
 800f172:	4639      	mov	r1, r7
 800f174:	f7f1 fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 800f178:	4681      	mov	r9, r0
 800f17a:	b168      	cbz	r0, 800f198 <_dtoa_r+0xc8>
 800f17c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f17e:	2301      	movs	r3, #1
 800f180:	6013      	str	r3, [r2, #0]
 800f182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f184:	2b00      	cmp	r3, #0
 800f186:	f000 8524 	beq.w	800fbd2 <_dtoa_r+0xb02>
 800f18a:	4b9a      	ldr	r3, [pc, #616]	; (800f3f4 <_dtoa_r+0x324>)
 800f18c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f18e:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f192:	6013      	str	r3, [r2, #0]
 800f194:	f000 bd28 	b.w	800fbe8 <_dtoa_r+0xb18>
 800f198:	aa14      	add	r2, sp, #80	; 0x50
 800f19a:	a915      	add	r1, sp, #84	; 0x54
 800f19c:	ec47 6b10 	vmov	d0, r6, r7
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f001 fbed 	bl	8010980 <__d2b>
 800f1a6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f1aa:	9004      	str	r0, [sp, #16]
 800f1ac:	2d00      	cmp	r5, #0
 800f1ae:	d07c      	beq.n	800f2aa <_dtoa_r+0x1da>
 800f1b0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f1b4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f1b8:	46b2      	mov	sl, r6
 800f1ba:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f1be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f1c2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f1c6:	2200      	movs	r2, #0
 800f1c8:	4b8b      	ldr	r3, [pc, #556]	; (800f3f8 <_dtoa_r+0x328>)
 800f1ca:	4650      	mov	r0, sl
 800f1cc:	4659      	mov	r1, fp
 800f1ce:	f7f1 f85b 	bl	8000288 <__aeabi_dsub>
 800f1d2:	a381      	add	r3, pc, #516	; (adr r3, 800f3d8 <_dtoa_r+0x308>)
 800f1d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1d8:	f7f1 fa0e 	bl	80005f8 <__aeabi_dmul>
 800f1dc:	a380      	add	r3, pc, #512	; (adr r3, 800f3e0 <_dtoa_r+0x310>)
 800f1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e2:	f7f1 f853 	bl	800028c <__adddf3>
 800f1e6:	4606      	mov	r6, r0
 800f1e8:	4628      	mov	r0, r5
 800f1ea:	460f      	mov	r7, r1
 800f1ec:	f7f1 f99a 	bl	8000524 <__aeabi_i2d>
 800f1f0:	a37d      	add	r3, pc, #500	; (adr r3, 800f3e8 <_dtoa_r+0x318>)
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	f7f1 f9ff 	bl	80005f8 <__aeabi_dmul>
 800f1fa:	4602      	mov	r2, r0
 800f1fc:	460b      	mov	r3, r1
 800f1fe:	4630      	mov	r0, r6
 800f200:	4639      	mov	r1, r7
 800f202:	f7f1 f843 	bl	800028c <__adddf3>
 800f206:	4606      	mov	r6, r0
 800f208:	460f      	mov	r7, r1
 800f20a:	f7f1 fca5 	bl	8000b58 <__aeabi_d2iz>
 800f20e:	2200      	movs	r2, #0
 800f210:	4682      	mov	sl, r0
 800f212:	2300      	movs	r3, #0
 800f214:	4630      	mov	r0, r6
 800f216:	4639      	mov	r1, r7
 800f218:	f7f1 fc60 	bl	8000adc <__aeabi_dcmplt>
 800f21c:	b148      	cbz	r0, 800f232 <_dtoa_r+0x162>
 800f21e:	4650      	mov	r0, sl
 800f220:	f7f1 f980 	bl	8000524 <__aeabi_i2d>
 800f224:	4632      	mov	r2, r6
 800f226:	463b      	mov	r3, r7
 800f228:	f7f1 fc4e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f22c:	b908      	cbnz	r0, 800f232 <_dtoa_r+0x162>
 800f22e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f232:	f1ba 0f16 	cmp.w	sl, #22
 800f236:	d859      	bhi.n	800f2ec <_dtoa_r+0x21c>
 800f238:	4970      	ldr	r1, [pc, #448]	; (800f3fc <_dtoa_r+0x32c>)
 800f23a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f23e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f242:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f246:	f7f1 fc67 	bl	8000b18 <__aeabi_dcmpgt>
 800f24a:	2800      	cmp	r0, #0
 800f24c:	d050      	beq.n	800f2f0 <_dtoa_r+0x220>
 800f24e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f252:	2300      	movs	r3, #0
 800f254:	930f      	str	r3, [sp, #60]	; 0x3c
 800f256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f258:	1b5d      	subs	r5, r3, r5
 800f25a:	f1b5 0801 	subs.w	r8, r5, #1
 800f25e:	bf49      	itett	mi
 800f260:	f1c5 0301 	rsbmi	r3, r5, #1
 800f264:	2300      	movpl	r3, #0
 800f266:	9305      	strmi	r3, [sp, #20]
 800f268:	f04f 0800 	movmi.w	r8, #0
 800f26c:	bf58      	it	pl
 800f26e:	9305      	strpl	r3, [sp, #20]
 800f270:	f1ba 0f00 	cmp.w	sl, #0
 800f274:	db3e      	blt.n	800f2f4 <_dtoa_r+0x224>
 800f276:	2300      	movs	r3, #0
 800f278:	44d0      	add	r8, sl
 800f27a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f27e:	9307      	str	r3, [sp, #28]
 800f280:	9b06      	ldr	r3, [sp, #24]
 800f282:	2b09      	cmp	r3, #9
 800f284:	f200 8090 	bhi.w	800f3a8 <_dtoa_r+0x2d8>
 800f288:	2b05      	cmp	r3, #5
 800f28a:	bfc4      	itt	gt
 800f28c:	3b04      	subgt	r3, #4
 800f28e:	9306      	strgt	r3, [sp, #24]
 800f290:	9b06      	ldr	r3, [sp, #24]
 800f292:	f1a3 0302 	sub.w	r3, r3, #2
 800f296:	bfcc      	ite	gt
 800f298:	2500      	movgt	r5, #0
 800f29a:	2501      	movle	r5, #1
 800f29c:	2b03      	cmp	r3, #3
 800f29e:	f200 808f 	bhi.w	800f3c0 <_dtoa_r+0x2f0>
 800f2a2:	e8df f003 	tbb	[pc, r3]
 800f2a6:	7f7d      	.short	0x7f7d
 800f2a8:	7131      	.short	0x7131
 800f2aa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f2ae:	441d      	add	r5, r3
 800f2b0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f2b4:	2820      	cmp	r0, #32
 800f2b6:	dd13      	ble.n	800f2e0 <_dtoa_r+0x210>
 800f2b8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f2bc:	9b00      	ldr	r3, [sp, #0]
 800f2be:	fa08 f800 	lsl.w	r8, r8, r0
 800f2c2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f2c6:	fa23 f000 	lsr.w	r0, r3, r0
 800f2ca:	ea48 0000 	orr.w	r0, r8, r0
 800f2ce:	f7f1 f919 	bl	8000504 <__aeabi_ui2d>
 800f2d2:	2301      	movs	r3, #1
 800f2d4:	4682      	mov	sl, r0
 800f2d6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f2da:	3d01      	subs	r5, #1
 800f2dc:	9313      	str	r3, [sp, #76]	; 0x4c
 800f2de:	e772      	b.n	800f1c6 <_dtoa_r+0xf6>
 800f2e0:	9b00      	ldr	r3, [sp, #0]
 800f2e2:	f1c0 0020 	rsb	r0, r0, #32
 800f2e6:	fa03 f000 	lsl.w	r0, r3, r0
 800f2ea:	e7f0      	b.n	800f2ce <_dtoa_r+0x1fe>
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e7b1      	b.n	800f254 <_dtoa_r+0x184>
 800f2f0:	900f      	str	r0, [sp, #60]	; 0x3c
 800f2f2:	e7b0      	b.n	800f256 <_dtoa_r+0x186>
 800f2f4:	9b05      	ldr	r3, [sp, #20]
 800f2f6:	eba3 030a 	sub.w	r3, r3, sl
 800f2fa:	9305      	str	r3, [sp, #20]
 800f2fc:	f1ca 0300 	rsb	r3, sl, #0
 800f300:	9307      	str	r3, [sp, #28]
 800f302:	2300      	movs	r3, #0
 800f304:	930e      	str	r3, [sp, #56]	; 0x38
 800f306:	e7bb      	b.n	800f280 <_dtoa_r+0x1b0>
 800f308:	2301      	movs	r3, #1
 800f30a:	930a      	str	r3, [sp, #40]	; 0x28
 800f30c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f30e:	2b00      	cmp	r3, #0
 800f310:	dd59      	ble.n	800f3c6 <_dtoa_r+0x2f6>
 800f312:	9302      	str	r3, [sp, #8]
 800f314:	4699      	mov	r9, r3
 800f316:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f318:	2200      	movs	r2, #0
 800f31a:	6072      	str	r2, [r6, #4]
 800f31c:	2204      	movs	r2, #4
 800f31e:	f102 0014 	add.w	r0, r2, #20
 800f322:	4298      	cmp	r0, r3
 800f324:	6871      	ldr	r1, [r6, #4]
 800f326:	d953      	bls.n	800f3d0 <_dtoa_r+0x300>
 800f328:	4620      	mov	r0, r4
 800f32a:	f000 ffe8 	bl	80102fe <_Balloc>
 800f32e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f330:	6030      	str	r0, [r6, #0]
 800f332:	f1b9 0f0e 	cmp.w	r9, #14
 800f336:	f8d3 b000 	ldr.w	fp, [r3]
 800f33a:	f200 80e6 	bhi.w	800f50a <_dtoa_r+0x43a>
 800f33e:	2d00      	cmp	r5, #0
 800f340:	f000 80e3 	beq.w	800f50a <_dtoa_r+0x43a>
 800f344:	ed9d 7b00 	vldr	d7, [sp]
 800f348:	f1ba 0f00 	cmp.w	sl, #0
 800f34c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f350:	dd74      	ble.n	800f43c <_dtoa_r+0x36c>
 800f352:	4a2a      	ldr	r2, [pc, #168]	; (800f3fc <_dtoa_r+0x32c>)
 800f354:	f00a 030f 	and.w	r3, sl, #15
 800f358:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f35c:	ed93 7b00 	vldr	d7, [r3]
 800f360:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f364:	06f0      	lsls	r0, r6, #27
 800f366:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f36a:	d565      	bpl.n	800f438 <_dtoa_r+0x368>
 800f36c:	4b24      	ldr	r3, [pc, #144]	; (800f400 <_dtoa_r+0x330>)
 800f36e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f372:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f376:	f7f1 fa69 	bl	800084c <__aeabi_ddiv>
 800f37a:	e9cd 0100 	strd	r0, r1, [sp]
 800f37e:	f006 060f 	and.w	r6, r6, #15
 800f382:	2503      	movs	r5, #3
 800f384:	4f1e      	ldr	r7, [pc, #120]	; (800f400 <_dtoa_r+0x330>)
 800f386:	e04c      	b.n	800f422 <_dtoa_r+0x352>
 800f388:	2301      	movs	r3, #1
 800f38a:	930a      	str	r3, [sp, #40]	; 0x28
 800f38c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f38e:	4453      	add	r3, sl
 800f390:	f103 0901 	add.w	r9, r3, #1
 800f394:	9302      	str	r3, [sp, #8]
 800f396:	464b      	mov	r3, r9
 800f398:	2b01      	cmp	r3, #1
 800f39a:	bfb8      	it	lt
 800f39c:	2301      	movlt	r3, #1
 800f39e:	e7ba      	b.n	800f316 <_dtoa_r+0x246>
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	e7b2      	b.n	800f30a <_dtoa_r+0x23a>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	e7f0      	b.n	800f38a <_dtoa_r+0x2ba>
 800f3a8:	2501      	movs	r5, #1
 800f3aa:	2300      	movs	r3, #0
 800f3ac:	9306      	str	r3, [sp, #24]
 800f3ae:	950a      	str	r5, [sp, #40]	; 0x28
 800f3b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f3b4:	9302      	str	r3, [sp, #8]
 800f3b6:	4699      	mov	r9, r3
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	2312      	movs	r3, #18
 800f3bc:	920b      	str	r2, [sp, #44]	; 0x2c
 800f3be:	e7aa      	b.n	800f316 <_dtoa_r+0x246>
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	930a      	str	r3, [sp, #40]	; 0x28
 800f3c4:	e7f4      	b.n	800f3b0 <_dtoa_r+0x2e0>
 800f3c6:	2301      	movs	r3, #1
 800f3c8:	9302      	str	r3, [sp, #8]
 800f3ca:	4699      	mov	r9, r3
 800f3cc:	461a      	mov	r2, r3
 800f3ce:	e7f5      	b.n	800f3bc <_dtoa_r+0x2ec>
 800f3d0:	3101      	adds	r1, #1
 800f3d2:	6071      	str	r1, [r6, #4]
 800f3d4:	0052      	lsls	r2, r2, #1
 800f3d6:	e7a2      	b.n	800f31e <_dtoa_r+0x24e>
 800f3d8:	636f4361 	.word	0x636f4361
 800f3dc:	3fd287a7 	.word	0x3fd287a7
 800f3e0:	8b60c8b3 	.word	0x8b60c8b3
 800f3e4:	3fc68a28 	.word	0x3fc68a28
 800f3e8:	509f79fb 	.word	0x509f79fb
 800f3ec:	3fd34413 	.word	0x3fd34413
 800f3f0:	7ff00000 	.word	0x7ff00000
 800f3f4:	08013421 	.word	0x08013421
 800f3f8:	3ff80000 	.word	0x3ff80000
 800f3fc:	080134e0 	.word	0x080134e0
 800f400:	080134b8 	.word	0x080134b8
 800f404:	080134a9 	.word	0x080134a9
 800f408:	07f1      	lsls	r1, r6, #31
 800f40a:	d508      	bpl.n	800f41e <_dtoa_r+0x34e>
 800f40c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f410:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f414:	f7f1 f8f0 	bl	80005f8 <__aeabi_dmul>
 800f418:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f41c:	3501      	adds	r5, #1
 800f41e:	1076      	asrs	r6, r6, #1
 800f420:	3708      	adds	r7, #8
 800f422:	2e00      	cmp	r6, #0
 800f424:	d1f0      	bne.n	800f408 <_dtoa_r+0x338>
 800f426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f42a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f42e:	f7f1 fa0d 	bl	800084c <__aeabi_ddiv>
 800f432:	e9cd 0100 	strd	r0, r1, [sp]
 800f436:	e01a      	b.n	800f46e <_dtoa_r+0x39e>
 800f438:	2502      	movs	r5, #2
 800f43a:	e7a3      	b.n	800f384 <_dtoa_r+0x2b4>
 800f43c:	f000 80a0 	beq.w	800f580 <_dtoa_r+0x4b0>
 800f440:	f1ca 0600 	rsb	r6, sl, #0
 800f444:	4b9f      	ldr	r3, [pc, #636]	; (800f6c4 <_dtoa_r+0x5f4>)
 800f446:	4fa0      	ldr	r7, [pc, #640]	; (800f6c8 <_dtoa_r+0x5f8>)
 800f448:	f006 020f 	and.w	r2, r6, #15
 800f44c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f454:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f458:	f7f1 f8ce 	bl	80005f8 <__aeabi_dmul>
 800f45c:	e9cd 0100 	strd	r0, r1, [sp]
 800f460:	1136      	asrs	r6, r6, #4
 800f462:	2300      	movs	r3, #0
 800f464:	2502      	movs	r5, #2
 800f466:	2e00      	cmp	r6, #0
 800f468:	d17f      	bne.n	800f56a <_dtoa_r+0x49a>
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1e1      	bne.n	800f432 <_dtoa_r+0x362>
 800f46e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f470:	2b00      	cmp	r3, #0
 800f472:	f000 8087 	beq.w	800f584 <_dtoa_r+0x4b4>
 800f476:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f47a:	2200      	movs	r2, #0
 800f47c:	4b93      	ldr	r3, [pc, #588]	; (800f6cc <_dtoa_r+0x5fc>)
 800f47e:	4630      	mov	r0, r6
 800f480:	4639      	mov	r1, r7
 800f482:	f7f1 fb2b 	bl	8000adc <__aeabi_dcmplt>
 800f486:	2800      	cmp	r0, #0
 800f488:	d07c      	beq.n	800f584 <_dtoa_r+0x4b4>
 800f48a:	f1b9 0f00 	cmp.w	r9, #0
 800f48e:	d079      	beq.n	800f584 <_dtoa_r+0x4b4>
 800f490:	9b02      	ldr	r3, [sp, #8]
 800f492:	2b00      	cmp	r3, #0
 800f494:	dd35      	ble.n	800f502 <_dtoa_r+0x432>
 800f496:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f49a:	9308      	str	r3, [sp, #32]
 800f49c:	4639      	mov	r1, r7
 800f49e:	2200      	movs	r2, #0
 800f4a0:	4b8b      	ldr	r3, [pc, #556]	; (800f6d0 <_dtoa_r+0x600>)
 800f4a2:	4630      	mov	r0, r6
 800f4a4:	f7f1 f8a8 	bl	80005f8 <__aeabi_dmul>
 800f4a8:	e9cd 0100 	strd	r0, r1, [sp]
 800f4ac:	9f02      	ldr	r7, [sp, #8]
 800f4ae:	3501      	adds	r5, #1
 800f4b0:	4628      	mov	r0, r5
 800f4b2:	f7f1 f837 	bl	8000524 <__aeabi_i2d>
 800f4b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4ba:	f7f1 f89d 	bl	80005f8 <__aeabi_dmul>
 800f4be:	2200      	movs	r2, #0
 800f4c0:	4b84      	ldr	r3, [pc, #528]	; (800f6d4 <_dtoa_r+0x604>)
 800f4c2:	f7f0 fee3 	bl	800028c <__adddf3>
 800f4c6:	4605      	mov	r5, r0
 800f4c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f4cc:	2f00      	cmp	r7, #0
 800f4ce:	d15d      	bne.n	800f58c <_dtoa_r+0x4bc>
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	4b81      	ldr	r3, [pc, #516]	; (800f6d8 <_dtoa_r+0x608>)
 800f4d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4d8:	f7f0 fed6 	bl	8000288 <__aeabi_dsub>
 800f4dc:	462a      	mov	r2, r5
 800f4de:	4633      	mov	r3, r6
 800f4e0:	e9cd 0100 	strd	r0, r1, [sp]
 800f4e4:	f7f1 fb18 	bl	8000b18 <__aeabi_dcmpgt>
 800f4e8:	2800      	cmp	r0, #0
 800f4ea:	f040 8288 	bne.w	800f9fe <_dtoa_r+0x92e>
 800f4ee:	462a      	mov	r2, r5
 800f4f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f4f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f4f8:	f7f1 faf0 	bl	8000adc <__aeabi_dcmplt>
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	f040 827c 	bne.w	800f9fa <_dtoa_r+0x92a>
 800f502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f506:	e9cd 2300 	strd	r2, r3, [sp]
 800f50a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f2c0 8150 	blt.w	800f7b2 <_dtoa_r+0x6e2>
 800f512:	f1ba 0f0e 	cmp.w	sl, #14
 800f516:	f300 814c 	bgt.w	800f7b2 <_dtoa_r+0x6e2>
 800f51a:	4b6a      	ldr	r3, [pc, #424]	; (800f6c4 <_dtoa_r+0x5f4>)
 800f51c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f520:	ed93 7b00 	vldr	d7, [r3]
 800f524:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f526:	2b00      	cmp	r3, #0
 800f528:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f52c:	f280 80d8 	bge.w	800f6e0 <_dtoa_r+0x610>
 800f530:	f1b9 0f00 	cmp.w	r9, #0
 800f534:	f300 80d4 	bgt.w	800f6e0 <_dtoa_r+0x610>
 800f538:	f040 825e 	bne.w	800f9f8 <_dtoa_r+0x928>
 800f53c:	2200      	movs	r2, #0
 800f53e:	4b66      	ldr	r3, [pc, #408]	; (800f6d8 <_dtoa_r+0x608>)
 800f540:	ec51 0b17 	vmov	r0, r1, d7
 800f544:	f7f1 f858 	bl	80005f8 <__aeabi_dmul>
 800f548:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f54c:	f7f1 fada 	bl	8000b04 <__aeabi_dcmpge>
 800f550:	464f      	mov	r7, r9
 800f552:	464e      	mov	r6, r9
 800f554:	2800      	cmp	r0, #0
 800f556:	f040 8234 	bne.w	800f9c2 <_dtoa_r+0x8f2>
 800f55a:	2331      	movs	r3, #49	; 0x31
 800f55c:	f10b 0501 	add.w	r5, fp, #1
 800f560:	f88b 3000 	strb.w	r3, [fp]
 800f564:	f10a 0a01 	add.w	sl, sl, #1
 800f568:	e22f      	b.n	800f9ca <_dtoa_r+0x8fa>
 800f56a:	07f2      	lsls	r2, r6, #31
 800f56c:	d505      	bpl.n	800f57a <_dtoa_r+0x4aa>
 800f56e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f572:	f7f1 f841 	bl	80005f8 <__aeabi_dmul>
 800f576:	3501      	adds	r5, #1
 800f578:	2301      	movs	r3, #1
 800f57a:	1076      	asrs	r6, r6, #1
 800f57c:	3708      	adds	r7, #8
 800f57e:	e772      	b.n	800f466 <_dtoa_r+0x396>
 800f580:	2502      	movs	r5, #2
 800f582:	e774      	b.n	800f46e <_dtoa_r+0x39e>
 800f584:	f8cd a020 	str.w	sl, [sp, #32]
 800f588:	464f      	mov	r7, r9
 800f58a:	e791      	b.n	800f4b0 <_dtoa_r+0x3e0>
 800f58c:	4b4d      	ldr	r3, [pc, #308]	; (800f6c4 <_dtoa_r+0x5f4>)
 800f58e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f592:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f596:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d047      	beq.n	800f62c <_dtoa_r+0x55c>
 800f59c:	4602      	mov	r2, r0
 800f59e:	460b      	mov	r3, r1
 800f5a0:	2000      	movs	r0, #0
 800f5a2:	494e      	ldr	r1, [pc, #312]	; (800f6dc <_dtoa_r+0x60c>)
 800f5a4:	f7f1 f952 	bl	800084c <__aeabi_ddiv>
 800f5a8:	462a      	mov	r2, r5
 800f5aa:	4633      	mov	r3, r6
 800f5ac:	f7f0 fe6c 	bl	8000288 <__aeabi_dsub>
 800f5b0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f5b4:	465d      	mov	r5, fp
 800f5b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5ba:	f7f1 facd 	bl	8000b58 <__aeabi_d2iz>
 800f5be:	4606      	mov	r6, r0
 800f5c0:	f7f0 ffb0 	bl	8000524 <__aeabi_i2d>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f5cc:	f7f0 fe5c 	bl	8000288 <__aeabi_dsub>
 800f5d0:	3630      	adds	r6, #48	; 0x30
 800f5d2:	f805 6b01 	strb.w	r6, [r5], #1
 800f5d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f5da:	e9cd 0100 	strd	r0, r1, [sp]
 800f5de:	f7f1 fa7d 	bl	8000adc <__aeabi_dcmplt>
 800f5e2:	2800      	cmp	r0, #0
 800f5e4:	d163      	bne.n	800f6ae <_dtoa_r+0x5de>
 800f5e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5ea:	2000      	movs	r0, #0
 800f5ec:	4937      	ldr	r1, [pc, #220]	; (800f6cc <_dtoa_r+0x5fc>)
 800f5ee:	f7f0 fe4b 	bl	8000288 <__aeabi_dsub>
 800f5f2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f5f6:	f7f1 fa71 	bl	8000adc <__aeabi_dcmplt>
 800f5fa:	2800      	cmp	r0, #0
 800f5fc:	f040 80b7 	bne.w	800f76e <_dtoa_r+0x69e>
 800f600:	eba5 030b 	sub.w	r3, r5, fp
 800f604:	429f      	cmp	r7, r3
 800f606:	f77f af7c 	ble.w	800f502 <_dtoa_r+0x432>
 800f60a:	2200      	movs	r2, #0
 800f60c:	4b30      	ldr	r3, [pc, #192]	; (800f6d0 <_dtoa_r+0x600>)
 800f60e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f612:	f7f0 fff1 	bl	80005f8 <__aeabi_dmul>
 800f616:	2200      	movs	r2, #0
 800f618:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f61c:	4b2c      	ldr	r3, [pc, #176]	; (800f6d0 <_dtoa_r+0x600>)
 800f61e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f622:	f7f0 ffe9 	bl	80005f8 <__aeabi_dmul>
 800f626:	e9cd 0100 	strd	r0, r1, [sp]
 800f62a:	e7c4      	b.n	800f5b6 <_dtoa_r+0x4e6>
 800f62c:	462a      	mov	r2, r5
 800f62e:	4633      	mov	r3, r6
 800f630:	f7f0 ffe2 	bl	80005f8 <__aeabi_dmul>
 800f634:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f638:	eb0b 0507 	add.w	r5, fp, r7
 800f63c:	465e      	mov	r6, fp
 800f63e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f642:	f7f1 fa89 	bl	8000b58 <__aeabi_d2iz>
 800f646:	4607      	mov	r7, r0
 800f648:	f7f0 ff6c 	bl	8000524 <__aeabi_i2d>
 800f64c:	3730      	adds	r7, #48	; 0x30
 800f64e:	4602      	mov	r2, r0
 800f650:	460b      	mov	r3, r1
 800f652:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f656:	f7f0 fe17 	bl	8000288 <__aeabi_dsub>
 800f65a:	f806 7b01 	strb.w	r7, [r6], #1
 800f65e:	42ae      	cmp	r6, r5
 800f660:	e9cd 0100 	strd	r0, r1, [sp]
 800f664:	f04f 0200 	mov.w	r2, #0
 800f668:	d126      	bne.n	800f6b8 <_dtoa_r+0x5e8>
 800f66a:	4b1c      	ldr	r3, [pc, #112]	; (800f6dc <_dtoa_r+0x60c>)
 800f66c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f670:	f7f0 fe0c 	bl	800028c <__adddf3>
 800f674:	4602      	mov	r2, r0
 800f676:	460b      	mov	r3, r1
 800f678:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f67c:	f7f1 fa4c 	bl	8000b18 <__aeabi_dcmpgt>
 800f680:	2800      	cmp	r0, #0
 800f682:	d174      	bne.n	800f76e <_dtoa_r+0x69e>
 800f684:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f688:	2000      	movs	r0, #0
 800f68a:	4914      	ldr	r1, [pc, #80]	; (800f6dc <_dtoa_r+0x60c>)
 800f68c:	f7f0 fdfc 	bl	8000288 <__aeabi_dsub>
 800f690:	4602      	mov	r2, r0
 800f692:	460b      	mov	r3, r1
 800f694:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f698:	f7f1 fa20 	bl	8000adc <__aeabi_dcmplt>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f43f af30 	beq.w	800f502 <_dtoa_r+0x432>
 800f6a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6a6:	2b30      	cmp	r3, #48	; 0x30
 800f6a8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f6ac:	d002      	beq.n	800f6b4 <_dtoa_r+0x5e4>
 800f6ae:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f6b2:	e04a      	b.n	800f74a <_dtoa_r+0x67a>
 800f6b4:	4615      	mov	r5, r2
 800f6b6:	e7f4      	b.n	800f6a2 <_dtoa_r+0x5d2>
 800f6b8:	4b05      	ldr	r3, [pc, #20]	; (800f6d0 <_dtoa_r+0x600>)
 800f6ba:	f7f0 ff9d 	bl	80005f8 <__aeabi_dmul>
 800f6be:	e9cd 0100 	strd	r0, r1, [sp]
 800f6c2:	e7bc      	b.n	800f63e <_dtoa_r+0x56e>
 800f6c4:	080134e0 	.word	0x080134e0
 800f6c8:	080134b8 	.word	0x080134b8
 800f6cc:	3ff00000 	.word	0x3ff00000
 800f6d0:	40240000 	.word	0x40240000
 800f6d4:	401c0000 	.word	0x401c0000
 800f6d8:	40140000 	.word	0x40140000
 800f6dc:	3fe00000 	.word	0x3fe00000
 800f6e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f6e4:	465d      	mov	r5, fp
 800f6e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	4639      	mov	r1, r7
 800f6ee:	f7f1 f8ad 	bl	800084c <__aeabi_ddiv>
 800f6f2:	f7f1 fa31 	bl	8000b58 <__aeabi_d2iz>
 800f6f6:	4680      	mov	r8, r0
 800f6f8:	f7f0 ff14 	bl	8000524 <__aeabi_i2d>
 800f6fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f700:	f7f0 ff7a 	bl	80005f8 <__aeabi_dmul>
 800f704:	4602      	mov	r2, r0
 800f706:	460b      	mov	r3, r1
 800f708:	4630      	mov	r0, r6
 800f70a:	4639      	mov	r1, r7
 800f70c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f710:	f7f0 fdba 	bl	8000288 <__aeabi_dsub>
 800f714:	f805 6b01 	strb.w	r6, [r5], #1
 800f718:	eba5 060b 	sub.w	r6, r5, fp
 800f71c:	45b1      	cmp	r9, r6
 800f71e:	4602      	mov	r2, r0
 800f720:	460b      	mov	r3, r1
 800f722:	d139      	bne.n	800f798 <_dtoa_r+0x6c8>
 800f724:	f7f0 fdb2 	bl	800028c <__adddf3>
 800f728:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f72c:	4606      	mov	r6, r0
 800f72e:	460f      	mov	r7, r1
 800f730:	f7f1 f9f2 	bl	8000b18 <__aeabi_dcmpgt>
 800f734:	b9c8      	cbnz	r0, 800f76a <_dtoa_r+0x69a>
 800f736:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f73a:	4630      	mov	r0, r6
 800f73c:	4639      	mov	r1, r7
 800f73e:	f7f1 f9c3 	bl	8000ac8 <__aeabi_dcmpeq>
 800f742:	b110      	cbz	r0, 800f74a <_dtoa_r+0x67a>
 800f744:	f018 0f01 	tst.w	r8, #1
 800f748:	d10f      	bne.n	800f76a <_dtoa_r+0x69a>
 800f74a:	9904      	ldr	r1, [sp, #16]
 800f74c:	4620      	mov	r0, r4
 800f74e:	f000 fe0a 	bl	8010366 <_Bfree>
 800f752:	2300      	movs	r3, #0
 800f754:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f756:	702b      	strb	r3, [r5, #0]
 800f758:	f10a 0301 	add.w	r3, sl, #1
 800f75c:	6013      	str	r3, [r2, #0]
 800f75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f760:	2b00      	cmp	r3, #0
 800f762:	f000 8241 	beq.w	800fbe8 <_dtoa_r+0xb18>
 800f766:	601d      	str	r5, [r3, #0]
 800f768:	e23e      	b.n	800fbe8 <_dtoa_r+0xb18>
 800f76a:	f8cd a020 	str.w	sl, [sp, #32]
 800f76e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f772:	2a39      	cmp	r2, #57	; 0x39
 800f774:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800f778:	d108      	bne.n	800f78c <_dtoa_r+0x6bc>
 800f77a:	459b      	cmp	fp, r3
 800f77c:	d10a      	bne.n	800f794 <_dtoa_r+0x6c4>
 800f77e:	9b08      	ldr	r3, [sp, #32]
 800f780:	3301      	adds	r3, #1
 800f782:	9308      	str	r3, [sp, #32]
 800f784:	2330      	movs	r3, #48	; 0x30
 800f786:	f88b 3000 	strb.w	r3, [fp]
 800f78a:	465b      	mov	r3, fp
 800f78c:	781a      	ldrb	r2, [r3, #0]
 800f78e:	3201      	adds	r2, #1
 800f790:	701a      	strb	r2, [r3, #0]
 800f792:	e78c      	b.n	800f6ae <_dtoa_r+0x5de>
 800f794:	461d      	mov	r5, r3
 800f796:	e7ea      	b.n	800f76e <_dtoa_r+0x69e>
 800f798:	2200      	movs	r2, #0
 800f79a:	4b9b      	ldr	r3, [pc, #620]	; (800fa08 <_dtoa_r+0x938>)
 800f79c:	f7f0 ff2c 	bl	80005f8 <__aeabi_dmul>
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	4606      	mov	r6, r0
 800f7a6:	460f      	mov	r7, r1
 800f7a8:	f7f1 f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d09a      	beq.n	800f6e6 <_dtoa_r+0x616>
 800f7b0:	e7cb      	b.n	800f74a <_dtoa_r+0x67a>
 800f7b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f7b4:	2a00      	cmp	r2, #0
 800f7b6:	f000 808b 	beq.w	800f8d0 <_dtoa_r+0x800>
 800f7ba:	9a06      	ldr	r2, [sp, #24]
 800f7bc:	2a01      	cmp	r2, #1
 800f7be:	dc6e      	bgt.n	800f89e <_dtoa_r+0x7ce>
 800f7c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f7c2:	2a00      	cmp	r2, #0
 800f7c4:	d067      	beq.n	800f896 <_dtoa_r+0x7c6>
 800f7c6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f7ca:	9f07      	ldr	r7, [sp, #28]
 800f7cc:	9d05      	ldr	r5, [sp, #20]
 800f7ce:	9a05      	ldr	r2, [sp, #20]
 800f7d0:	2101      	movs	r1, #1
 800f7d2:	441a      	add	r2, r3
 800f7d4:	4620      	mov	r0, r4
 800f7d6:	9205      	str	r2, [sp, #20]
 800f7d8:	4498      	add	r8, r3
 800f7da:	f000 fea2 	bl	8010522 <__i2b>
 800f7de:	4606      	mov	r6, r0
 800f7e0:	2d00      	cmp	r5, #0
 800f7e2:	dd0c      	ble.n	800f7fe <_dtoa_r+0x72e>
 800f7e4:	f1b8 0f00 	cmp.w	r8, #0
 800f7e8:	dd09      	ble.n	800f7fe <_dtoa_r+0x72e>
 800f7ea:	4545      	cmp	r5, r8
 800f7ec:	9a05      	ldr	r2, [sp, #20]
 800f7ee:	462b      	mov	r3, r5
 800f7f0:	bfa8      	it	ge
 800f7f2:	4643      	movge	r3, r8
 800f7f4:	1ad2      	subs	r2, r2, r3
 800f7f6:	9205      	str	r2, [sp, #20]
 800f7f8:	1aed      	subs	r5, r5, r3
 800f7fa:	eba8 0803 	sub.w	r8, r8, r3
 800f7fe:	9b07      	ldr	r3, [sp, #28]
 800f800:	b1eb      	cbz	r3, 800f83e <_dtoa_r+0x76e>
 800f802:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f804:	2b00      	cmp	r3, #0
 800f806:	d067      	beq.n	800f8d8 <_dtoa_r+0x808>
 800f808:	b18f      	cbz	r7, 800f82e <_dtoa_r+0x75e>
 800f80a:	4631      	mov	r1, r6
 800f80c:	463a      	mov	r2, r7
 800f80e:	4620      	mov	r0, r4
 800f810:	f000 ff26 	bl	8010660 <__pow5mult>
 800f814:	9a04      	ldr	r2, [sp, #16]
 800f816:	4601      	mov	r1, r0
 800f818:	4606      	mov	r6, r0
 800f81a:	4620      	mov	r0, r4
 800f81c:	f000 fe8a 	bl	8010534 <__multiply>
 800f820:	9904      	ldr	r1, [sp, #16]
 800f822:	9008      	str	r0, [sp, #32]
 800f824:	4620      	mov	r0, r4
 800f826:	f000 fd9e 	bl	8010366 <_Bfree>
 800f82a:	9b08      	ldr	r3, [sp, #32]
 800f82c:	9304      	str	r3, [sp, #16]
 800f82e:	9b07      	ldr	r3, [sp, #28]
 800f830:	1bda      	subs	r2, r3, r7
 800f832:	d004      	beq.n	800f83e <_dtoa_r+0x76e>
 800f834:	9904      	ldr	r1, [sp, #16]
 800f836:	4620      	mov	r0, r4
 800f838:	f000 ff12 	bl	8010660 <__pow5mult>
 800f83c:	9004      	str	r0, [sp, #16]
 800f83e:	2101      	movs	r1, #1
 800f840:	4620      	mov	r0, r4
 800f842:	f000 fe6e 	bl	8010522 <__i2b>
 800f846:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f848:	4607      	mov	r7, r0
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f000 81d0 	beq.w	800fbf0 <_dtoa_r+0xb20>
 800f850:	461a      	mov	r2, r3
 800f852:	4601      	mov	r1, r0
 800f854:	4620      	mov	r0, r4
 800f856:	f000 ff03 	bl	8010660 <__pow5mult>
 800f85a:	9b06      	ldr	r3, [sp, #24]
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	4607      	mov	r7, r0
 800f860:	dc40      	bgt.n	800f8e4 <_dtoa_r+0x814>
 800f862:	9b00      	ldr	r3, [sp, #0]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d139      	bne.n	800f8dc <_dtoa_r+0x80c>
 800f868:	9b01      	ldr	r3, [sp, #4]
 800f86a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d136      	bne.n	800f8e0 <_dtoa_r+0x810>
 800f872:	9b01      	ldr	r3, [sp, #4]
 800f874:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f878:	0d1b      	lsrs	r3, r3, #20
 800f87a:	051b      	lsls	r3, r3, #20
 800f87c:	b12b      	cbz	r3, 800f88a <_dtoa_r+0x7ba>
 800f87e:	9b05      	ldr	r3, [sp, #20]
 800f880:	3301      	adds	r3, #1
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	f108 0801 	add.w	r8, r8, #1
 800f888:	2301      	movs	r3, #1
 800f88a:	9307      	str	r3, [sp, #28]
 800f88c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d12a      	bne.n	800f8e8 <_dtoa_r+0x818>
 800f892:	2001      	movs	r0, #1
 800f894:	e030      	b.n	800f8f8 <_dtoa_r+0x828>
 800f896:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f898:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f89c:	e795      	b.n	800f7ca <_dtoa_r+0x6fa>
 800f89e:	9b07      	ldr	r3, [sp, #28]
 800f8a0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800f8a4:	42bb      	cmp	r3, r7
 800f8a6:	bfbf      	itttt	lt
 800f8a8:	9b07      	ldrlt	r3, [sp, #28]
 800f8aa:	9707      	strlt	r7, [sp, #28]
 800f8ac:	1afa      	sublt	r2, r7, r3
 800f8ae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f8b0:	bfbb      	ittet	lt
 800f8b2:	189b      	addlt	r3, r3, r2
 800f8b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f8b6:	1bdf      	subge	r7, r3, r7
 800f8b8:	2700      	movlt	r7, #0
 800f8ba:	f1b9 0f00 	cmp.w	r9, #0
 800f8be:	bfb5      	itete	lt
 800f8c0:	9b05      	ldrlt	r3, [sp, #20]
 800f8c2:	9d05      	ldrge	r5, [sp, #20]
 800f8c4:	eba3 0509 	sublt.w	r5, r3, r9
 800f8c8:	464b      	movge	r3, r9
 800f8ca:	bfb8      	it	lt
 800f8cc:	2300      	movlt	r3, #0
 800f8ce:	e77e      	b.n	800f7ce <_dtoa_r+0x6fe>
 800f8d0:	9f07      	ldr	r7, [sp, #28]
 800f8d2:	9d05      	ldr	r5, [sp, #20]
 800f8d4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800f8d6:	e783      	b.n	800f7e0 <_dtoa_r+0x710>
 800f8d8:	9a07      	ldr	r2, [sp, #28]
 800f8da:	e7ab      	b.n	800f834 <_dtoa_r+0x764>
 800f8dc:	2300      	movs	r3, #0
 800f8de:	e7d4      	b.n	800f88a <_dtoa_r+0x7ba>
 800f8e0:	9b00      	ldr	r3, [sp, #0]
 800f8e2:	e7d2      	b.n	800f88a <_dtoa_r+0x7ba>
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	9307      	str	r3, [sp, #28]
 800f8e8:	693b      	ldr	r3, [r7, #16]
 800f8ea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f8ee:	6918      	ldr	r0, [r3, #16]
 800f8f0:	f000 fdc9 	bl	8010486 <__hi0bits>
 800f8f4:	f1c0 0020 	rsb	r0, r0, #32
 800f8f8:	4440      	add	r0, r8
 800f8fa:	f010 001f 	ands.w	r0, r0, #31
 800f8fe:	d047      	beq.n	800f990 <_dtoa_r+0x8c0>
 800f900:	f1c0 0320 	rsb	r3, r0, #32
 800f904:	2b04      	cmp	r3, #4
 800f906:	dd3b      	ble.n	800f980 <_dtoa_r+0x8b0>
 800f908:	9b05      	ldr	r3, [sp, #20]
 800f90a:	f1c0 001c 	rsb	r0, r0, #28
 800f90e:	4403      	add	r3, r0
 800f910:	9305      	str	r3, [sp, #20]
 800f912:	4405      	add	r5, r0
 800f914:	4480      	add	r8, r0
 800f916:	9b05      	ldr	r3, [sp, #20]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	dd05      	ble.n	800f928 <_dtoa_r+0x858>
 800f91c:	461a      	mov	r2, r3
 800f91e:	9904      	ldr	r1, [sp, #16]
 800f920:	4620      	mov	r0, r4
 800f922:	f000 feeb 	bl	80106fc <__lshift>
 800f926:	9004      	str	r0, [sp, #16]
 800f928:	f1b8 0f00 	cmp.w	r8, #0
 800f92c:	dd05      	ble.n	800f93a <_dtoa_r+0x86a>
 800f92e:	4639      	mov	r1, r7
 800f930:	4642      	mov	r2, r8
 800f932:	4620      	mov	r0, r4
 800f934:	f000 fee2 	bl	80106fc <__lshift>
 800f938:	4607      	mov	r7, r0
 800f93a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f93c:	b353      	cbz	r3, 800f994 <_dtoa_r+0x8c4>
 800f93e:	4639      	mov	r1, r7
 800f940:	9804      	ldr	r0, [sp, #16]
 800f942:	f000 ff2f 	bl	80107a4 <__mcmp>
 800f946:	2800      	cmp	r0, #0
 800f948:	da24      	bge.n	800f994 <_dtoa_r+0x8c4>
 800f94a:	2300      	movs	r3, #0
 800f94c:	220a      	movs	r2, #10
 800f94e:	9904      	ldr	r1, [sp, #16]
 800f950:	4620      	mov	r0, r4
 800f952:	f000 fd1f 	bl	8010394 <__multadd>
 800f956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f958:	9004      	str	r0, [sp, #16]
 800f95a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f95e:	2b00      	cmp	r3, #0
 800f960:	f000 814d 	beq.w	800fbfe <_dtoa_r+0xb2e>
 800f964:	2300      	movs	r3, #0
 800f966:	4631      	mov	r1, r6
 800f968:	220a      	movs	r2, #10
 800f96a:	4620      	mov	r0, r4
 800f96c:	f000 fd12 	bl	8010394 <__multadd>
 800f970:	9b02      	ldr	r3, [sp, #8]
 800f972:	2b00      	cmp	r3, #0
 800f974:	4606      	mov	r6, r0
 800f976:	dc4f      	bgt.n	800fa18 <_dtoa_r+0x948>
 800f978:	9b06      	ldr	r3, [sp, #24]
 800f97a:	2b02      	cmp	r3, #2
 800f97c:	dd4c      	ble.n	800fa18 <_dtoa_r+0x948>
 800f97e:	e011      	b.n	800f9a4 <_dtoa_r+0x8d4>
 800f980:	d0c9      	beq.n	800f916 <_dtoa_r+0x846>
 800f982:	9a05      	ldr	r2, [sp, #20]
 800f984:	331c      	adds	r3, #28
 800f986:	441a      	add	r2, r3
 800f988:	9205      	str	r2, [sp, #20]
 800f98a:	441d      	add	r5, r3
 800f98c:	4498      	add	r8, r3
 800f98e:	e7c2      	b.n	800f916 <_dtoa_r+0x846>
 800f990:	4603      	mov	r3, r0
 800f992:	e7f6      	b.n	800f982 <_dtoa_r+0x8b2>
 800f994:	f1b9 0f00 	cmp.w	r9, #0
 800f998:	dc38      	bgt.n	800fa0c <_dtoa_r+0x93c>
 800f99a:	9b06      	ldr	r3, [sp, #24]
 800f99c:	2b02      	cmp	r3, #2
 800f99e:	dd35      	ble.n	800fa0c <_dtoa_r+0x93c>
 800f9a0:	f8cd 9008 	str.w	r9, [sp, #8]
 800f9a4:	9b02      	ldr	r3, [sp, #8]
 800f9a6:	b963      	cbnz	r3, 800f9c2 <_dtoa_r+0x8f2>
 800f9a8:	4639      	mov	r1, r7
 800f9aa:	2205      	movs	r2, #5
 800f9ac:	4620      	mov	r0, r4
 800f9ae:	f000 fcf1 	bl	8010394 <__multadd>
 800f9b2:	4601      	mov	r1, r0
 800f9b4:	4607      	mov	r7, r0
 800f9b6:	9804      	ldr	r0, [sp, #16]
 800f9b8:	f000 fef4 	bl	80107a4 <__mcmp>
 800f9bc:	2800      	cmp	r0, #0
 800f9be:	f73f adcc 	bgt.w	800f55a <_dtoa_r+0x48a>
 800f9c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9c4:	465d      	mov	r5, fp
 800f9c6:	ea6f 0a03 	mvn.w	sl, r3
 800f9ca:	f04f 0900 	mov.w	r9, #0
 800f9ce:	4639      	mov	r1, r7
 800f9d0:	4620      	mov	r0, r4
 800f9d2:	f000 fcc8 	bl	8010366 <_Bfree>
 800f9d6:	2e00      	cmp	r6, #0
 800f9d8:	f43f aeb7 	beq.w	800f74a <_dtoa_r+0x67a>
 800f9dc:	f1b9 0f00 	cmp.w	r9, #0
 800f9e0:	d005      	beq.n	800f9ee <_dtoa_r+0x91e>
 800f9e2:	45b1      	cmp	r9, r6
 800f9e4:	d003      	beq.n	800f9ee <_dtoa_r+0x91e>
 800f9e6:	4649      	mov	r1, r9
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	f000 fcbc 	bl	8010366 <_Bfree>
 800f9ee:	4631      	mov	r1, r6
 800f9f0:	4620      	mov	r0, r4
 800f9f2:	f000 fcb8 	bl	8010366 <_Bfree>
 800f9f6:	e6a8      	b.n	800f74a <_dtoa_r+0x67a>
 800f9f8:	2700      	movs	r7, #0
 800f9fa:	463e      	mov	r6, r7
 800f9fc:	e7e1      	b.n	800f9c2 <_dtoa_r+0x8f2>
 800f9fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fa02:	463e      	mov	r6, r7
 800fa04:	e5a9      	b.n	800f55a <_dtoa_r+0x48a>
 800fa06:	bf00      	nop
 800fa08:	40240000 	.word	0x40240000
 800fa0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa0e:	f8cd 9008 	str.w	r9, [sp, #8]
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	f000 80fa 	beq.w	800fc0c <_dtoa_r+0xb3c>
 800fa18:	2d00      	cmp	r5, #0
 800fa1a:	dd05      	ble.n	800fa28 <_dtoa_r+0x958>
 800fa1c:	4631      	mov	r1, r6
 800fa1e:	462a      	mov	r2, r5
 800fa20:	4620      	mov	r0, r4
 800fa22:	f000 fe6b 	bl	80106fc <__lshift>
 800fa26:	4606      	mov	r6, r0
 800fa28:	9b07      	ldr	r3, [sp, #28]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d04c      	beq.n	800fac8 <_dtoa_r+0x9f8>
 800fa2e:	6871      	ldr	r1, [r6, #4]
 800fa30:	4620      	mov	r0, r4
 800fa32:	f000 fc64 	bl	80102fe <_Balloc>
 800fa36:	6932      	ldr	r2, [r6, #16]
 800fa38:	3202      	adds	r2, #2
 800fa3a:	4605      	mov	r5, r0
 800fa3c:	0092      	lsls	r2, r2, #2
 800fa3e:	f106 010c 	add.w	r1, r6, #12
 800fa42:	300c      	adds	r0, #12
 800fa44:	f000 fc50 	bl	80102e8 <memcpy>
 800fa48:	2201      	movs	r2, #1
 800fa4a:	4629      	mov	r1, r5
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f000 fe55 	bl	80106fc <__lshift>
 800fa52:	9b00      	ldr	r3, [sp, #0]
 800fa54:	f8cd b014 	str.w	fp, [sp, #20]
 800fa58:	f003 0301 	and.w	r3, r3, #1
 800fa5c:	46b1      	mov	r9, r6
 800fa5e:	9307      	str	r3, [sp, #28]
 800fa60:	4606      	mov	r6, r0
 800fa62:	4639      	mov	r1, r7
 800fa64:	9804      	ldr	r0, [sp, #16]
 800fa66:	f7ff faa5 	bl	800efb4 <quorem>
 800fa6a:	4649      	mov	r1, r9
 800fa6c:	4605      	mov	r5, r0
 800fa6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fa72:	9804      	ldr	r0, [sp, #16]
 800fa74:	f000 fe96 	bl	80107a4 <__mcmp>
 800fa78:	4632      	mov	r2, r6
 800fa7a:	9000      	str	r0, [sp, #0]
 800fa7c:	4639      	mov	r1, r7
 800fa7e:	4620      	mov	r0, r4
 800fa80:	f000 feaa 	bl	80107d8 <__mdiff>
 800fa84:	68c3      	ldr	r3, [r0, #12]
 800fa86:	4602      	mov	r2, r0
 800fa88:	bb03      	cbnz	r3, 800facc <_dtoa_r+0x9fc>
 800fa8a:	4601      	mov	r1, r0
 800fa8c:	9008      	str	r0, [sp, #32]
 800fa8e:	9804      	ldr	r0, [sp, #16]
 800fa90:	f000 fe88 	bl	80107a4 <__mcmp>
 800fa94:	9a08      	ldr	r2, [sp, #32]
 800fa96:	4603      	mov	r3, r0
 800fa98:	4611      	mov	r1, r2
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	9308      	str	r3, [sp, #32]
 800fa9e:	f000 fc62 	bl	8010366 <_Bfree>
 800faa2:	9b08      	ldr	r3, [sp, #32]
 800faa4:	b9a3      	cbnz	r3, 800fad0 <_dtoa_r+0xa00>
 800faa6:	9a06      	ldr	r2, [sp, #24]
 800faa8:	b992      	cbnz	r2, 800fad0 <_dtoa_r+0xa00>
 800faaa:	9a07      	ldr	r2, [sp, #28]
 800faac:	b982      	cbnz	r2, 800fad0 <_dtoa_r+0xa00>
 800faae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fab2:	d029      	beq.n	800fb08 <_dtoa_r+0xa38>
 800fab4:	9b00      	ldr	r3, [sp, #0]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	dd01      	ble.n	800fabe <_dtoa_r+0x9ee>
 800faba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fabe:	9b05      	ldr	r3, [sp, #20]
 800fac0:	1c5d      	adds	r5, r3, #1
 800fac2:	f883 8000 	strb.w	r8, [r3]
 800fac6:	e782      	b.n	800f9ce <_dtoa_r+0x8fe>
 800fac8:	4630      	mov	r0, r6
 800faca:	e7c2      	b.n	800fa52 <_dtoa_r+0x982>
 800facc:	2301      	movs	r3, #1
 800face:	e7e3      	b.n	800fa98 <_dtoa_r+0x9c8>
 800fad0:	9a00      	ldr	r2, [sp, #0]
 800fad2:	2a00      	cmp	r2, #0
 800fad4:	db04      	blt.n	800fae0 <_dtoa_r+0xa10>
 800fad6:	d125      	bne.n	800fb24 <_dtoa_r+0xa54>
 800fad8:	9a06      	ldr	r2, [sp, #24]
 800fada:	bb1a      	cbnz	r2, 800fb24 <_dtoa_r+0xa54>
 800fadc:	9a07      	ldr	r2, [sp, #28]
 800fade:	bb0a      	cbnz	r2, 800fb24 <_dtoa_r+0xa54>
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	ddec      	ble.n	800fabe <_dtoa_r+0x9ee>
 800fae4:	2201      	movs	r2, #1
 800fae6:	9904      	ldr	r1, [sp, #16]
 800fae8:	4620      	mov	r0, r4
 800faea:	f000 fe07 	bl	80106fc <__lshift>
 800faee:	4639      	mov	r1, r7
 800faf0:	9004      	str	r0, [sp, #16]
 800faf2:	f000 fe57 	bl	80107a4 <__mcmp>
 800faf6:	2800      	cmp	r0, #0
 800faf8:	dc03      	bgt.n	800fb02 <_dtoa_r+0xa32>
 800fafa:	d1e0      	bne.n	800fabe <_dtoa_r+0x9ee>
 800fafc:	f018 0f01 	tst.w	r8, #1
 800fb00:	d0dd      	beq.n	800fabe <_dtoa_r+0x9ee>
 800fb02:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fb06:	d1d8      	bne.n	800faba <_dtoa_r+0x9ea>
 800fb08:	9b05      	ldr	r3, [sp, #20]
 800fb0a:	9a05      	ldr	r2, [sp, #20]
 800fb0c:	1c5d      	adds	r5, r3, #1
 800fb0e:	2339      	movs	r3, #57	; 0x39
 800fb10:	7013      	strb	r3, [r2, #0]
 800fb12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fb16:	2b39      	cmp	r3, #57	; 0x39
 800fb18:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fb1c:	d04f      	beq.n	800fbbe <_dtoa_r+0xaee>
 800fb1e:	3301      	adds	r3, #1
 800fb20:	7013      	strb	r3, [r2, #0]
 800fb22:	e754      	b.n	800f9ce <_dtoa_r+0x8fe>
 800fb24:	9a05      	ldr	r2, [sp, #20]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	f102 0501 	add.w	r5, r2, #1
 800fb2c:	dd06      	ble.n	800fb3c <_dtoa_r+0xa6c>
 800fb2e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fb32:	d0e9      	beq.n	800fb08 <_dtoa_r+0xa38>
 800fb34:	f108 0801 	add.w	r8, r8, #1
 800fb38:	9b05      	ldr	r3, [sp, #20]
 800fb3a:	e7c2      	b.n	800fac2 <_dtoa_r+0x9f2>
 800fb3c:	9a02      	ldr	r2, [sp, #8]
 800fb3e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fb42:	eba5 030b 	sub.w	r3, r5, fp
 800fb46:	4293      	cmp	r3, r2
 800fb48:	d021      	beq.n	800fb8e <_dtoa_r+0xabe>
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	220a      	movs	r2, #10
 800fb4e:	9904      	ldr	r1, [sp, #16]
 800fb50:	4620      	mov	r0, r4
 800fb52:	f000 fc1f 	bl	8010394 <__multadd>
 800fb56:	45b1      	cmp	r9, r6
 800fb58:	9004      	str	r0, [sp, #16]
 800fb5a:	f04f 0300 	mov.w	r3, #0
 800fb5e:	f04f 020a 	mov.w	r2, #10
 800fb62:	4649      	mov	r1, r9
 800fb64:	4620      	mov	r0, r4
 800fb66:	d105      	bne.n	800fb74 <_dtoa_r+0xaa4>
 800fb68:	f000 fc14 	bl	8010394 <__multadd>
 800fb6c:	4681      	mov	r9, r0
 800fb6e:	4606      	mov	r6, r0
 800fb70:	9505      	str	r5, [sp, #20]
 800fb72:	e776      	b.n	800fa62 <_dtoa_r+0x992>
 800fb74:	f000 fc0e 	bl	8010394 <__multadd>
 800fb78:	4631      	mov	r1, r6
 800fb7a:	4681      	mov	r9, r0
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	220a      	movs	r2, #10
 800fb80:	4620      	mov	r0, r4
 800fb82:	f000 fc07 	bl	8010394 <__multadd>
 800fb86:	4606      	mov	r6, r0
 800fb88:	e7f2      	b.n	800fb70 <_dtoa_r+0xaa0>
 800fb8a:	f04f 0900 	mov.w	r9, #0
 800fb8e:	2201      	movs	r2, #1
 800fb90:	9904      	ldr	r1, [sp, #16]
 800fb92:	4620      	mov	r0, r4
 800fb94:	f000 fdb2 	bl	80106fc <__lshift>
 800fb98:	4639      	mov	r1, r7
 800fb9a:	9004      	str	r0, [sp, #16]
 800fb9c:	f000 fe02 	bl	80107a4 <__mcmp>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	dcb6      	bgt.n	800fb12 <_dtoa_r+0xa42>
 800fba4:	d102      	bne.n	800fbac <_dtoa_r+0xadc>
 800fba6:	f018 0f01 	tst.w	r8, #1
 800fbaa:	d1b2      	bne.n	800fb12 <_dtoa_r+0xa42>
 800fbac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fbb0:	2b30      	cmp	r3, #48	; 0x30
 800fbb2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fbb6:	f47f af0a 	bne.w	800f9ce <_dtoa_r+0x8fe>
 800fbba:	4615      	mov	r5, r2
 800fbbc:	e7f6      	b.n	800fbac <_dtoa_r+0xadc>
 800fbbe:	4593      	cmp	fp, r2
 800fbc0:	d105      	bne.n	800fbce <_dtoa_r+0xafe>
 800fbc2:	2331      	movs	r3, #49	; 0x31
 800fbc4:	f10a 0a01 	add.w	sl, sl, #1
 800fbc8:	f88b 3000 	strb.w	r3, [fp]
 800fbcc:	e6ff      	b.n	800f9ce <_dtoa_r+0x8fe>
 800fbce:	4615      	mov	r5, r2
 800fbd0:	e79f      	b.n	800fb12 <_dtoa_r+0xa42>
 800fbd2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fc38 <_dtoa_r+0xb68>
 800fbd6:	e007      	b.n	800fbe8 <_dtoa_r+0xb18>
 800fbd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fbda:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fc3c <_dtoa_r+0xb6c>
 800fbde:	b11b      	cbz	r3, 800fbe8 <_dtoa_r+0xb18>
 800fbe0:	f10b 0308 	add.w	r3, fp, #8
 800fbe4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fbe6:	6013      	str	r3, [r2, #0]
 800fbe8:	4658      	mov	r0, fp
 800fbea:	b017      	add	sp, #92	; 0x5c
 800fbec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf0:	9b06      	ldr	r3, [sp, #24]
 800fbf2:	2b01      	cmp	r3, #1
 800fbf4:	f77f ae35 	ble.w	800f862 <_dtoa_r+0x792>
 800fbf8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fbfa:	9307      	str	r3, [sp, #28]
 800fbfc:	e649      	b.n	800f892 <_dtoa_r+0x7c2>
 800fbfe:	9b02      	ldr	r3, [sp, #8]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	dc03      	bgt.n	800fc0c <_dtoa_r+0xb3c>
 800fc04:	9b06      	ldr	r3, [sp, #24]
 800fc06:	2b02      	cmp	r3, #2
 800fc08:	f73f aecc 	bgt.w	800f9a4 <_dtoa_r+0x8d4>
 800fc0c:	465d      	mov	r5, fp
 800fc0e:	4639      	mov	r1, r7
 800fc10:	9804      	ldr	r0, [sp, #16]
 800fc12:	f7ff f9cf 	bl	800efb4 <quorem>
 800fc16:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fc1a:	f805 8b01 	strb.w	r8, [r5], #1
 800fc1e:	9a02      	ldr	r2, [sp, #8]
 800fc20:	eba5 030b 	sub.w	r3, r5, fp
 800fc24:	429a      	cmp	r2, r3
 800fc26:	ddb0      	ble.n	800fb8a <_dtoa_r+0xaba>
 800fc28:	2300      	movs	r3, #0
 800fc2a:	220a      	movs	r2, #10
 800fc2c:	9904      	ldr	r1, [sp, #16]
 800fc2e:	4620      	mov	r0, r4
 800fc30:	f000 fbb0 	bl	8010394 <__multadd>
 800fc34:	9004      	str	r0, [sp, #16]
 800fc36:	e7ea      	b.n	800fc0e <_dtoa_r+0xb3e>
 800fc38:	08013420 	.word	0x08013420
 800fc3c:	080134a0 	.word	0x080134a0

0800fc40 <rshift>:
 800fc40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc42:	6906      	ldr	r6, [r0, #16]
 800fc44:	114b      	asrs	r3, r1, #5
 800fc46:	429e      	cmp	r6, r3
 800fc48:	f100 0414 	add.w	r4, r0, #20
 800fc4c:	dd30      	ble.n	800fcb0 <rshift+0x70>
 800fc4e:	f011 011f 	ands.w	r1, r1, #31
 800fc52:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800fc56:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800fc5a:	d108      	bne.n	800fc6e <rshift+0x2e>
 800fc5c:	4621      	mov	r1, r4
 800fc5e:	42b2      	cmp	r2, r6
 800fc60:	460b      	mov	r3, r1
 800fc62:	d211      	bcs.n	800fc88 <rshift+0x48>
 800fc64:	f852 3b04 	ldr.w	r3, [r2], #4
 800fc68:	f841 3b04 	str.w	r3, [r1], #4
 800fc6c:	e7f7      	b.n	800fc5e <rshift+0x1e>
 800fc6e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800fc72:	f1c1 0c20 	rsb	ip, r1, #32
 800fc76:	40cd      	lsrs	r5, r1
 800fc78:	3204      	adds	r2, #4
 800fc7a:	4623      	mov	r3, r4
 800fc7c:	42b2      	cmp	r2, r6
 800fc7e:	4617      	mov	r7, r2
 800fc80:	d30c      	bcc.n	800fc9c <rshift+0x5c>
 800fc82:	601d      	str	r5, [r3, #0]
 800fc84:	b105      	cbz	r5, 800fc88 <rshift+0x48>
 800fc86:	3304      	adds	r3, #4
 800fc88:	1b1a      	subs	r2, r3, r4
 800fc8a:	42a3      	cmp	r3, r4
 800fc8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800fc90:	bf08      	it	eq
 800fc92:	2300      	moveq	r3, #0
 800fc94:	6102      	str	r2, [r0, #16]
 800fc96:	bf08      	it	eq
 800fc98:	6143      	streq	r3, [r0, #20]
 800fc9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc9c:	683f      	ldr	r7, [r7, #0]
 800fc9e:	fa07 f70c 	lsl.w	r7, r7, ip
 800fca2:	433d      	orrs	r5, r7
 800fca4:	f843 5b04 	str.w	r5, [r3], #4
 800fca8:	f852 5b04 	ldr.w	r5, [r2], #4
 800fcac:	40cd      	lsrs	r5, r1
 800fcae:	e7e5      	b.n	800fc7c <rshift+0x3c>
 800fcb0:	4623      	mov	r3, r4
 800fcb2:	e7e9      	b.n	800fc88 <rshift+0x48>

0800fcb4 <__hexdig_fun>:
 800fcb4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800fcb8:	2b09      	cmp	r3, #9
 800fcba:	d802      	bhi.n	800fcc2 <__hexdig_fun+0xe>
 800fcbc:	3820      	subs	r0, #32
 800fcbe:	b2c0      	uxtb	r0, r0
 800fcc0:	4770      	bx	lr
 800fcc2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800fcc6:	2b05      	cmp	r3, #5
 800fcc8:	d801      	bhi.n	800fcce <__hexdig_fun+0x1a>
 800fcca:	3847      	subs	r0, #71	; 0x47
 800fccc:	e7f7      	b.n	800fcbe <__hexdig_fun+0xa>
 800fcce:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800fcd2:	2b05      	cmp	r3, #5
 800fcd4:	d801      	bhi.n	800fcda <__hexdig_fun+0x26>
 800fcd6:	3827      	subs	r0, #39	; 0x27
 800fcd8:	e7f1      	b.n	800fcbe <__hexdig_fun+0xa>
 800fcda:	2000      	movs	r0, #0
 800fcdc:	4770      	bx	lr

0800fcde <__gethex>:
 800fcde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fce2:	b08b      	sub	sp, #44	; 0x2c
 800fce4:	468a      	mov	sl, r1
 800fce6:	9002      	str	r0, [sp, #8]
 800fce8:	9816      	ldr	r0, [sp, #88]	; 0x58
 800fcea:	9306      	str	r3, [sp, #24]
 800fcec:	4690      	mov	r8, r2
 800fcee:	f000 fad0 	bl	8010292 <__localeconv_l>
 800fcf2:	6803      	ldr	r3, [r0, #0]
 800fcf4:	9303      	str	r3, [sp, #12]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	f7f0 fa6a 	bl	80001d0 <strlen>
 800fcfc:	9b03      	ldr	r3, [sp, #12]
 800fcfe:	9001      	str	r0, [sp, #4]
 800fd00:	4403      	add	r3, r0
 800fd02:	f04f 0b00 	mov.w	fp, #0
 800fd06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800fd0a:	9307      	str	r3, [sp, #28]
 800fd0c:	f8da 3000 	ldr.w	r3, [sl]
 800fd10:	3302      	adds	r3, #2
 800fd12:	461f      	mov	r7, r3
 800fd14:	f813 0b01 	ldrb.w	r0, [r3], #1
 800fd18:	2830      	cmp	r0, #48	; 0x30
 800fd1a:	d06c      	beq.n	800fdf6 <__gethex+0x118>
 800fd1c:	f7ff ffca 	bl	800fcb4 <__hexdig_fun>
 800fd20:	4604      	mov	r4, r0
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d16a      	bne.n	800fdfc <__gethex+0x11e>
 800fd26:	9a01      	ldr	r2, [sp, #4]
 800fd28:	9903      	ldr	r1, [sp, #12]
 800fd2a:	4638      	mov	r0, r7
 800fd2c:	f001 f8fe 	bl	8010f2c <strncmp>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d166      	bne.n	800fe02 <__gethex+0x124>
 800fd34:	9b01      	ldr	r3, [sp, #4]
 800fd36:	5cf8      	ldrb	r0, [r7, r3]
 800fd38:	18fe      	adds	r6, r7, r3
 800fd3a:	f7ff ffbb 	bl	800fcb4 <__hexdig_fun>
 800fd3e:	2800      	cmp	r0, #0
 800fd40:	d062      	beq.n	800fe08 <__gethex+0x12a>
 800fd42:	4633      	mov	r3, r6
 800fd44:	7818      	ldrb	r0, [r3, #0]
 800fd46:	2830      	cmp	r0, #48	; 0x30
 800fd48:	461f      	mov	r7, r3
 800fd4a:	f103 0301 	add.w	r3, r3, #1
 800fd4e:	d0f9      	beq.n	800fd44 <__gethex+0x66>
 800fd50:	f7ff ffb0 	bl	800fcb4 <__hexdig_fun>
 800fd54:	fab0 f580 	clz	r5, r0
 800fd58:	096d      	lsrs	r5, r5, #5
 800fd5a:	4634      	mov	r4, r6
 800fd5c:	f04f 0b01 	mov.w	fp, #1
 800fd60:	463a      	mov	r2, r7
 800fd62:	4616      	mov	r6, r2
 800fd64:	3201      	adds	r2, #1
 800fd66:	7830      	ldrb	r0, [r6, #0]
 800fd68:	f7ff ffa4 	bl	800fcb4 <__hexdig_fun>
 800fd6c:	2800      	cmp	r0, #0
 800fd6e:	d1f8      	bne.n	800fd62 <__gethex+0x84>
 800fd70:	9a01      	ldr	r2, [sp, #4]
 800fd72:	9903      	ldr	r1, [sp, #12]
 800fd74:	4630      	mov	r0, r6
 800fd76:	f001 f8d9 	bl	8010f2c <strncmp>
 800fd7a:	b950      	cbnz	r0, 800fd92 <__gethex+0xb4>
 800fd7c:	b954      	cbnz	r4, 800fd94 <__gethex+0xb6>
 800fd7e:	9b01      	ldr	r3, [sp, #4]
 800fd80:	18f4      	adds	r4, r6, r3
 800fd82:	4622      	mov	r2, r4
 800fd84:	4616      	mov	r6, r2
 800fd86:	3201      	adds	r2, #1
 800fd88:	7830      	ldrb	r0, [r6, #0]
 800fd8a:	f7ff ff93 	bl	800fcb4 <__hexdig_fun>
 800fd8e:	2800      	cmp	r0, #0
 800fd90:	d1f8      	bne.n	800fd84 <__gethex+0xa6>
 800fd92:	b10c      	cbz	r4, 800fd98 <__gethex+0xba>
 800fd94:	1ba4      	subs	r4, r4, r6
 800fd96:	00a4      	lsls	r4, r4, #2
 800fd98:	7833      	ldrb	r3, [r6, #0]
 800fd9a:	2b50      	cmp	r3, #80	; 0x50
 800fd9c:	d001      	beq.n	800fda2 <__gethex+0xc4>
 800fd9e:	2b70      	cmp	r3, #112	; 0x70
 800fda0:	d140      	bne.n	800fe24 <__gethex+0x146>
 800fda2:	7873      	ldrb	r3, [r6, #1]
 800fda4:	2b2b      	cmp	r3, #43	; 0x2b
 800fda6:	d031      	beq.n	800fe0c <__gethex+0x12e>
 800fda8:	2b2d      	cmp	r3, #45	; 0x2d
 800fdaa:	d033      	beq.n	800fe14 <__gethex+0x136>
 800fdac:	1c71      	adds	r1, r6, #1
 800fdae:	f04f 0900 	mov.w	r9, #0
 800fdb2:	7808      	ldrb	r0, [r1, #0]
 800fdb4:	f7ff ff7e 	bl	800fcb4 <__hexdig_fun>
 800fdb8:	1e43      	subs	r3, r0, #1
 800fdba:	b2db      	uxtb	r3, r3
 800fdbc:	2b18      	cmp	r3, #24
 800fdbe:	d831      	bhi.n	800fe24 <__gethex+0x146>
 800fdc0:	f1a0 0210 	sub.w	r2, r0, #16
 800fdc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800fdc8:	f7ff ff74 	bl	800fcb4 <__hexdig_fun>
 800fdcc:	1e43      	subs	r3, r0, #1
 800fdce:	b2db      	uxtb	r3, r3
 800fdd0:	2b18      	cmp	r3, #24
 800fdd2:	d922      	bls.n	800fe1a <__gethex+0x13c>
 800fdd4:	f1b9 0f00 	cmp.w	r9, #0
 800fdd8:	d000      	beq.n	800fddc <__gethex+0xfe>
 800fdda:	4252      	negs	r2, r2
 800fddc:	4414      	add	r4, r2
 800fdde:	f8ca 1000 	str.w	r1, [sl]
 800fde2:	b30d      	cbz	r5, 800fe28 <__gethex+0x14a>
 800fde4:	f1bb 0f00 	cmp.w	fp, #0
 800fde8:	bf0c      	ite	eq
 800fdea:	2706      	moveq	r7, #6
 800fdec:	2700      	movne	r7, #0
 800fdee:	4638      	mov	r0, r7
 800fdf0:	b00b      	add	sp, #44	; 0x2c
 800fdf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdf6:	f10b 0b01 	add.w	fp, fp, #1
 800fdfa:	e78a      	b.n	800fd12 <__gethex+0x34>
 800fdfc:	2500      	movs	r5, #0
 800fdfe:	462c      	mov	r4, r5
 800fe00:	e7ae      	b.n	800fd60 <__gethex+0x82>
 800fe02:	463e      	mov	r6, r7
 800fe04:	2501      	movs	r5, #1
 800fe06:	e7c7      	b.n	800fd98 <__gethex+0xba>
 800fe08:	4604      	mov	r4, r0
 800fe0a:	e7fb      	b.n	800fe04 <__gethex+0x126>
 800fe0c:	f04f 0900 	mov.w	r9, #0
 800fe10:	1cb1      	adds	r1, r6, #2
 800fe12:	e7ce      	b.n	800fdb2 <__gethex+0xd4>
 800fe14:	f04f 0901 	mov.w	r9, #1
 800fe18:	e7fa      	b.n	800fe10 <__gethex+0x132>
 800fe1a:	230a      	movs	r3, #10
 800fe1c:	fb03 0202 	mla	r2, r3, r2, r0
 800fe20:	3a10      	subs	r2, #16
 800fe22:	e7cf      	b.n	800fdc4 <__gethex+0xe6>
 800fe24:	4631      	mov	r1, r6
 800fe26:	e7da      	b.n	800fdde <__gethex+0x100>
 800fe28:	1bf3      	subs	r3, r6, r7
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	2b07      	cmp	r3, #7
 800fe30:	dc49      	bgt.n	800fec6 <__gethex+0x1e8>
 800fe32:	9802      	ldr	r0, [sp, #8]
 800fe34:	f000 fa63 	bl	80102fe <_Balloc>
 800fe38:	9b01      	ldr	r3, [sp, #4]
 800fe3a:	f100 0914 	add.w	r9, r0, #20
 800fe3e:	f04f 0b00 	mov.w	fp, #0
 800fe42:	f1c3 0301 	rsb	r3, r3, #1
 800fe46:	4605      	mov	r5, r0
 800fe48:	f8cd 9010 	str.w	r9, [sp, #16]
 800fe4c:	46da      	mov	sl, fp
 800fe4e:	9308      	str	r3, [sp, #32]
 800fe50:	42b7      	cmp	r7, r6
 800fe52:	d33b      	bcc.n	800fecc <__gethex+0x1ee>
 800fe54:	9804      	ldr	r0, [sp, #16]
 800fe56:	f840 ab04 	str.w	sl, [r0], #4
 800fe5a:	eba0 0009 	sub.w	r0, r0, r9
 800fe5e:	1080      	asrs	r0, r0, #2
 800fe60:	6128      	str	r0, [r5, #16]
 800fe62:	0147      	lsls	r7, r0, #5
 800fe64:	4650      	mov	r0, sl
 800fe66:	f000 fb0e 	bl	8010486 <__hi0bits>
 800fe6a:	f8d8 6000 	ldr.w	r6, [r8]
 800fe6e:	1a3f      	subs	r7, r7, r0
 800fe70:	42b7      	cmp	r7, r6
 800fe72:	dd64      	ble.n	800ff3e <__gethex+0x260>
 800fe74:	1bbf      	subs	r7, r7, r6
 800fe76:	4639      	mov	r1, r7
 800fe78:	4628      	mov	r0, r5
 800fe7a:	f000 fe1d 	bl	8010ab8 <__any_on>
 800fe7e:	4682      	mov	sl, r0
 800fe80:	b178      	cbz	r0, 800fea2 <__gethex+0x1c4>
 800fe82:	1e7b      	subs	r3, r7, #1
 800fe84:	1159      	asrs	r1, r3, #5
 800fe86:	f003 021f 	and.w	r2, r3, #31
 800fe8a:	f04f 0a01 	mov.w	sl, #1
 800fe8e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800fe92:	fa0a f202 	lsl.w	r2, sl, r2
 800fe96:	420a      	tst	r2, r1
 800fe98:	d003      	beq.n	800fea2 <__gethex+0x1c4>
 800fe9a:	4553      	cmp	r3, sl
 800fe9c:	dc46      	bgt.n	800ff2c <__gethex+0x24e>
 800fe9e:	f04f 0a02 	mov.w	sl, #2
 800fea2:	4639      	mov	r1, r7
 800fea4:	4628      	mov	r0, r5
 800fea6:	f7ff fecb 	bl	800fc40 <rshift>
 800feaa:	443c      	add	r4, r7
 800feac:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800feb0:	42a3      	cmp	r3, r4
 800feb2:	da52      	bge.n	800ff5a <__gethex+0x27c>
 800feb4:	4629      	mov	r1, r5
 800feb6:	9802      	ldr	r0, [sp, #8]
 800feb8:	f000 fa55 	bl	8010366 <_Bfree>
 800febc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800febe:	2300      	movs	r3, #0
 800fec0:	6013      	str	r3, [r2, #0]
 800fec2:	27a3      	movs	r7, #163	; 0xa3
 800fec4:	e793      	b.n	800fdee <__gethex+0x110>
 800fec6:	3101      	adds	r1, #1
 800fec8:	105b      	asrs	r3, r3, #1
 800feca:	e7b0      	b.n	800fe2e <__gethex+0x150>
 800fecc:	1e73      	subs	r3, r6, #1
 800fece:	9305      	str	r3, [sp, #20]
 800fed0:	9a07      	ldr	r2, [sp, #28]
 800fed2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fed6:	4293      	cmp	r3, r2
 800fed8:	d018      	beq.n	800ff0c <__gethex+0x22e>
 800feda:	f1bb 0f20 	cmp.w	fp, #32
 800fede:	d107      	bne.n	800fef0 <__gethex+0x212>
 800fee0:	9b04      	ldr	r3, [sp, #16]
 800fee2:	f8c3 a000 	str.w	sl, [r3]
 800fee6:	3304      	adds	r3, #4
 800fee8:	f04f 0a00 	mov.w	sl, #0
 800feec:	9304      	str	r3, [sp, #16]
 800feee:	46d3      	mov	fp, sl
 800fef0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fef4:	f7ff fede 	bl	800fcb4 <__hexdig_fun>
 800fef8:	f000 000f 	and.w	r0, r0, #15
 800fefc:	fa00 f00b 	lsl.w	r0, r0, fp
 800ff00:	ea4a 0a00 	orr.w	sl, sl, r0
 800ff04:	f10b 0b04 	add.w	fp, fp, #4
 800ff08:	9b05      	ldr	r3, [sp, #20]
 800ff0a:	e00d      	b.n	800ff28 <__gethex+0x24a>
 800ff0c:	9b05      	ldr	r3, [sp, #20]
 800ff0e:	9a08      	ldr	r2, [sp, #32]
 800ff10:	4413      	add	r3, r2
 800ff12:	42bb      	cmp	r3, r7
 800ff14:	d3e1      	bcc.n	800feda <__gethex+0x1fc>
 800ff16:	4618      	mov	r0, r3
 800ff18:	9a01      	ldr	r2, [sp, #4]
 800ff1a:	9903      	ldr	r1, [sp, #12]
 800ff1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ff1e:	f001 f805 	bl	8010f2c <strncmp>
 800ff22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff24:	2800      	cmp	r0, #0
 800ff26:	d1d8      	bne.n	800feda <__gethex+0x1fc>
 800ff28:	461e      	mov	r6, r3
 800ff2a:	e791      	b.n	800fe50 <__gethex+0x172>
 800ff2c:	1eb9      	subs	r1, r7, #2
 800ff2e:	4628      	mov	r0, r5
 800ff30:	f000 fdc2 	bl	8010ab8 <__any_on>
 800ff34:	2800      	cmp	r0, #0
 800ff36:	d0b2      	beq.n	800fe9e <__gethex+0x1c0>
 800ff38:	f04f 0a03 	mov.w	sl, #3
 800ff3c:	e7b1      	b.n	800fea2 <__gethex+0x1c4>
 800ff3e:	da09      	bge.n	800ff54 <__gethex+0x276>
 800ff40:	1bf7      	subs	r7, r6, r7
 800ff42:	4629      	mov	r1, r5
 800ff44:	463a      	mov	r2, r7
 800ff46:	9802      	ldr	r0, [sp, #8]
 800ff48:	f000 fbd8 	bl	80106fc <__lshift>
 800ff4c:	1be4      	subs	r4, r4, r7
 800ff4e:	4605      	mov	r5, r0
 800ff50:	f100 0914 	add.w	r9, r0, #20
 800ff54:	f04f 0a00 	mov.w	sl, #0
 800ff58:	e7a8      	b.n	800feac <__gethex+0x1ce>
 800ff5a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ff5e:	42a0      	cmp	r0, r4
 800ff60:	dd6a      	ble.n	8010038 <__gethex+0x35a>
 800ff62:	1b04      	subs	r4, r0, r4
 800ff64:	42a6      	cmp	r6, r4
 800ff66:	dc2e      	bgt.n	800ffc6 <__gethex+0x2e8>
 800ff68:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ff6c:	2b02      	cmp	r3, #2
 800ff6e:	d022      	beq.n	800ffb6 <__gethex+0x2d8>
 800ff70:	2b03      	cmp	r3, #3
 800ff72:	d024      	beq.n	800ffbe <__gethex+0x2e0>
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d115      	bne.n	800ffa4 <__gethex+0x2c6>
 800ff78:	42a6      	cmp	r6, r4
 800ff7a:	d113      	bne.n	800ffa4 <__gethex+0x2c6>
 800ff7c:	2e01      	cmp	r6, #1
 800ff7e:	dc0b      	bgt.n	800ff98 <__gethex+0x2ba>
 800ff80:	9a06      	ldr	r2, [sp, #24]
 800ff82:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ff86:	6013      	str	r3, [r2, #0]
 800ff88:	2301      	movs	r3, #1
 800ff8a:	612b      	str	r3, [r5, #16]
 800ff8c:	f8c9 3000 	str.w	r3, [r9]
 800ff90:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ff92:	2762      	movs	r7, #98	; 0x62
 800ff94:	601d      	str	r5, [r3, #0]
 800ff96:	e72a      	b.n	800fdee <__gethex+0x110>
 800ff98:	1e71      	subs	r1, r6, #1
 800ff9a:	4628      	mov	r0, r5
 800ff9c:	f000 fd8c 	bl	8010ab8 <__any_on>
 800ffa0:	2800      	cmp	r0, #0
 800ffa2:	d1ed      	bne.n	800ff80 <__gethex+0x2a2>
 800ffa4:	4629      	mov	r1, r5
 800ffa6:	9802      	ldr	r0, [sp, #8]
 800ffa8:	f000 f9dd 	bl	8010366 <_Bfree>
 800ffac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ffae:	2300      	movs	r3, #0
 800ffb0:	6013      	str	r3, [r2, #0]
 800ffb2:	2750      	movs	r7, #80	; 0x50
 800ffb4:	e71b      	b.n	800fdee <__gethex+0x110>
 800ffb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d0e1      	beq.n	800ff80 <__gethex+0x2a2>
 800ffbc:	e7f2      	b.n	800ffa4 <__gethex+0x2c6>
 800ffbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d1dd      	bne.n	800ff80 <__gethex+0x2a2>
 800ffc4:	e7ee      	b.n	800ffa4 <__gethex+0x2c6>
 800ffc6:	1e67      	subs	r7, r4, #1
 800ffc8:	f1ba 0f00 	cmp.w	sl, #0
 800ffcc:	d131      	bne.n	8010032 <__gethex+0x354>
 800ffce:	b127      	cbz	r7, 800ffda <__gethex+0x2fc>
 800ffd0:	4639      	mov	r1, r7
 800ffd2:	4628      	mov	r0, r5
 800ffd4:	f000 fd70 	bl	8010ab8 <__any_on>
 800ffd8:	4682      	mov	sl, r0
 800ffda:	117a      	asrs	r2, r7, #5
 800ffdc:	2301      	movs	r3, #1
 800ffde:	f007 071f 	and.w	r7, r7, #31
 800ffe2:	fa03 f707 	lsl.w	r7, r3, r7
 800ffe6:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800ffea:	4621      	mov	r1, r4
 800ffec:	421f      	tst	r7, r3
 800ffee:	4628      	mov	r0, r5
 800fff0:	bf18      	it	ne
 800fff2:	f04a 0a02 	orrne.w	sl, sl, #2
 800fff6:	1b36      	subs	r6, r6, r4
 800fff8:	f7ff fe22 	bl	800fc40 <rshift>
 800fffc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010000:	2702      	movs	r7, #2
 8010002:	f1ba 0f00 	cmp.w	sl, #0
 8010006:	d048      	beq.n	801009a <__gethex+0x3bc>
 8010008:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801000c:	2b02      	cmp	r3, #2
 801000e:	d015      	beq.n	801003c <__gethex+0x35e>
 8010010:	2b03      	cmp	r3, #3
 8010012:	d017      	beq.n	8010044 <__gethex+0x366>
 8010014:	2b01      	cmp	r3, #1
 8010016:	d109      	bne.n	801002c <__gethex+0x34e>
 8010018:	f01a 0f02 	tst.w	sl, #2
 801001c:	d006      	beq.n	801002c <__gethex+0x34e>
 801001e:	f8d9 3000 	ldr.w	r3, [r9]
 8010022:	ea4a 0a03 	orr.w	sl, sl, r3
 8010026:	f01a 0f01 	tst.w	sl, #1
 801002a:	d10e      	bne.n	801004a <__gethex+0x36c>
 801002c:	f047 0710 	orr.w	r7, r7, #16
 8010030:	e033      	b.n	801009a <__gethex+0x3bc>
 8010032:	f04f 0a01 	mov.w	sl, #1
 8010036:	e7d0      	b.n	800ffda <__gethex+0x2fc>
 8010038:	2701      	movs	r7, #1
 801003a:	e7e2      	b.n	8010002 <__gethex+0x324>
 801003c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801003e:	f1c3 0301 	rsb	r3, r3, #1
 8010042:	9315      	str	r3, [sp, #84]	; 0x54
 8010044:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010046:	2b00      	cmp	r3, #0
 8010048:	d0f0      	beq.n	801002c <__gethex+0x34e>
 801004a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 801004e:	f105 0314 	add.w	r3, r5, #20
 8010052:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8010056:	eb03 010a 	add.w	r1, r3, sl
 801005a:	f04f 0c00 	mov.w	ip, #0
 801005e:	4618      	mov	r0, r3
 8010060:	f853 2b04 	ldr.w	r2, [r3], #4
 8010064:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8010068:	d01c      	beq.n	80100a4 <__gethex+0x3c6>
 801006a:	3201      	adds	r2, #1
 801006c:	6002      	str	r2, [r0, #0]
 801006e:	2f02      	cmp	r7, #2
 8010070:	f105 0314 	add.w	r3, r5, #20
 8010074:	d138      	bne.n	80100e8 <__gethex+0x40a>
 8010076:	f8d8 2000 	ldr.w	r2, [r8]
 801007a:	3a01      	subs	r2, #1
 801007c:	42b2      	cmp	r2, r6
 801007e:	d10a      	bne.n	8010096 <__gethex+0x3b8>
 8010080:	1171      	asrs	r1, r6, #5
 8010082:	2201      	movs	r2, #1
 8010084:	f006 061f 	and.w	r6, r6, #31
 8010088:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801008c:	fa02 f606 	lsl.w	r6, r2, r6
 8010090:	421e      	tst	r6, r3
 8010092:	bf18      	it	ne
 8010094:	4617      	movne	r7, r2
 8010096:	f047 0720 	orr.w	r7, r7, #32
 801009a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801009c:	601d      	str	r5, [r3, #0]
 801009e:	9b06      	ldr	r3, [sp, #24]
 80100a0:	601c      	str	r4, [r3, #0]
 80100a2:	e6a4      	b.n	800fdee <__gethex+0x110>
 80100a4:	4299      	cmp	r1, r3
 80100a6:	f843 cc04 	str.w	ip, [r3, #-4]
 80100aa:	d8d8      	bhi.n	801005e <__gethex+0x380>
 80100ac:	68ab      	ldr	r3, [r5, #8]
 80100ae:	4599      	cmp	r9, r3
 80100b0:	db12      	blt.n	80100d8 <__gethex+0x3fa>
 80100b2:	6869      	ldr	r1, [r5, #4]
 80100b4:	9802      	ldr	r0, [sp, #8]
 80100b6:	3101      	adds	r1, #1
 80100b8:	f000 f921 	bl	80102fe <_Balloc>
 80100bc:	692a      	ldr	r2, [r5, #16]
 80100be:	3202      	adds	r2, #2
 80100c0:	f105 010c 	add.w	r1, r5, #12
 80100c4:	4683      	mov	fp, r0
 80100c6:	0092      	lsls	r2, r2, #2
 80100c8:	300c      	adds	r0, #12
 80100ca:	f000 f90d 	bl	80102e8 <memcpy>
 80100ce:	4629      	mov	r1, r5
 80100d0:	9802      	ldr	r0, [sp, #8]
 80100d2:	f000 f948 	bl	8010366 <_Bfree>
 80100d6:	465d      	mov	r5, fp
 80100d8:	692b      	ldr	r3, [r5, #16]
 80100da:	1c5a      	adds	r2, r3, #1
 80100dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80100e0:	612a      	str	r2, [r5, #16]
 80100e2:	2201      	movs	r2, #1
 80100e4:	615a      	str	r2, [r3, #20]
 80100e6:	e7c2      	b.n	801006e <__gethex+0x390>
 80100e8:	692a      	ldr	r2, [r5, #16]
 80100ea:	454a      	cmp	r2, r9
 80100ec:	dd0b      	ble.n	8010106 <__gethex+0x428>
 80100ee:	2101      	movs	r1, #1
 80100f0:	4628      	mov	r0, r5
 80100f2:	f7ff fda5 	bl	800fc40 <rshift>
 80100f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80100fa:	3401      	adds	r4, #1
 80100fc:	42a3      	cmp	r3, r4
 80100fe:	f6ff aed9 	blt.w	800feb4 <__gethex+0x1d6>
 8010102:	2701      	movs	r7, #1
 8010104:	e7c7      	b.n	8010096 <__gethex+0x3b8>
 8010106:	f016 061f 	ands.w	r6, r6, #31
 801010a:	d0fa      	beq.n	8010102 <__gethex+0x424>
 801010c:	449a      	add	sl, r3
 801010e:	f1c6 0620 	rsb	r6, r6, #32
 8010112:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010116:	f000 f9b6 	bl	8010486 <__hi0bits>
 801011a:	42b0      	cmp	r0, r6
 801011c:	dbe7      	blt.n	80100ee <__gethex+0x410>
 801011e:	e7f0      	b.n	8010102 <__gethex+0x424>

08010120 <L_shift>:
 8010120:	f1c2 0208 	rsb	r2, r2, #8
 8010124:	0092      	lsls	r2, r2, #2
 8010126:	b570      	push	{r4, r5, r6, lr}
 8010128:	f1c2 0620 	rsb	r6, r2, #32
 801012c:	6843      	ldr	r3, [r0, #4]
 801012e:	6804      	ldr	r4, [r0, #0]
 8010130:	fa03 f506 	lsl.w	r5, r3, r6
 8010134:	432c      	orrs	r4, r5
 8010136:	40d3      	lsrs	r3, r2
 8010138:	6004      	str	r4, [r0, #0]
 801013a:	f840 3f04 	str.w	r3, [r0, #4]!
 801013e:	4288      	cmp	r0, r1
 8010140:	d3f4      	bcc.n	801012c <L_shift+0xc>
 8010142:	bd70      	pop	{r4, r5, r6, pc}

08010144 <__match>:
 8010144:	b530      	push	{r4, r5, lr}
 8010146:	6803      	ldr	r3, [r0, #0]
 8010148:	3301      	adds	r3, #1
 801014a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801014e:	b914      	cbnz	r4, 8010156 <__match+0x12>
 8010150:	6003      	str	r3, [r0, #0]
 8010152:	2001      	movs	r0, #1
 8010154:	bd30      	pop	{r4, r5, pc}
 8010156:	f813 2b01 	ldrb.w	r2, [r3], #1
 801015a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801015e:	2d19      	cmp	r5, #25
 8010160:	bf98      	it	ls
 8010162:	3220      	addls	r2, #32
 8010164:	42a2      	cmp	r2, r4
 8010166:	d0f0      	beq.n	801014a <__match+0x6>
 8010168:	2000      	movs	r0, #0
 801016a:	e7f3      	b.n	8010154 <__match+0x10>

0801016c <__hexnan>:
 801016c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010170:	680b      	ldr	r3, [r1, #0]
 8010172:	6801      	ldr	r1, [r0, #0]
 8010174:	115f      	asrs	r7, r3, #5
 8010176:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 801017a:	f013 031f 	ands.w	r3, r3, #31
 801017e:	b087      	sub	sp, #28
 8010180:	bf18      	it	ne
 8010182:	3704      	addne	r7, #4
 8010184:	2500      	movs	r5, #0
 8010186:	1f3e      	subs	r6, r7, #4
 8010188:	4682      	mov	sl, r0
 801018a:	4690      	mov	r8, r2
 801018c:	9301      	str	r3, [sp, #4]
 801018e:	f847 5c04 	str.w	r5, [r7, #-4]
 8010192:	46b1      	mov	r9, r6
 8010194:	4634      	mov	r4, r6
 8010196:	9502      	str	r5, [sp, #8]
 8010198:	46ab      	mov	fp, r5
 801019a:	784a      	ldrb	r2, [r1, #1]
 801019c:	1c4b      	adds	r3, r1, #1
 801019e:	9303      	str	r3, [sp, #12]
 80101a0:	b342      	cbz	r2, 80101f4 <__hexnan+0x88>
 80101a2:	4610      	mov	r0, r2
 80101a4:	9105      	str	r1, [sp, #20]
 80101a6:	9204      	str	r2, [sp, #16]
 80101a8:	f7ff fd84 	bl	800fcb4 <__hexdig_fun>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d143      	bne.n	8010238 <__hexnan+0xcc>
 80101b0:	9a04      	ldr	r2, [sp, #16]
 80101b2:	9905      	ldr	r1, [sp, #20]
 80101b4:	2a20      	cmp	r2, #32
 80101b6:	d818      	bhi.n	80101ea <__hexnan+0x7e>
 80101b8:	9b02      	ldr	r3, [sp, #8]
 80101ba:	459b      	cmp	fp, r3
 80101bc:	dd13      	ble.n	80101e6 <__hexnan+0x7a>
 80101be:	454c      	cmp	r4, r9
 80101c0:	d206      	bcs.n	80101d0 <__hexnan+0x64>
 80101c2:	2d07      	cmp	r5, #7
 80101c4:	dc04      	bgt.n	80101d0 <__hexnan+0x64>
 80101c6:	462a      	mov	r2, r5
 80101c8:	4649      	mov	r1, r9
 80101ca:	4620      	mov	r0, r4
 80101cc:	f7ff ffa8 	bl	8010120 <L_shift>
 80101d0:	4544      	cmp	r4, r8
 80101d2:	d944      	bls.n	801025e <__hexnan+0xf2>
 80101d4:	2300      	movs	r3, #0
 80101d6:	f1a4 0904 	sub.w	r9, r4, #4
 80101da:	f844 3c04 	str.w	r3, [r4, #-4]
 80101de:	f8cd b008 	str.w	fp, [sp, #8]
 80101e2:	464c      	mov	r4, r9
 80101e4:	461d      	mov	r5, r3
 80101e6:	9903      	ldr	r1, [sp, #12]
 80101e8:	e7d7      	b.n	801019a <__hexnan+0x2e>
 80101ea:	2a29      	cmp	r2, #41	; 0x29
 80101ec:	d14a      	bne.n	8010284 <__hexnan+0x118>
 80101ee:	3102      	adds	r1, #2
 80101f0:	f8ca 1000 	str.w	r1, [sl]
 80101f4:	f1bb 0f00 	cmp.w	fp, #0
 80101f8:	d044      	beq.n	8010284 <__hexnan+0x118>
 80101fa:	454c      	cmp	r4, r9
 80101fc:	d206      	bcs.n	801020c <__hexnan+0xa0>
 80101fe:	2d07      	cmp	r5, #7
 8010200:	dc04      	bgt.n	801020c <__hexnan+0xa0>
 8010202:	462a      	mov	r2, r5
 8010204:	4649      	mov	r1, r9
 8010206:	4620      	mov	r0, r4
 8010208:	f7ff ff8a 	bl	8010120 <L_shift>
 801020c:	4544      	cmp	r4, r8
 801020e:	d928      	bls.n	8010262 <__hexnan+0xf6>
 8010210:	4643      	mov	r3, r8
 8010212:	f854 2b04 	ldr.w	r2, [r4], #4
 8010216:	f843 2b04 	str.w	r2, [r3], #4
 801021a:	42a6      	cmp	r6, r4
 801021c:	d2f9      	bcs.n	8010212 <__hexnan+0xa6>
 801021e:	2200      	movs	r2, #0
 8010220:	f843 2b04 	str.w	r2, [r3], #4
 8010224:	429e      	cmp	r6, r3
 8010226:	d2fb      	bcs.n	8010220 <__hexnan+0xb4>
 8010228:	6833      	ldr	r3, [r6, #0]
 801022a:	b91b      	cbnz	r3, 8010234 <__hexnan+0xc8>
 801022c:	4546      	cmp	r6, r8
 801022e:	d127      	bne.n	8010280 <__hexnan+0x114>
 8010230:	2301      	movs	r3, #1
 8010232:	6033      	str	r3, [r6, #0]
 8010234:	2005      	movs	r0, #5
 8010236:	e026      	b.n	8010286 <__hexnan+0x11a>
 8010238:	3501      	adds	r5, #1
 801023a:	2d08      	cmp	r5, #8
 801023c:	f10b 0b01 	add.w	fp, fp, #1
 8010240:	dd06      	ble.n	8010250 <__hexnan+0xe4>
 8010242:	4544      	cmp	r4, r8
 8010244:	d9cf      	bls.n	80101e6 <__hexnan+0x7a>
 8010246:	2300      	movs	r3, #0
 8010248:	f844 3c04 	str.w	r3, [r4, #-4]
 801024c:	2501      	movs	r5, #1
 801024e:	3c04      	subs	r4, #4
 8010250:	6822      	ldr	r2, [r4, #0]
 8010252:	f000 000f 	and.w	r0, r0, #15
 8010256:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801025a:	6020      	str	r0, [r4, #0]
 801025c:	e7c3      	b.n	80101e6 <__hexnan+0x7a>
 801025e:	2508      	movs	r5, #8
 8010260:	e7c1      	b.n	80101e6 <__hexnan+0x7a>
 8010262:	9b01      	ldr	r3, [sp, #4]
 8010264:	2b00      	cmp	r3, #0
 8010266:	d0df      	beq.n	8010228 <__hexnan+0xbc>
 8010268:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801026c:	f1c3 0320 	rsb	r3, r3, #32
 8010270:	fa22 f303 	lsr.w	r3, r2, r3
 8010274:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010278:	401a      	ands	r2, r3
 801027a:	f847 2c04 	str.w	r2, [r7, #-4]
 801027e:	e7d3      	b.n	8010228 <__hexnan+0xbc>
 8010280:	3e04      	subs	r6, #4
 8010282:	e7d1      	b.n	8010228 <__hexnan+0xbc>
 8010284:	2004      	movs	r0, #4
 8010286:	b007      	add	sp, #28
 8010288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801028c <__locale_ctype_ptr_l>:
 801028c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8010290:	4770      	bx	lr

08010292 <__localeconv_l>:
 8010292:	30f0      	adds	r0, #240	; 0xf0
 8010294:	4770      	bx	lr
	...

08010298 <_localeconv_r>:
 8010298:	4b04      	ldr	r3, [pc, #16]	; (80102ac <_localeconv_r+0x14>)
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	6a18      	ldr	r0, [r3, #32]
 801029e:	4b04      	ldr	r3, [pc, #16]	; (80102b0 <_localeconv_r+0x18>)
 80102a0:	2800      	cmp	r0, #0
 80102a2:	bf08      	it	eq
 80102a4:	4618      	moveq	r0, r3
 80102a6:	30f0      	adds	r0, #240	; 0xf0
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	20000044 	.word	0x20000044
 80102b0:	200000a8 	.word	0x200000a8

080102b4 <malloc>:
 80102b4:	4b02      	ldr	r3, [pc, #8]	; (80102c0 <malloc+0xc>)
 80102b6:	4601      	mov	r1, r0
 80102b8:	6818      	ldr	r0, [r3, #0]
 80102ba:	f000 bc7b 	b.w	8010bb4 <_malloc_r>
 80102be:	bf00      	nop
 80102c0:	20000044 	.word	0x20000044

080102c4 <__ascii_mbtowc>:
 80102c4:	b082      	sub	sp, #8
 80102c6:	b901      	cbnz	r1, 80102ca <__ascii_mbtowc+0x6>
 80102c8:	a901      	add	r1, sp, #4
 80102ca:	b142      	cbz	r2, 80102de <__ascii_mbtowc+0x1a>
 80102cc:	b14b      	cbz	r3, 80102e2 <__ascii_mbtowc+0x1e>
 80102ce:	7813      	ldrb	r3, [r2, #0]
 80102d0:	600b      	str	r3, [r1, #0]
 80102d2:	7812      	ldrb	r2, [r2, #0]
 80102d4:	1c10      	adds	r0, r2, #0
 80102d6:	bf18      	it	ne
 80102d8:	2001      	movne	r0, #1
 80102da:	b002      	add	sp, #8
 80102dc:	4770      	bx	lr
 80102de:	4610      	mov	r0, r2
 80102e0:	e7fb      	b.n	80102da <__ascii_mbtowc+0x16>
 80102e2:	f06f 0001 	mvn.w	r0, #1
 80102e6:	e7f8      	b.n	80102da <__ascii_mbtowc+0x16>

080102e8 <memcpy>:
 80102e8:	b510      	push	{r4, lr}
 80102ea:	1e43      	subs	r3, r0, #1
 80102ec:	440a      	add	r2, r1
 80102ee:	4291      	cmp	r1, r2
 80102f0:	d100      	bne.n	80102f4 <memcpy+0xc>
 80102f2:	bd10      	pop	{r4, pc}
 80102f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102fc:	e7f7      	b.n	80102ee <memcpy+0x6>

080102fe <_Balloc>:
 80102fe:	b570      	push	{r4, r5, r6, lr}
 8010300:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010302:	4604      	mov	r4, r0
 8010304:	460e      	mov	r6, r1
 8010306:	b93d      	cbnz	r5, 8010318 <_Balloc+0x1a>
 8010308:	2010      	movs	r0, #16
 801030a:	f7ff ffd3 	bl	80102b4 <malloc>
 801030e:	6260      	str	r0, [r4, #36]	; 0x24
 8010310:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010314:	6005      	str	r5, [r0, #0]
 8010316:	60c5      	str	r5, [r0, #12]
 8010318:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801031a:	68eb      	ldr	r3, [r5, #12]
 801031c:	b183      	cbz	r3, 8010340 <_Balloc+0x42>
 801031e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010320:	68db      	ldr	r3, [r3, #12]
 8010322:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010326:	b9b8      	cbnz	r0, 8010358 <_Balloc+0x5a>
 8010328:	2101      	movs	r1, #1
 801032a:	fa01 f506 	lsl.w	r5, r1, r6
 801032e:	1d6a      	adds	r2, r5, #5
 8010330:	0092      	lsls	r2, r2, #2
 8010332:	4620      	mov	r0, r4
 8010334:	f000 fbe1 	bl	8010afa <_calloc_r>
 8010338:	b160      	cbz	r0, 8010354 <_Balloc+0x56>
 801033a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 801033e:	e00e      	b.n	801035e <_Balloc+0x60>
 8010340:	2221      	movs	r2, #33	; 0x21
 8010342:	2104      	movs	r1, #4
 8010344:	4620      	mov	r0, r4
 8010346:	f000 fbd8 	bl	8010afa <_calloc_r>
 801034a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801034c:	60e8      	str	r0, [r5, #12]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1e4      	bne.n	801031e <_Balloc+0x20>
 8010354:	2000      	movs	r0, #0
 8010356:	bd70      	pop	{r4, r5, r6, pc}
 8010358:	6802      	ldr	r2, [r0, #0]
 801035a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 801035e:	2300      	movs	r3, #0
 8010360:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010364:	e7f7      	b.n	8010356 <_Balloc+0x58>

08010366 <_Bfree>:
 8010366:	b570      	push	{r4, r5, r6, lr}
 8010368:	6a44      	ldr	r4, [r0, #36]	; 0x24
 801036a:	4606      	mov	r6, r0
 801036c:	460d      	mov	r5, r1
 801036e:	b93c      	cbnz	r4, 8010380 <_Bfree+0x1a>
 8010370:	2010      	movs	r0, #16
 8010372:	f7ff ff9f 	bl	80102b4 <malloc>
 8010376:	6270      	str	r0, [r6, #36]	; 0x24
 8010378:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801037c:	6004      	str	r4, [r0, #0]
 801037e:	60c4      	str	r4, [r0, #12]
 8010380:	b13d      	cbz	r5, 8010392 <_Bfree+0x2c>
 8010382:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010384:	686a      	ldr	r2, [r5, #4]
 8010386:	68db      	ldr	r3, [r3, #12]
 8010388:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801038c:	6029      	str	r1, [r5, #0]
 801038e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010392:	bd70      	pop	{r4, r5, r6, pc}

08010394 <__multadd>:
 8010394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010398:	690d      	ldr	r5, [r1, #16]
 801039a:	461f      	mov	r7, r3
 801039c:	4606      	mov	r6, r0
 801039e:	460c      	mov	r4, r1
 80103a0:	f101 0c14 	add.w	ip, r1, #20
 80103a4:	2300      	movs	r3, #0
 80103a6:	f8dc 0000 	ldr.w	r0, [ip]
 80103aa:	b281      	uxth	r1, r0
 80103ac:	fb02 7101 	mla	r1, r2, r1, r7
 80103b0:	0c0f      	lsrs	r7, r1, #16
 80103b2:	0c00      	lsrs	r0, r0, #16
 80103b4:	fb02 7000 	mla	r0, r2, r0, r7
 80103b8:	b289      	uxth	r1, r1
 80103ba:	3301      	adds	r3, #1
 80103bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80103c0:	429d      	cmp	r5, r3
 80103c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80103c6:	f84c 1b04 	str.w	r1, [ip], #4
 80103ca:	dcec      	bgt.n	80103a6 <__multadd+0x12>
 80103cc:	b1d7      	cbz	r7, 8010404 <__multadd+0x70>
 80103ce:	68a3      	ldr	r3, [r4, #8]
 80103d0:	42ab      	cmp	r3, r5
 80103d2:	dc12      	bgt.n	80103fa <__multadd+0x66>
 80103d4:	6861      	ldr	r1, [r4, #4]
 80103d6:	4630      	mov	r0, r6
 80103d8:	3101      	adds	r1, #1
 80103da:	f7ff ff90 	bl	80102fe <_Balloc>
 80103de:	6922      	ldr	r2, [r4, #16]
 80103e0:	3202      	adds	r2, #2
 80103e2:	f104 010c 	add.w	r1, r4, #12
 80103e6:	4680      	mov	r8, r0
 80103e8:	0092      	lsls	r2, r2, #2
 80103ea:	300c      	adds	r0, #12
 80103ec:	f7ff ff7c 	bl	80102e8 <memcpy>
 80103f0:	4621      	mov	r1, r4
 80103f2:	4630      	mov	r0, r6
 80103f4:	f7ff ffb7 	bl	8010366 <_Bfree>
 80103f8:	4644      	mov	r4, r8
 80103fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80103fe:	3501      	adds	r5, #1
 8010400:	615f      	str	r7, [r3, #20]
 8010402:	6125      	str	r5, [r4, #16]
 8010404:	4620      	mov	r0, r4
 8010406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801040a <__s2b>:
 801040a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801040e:	460c      	mov	r4, r1
 8010410:	4615      	mov	r5, r2
 8010412:	461f      	mov	r7, r3
 8010414:	2209      	movs	r2, #9
 8010416:	3308      	adds	r3, #8
 8010418:	4606      	mov	r6, r0
 801041a:	fb93 f3f2 	sdiv	r3, r3, r2
 801041e:	2100      	movs	r1, #0
 8010420:	2201      	movs	r2, #1
 8010422:	429a      	cmp	r2, r3
 8010424:	db20      	blt.n	8010468 <__s2b+0x5e>
 8010426:	4630      	mov	r0, r6
 8010428:	f7ff ff69 	bl	80102fe <_Balloc>
 801042c:	9b08      	ldr	r3, [sp, #32]
 801042e:	6143      	str	r3, [r0, #20]
 8010430:	2d09      	cmp	r5, #9
 8010432:	f04f 0301 	mov.w	r3, #1
 8010436:	6103      	str	r3, [r0, #16]
 8010438:	dd19      	ble.n	801046e <__s2b+0x64>
 801043a:	f104 0809 	add.w	r8, r4, #9
 801043e:	46c1      	mov	r9, r8
 8010440:	442c      	add	r4, r5
 8010442:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010446:	4601      	mov	r1, r0
 8010448:	3b30      	subs	r3, #48	; 0x30
 801044a:	220a      	movs	r2, #10
 801044c:	4630      	mov	r0, r6
 801044e:	f7ff ffa1 	bl	8010394 <__multadd>
 8010452:	45a1      	cmp	r9, r4
 8010454:	d1f5      	bne.n	8010442 <__s2b+0x38>
 8010456:	eb08 0405 	add.w	r4, r8, r5
 801045a:	3c08      	subs	r4, #8
 801045c:	1b2d      	subs	r5, r5, r4
 801045e:	1963      	adds	r3, r4, r5
 8010460:	42bb      	cmp	r3, r7
 8010462:	db07      	blt.n	8010474 <__s2b+0x6a>
 8010464:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010468:	0052      	lsls	r2, r2, #1
 801046a:	3101      	adds	r1, #1
 801046c:	e7d9      	b.n	8010422 <__s2b+0x18>
 801046e:	340a      	adds	r4, #10
 8010470:	2509      	movs	r5, #9
 8010472:	e7f3      	b.n	801045c <__s2b+0x52>
 8010474:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010478:	4601      	mov	r1, r0
 801047a:	3b30      	subs	r3, #48	; 0x30
 801047c:	220a      	movs	r2, #10
 801047e:	4630      	mov	r0, r6
 8010480:	f7ff ff88 	bl	8010394 <__multadd>
 8010484:	e7eb      	b.n	801045e <__s2b+0x54>

08010486 <__hi0bits>:
 8010486:	0c02      	lsrs	r2, r0, #16
 8010488:	0412      	lsls	r2, r2, #16
 801048a:	4603      	mov	r3, r0
 801048c:	b9b2      	cbnz	r2, 80104bc <__hi0bits+0x36>
 801048e:	0403      	lsls	r3, r0, #16
 8010490:	2010      	movs	r0, #16
 8010492:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010496:	bf04      	itt	eq
 8010498:	021b      	lsleq	r3, r3, #8
 801049a:	3008      	addeq	r0, #8
 801049c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80104a0:	bf04      	itt	eq
 80104a2:	011b      	lsleq	r3, r3, #4
 80104a4:	3004      	addeq	r0, #4
 80104a6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80104aa:	bf04      	itt	eq
 80104ac:	009b      	lsleq	r3, r3, #2
 80104ae:	3002      	addeq	r0, #2
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	db06      	blt.n	80104c2 <__hi0bits+0x3c>
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	d503      	bpl.n	80104c0 <__hi0bits+0x3a>
 80104b8:	3001      	adds	r0, #1
 80104ba:	4770      	bx	lr
 80104bc:	2000      	movs	r0, #0
 80104be:	e7e8      	b.n	8010492 <__hi0bits+0xc>
 80104c0:	2020      	movs	r0, #32
 80104c2:	4770      	bx	lr

080104c4 <__lo0bits>:
 80104c4:	6803      	ldr	r3, [r0, #0]
 80104c6:	f013 0207 	ands.w	r2, r3, #7
 80104ca:	4601      	mov	r1, r0
 80104cc:	d00b      	beq.n	80104e6 <__lo0bits+0x22>
 80104ce:	07da      	lsls	r2, r3, #31
 80104d0:	d423      	bmi.n	801051a <__lo0bits+0x56>
 80104d2:	0798      	lsls	r0, r3, #30
 80104d4:	bf49      	itett	mi
 80104d6:	085b      	lsrmi	r3, r3, #1
 80104d8:	089b      	lsrpl	r3, r3, #2
 80104da:	2001      	movmi	r0, #1
 80104dc:	600b      	strmi	r3, [r1, #0]
 80104de:	bf5c      	itt	pl
 80104e0:	600b      	strpl	r3, [r1, #0]
 80104e2:	2002      	movpl	r0, #2
 80104e4:	4770      	bx	lr
 80104e6:	b298      	uxth	r0, r3
 80104e8:	b9a8      	cbnz	r0, 8010516 <__lo0bits+0x52>
 80104ea:	0c1b      	lsrs	r3, r3, #16
 80104ec:	2010      	movs	r0, #16
 80104ee:	f013 0fff 	tst.w	r3, #255	; 0xff
 80104f2:	bf04      	itt	eq
 80104f4:	0a1b      	lsreq	r3, r3, #8
 80104f6:	3008      	addeq	r0, #8
 80104f8:	071a      	lsls	r2, r3, #28
 80104fa:	bf04      	itt	eq
 80104fc:	091b      	lsreq	r3, r3, #4
 80104fe:	3004      	addeq	r0, #4
 8010500:	079a      	lsls	r2, r3, #30
 8010502:	bf04      	itt	eq
 8010504:	089b      	lsreq	r3, r3, #2
 8010506:	3002      	addeq	r0, #2
 8010508:	07da      	lsls	r2, r3, #31
 801050a:	d402      	bmi.n	8010512 <__lo0bits+0x4e>
 801050c:	085b      	lsrs	r3, r3, #1
 801050e:	d006      	beq.n	801051e <__lo0bits+0x5a>
 8010510:	3001      	adds	r0, #1
 8010512:	600b      	str	r3, [r1, #0]
 8010514:	4770      	bx	lr
 8010516:	4610      	mov	r0, r2
 8010518:	e7e9      	b.n	80104ee <__lo0bits+0x2a>
 801051a:	2000      	movs	r0, #0
 801051c:	4770      	bx	lr
 801051e:	2020      	movs	r0, #32
 8010520:	4770      	bx	lr

08010522 <__i2b>:
 8010522:	b510      	push	{r4, lr}
 8010524:	460c      	mov	r4, r1
 8010526:	2101      	movs	r1, #1
 8010528:	f7ff fee9 	bl	80102fe <_Balloc>
 801052c:	2201      	movs	r2, #1
 801052e:	6144      	str	r4, [r0, #20]
 8010530:	6102      	str	r2, [r0, #16]
 8010532:	bd10      	pop	{r4, pc}

08010534 <__multiply>:
 8010534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010538:	4614      	mov	r4, r2
 801053a:	690a      	ldr	r2, [r1, #16]
 801053c:	6923      	ldr	r3, [r4, #16]
 801053e:	429a      	cmp	r2, r3
 8010540:	bfb8      	it	lt
 8010542:	460b      	movlt	r3, r1
 8010544:	4688      	mov	r8, r1
 8010546:	bfbc      	itt	lt
 8010548:	46a0      	movlt	r8, r4
 801054a:	461c      	movlt	r4, r3
 801054c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010550:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010554:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010558:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801055c:	eb07 0609 	add.w	r6, r7, r9
 8010560:	42b3      	cmp	r3, r6
 8010562:	bfb8      	it	lt
 8010564:	3101      	addlt	r1, #1
 8010566:	f7ff feca 	bl	80102fe <_Balloc>
 801056a:	f100 0514 	add.w	r5, r0, #20
 801056e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010572:	462b      	mov	r3, r5
 8010574:	2200      	movs	r2, #0
 8010576:	4573      	cmp	r3, lr
 8010578:	d316      	bcc.n	80105a8 <__multiply+0x74>
 801057a:	f104 0214 	add.w	r2, r4, #20
 801057e:	f108 0114 	add.w	r1, r8, #20
 8010582:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010586:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801058a:	9300      	str	r3, [sp, #0]
 801058c:	9b00      	ldr	r3, [sp, #0]
 801058e:	9201      	str	r2, [sp, #4]
 8010590:	4293      	cmp	r3, r2
 8010592:	d80c      	bhi.n	80105ae <__multiply+0x7a>
 8010594:	2e00      	cmp	r6, #0
 8010596:	dd03      	ble.n	80105a0 <__multiply+0x6c>
 8010598:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801059c:	2b00      	cmp	r3, #0
 801059e:	d05d      	beq.n	801065c <__multiply+0x128>
 80105a0:	6106      	str	r6, [r0, #16]
 80105a2:	b003      	add	sp, #12
 80105a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80105a8:	f843 2b04 	str.w	r2, [r3], #4
 80105ac:	e7e3      	b.n	8010576 <__multiply+0x42>
 80105ae:	f8b2 b000 	ldrh.w	fp, [r2]
 80105b2:	f1bb 0f00 	cmp.w	fp, #0
 80105b6:	d023      	beq.n	8010600 <__multiply+0xcc>
 80105b8:	4689      	mov	r9, r1
 80105ba:	46ac      	mov	ip, r5
 80105bc:	f04f 0800 	mov.w	r8, #0
 80105c0:	f859 4b04 	ldr.w	r4, [r9], #4
 80105c4:	f8dc a000 	ldr.w	sl, [ip]
 80105c8:	b2a3      	uxth	r3, r4
 80105ca:	fa1f fa8a 	uxth.w	sl, sl
 80105ce:	fb0b a303 	mla	r3, fp, r3, sl
 80105d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80105d6:	f8dc 4000 	ldr.w	r4, [ip]
 80105da:	4443      	add	r3, r8
 80105dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80105e0:	fb0b 840a 	mla	r4, fp, sl, r8
 80105e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80105e8:	46e2      	mov	sl, ip
 80105ea:	b29b      	uxth	r3, r3
 80105ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80105f0:	454f      	cmp	r7, r9
 80105f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80105f6:	f84a 3b04 	str.w	r3, [sl], #4
 80105fa:	d82b      	bhi.n	8010654 <__multiply+0x120>
 80105fc:	f8cc 8004 	str.w	r8, [ip, #4]
 8010600:	9b01      	ldr	r3, [sp, #4]
 8010602:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010606:	3204      	adds	r2, #4
 8010608:	f1ba 0f00 	cmp.w	sl, #0
 801060c:	d020      	beq.n	8010650 <__multiply+0x11c>
 801060e:	682b      	ldr	r3, [r5, #0]
 8010610:	4689      	mov	r9, r1
 8010612:	46a8      	mov	r8, r5
 8010614:	f04f 0b00 	mov.w	fp, #0
 8010618:	f8b9 c000 	ldrh.w	ip, [r9]
 801061c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010620:	fb0a 440c 	mla	r4, sl, ip, r4
 8010624:	445c      	add	r4, fp
 8010626:	46c4      	mov	ip, r8
 8010628:	b29b      	uxth	r3, r3
 801062a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801062e:	f84c 3b04 	str.w	r3, [ip], #4
 8010632:	f859 3b04 	ldr.w	r3, [r9], #4
 8010636:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801063a:	0c1b      	lsrs	r3, r3, #16
 801063c:	fb0a b303 	mla	r3, sl, r3, fp
 8010640:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010644:	454f      	cmp	r7, r9
 8010646:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801064a:	d805      	bhi.n	8010658 <__multiply+0x124>
 801064c:	f8c8 3004 	str.w	r3, [r8, #4]
 8010650:	3504      	adds	r5, #4
 8010652:	e79b      	b.n	801058c <__multiply+0x58>
 8010654:	46d4      	mov	ip, sl
 8010656:	e7b3      	b.n	80105c0 <__multiply+0x8c>
 8010658:	46e0      	mov	r8, ip
 801065a:	e7dd      	b.n	8010618 <__multiply+0xe4>
 801065c:	3e01      	subs	r6, #1
 801065e:	e799      	b.n	8010594 <__multiply+0x60>

08010660 <__pow5mult>:
 8010660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010664:	4615      	mov	r5, r2
 8010666:	f012 0203 	ands.w	r2, r2, #3
 801066a:	4606      	mov	r6, r0
 801066c:	460f      	mov	r7, r1
 801066e:	d007      	beq.n	8010680 <__pow5mult+0x20>
 8010670:	3a01      	subs	r2, #1
 8010672:	4c21      	ldr	r4, [pc, #132]	; (80106f8 <__pow5mult+0x98>)
 8010674:	2300      	movs	r3, #0
 8010676:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801067a:	f7ff fe8b 	bl	8010394 <__multadd>
 801067e:	4607      	mov	r7, r0
 8010680:	10ad      	asrs	r5, r5, #2
 8010682:	d035      	beq.n	80106f0 <__pow5mult+0x90>
 8010684:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010686:	b93c      	cbnz	r4, 8010698 <__pow5mult+0x38>
 8010688:	2010      	movs	r0, #16
 801068a:	f7ff fe13 	bl	80102b4 <malloc>
 801068e:	6270      	str	r0, [r6, #36]	; 0x24
 8010690:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010694:	6004      	str	r4, [r0, #0]
 8010696:	60c4      	str	r4, [r0, #12]
 8010698:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801069c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80106a0:	b94c      	cbnz	r4, 80106b6 <__pow5mult+0x56>
 80106a2:	f240 2171 	movw	r1, #625	; 0x271
 80106a6:	4630      	mov	r0, r6
 80106a8:	f7ff ff3b 	bl	8010522 <__i2b>
 80106ac:	2300      	movs	r3, #0
 80106ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80106b2:	4604      	mov	r4, r0
 80106b4:	6003      	str	r3, [r0, #0]
 80106b6:	f04f 0800 	mov.w	r8, #0
 80106ba:	07eb      	lsls	r3, r5, #31
 80106bc:	d50a      	bpl.n	80106d4 <__pow5mult+0x74>
 80106be:	4639      	mov	r1, r7
 80106c0:	4622      	mov	r2, r4
 80106c2:	4630      	mov	r0, r6
 80106c4:	f7ff ff36 	bl	8010534 <__multiply>
 80106c8:	4639      	mov	r1, r7
 80106ca:	4681      	mov	r9, r0
 80106cc:	4630      	mov	r0, r6
 80106ce:	f7ff fe4a 	bl	8010366 <_Bfree>
 80106d2:	464f      	mov	r7, r9
 80106d4:	106d      	asrs	r5, r5, #1
 80106d6:	d00b      	beq.n	80106f0 <__pow5mult+0x90>
 80106d8:	6820      	ldr	r0, [r4, #0]
 80106da:	b938      	cbnz	r0, 80106ec <__pow5mult+0x8c>
 80106dc:	4622      	mov	r2, r4
 80106de:	4621      	mov	r1, r4
 80106e0:	4630      	mov	r0, r6
 80106e2:	f7ff ff27 	bl	8010534 <__multiply>
 80106e6:	6020      	str	r0, [r4, #0]
 80106e8:	f8c0 8000 	str.w	r8, [r0]
 80106ec:	4604      	mov	r4, r0
 80106ee:	e7e4      	b.n	80106ba <__pow5mult+0x5a>
 80106f0:	4638      	mov	r0, r7
 80106f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80106f6:	bf00      	nop
 80106f8:	080135a8 	.word	0x080135a8

080106fc <__lshift>:
 80106fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010700:	460c      	mov	r4, r1
 8010702:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010706:	6923      	ldr	r3, [r4, #16]
 8010708:	6849      	ldr	r1, [r1, #4]
 801070a:	eb0a 0903 	add.w	r9, sl, r3
 801070e:	68a3      	ldr	r3, [r4, #8]
 8010710:	4607      	mov	r7, r0
 8010712:	4616      	mov	r6, r2
 8010714:	f109 0501 	add.w	r5, r9, #1
 8010718:	42ab      	cmp	r3, r5
 801071a:	db32      	blt.n	8010782 <__lshift+0x86>
 801071c:	4638      	mov	r0, r7
 801071e:	f7ff fdee 	bl	80102fe <_Balloc>
 8010722:	2300      	movs	r3, #0
 8010724:	4680      	mov	r8, r0
 8010726:	f100 0114 	add.w	r1, r0, #20
 801072a:	461a      	mov	r2, r3
 801072c:	4553      	cmp	r3, sl
 801072e:	db2b      	blt.n	8010788 <__lshift+0x8c>
 8010730:	6920      	ldr	r0, [r4, #16]
 8010732:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010736:	f104 0314 	add.w	r3, r4, #20
 801073a:	f016 021f 	ands.w	r2, r6, #31
 801073e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010742:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010746:	d025      	beq.n	8010794 <__lshift+0x98>
 8010748:	f1c2 0e20 	rsb	lr, r2, #32
 801074c:	2000      	movs	r0, #0
 801074e:	681e      	ldr	r6, [r3, #0]
 8010750:	468a      	mov	sl, r1
 8010752:	4096      	lsls	r6, r2
 8010754:	4330      	orrs	r0, r6
 8010756:	f84a 0b04 	str.w	r0, [sl], #4
 801075a:	f853 0b04 	ldr.w	r0, [r3], #4
 801075e:	459c      	cmp	ip, r3
 8010760:	fa20 f00e 	lsr.w	r0, r0, lr
 8010764:	d814      	bhi.n	8010790 <__lshift+0x94>
 8010766:	6048      	str	r0, [r1, #4]
 8010768:	b108      	cbz	r0, 801076e <__lshift+0x72>
 801076a:	f109 0502 	add.w	r5, r9, #2
 801076e:	3d01      	subs	r5, #1
 8010770:	4638      	mov	r0, r7
 8010772:	f8c8 5010 	str.w	r5, [r8, #16]
 8010776:	4621      	mov	r1, r4
 8010778:	f7ff fdf5 	bl	8010366 <_Bfree>
 801077c:	4640      	mov	r0, r8
 801077e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010782:	3101      	adds	r1, #1
 8010784:	005b      	lsls	r3, r3, #1
 8010786:	e7c7      	b.n	8010718 <__lshift+0x1c>
 8010788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801078c:	3301      	adds	r3, #1
 801078e:	e7cd      	b.n	801072c <__lshift+0x30>
 8010790:	4651      	mov	r1, sl
 8010792:	e7dc      	b.n	801074e <__lshift+0x52>
 8010794:	3904      	subs	r1, #4
 8010796:	f853 2b04 	ldr.w	r2, [r3], #4
 801079a:	f841 2f04 	str.w	r2, [r1, #4]!
 801079e:	459c      	cmp	ip, r3
 80107a0:	d8f9      	bhi.n	8010796 <__lshift+0x9a>
 80107a2:	e7e4      	b.n	801076e <__lshift+0x72>

080107a4 <__mcmp>:
 80107a4:	6903      	ldr	r3, [r0, #16]
 80107a6:	690a      	ldr	r2, [r1, #16]
 80107a8:	1a9b      	subs	r3, r3, r2
 80107aa:	b530      	push	{r4, r5, lr}
 80107ac:	d10c      	bne.n	80107c8 <__mcmp+0x24>
 80107ae:	0092      	lsls	r2, r2, #2
 80107b0:	3014      	adds	r0, #20
 80107b2:	3114      	adds	r1, #20
 80107b4:	1884      	adds	r4, r0, r2
 80107b6:	4411      	add	r1, r2
 80107b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80107bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80107c0:	4295      	cmp	r5, r2
 80107c2:	d003      	beq.n	80107cc <__mcmp+0x28>
 80107c4:	d305      	bcc.n	80107d2 <__mcmp+0x2e>
 80107c6:	2301      	movs	r3, #1
 80107c8:	4618      	mov	r0, r3
 80107ca:	bd30      	pop	{r4, r5, pc}
 80107cc:	42a0      	cmp	r0, r4
 80107ce:	d3f3      	bcc.n	80107b8 <__mcmp+0x14>
 80107d0:	e7fa      	b.n	80107c8 <__mcmp+0x24>
 80107d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80107d6:	e7f7      	b.n	80107c8 <__mcmp+0x24>

080107d8 <__mdiff>:
 80107d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80107dc:	460d      	mov	r5, r1
 80107de:	4607      	mov	r7, r0
 80107e0:	4611      	mov	r1, r2
 80107e2:	4628      	mov	r0, r5
 80107e4:	4614      	mov	r4, r2
 80107e6:	f7ff ffdd 	bl	80107a4 <__mcmp>
 80107ea:	1e06      	subs	r6, r0, #0
 80107ec:	d108      	bne.n	8010800 <__mdiff+0x28>
 80107ee:	4631      	mov	r1, r6
 80107f0:	4638      	mov	r0, r7
 80107f2:	f7ff fd84 	bl	80102fe <_Balloc>
 80107f6:	2301      	movs	r3, #1
 80107f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80107fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010800:	bfa4      	itt	ge
 8010802:	4623      	movge	r3, r4
 8010804:	462c      	movge	r4, r5
 8010806:	4638      	mov	r0, r7
 8010808:	6861      	ldr	r1, [r4, #4]
 801080a:	bfa6      	itte	ge
 801080c:	461d      	movge	r5, r3
 801080e:	2600      	movge	r6, #0
 8010810:	2601      	movlt	r6, #1
 8010812:	f7ff fd74 	bl	80102fe <_Balloc>
 8010816:	692b      	ldr	r3, [r5, #16]
 8010818:	60c6      	str	r6, [r0, #12]
 801081a:	6926      	ldr	r6, [r4, #16]
 801081c:	f105 0914 	add.w	r9, r5, #20
 8010820:	f104 0214 	add.w	r2, r4, #20
 8010824:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010828:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801082c:	f100 0514 	add.w	r5, r0, #20
 8010830:	f04f 0e00 	mov.w	lr, #0
 8010834:	f852 ab04 	ldr.w	sl, [r2], #4
 8010838:	f859 4b04 	ldr.w	r4, [r9], #4
 801083c:	fa1e f18a 	uxtah	r1, lr, sl
 8010840:	b2a3      	uxth	r3, r4
 8010842:	1ac9      	subs	r1, r1, r3
 8010844:	0c23      	lsrs	r3, r4, #16
 8010846:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801084a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801084e:	b289      	uxth	r1, r1
 8010850:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010854:	45c8      	cmp	r8, r9
 8010856:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801085a:	4694      	mov	ip, r2
 801085c:	f845 3b04 	str.w	r3, [r5], #4
 8010860:	d8e8      	bhi.n	8010834 <__mdiff+0x5c>
 8010862:	45bc      	cmp	ip, r7
 8010864:	d304      	bcc.n	8010870 <__mdiff+0x98>
 8010866:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801086a:	b183      	cbz	r3, 801088e <__mdiff+0xb6>
 801086c:	6106      	str	r6, [r0, #16]
 801086e:	e7c5      	b.n	80107fc <__mdiff+0x24>
 8010870:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010874:	fa1e f381 	uxtah	r3, lr, r1
 8010878:	141a      	asrs	r2, r3, #16
 801087a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801087e:	b29b      	uxth	r3, r3
 8010880:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010884:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010888:	f845 3b04 	str.w	r3, [r5], #4
 801088c:	e7e9      	b.n	8010862 <__mdiff+0x8a>
 801088e:	3e01      	subs	r6, #1
 8010890:	e7e9      	b.n	8010866 <__mdiff+0x8e>
	...

08010894 <__ulp>:
 8010894:	4b12      	ldr	r3, [pc, #72]	; (80108e0 <__ulp+0x4c>)
 8010896:	ee10 2a90 	vmov	r2, s1
 801089a:	401a      	ands	r2, r3
 801089c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	dd04      	ble.n	80108ae <__ulp+0x1a>
 80108a4:	2000      	movs	r0, #0
 80108a6:	4619      	mov	r1, r3
 80108a8:	ec41 0b10 	vmov	d0, r0, r1
 80108ac:	4770      	bx	lr
 80108ae:	425b      	negs	r3, r3
 80108b0:	151b      	asrs	r3, r3, #20
 80108b2:	2b13      	cmp	r3, #19
 80108b4:	f04f 0000 	mov.w	r0, #0
 80108b8:	f04f 0100 	mov.w	r1, #0
 80108bc:	dc04      	bgt.n	80108c8 <__ulp+0x34>
 80108be:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80108c2:	fa42 f103 	asr.w	r1, r2, r3
 80108c6:	e7ef      	b.n	80108a8 <__ulp+0x14>
 80108c8:	3b14      	subs	r3, #20
 80108ca:	2b1e      	cmp	r3, #30
 80108cc:	f04f 0201 	mov.w	r2, #1
 80108d0:	bfda      	itte	le
 80108d2:	f1c3 031f 	rsble	r3, r3, #31
 80108d6:	fa02 f303 	lslle.w	r3, r2, r3
 80108da:	4613      	movgt	r3, r2
 80108dc:	4618      	mov	r0, r3
 80108de:	e7e3      	b.n	80108a8 <__ulp+0x14>
 80108e0:	7ff00000 	.word	0x7ff00000

080108e4 <__b2d>:
 80108e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108e6:	6905      	ldr	r5, [r0, #16]
 80108e8:	f100 0714 	add.w	r7, r0, #20
 80108ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80108f0:	1f2e      	subs	r6, r5, #4
 80108f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80108f6:	4620      	mov	r0, r4
 80108f8:	f7ff fdc5 	bl	8010486 <__hi0bits>
 80108fc:	f1c0 0320 	rsb	r3, r0, #32
 8010900:	280a      	cmp	r0, #10
 8010902:	600b      	str	r3, [r1, #0]
 8010904:	f8df c074 	ldr.w	ip, [pc, #116]	; 801097c <__b2d+0x98>
 8010908:	dc14      	bgt.n	8010934 <__b2d+0x50>
 801090a:	f1c0 0e0b 	rsb	lr, r0, #11
 801090e:	fa24 f10e 	lsr.w	r1, r4, lr
 8010912:	42b7      	cmp	r7, r6
 8010914:	ea41 030c 	orr.w	r3, r1, ip
 8010918:	bf34      	ite	cc
 801091a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 801091e:	2100      	movcs	r1, #0
 8010920:	3015      	adds	r0, #21
 8010922:	fa04 f000 	lsl.w	r0, r4, r0
 8010926:	fa21 f10e 	lsr.w	r1, r1, lr
 801092a:	ea40 0201 	orr.w	r2, r0, r1
 801092e:	ec43 2b10 	vmov	d0, r2, r3
 8010932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010934:	42b7      	cmp	r7, r6
 8010936:	bf3a      	itte	cc
 8010938:	f1a5 0608 	subcc.w	r6, r5, #8
 801093c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010940:	2100      	movcs	r1, #0
 8010942:	380b      	subs	r0, #11
 8010944:	d015      	beq.n	8010972 <__b2d+0x8e>
 8010946:	4084      	lsls	r4, r0
 8010948:	f1c0 0520 	rsb	r5, r0, #32
 801094c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8010950:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8010954:	42be      	cmp	r6, r7
 8010956:	fa21 fc05 	lsr.w	ip, r1, r5
 801095a:	ea44 030c 	orr.w	r3, r4, ip
 801095e:	bf8c      	ite	hi
 8010960:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010964:	2400      	movls	r4, #0
 8010966:	fa01 f000 	lsl.w	r0, r1, r0
 801096a:	40ec      	lsrs	r4, r5
 801096c:	ea40 0204 	orr.w	r2, r0, r4
 8010970:	e7dd      	b.n	801092e <__b2d+0x4a>
 8010972:	ea44 030c 	orr.w	r3, r4, ip
 8010976:	460a      	mov	r2, r1
 8010978:	e7d9      	b.n	801092e <__b2d+0x4a>
 801097a:	bf00      	nop
 801097c:	3ff00000 	.word	0x3ff00000

08010980 <__d2b>:
 8010980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010984:	460e      	mov	r6, r1
 8010986:	2101      	movs	r1, #1
 8010988:	ec59 8b10 	vmov	r8, r9, d0
 801098c:	4615      	mov	r5, r2
 801098e:	f7ff fcb6 	bl	80102fe <_Balloc>
 8010992:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8010996:	4607      	mov	r7, r0
 8010998:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801099c:	bb34      	cbnz	r4, 80109ec <__d2b+0x6c>
 801099e:	9301      	str	r3, [sp, #4]
 80109a0:	f1b8 0300 	subs.w	r3, r8, #0
 80109a4:	d027      	beq.n	80109f6 <__d2b+0x76>
 80109a6:	a802      	add	r0, sp, #8
 80109a8:	f840 3d08 	str.w	r3, [r0, #-8]!
 80109ac:	f7ff fd8a 	bl	80104c4 <__lo0bits>
 80109b0:	9900      	ldr	r1, [sp, #0]
 80109b2:	b1f0      	cbz	r0, 80109f2 <__d2b+0x72>
 80109b4:	9a01      	ldr	r2, [sp, #4]
 80109b6:	f1c0 0320 	rsb	r3, r0, #32
 80109ba:	fa02 f303 	lsl.w	r3, r2, r3
 80109be:	430b      	orrs	r3, r1
 80109c0:	40c2      	lsrs	r2, r0
 80109c2:	617b      	str	r3, [r7, #20]
 80109c4:	9201      	str	r2, [sp, #4]
 80109c6:	9b01      	ldr	r3, [sp, #4]
 80109c8:	61bb      	str	r3, [r7, #24]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	bf14      	ite	ne
 80109ce:	2102      	movne	r1, #2
 80109d0:	2101      	moveq	r1, #1
 80109d2:	6139      	str	r1, [r7, #16]
 80109d4:	b1c4      	cbz	r4, 8010a08 <__d2b+0x88>
 80109d6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80109da:	4404      	add	r4, r0
 80109dc:	6034      	str	r4, [r6, #0]
 80109de:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80109e2:	6028      	str	r0, [r5, #0]
 80109e4:	4638      	mov	r0, r7
 80109e6:	b003      	add	sp, #12
 80109e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80109ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80109f0:	e7d5      	b.n	801099e <__d2b+0x1e>
 80109f2:	6179      	str	r1, [r7, #20]
 80109f4:	e7e7      	b.n	80109c6 <__d2b+0x46>
 80109f6:	a801      	add	r0, sp, #4
 80109f8:	f7ff fd64 	bl	80104c4 <__lo0bits>
 80109fc:	9b01      	ldr	r3, [sp, #4]
 80109fe:	617b      	str	r3, [r7, #20]
 8010a00:	2101      	movs	r1, #1
 8010a02:	6139      	str	r1, [r7, #16]
 8010a04:	3020      	adds	r0, #32
 8010a06:	e7e5      	b.n	80109d4 <__d2b+0x54>
 8010a08:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8010a0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010a10:	6030      	str	r0, [r6, #0]
 8010a12:	6918      	ldr	r0, [r3, #16]
 8010a14:	f7ff fd37 	bl	8010486 <__hi0bits>
 8010a18:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8010a1c:	e7e1      	b.n	80109e2 <__d2b+0x62>

08010a1e <__ratio>:
 8010a1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a22:	4688      	mov	r8, r1
 8010a24:	4669      	mov	r1, sp
 8010a26:	4681      	mov	r9, r0
 8010a28:	f7ff ff5c 	bl	80108e4 <__b2d>
 8010a2c:	a901      	add	r1, sp, #4
 8010a2e:	4640      	mov	r0, r8
 8010a30:	ec57 6b10 	vmov	r6, r7, d0
 8010a34:	f7ff ff56 	bl	80108e4 <__b2d>
 8010a38:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010a3c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010a40:	eba3 0c02 	sub.w	ip, r3, r2
 8010a44:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010a48:	1a9b      	subs	r3, r3, r2
 8010a4a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010a4e:	ec5b ab10 	vmov	sl, fp, d0
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	bfce      	itee	gt
 8010a56:	463a      	movgt	r2, r7
 8010a58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010a5c:	465a      	movle	r2, fp
 8010a5e:	4659      	mov	r1, fp
 8010a60:	463d      	mov	r5, r7
 8010a62:	bfd4      	ite	le
 8010a64:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8010a68:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8010a6c:	4630      	mov	r0, r6
 8010a6e:	ee10 2a10 	vmov	r2, s0
 8010a72:	460b      	mov	r3, r1
 8010a74:	4629      	mov	r1, r5
 8010a76:	f7ef fee9 	bl	800084c <__aeabi_ddiv>
 8010a7a:	ec41 0b10 	vmov	d0, r0, r1
 8010a7e:	b003      	add	sp, #12
 8010a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010a84 <__copybits>:
 8010a84:	3901      	subs	r1, #1
 8010a86:	b510      	push	{r4, lr}
 8010a88:	1149      	asrs	r1, r1, #5
 8010a8a:	6914      	ldr	r4, [r2, #16]
 8010a8c:	3101      	adds	r1, #1
 8010a8e:	f102 0314 	add.w	r3, r2, #20
 8010a92:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010a96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010a9a:	42a3      	cmp	r3, r4
 8010a9c:	4602      	mov	r2, r0
 8010a9e:	d303      	bcc.n	8010aa8 <__copybits+0x24>
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	428a      	cmp	r2, r1
 8010aa4:	d305      	bcc.n	8010ab2 <__copybits+0x2e>
 8010aa6:	bd10      	pop	{r4, pc}
 8010aa8:	f853 2b04 	ldr.w	r2, [r3], #4
 8010aac:	f840 2b04 	str.w	r2, [r0], #4
 8010ab0:	e7f3      	b.n	8010a9a <__copybits+0x16>
 8010ab2:	f842 3b04 	str.w	r3, [r2], #4
 8010ab6:	e7f4      	b.n	8010aa2 <__copybits+0x1e>

08010ab8 <__any_on>:
 8010ab8:	f100 0214 	add.w	r2, r0, #20
 8010abc:	6900      	ldr	r0, [r0, #16]
 8010abe:	114b      	asrs	r3, r1, #5
 8010ac0:	4298      	cmp	r0, r3
 8010ac2:	b510      	push	{r4, lr}
 8010ac4:	db11      	blt.n	8010aea <__any_on+0x32>
 8010ac6:	dd0a      	ble.n	8010ade <__any_on+0x26>
 8010ac8:	f011 011f 	ands.w	r1, r1, #31
 8010acc:	d007      	beq.n	8010ade <__any_on+0x26>
 8010ace:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010ad2:	fa24 f001 	lsr.w	r0, r4, r1
 8010ad6:	fa00 f101 	lsl.w	r1, r0, r1
 8010ada:	428c      	cmp	r4, r1
 8010adc:	d10b      	bne.n	8010af6 <__any_on+0x3e>
 8010ade:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ae2:	4293      	cmp	r3, r2
 8010ae4:	d803      	bhi.n	8010aee <__any_on+0x36>
 8010ae6:	2000      	movs	r0, #0
 8010ae8:	bd10      	pop	{r4, pc}
 8010aea:	4603      	mov	r3, r0
 8010aec:	e7f7      	b.n	8010ade <__any_on+0x26>
 8010aee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010af2:	2900      	cmp	r1, #0
 8010af4:	d0f5      	beq.n	8010ae2 <__any_on+0x2a>
 8010af6:	2001      	movs	r0, #1
 8010af8:	e7f6      	b.n	8010ae8 <__any_on+0x30>

08010afa <_calloc_r>:
 8010afa:	b538      	push	{r3, r4, r5, lr}
 8010afc:	fb02 f401 	mul.w	r4, r2, r1
 8010b00:	4621      	mov	r1, r4
 8010b02:	f000 f857 	bl	8010bb4 <_malloc_r>
 8010b06:	4605      	mov	r5, r0
 8010b08:	b118      	cbz	r0, 8010b12 <_calloc_r+0x18>
 8010b0a:	4622      	mov	r2, r4
 8010b0c:	2100      	movs	r1, #0
 8010b0e:	f7fc fcf1 	bl	800d4f4 <memset>
 8010b12:	4628      	mov	r0, r5
 8010b14:	bd38      	pop	{r3, r4, r5, pc}
	...

08010b18 <_free_r>:
 8010b18:	b538      	push	{r3, r4, r5, lr}
 8010b1a:	4605      	mov	r5, r0
 8010b1c:	2900      	cmp	r1, #0
 8010b1e:	d045      	beq.n	8010bac <_free_r+0x94>
 8010b20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b24:	1f0c      	subs	r4, r1, #4
 8010b26:	2b00      	cmp	r3, #0
 8010b28:	bfb8      	it	lt
 8010b2a:	18e4      	addlt	r4, r4, r3
 8010b2c:	f000 fa36 	bl	8010f9c <__malloc_lock>
 8010b30:	4a1f      	ldr	r2, [pc, #124]	; (8010bb0 <_free_r+0x98>)
 8010b32:	6813      	ldr	r3, [r2, #0]
 8010b34:	4610      	mov	r0, r2
 8010b36:	b933      	cbnz	r3, 8010b46 <_free_r+0x2e>
 8010b38:	6063      	str	r3, [r4, #4]
 8010b3a:	6014      	str	r4, [r2, #0]
 8010b3c:	4628      	mov	r0, r5
 8010b3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010b42:	f000 ba2c 	b.w	8010f9e <__malloc_unlock>
 8010b46:	42a3      	cmp	r3, r4
 8010b48:	d90c      	bls.n	8010b64 <_free_r+0x4c>
 8010b4a:	6821      	ldr	r1, [r4, #0]
 8010b4c:	1862      	adds	r2, r4, r1
 8010b4e:	4293      	cmp	r3, r2
 8010b50:	bf04      	itt	eq
 8010b52:	681a      	ldreq	r2, [r3, #0]
 8010b54:	685b      	ldreq	r3, [r3, #4]
 8010b56:	6063      	str	r3, [r4, #4]
 8010b58:	bf04      	itt	eq
 8010b5a:	1852      	addeq	r2, r2, r1
 8010b5c:	6022      	streq	r2, [r4, #0]
 8010b5e:	6004      	str	r4, [r0, #0]
 8010b60:	e7ec      	b.n	8010b3c <_free_r+0x24>
 8010b62:	4613      	mov	r3, r2
 8010b64:	685a      	ldr	r2, [r3, #4]
 8010b66:	b10a      	cbz	r2, 8010b6c <_free_r+0x54>
 8010b68:	42a2      	cmp	r2, r4
 8010b6a:	d9fa      	bls.n	8010b62 <_free_r+0x4a>
 8010b6c:	6819      	ldr	r1, [r3, #0]
 8010b6e:	1858      	adds	r0, r3, r1
 8010b70:	42a0      	cmp	r0, r4
 8010b72:	d10b      	bne.n	8010b8c <_free_r+0x74>
 8010b74:	6820      	ldr	r0, [r4, #0]
 8010b76:	4401      	add	r1, r0
 8010b78:	1858      	adds	r0, r3, r1
 8010b7a:	4282      	cmp	r2, r0
 8010b7c:	6019      	str	r1, [r3, #0]
 8010b7e:	d1dd      	bne.n	8010b3c <_free_r+0x24>
 8010b80:	6810      	ldr	r0, [r2, #0]
 8010b82:	6852      	ldr	r2, [r2, #4]
 8010b84:	605a      	str	r2, [r3, #4]
 8010b86:	4401      	add	r1, r0
 8010b88:	6019      	str	r1, [r3, #0]
 8010b8a:	e7d7      	b.n	8010b3c <_free_r+0x24>
 8010b8c:	d902      	bls.n	8010b94 <_free_r+0x7c>
 8010b8e:	230c      	movs	r3, #12
 8010b90:	602b      	str	r3, [r5, #0]
 8010b92:	e7d3      	b.n	8010b3c <_free_r+0x24>
 8010b94:	6820      	ldr	r0, [r4, #0]
 8010b96:	1821      	adds	r1, r4, r0
 8010b98:	428a      	cmp	r2, r1
 8010b9a:	bf04      	itt	eq
 8010b9c:	6811      	ldreq	r1, [r2, #0]
 8010b9e:	6852      	ldreq	r2, [r2, #4]
 8010ba0:	6062      	str	r2, [r4, #4]
 8010ba2:	bf04      	itt	eq
 8010ba4:	1809      	addeq	r1, r1, r0
 8010ba6:	6021      	streq	r1, [r4, #0]
 8010ba8:	605c      	str	r4, [r3, #4]
 8010baa:	e7c7      	b.n	8010b3c <_free_r+0x24>
 8010bac:	bd38      	pop	{r3, r4, r5, pc}
 8010bae:	bf00      	nop
 8010bb0:	200002b4 	.word	0x200002b4

08010bb4 <_malloc_r>:
 8010bb4:	b570      	push	{r4, r5, r6, lr}
 8010bb6:	1ccd      	adds	r5, r1, #3
 8010bb8:	f025 0503 	bic.w	r5, r5, #3
 8010bbc:	3508      	adds	r5, #8
 8010bbe:	2d0c      	cmp	r5, #12
 8010bc0:	bf38      	it	cc
 8010bc2:	250c      	movcc	r5, #12
 8010bc4:	2d00      	cmp	r5, #0
 8010bc6:	4606      	mov	r6, r0
 8010bc8:	db01      	blt.n	8010bce <_malloc_r+0x1a>
 8010bca:	42a9      	cmp	r1, r5
 8010bcc:	d903      	bls.n	8010bd6 <_malloc_r+0x22>
 8010bce:	230c      	movs	r3, #12
 8010bd0:	6033      	str	r3, [r6, #0]
 8010bd2:	2000      	movs	r0, #0
 8010bd4:	bd70      	pop	{r4, r5, r6, pc}
 8010bd6:	f000 f9e1 	bl	8010f9c <__malloc_lock>
 8010bda:	4a21      	ldr	r2, [pc, #132]	; (8010c60 <_malloc_r+0xac>)
 8010bdc:	6814      	ldr	r4, [r2, #0]
 8010bde:	4621      	mov	r1, r4
 8010be0:	b991      	cbnz	r1, 8010c08 <_malloc_r+0x54>
 8010be2:	4c20      	ldr	r4, [pc, #128]	; (8010c64 <_malloc_r+0xb0>)
 8010be4:	6823      	ldr	r3, [r4, #0]
 8010be6:	b91b      	cbnz	r3, 8010bf0 <_malloc_r+0x3c>
 8010be8:	4630      	mov	r0, r6
 8010bea:	f000 f98f 	bl	8010f0c <_sbrk_r>
 8010bee:	6020      	str	r0, [r4, #0]
 8010bf0:	4629      	mov	r1, r5
 8010bf2:	4630      	mov	r0, r6
 8010bf4:	f000 f98a 	bl	8010f0c <_sbrk_r>
 8010bf8:	1c43      	adds	r3, r0, #1
 8010bfa:	d124      	bne.n	8010c46 <_malloc_r+0x92>
 8010bfc:	230c      	movs	r3, #12
 8010bfe:	6033      	str	r3, [r6, #0]
 8010c00:	4630      	mov	r0, r6
 8010c02:	f000 f9cc 	bl	8010f9e <__malloc_unlock>
 8010c06:	e7e4      	b.n	8010bd2 <_malloc_r+0x1e>
 8010c08:	680b      	ldr	r3, [r1, #0]
 8010c0a:	1b5b      	subs	r3, r3, r5
 8010c0c:	d418      	bmi.n	8010c40 <_malloc_r+0x8c>
 8010c0e:	2b0b      	cmp	r3, #11
 8010c10:	d90f      	bls.n	8010c32 <_malloc_r+0x7e>
 8010c12:	600b      	str	r3, [r1, #0]
 8010c14:	50cd      	str	r5, [r1, r3]
 8010c16:	18cc      	adds	r4, r1, r3
 8010c18:	4630      	mov	r0, r6
 8010c1a:	f000 f9c0 	bl	8010f9e <__malloc_unlock>
 8010c1e:	f104 000b 	add.w	r0, r4, #11
 8010c22:	1d23      	adds	r3, r4, #4
 8010c24:	f020 0007 	bic.w	r0, r0, #7
 8010c28:	1ac3      	subs	r3, r0, r3
 8010c2a:	d0d3      	beq.n	8010bd4 <_malloc_r+0x20>
 8010c2c:	425a      	negs	r2, r3
 8010c2e:	50e2      	str	r2, [r4, r3]
 8010c30:	e7d0      	b.n	8010bd4 <_malloc_r+0x20>
 8010c32:	428c      	cmp	r4, r1
 8010c34:	684b      	ldr	r3, [r1, #4]
 8010c36:	bf16      	itet	ne
 8010c38:	6063      	strne	r3, [r4, #4]
 8010c3a:	6013      	streq	r3, [r2, #0]
 8010c3c:	460c      	movne	r4, r1
 8010c3e:	e7eb      	b.n	8010c18 <_malloc_r+0x64>
 8010c40:	460c      	mov	r4, r1
 8010c42:	6849      	ldr	r1, [r1, #4]
 8010c44:	e7cc      	b.n	8010be0 <_malloc_r+0x2c>
 8010c46:	1cc4      	adds	r4, r0, #3
 8010c48:	f024 0403 	bic.w	r4, r4, #3
 8010c4c:	42a0      	cmp	r0, r4
 8010c4e:	d005      	beq.n	8010c5c <_malloc_r+0xa8>
 8010c50:	1a21      	subs	r1, r4, r0
 8010c52:	4630      	mov	r0, r6
 8010c54:	f000 f95a 	bl	8010f0c <_sbrk_r>
 8010c58:	3001      	adds	r0, #1
 8010c5a:	d0cf      	beq.n	8010bfc <_malloc_r+0x48>
 8010c5c:	6025      	str	r5, [r4, #0]
 8010c5e:	e7db      	b.n	8010c18 <_malloc_r+0x64>
 8010c60:	200002b4 	.word	0x200002b4
 8010c64:	200002b8 	.word	0x200002b8

08010c68 <__ssputs_r>:
 8010c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010c6c:	688e      	ldr	r6, [r1, #8]
 8010c6e:	429e      	cmp	r6, r3
 8010c70:	4682      	mov	sl, r0
 8010c72:	460c      	mov	r4, r1
 8010c74:	4690      	mov	r8, r2
 8010c76:	4699      	mov	r9, r3
 8010c78:	d837      	bhi.n	8010cea <__ssputs_r+0x82>
 8010c7a:	898a      	ldrh	r2, [r1, #12]
 8010c7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010c80:	d031      	beq.n	8010ce6 <__ssputs_r+0x7e>
 8010c82:	6825      	ldr	r5, [r4, #0]
 8010c84:	6909      	ldr	r1, [r1, #16]
 8010c86:	1a6f      	subs	r7, r5, r1
 8010c88:	6965      	ldr	r5, [r4, #20]
 8010c8a:	2302      	movs	r3, #2
 8010c8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010c90:	fb95 f5f3 	sdiv	r5, r5, r3
 8010c94:	f109 0301 	add.w	r3, r9, #1
 8010c98:	443b      	add	r3, r7
 8010c9a:	429d      	cmp	r5, r3
 8010c9c:	bf38      	it	cc
 8010c9e:	461d      	movcc	r5, r3
 8010ca0:	0553      	lsls	r3, r2, #21
 8010ca2:	d530      	bpl.n	8010d06 <__ssputs_r+0x9e>
 8010ca4:	4629      	mov	r1, r5
 8010ca6:	f7ff ff85 	bl	8010bb4 <_malloc_r>
 8010caa:	4606      	mov	r6, r0
 8010cac:	b950      	cbnz	r0, 8010cc4 <__ssputs_r+0x5c>
 8010cae:	230c      	movs	r3, #12
 8010cb0:	f8ca 3000 	str.w	r3, [sl]
 8010cb4:	89a3      	ldrh	r3, [r4, #12]
 8010cb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010cba:	81a3      	strh	r3, [r4, #12]
 8010cbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010cc4:	463a      	mov	r2, r7
 8010cc6:	6921      	ldr	r1, [r4, #16]
 8010cc8:	f7ff fb0e 	bl	80102e8 <memcpy>
 8010ccc:	89a3      	ldrh	r3, [r4, #12]
 8010cce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010cd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cd6:	81a3      	strh	r3, [r4, #12]
 8010cd8:	6126      	str	r6, [r4, #16]
 8010cda:	6165      	str	r5, [r4, #20]
 8010cdc:	443e      	add	r6, r7
 8010cde:	1bed      	subs	r5, r5, r7
 8010ce0:	6026      	str	r6, [r4, #0]
 8010ce2:	60a5      	str	r5, [r4, #8]
 8010ce4:	464e      	mov	r6, r9
 8010ce6:	454e      	cmp	r6, r9
 8010ce8:	d900      	bls.n	8010cec <__ssputs_r+0x84>
 8010cea:	464e      	mov	r6, r9
 8010cec:	4632      	mov	r2, r6
 8010cee:	4641      	mov	r1, r8
 8010cf0:	6820      	ldr	r0, [r4, #0]
 8010cf2:	f000 f93a 	bl	8010f6a <memmove>
 8010cf6:	68a3      	ldr	r3, [r4, #8]
 8010cf8:	1b9b      	subs	r3, r3, r6
 8010cfa:	60a3      	str	r3, [r4, #8]
 8010cfc:	6823      	ldr	r3, [r4, #0]
 8010cfe:	441e      	add	r6, r3
 8010d00:	6026      	str	r6, [r4, #0]
 8010d02:	2000      	movs	r0, #0
 8010d04:	e7dc      	b.n	8010cc0 <__ssputs_r+0x58>
 8010d06:	462a      	mov	r2, r5
 8010d08:	f000 f94a 	bl	8010fa0 <_realloc_r>
 8010d0c:	4606      	mov	r6, r0
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d1e2      	bne.n	8010cd8 <__ssputs_r+0x70>
 8010d12:	6921      	ldr	r1, [r4, #16]
 8010d14:	4650      	mov	r0, sl
 8010d16:	f7ff feff 	bl	8010b18 <_free_r>
 8010d1a:	e7c8      	b.n	8010cae <__ssputs_r+0x46>

08010d1c <_svfiprintf_r>:
 8010d1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d20:	461d      	mov	r5, r3
 8010d22:	898b      	ldrh	r3, [r1, #12]
 8010d24:	061f      	lsls	r7, r3, #24
 8010d26:	b09d      	sub	sp, #116	; 0x74
 8010d28:	4680      	mov	r8, r0
 8010d2a:	460c      	mov	r4, r1
 8010d2c:	4616      	mov	r6, r2
 8010d2e:	d50f      	bpl.n	8010d50 <_svfiprintf_r+0x34>
 8010d30:	690b      	ldr	r3, [r1, #16]
 8010d32:	b96b      	cbnz	r3, 8010d50 <_svfiprintf_r+0x34>
 8010d34:	2140      	movs	r1, #64	; 0x40
 8010d36:	f7ff ff3d 	bl	8010bb4 <_malloc_r>
 8010d3a:	6020      	str	r0, [r4, #0]
 8010d3c:	6120      	str	r0, [r4, #16]
 8010d3e:	b928      	cbnz	r0, 8010d4c <_svfiprintf_r+0x30>
 8010d40:	230c      	movs	r3, #12
 8010d42:	f8c8 3000 	str.w	r3, [r8]
 8010d46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010d4a:	e0c8      	b.n	8010ede <_svfiprintf_r+0x1c2>
 8010d4c:	2340      	movs	r3, #64	; 0x40
 8010d4e:	6163      	str	r3, [r4, #20]
 8010d50:	2300      	movs	r3, #0
 8010d52:	9309      	str	r3, [sp, #36]	; 0x24
 8010d54:	2320      	movs	r3, #32
 8010d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010d5a:	2330      	movs	r3, #48	; 0x30
 8010d5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010d60:	9503      	str	r5, [sp, #12]
 8010d62:	f04f 0b01 	mov.w	fp, #1
 8010d66:	4637      	mov	r7, r6
 8010d68:	463d      	mov	r5, r7
 8010d6a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010d6e:	b10b      	cbz	r3, 8010d74 <_svfiprintf_r+0x58>
 8010d70:	2b25      	cmp	r3, #37	; 0x25
 8010d72:	d13e      	bne.n	8010df2 <_svfiprintf_r+0xd6>
 8010d74:	ebb7 0a06 	subs.w	sl, r7, r6
 8010d78:	d00b      	beq.n	8010d92 <_svfiprintf_r+0x76>
 8010d7a:	4653      	mov	r3, sl
 8010d7c:	4632      	mov	r2, r6
 8010d7e:	4621      	mov	r1, r4
 8010d80:	4640      	mov	r0, r8
 8010d82:	f7ff ff71 	bl	8010c68 <__ssputs_r>
 8010d86:	3001      	adds	r0, #1
 8010d88:	f000 80a4 	beq.w	8010ed4 <_svfiprintf_r+0x1b8>
 8010d8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d8e:	4453      	add	r3, sl
 8010d90:	9309      	str	r3, [sp, #36]	; 0x24
 8010d92:	783b      	ldrb	r3, [r7, #0]
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	f000 809d 	beq.w	8010ed4 <_svfiprintf_r+0x1b8>
 8010d9a:	2300      	movs	r3, #0
 8010d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010da0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010da4:	9304      	str	r3, [sp, #16]
 8010da6:	9307      	str	r3, [sp, #28]
 8010da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010dac:	931a      	str	r3, [sp, #104]	; 0x68
 8010dae:	462f      	mov	r7, r5
 8010db0:	2205      	movs	r2, #5
 8010db2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8010db6:	4850      	ldr	r0, [pc, #320]	; (8010ef8 <_svfiprintf_r+0x1dc>)
 8010db8:	f7ef fa12 	bl	80001e0 <memchr>
 8010dbc:	9b04      	ldr	r3, [sp, #16]
 8010dbe:	b9d0      	cbnz	r0, 8010df6 <_svfiprintf_r+0xda>
 8010dc0:	06d9      	lsls	r1, r3, #27
 8010dc2:	bf44      	itt	mi
 8010dc4:	2220      	movmi	r2, #32
 8010dc6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010dca:	071a      	lsls	r2, r3, #28
 8010dcc:	bf44      	itt	mi
 8010dce:	222b      	movmi	r2, #43	; 0x2b
 8010dd0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010dd4:	782a      	ldrb	r2, [r5, #0]
 8010dd6:	2a2a      	cmp	r2, #42	; 0x2a
 8010dd8:	d015      	beq.n	8010e06 <_svfiprintf_r+0xea>
 8010dda:	9a07      	ldr	r2, [sp, #28]
 8010ddc:	462f      	mov	r7, r5
 8010dde:	2000      	movs	r0, #0
 8010de0:	250a      	movs	r5, #10
 8010de2:	4639      	mov	r1, r7
 8010de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010de8:	3b30      	subs	r3, #48	; 0x30
 8010dea:	2b09      	cmp	r3, #9
 8010dec:	d94d      	bls.n	8010e8a <_svfiprintf_r+0x16e>
 8010dee:	b1b8      	cbz	r0, 8010e20 <_svfiprintf_r+0x104>
 8010df0:	e00f      	b.n	8010e12 <_svfiprintf_r+0xf6>
 8010df2:	462f      	mov	r7, r5
 8010df4:	e7b8      	b.n	8010d68 <_svfiprintf_r+0x4c>
 8010df6:	4a40      	ldr	r2, [pc, #256]	; (8010ef8 <_svfiprintf_r+0x1dc>)
 8010df8:	1a80      	subs	r0, r0, r2
 8010dfa:	fa0b f000 	lsl.w	r0, fp, r0
 8010dfe:	4318      	orrs	r0, r3
 8010e00:	9004      	str	r0, [sp, #16]
 8010e02:	463d      	mov	r5, r7
 8010e04:	e7d3      	b.n	8010dae <_svfiprintf_r+0x92>
 8010e06:	9a03      	ldr	r2, [sp, #12]
 8010e08:	1d11      	adds	r1, r2, #4
 8010e0a:	6812      	ldr	r2, [r2, #0]
 8010e0c:	9103      	str	r1, [sp, #12]
 8010e0e:	2a00      	cmp	r2, #0
 8010e10:	db01      	blt.n	8010e16 <_svfiprintf_r+0xfa>
 8010e12:	9207      	str	r2, [sp, #28]
 8010e14:	e004      	b.n	8010e20 <_svfiprintf_r+0x104>
 8010e16:	4252      	negs	r2, r2
 8010e18:	f043 0302 	orr.w	r3, r3, #2
 8010e1c:	9207      	str	r2, [sp, #28]
 8010e1e:	9304      	str	r3, [sp, #16]
 8010e20:	783b      	ldrb	r3, [r7, #0]
 8010e22:	2b2e      	cmp	r3, #46	; 0x2e
 8010e24:	d10c      	bne.n	8010e40 <_svfiprintf_r+0x124>
 8010e26:	787b      	ldrb	r3, [r7, #1]
 8010e28:	2b2a      	cmp	r3, #42	; 0x2a
 8010e2a:	d133      	bne.n	8010e94 <_svfiprintf_r+0x178>
 8010e2c:	9b03      	ldr	r3, [sp, #12]
 8010e2e:	1d1a      	adds	r2, r3, #4
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	9203      	str	r2, [sp, #12]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	bfb8      	it	lt
 8010e38:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010e3c:	3702      	adds	r7, #2
 8010e3e:	9305      	str	r3, [sp, #20]
 8010e40:	4d2e      	ldr	r5, [pc, #184]	; (8010efc <_svfiprintf_r+0x1e0>)
 8010e42:	7839      	ldrb	r1, [r7, #0]
 8010e44:	2203      	movs	r2, #3
 8010e46:	4628      	mov	r0, r5
 8010e48:	f7ef f9ca 	bl	80001e0 <memchr>
 8010e4c:	b138      	cbz	r0, 8010e5e <_svfiprintf_r+0x142>
 8010e4e:	2340      	movs	r3, #64	; 0x40
 8010e50:	1b40      	subs	r0, r0, r5
 8010e52:	fa03 f000 	lsl.w	r0, r3, r0
 8010e56:	9b04      	ldr	r3, [sp, #16]
 8010e58:	4303      	orrs	r3, r0
 8010e5a:	3701      	adds	r7, #1
 8010e5c:	9304      	str	r3, [sp, #16]
 8010e5e:	7839      	ldrb	r1, [r7, #0]
 8010e60:	4827      	ldr	r0, [pc, #156]	; (8010f00 <_svfiprintf_r+0x1e4>)
 8010e62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010e66:	2206      	movs	r2, #6
 8010e68:	1c7e      	adds	r6, r7, #1
 8010e6a:	f7ef f9b9 	bl	80001e0 <memchr>
 8010e6e:	2800      	cmp	r0, #0
 8010e70:	d038      	beq.n	8010ee4 <_svfiprintf_r+0x1c8>
 8010e72:	4b24      	ldr	r3, [pc, #144]	; (8010f04 <_svfiprintf_r+0x1e8>)
 8010e74:	bb13      	cbnz	r3, 8010ebc <_svfiprintf_r+0x1a0>
 8010e76:	9b03      	ldr	r3, [sp, #12]
 8010e78:	3307      	adds	r3, #7
 8010e7a:	f023 0307 	bic.w	r3, r3, #7
 8010e7e:	3308      	adds	r3, #8
 8010e80:	9303      	str	r3, [sp, #12]
 8010e82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010e84:	444b      	add	r3, r9
 8010e86:	9309      	str	r3, [sp, #36]	; 0x24
 8010e88:	e76d      	b.n	8010d66 <_svfiprintf_r+0x4a>
 8010e8a:	fb05 3202 	mla	r2, r5, r2, r3
 8010e8e:	2001      	movs	r0, #1
 8010e90:	460f      	mov	r7, r1
 8010e92:	e7a6      	b.n	8010de2 <_svfiprintf_r+0xc6>
 8010e94:	2300      	movs	r3, #0
 8010e96:	3701      	adds	r7, #1
 8010e98:	9305      	str	r3, [sp, #20]
 8010e9a:	4619      	mov	r1, r3
 8010e9c:	250a      	movs	r5, #10
 8010e9e:	4638      	mov	r0, r7
 8010ea0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ea4:	3a30      	subs	r2, #48	; 0x30
 8010ea6:	2a09      	cmp	r2, #9
 8010ea8:	d903      	bls.n	8010eb2 <_svfiprintf_r+0x196>
 8010eaa:	2b00      	cmp	r3, #0
 8010eac:	d0c8      	beq.n	8010e40 <_svfiprintf_r+0x124>
 8010eae:	9105      	str	r1, [sp, #20]
 8010eb0:	e7c6      	b.n	8010e40 <_svfiprintf_r+0x124>
 8010eb2:	fb05 2101 	mla	r1, r5, r1, r2
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	4607      	mov	r7, r0
 8010eba:	e7f0      	b.n	8010e9e <_svfiprintf_r+0x182>
 8010ebc:	ab03      	add	r3, sp, #12
 8010ebe:	9300      	str	r3, [sp, #0]
 8010ec0:	4622      	mov	r2, r4
 8010ec2:	4b11      	ldr	r3, [pc, #68]	; (8010f08 <_svfiprintf_r+0x1ec>)
 8010ec4:	a904      	add	r1, sp, #16
 8010ec6:	4640      	mov	r0, r8
 8010ec8:	f7fc fbb0 	bl	800d62c <_printf_float>
 8010ecc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010ed0:	4681      	mov	r9, r0
 8010ed2:	d1d6      	bne.n	8010e82 <_svfiprintf_r+0x166>
 8010ed4:	89a3      	ldrh	r3, [r4, #12]
 8010ed6:	065b      	lsls	r3, r3, #25
 8010ed8:	f53f af35 	bmi.w	8010d46 <_svfiprintf_r+0x2a>
 8010edc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010ede:	b01d      	add	sp, #116	; 0x74
 8010ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ee4:	ab03      	add	r3, sp, #12
 8010ee6:	9300      	str	r3, [sp, #0]
 8010ee8:	4622      	mov	r2, r4
 8010eea:	4b07      	ldr	r3, [pc, #28]	; (8010f08 <_svfiprintf_r+0x1ec>)
 8010eec:	a904      	add	r1, sp, #16
 8010eee:	4640      	mov	r0, r8
 8010ef0:	f7fc fe52 	bl	800db98 <_printf_i>
 8010ef4:	e7ea      	b.n	8010ecc <_svfiprintf_r+0x1b0>
 8010ef6:	bf00      	nop
 8010ef8:	080135b4 	.word	0x080135b4
 8010efc:	080135ba 	.word	0x080135ba
 8010f00:	080135be 	.word	0x080135be
 8010f04:	0800d62d 	.word	0x0800d62d
 8010f08:	08010c69 	.word	0x08010c69

08010f0c <_sbrk_r>:
 8010f0c:	b538      	push	{r3, r4, r5, lr}
 8010f0e:	4c06      	ldr	r4, [pc, #24]	; (8010f28 <_sbrk_r+0x1c>)
 8010f10:	2300      	movs	r3, #0
 8010f12:	4605      	mov	r5, r0
 8010f14:	4608      	mov	r0, r1
 8010f16:	6023      	str	r3, [r4, #0]
 8010f18:	f7fc fa56 	bl	800d3c8 <_sbrk>
 8010f1c:	1c43      	adds	r3, r0, #1
 8010f1e:	d102      	bne.n	8010f26 <_sbrk_r+0x1a>
 8010f20:	6823      	ldr	r3, [r4, #0]
 8010f22:	b103      	cbz	r3, 8010f26 <_sbrk_r+0x1a>
 8010f24:	602b      	str	r3, [r5, #0]
 8010f26:	bd38      	pop	{r3, r4, r5, pc}
 8010f28:	20002704 	.word	0x20002704

08010f2c <strncmp>:
 8010f2c:	b510      	push	{r4, lr}
 8010f2e:	b16a      	cbz	r2, 8010f4c <strncmp+0x20>
 8010f30:	3901      	subs	r1, #1
 8010f32:	1884      	adds	r4, r0, r2
 8010f34:	f810 3b01 	ldrb.w	r3, [r0], #1
 8010f38:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010f3c:	4293      	cmp	r3, r2
 8010f3e:	d103      	bne.n	8010f48 <strncmp+0x1c>
 8010f40:	42a0      	cmp	r0, r4
 8010f42:	d001      	beq.n	8010f48 <strncmp+0x1c>
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d1f5      	bne.n	8010f34 <strncmp+0x8>
 8010f48:	1a98      	subs	r0, r3, r2
 8010f4a:	bd10      	pop	{r4, pc}
 8010f4c:	4610      	mov	r0, r2
 8010f4e:	e7fc      	b.n	8010f4a <strncmp+0x1e>

08010f50 <__ascii_wctomb>:
 8010f50:	b149      	cbz	r1, 8010f66 <__ascii_wctomb+0x16>
 8010f52:	2aff      	cmp	r2, #255	; 0xff
 8010f54:	bf85      	ittet	hi
 8010f56:	238a      	movhi	r3, #138	; 0x8a
 8010f58:	6003      	strhi	r3, [r0, #0]
 8010f5a:	700a      	strbls	r2, [r1, #0]
 8010f5c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010f60:	bf98      	it	ls
 8010f62:	2001      	movls	r0, #1
 8010f64:	4770      	bx	lr
 8010f66:	4608      	mov	r0, r1
 8010f68:	4770      	bx	lr

08010f6a <memmove>:
 8010f6a:	4288      	cmp	r0, r1
 8010f6c:	b510      	push	{r4, lr}
 8010f6e:	eb01 0302 	add.w	r3, r1, r2
 8010f72:	d807      	bhi.n	8010f84 <memmove+0x1a>
 8010f74:	1e42      	subs	r2, r0, #1
 8010f76:	4299      	cmp	r1, r3
 8010f78:	d00a      	beq.n	8010f90 <memmove+0x26>
 8010f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010f7e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010f82:	e7f8      	b.n	8010f76 <memmove+0xc>
 8010f84:	4283      	cmp	r3, r0
 8010f86:	d9f5      	bls.n	8010f74 <memmove+0xa>
 8010f88:	1881      	adds	r1, r0, r2
 8010f8a:	1ad2      	subs	r2, r2, r3
 8010f8c:	42d3      	cmn	r3, r2
 8010f8e:	d100      	bne.n	8010f92 <memmove+0x28>
 8010f90:	bd10      	pop	{r4, pc}
 8010f92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010f96:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010f9a:	e7f7      	b.n	8010f8c <memmove+0x22>

08010f9c <__malloc_lock>:
 8010f9c:	4770      	bx	lr

08010f9e <__malloc_unlock>:
 8010f9e:	4770      	bx	lr

08010fa0 <_realloc_r>:
 8010fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010fa2:	4607      	mov	r7, r0
 8010fa4:	4614      	mov	r4, r2
 8010fa6:	460e      	mov	r6, r1
 8010fa8:	b921      	cbnz	r1, 8010fb4 <_realloc_r+0x14>
 8010faa:	4611      	mov	r1, r2
 8010fac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010fb0:	f7ff be00 	b.w	8010bb4 <_malloc_r>
 8010fb4:	b922      	cbnz	r2, 8010fc0 <_realloc_r+0x20>
 8010fb6:	f7ff fdaf 	bl	8010b18 <_free_r>
 8010fba:	4625      	mov	r5, r4
 8010fbc:	4628      	mov	r0, r5
 8010fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fc0:	f000 f814 	bl	8010fec <_malloc_usable_size_r>
 8010fc4:	42a0      	cmp	r0, r4
 8010fc6:	d20f      	bcs.n	8010fe8 <_realloc_r+0x48>
 8010fc8:	4621      	mov	r1, r4
 8010fca:	4638      	mov	r0, r7
 8010fcc:	f7ff fdf2 	bl	8010bb4 <_malloc_r>
 8010fd0:	4605      	mov	r5, r0
 8010fd2:	2800      	cmp	r0, #0
 8010fd4:	d0f2      	beq.n	8010fbc <_realloc_r+0x1c>
 8010fd6:	4631      	mov	r1, r6
 8010fd8:	4622      	mov	r2, r4
 8010fda:	f7ff f985 	bl	80102e8 <memcpy>
 8010fde:	4631      	mov	r1, r6
 8010fe0:	4638      	mov	r0, r7
 8010fe2:	f7ff fd99 	bl	8010b18 <_free_r>
 8010fe6:	e7e9      	b.n	8010fbc <_realloc_r+0x1c>
 8010fe8:	4635      	mov	r5, r6
 8010fea:	e7e7      	b.n	8010fbc <_realloc_r+0x1c>

08010fec <_malloc_usable_size_r>:
 8010fec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ff0:	1f18      	subs	r0, r3, #4
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	bfbc      	itt	lt
 8010ff6:	580b      	ldrlt	r3, [r1, r0]
 8010ff8:	18c0      	addlt	r0, r0, r3
 8010ffa:	4770      	bx	lr
 8010ffc:	0000      	movs	r0, r0
	...

08011000 <cos>:
 8011000:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011002:	ec51 0b10 	vmov	r0, r1, d0
 8011006:	4a1e      	ldr	r2, [pc, #120]	; (8011080 <cos+0x80>)
 8011008:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801100c:	4293      	cmp	r3, r2
 801100e:	dc06      	bgt.n	801101e <cos+0x1e>
 8011010:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8011078 <cos+0x78>
 8011014:	f001 fa00 	bl	8012418 <__kernel_cos>
 8011018:	ec51 0b10 	vmov	r0, r1, d0
 801101c:	e007      	b.n	801102e <cos+0x2e>
 801101e:	4a19      	ldr	r2, [pc, #100]	; (8011084 <cos+0x84>)
 8011020:	4293      	cmp	r3, r2
 8011022:	dd09      	ble.n	8011038 <cos+0x38>
 8011024:	ee10 2a10 	vmov	r2, s0
 8011028:	460b      	mov	r3, r1
 801102a:	f7ef f92d 	bl	8000288 <__aeabi_dsub>
 801102e:	ec41 0b10 	vmov	d0, r0, r1
 8011032:	b005      	add	sp, #20
 8011034:	f85d fb04 	ldr.w	pc, [sp], #4
 8011038:	4668      	mov	r0, sp
 801103a:	f000 ff49 	bl	8011ed0 <__ieee754_rem_pio2>
 801103e:	f000 0003 	and.w	r0, r0, #3
 8011042:	2801      	cmp	r0, #1
 8011044:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011048:	ed9d 0b00 	vldr	d0, [sp]
 801104c:	d007      	beq.n	801105e <cos+0x5e>
 801104e:	2802      	cmp	r0, #2
 8011050:	d00e      	beq.n	8011070 <cos+0x70>
 8011052:	2800      	cmp	r0, #0
 8011054:	d0de      	beq.n	8011014 <cos+0x14>
 8011056:	2001      	movs	r0, #1
 8011058:	f001 fde6 	bl	8012c28 <__kernel_sin>
 801105c:	e7dc      	b.n	8011018 <cos+0x18>
 801105e:	f001 fde3 	bl	8012c28 <__kernel_sin>
 8011062:	ec53 2b10 	vmov	r2, r3, d0
 8011066:	ee10 0a10 	vmov	r0, s0
 801106a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801106e:	e7de      	b.n	801102e <cos+0x2e>
 8011070:	f001 f9d2 	bl	8012418 <__kernel_cos>
 8011074:	e7f5      	b.n	8011062 <cos+0x62>
 8011076:	bf00      	nop
	...
 8011080:	3fe921fb 	.word	0x3fe921fb
 8011084:	7fefffff 	.word	0x7fefffff

08011088 <sin>:
 8011088:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801108a:	ec51 0b10 	vmov	r0, r1, d0
 801108e:	4a20      	ldr	r2, [pc, #128]	; (8011110 <sin+0x88>)
 8011090:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011094:	4293      	cmp	r3, r2
 8011096:	dc07      	bgt.n	80110a8 <sin+0x20>
 8011098:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8011108 <sin+0x80>
 801109c:	2000      	movs	r0, #0
 801109e:	f001 fdc3 	bl	8012c28 <__kernel_sin>
 80110a2:	ec51 0b10 	vmov	r0, r1, d0
 80110a6:	e007      	b.n	80110b8 <sin+0x30>
 80110a8:	4a1a      	ldr	r2, [pc, #104]	; (8011114 <sin+0x8c>)
 80110aa:	4293      	cmp	r3, r2
 80110ac:	dd09      	ble.n	80110c2 <sin+0x3a>
 80110ae:	ee10 2a10 	vmov	r2, s0
 80110b2:	460b      	mov	r3, r1
 80110b4:	f7ef f8e8 	bl	8000288 <__aeabi_dsub>
 80110b8:	ec41 0b10 	vmov	d0, r0, r1
 80110bc:	b005      	add	sp, #20
 80110be:	f85d fb04 	ldr.w	pc, [sp], #4
 80110c2:	4668      	mov	r0, sp
 80110c4:	f000 ff04 	bl	8011ed0 <__ieee754_rem_pio2>
 80110c8:	f000 0003 	and.w	r0, r0, #3
 80110cc:	2801      	cmp	r0, #1
 80110ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80110d2:	ed9d 0b00 	vldr	d0, [sp]
 80110d6:	d004      	beq.n	80110e2 <sin+0x5a>
 80110d8:	2802      	cmp	r0, #2
 80110da:	d005      	beq.n	80110e8 <sin+0x60>
 80110dc:	b970      	cbnz	r0, 80110fc <sin+0x74>
 80110de:	2001      	movs	r0, #1
 80110e0:	e7dd      	b.n	801109e <sin+0x16>
 80110e2:	f001 f999 	bl	8012418 <__kernel_cos>
 80110e6:	e7dc      	b.n	80110a2 <sin+0x1a>
 80110e8:	2001      	movs	r0, #1
 80110ea:	f001 fd9d 	bl	8012c28 <__kernel_sin>
 80110ee:	ec53 2b10 	vmov	r2, r3, d0
 80110f2:	ee10 0a10 	vmov	r0, s0
 80110f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80110fa:	e7dd      	b.n	80110b8 <sin+0x30>
 80110fc:	f001 f98c 	bl	8012418 <__kernel_cos>
 8011100:	e7f5      	b.n	80110ee <sin+0x66>
 8011102:	bf00      	nop
 8011104:	f3af 8000 	nop.w
	...
 8011110:	3fe921fb 	.word	0x3fe921fb
 8011114:	7fefffff 	.word	0x7fefffff

08011118 <pow>:
 8011118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801111c:	ed2d 8b04 	vpush	{d8-d9}
 8011120:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80113f4 <pow+0x2dc>
 8011124:	b08d      	sub	sp, #52	; 0x34
 8011126:	ec57 6b10 	vmov	r6, r7, d0
 801112a:	ec55 4b11 	vmov	r4, r5, d1
 801112e:	f000 f9bf 	bl	80114b0 <__ieee754_pow>
 8011132:	f999 3000 	ldrsb.w	r3, [r9]
 8011136:	9300      	str	r3, [sp, #0]
 8011138:	3301      	adds	r3, #1
 801113a:	eeb0 8a40 	vmov.f32	s16, s0
 801113e:	eef0 8a60 	vmov.f32	s17, s1
 8011142:	46c8      	mov	r8, r9
 8011144:	d05f      	beq.n	8011206 <pow+0xee>
 8011146:	4622      	mov	r2, r4
 8011148:	462b      	mov	r3, r5
 801114a:	4620      	mov	r0, r4
 801114c:	4629      	mov	r1, r5
 801114e:	f7ef fced 	bl	8000b2c <__aeabi_dcmpun>
 8011152:	4683      	mov	fp, r0
 8011154:	2800      	cmp	r0, #0
 8011156:	d156      	bne.n	8011206 <pow+0xee>
 8011158:	4632      	mov	r2, r6
 801115a:	463b      	mov	r3, r7
 801115c:	4630      	mov	r0, r6
 801115e:	4639      	mov	r1, r7
 8011160:	f7ef fce4 	bl	8000b2c <__aeabi_dcmpun>
 8011164:	9001      	str	r0, [sp, #4]
 8011166:	b1e8      	cbz	r0, 80111a4 <pow+0x8c>
 8011168:	2200      	movs	r2, #0
 801116a:	2300      	movs	r3, #0
 801116c:	4620      	mov	r0, r4
 801116e:	4629      	mov	r1, r5
 8011170:	f7ef fcaa 	bl	8000ac8 <__aeabi_dcmpeq>
 8011174:	2800      	cmp	r0, #0
 8011176:	d046      	beq.n	8011206 <pow+0xee>
 8011178:	2301      	movs	r3, #1
 801117a:	9302      	str	r3, [sp, #8]
 801117c:	4b96      	ldr	r3, [pc, #600]	; (80113d8 <pow+0x2c0>)
 801117e:	9303      	str	r3, [sp, #12]
 8011180:	4b96      	ldr	r3, [pc, #600]	; (80113dc <pow+0x2c4>)
 8011182:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8011186:	2200      	movs	r2, #0
 8011188:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801118c:	9b00      	ldr	r3, [sp, #0]
 801118e:	2b02      	cmp	r3, #2
 8011190:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011194:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011198:	d033      	beq.n	8011202 <pow+0xea>
 801119a:	a802      	add	r0, sp, #8
 801119c:	f001 fe94 	bl	8012ec8 <matherr>
 80111a0:	bb48      	cbnz	r0, 80111f6 <pow+0xde>
 80111a2:	e05d      	b.n	8011260 <pow+0x148>
 80111a4:	f04f 0a00 	mov.w	sl, #0
 80111a8:	f04f 0b00 	mov.w	fp, #0
 80111ac:	4652      	mov	r2, sl
 80111ae:	465b      	mov	r3, fp
 80111b0:	4630      	mov	r0, r6
 80111b2:	4639      	mov	r1, r7
 80111b4:	f7ef fc88 	bl	8000ac8 <__aeabi_dcmpeq>
 80111b8:	ec4b ab19 	vmov	d9, sl, fp
 80111bc:	2800      	cmp	r0, #0
 80111be:	d054      	beq.n	801126a <pow+0x152>
 80111c0:	4652      	mov	r2, sl
 80111c2:	465b      	mov	r3, fp
 80111c4:	4620      	mov	r0, r4
 80111c6:	4629      	mov	r1, r5
 80111c8:	f7ef fc7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80111cc:	4680      	mov	r8, r0
 80111ce:	b318      	cbz	r0, 8011218 <pow+0x100>
 80111d0:	2301      	movs	r3, #1
 80111d2:	9302      	str	r3, [sp, #8]
 80111d4:	4b80      	ldr	r3, [pc, #512]	; (80113d8 <pow+0x2c0>)
 80111d6:	9303      	str	r3, [sp, #12]
 80111d8:	9b01      	ldr	r3, [sp, #4]
 80111da:	930a      	str	r3, [sp, #40]	; 0x28
 80111dc:	9b00      	ldr	r3, [sp, #0]
 80111de:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80111e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80111e6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80111ea:	2b00      	cmp	r3, #0
 80111ec:	d0d5      	beq.n	801119a <pow+0x82>
 80111ee:	4b7b      	ldr	r3, [pc, #492]	; (80113dc <pow+0x2c4>)
 80111f0:	2200      	movs	r2, #0
 80111f2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80111f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80111f8:	b11b      	cbz	r3, 8011202 <pow+0xea>
 80111fa:	f7fc f951 	bl	800d4a0 <__errno>
 80111fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011200:	6003      	str	r3, [r0, #0]
 8011202:	ed9d 8b08 	vldr	d8, [sp, #32]
 8011206:	eeb0 0a48 	vmov.f32	s0, s16
 801120a:	eef0 0a68 	vmov.f32	s1, s17
 801120e:	b00d      	add	sp, #52	; 0x34
 8011210:	ecbd 8b04 	vpop	{d8-d9}
 8011214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011218:	ec45 4b10 	vmov	d0, r4, r5
 801121c:	f001 fdc7 	bl	8012dae <finite>
 8011220:	2800      	cmp	r0, #0
 8011222:	d0f0      	beq.n	8011206 <pow+0xee>
 8011224:	4652      	mov	r2, sl
 8011226:	465b      	mov	r3, fp
 8011228:	4620      	mov	r0, r4
 801122a:	4629      	mov	r1, r5
 801122c:	f7ef fc56 	bl	8000adc <__aeabi_dcmplt>
 8011230:	2800      	cmp	r0, #0
 8011232:	d0e8      	beq.n	8011206 <pow+0xee>
 8011234:	2301      	movs	r3, #1
 8011236:	9302      	str	r3, [sp, #8]
 8011238:	4b67      	ldr	r3, [pc, #412]	; (80113d8 <pow+0x2c0>)
 801123a:	9303      	str	r3, [sp, #12]
 801123c:	f999 3000 	ldrsb.w	r3, [r9]
 8011240:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8011244:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8011248:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801124c:	b913      	cbnz	r3, 8011254 <pow+0x13c>
 801124e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8011252:	e7a2      	b.n	801119a <pow+0x82>
 8011254:	4962      	ldr	r1, [pc, #392]	; (80113e0 <pow+0x2c8>)
 8011256:	2000      	movs	r0, #0
 8011258:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801125c:	2b02      	cmp	r3, #2
 801125e:	d19c      	bne.n	801119a <pow+0x82>
 8011260:	f7fc f91e 	bl	800d4a0 <__errno>
 8011264:	2321      	movs	r3, #33	; 0x21
 8011266:	6003      	str	r3, [r0, #0]
 8011268:	e7c5      	b.n	80111f6 <pow+0xde>
 801126a:	eeb0 0a48 	vmov.f32	s0, s16
 801126e:	eef0 0a68 	vmov.f32	s1, s17
 8011272:	f001 fd9c 	bl	8012dae <finite>
 8011276:	9000      	str	r0, [sp, #0]
 8011278:	2800      	cmp	r0, #0
 801127a:	f040 8081 	bne.w	8011380 <pow+0x268>
 801127e:	ec47 6b10 	vmov	d0, r6, r7
 8011282:	f001 fd94 	bl	8012dae <finite>
 8011286:	2800      	cmp	r0, #0
 8011288:	d07a      	beq.n	8011380 <pow+0x268>
 801128a:	ec45 4b10 	vmov	d0, r4, r5
 801128e:	f001 fd8e 	bl	8012dae <finite>
 8011292:	2800      	cmp	r0, #0
 8011294:	d074      	beq.n	8011380 <pow+0x268>
 8011296:	ec53 2b18 	vmov	r2, r3, d8
 801129a:	ee18 0a10 	vmov	r0, s16
 801129e:	4619      	mov	r1, r3
 80112a0:	f7ef fc44 	bl	8000b2c <__aeabi_dcmpun>
 80112a4:	f999 9000 	ldrsb.w	r9, [r9]
 80112a8:	4b4b      	ldr	r3, [pc, #300]	; (80113d8 <pow+0x2c0>)
 80112aa:	b1b0      	cbz	r0, 80112da <pow+0x1c2>
 80112ac:	2201      	movs	r2, #1
 80112ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112b2:	9b00      	ldr	r3, [sp, #0]
 80112b4:	930a      	str	r3, [sp, #40]	; 0x28
 80112b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80112ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80112be:	f1b9 0f00 	cmp.w	r9, #0
 80112c2:	d0c4      	beq.n	801124e <pow+0x136>
 80112c4:	4652      	mov	r2, sl
 80112c6:	465b      	mov	r3, fp
 80112c8:	4650      	mov	r0, sl
 80112ca:	4659      	mov	r1, fp
 80112cc:	f7ef fabe 	bl	800084c <__aeabi_ddiv>
 80112d0:	f1b9 0f02 	cmp.w	r9, #2
 80112d4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80112d8:	e7c1      	b.n	801125e <pow+0x146>
 80112da:	2203      	movs	r2, #3
 80112dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80112e0:	900a      	str	r0, [sp, #40]	; 0x28
 80112e2:	4629      	mov	r1, r5
 80112e4:	4620      	mov	r0, r4
 80112e6:	2200      	movs	r2, #0
 80112e8:	4b3e      	ldr	r3, [pc, #248]	; (80113e4 <pow+0x2cc>)
 80112ea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80112ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80112f2:	f7ef f981 	bl	80005f8 <__aeabi_dmul>
 80112f6:	4604      	mov	r4, r0
 80112f8:	460d      	mov	r5, r1
 80112fa:	f1b9 0f00 	cmp.w	r9, #0
 80112fe:	d124      	bne.n	801134a <pow+0x232>
 8011300:	4b39      	ldr	r3, [pc, #228]	; (80113e8 <pow+0x2d0>)
 8011302:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011306:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801130a:	4630      	mov	r0, r6
 801130c:	4652      	mov	r2, sl
 801130e:	465b      	mov	r3, fp
 8011310:	4639      	mov	r1, r7
 8011312:	f7ef fbe3 	bl	8000adc <__aeabi_dcmplt>
 8011316:	2800      	cmp	r0, #0
 8011318:	d056      	beq.n	80113c8 <pow+0x2b0>
 801131a:	ec45 4b10 	vmov	d0, r4, r5
 801131e:	f001 fddf 	bl	8012ee0 <rint>
 8011322:	4622      	mov	r2, r4
 8011324:	462b      	mov	r3, r5
 8011326:	ec51 0b10 	vmov	r0, r1, d0
 801132a:	f7ef fbcd 	bl	8000ac8 <__aeabi_dcmpeq>
 801132e:	b920      	cbnz	r0, 801133a <pow+0x222>
 8011330:	4b2e      	ldr	r3, [pc, #184]	; (80113ec <pow+0x2d4>)
 8011332:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8011336:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801133a:	f998 3000 	ldrsb.w	r3, [r8]
 801133e:	2b02      	cmp	r3, #2
 8011340:	d142      	bne.n	80113c8 <pow+0x2b0>
 8011342:	f7fc f8ad 	bl	800d4a0 <__errno>
 8011346:	2322      	movs	r3, #34	; 0x22
 8011348:	e78d      	b.n	8011266 <pow+0x14e>
 801134a:	4b29      	ldr	r3, [pc, #164]	; (80113f0 <pow+0x2d8>)
 801134c:	2200      	movs	r2, #0
 801134e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8011352:	4630      	mov	r0, r6
 8011354:	4652      	mov	r2, sl
 8011356:	465b      	mov	r3, fp
 8011358:	4639      	mov	r1, r7
 801135a:	f7ef fbbf 	bl	8000adc <__aeabi_dcmplt>
 801135e:	2800      	cmp	r0, #0
 8011360:	d0eb      	beq.n	801133a <pow+0x222>
 8011362:	ec45 4b10 	vmov	d0, r4, r5
 8011366:	f001 fdbb 	bl	8012ee0 <rint>
 801136a:	4622      	mov	r2, r4
 801136c:	462b      	mov	r3, r5
 801136e:	ec51 0b10 	vmov	r0, r1, d0
 8011372:	f7ef fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 8011376:	2800      	cmp	r0, #0
 8011378:	d1df      	bne.n	801133a <pow+0x222>
 801137a:	2200      	movs	r2, #0
 801137c:	4b18      	ldr	r3, [pc, #96]	; (80113e0 <pow+0x2c8>)
 801137e:	e7da      	b.n	8011336 <pow+0x21e>
 8011380:	2200      	movs	r2, #0
 8011382:	2300      	movs	r3, #0
 8011384:	ec51 0b18 	vmov	r0, r1, d8
 8011388:	f7ef fb9e 	bl	8000ac8 <__aeabi_dcmpeq>
 801138c:	2800      	cmp	r0, #0
 801138e:	f43f af3a 	beq.w	8011206 <pow+0xee>
 8011392:	ec47 6b10 	vmov	d0, r6, r7
 8011396:	f001 fd0a 	bl	8012dae <finite>
 801139a:	2800      	cmp	r0, #0
 801139c:	f43f af33 	beq.w	8011206 <pow+0xee>
 80113a0:	ec45 4b10 	vmov	d0, r4, r5
 80113a4:	f001 fd03 	bl	8012dae <finite>
 80113a8:	2800      	cmp	r0, #0
 80113aa:	f43f af2c 	beq.w	8011206 <pow+0xee>
 80113ae:	2304      	movs	r3, #4
 80113b0:	9302      	str	r3, [sp, #8]
 80113b2:	4b09      	ldr	r3, [pc, #36]	; (80113d8 <pow+0x2c0>)
 80113b4:	9303      	str	r3, [sp, #12]
 80113b6:	2300      	movs	r3, #0
 80113b8:	930a      	str	r3, [sp, #40]	; 0x28
 80113ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80113be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80113c2:	ed8d 9b08 	vstr	d9, [sp, #32]
 80113c6:	e7b8      	b.n	801133a <pow+0x222>
 80113c8:	a802      	add	r0, sp, #8
 80113ca:	f001 fd7d 	bl	8012ec8 <matherr>
 80113ce:	2800      	cmp	r0, #0
 80113d0:	f47f af11 	bne.w	80111f6 <pow+0xde>
 80113d4:	e7b5      	b.n	8011342 <pow+0x22a>
 80113d6:	bf00      	nop
 80113d8:	080136c6 	.word	0x080136c6
 80113dc:	3ff00000 	.word	0x3ff00000
 80113e0:	fff00000 	.word	0xfff00000
 80113e4:	3fe00000 	.word	0x3fe00000
 80113e8:	47efffff 	.word	0x47efffff
 80113ec:	c7efffff 	.word	0xc7efffff
 80113f0:	7ff00000 	.word	0x7ff00000
 80113f4:	20000214 	.word	0x20000214

080113f8 <sqrt>:
 80113f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113fc:	ed2d 8b02 	vpush	{d8}
 8011400:	b08b      	sub	sp, #44	; 0x2c
 8011402:	ec55 4b10 	vmov	r4, r5, d0
 8011406:	f000 ff55 	bl	80122b4 <__ieee754_sqrt>
 801140a:	4b26      	ldr	r3, [pc, #152]	; (80114a4 <sqrt+0xac>)
 801140c:	eeb0 8a40 	vmov.f32	s16, s0
 8011410:	eef0 8a60 	vmov.f32	s17, s1
 8011414:	f993 6000 	ldrsb.w	r6, [r3]
 8011418:	1c73      	adds	r3, r6, #1
 801141a:	d02a      	beq.n	8011472 <sqrt+0x7a>
 801141c:	4622      	mov	r2, r4
 801141e:	462b      	mov	r3, r5
 8011420:	4620      	mov	r0, r4
 8011422:	4629      	mov	r1, r5
 8011424:	f7ef fb82 	bl	8000b2c <__aeabi_dcmpun>
 8011428:	4607      	mov	r7, r0
 801142a:	bb10      	cbnz	r0, 8011472 <sqrt+0x7a>
 801142c:	f04f 0800 	mov.w	r8, #0
 8011430:	f04f 0900 	mov.w	r9, #0
 8011434:	4642      	mov	r2, r8
 8011436:	464b      	mov	r3, r9
 8011438:	4620      	mov	r0, r4
 801143a:	4629      	mov	r1, r5
 801143c:	f7ef fb4e 	bl	8000adc <__aeabi_dcmplt>
 8011440:	b1b8      	cbz	r0, 8011472 <sqrt+0x7a>
 8011442:	2301      	movs	r3, #1
 8011444:	9300      	str	r3, [sp, #0]
 8011446:	4b18      	ldr	r3, [pc, #96]	; (80114a8 <sqrt+0xb0>)
 8011448:	9301      	str	r3, [sp, #4]
 801144a:	9708      	str	r7, [sp, #32]
 801144c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8011450:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8011454:	b9b6      	cbnz	r6, 8011484 <sqrt+0x8c>
 8011456:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801145a:	4668      	mov	r0, sp
 801145c:	f001 fd34 	bl	8012ec8 <matherr>
 8011460:	b1d0      	cbz	r0, 8011498 <sqrt+0xa0>
 8011462:	9b08      	ldr	r3, [sp, #32]
 8011464:	b11b      	cbz	r3, 801146e <sqrt+0x76>
 8011466:	f7fc f81b 	bl	800d4a0 <__errno>
 801146a:	9b08      	ldr	r3, [sp, #32]
 801146c:	6003      	str	r3, [r0, #0]
 801146e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8011472:	eeb0 0a48 	vmov.f32	s0, s16
 8011476:	eef0 0a68 	vmov.f32	s1, s17
 801147a:	b00b      	add	sp, #44	; 0x2c
 801147c:	ecbd 8b02 	vpop	{d8}
 8011480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011484:	4642      	mov	r2, r8
 8011486:	464b      	mov	r3, r9
 8011488:	4640      	mov	r0, r8
 801148a:	4649      	mov	r1, r9
 801148c:	f7ef f9de 	bl	800084c <__aeabi_ddiv>
 8011490:	2e02      	cmp	r6, #2
 8011492:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011496:	d1e0      	bne.n	801145a <sqrt+0x62>
 8011498:	f7fc f802 	bl	800d4a0 <__errno>
 801149c:	2321      	movs	r3, #33	; 0x21
 801149e:	6003      	str	r3, [r0, #0]
 80114a0:	e7df      	b.n	8011462 <sqrt+0x6a>
 80114a2:	bf00      	nop
 80114a4:	20000214 	.word	0x20000214
 80114a8:	080136ca 	.word	0x080136ca
 80114ac:	00000000 	.word	0x00000000

080114b0 <__ieee754_pow>:
 80114b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b4:	b091      	sub	sp, #68	; 0x44
 80114b6:	ed8d 1b00 	vstr	d1, [sp]
 80114ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 80114be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80114c2:	ea58 0302 	orrs.w	r3, r8, r2
 80114c6:	ec57 6b10 	vmov	r6, r7, d0
 80114ca:	f000 84be 	beq.w	8011e4a <__ieee754_pow+0x99a>
 80114ce:	4b7a      	ldr	r3, [pc, #488]	; (80116b8 <__ieee754_pow+0x208>)
 80114d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80114d4:	429c      	cmp	r4, r3
 80114d6:	463d      	mov	r5, r7
 80114d8:	ee10 aa10 	vmov	sl, s0
 80114dc:	dc09      	bgt.n	80114f2 <__ieee754_pow+0x42>
 80114de:	d103      	bne.n	80114e8 <__ieee754_pow+0x38>
 80114e0:	b93e      	cbnz	r6, 80114f2 <__ieee754_pow+0x42>
 80114e2:	45a0      	cmp	r8, r4
 80114e4:	dc0d      	bgt.n	8011502 <__ieee754_pow+0x52>
 80114e6:	e001      	b.n	80114ec <__ieee754_pow+0x3c>
 80114e8:	4598      	cmp	r8, r3
 80114ea:	dc02      	bgt.n	80114f2 <__ieee754_pow+0x42>
 80114ec:	4598      	cmp	r8, r3
 80114ee:	d10e      	bne.n	801150e <__ieee754_pow+0x5e>
 80114f0:	b16a      	cbz	r2, 801150e <__ieee754_pow+0x5e>
 80114f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80114f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80114fa:	ea54 030a 	orrs.w	r3, r4, sl
 80114fe:	f000 84a4 	beq.w	8011e4a <__ieee754_pow+0x99a>
 8011502:	486e      	ldr	r0, [pc, #440]	; (80116bc <__ieee754_pow+0x20c>)
 8011504:	b011      	add	sp, #68	; 0x44
 8011506:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801150a:	f001 bce1 	b.w	8012ed0 <nan>
 801150e:	2d00      	cmp	r5, #0
 8011510:	da53      	bge.n	80115ba <__ieee754_pow+0x10a>
 8011512:	4b6b      	ldr	r3, [pc, #428]	; (80116c0 <__ieee754_pow+0x210>)
 8011514:	4598      	cmp	r8, r3
 8011516:	dc4d      	bgt.n	80115b4 <__ieee754_pow+0x104>
 8011518:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801151c:	4598      	cmp	r8, r3
 801151e:	dd4c      	ble.n	80115ba <__ieee754_pow+0x10a>
 8011520:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011524:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011528:	2b14      	cmp	r3, #20
 801152a:	dd26      	ble.n	801157a <__ieee754_pow+0xca>
 801152c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011530:	fa22 f103 	lsr.w	r1, r2, r3
 8011534:	fa01 f303 	lsl.w	r3, r1, r3
 8011538:	4293      	cmp	r3, r2
 801153a:	d13e      	bne.n	80115ba <__ieee754_pow+0x10a>
 801153c:	f001 0101 	and.w	r1, r1, #1
 8011540:	f1c1 0b02 	rsb	fp, r1, #2
 8011544:	2a00      	cmp	r2, #0
 8011546:	d15b      	bne.n	8011600 <__ieee754_pow+0x150>
 8011548:	4b5b      	ldr	r3, [pc, #364]	; (80116b8 <__ieee754_pow+0x208>)
 801154a:	4598      	cmp	r8, r3
 801154c:	d124      	bne.n	8011598 <__ieee754_pow+0xe8>
 801154e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011552:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011556:	ea53 030a 	orrs.w	r3, r3, sl
 801155a:	f000 8476 	beq.w	8011e4a <__ieee754_pow+0x99a>
 801155e:	4b59      	ldr	r3, [pc, #356]	; (80116c4 <__ieee754_pow+0x214>)
 8011560:	429c      	cmp	r4, r3
 8011562:	dd2d      	ble.n	80115c0 <__ieee754_pow+0x110>
 8011564:	f1b9 0f00 	cmp.w	r9, #0
 8011568:	f280 8473 	bge.w	8011e52 <__ieee754_pow+0x9a2>
 801156c:	2000      	movs	r0, #0
 801156e:	2100      	movs	r1, #0
 8011570:	ec41 0b10 	vmov	d0, r0, r1
 8011574:	b011      	add	sp, #68	; 0x44
 8011576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801157a:	2a00      	cmp	r2, #0
 801157c:	d13e      	bne.n	80115fc <__ieee754_pow+0x14c>
 801157e:	f1c3 0314 	rsb	r3, r3, #20
 8011582:	fa48 f103 	asr.w	r1, r8, r3
 8011586:	fa01 f303 	lsl.w	r3, r1, r3
 801158a:	4543      	cmp	r3, r8
 801158c:	f040 8469 	bne.w	8011e62 <__ieee754_pow+0x9b2>
 8011590:	f001 0101 	and.w	r1, r1, #1
 8011594:	f1c1 0b02 	rsb	fp, r1, #2
 8011598:	4b4b      	ldr	r3, [pc, #300]	; (80116c8 <__ieee754_pow+0x218>)
 801159a:	4598      	cmp	r8, r3
 801159c:	d118      	bne.n	80115d0 <__ieee754_pow+0x120>
 801159e:	f1b9 0f00 	cmp.w	r9, #0
 80115a2:	f280 845a 	bge.w	8011e5a <__ieee754_pow+0x9aa>
 80115a6:	4948      	ldr	r1, [pc, #288]	; (80116c8 <__ieee754_pow+0x218>)
 80115a8:	4632      	mov	r2, r6
 80115aa:	463b      	mov	r3, r7
 80115ac:	2000      	movs	r0, #0
 80115ae:	f7ef f94d 	bl	800084c <__aeabi_ddiv>
 80115b2:	e7dd      	b.n	8011570 <__ieee754_pow+0xc0>
 80115b4:	f04f 0b02 	mov.w	fp, #2
 80115b8:	e7c4      	b.n	8011544 <__ieee754_pow+0x94>
 80115ba:	f04f 0b00 	mov.w	fp, #0
 80115be:	e7c1      	b.n	8011544 <__ieee754_pow+0x94>
 80115c0:	f1b9 0f00 	cmp.w	r9, #0
 80115c4:	dad2      	bge.n	801156c <__ieee754_pow+0xbc>
 80115c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 80115ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80115ce:	e7cf      	b.n	8011570 <__ieee754_pow+0xc0>
 80115d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80115d4:	d106      	bne.n	80115e4 <__ieee754_pow+0x134>
 80115d6:	4632      	mov	r2, r6
 80115d8:	463b      	mov	r3, r7
 80115da:	4610      	mov	r0, r2
 80115dc:	4619      	mov	r1, r3
 80115de:	f7ef f80b 	bl	80005f8 <__aeabi_dmul>
 80115e2:	e7c5      	b.n	8011570 <__ieee754_pow+0xc0>
 80115e4:	4b39      	ldr	r3, [pc, #228]	; (80116cc <__ieee754_pow+0x21c>)
 80115e6:	4599      	cmp	r9, r3
 80115e8:	d10a      	bne.n	8011600 <__ieee754_pow+0x150>
 80115ea:	2d00      	cmp	r5, #0
 80115ec:	db08      	blt.n	8011600 <__ieee754_pow+0x150>
 80115ee:	ec47 6b10 	vmov	d0, r6, r7
 80115f2:	b011      	add	sp, #68	; 0x44
 80115f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f8:	f000 be5c 	b.w	80122b4 <__ieee754_sqrt>
 80115fc:	f04f 0b00 	mov.w	fp, #0
 8011600:	ec47 6b10 	vmov	d0, r6, r7
 8011604:	f001 fbca 	bl	8012d9c <fabs>
 8011608:	ec51 0b10 	vmov	r0, r1, d0
 801160c:	f1ba 0f00 	cmp.w	sl, #0
 8011610:	d127      	bne.n	8011662 <__ieee754_pow+0x1b2>
 8011612:	b124      	cbz	r4, 801161e <__ieee754_pow+0x16e>
 8011614:	4b2c      	ldr	r3, [pc, #176]	; (80116c8 <__ieee754_pow+0x218>)
 8011616:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801161a:	429a      	cmp	r2, r3
 801161c:	d121      	bne.n	8011662 <__ieee754_pow+0x1b2>
 801161e:	f1b9 0f00 	cmp.w	r9, #0
 8011622:	da05      	bge.n	8011630 <__ieee754_pow+0x180>
 8011624:	4602      	mov	r2, r0
 8011626:	460b      	mov	r3, r1
 8011628:	2000      	movs	r0, #0
 801162a:	4927      	ldr	r1, [pc, #156]	; (80116c8 <__ieee754_pow+0x218>)
 801162c:	f7ef f90e 	bl	800084c <__aeabi_ddiv>
 8011630:	2d00      	cmp	r5, #0
 8011632:	da9d      	bge.n	8011570 <__ieee754_pow+0xc0>
 8011634:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011638:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801163c:	ea54 030b 	orrs.w	r3, r4, fp
 8011640:	d108      	bne.n	8011654 <__ieee754_pow+0x1a4>
 8011642:	4602      	mov	r2, r0
 8011644:	460b      	mov	r3, r1
 8011646:	4610      	mov	r0, r2
 8011648:	4619      	mov	r1, r3
 801164a:	f7ee fe1d 	bl	8000288 <__aeabi_dsub>
 801164e:	4602      	mov	r2, r0
 8011650:	460b      	mov	r3, r1
 8011652:	e7ac      	b.n	80115ae <__ieee754_pow+0xfe>
 8011654:	f1bb 0f01 	cmp.w	fp, #1
 8011658:	d18a      	bne.n	8011570 <__ieee754_pow+0xc0>
 801165a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801165e:	4619      	mov	r1, r3
 8011660:	e786      	b.n	8011570 <__ieee754_pow+0xc0>
 8011662:	0fed      	lsrs	r5, r5, #31
 8011664:	1e6b      	subs	r3, r5, #1
 8011666:	930d      	str	r3, [sp, #52]	; 0x34
 8011668:	ea5b 0303 	orrs.w	r3, fp, r3
 801166c:	d102      	bne.n	8011674 <__ieee754_pow+0x1c4>
 801166e:	4632      	mov	r2, r6
 8011670:	463b      	mov	r3, r7
 8011672:	e7e8      	b.n	8011646 <__ieee754_pow+0x196>
 8011674:	4b16      	ldr	r3, [pc, #88]	; (80116d0 <__ieee754_pow+0x220>)
 8011676:	4598      	cmp	r8, r3
 8011678:	f340 80fe 	ble.w	8011878 <__ieee754_pow+0x3c8>
 801167c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011680:	4598      	cmp	r8, r3
 8011682:	dd0a      	ble.n	801169a <__ieee754_pow+0x1ea>
 8011684:	4b0f      	ldr	r3, [pc, #60]	; (80116c4 <__ieee754_pow+0x214>)
 8011686:	429c      	cmp	r4, r3
 8011688:	dc0d      	bgt.n	80116a6 <__ieee754_pow+0x1f6>
 801168a:	f1b9 0f00 	cmp.w	r9, #0
 801168e:	f6bf af6d 	bge.w	801156c <__ieee754_pow+0xbc>
 8011692:	a307      	add	r3, pc, #28	; (adr r3, 80116b0 <__ieee754_pow+0x200>)
 8011694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011698:	e79f      	b.n	80115da <__ieee754_pow+0x12a>
 801169a:	4b0e      	ldr	r3, [pc, #56]	; (80116d4 <__ieee754_pow+0x224>)
 801169c:	429c      	cmp	r4, r3
 801169e:	ddf4      	ble.n	801168a <__ieee754_pow+0x1da>
 80116a0:	4b09      	ldr	r3, [pc, #36]	; (80116c8 <__ieee754_pow+0x218>)
 80116a2:	429c      	cmp	r4, r3
 80116a4:	dd18      	ble.n	80116d8 <__ieee754_pow+0x228>
 80116a6:	f1b9 0f00 	cmp.w	r9, #0
 80116aa:	dcf2      	bgt.n	8011692 <__ieee754_pow+0x1e2>
 80116ac:	e75e      	b.n	801156c <__ieee754_pow+0xbc>
 80116ae:	bf00      	nop
 80116b0:	8800759c 	.word	0x8800759c
 80116b4:	7e37e43c 	.word	0x7e37e43c
 80116b8:	7ff00000 	.word	0x7ff00000
 80116bc:	080135b9 	.word	0x080135b9
 80116c0:	433fffff 	.word	0x433fffff
 80116c4:	3fefffff 	.word	0x3fefffff
 80116c8:	3ff00000 	.word	0x3ff00000
 80116cc:	3fe00000 	.word	0x3fe00000
 80116d0:	41e00000 	.word	0x41e00000
 80116d4:	3feffffe 	.word	0x3feffffe
 80116d8:	2200      	movs	r2, #0
 80116da:	4b63      	ldr	r3, [pc, #396]	; (8011868 <__ieee754_pow+0x3b8>)
 80116dc:	f7ee fdd4 	bl	8000288 <__aeabi_dsub>
 80116e0:	a355      	add	r3, pc, #340	; (adr r3, 8011838 <__ieee754_pow+0x388>)
 80116e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e6:	4604      	mov	r4, r0
 80116e8:	460d      	mov	r5, r1
 80116ea:	f7ee ff85 	bl	80005f8 <__aeabi_dmul>
 80116ee:	a354      	add	r3, pc, #336	; (adr r3, 8011840 <__ieee754_pow+0x390>)
 80116f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f4:	4606      	mov	r6, r0
 80116f6:	460f      	mov	r7, r1
 80116f8:	4620      	mov	r0, r4
 80116fa:	4629      	mov	r1, r5
 80116fc:	f7ee ff7c 	bl	80005f8 <__aeabi_dmul>
 8011700:	2200      	movs	r2, #0
 8011702:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011706:	4b59      	ldr	r3, [pc, #356]	; (801186c <__ieee754_pow+0x3bc>)
 8011708:	4620      	mov	r0, r4
 801170a:	4629      	mov	r1, r5
 801170c:	f7ee ff74 	bl	80005f8 <__aeabi_dmul>
 8011710:	4602      	mov	r2, r0
 8011712:	460b      	mov	r3, r1
 8011714:	a14c      	add	r1, pc, #304	; (adr r1, 8011848 <__ieee754_pow+0x398>)
 8011716:	e9d1 0100 	ldrd	r0, r1, [r1]
 801171a:	f7ee fdb5 	bl	8000288 <__aeabi_dsub>
 801171e:	4622      	mov	r2, r4
 8011720:	462b      	mov	r3, r5
 8011722:	f7ee ff69 	bl	80005f8 <__aeabi_dmul>
 8011726:	4602      	mov	r2, r0
 8011728:	460b      	mov	r3, r1
 801172a:	2000      	movs	r0, #0
 801172c:	4950      	ldr	r1, [pc, #320]	; (8011870 <__ieee754_pow+0x3c0>)
 801172e:	f7ee fdab 	bl	8000288 <__aeabi_dsub>
 8011732:	4622      	mov	r2, r4
 8011734:	462b      	mov	r3, r5
 8011736:	4680      	mov	r8, r0
 8011738:	4689      	mov	r9, r1
 801173a:	4620      	mov	r0, r4
 801173c:	4629      	mov	r1, r5
 801173e:	f7ee ff5b 	bl	80005f8 <__aeabi_dmul>
 8011742:	4602      	mov	r2, r0
 8011744:	460b      	mov	r3, r1
 8011746:	4640      	mov	r0, r8
 8011748:	4649      	mov	r1, r9
 801174a:	f7ee ff55 	bl	80005f8 <__aeabi_dmul>
 801174e:	a340      	add	r3, pc, #256	; (adr r3, 8011850 <__ieee754_pow+0x3a0>)
 8011750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011754:	f7ee ff50 	bl	80005f8 <__aeabi_dmul>
 8011758:	4602      	mov	r2, r0
 801175a:	460b      	mov	r3, r1
 801175c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011760:	f7ee fd92 	bl	8000288 <__aeabi_dsub>
 8011764:	4602      	mov	r2, r0
 8011766:	460b      	mov	r3, r1
 8011768:	4604      	mov	r4, r0
 801176a:	460d      	mov	r5, r1
 801176c:	4630      	mov	r0, r6
 801176e:	4639      	mov	r1, r7
 8011770:	f7ee fd8c 	bl	800028c <__adddf3>
 8011774:	2000      	movs	r0, #0
 8011776:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801177a:	4632      	mov	r2, r6
 801177c:	463b      	mov	r3, r7
 801177e:	f7ee fd83 	bl	8000288 <__aeabi_dsub>
 8011782:	4602      	mov	r2, r0
 8011784:	460b      	mov	r3, r1
 8011786:	4620      	mov	r0, r4
 8011788:	4629      	mov	r1, r5
 801178a:	f7ee fd7d 	bl	8000288 <__aeabi_dsub>
 801178e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011790:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8011794:	4313      	orrs	r3, r2
 8011796:	4606      	mov	r6, r0
 8011798:	460f      	mov	r7, r1
 801179a:	f040 81eb 	bne.w	8011b74 <__ieee754_pow+0x6c4>
 801179e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011858 <__ieee754_pow+0x3a8>
 80117a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80117a6:	2400      	movs	r4, #0
 80117a8:	4622      	mov	r2, r4
 80117aa:	462b      	mov	r3, r5
 80117ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80117b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80117b4:	f7ee fd68 	bl	8000288 <__aeabi_dsub>
 80117b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80117bc:	f7ee ff1c 	bl	80005f8 <__aeabi_dmul>
 80117c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80117c4:	4680      	mov	r8, r0
 80117c6:	4689      	mov	r9, r1
 80117c8:	4630      	mov	r0, r6
 80117ca:	4639      	mov	r1, r7
 80117cc:	f7ee ff14 	bl	80005f8 <__aeabi_dmul>
 80117d0:	4602      	mov	r2, r0
 80117d2:	460b      	mov	r3, r1
 80117d4:	4640      	mov	r0, r8
 80117d6:	4649      	mov	r1, r9
 80117d8:	f7ee fd58 	bl	800028c <__adddf3>
 80117dc:	4622      	mov	r2, r4
 80117de:	462b      	mov	r3, r5
 80117e0:	4680      	mov	r8, r0
 80117e2:	4689      	mov	r9, r1
 80117e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117e8:	f7ee ff06 	bl	80005f8 <__aeabi_dmul>
 80117ec:	460b      	mov	r3, r1
 80117ee:	4604      	mov	r4, r0
 80117f0:	460d      	mov	r5, r1
 80117f2:	4602      	mov	r2, r0
 80117f4:	4649      	mov	r1, r9
 80117f6:	4640      	mov	r0, r8
 80117f8:	e9cd 4500 	strd	r4, r5, [sp]
 80117fc:	f7ee fd46 	bl	800028c <__adddf3>
 8011800:	4b1c      	ldr	r3, [pc, #112]	; (8011874 <__ieee754_pow+0x3c4>)
 8011802:	4299      	cmp	r1, r3
 8011804:	4606      	mov	r6, r0
 8011806:	460f      	mov	r7, r1
 8011808:	468b      	mov	fp, r1
 801180a:	f340 82f7 	ble.w	8011dfc <__ieee754_pow+0x94c>
 801180e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011812:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011816:	4303      	orrs	r3, r0
 8011818:	f000 81ea 	beq.w	8011bf0 <__ieee754_pow+0x740>
 801181c:	a310      	add	r3, pc, #64	; (adr r3, 8011860 <__ieee754_pow+0x3b0>)
 801181e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011822:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011826:	f7ee fee7 	bl	80005f8 <__aeabi_dmul>
 801182a:	a30d      	add	r3, pc, #52	; (adr r3, 8011860 <__ieee754_pow+0x3b0>)
 801182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011830:	e6d5      	b.n	80115de <__ieee754_pow+0x12e>
 8011832:	bf00      	nop
 8011834:	f3af 8000 	nop.w
 8011838:	60000000 	.word	0x60000000
 801183c:	3ff71547 	.word	0x3ff71547
 8011840:	f85ddf44 	.word	0xf85ddf44
 8011844:	3e54ae0b 	.word	0x3e54ae0b
 8011848:	55555555 	.word	0x55555555
 801184c:	3fd55555 	.word	0x3fd55555
 8011850:	652b82fe 	.word	0x652b82fe
 8011854:	3ff71547 	.word	0x3ff71547
 8011858:	00000000 	.word	0x00000000
 801185c:	bff00000 	.word	0xbff00000
 8011860:	8800759c 	.word	0x8800759c
 8011864:	7e37e43c 	.word	0x7e37e43c
 8011868:	3ff00000 	.word	0x3ff00000
 801186c:	3fd00000 	.word	0x3fd00000
 8011870:	3fe00000 	.word	0x3fe00000
 8011874:	408fffff 	.word	0x408fffff
 8011878:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801187c:	f04f 0200 	mov.w	r2, #0
 8011880:	da05      	bge.n	801188e <__ieee754_pow+0x3de>
 8011882:	4bd3      	ldr	r3, [pc, #844]	; (8011bd0 <__ieee754_pow+0x720>)
 8011884:	f7ee feb8 	bl	80005f8 <__aeabi_dmul>
 8011888:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801188c:	460c      	mov	r4, r1
 801188e:	1523      	asrs	r3, r4, #20
 8011890:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011894:	4413      	add	r3, r2
 8011896:	9309      	str	r3, [sp, #36]	; 0x24
 8011898:	4bce      	ldr	r3, [pc, #824]	; (8011bd4 <__ieee754_pow+0x724>)
 801189a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801189e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80118a2:	429c      	cmp	r4, r3
 80118a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80118a8:	dd08      	ble.n	80118bc <__ieee754_pow+0x40c>
 80118aa:	4bcb      	ldr	r3, [pc, #812]	; (8011bd8 <__ieee754_pow+0x728>)
 80118ac:	429c      	cmp	r4, r3
 80118ae:	f340 815e 	ble.w	8011b6e <__ieee754_pow+0x6be>
 80118b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118b4:	3301      	adds	r3, #1
 80118b6:	9309      	str	r3, [sp, #36]	; 0x24
 80118b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80118bc:	f04f 0a00 	mov.w	sl, #0
 80118c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80118c4:	930c      	str	r3, [sp, #48]	; 0x30
 80118c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80118c8:	4bc4      	ldr	r3, [pc, #784]	; (8011bdc <__ieee754_pow+0x72c>)
 80118ca:	4413      	add	r3, r2
 80118cc:	ed93 7b00 	vldr	d7, [r3]
 80118d0:	4629      	mov	r1, r5
 80118d2:	ec53 2b17 	vmov	r2, r3, d7
 80118d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80118da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80118de:	f7ee fcd3 	bl	8000288 <__aeabi_dsub>
 80118e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80118e6:	4606      	mov	r6, r0
 80118e8:	460f      	mov	r7, r1
 80118ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80118ee:	f7ee fccd 	bl	800028c <__adddf3>
 80118f2:	4602      	mov	r2, r0
 80118f4:	460b      	mov	r3, r1
 80118f6:	2000      	movs	r0, #0
 80118f8:	49b9      	ldr	r1, [pc, #740]	; (8011be0 <__ieee754_pow+0x730>)
 80118fa:	f7ee ffa7 	bl	800084c <__aeabi_ddiv>
 80118fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8011902:	4602      	mov	r2, r0
 8011904:	460b      	mov	r3, r1
 8011906:	4630      	mov	r0, r6
 8011908:	4639      	mov	r1, r7
 801190a:	f7ee fe75 	bl	80005f8 <__aeabi_dmul>
 801190e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011912:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8011916:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801191a:	2300      	movs	r3, #0
 801191c:	9302      	str	r3, [sp, #8]
 801191e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011922:	106d      	asrs	r5, r5, #1
 8011924:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011928:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801192c:	2200      	movs	r2, #0
 801192e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8011932:	4640      	mov	r0, r8
 8011934:	4649      	mov	r1, r9
 8011936:	4614      	mov	r4, r2
 8011938:	461d      	mov	r5, r3
 801193a:	f7ee fe5d 	bl	80005f8 <__aeabi_dmul>
 801193e:	4602      	mov	r2, r0
 8011940:	460b      	mov	r3, r1
 8011942:	4630      	mov	r0, r6
 8011944:	4639      	mov	r1, r7
 8011946:	f7ee fc9f 	bl	8000288 <__aeabi_dsub>
 801194a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801194e:	4606      	mov	r6, r0
 8011950:	460f      	mov	r7, r1
 8011952:	4620      	mov	r0, r4
 8011954:	4629      	mov	r1, r5
 8011956:	f7ee fc97 	bl	8000288 <__aeabi_dsub>
 801195a:	4602      	mov	r2, r0
 801195c:	460b      	mov	r3, r1
 801195e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8011962:	f7ee fc91 	bl	8000288 <__aeabi_dsub>
 8011966:	4642      	mov	r2, r8
 8011968:	464b      	mov	r3, r9
 801196a:	f7ee fe45 	bl	80005f8 <__aeabi_dmul>
 801196e:	4602      	mov	r2, r0
 8011970:	460b      	mov	r3, r1
 8011972:	4630      	mov	r0, r6
 8011974:	4639      	mov	r1, r7
 8011976:	f7ee fc87 	bl	8000288 <__aeabi_dsub>
 801197a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801197e:	f7ee fe3b 	bl	80005f8 <__aeabi_dmul>
 8011982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011986:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801198a:	4610      	mov	r0, r2
 801198c:	4619      	mov	r1, r3
 801198e:	f7ee fe33 	bl	80005f8 <__aeabi_dmul>
 8011992:	a37b      	add	r3, pc, #492	; (adr r3, 8011b80 <__ieee754_pow+0x6d0>)
 8011994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011998:	4604      	mov	r4, r0
 801199a:	460d      	mov	r5, r1
 801199c:	f7ee fe2c 	bl	80005f8 <__aeabi_dmul>
 80119a0:	a379      	add	r3, pc, #484	; (adr r3, 8011b88 <__ieee754_pow+0x6d8>)
 80119a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119a6:	f7ee fc71 	bl	800028c <__adddf3>
 80119aa:	4622      	mov	r2, r4
 80119ac:	462b      	mov	r3, r5
 80119ae:	f7ee fe23 	bl	80005f8 <__aeabi_dmul>
 80119b2:	a377      	add	r3, pc, #476	; (adr r3, 8011b90 <__ieee754_pow+0x6e0>)
 80119b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b8:	f7ee fc68 	bl	800028c <__adddf3>
 80119bc:	4622      	mov	r2, r4
 80119be:	462b      	mov	r3, r5
 80119c0:	f7ee fe1a 	bl	80005f8 <__aeabi_dmul>
 80119c4:	a374      	add	r3, pc, #464	; (adr r3, 8011b98 <__ieee754_pow+0x6e8>)
 80119c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ca:	f7ee fc5f 	bl	800028c <__adddf3>
 80119ce:	4622      	mov	r2, r4
 80119d0:	462b      	mov	r3, r5
 80119d2:	f7ee fe11 	bl	80005f8 <__aeabi_dmul>
 80119d6:	a372      	add	r3, pc, #456	; (adr r3, 8011ba0 <__ieee754_pow+0x6f0>)
 80119d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119dc:	f7ee fc56 	bl	800028c <__adddf3>
 80119e0:	4622      	mov	r2, r4
 80119e2:	462b      	mov	r3, r5
 80119e4:	f7ee fe08 	bl	80005f8 <__aeabi_dmul>
 80119e8:	a36f      	add	r3, pc, #444	; (adr r3, 8011ba8 <__ieee754_pow+0x6f8>)
 80119ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ee:	f7ee fc4d 	bl	800028c <__adddf3>
 80119f2:	4622      	mov	r2, r4
 80119f4:	4606      	mov	r6, r0
 80119f6:	460f      	mov	r7, r1
 80119f8:	462b      	mov	r3, r5
 80119fa:	4620      	mov	r0, r4
 80119fc:	4629      	mov	r1, r5
 80119fe:	f7ee fdfb 	bl	80005f8 <__aeabi_dmul>
 8011a02:	4602      	mov	r2, r0
 8011a04:	460b      	mov	r3, r1
 8011a06:	4630      	mov	r0, r6
 8011a08:	4639      	mov	r1, r7
 8011a0a:	f7ee fdf5 	bl	80005f8 <__aeabi_dmul>
 8011a0e:	4642      	mov	r2, r8
 8011a10:	4604      	mov	r4, r0
 8011a12:	460d      	mov	r5, r1
 8011a14:	464b      	mov	r3, r9
 8011a16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011a1a:	f7ee fc37 	bl	800028c <__adddf3>
 8011a1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011a22:	f7ee fde9 	bl	80005f8 <__aeabi_dmul>
 8011a26:	4622      	mov	r2, r4
 8011a28:	462b      	mov	r3, r5
 8011a2a:	f7ee fc2f 	bl	800028c <__adddf3>
 8011a2e:	4642      	mov	r2, r8
 8011a30:	4606      	mov	r6, r0
 8011a32:	460f      	mov	r7, r1
 8011a34:	464b      	mov	r3, r9
 8011a36:	4640      	mov	r0, r8
 8011a38:	4649      	mov	r1, r9
 8011a3a:	f7ee fddd 	bl	80005f8 <__aeabi_dmul>
 8011a3e:	2200      	movs	r2, #0
 8011a40:	4b68      	ldr	r3, [pc, #416]	; (8011be4 <__ieee754_pow+0x734>)
 8011a42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8011a46:	f7ee fc21 	bl	800028c <__adddf3>
 8011a4a:	4632      	mov	r2, r6
 8011a4c:	463b      	mov	r3, r7
 8011a4e:	f7ee fc1d 	bl	800028c <__adddf3>
 8011a52:	9802      	ldr	r0, [sp, #8]
 8011a54:	460d      	mov	r5, r1
 8011a56:	4604      	mov	r4, r0
 8011a58:	4602      	mov	r2, r0
 8011a5a:	460b      	mov	r3, r1
 8011a5c:	4640      	mov	r0, r8
 8011a5e:	4649      	mov	r1, r9
 8011a60:	f7ee fdca 	bl	80005f8 <__aeabi_dmul>
 8011a64:	2200      	movs	r2, #0
 8011a66:	4680      	mov	r8, r0
 8011a68:	4689      	mov	r9, r1
 8011a6a:	4b5e      	ldr	r3, [pc, #376]	; (8011be4 <__ieee754_pow+0x734>)
 8011a6c:	4620      	mov	r0, r4
 8011a6e:	4629      	mov	r1, r5
 8011a70:	f7ee fc0a 	bl	8000288 <__aeabi_dsub>
 8011a74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011a78:	f7ee fc06 	bl	8000288 <__aeabi_dsub>
 8011a7c:	4602      	mov	r2, r0
 8011a7e:	460b      	mov	r3, r1
 8011a80:	4630      	mov	r0, r6
 8011a82:	4639      	mov	r1, r7
 8011a84:	f7ee fc00 	bl	8000288 <__aeabi_dsub>
 8011a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a8c:	f7ee fdb4 	bl	80005f8 <__aeabi_dmul>
 8011a90:	4622      	mov	r2, r4
 8011a92:	4606      	mov	r6, r0
 8011a94:	460f      	mov	r7, r1
 8011a96:	462b      	mov	r3, r5
 8011a98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011a9c:	f7ee fdac 	bl	80005f8 <__aeabi_dmul>
 8011aa0:	4602      	mov	r2, r0
 8011aa2:	460b      	mov	r3, r1
 8011aa4:	4630      	mov	r0, r6
 8011aa6:	4639      	mov	r1, r7
 8011aa8:	f7ee fbf0 	bl	800028c <__adddf3>
 8011aac:	4606      	mov	r6, r0
 8011aae:	460f      	mov	r7, r1
 8011ab0:	4602      	mov	r2, r0
 8011ab2:	460b      	mov	r3, r1
 8011ab4:	4640      	mov	r0, r8
 8011ab6:	4649      	mov	r1, r9
 8011ab8:	f7ee fbe8 	bl	800028c <__adddf3>
 8011abc:	9802      	ldr	r0, [sp, #8]
 8011abe:	a33c      	add	r3, pc, #240	; (adr r3, 8011bb0 <__ieee754_pow+0x700>)
 8011ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac4:	4604      	mov	r4, r0
 8011ac6:	460d      	mov	r5, r1
 8011ac8:	f7ee fd96 	bl	80005f8 <__aeabi_dmul>
 8011acc:	4642      	mov	r2, r8
 8011ace:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011ad2:	464b      	mov	r3, r9
 8011ad4:	4620      	mov	r0, r4
 8011ad6:	4629      	mov	r1, r5
 8011ad8:	f7ee fbd6 	bl	8000288 <__aeabi_dsub>
 8011adc:	4602      	mov	r2, r0
 8011ade:	460b      	mov	r3, r1
 8011ae0:	4630      	mov	r0, r6
 8011ae2:	4639      	mov	r1, r7
 8011ae4:	f7ee fbd0 	bl	8000288 <__aeabi_dsub>
 8011ae8:	a333      	add	r3, pc, #204	; (adr r3, 8011bb8 <__ieee754_pow+0x708>)
 8011aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aee:	f7ee fd83 	bl	80005f8 <__aeabi_dmul>
 8011af2:	a333      	add	r3, pc, #204	; (adr r3, 8011bc0 <__ieee754_pow+0x710>)
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	4606      	mov	r6, r0
 8011afa:	460f      	mov	r7, r1
 8011afc:	4620      	mov	r0, r4
 8011afe:	4629      	mov	r1, r5
 8011b00:	f7ee fd7a 	bl	80005f8 <__aeabi_dmul>
 8011b04:	4602      	mov	r2, r0
 8011b06:	460b      	mov	r3, r1
 8011b08:	4630      	mov	r0, r6
 8011b0a:	4639      	mov	r1, r7
 8011b0c:	f7ee fbbe 	bl	800028c <__adddf3>
 8011b10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b12:	4b35      	ldr	r3, [pc, #212]	; (8011be8 <__ieee754_pow+0x738>)
 8011b14:	4413      	add	r3, r2
 8011b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b1a:	f7ee fbb7 	bl	800028c <__adddf3>
 8011b1e:	4604      	mov	r4, r0
 8011b20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011b22:	460d      	mov	r5, r1
 8011b24:	f7ee fcfe 	bl	8000524 <__aeabi_i2d>
 8011b28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011b2a:	4b30      	ldr	r3, [pc, #192]	; (8011bec <__ieee754_pow+0x73c>)
 8011b2c:	4413      	add	r3, r2
 8011b2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011b32:	4606      	mov	r6, r0
 8011b34:	460f      	mov	r7, r1
 8011b36:	4622      	mov	r2, r4
 8011b38:	462b      	mov	r3, r5
 8011b3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011b3e:	f7ee fba5 	bl	800028c <__adddf3>
 8011b42:	4642      	mov	r2, r8
 8011b44:	464b      	mov	r3, r9
 8011b46:	f7ee fba1 	bl	800028c <__adddf3>
 8011b4a:	4632      	mov	r2, r6
 8011b4c:	463b      	mov	r3, r7
 8011b4e:	f7ee fb9d 	bl	800028c <__adddf3>
 8011b52:	9802      	ldr	r0, [sp, #8]
 8011b54:	4632      	mov	r2, r6
 8011b56:	463b      	mov	r3, r7
 8011b58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011b5c:	f7ee fb94 	bl	8000288 <__aeabi_dsub>
 8011b60:	4642      	mov	r2, r8
 8011b62:	464b      	mov	r3, r9
 8011b64:	f7ee fb90 	bl	8000288 <__aeabi_dsub>
 8011b68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011b6c:	e607      	b.n	801177e <__ieee754_pow+0x2ce>
 8011b6e:	f04f 0a01 	mov.w	sl, #1
 8011b72:	e6a5      	b.n	80118c0 <__ieee754_pow+0x410>
 8011b74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011bc8 <__ieee754_pow+0x718>
 8011b78:	e613      	b.n	80117a2 <__ieee754_pow+0x2f2>
 8011b7a:	bf00      	nop
 8011b7c:	f3af 8000 	nop.w
 8011b80:	4a454eef 	.word	0x4a454eef
 8011b84:	3fca7e28 	.word	0x3fca7e28
 8011b88:	93c9db65 	.word	0x93c9db65
 8011b8c:	3fcd864a 	.word	0x3fcd864a
 8011b90:	a91d4101 	.word	0xa91d4101
 8011b94:	3fd17460 	.word	0x3fd17460
 8011b98:	518f264d 	.word	0x518f264d
 8011b9c:	3fd55555 	.word	0x3fd55555
 8011ba0:	db6fabff 	.word	0xdb6fabff
 8011ba4:	3fdb6db6 	.word	0x3fdb6db6
 8011ba8:	33333303 	.word	0x33333303
 8011bac:	3fe33333 	.word	0x3fe33333
 8011bb0:	e0000000 	.word	0xe0000000
 8011bb4:	3feec709 	.word	0x3feec709
 8011bb8:	dc3a03fd 	.word	0xdc3a03fd
 8011bbc:	3feec709 	.word	0x3feec709
 8011bc0:	145b01f5 	.word	0x145b01f5
 8011bc4:	be3e2fe0 	.word	0xbe3e2fe0
 8011bc8:	00000000 	.word	0x00000000
 8011bcc:	3ff00000 	.word	0x3ff00000
 8011bd0:	43400000 	.word	0x43400000
 8011bd4:	0003988e 	.word	0x0003988e
 8011bd8:	000bb679 	.word	0x000bb679
 8011bdc:	080136d0 	.word	0x080136d0
 8011be0:	3ff00000 	.word	0x3ff00000
 8011be4:	40080000 	.word	0x40080000
 8011be8:	080136f0 	.word	0x080136f0
 8011bec:	080136e0 	.word	0x080136e0
 8011bf0:	a3b4      	add	r3, pc, #720	; (adr r3, 8011ec4 <__ieee754_pow+0xa14>)
 8011bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf6:	4640      	mov	r0, r8
 8011bf8:	4649      	mov	r1, r9
 8011bfa:	f7ee fb47 	bl	800028c <__adddf3>
 8011bfe:	4622      	mov	r2, r4
 8011c00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011c04:	462b      	mov	r3, r5
 8011c06:	4630      	mov	r0, r6
 8011c08:	4639      	mov	r1, r7
 8011c0a:	f7ee fb3d 	bl	8000288 <__aeabi_dsub>
 8011c0e:	4602      	mov	r2, r0
 8011c10:	460b      	mov	r3, r1
 8011c12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011c16:	f7ee ff7f 	bl	8000b18 <__aeabi_dcmpgt>
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	f47f adfe 	bne.w	801181c <__ieee754_pow+0x36c>
 8011c20:	4aa3      	ldr	r2, [pc, #652]	; (8011eb0 <__ieee754_pow+0xa00>)
 8011c22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011c26:	4293      	cmp	r3, r2
 8011c28:	f340 810a 	ble.w	8011e40 <__ieee754_pow+0x990>
 8011c2c:	151b      	asrs	r3, r3, #20
 8011c2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011c32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011c36:	fa4a f303 	asr.w	r3, sl, r3
 8011c3a:	445b      	add	r3, fp
 8011c3c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011c40:	4e9c      	ldr	r6, [pc, #624]	; (8011eb4 <__ieee754_pow+0xa04>)
 8011c42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011c46:	4116      	asrs	r6, r2
 8011c48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011c4c:	2000      	movs	r0, #0
 8011c4e:	ea23 0106 	bic.w	r1, r3, r6
 8011c52:	f1c2 0214 	rsb	r2, r2, #20
 8011c56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011c5a:	fa4a fa02 	asr.w	sl, sl, r2
 8011c5e:	f1bb 0f00 	cmp.w	fp, #0
 8011c62:	4602      	mov	r2, r0
 8011c64:	460b      	mov	r3, r1
 8011c66:	4620      	mov	r0, r4
 8011c68:	4629      	mov	r1, r5
 8011c6a:	bfb8      	it	lt
 8011c6c:	f1ca 0a00 	rsblt	sl, sl, #0
 8011c70:	f7ee fb0a 	bl	8000288 <__aeabi_dsub>
 8011c74:	e9cd 0100 	strd	r0, r1, [sp]
 8011c78:	4642      	mov	r2, r8
 8011c7a:	464b      	mov	r3, r9
 8011c7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c80:	f7ee fb04 	bl	800028c <__adddf3>
 8011c84:	2000      	movs	r0, #0
 8011c86:	a378      	add	r3, pc, #480	; (adr r3, 8011e68 <__ieee754_pow+0x9b8>)
 8011c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c8c:	4604      	mov	r4, r0
 8011c8e:	460d      	mov	r5, r1
 8011c90:	f7ee fcb2 	bl	80005f8 <__aeabi_dmul>
 8011c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c98:	4606      	mov	r6, r0
 8011c9a:	460f      	mov	r7, r1
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	4629      	mov	r1, r5
 8011ca0:	f7ee faf2 	bl	8000288 <__aeabi_dsub>
 8011ca4:	4602      	mov	r2, r0
 8011ca6:	460b      	mov	r3, r1
 8011ca8:	4640      	mov	r0, r8
 8011caa:	4649      	mov	r1, r9
 8011cac:	f7ee faec 	bl	8000288 <__aeabi_dsub>
 8011cb0:	a36f      	add	r3, pc, #444	; (adr r3, 8011e70 <__ieee754_pow+0x9c0>)
 8011cb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cb6:	f7ee fc9f 	bl	80005f8 <__aeabi_dmul>
 8011cba:	a36f      	add	r3, pc, #444	; (adr r3, 8011e78 <__ieee754_pow+0x9c8>)
 8011cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc0:	4680      	mov	r8, r0
 8011cc2:	4689      	mov	r9, r1
 8011cc4:	4620      	mov	r0, r4
 8011cc6:	4629      	mov	r1, r5
 8011cc8:	f7ee fc96 	bl	80005f8 <__aeabi_dmul>
 8011ccc:	4602      	mov	r2, r0
 8011cce:	460b      	mov	r3, r1
 8011cd0:	4640      	mov	r0, r8
 8011cd2:	4649      	mov	r1, r9
 8011cd4:	f7ee fada 	bl	800028c <__adddf3>
 8011cd8:	4604      	mov	r4, r0
 8011cda:	460d      	mov	r5, r1
 8011cdc:	4602      	mov	r2, r0
 8011cde:	460b      	mov	r3, r1
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	4639      	mov	r1, r7
 8011ce4:	f7ee fad2 	bl	800028c <__adddf3>
 8011ce8:	4632      	mov	r2, r6
 8011cea:	463b      	mov	r3, r7
 8011cec:	4680      	mov	r8, r0
 8011cee:	4689      	mov	r9, r1
 8011cf0:	f7ee faca 	bl	8000288 <__aeabi_dsub>
 8011cf4:	4602      	mov	r2, r0
 8011cf6:	460b      	mov	r3, r1
 8011cf8:	4620      	mov	r0, r4
 8011cfa:	4629      	mov	r1, r5
 8011cfc:	f7ee fac4 	bl	8000288 <__aeabi_dsub>
 8011d00:	4642      	mov	r2, r8
 8011d02:	4606      	mov	r6, r0
 8011d04:	460f      	mov	r7, r1
 8011d06:	464b      	mov	r3, r9
 8011d08:	4640      	mov	r0, r8
 8011d0a:	4649      	mov	r1, r9
 8011d0c:	f7ee fc74 	bl	80005f8 <__aeabi_dmul>
 8011d10:	a35b      	add	r3, pc, #364	; (adr r3, 8011e80 <__ieee754_pow+0x9d0>)
 8011d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d16:	4604      	mov	r4, r0
 8011d18:	460d      	mov	r5, r1
 8011d1a:	f7ee fc6d 	bl	80005f8 <__aeabi_dmul>
 8011d1e:	a35a      	add	r3, pc, #360	; (adr r3, 8011e88 <__ieee754_pow+0x9d8>)
 8011d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d24:	f7ee fab0 	bl	8000288 <__aeabi_dsub>
 8011d28:	4622      	mov	r2, r4
 8011d2a:	462b      	mov	r3, r5
 8011d2c:	f7ee fc64 	bl	80005f8 <__aeabi_dmul>
 8011d30:	a357      	add	r3, pc, #348	; (adr r3, 8011e90 <__ieee754_pow+0x9e0>)
 8011d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d36:	f7ee faa9 	bl	800028c <__adddf3>
 8011d3a:	4622      	mov	r2, r4
 8011d3c:	462b      	mov	r3, r5
 8011d3e:	f7ee fc5b 	bl	80005f8 <__aeabi_dmul>
 8011d42:	a355      	add	r3, pc, #340	; (adr r3, 8011e98 <__ieee754_pow+0x9e8>)
 8011d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d48:	f7ee fa9e 	bl	8000288 <__aeabi_dsub>
 8011d4c:	4622      	mov	r2, r4
 8011d4e:	462b      	mov	r3, r5
 8011d50:	f7ee fc52 	bl	80005f8 <__aeabi_dmul>
 8011d54:	a352      	add	r3, pc, #328	; (adr r3, 8011ea0 <__ieee754_pow+0x9f0>)
 8011d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5a:	f7ee fa97 	bl	800028c <__adddf3>
 8011d5e:	4622      	mov	r2, r4
 8011d60:	462b      	mov	r3, r5
 8011d62:	f7ee fc49 	bl	80005f8 <__aeabi_dmul>
 8011d66:	4602      	mov	r2, r0
 8011d68:	460b      	mov	r3, r1
 8011d6a:	4640      	mov	r0, r8
 8011d6c:	4649      	mov	r1, r9
 8011d6e:	f7ee fa8b 	bl	8000288 <__aeabi_dsub>
 8011d72:	4604      	mov	r4, r0
 8011d74:	460d      	mov	r5, r1
 8011d76:	4602      	mov	r2, r0
 8011d78:	460b      	mov	r3, r1
 8011d7a:	4640      	mov	r0, r8
 8011d7c:	4649      	mov	r1, r9
 8011d7e:	f7ee fc3b 	bl	80005f8 <__aeabi_dmul>
 8011d82:	2200      	movs	r2, #0
 8011d84:	e9cd 0100 	strd	r0, r1, [sp]
 8011d88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011d8c:	4620      	mov	r0, r4
 8011d8e:	4629      	mov	r1, r5
 8011d90:	f7ee fa7a 	bl	8000288 <__aeabi_dsub>
 8011d94:	4602      	mov	r2, r0
 8011d96:	460b      	mov	r3, r1
 8011d98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011d9c:	f7ee fd56 	bl	800084c <__aeabi_ddiv>
 8011da0:	4632      	mov	r2, r6
 8011da2:	4604      	mov	r4, r0
 8011da4:	460d      	mov	r5, r1
 8011da6:	463b      	mov	r3, r7
 8011da8:	4640      	mov	r0, r8
 8011daa:	4649      	mov	r1, r9
 8011dac:	f7ee fc24 	bl	80005f8 <__aeabi_dmul>
 8011db0:	4632      	mov	r2, r6
 8011db2:	463b      	mov	r3, r7
 8011db4:	f7ee fa6a 	bl	800028c <__adddf3>
 8011db8:	4602      	mov	r2, r0
 8011dba:	460b      	mov	r3, r1
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	f7ee fa62 	bl	8000288 <__aeabi_dsub>
 8011dc4:	4642      	mov	r2, r8
 8011dc6:	464b      	mov	r3, r9
 8011dc8:	f7ee fa5e 	bl	8000288 <__aeabi_dsub>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	2000      	movs	r0, #0
 8011dd2:	4939      	ldr	r1, [pc, #228]	; (8011eb8 <__ieee754_pow+0xa08>)
 8011dd4:	f7ee fa58 	bl	8000288 <__aeabi_dsub>
 8011dd8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8011ddc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011de0:	4602      	mov	r2, r0
 8011de2:	460b      	mov	r3, r1
 8011de4:	da2f      	bge.n	8011e46 <__ieee754_pow+0x996>
 8011de6:	4650      	mov	r0, sl
 8011de8:	ec43 2b10 	vmov	d0, r2, r3
 8011dec:	f001 f8fc 	bl	8012fe8 <scalbn>
 8011df0:	ec51 0b10 	vmov	r0, r1, d0
 8011df4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8011df8:	f7ff bbf1 	b.w	80115de <__ieee754_pow+0x12e>
 8011dfc:	4b2f      	ldr	r3, [pc, #188]	; (8011ebc <__ieee754_pow+0xa0c>)
 8011dfe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011e02:	429e      	cmp	r6, r3
 8011e04:	f77f af0c 	ble.w	8011c20 <__ieee754_pow+0x770>
 8011e08:	4b2d      	ldr	r3, [pc, #180]	; (8011ec0 <__ieee754_pow+0xa10>)
 8011e0a:	440b      	add	r3, r1
 8011e0c:	4303      	orrs	r3, r0
 8011e0e:	d00b      	beq.n	8011e28 <__ieee754_pow+0x978>
 8011e10:	a325      	add	r3, pc, #148	; (adr r3, 8011ea8 <__ieee754_pow+0x9f8>)
 8011e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011e1a:	f7ee fbed 	bl	80005f8 <__aeabi_dmul>
 8011e1e:	a322      	add	r3, pc, #136	; (adr r3, 8011ea8 <__ieee754_pow+0x9f8>)
 8011e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e24:	f7ff bbdb 	b.w	80115de <__ieee754_pow+0x12e>
 8011e28:	4622      	mov	r2, r4
 8011e2a:	462b      	mov	r3, r5
 8011e2c:	f7ee fa2c 	bl	8000288 <__aeabi_dsub>
 8011e30:	4642      	mov	r2, r8
 8011e32:	464b      	mov	r3, r9
 8011e34:	f7ee fe66 	bl	8000b04 <__aeabi_dcmpge>
 8011e38:	2800      	cmp	r0, #0
 8011e3a:	f43f aef1 	beq.w	8011c20 <__ieee754_pow+0x770>
 8011e3e:	e7e7      	b.n	8011e10 <__ieee754_pow+0x960>
 8011e40:	f04f 0a00 	mov.w	sl, #0
 8011e44:	e718      	b.n	8011c78 <__ieee754_pow+0x7c8>
 8011e46:	4621      	mov	r1, r4
 8011e48:	e7d4      	b.n	8011df4 <__ieee754_pow+0x944>
 8011e4a:	2000      	movs	r0, #0
 8011e4c:	491a      	ldr	r1, [pc, #104]	; (8011eb8 <__ieee754_pow+0xa08>)
 8011e4e:	f7ff bb8f 	b.w	8011570 <__ieee754_pow+0xc0>
 8011e52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011e56:	f7ff bb8b 	b.w	8011570 <__ieee754_pow+0xc0>
 8011e5a:	4630      	mov	r0, r6
 8011e5c:	4639      	mov	r1, r7
 8011e5e:	f7ff bb87 	b.w	8011570 <__ieee754_pow+0xc0>
 8011e62:	4693      	mov	fp, r2
 8011e64:	f7ff bb98 	b.w	8011598 <__ieee754_pow+0xe8>
 8011e68:	00000000 	.word	0x00000000
 8011e6c:	3fe62e43 	.word	0x3fe62e43
 8011e70:	fefa39ef 	.word	0xfefa39ef
 8011e74:	3fe62e42 	.word	0x3fe62e42
 8011e78:	0ca86c39 	.word	0x0ca86c39
 8011e7c:	be205c61 	.word	0xbe205c61
 8011e80:	72bea4d0 	.word	0x72bea4d0
 8011e84:	3e663769 	.word	0x3e663769
 8011e88:	c5d26bf1 	.word	0xc5d26bf1
 8011e8c:	3ebbbd41 	.word	0x3ebbbd41
 8011e90:	af25de2c 	.word	0xaf25de2c
 8011e94:	3f11566a 	.word	0x3f11566a
 8011e98:	16bebd93 	.word	0x16bebd93
 8011e9c:	3f66c16c 	.word	0x3f66c16c
 8011ea0:	5555553e 	.word	0x5555553e
 8011ea4:	3fc55555 	.word	0x3fc55555
 8011ea8:	c2f8f359 	.word	0xc2f8f359
 8011eac:	01a56e1f 	.word	0x01a56e1f
 8011eb0:	3fe00000 	.word	0x3fe00000
 8011eb4:	000fffff 	.word	0x000fffff
 8011eb8:	3ff00000 	.word	0x3ff00000
 8011ebc:	4090cbff 	.word	0x4090cbff
 8011ec0:	3f6f3400 	.word	0x3f6f3400
 8011ec4:	652b82fe 	.word	0x652b82fe
 8011ec8:	3c971547 	.word	0x3c971547
 8011ecc:	00000000 	.word	0x00000000

08011ed0 <__ieee754_rem_pio2>:
 8011ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed4:	ec57 6b10 	vmov	r6, r7, d0
 8011ed8:	4bc3      	ldr	r3, [pc, #780]	; (80121e8 <__ieee754_rem_pio2+0x318>)
 8011eda:	b08d      	sub	sp, #52	; 0x34
 8011edc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011ee0:	4598      	cmp	r8, r3
 8011ee2:	4604      	mov	r4, r0
 8011ee4:	9704      	str	r7, [sp, #16]
 8011ee6:	dc07      	bgt.n	8011ef8 <__ieee754_rem_pio2+0x28>
 8011ee8:	2200      	movs	r2, #0
 8011eea:	2300      	movs	r3, #0
 8011eec:	ed84 0b00 	vstr	d0, [r4]
 8011ef0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011ef4:	2500      	movs	r5, #0
 8011ef6:	e027      	b.n	8011f48 <__ieee754_rem_pio2+0x78>
 8011ef8:	4bbc      	ldr	r3, [pc, #752]	; (80121ec <__ieee754_rem_pio2+0x31c>)
 8011efa:	4598      	cmp	r8, r3
 8011efc:	dc75      	bgt.n	8011fea <__ieee754_rem_pio2+0x11a>
 8011efe:	9b04      	ldr	r3, [sp, #16]
 8011f00:	4dbb      	ldr	r5, [pc, #748]	; (80121f0 <__ieee754_rem_pio2+0x320>)
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	ee10 0a10 	vmov	r0, s0
 8011f08:	a3a9      	add	r3, pc, #676	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x2e0>)
 8011f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0e:	4639      	mov	r1, r7
 8011f10:	dd36      	ble.n	8011f80 <__ieee754_rem_pio2+0xb0>
 8011f12:	f7ee f9b9 	bl	8000288 <__aeabi_dsub>
 8011f16:	45a8      	cmp	r8, r5
 8011f18:	4606      	mov	r6, r0
 8011f1a:	460f      	mov	r7, r1
 8011f1c:	d018      	beq.n	8011f50 <__ieee754_rem_pio2+0x80>
 8011f1e:	a3a6      	add	r3, pc, #664	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2e8>)
 8011f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f24:	f7ee f9b0 	bl	8000288 <__aeabi_dsub>
 8011f28:	4602      	mov	r2, r0
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	e9c4 2300 	strd	r2, r3, [r4]
 8011f30:	4630      	mov	r0, r6
 8011f32:	4639      	mov	r1, r7
 8011f34:	f7ee f9a8 	bl	8000288 <__aeabi_dsub>
 8011f38:	a39f      	add	r3, pc, #636	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2e8>)
 8011f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f3e:	f7ee f9a3 	bl	8000288 <__aeabi_dsub>
 8011f42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011f46:	2501      	movs	r5, #1
 8011f48:	4628      	mov	r0, r5
 8011f4a:	b00d      	add	sp, #52	; 0x34
 8011f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f50:	a39b      	add	r3, pc, #620	; (adr r3, 80121c0 <__ieee754_rem_pio2+0x2f0>)
 8011f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f56:	f7ee f997 	bl	8000288 <__aeabi_dsub>
 8011f5a:	a39b      	add	r3, pc, #620	; (adr r3, 80121c8 <__ieee754_rem_pio2+0x2f8>)
 8011f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f60:	4606      	mov	r6, r0
 8011f62:	460f      	mov	r7, r1
 8011f64:	f7ee f990 	bl	8000288 <__aeabi_dsub>
 8011f68:	4602      	mov	r2, r0
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	e9c4 2300 	strd	r2, r3, [r4]
 8011f70:	4630      	mov	r0, r6
 8011f72:	4639      	mov	r1, r7
 8011f74:	f7ee f988 	bl	8000288 <__aeabi_dsub>
 8011f78:	a393      	add	r3, pc, #588	; (adr r3, 80121c8 <__ieee754_rem_pio2+0x2f8>)
 8011f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f7e:	e7de      	b.n	8011f3e <__ieee754_rem_pio2+0x6e>
 8011f80:	f7ee f984 	bl	800028c <__adddf3>
 8011f84:	45a8      	cmp	r8, r5
 8011f86:	4606      	mov	r6, r0
 8011f88:	460f      	mov	r7, r1
 8011f8a:	d016      	beq.n	8011fba <__ieee754_rem_pio2+0xea>
 8011f8c:	a38a      	add	r3, pc, #552	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2e8>)
 8011f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f92:	f7ee f97b 	bl	800028c <__adddf3>
 8011f96:	4602      	mov	r2, r0
 8011f98:	460b      	mov	r3, r1
 8011f9a:	e9c4 2300 	strd	r2, r3, [r4]
 8011f9e:	4630      	mov	r0, r6
 8011fa0:	4639      	mov	r1, r7
 8011fa2:	f7ee f971 	bl	8000288 <__aeabi_dsub>
 8011fa6:	a384      	add	r3, pc, #528	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2e8>)
 8011fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fac:	f7ee f96e 	bl	800028c <__adddf3>
 8011fb0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8011fb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011fb8:	e7c6      	b.n	8011f48 <__ieee754_rem_pio2+0x78>
 8011fba:	a381      	add	r3, pc, #516	; (adr r3, 80121c0 <__ieee754_rem_pio2+0x2f0>)
 8011fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc0:	f7ee f964 	bl	800028c <__adddf3>
 8011fc4:	a380      	add	r3, pc, #512	; (adr r3, 80121c8 <__ieee754_rem_pio2+0x2f8>)
 8011fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fca:	4606      	mov	r6, r0
 8011fcc:	460f      	mov	r7, r1
 8011fce:	f7ee f95d 	bl	800028c <__adddf3>
 8011fd2:	4602      	mov	r2, r0
 8011fd4:	460b      	mov	r3, r1
 8011fd6:	e9c4 2300 	strd	r2, r3, [r4]
 8011fda:	4630      	mov	r0, r6
 8011fdc:	4639      	mov	r1, r7
 8011fde:	f7ee f953 	bl	8000288 <__aeabi_dsub>
 8011fe2:	a379      	add	r3, pc, #484	; (adr r3, 80121c8 <__ieee754_rem_pio2+0x2f8>)
 8011fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fe8:	e7e0      	b.n	8011fac <__ieee754_rem_pio2+0xdc>
 8011fea:	4b82      	ldr	r3, [pc, #520]	; (80121f4 <__ieee754_rem_pio2+0x324>)
 8011fec:	4598      	cmp	r8, r3
 8011fee:	f300 80d0 	bgt.w	8012192 <__ieee754_rem_pio2+0x2c2>
 8011ff2:	f000 fed3 	bl	8012d9c <fabs>
 8011ff6:	ec57 6b10 	vmov	r6, r7, d0
 8011ffa:	ee10 0a10 	vmov	r0, s0
 8011ffe:	a374      	add	r3, pc, #464	; (adr r3, 80121d0 <__ieee754_rem_pio2+0x300>)
 8012000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012004:	4639      	mov	r1, r7
 8012006:	f7ee faf7 	bl	80005f8 <__aeabi_dmul>
 801200a:	2200      	movs	r2, #0
 801200c:	4b7a      	ldr	r3, [pc, #488]	; (80121f8 <__ieee754_rem_pio2+0x328>)
 801200e:	f7ee f93d 	bl	800028c <__adddf3>
 8012012:	f7ee fda1 	bl	8000b58 <__aeabi_d2iz>
 8012016:	4605      	mov	r5, r0
 8012018:	f7ee fa84 	bl	8000524 <__aeabi_i2d>
 801201c:	a364      	add	r3, pc, #400	; (adr r3, 80121b0 <__ieee754_rem_pio2+0x2e0>)
 801201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012022:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012026:	f7ee fae7 	bl	80005f8 <__aeabi_dmul>
 801202a:	4602      	mov	r2, r0
 801202c:	460b      	mov	r3, r1
 801202e:	4630      	mov	r0, r6
 8012030:	4639      	mov	r1, r7
 8012032:	f7ee f929 	bl	8000288 <__aeabi_dsub>
 8012036:	a360      	add	r3, pc, #384	; (adr r3, 80121b8 <__ieee754_rem_pio2+0x2e8>)
 8012038:	e9d3 2300 	ldrd	r2, r3, [r3]
 801203c:	4682      	mov	sl, r0
 801203e:	468b      	mov	fp, r1
 8012040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012044:	f7ee fad8 	bl	80005f8 <__aeabi_dmul>
 8012048:	2d1f      	cmp	r5, #31
 801204a:	4606      	mov	r6, r0
 801204c:	460f      	mov	r7, r1
 801204e:	dc0c      	bgt.n	801206a <__ieee754_rem_pio2+0x19a>
 8012050:	1e6a      	subs	r2, r5, #1
 8012052:	4b6a      	ldr	r3, [pc, #424]	; (80121fc <__ieee754_rem_pio2+0x32c>)
 8012054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012058:	4543      	cmp	r3, r8
 801205a:	d006      	beq.n	801206a <__ieee754_rem_pio2+0x19a>
 801205c:	4632      	mov	r2, r6
 801205e:	463b      	mov	r3, r7
 8012060:	4650      	mov	r0, sl
 8012062:	4659      	mov	r1, fp
 8012064:	f7ee f910 	bl	8000288 <__aeabi_dsub>
 8012068:	e00e      	b.n	8012088 <__ieee754_rem_pio2+0x1b8>
 801206a:	4632      	mov	r2, r6
 801206c:	463b      	mov	r3, r7
 801206e:	4650      	mov	r0, sl
 8012070:	4659      	mov	r1, fp
 8012072:	f7ee f909 	bl	8000288 <__aeabi_dsub>
 8012076:	ea4f 5328 	mov.w	r3, r8, asr #20
 801207a:	9305      	str	r3, [sp, #20]
 801207c:	9a05      	ldr	r2, [sp, #20]
 801207e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8012082:	1ad3      	subs	r3, r2, r3
 8012084:	2b10      	cmp	r3, #16
 8012086:	dc02      	bgt.n	801208e <__ieee754_rem_pio2+0x1be>
 8012088:	e9c4 0100 	strd	r0, r1, [r4]
 801208c:	e039      	b.n	8012102 <__ieee754_rem_pio2+0x232>
 801208e:	a34c      	add	r3, pc, #304	; (adr r3, 80121c0 <__ieee754_rem_pio2+0x2f0>)
 8012090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012098:	f7ee faae 	bl	80005f8 <__aeabi_dmul>
 801209c:	4606      	mov	r6, r0
 801209e:	460f      	mov	r7, r1
 80120a0:	4602      	mov	r2, r0
 80120a2:	460b      	mov	r3, r1
 80120a4:	4650      	mov	r0, sl
 80120a6:	4659      	mov	r1, fp
 80120a8:	f7ee f8ee 	bl	8000288 <__aeabi_dsub>
 80120ac:	4602      	mov	r2, r0
 80120ae:	460b      	mov	r3, r1
 80120b0:	4680      	mov	r8, r0
 80120b2:	4689      	mov	r9, r1
 80120b4:	4650      	mov	r0, sl
 80120b6:	4659      	mov	r1, fp
 80120b8:	f7ee f8e6 	bl	8000288 <__aeabi_dsub>
 80120bc:	4632      	mov	r2, r6
 80120be:	463b      	mov	r3, r7
 80120c0:	f7ee f8e2 	bl	8000288 <__aeabi_dsub>
 80120c4:	a340      	add	r3, pc, #256	; (adr r3, 80121c8 <__ieee754_rem_pio2+0x2f8>)
 80120c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ca:	4606      	mov	r6, r0
 80120cc:	460f      	mov	r7, r1
 80120ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80120d2:	f7ee fa91 	bl	80005f8 <__aeabi_dmul>
 80120d6:	4632      	mov	r2, r6
 80120d8:	463b      	mov	r3, r7
 80120da:	f7ee f8d5 	bl	8000288 <__aeabi_dsub>
 80120de:	4602      	mov	r2, r0
 80120e0:	460b      	mov	r3, r1
 80120e2:	4606      	mov	r6, r0
 80120e4:	460f      	mov	r7, r1
 80120e6:	4640      	mov	r0, r8
 80120e8:	4649      	mov	r1, r9
 80120ea:	f7ee f8cd 	bl	8000288 <__aeabi_dsub>
 80120ee:	9a05      	ldr	r2, [sp, #20]
 80120f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80120f4:	1ad3      	subs	r3, r2, r3
 80120f6:	2b31      	cmp	r3, #49	; 0x31
 80120f8:	dc20      	bgt.n	801213c <__ieee754_rem_pio2+0x26c>
 80120fa:	e9c4 0100 	strd	r0, r1, [r4]
 80120fe:	46c2      	mov	sl, r8
 8012100:	46cb      	mov	fp, r9
 8012102:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012106:	4650      	mov	r0, sl
 8012108:	4642      	mov	r2, r8
 801210a:	464b      	mov	r3, r9
 801210c:	4659      	mov	r1, fp
 801210e:	f7ee f8bb 	bl	8000288 <__aeabi_dsub>
 8012112:	463b      	mov	r3, r7
 8012114:	4632      	mov	r2, r6
 8012116:	f7ee f8b7 	bl	8000288 <__aeabi_dsub>
 801211a:	9b04      	ldr	r3, [sp, #16]
 801211c:	2b00      	cmp	r3, #0
 801211e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012122:	f6bf af11 	bge.w	8011f48 <__ieee754_rem_pio2+0x78>
 8012126:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801212a:	6063      	str	r3, [r4, #4]
 801212c:	f8c4 8000 	str.w	r8, [r4]
 8012130:	60a0      	str	r0, [r4, #8]
 8012132:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012136:	60e3      	str	r3, [r4, #12]
 8012138:	426d      	negs	r5, r5
 801213a:	e705      	b.n	8011f48 <__ieee754_rem_pio2+0x78>
 801213c:	a326      	add	r3, pc, #152	; (adr r3, 80121d8 <__ieee754_rem_pio2+0x308>)
 801213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012146:	f7ee fa57 	bl	80005f8 <__aeabi_dmul>
 801214a:	4606      	mov	r6, r0
 801214c:	460f      	mov	r7, r1
 801214e:	4602      	mov	r2, r0
 8012150:	460b      	mov	r3, r1
 8012152:	4640      	mov	r0, r8
 8012154:	4649      	mov	r1, r9
 8012156:	f7ee f897 	bl	8000288 <__aeabi_dsub>
 801215a:	4602      	mov	r2, r0
 801215c:	460b      	mov	r3, r1
 801215e:	4682      	mov	sl, r0
 8012160:	468b      	mov	fp, r1
 8012162:	4640      	mov	r0, r8
 8012164:	4649      	mov	r1, r9
 8012166:	f7ee f88f 	bl	8000288 <__aeabi_dsub>
 801216a:	4632      	mov	r2, r6
 801216c:	463b      	mov	r3, r7
 801216e:	f7ee f88b 	bl	8000288 <__aeabi_dsub>
 8012172:	a31b      	add	r3, pc, #108	; (adr r3, 80121e0 <__ieee754_rem_pio2+0x310>)
 8012174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012178:	4606      	mov	r6, r0
 801217a:	460f      	mov	r7, r1
 801217c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012180:	f7ee fa3a 	bl	80005f8 <__aeabi_dmul>
 8012184:	4632      	mov	r2, r6
 8012186:	463b      	mov	r3, r7
 8012188:	f7ee f87e 	bl	8000288 <__aeabi_dsub>
 801218c:	4606      	mov	r6, r0
 801218e:	460f      	mov	r7, r1
 8012190:	e764      	b.n	801205c <__ieee754_rem_pio2+0x18c>
 8012192:	4b1b      	ldr	r3, [pc, #108]	; (8012200 <__ieee754_rem_pio2+0x330>)
 8012194:	4598      	cmp	r8, r3
 8012196:	dd35      	ble.n	8012204 <__ieee754_rem_pio2+0x334>
 8012198:	ee10 2a10 	vmov	r2, s0
 801219c:	463b      	mov	r3, r7
 801219e:	4630      	mov	r0, r6
 80121a0:	4639      	mov	r1, r7
 80121a2:	f7ee f871 	bl	8000288 <__aeabi_dsub>
 80121a6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80121aa:	e9c4 0100 	strd	r0, r1, [r4]
 80121ae:	e6a1      	b.n	8011ef4 <__ieee754_rem_pio2+0x24>
 80121b0:	54400000 	.word	0x54400000
 80121b4:	3ff921fb 	.word	0x3ff921fb
 80121b8:	1a626331 	.word	0x1a626331
 80121bc:	3dd0b461 	.word	0x3dd0b461
 80121c0:	1a600000 	.word	0x1a600000
 80121c4:	3dd0b461 	.word	0x3dd0b461
 80121c8:	2e037073 	.word	0x2e037073
 80121cc:	3ba3198a 	.word	0x3ba3198a
 80121d0:	6dc9c883 	.word	0x6dc9c883
 80121d4:	3fe45f30 	.word	0x3fe45f30
 80121d8:	2e000000 	.word	0x2e000000
 80121dc:	3ba3198a 	.word	0x3ba3198a
 80121e0:	252049c1 	.word	0x252049c1
 80121e4:	397b839a 	.word	0x397b839a
 80121e8:	3fe921fb 	.word	0x3fe921fb
 80121ec:	4002d97b 	.word	0x4002d97b
 80121f0:	3ff921fb 	.word	0x3ff921fb
 80121f4:	413921fb 	.word	0x413921fb
 80121f8:	3fe00000 	.word	0x3fe00000
 80121fc:	08013700 	.word	0x08013700
 8012200:	7fefffff 	.word	0x7fefffff
 8012204:	ea4f 5528 	mov.w	r5, r8, asr #20
 8012208:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 801220c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8012210:	4630      	mov	r0, r6
 8012212:	460f      	mov	r7, r1
 8012214:	f7ee fca0 	bl	8000b58 <__aeabi_d2iz>
 8012218:	f7ee f984 	bl	8000524 <__aeabi_i2d>
 801221c:	4602      	mov	r2, r0
 801221e:	460b      	mov	r3, r1
 8012220:	4630      	mov	r0, r6
 8012222:	4639      	mov	r1, r7
 8012224:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8012228:	f7ee f82e 	bl	8000288 <__aeabi_dsub>
 801222c:	2200      	movs	r2, #0
 801222e:	4b1f      	ldr	r3, [pc, #124]	; (80122ac <__ieee754_rem_pio2+0x3dc>)
 8012230:	f7ee f9e2 	bl	80005f8 <__aeabi_dmul>
 8012234:	460f      	mov	r7, r1
 8012236:	4606      	mov	r6, r0
 8012238:	f7ee fc8e 	bl	8000b58 <__aeabi_d2iz>
 801223c:	f7ee f972 	bl	8000524 <__aeabi_i2d>
 8012240:	4602      	mov	r2, r0
 8012242:	460b      	mov	r3, r1
 8012244:	4630      	mov	r0, r6
 8012246:	4639      	mov	r1, r7
 8012248:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801224c:	f7ee f81c 	bl	8000288 <__aeabi_dsub>
 8012250:	2200      	movs	r2, #0
 8012252:	4b16      	ldr	r3, [pc, #88]	; (80122ac <__ieee754_rem_pio2+0x3dc>)
 8012254:	f7ee f9d0 	bl	80005f8 <__aeabi_dmul>
 8012258:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801225c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8012260:	f04f 0803 	mov.w	r8, #3
 8012264:	2600      	movs	r6, #0
 8012266:	2700      	movs	r7, #0
 8012268:	4632      	mov	r2, r6
 801226a:	463b      	mov	r3, r7
 801226c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8012270:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8012274:	f7ee fc28 	bl	8000ac8 <__aeabi_dcmpeq>
 8012278:	b9b0      	cbnz	r0, 80122a8 <__ieee754_rem_pio2+0x3d8>
 801227a:	4b0d      	ldr	r3, [pc, #52]	; (80122b0 <__ieee754_rem_pio2+0x3e0>)
 801227c:	9301      	str	r3, [sp, #4]
 801227e:	2302      	movs	r3, #2
 8012280:	9300      	str	r3, [sp, #0]
 8012282:	462a      	mov	r2, r5
 8012284:	4643      	mov	r3, r8
 8012286:	4621      	mov	r1, r4
 8012288:	a806      	add	r0, sp, #24
 801228a:	f000 f98d 	bl	80125a8 <__kernel_rem_pio2>
 801228e:	9b04      	ldr	r3, [sp, #16]
 8012290:	2b00      	cmp	r3, #0
 8012292:	4605      	mov	r5, r0
 8012294:	f6bf ae58 	bge.w	8011f48 <__ieee754_rem_pio2+0x78>
 8012298:	6863      	ldr	r3, [r4, #4]
 801229a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801229e:	6063      	str	r3, [r4, #4]
 80122a0:	68e3      	ldr	r3, [r4, #12]
 80122a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80122a6:	e746      	b.n	8012136 <__ieee754_rem_pio2+0x266>
 80122a8:	46d0      	mov	r8, sl
 80122aa:	e7dd      	b.n	8012268 <__ieee754_rem_pio2+0x398>
 80122ac:	41700000 	.word	0x41700000
 80122b0:	08013780 	.word	0x08013780

080122b4 <__ieee754_sqrt>:
 80122b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122b8:	4955      	ldr	r1, [pc, #340]	; (8012410 <__ieee754_sqrt+0x15c>)
 80122ba:	ec55 4b10 	vmov	r4, r5, d0
 80122be:	43a9      	bics	r1, r5
 80122c0:	462b      	mov	r3, r5
 80122c2:	462a      	mov	r2, r5
 80122c4:	d112      	bne.n	80122ec <__ieee754_sqrt+0x38>
 80122c6:	ee10 2a10 	vmov	r2, s0
 80122ca:	ee10 0a10 	vmov	r0, s0
 80122ce:	4629      	mov	r1, r5
 80122d0:	f7ee f992 	bl	80005f8 <__aeabi_dmul>
 80122d4:	4602      	mov	r2, r0
 80122d6:	460b      	mov	r3, r1
 80122d8:	4620      	mov	r0, r4
 80122da:	4629      	mov	r1, r5
 80122dc:	f7ed ffd6 	bl	800028c <__adddf3>
 80122e0:	4604      	mov	r4, r0
 80122e2:	460d      	mov	r5, r1
 80122e4:	ec45 4b10 	vmov	d0, r4, r5
 80122e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122ec:	2d00      	cmp	r5, #0
 80122ee:	ee10 0a10 	vmov	r0, s0
 80122f2:	4621      	mov	r1, r4
 80122f4:	dc0f      	bgt.n	8012316 <__ieee754_sqrt+0x62>
 80122f6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80122fa:	4330      	orrs	r0, r6
 80122fc:	d0f2      	beq.n	80122e4 <__ieee754_sqrt+0x30>
 80122fe:	b155      	cbz	r5, 8012316 <__ieee754_sqrt+0x62>
 8012300:	ee10 2a10 	vmov	r2, s0
 8012304:	4620      	mov	r0, r4
 8012306:	4629      	mov	r1, r5
 8012308:	f7ed ffbe 	bl	8000288 <__aeabi_dsub>
 801230c:	4602      	mov	r2, r0
 801230e:	460b      	mov	r3, r1
 8012310:	f7ee fa9c 	bl	800084c <__aeabi_ddiv>
 8012314:	e7e4      	b.n	80122e0 <__ieee754_sqrt+0x2c>
 8012316:	151b      	asrs	r3, r3, #20
 8012318:	d073      	beq.n	8012402 <__ieee754_sqrt+0x14e>
 801231a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801231e:	07dd      	lsls	r5, r3, #31
 8012320:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8012324:	bf48      	it	mi
 8012326:	0fc8      	lsrmi	r0, r1, #31
 8012328:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801232c:	bf44      	itt	mi
 801232e:	0049      	lslmi	r1, r1, #1
 8012330:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8012334:	2500      	movs	r5, #0
 8012336:	1058      	asrs	r0, r3, #1
 8012338:	0fcb      	lsrs	r3, r1, #31
 801233a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801233e:	0049      	lsls	r1, r1, #1
 8012340:	2316      	movs	r3, #22
 8012342:	462c      	mov	r4, r5
 8012344:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8012348:	19a7      	adds	r7, r4, r6
 801234a:	4297      	cmp	r7, r2
 801234c:	bfde      	ittt	le
 801234e:	19bc      	addle	r4, r7, r6
 8012350:	1bd2      	suble	r2, r2, r7
 8012352:	19ad      	addle	r5, r5, r6
 8012354:	0fcf      	lsrs	r7, r1, #31
 8012356:	3b01      	subs	r3, #1
 8012358:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801235c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8012360:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8012364:	d1f0      	bne.n	8012348 <__ieee754_sqrt+0x94>
 8012366:	f04f 0c20 	mov.w	ip, #32
 801236a:	469e      	mov	lr, r3
 801236c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8012370:	42a2      	cmp	r2, r4
 8012372:	eb06 070e 	add.w	r7, r6, lr
 8012376:	dc02      	bgt.n	801237e <__ieee754_sqrt+0xca>
 8012378:	d112      	bne.n	80123a0 <__ieee754_sqrt+0xec>
 801237a:	428f      	cmp	r7, r1
 801237c:	d810      	bhi.n	80123a0 <__ieee754_sqrt+0xec>
 801237e:	2f00      	cmp	r7, #0
 8012380:	eb07 0e06 	add.w	lr, r7, r6
 8012384:	da42      	bge.n	801240c <__ieee754_sqrt+0x158>
 8012386:	f1be 0f00 	cmp.w	lr, #0
 801238a:	db3f      	blt.n	801240c <__ieee754_sqrt+0x158>
 801238c:	f104 0801 	add.w	r8, r4, #1
 8012390:	1b12      	subs	r2, r2, r4
 8012392:	428f      	cmp	r7, r1
 8012394:	bf88      	it	hi
 8012396:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801239a:	1bc9      	subs	r1, r1, r7
 801239c:	4433      	add	r3, r6
 801239e:	4644      	mov	r4, r8
 80123a0:	0052      	lsls	r2, r2, #1
 80123a2:	f1bc 0c01 	subs.w	ip, ip, #1
 80123a6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80123aa:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80123ae:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80123b2:	d1dd      	bne.n	8012370 <__ieee754_sqrt+0xbc>
 80123b4:	430a      	orrs	r2, r1
 80123b6:	d006      	beq.n	80123c6 <__ieee754_sqrt+0x112>
 80123b8:	1c5c      	adds	r4, r3, #1
 80123ba:	bf13      	iteet	ne
 80123bc:	3301      	addne	r3, #1
 80123be:	3501      	addeq	r5, #1
 80123c0:	4663      	moveq	r3, ip
 80123c2:	f023 0301 	bicne.w	r3, r3, #1
 80123c6:	106a      	asrs	r2, r5, #1
 80123c8:	085b      	lsrs	r3, r3, #1
 80123ca:	07e9      	lsls	r1, r5, #31
 80123cc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80123d0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80123d4:	bf48      	it	mi
 80123d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80123da:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 80123de:	461c      	mov	r4, r3
 80123e0:	e780      	b.n	80122e4 <__ieee754_sqrt+0x30>
 80123e2:	0aca      	lsrs	r2, r1, #11
 80123e4:	3815      	subs	r0, #21
 80123e6:	0549      	lsls	r1, r1, #21
 80123e8:	2a00      	cmp	r2, #0
 80123ea:	d0fa      	beq.n	80123e2 <__ieee754_sqrt+0x12e>
 80123ec:	02d6      	lsls	r6, r2, #11
 80123ee:	d50a      	bpl.n	8012406 <__ieee754_sqrt+0x152>
 80123f0:	f1c3 0420 	rsb	r4, r3, #32
 80123f4:	fa21 f404 	lsr.w	r4, r1, r4
 80123f8:	1e5d      	subs	r5, r3, #1
 80123fa:	4099      	lsls	r1, r3
 80123fc:	4322      	orrs	r2, r4
 80123fe:	1b43      	subs	r3, r0, r5
 8012400:	e78b      	b.n	801231a <__ieee754_sqrt+0x66>
 8012402:	4618      	mov	r0, r3
 8012404:	e7f0      	b.n	80123e8 <__ieee754_sqrt+0x134>
 8012406:	0052      	lsls	r2, r2, #1
 8012408:	3301      	adds	r3, #1
 801240a:	e7ef      	b.n	80123ec <__ieee754_sqrt+0x138>
 801240c:	46a0      	mov	r8, r4
 801240e:	e7bf      	b.n	8012390 <__ieee754_sqrt+0xdc>
 8012410:	7ff00000 	.word	0x7ff00000
 8012414:	00000000 	.word	0x00000000

08012418 <__kernel_cos>:
 8012418:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801241c:	ec59 8b10 	vmov	r8, r9, d0
 8012420:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8012424:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8012428:	ed2d 8b02 	vpush	{d8}
 801242c:	eeb0 8a41 	vmov.f32	s16, s2
 8012430:	eef0 8a61 	vmov.f32	s17, s3
 8012434:	da07      	bge.n	8012446 <__kernel_cos+0x2e>
 8012436:	ee10 0a10 	vmov	r0, s0
 801243a:	4649      	mov	r1, r9
 801243c:	f7ee fb8c 	bl	8000b58 <__aeabi_d2iz>
 8012440:	2800      	cmp	r0, #0
 8012442:	f000 8089 	beq.w	8012558 <__kernel_cos+0x140>
 8012446:	4642      	mov	r2, r8
 8012448:	464b      	mov	r3, r9
 801244a:	4640      	mov	r0, r8
 801244c:	4649      	mov	r1, r9
 801244e:	f7ee f8d3 	bl	80005f8 <__aeabi_dmul>
 8012452:	2200      	movs	r2, #0
 8012454:	4b4e      	ldr	r3, [pc, #312]	; (8012590 <__kernel_cos+0x178>)
 8012456:	4604      	mov	r4, r0
 8012458:	460d      	mov	r5, r1
 801245a:	f7ee f8cd 	bl	80005f8 <__aeabi_dmul>
 801245e:	a340      	add	r3, pc, #256	; (adr r3, 8012560 <__kernel_cos+0x148>)
 8012460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012464:	4682      	mov	sl, r0
 8012466:	468b      	mov	fp, r1
 8012468:	4620      	mov	r0, r4
 801246a:	4629      	mov	r1, r5
 801246c:	f7ee f8c4 	bl	80005f8 <__aeabi_dmul>
 8012470:	a33d      	add	r3, pc, #244	; (adr r3, 8012568 <__kernel_cos+0x150>)
 8012472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012476:	f7ed ff09 	bl	800028c <__adddf3>
 801247a:	4622      	mov	r2, r4
 801247c:	462b      	mov	r3, r5
 801247e:	f7ee f8bb 	bl	80005f8 <__aeabi_dmul>
 8012482:	a33b      	add	r3, pc, #236	; (adr r3, 8012570 <__kernel_cos+0x158>)
 8012484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012488:	f7ed fefe 	bl	8000288 <__aeabi_dsub>
 801248c:	4622      	mov	r2, r4
 801248e:	462b      	mov	r3, r5
 8012490:	f7ee f8b2 	bl	80005f8 <__aeabi_dmul>
 8012494:	a338      	add	r3, pc, #224	; (adr r3, 8012578 <__kernel_cos+0x160>)
 8012496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249a:	f7ed fef7 	bl	800028c <__adddf3>
 801249e:	4622      	mov	r2, r4
 80124a0:	462b      	mov	r3, r5
 80124a2:	f7ee f8a9 	bl	80005f8 <__aeabi_dmul>
 80124a6:	a336      	add	r3, pc, #216	; (adr r3, 8012580 <__kernel_cos+0x168>)
 80124a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124ac:	f7ed feec 	bl	8000288 <__aeabi_dsub>
 80124b0:	4622      	mov	r2, r4
 80124b2:	462b      	mov	r3, r5
 80124b4:	f7ee f8a0 	bl	80005f8 <__aeabi_dmul>
 80124b8:	a333      	add	r3, pc, #204	; (adr r3, 8012588 <__kernel_cos+0x170>)
 80124ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124be:	f7ed fee5 	bl	800028c <__adddf3>
 80124c2:	4622      	mov	r2, r4
 80124c4:	462b      	mov	r3, r5
 80124c6:	f7ee f897 	bl	80005f8 <__aeabi_dmul>
 80124ca:	4622      	mov	r2, r4
 80124cc:	462b      	mov	r3, r5
 80124ce:	f7ee f893 	bl	80005f8 <__aeabi_dmul>
 80124d2:	ec53 2b18 	vmov	r2, r3, d8
 80124d6:	4604      	mov	r4, r0
 80124d8:	460d      	mov	r5, r1
 80124da:	4640      	mov	r0, r8
 80124dc:	4649      	mov	r1, r9
 80124de:	f7ee f88b 	bl	80005f8 <__aeabi_dmul>
 80124e2:	460b      	mov	r3, r1
 80124e4:	4602      	mov	r2, r0
 80124e6:	4629      	mov	r1, r5
 80124e8:	4620      	mov	r0, r4
 80124ea:	f7ed fecd 	bl	8000288 <__aeabi_dsub>
 80124ee:	4b29      	ldr	r3, [pc, #164]	; (8012594 <__kernel_cos+0x17c>)
 80124f0:	429e      	cmp	r6, r3
 80124f2:	4680      	mov	r8, r0
 80124f4:	4689      	mov	r9, r1
 80124f6:	dc11      	bgt.n	801251c <__kernel_cos+0x104>
 80124f8:	4602      	mov	r2, r0
 80124fa:	460b      	mov	r3, r1
 80124fc:	4650      	mov	r0, sl
 80124fe:	4659      	mov	r1, fp
 8012500:	f7ed fec2 	bl	8000288 <__aeabi_dsub>
 8012504:	460b      	mov	r3, r1
 8012506:	4924      	ldr	r1, [pc, #144]	; (8012598 <__kernel_cos+0x180>)
 8012508:	4602      	mov	r2, r0
 801250a:	2000      	movs	r0, #0
 801250c:	f7ed febc 	bl	8000288 <__aeabi_dsub>
 8012510:	ecbd 8b02 	vpop	{d8}
 8012514:	ec41 0b10 	vmov	d0, r0, r1
 8012518:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251c:	4b1f      	ldr	r3, [pc, #124]	; (801259c <__kernel_cos+0x184>)
 801251e:	491e      	ldr	r1, [pc, #120]	; (8012598 <__kernel_cos+0x180>)
 8012520:	429e      	cmp	r6, r3
 8012522:	bfcc      	ite	gt
 8012524:	4d1e      	ldrgt	r5, [pc, #120]	; (80125a0 <__kernel_cos+0x188>)
 8012526:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 801252a:	2400      	movs	r4, #0
 801252c:	4622      	mov	r2, r4
 801252e:	462b      	mov	r3, r5
 8012530:	2000      	movs	r0, #0
 8012532:	f7ed fea9 	bl	8000288 <__aeabi_dsub>
 8012536:	4622      	mov	r2, r4
 8012538:	4606      	mov	r6, r0
 801253a:	460f      	mov	r7, r1
 801253c:	462b      	mov	r3, r5
 801253e:	4650      	mov	r0, sl
 8012540:	4659      	mov	r1, fp
 8012542:	f7ed fea1 	bl	8000288 <__aeabi_dsub>
 8012546:	4642      	mov	r2, r8
 8012548:	464b      	mov	r3, r9
 801254a:	f7ed fe9d 	bl	8000288 <__aeabi_dsub>
 801254e:	4602      	mov	r2, r0
 8012550:	460b      	mov	r3, r1
 8012552:	4630      	mov	r0, r6
 8012554:	4639      	mov	r1, r7
 8012556:	e7d9      	b.n	801250c <__kernel_cos+0xf4>
 8012558:	2000      	movs	r0, #0
 801255a:	490f      	ldr	r1, [pc, #60]	; (8012598 <__kernel_cos+0x180>)
 801255c:	e7d8      	b.n	8012510 <__kernel_cos+0xf8>
 801255e:	bf00      	nop
 8012560:	be8838d4 	.word	0xbe8838d4
 8012564:	bda8fae9 	.word	0xbda8fae9
 8012568:	bdb4b1c4 	.word	0xbdb4b1c4
 801256c:	3e21ee9e 	.word	0x3e21ee9e
 8012570:	809c52ad 	.word	0x809c52ad
 8012574:	3e927e4f 	.word	0x3e927e4f
 8012578:	19cb1590 	.word	0x19cb1590
 801257c:	3efa01a0 	.word	0x3efa01a0
 8012580:	16c15177 	.word	0x16c15177
 8012584:	3f56c16c 	.word	0x3f56c16c
 8012588:	5555554c 	.word	0x5555554c
 801258c:	3fa55555 	.word	0x3fa55555
 8012590:	3fe00000 	.word	0x3fe00000
 8012594:	3fd33332 	.word	0x3fd33332
 8012598:	3ff00000 	.word	0x3ff00000
 801259c:	3fe90000 	.word	0x3fe90000
 80125a0:	3fd20000 	.word	0x3fd20000
 80125a4:	00000000 	.word	0x00000000

080125a8 <__kernel_rem_pio2>:
 80125a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80125ac:	ed2d 8b02 	vpush	{d8}
 80125b0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80125b4:	1ed4      	subs	r4, r2, #3
 80125b6:	9308      	str	r3, [sp, #32]
 80125b8:	9101      	str	r1, [sp, #4]
 80125ba:	4bc5      	ldr	r3, [pc, #788]	; (80128d0 <__kernel_rem_pio2+0x328>)
 80125bc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80125be:	9009      	str	r0, [sp, #36]	; 0x24
 80125c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80125c4:	9304      	str	r3, [sp, #16]
 80125c6:	9b08      	ldr	r3, [sp, #32]
 80125c8:	3b01      	subs	r3, #1
 80125ca:	9307      	str	r3, [sp, #28]
 80125cc:	2318      	movs	r3, #24
 80125ce:	fb94 f4f3 	sdiv	r4, r4, r3
 80125d2:	f06f 0317 	mvn.w	r3, #23
 80125d6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80125da:	fb04 3303 	mla	r3, r4, r3, r3
 80125de:	eb03 0a02 	add.w	sl, r3, r2
 80125e2:	9b04      	ldr	r3, [sp, #16]
 80125e4:	9a07      	ldr	r2, [sp, #28]
 80125e6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 80128c0 <__kernel_rem_pio2+0x318>
 80125ea:	eb03 0802 	add.w	r8, r3, r2
 80125ee:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80125f0:	1aa7      	subs	r7, r4, r2
 80125f2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80125f6:	ae22      	add	r6, sp, #136	; 0x88
 80125f8:	2500      	movs	r5, #0
 80125fa:	4545      	cmp	r5, r8
 80125fc:	dd13      	ble.n	8012626 <__kernel_rem_pio2+0x7e>
 80125fe:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80128c0 <__kernel_rem_pio2+0x318>
 8012602:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8012606:	2600      	movs	r6, #0
 8012608:	9b04      	ldr	r3, [sp, #16]
 801260a:	429e      	cmp	r6, r3
 801260c:	dc32      	bgt.n	8012674 <__kernel_rem_pio2+0xcc>
 801260e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012610:	9302      	str	r3, [sp, #8]
 8012612:	9b08      	ldr	r3, [sp, #32]
 8012614:	199d      	adds	r5, r3, r6
 8012616:	ab22      	add	r3, sp, #136	; 0x88
 8012618:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801261c:	9306      	str	r3, [sp, #24]
 801261e:	ec59 8b18 	vmov	r8, r9, d8
 8012622:	2700      	movs	r7, #0
 8012624:	e01f      	b.n	8012666 <__kernel_rem_pio2+0xbe>
 8012626:	42ef      	cmn	r7, r5
 8012628:	d407      	bmi.n	801263a <__kernel_rem_pio2+0x92>
 801262a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801262e:	f7ed ff79 	bl	8000524 <__aeabi_i2d>
 8012632:	e8e6 0102 	strd	r0, r1, [r6], #8
 8012636:	3501      	adds	r5, #1
 8012638:	e7df      	b.n	80125fa <__kernel_rem_pio2+0x52>
 801263a:	ec51 0b18 	vmov	r0, r1, d8
 801263e:	e7f8      	b.n	8012632 <__kernel_rem_pio2+0x8a>
 8012640:	9906      	ldr	r1, [sp, #24]
 8012642:	9d02      	ldr	r5, [sp, #8]
 8012644:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8012648:	9106      	str	r1, [sp, #24]
 801264a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 801264e:	9502      	str	r5, [sp, #8]
 8012650:	f7ed ffd2 	bl	80005f8 <__aeabi_dmul>
 8012654:	4602      	mov	r2, r0
 8012656:	460b      	mov	r3, r1
 8012658:	4640      	mov	r0, r8
 801265a:	4649      	mov	r1, r9
 801265c:	f7ed fe16 	bl	800028c <__adddf3>
 8012660:	3701      	adds	r7, #1
 8012662:	4680      	mov	r8, r0
 8012664:	4689      	mov	r9, r1
 8012666:	9b07      	ldr	r3, [sp, #28]
 8012668:	429f      	cmp	r7, r3
 801266a:	dde9      	ble.n	8012640 <__kernel_rem_pio2+0x98>
 801266c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8012670:	3601      	adds	r6, #1
 8012672:	e7c9      	b.n	8012608 <__kernel_rem_pio2+0x60>
 8012674:	9b04      	ldr	r3, [sp, #16]
 8012676:	aa0e      	add	r2, sp, #56	; 0x38
 8012678:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801267c:	930c      	str	r3, [sp, #48]	; 0x30
 801267e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8012680:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8012684:	9c04      	ldr	r4, [sp, #16]
 8012686:	930b      	str	r3, [sp, #44]	; 0x2c
 8012688:	ab9a      	add	r3, sp, #616	; 0x268
 801268a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 801268e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012692:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012696:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 801269a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 801269e:	ab9a      	add	r3, sp, #616	; 0x268
 80126a0:	445b      	add	r3, fp
 80126a2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80126a6:	2500      	movs	r5, #0
 80126a8:	1b63      	subs	r3, r4, r5
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	dc78      	bgt.n	80127a0 <__kernel_rem_pio2+0x1f8>
 80126ae:	4650      	mov	r0, sl
 80126b0:	ec49 8b10 	vmov	d0, r8, r9
 80126b4:	f000 fc98 	bl	8012fe8 <scalbn>
 80126b8:	ec57 6b10 	vmov	r6, r7, d0
 80126bc:	2200      	movs	r2, #0
 80126be:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80126c2:	ee10 0a10 	vmov	r0, s0
 80126c6:	4639      	mov	r1, r7
 80126c8:	f7ed ff96 	bl	80005f8 <__aeabi_dmul>
 80126cc:	ec41 0b10 	vmov	d0, r0, r1
 80126d0:	f000 fb76 	bl	8012dc0 <floor>
 80126d4:	2200      	movs	r2, #0
 80126d6:	ec51 0b10 	vmov	r0, r1, d0
 80126da:	4b7e      	ldr	r3, [pc, #504]	; (80128d4 <__kernel_rem_pio2+0x32c>)
 80126dc:	f7ed ff8c 	bl	80005f8 <__aeabi_dmul>
 80126e0:	4602      	mov	r2, r0
 80126e2:	460b      	mov	r3, r1
 80126e4:	4630      	mov	r0, r6
 80126e6:	4639      	mov	r1, r7
 80126e8:	f7ed fdce 	bl	8000288 <__aeabi_dsub>
 80126ec:	460f      	mov	r7, r1
 80126ee:	4606      	mov	r6, r0
 80126f0:	f7ee fa32 	bl	8000b58 <__aeabi_d2iz>
 80126f4:	9006      	str	r0, [sp, #24]
 80126f6:	f7ed ff15 	bl	8000524 <__aeabi_i2d>
 80126fa:	4602      	mov	r2, r0
 80126fc:	460b      	mov	r3, r1
 80126fe:	4630      	mov	r0, r6
 8012700:	4639      	mov	r1, r7
 8012702:	f7ed fdc1 	bl	8000288 <__aeabi_dsub>
 8012706:	f1ba 0f00 	cmp.w	sl, #0
 801270a:	4606      	mov	r6, r0
 801270c:	460f      	mov	r7, r1
 801270e:	dd6c      	ble.n	80127ea <__kernel_rem_pio2+0x242>
 8012710:	1e62      	subs	r2, r4, #1
 8012712:	ab0e      	add	r3, sp, #56	; 0x38
 8012714:	f1ca 0118 	rsb	r1, sl, #24
 8012718:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801271c:	9d06      	ldr	r5, [sp, #24]
 801271e:	fa40 f301 	asr.w	r3, r0, r1
 8012722:	441d      	add	r5, r3
 8012724:	408b      	lsls	r3, r1
 8012726:	1ac0      	subs	r0, r0, r3
 8012728:	ab0e      	add	r3, sp, #56	; 0x38
 801272a:	9506      	str	r5, [sp, #24]
 801272c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8012730:	f1ca 0317 	rsb	r3, sl, #23
 8012734:	fa40 f303 	asr.w	r3, r0, r3
 8012738:	9302      	str	r3, [sp, #8]
 801273a:	9b02      	ldr	r3, [sp, #8]
 801273c:	2b00      	cmp	r3, #0
 801273e:	dd62      	ble.n	8012806 <__kernel_rem_pio2+0x25e>
 8012740:	9b06      	ldr	r3, [sp, #24]
 8012742:	2200      	movs	r2, #0
 8012744:	3301      	adds	r3, #1
 8012746:	9306      	str	r3, [sp, #24]
 8012748:	4615      	mov	r5, r2
 801274a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801274e:	4294      	cmp	r4, r2
 8012750:	f300 8095 	bgt.w	801287e <__kernel_rem_pio2+0x2d6>
 8012754:	f1ba 0f00 	cmp.w	sl, #0
 8012758:	dd07      	ble.n	801276a <__kernel_rem_pio2+0x1c2>
 801275a:	f1ba 0f01 	cmp.w	sl, #1
 801275e:	f000 80a2 	beq.w	80128a6 <__kernel_rem_pio2+0x2fe>
 8012762:	f1ba 0f02 	cmp.w	sl, #2
 8012766:	f000 80c1 	beq.w	80128ec <__kernel_rem_pio2+0x344>
 801276a:	9b02      	ldr	r3, [sp, #8]
 801276c:	2b02      	cmp	r3, #2
 801276e:	d14a      	bne.n	8012806 <__kernel_rem_pio2+0x25e>
 8012770:	4632      	mov	r2, r6
 8012772:	463b      	mov	r3, r7
 8012774:	2000      	movs	r0, #0
 8012776:	4958      	ldr	r1, [pc, #352]	; (80128d8 <__kernel_rem_pio2+0x330>)
 8012778:	f7ed fd86 	bl	8000288 <__aeabi_dsub>
 801277c:	4606      	mov	r6, r0
 801277e:	460f      	mov	r7, r1
 8012780:	2d00      	cmp	r5, #0
 8012782:	d040      	beq.n	8012806 <__kernel_rem_pio2+0x25e>
 8012784:	4650      	mov	r0, sl
 8012786:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80128c8 <__kernel_rem_pio2+0x320>
 801278a:	f000 fc2d 	bl	8012fe8 <scalbn>
 801278e:	4630      	mov	r0, r6
 8012790:	4639      	mov	r1, r7
 8012792:	ec53 2b10 	vmov	r2, r3, d0
 8012796:	f7ed fd77 	bl	8000288 <__aeabi_dsub>
 801279a:	4606      	mov	r6, r0
 801279c:	460f      	mov	r7, r1
 801279e:	e032      	b.n	8012806 <__kernel_rem_pio2+0x25e>
 80127a0:	2200      	movs	r2, #0
 80127a2:	4b4e      	ldr	r3, [pc, #312]	; (80128dc <__kernel_rem_pio2+0x334>)
 80127a4:	4640      	mov	r0, r8
 80127a6:	4649      	mov	r1, r9
 80127a8:	f7ed ff26 	bl	80005f8 <__aeabi_dmul>
 80127ac:	f7ee f9d4 	bl	8000b58 <__aeabi_d2iz>
 80127b0:	f7ed feb8 	bl	8000524 <__aeabi_i2d>
 80127b4:	2200      	movs	r2, #0
 80127b6:	4b4a      	ldr	r3, [pc, #296]	; (80128e0 <__kernel_rem_pio2+0x338>)
 80127b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80127bc:	f7ed ff1c 	bl	80005f8 <__aeabi_dmul>
 80127c0:	4602      	mov	r2, r0
 80127c2:	460b      	mov	r3, r1
 80127c4:	4640      	mov	r0, r8
 80127c6:	4649      	mov	r1, r9
 80127c8:	f7ed fd5e 	bl	8000288 <__aeabi_dsub>
 80127cc:	f7ee f9c4 	bl	8000b58 <__aeabi_d2iz>
 80127d0:	ab0e      	add	r3, sp, #56	; 0x38
 80127d2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80127d6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80127da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80127de:	f7ed fd55 	bl	800028c <__adddf3>
 80127e2:	3501      	adds	r5, #1
 80127e4:	4680      	mov	r8, r0
 80127e6:	4689      	mov	r9, r1
 80127e8:	e75e      	b.n	80126a8 <__kernel_rem_pio2+0x100>
 80127ea:	d105      	bne.n	80127f8 <__kernel_rem_pio2+0x250>
 80127ec:	1e63      	subs	r3, r4, #1
 80127ee:	aa0e      	add	r2, sp, #56	; 0x38
 80127f0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80127f4:	15c3      	asrs	r3, r0, #23
 80127f6:	e79f      	b.n	8012738 <__kernel_rem_pio2+0x190>
 80127f8:	2200      	movs	r2, #0
 80127fa:	4b3a      	ldr	r3, [pc, #232]	; (80128e4 <__kernel_rem_pio2+0x33c>)
 80127fc:	f7ee f982 	bl	8000b04 <__aeabi_dcmpge>
 8012800:	2800      	cmp	r0, #0
 8012802:	d139      	bne.n	8012878 <__kernel_rem_pio2+0x2d0>
 8012804:	9002      	str	r0, [sp, #8]
 8012806:	2200      	movs	r2, #0
 8012808:	2300      	movs	r3, #0
 801280a:	4630      	mov	r0, r6
 801280c:	4639      	mov	r1, r7
 801280e:	f7ee f95b 	bl	8000ac8 <__aeabi_dcmpeq>
 8012812:	2800      	cmp	r0, #0
 8012814:	f000 80c7 	beq.w	80129a6 <__kernel_rem_pio2+0x3fe>
 8012818:	1e65      	subs	r5, r4, #1
 801281a:	462b      	mov	r3, r5
 801281c:	2200      	movs	r2, #0
 801281e:	9904      	ldr	r1, [sp, #16]
 8012820:	428b      	cmp	r3, r1
 8012822:	da6a      	bge.n	80128fa <__kernel_rem_pio2+0x352>
 8012824:	2a00      	cmp	r2, #0
 8012826:	f000 8088 	beq.w	801293a <__kernel_rem_pio2+0x392>
 801282a:	ab0e      	add	r3, sp, #56	; 0x38
 801282c:	f1aa 0a18 	sub.w	sl, sl, #24
 8012830:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8012834:	2b00      	cmp	r3, #0
 8012836:	f000 80b4 	beq.w	80129a2 <__kernel_rem_pio2+0x3fa>
 801283a:	4650      	mov	r0, sl
 801283c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80128c8 <__kernel_rem_pio2+0x320>
 8012840:	f000 fbd2 	bl	8012fe8 <scalbn>
 8012844:	00ec      	lsls	r4, r5, #3
 8012846:	ab72      	add	r3, sp, #456	; 0x1c8
 8012848:	191e      	adds	r6, r3, r4
 801284a:	ec59 8b10 	vmov	r8, r9, d0
 801284e:	f106 0a08 	add.w	sl, r6, #8
 8012852:	462f      	mov	r7, r5
 8012854:	2f00      	cmp	r7, #0
 8012856:	f280 80df 	bge.w	8012a18 <__kernel_rem_pio2+0x470>
 801285a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 80128c0 <__kernel_rem_pio2+0x318>
 801285e:	f04f 0a00 	mov.w	sl, #0
 8012862:	eba5 030a 	sub.w	r3, r5, sl
 8012866:	2b00      	cmp	r3, #0
 8012868:	f2c0 810a 	blt.w	8012a80 <__kernel_rem_pio2+0x4d8>
 801286c:	f8df b078 	ldr.w	fp, [pc, #120]	; 80128e8 <__kernel_rem_pio2+0x340>
 8012870:	ec59 8b18 	vmov	r8, r9, d8
 8012874:	2700      	movs	r7, #0
 8012876:	e0f5      	b.n	8012a64 <__kernel_rem_pio2+0x4bc>
 8012878:	2302      	movs	r3, #2
 801287a:	9302      	str	r3, [sp, #8]
 801287c:	e760      	b.n	8012740 <__kernel_rem_pio2+0x198>
 801287e:	ab0e      	add	r3, sp, #56	; 0x38
 8012880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012884:	b94d      	cbnz	r5, 801289a <__kernel_rem_pio2+0x2f2>
 8012886:	b12b      	cbz	r3, 8012894 <__kernel_rem_pio2+0x2ec>
 8012888:	a80e      	add	r0, sp, #56	; 0x38
 801288a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801288e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8012892:	2301      	movs	r3, #1
 8012894:	3201      	adds	r2, #1
 8012896:	461d      	mov	r5, r3
 8012898:	e759      	b.n	801274e <__kernel_rem_pio2+0x1a6>
 801289a:	a80e      	add	r0, sp, #56	; 0x38
 801289c:	1acb      	subs	r3, r1, r3
 801289e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80128a2:	462b      	mov	r3, r5
 80128a4:	e7f6      	b.n	8012894 <__kernel_rem_pio2+0x2ec>
 80128a6:	1e62      	subs	r2, r4, #1
 80128a8:	ab0e      	add	r3, sp, #56	; 0x38
 80128aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128ae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80128b2:	a90e      	add	r1, sp, #56	; 0x38
 80128b4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80128b8:	e757      	b.n	801276a <__kernel_rem_pio2+0x1c2>
 80128ba:	bf00      	nop
 80128bc:	f3af 8000 	nop.w
	...
 80128cc:	3ff00000 	.word	0x3ff00000
 80128d0:	080138c8 	.word	0x080138c8
 80128d4:	40200000 	.word	0x40200000
 80128d8:	3ff00000 	.word	0x3ff00000
 80128dc:	3e700000 	.word	0x3e700000
 80128e0:	41700000 	.word	0x41700000
 80128e4:	3fe00000 	.word	0x3fe00000
 80128e8:	08013888 	.word	0x08013888
 80128ec:	1e62      	subs	r2, r4, #1
 80128ee:	ab0e      	add	r3, sp, #56	; 0x38
 80128f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80128f4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80128f8:	e7db      	b.n	80128b2 <__kernel_rem_pio2+0x30a>
 80128fa:	a90e      	add	r1, sp, #56	; 0x38
 80128fc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8012900:	3b01      	subs	r3, #1
 8012902:	430a      	orrs	r2, r1
 8012904:	e78b      	b.n	801281e <__kernel_rem_pio2+0x276>
 8012906:	3301      	adds	r3, #1
 8012908:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801290c:	2900      	cmp	r1, #0
 801290e:	d0fa      	beq.n	8012906 <__kernel_rem_pio2+0x35e>
 8012910:	9a08      	ldr	r2, [sp, #32]
 8012912:	4422      	add	r2, r4
 8012914:	00d2      	lsls	r2, r2, #3
 8012916:	a922      	add	r1, sp, #136	; 0x88
 8012918:	18e3      	adds	r3, r4, r3
 801291a:	9206      	str	r2, [sp, #24]
 801291c:	440a      	add	r2, r1
 801291e:	9302      	str	r3, [sp, #8]
 8012920:	f10b 0108 	add.w	r1, fp, #8
 8012924:	f102 0308 	add.w	r3, r2, #8
 8012928:	1c66      	adds	r6, r4, #1
 801292a:	910a      	str	r1, [sp, #40]	; 0x28
 801292c:	2500      	movs	r5, #0
 801292e:	930d      	str	r3, [sp, #52]	; 0x34
 8012930:	9b02      	ldr	r3, [sp, #8]
 8012932:	42b3      	cmp	r3, r6
 8012934:	da04      	bge.n	8012940 <__kernel_rem_pio2+0x398>
 8012936:	461c      	mov	r4, r3
 8012938:	e6a6      	b.n	8012688 <__kernel_rem_pio2+0xe0>
 801293a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801293c:	2301      	movs	r3, #1
 801293e:	e7e3      	b.n	8012908 <__kernel_rem_pio2+0x360>
 8012940:	9b06      	ldr	r3, [sp, #24]
 8012942:	18ef      	adds	r7, r5, r3
 8012944:	ab22      	add	r3, sp, #136	; 0x88
 8012946:	441f      	add	r7, r3
 8012948:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801294a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 801294e:	f7ed fde9 	bl	8000524 <__aeabi_i2d>
 8012952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012954:	461c      	mov	r4, r3
 8012956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012958:	e9c7 0100 	strd	r0, r1, [r7]
 801295c:	eb03 0b05 	add.w	fp, r3, r5
 8012960:	2700      	movs	r7, #0
 8012962:	f04f 0800 	mov.w	r8, #0
 8012966:	f04f 0900 	mov.w	r9, #0
 801296a:	9b07      	ldr	r3, [sp, #28]
 801296c:	429f      	cmp	r7, r3
 801296e:	dd08      	ble.n	8012982 <__kernel_rem_pio2+0x3da>
 8012970:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012972:	aa72      	add	r2, sp, #456	; 0x1c8
 8012974:	18eb      	adds	r3, r5, r3
 8012976:	4413      	add	r3, r2
 8012978:	e9c3 8902 	strd	r8, r9, [r3, #8]
 801297c:	3601      	adds	r6, #1
 801297e:	3508      	adds	r5, #8
 8012980:	e7d6      	b.n	8012930 <__kernel_rem_pio2+0x388>
 8012982:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8012986:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801298a:	f7ed fe35 	bl	80005f8 <__aeabi_dmul>
 801298e:	4602      	mov	r2, r0
 8012990:	460b      	mov	r3, r1
 8012992:	4640      	mov	r0, r8
 8012994:	4649      	mov	r1, r9
 8012996:	f7ed fc79 	bl	800028c <__adddf3>
 801299a:	3701      	adds	r7, #1
 801299c:	4680      	mov	r8, r0
 801299e:	4689      	mov	r9, r1
 80129a0:	e7e3      	b.n	801296a <__kernel_rem_pio2+0x3c2>
 80129a2:	3d01      	subs	r5, #1
 80129a4:	e741      	b.n	801282a <__kernel_rem_pio2+0x282>
 80129a6:	f1ca 0000 	rsb	r0, sl, #0
 80129aa:	ec47 6b10 	vmov	d0, r6, r7
 80129ae:	f000 fb1b 	bl	8012fe8 <scalbn>
 80129b2:	ec57 6b10 	vmov	r6, r7, d0
 80129b6:	2200      	movs	r2, #0
 80129b8:	4b99      	ldr	r3, [pc, #612]	; (8012c20 <__kernel_rem_pio2+0x678>)
 80129ba:	ee10 0a10 	vmov	r0, s0
 80129be:	4639      	mov	r1, r7
 80129c0:	f7ee f8a0 	bl	8000b04 <__aeabi_dcmpge>
 80129c4:	b1f8      	cbz	r0, 8012a06 <__kernel_rem_pio2+0x45e>
 80129c6:	2200      	movs	r2, #0
 80129c8:	4b96      	ldr	r3, [pc, #600]	; (8012c24 <__kernel_rem_pio2+0x67c>)
 80129ca:	4630      	mov	r0, r6
 80129cc:	4639      	mov	r1, r7
 80129ce:	f7ed fe13 	bl	80005f8 <__aeabi_dmul>
 80129d2:	f7ee f8c1 	bl	8000b58 <__aeabi_d2iz>
 80129d6:	4680      	mov	r8, r0
 80129d8:	f7ed fda4 	bl	8000524 <__aeabi_i2d>
 80129dc:	2200      	movs	r2, #0
 80129de:	4b90      	ldr	r3, [pc, #576]	; (8012c20 <__kernel_rem_pio2+0x678>)
 80129e0:	f7ed fe0a 	bl	80005f8 <__aeabi_dmul>
 80129e4:	460b      	mov	r3, r1
 80129e6:	4602      	mov	r2, r0
 80129e8:	4639      	mov	r1, r7
 80129ea:	4630      	mov	r0, r6
 80129ec:	f7ed fc4c 	bl	8000288 <__aeabi_dsub>
 80129f0:	f7ee f8b2 	bl	8000b58 <__aeabi_d2iz>
 80129f4:	1c65      	adds	r5, r4, #1
 80129f6:	ab0e      	add	r3, sp, #56	; 0x38
 80129f8:	f10a 0a18 	add.w	sl, sl, #24
 80129fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a00:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8012a04:	e719      	b.n	801283a <__kernel_rem_pio2+0x292>
 8012a06:	4630      	mov	r0, r6
 8012a08:	4639      	mov	r1, r7
 8012a0a:	f7ee f8a5 	bl	8000b58 <__aeabi_d2iz>
 8012a0e:	ab0e      	add	r3, sp, #56	; 0x38
 8012a10:	4625      	mov	r5, r4
 8012a12:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012a16:	e710      	b.n	801283a <__kernel_rem_pio2+0x292>
 8012a18:	ab0e      	add	r3, sp, #56	; 0x38
 8012a1a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8012a1e:	f7ed fd81 	bl	8000524 <__aeabi_i2d>
 8012a22:	4642      	mov	r2, r8
 8012a24:	464b      	mov	r3, r9
 8012a26:	f7ed fde7 	bl	80005f8 <__aeabi_dmul>
 8012a2a:	2200      	movs	r2, #0
 8012a2c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8012a30:	4b7c      	ldr	r3, [pc, #496]	; (8012c24 <__kernel_rem_pio2+0x67c>)
 8012a32:	4640      	mov	r0, r8
 8012a34:	4649      	mov	r1, r9
 8012a36:	f7ed fddf 	bl	80005f8 <__aeabi_dmul>
 8012a3a:	3f01      	subs	r7, #1
 8012a3c:	4680      	mov	r8, r0
 8012a3e:	4689      	mov	r9, r1
 8012a40:	e708      	b.n	8012854 <__kernel_rem_pio2+0x2ac>
 8012a42:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8012a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a4a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8012a4e:	f7ed fdd3 	bl	80005f8 <__aeabi_dmul>
 8012a52:	4602      	mov	r2, r0
 8012a54:	460b      	mov	r3, r1
 8012a56:	4640      	mov	r0, r8
 8012a58:	4649      	mov	r1, r9
 8012a5a:	f7ed fc17 	bl	800028c <__adddf3>
 8012a5e:	3701      	adds	r7, #1
 8012a60:	4680      	mov	r8, r0
 8012a62:	4689      	mov	r9, r1
 8012a64:	9b04      	ldr	r3, [sp, #16]
 8012a66:	429f      	cmp	r7, r3
 8012a68:	dc01      	bgt.n	8012a6e <__kernel_rem_pio2+0x4c6>
 8012a6a:	45ba      	cmp	sl, r7
 8012a6c:	dae9      	bge.n	8012a42 <__kernel_rem_pio2+0x49a>
 8012a6e:	ab4a      	add	r3, sp, #296	; 0x128
 8012a70:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012a74:	e9c3 8900 	strd	r8, r9, [r3]
 8012a78:	f10a 0a01 	add.w	sl, sl, #1
 8012a7c:	3e08      	subs	r6, #8
 8012a7e:	e6f0      	b.n	8012862 <__kernel_rem_pio2+0x2ba>
 8012a80:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8012a82:	2b03      	cmp	r3, #3
 8012a84:	d85b      	bhi.n	8012b3e <__kernel_rem_pio2+0x596>
 8012a86:	e8df f003 	tbb	[pc, r3]
 8012a8a:	264a      	.short	0x264a
 8012a8c:	0226      	.short	0x0226
 8012a8e:	ab9a      	add	r3, sp, #616	; 0x268
 8012a90:	441c      	add	r4, r3
 8012a92:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012a96:	46a2      	mov	sl, r4
 8012a98:	46ab      	mov	fp, r5
 8012a9a:	f1bb 0f00 	cmp.w	fp, #0
 8012a9e:	dc6c      	bgt.n	8012b7a <__kernel_rem_pio2+0x5d2>
 8012aa0:	46a2      	mov	sl, r4
 8012aa2:	46ab      	mov	fp, r5
 8012aa4:	f1bb 0f01 	cmp.w	fp, #1
 8012aa8:	f300 8086 	bgt.w	8012bb8 <__kernel_rem_pio2+0x610>
 8012aac:	2000      	movs	r0, #0
 8012aae:	2100      	movs	r1, #0
 8012ab0:	2d01      	cmp	r5, #1
 8012ab2:	f300 80a0 	bgt.w	8012bf6 <__kernel_rem_pio2+0x64e>
 8012ab6:	9b02      	ldr	r3, [sp, #8]
 8012ab8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8012abc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	f040 809e 	bne.w	8012c02 <__kernel_rem_pio2+0x65a>
 8012ac6:	9b01      	ldr	r3, [sp, #4]
 8012ac8:	e9c3 7800 	strd	r7, r8, [r3]
 8012acc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8012ad0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8012ad4:	e033      	b.n	8012b3e <__kernel_rem_pio2+0x596>
 8012ad6:	3408      	adds	r4, #8
 8012ad8:	ab4a      	add	r3, sp, #296	; 0x128
 8012ada:	441c      	add	r4, r3
 8012adc:	462e      	mov	r6, r5
 8012ade:	2000      	movs	r0, #0
 8012ae0:	2100      	movs	r1, #0
 8012ae2:	2e00      	cmp	r6, #0
 8012ae4:	da3a      	bge.n	8012b5c <__kernel_rem_pio2+0x5b4>
 8012ae6:	9b02      	ldr	r3, [sp, #8]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d03d      	beq.n	8012b68 <__kernel_rem_pio2+0x5c0>
 8012aec:	4602      	mov	r2, r0
 8012aee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012af2:	9c01      	ldr	r4, [sp, #4]
 8012af4:	e9c4 2300 	strd	r2, r3, [r4]
 8012af8:	4602      	mov	r2, r0
 8012afa:	460b      	mov	r3, r1
 8012afc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8012b00:	f7ed fbc2 	bl	8000288 <__aeabi_dsub>
 8012b04:	ae4c      	add	r6, sp, #304	; 0x130
 8012b06:	2401      	movs	r4, #1
 8012b08:	42a5      	cmp	r5, r4
 8012b0a:	da30      	bge.n	8012b6e <__kernel_rem_pio2+0x5c6>
 8012b0c:	9b02      	ldr	r3, [sp, #8]
 8012b0e:	b113      	cbz	r3, 8012b16 <__kernel_rem_pio2+0x56e>
 8012b10:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b14:	4619      	mov	r1, r3
 8012b16:	9b01      	ldr	r3, [sp, #4]
 8012b18:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8012b1c:	e00f      	b.n	8012b3e <__kernel_rem_pio2+0x596>
 8012b1e:	ab9a      	add	r3, sp, #616	; 0x268
 8012b20:	441c      	add	r4, r3
 8012b22:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8012b26:	2000      	movs	r0, #0
 8012b28:	2100      	movs	r1, #0
 8012b2a:	2d00      	cmp	r5, #0
 8012b2c:	da10      	bge.n	8012b50 <__kernel_rem_pio2+0x5a8>
 8012b2e:	9b02      	ldr	r3, [sp, #8]
 8012b30:	b113      	cbz	r3, 8012b38 <__kernel_rem_pio2+0x590>
 8012b32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012b36:	4619      	mov	r1, r3
 8012b38:	9b01      	ldr	r3, [sp, #4]
 8012b3a:	e9c3 0100 	strd	r0, r1, [r3]
 8012b3e:	9b06      	ldr	r3, [sp, #24]
 8012b40:	f003 0007 	and.w	r0, r3, #7
 8012b44:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012b48:	ecbd 8b02 	vpop	{d8}
 8012b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012b50:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b54:	f7ed fb9a 	bl	800028c <__adddf3>
 8012b58:	3d01      	subs	r5, #1
 8012b5a:	e7e6      	b.n	8012b2a <__kernel_rem_pio2+0x582>
 8012b5c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012b60:	f7ed fb94 	bl	800028c <__adddf3>
 8012b64:	3e01      	subs	r6, #1
 8012b66:	e7bc      	b.n	8012ae2 <__kernel_rem_pio2+0x53a>
 8012b68:	4602      	mov	r2, r0
 8012b6a:	460b      	mov	r3, r1
 8012b6c:	e7c1      	b.n	8012af2 <__kernel_rem_pio2+0x54a>
 8012b6e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012b72:	f7ed fb8b 	bl	800028c <__adddf3>
 8012b76:	3401      	adds	r4, #1
 8012b78:	e7c6      	b.n	8012b08 <__kernel_rem_pio2+0x560>
 8012b7a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8012b7e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012b82:	4640      	mov	r0, r8
 8012b84:	ec53 2b17 	vmov	r2, r3, d7
 8012b88:	4649      	mov	r1, r9
 8012b8a:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012b8e:	f7ed fb7d 	bl	800028c <__adddf3>
 8012b92:	4602      	mov	r2, r0
 8012b94:	460b      	mov	r3, r1
 8012b96:	4606      	mov	r6, r0
 8012b98:	460f      	mov	r7, r1
 8012b9a:	4640      	mov	r0, r8
 8012b9c:	4649      	mov	r1, r9
 8012b9e:	f7ed fb73 	bl	8000288 <__aeabi_dsub>
 8012ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012ba6:	f7ed fb71 	bl	800028c <__adddf3>
 8012baa:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012bae:	e9ca 0100 	strd	r0, r1, [sl]
 8012bb2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8012bb6:	e770      	b.n	8012a9a <__kernel_rem_pio2+0x4f2>
 8012bb8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8012bbc:	ed3a 7b02 	vldmdb	sl!, {d7}
 8012bc0:	4630      	mov	r0, r6
 8012bc2:	ec53 2b17 	vmov	r2, r3, d7
 8012bc6:	4639      	mov	r1, r7
 8012bc8:	ed8d 7b04 	vstr	d7, [sp, #16]
 8012bcc:	f7ed fb5e 	bl	800028c <__adddf3>
 8012bd0:	4602      	mov	r2, r0
 8012bd2:	460b      	mov	r3, r1
 8012bd4:	4680      	mov	r8, r0
 8012bd6:	4689      	mov	r9, r1
 8012bd8:	4630      	mov	r0, r6
 8012bda:	4639      	mov	r1, r7
 8012bdc:	f7ed fb54 	bl	8000288 <__aeabi_dsub>
 8012be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8012be4:	f7ed fb52 	bl	800028c <__adddf3>
 8012be8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012bec:	e9ca 0100 	strd	r0, r1, [sl]
 8012bf0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8012bf4:	e756      	b.n	8012aa4 <__kernel_rem_pio2+0x4fc>
 8012bf6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8012bfa:	f7ed fb47 	bl	800028c <__adddf3>
 8012bfe:	3d01      	subs	r5, #1
 8012c00:	e756      	b.n	8012ab0 <__kernel_rem_pio2+0x508>
 8012c02:	9b01      	ldr	r3, [sp, #4]
 8012c04:	9a01      	ldr	r2, [sp, #4]
 8012c06:	601f      	str	r7, [r3, #0]
 8012c08:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8012c0c:	605c      	str	r4, [r3, #4]
 8012c0e:	609d      	str	r5, [r3, #8]
 8012c10:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012c14:	60d3      	str	r3, [r2, #12]
 8012c16:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012c1a:	6110      	str	r0, [r2, #16]
 8012c1c:	6153      	str	r3, [r2, #20]
 8012c1e:	e78e      	b.n	8012b3e <__kernel_rem_pio2+0x596>
 8012c20:	41700000 	.word	0x41700000
 8012c24:	3e700000 	.word	0x3e700000

08012c28 <__kernel_sin>:
 8012c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c2c:	ec55 4b10 	vmov	r4, r5, d0
 8012c30:	b085      	sub	sp, #20
 8012c32:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012c36:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8012c3a:	ed8d 1b00 	vstr	d1, [sp]
 8012c3e:	9002      	str	r0, [sp, #8]
 8012c40:	da06      	bge.n	8012c50 <__kernel_sin+0x28>
 8012c42:	ee10 0a10 	vmov	r0, s0
 8012c46:	4629      	mov	r1, r5
 8012c48:	f7ed ff86 	bl	8000b58 <__aeabi_d2iz>
 8012c4c:	2800      	cmp	r0, #0
 8012c4e:	d051      	beq.n	8012cf4 <__kernel_sin+0xcc>
 8012c50:	4622      	mov	r2, r4
 8012c52:	462b      	mov	r3, r5
 8012c54:	4620      	mov	r0, r4
 8012c56:	4629      	mov	r1, r5
 8012c58:	f7ed fcce 	bl	80005f8 <__aeabi_dmul>
 8012c5c:	4682      	mov	sl, r0
 8012c5e:	468b      	mov	fp, r1
 8012c60:	4602      	mov	r2, r0
 8012c62:	460b      	mov	r3, r1
 8012c64:	4620      	mov	r0, r4
 8012c66:	4629      	mov	r1, r5
 8012c68:	f7ed fcc6 	bl	80005f8 <__aeabi_dmul>
 8012c6c:	a341      	add	r3, pc, #260	; (adr r3, 8012d74 <__kernel_sin+0x14c>)
 8012c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c72:	4680      	mov	r8, r0
 8012c74:	4689      	mov	r9, r1
 8012c76:	4650      	mov	r0, sl
 8012c78:	4659      	mov	r1, fp
 8012c7a:	f7ed fcbd 	bl	80005f8 <__aeabi_dmul>
 8012c7e:	a33f      	add	r3, pc, #252	; (adr r3, 8012d7c <__kernel_sin+0x154>)
 8012c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c84:	f7ed fb00 	bl	8000288 <__aeabi_dsub>
 8012c88:	4652      	mov	r2, sl
 8012c8a:	465b      	mov	r3, fp
 8012c8c:	f7ed fcb4 	bl	80005f8 <__aeabi_dmul>
 8012c90:	a33c      	add	r3, pc, #240	; (adr r3, 8012d84 <__kernel_sin+0x15c>)
 8012c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012c96:	f7ed faf9 	bl	800028c <__adddf3>
 8012c9a:	4652      	mov	r2, sl
 8012c9c:	465b      	mov	r3, fp
 8012c9e:	f7ed fcab 	bl	80005f8 <__aeabi_dmul>
 8012ca2:	a33a      	add	r3, pc, #232	; (adr r3, 8012d8c <__kernel_sin+0x164>)
 8012ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ca8:	f7ed faee 	bl	8000288 <__aeabi_dsub>
 8012cac:	4652      	mov	r2, sl
 8012cae:	465b      	mov	r3, fp
 8012cb0:	f7ed fca2 	bl	80005f8 <__aeabi_dmul>
 8012cb4:	a337      	add	r3, pc, #220	; (adr r3, 8012d94 <__kernel_sin+0x16c>)
 8012cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cba:	f7ed fae7 	bl	800028c <__adddf3>
 8012cbe:	9b02      	ldr	r3, [sp, #8]
 8012cc0:	4606      	mov	r6, r0
 8012cc2:	460f      	mov	r7, r1
 8012cc4:	b9db      	cbnz	r3, 8012cfe <__kernel_sin+0xd6>
 8012cc6:	4602      	mov	r2, r0
 8012cc8:	460b      	mov	r3, r1
 8012cca:	4650      	mov	r0, sl
 8012ccc:	4659      	mov	r1, fp
 8012cce:	f7ed fc93 	bl	80005f8 <__aeabi_dmul>
 8012cd2:	a325      	add	r3, pc, #148	; (adr r3, 8012d68 <__kernel_sin+0x140>)
 8012cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cd8:	f7ed fad6 	bl	8000288 <__aeabi_dsub>
 8012cdc:	4642      	mov	r2, r8
 8012cde:	464b      	mov	r3, r9
 8012ce0:	f7ed fc8a 	bl	80005f8 <__aeabi_dmul>
 8012ce4:	4602      	mov	r2, r0
 8012ce6:	460b      	mov	r3, r1
 8012ce8:	4620      	mov	r0, r4
 8012cea:	4629      	mov	r1, r5
 8012cec:	f7ed face 	bl	800028c <__adddf3>
 8012cf0:	4604      	mov	r4, r0
 8012cf2:	460d      	mov	r5, r1
 8012cf4:	ec45 4b10 	vmov	d0, r4, r5
 8012cf8:	b005      	add	sp, #20
 8012cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012cfe:	2200      	movs	r2, #0
 8012d00:	4b1b      	ldr	r3, [pc, #108]	; (8012d70 <__kernel_sin+0x148>)
 8012d02:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012d06:	f7ed fc77 	bl	80005f8 <__aeabi_dmul>
 8012d0a:	4632      	mov	r2, r6
 8012d0c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012d10:	463b      	mov	r3, r7
 8012d12:	4640      	mov	r0, r8
 8012d14:	4649      	mov	r1, r9
 8012d16:	f7ed fc6f 	bl	80005f8 <__aeabi_dmul>
 8012d1a:	4602      	mov	r2, r0
 8012d1c:	460b      	mov	r3, r1
 8012d1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012d22:	f7ed fab1 	bl	8000288 <__aeabi_dsub>
 8012d26:	4652      	mov	r2, sl
 8012d28:	465b      	mov	r3, fp
 8012d2a:	f7ed fc65 	bl	80005f8 <__aeabi_dmul>
 8012d2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012d32:	f7ed faa9 	bl	8000288 <__aeabi_dsub>
 8012d36:	a30c      	add	r3, pc, #48	; (adr r3, 8012d68 <__kernel_sin+0x140>)
 8012d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d3c:	4606      	mov	r6, r0
 8012d3e:	460f      	mov	r7, r1
 8012d40:	4640      	mov	r0, r8
 8012d42:	4649      	mov	r1, r9
 8012d44:	f7ed fc58 	bl	80005f8 <__aeabi_dmul>
 8012d48:	4602      	mov	r2, r0
 8012d4a:	460b      	mov	r3, r1
 8012d4c:	4630      	mov	r0, r6
 8012d4e:	4639      	mov	r1, r7
 8012d50:	f7ed fa9c 	bl	800028c <__adddf3>
 8012d54:	4602      	mov	r2, r0
 8012d56:	460b      	mov	r3, r1
 8012d58:	4620      	mov	r0, r4
 8012d5a:	4629      	mov	r1, r5
 8012d5c:	f7ed fa94 	bl	8000288 <__aeabi_dsub>
 8012d60:	e7c6      	b.n	8012cf0 <__kernel_sin+0xc8>
 8012d62:	bf00      	nop
 8012d64:	f3af 8000 	nop.w
 8012d68:	55555549 	.word	0x55555549
 8012d6c:	3fc55555 	.word	0x3fc55555
 8012d70:	3fe00000 	.word	0x3fe00000
 8012d74:	5acfd57c 	.word	0x5acfd57c
 8012d78:	3de5d93a 	.word	0x3de5d93a
 8012d7c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012d80:	3e5ae5e6 	.word	0x3e5ae5e6
 8012d84:	57b1fe7d 	.word	0x57b1fe7d
 8012d88:	3ec71de3 	.word	0x3ec71de3
 8012d8c:	19c161d5 	.word	0x19c161d5
 8012d90:	3f2a01a0 	.word	0x3f2a01a0
 8012d94:	1110f8a6 	.word	0x1110f8a6
 8012d98:	3f811111 	.word	0x3f811111

08012d9c <fabs>:
 8012d9c:	ec51 0b10 	vmov	r0, r1, d0
 8012da0:	ee10 2a10 	vmov	r2, s0
 8012da4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012da8:	ec43 2b10 	vmov	d0, r2, r3
 8012dac:	4770      	bx	lr

08012dae <finite>:
 8012dae:	ee10 3a90 	vmov	r3, s1
 8012db2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8012db6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012dba:	0fc0      	lsrs	r0, r0, #31
 8012dbc:	4770      	bx	lr
	...

08012dc0 <floor>:
 8012dc0:	ec51 0b10 	vmov	r0, r1, d0
 8012dc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012dc8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012dcc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012dd0:	2e13      	cmp	r6, #19
 8012dd2:	460c      	mov	r4, r1
 8012dd4:	ee10 5a10 	vmov	r5, s0
 8012dd8:	4680      	mov	r8, r0
 8012dda:	dc34      	bgt.n	8012e46 <floor+0x86>
 8012ddc:	2e00      	cmp	r6, #0
 8012dde:	da16      	bge.n	8012e0e <floor+0x4e>
 8012de0:	a335      	add	r3, pc, #212	; (adr r3, 8012eb8 <floor+0xf8>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	f7ed fa51 	bl	800028c <__adddf3>
 8012dea:	2200      	movs	r2, #0
 8012dec:	2300      	movs	r3, #0
 8012dee:	f7ed fe93 	bl	8000b18 <__aeabi_dcmpgt>
 8012df2:	b148      	cbz	r0, 8012e08 <floor+0x48>
 8012df4:	2c00      	cmp	r4, #0
 8012df6:	da59      	bge.n	8012eac <floor+0xec>
 8012df8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012dfc:	4a30      	ldr	r2, [pc, #192]	; (8012ec0 <floor+0x100>)
 8012dfe:	432b      	orrs	r3, r5
 8012e00:	2500      	movs	r5, #0
 8012e02:	42ab      	cmp	r3, r5
 8012e04:	bf18      	it	ne
 8012e06:	4614      	movne	r4, r2
 8012e08:	4621      	mov	r1, r4
 8012e0a:	4628      	mov	r0, r5
 8012e0c:	e025      	b.n	8012e5a <floor+0x9a>
 8012e0e:	4f2d      	ldr	r7, [pc, #180]	; (8012ec4 <floor+0x104>)
 8012e10:	4137      	asrs	r7, r6
 8012e12:	ea01 0307 	and.w	r3, r1, r7
 8012e16:	4303      	orrs	r3, r0
 8012e18:	d01f      	beq.n	8012e5a <floor+0x9a>
 8012e1a:	a327      	add	r3, pc, #156	; (adr r3, 8012eb8 <floor+0xf8>)
 8012e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e20:	f7ed fa34 	bl	800028c <__adddf3>
 8012e24:	2200      	movs	r2, #0
 8012e26:	2300      	movs	r3, #0
 8012e28:	f7ed fe76 	bl	8000b18 <__aeabi_dcmpgt>
 8012e2c:	2800      	cmp	r0, #0
 8012e2e:	d0eb      	beq.n	8012e08 <floor+0x48>
 8012e30:	2c00      	cmp	r4, #0
 8012e32:	bfbe      	ittt	lt
 8012e34:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012e38:	fa43 f606 	asrlt.w	r6, r3, r6
 8012e3c:	19a4      	addlt	r4, r4, r6
 8012e3e:	ea24 0407 	bic.w	r4, r4, r7
 8012e42:	2500      	movs	r5, #0
 8012e44:	e7e0      	b.n	8012e08 <floor+0x48>
 8012e46:	2e33      	cmp	r6, #51	; 0x33
 8012e48:	dd0b      	ble.n	8012e62 <floor+0xa2>
 8012e4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012e4e:	d104      	bne.n	8012e5a <floor+0x9a>
 8012e50:	ee10 2a10 	vmov	r2, s0
 8012e54:	460b      	mov	r3, r1
 8012e56:	f7ed fa19 	bl	800028c <__adddf3>
 8012e5a:	ec41 0b10 	vmov	d0, r0, r1
 8012e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012e62:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e6a:	fa23 f707 	lsr.w	r7, r3, r7
 8012e6e:	4207      	tst	r7, r0
 8012e70:	d0f3      	beq.n	8012e5a <floor+0x9a>
 8012e72:	a311      	add	r3, pc, #68	; (adr r3, 8012eb8 <floor+0xf8>)
 8012e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e78:	f7ed fa08 	bl	800028c <__adddf3>
 8012e7c:	2200      	movs	r2, #0
 8012e7e:	2300      	movs	r3, #0
 8012e80:	f7ed fe4a 	bl	8000b18 <__aeabi_dcmpgt>
 8012e84:	2800      	cmp	r0, #0
 8012e86:	d0bf      	beq.n	8012e08 <floor+0x48>
 8012e88:	2c00      	cmp	r4, #0
 8012e8a:	da02      	bge.n	8012e92 <floor+0xd2>
 8012e8c:	2e14      	cmp	r6, #20
 8012e8e:	d103      	bne.n	8012e98 <floor+0xd8>
 8012e90:	3401      	adds	r4, #1
 8012e92:	ea25 0507 	bic.w	r5, r5, r7
 8012e96:	e7b7      	b.n	8012e08 <floor+0x48>
 8012e98:	2301      	movs	r3, #1
 8012e9a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012e9e:	fa03 f606 	lsl.w	r6, r3, r6
 8012ea2:	4435      	add	r5, r6
 8012ea4:	4545      	cmp	r5, r8
 8012ea6:	bf38      	it	cc
 8012ea8:	18e4      	addcc	r4, r4, r3
 8012eaa:	e7f2      	b.n	8012e92 <floor+0xd2>
 8012eac:	2500      	movs	r5, #0
 8012eae:	462c      	mov	r4, r5
 8012eb0:	e7aa      	b.n	8012e08 <floor+0x48>
 8012eb2:	bf00      	nop
 8012eb4:	f3af 8000 	nop.w
 8012eb8:	8800759c 	.word	0x8800759c
 8012ebc:	7e37e43c 	.word	0x7e37e43c
 8012ec0:	bff00000 	.word	0xbff00000
 8012ec4:	000fffff 	.word	0x000fffff

08012ec8 <matherr>:
 8012ec8:	2000      	movs	r0, #0
 8012eca:	4770      	bx	lr
 8012ecc:	0000      	movs	r0, r0
	...

08012ed0 <nan>:
 8012ed0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012ed8 <nan+0x8>
 8012ed4:	4770      	bx	lr
 8012ed6:	bf00      	nop
 8012ed8:	00000000 	.word	0x00000000
 8012edc:	7ff80000 	.word	0x7ff80000

08012ee0 <rint>:
 8012ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012ee2:	ec51 0b10 	vmov	r0, r1, d0
 8012ee6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012eea:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8012eee:	2e13      	cmp	r6, #19
 8012ef0:	460b      	mov	r3, r1
 8012ef2:	ee10 4a10 	vmov	r4, s0
 8012ef6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8012efa:	dc56      	bgt.n	8012faa <rint+0xca>
 8012efc:	2e00      	cmp	r6, #0
 8012efe:	da2b      	bge.n	8012f58 <rint+0x78>
 8012f00:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8012f04:	4302      	orrs	r2, r0
 8012f06:	d023      	beq.n	8012f50 <rint+0x70>
 8012f08:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8012f0c:	4302      	orrs	r2, r0
 8012f0e:	4254      	negs	r4, r2
 8012f10:	4314      	orrs	r4, r2
 8012f12:	0c4b      	lsrs	r3, r1, #17
 8012f14:	0b24      	lsrs	r4, r4, #12
 8012f16:	045b      	lsls	r3, r3, #17
 8012f18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8012f1c:	ea44 0103 	orr.w	r1, r4, r3
 8012f20:	460b      	mov	r3, r1
 8012f22:	492f      	ldr	r1, [pc, #188]	; (8012fe0 <rint+0x100>)
 8012f24:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8012f28:	e9d1 6700 	ldrd	r6, r7, [r1]
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	4639      	mov	r1, r7
 8012f30:	4630      	mov	r0, r6
 8012f32:	f7ed f9ab 	bl	800028c <__adddf3>
 8012f36:	e9cd 0100 	strd	r0, r1, [sp]
 8012f3a:	463b      	mov	r3, r7
 8012f3c:	4632      	mov	r2, r6
 8012f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012f42:	f7ed f9a1 	bl	8000288 <__aeabi_dsub>
 8012f46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8012f4a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8012f4e:	4639      	mov	r1, r7
 8012f50:	ec41 0b10 	vmov	d0, r0, r1
 8012f54:	b003      	add	sp, #12
 8012f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012f58:	4a22      	ldr	r2, [pc, #136]	; (8012fe4 <rint+0x104>)
 8012f5a:	4132      	asrs	r2, r6
 8012f5c:	ea01 0702 	and.w	r7, r1, r2
 8012f60:	4307      	orrs	r7, r0
 8012f62:	d0f5      	beq.n	8012f50 <rint+0x70>
 8012f64:	0852      	lsrs	r2, r2, #1
 8012f66:	4011      	ands	r1, r2
 8012f68:	430c      	orrs	r4, r1
 8012f6a:	d00b      	beq.n	8012f84 <rint+0xa4>
 8012f6c:	ea23 0202 	bic.w	r2, r3, r2
 8012f70:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8012f74:	2e13      	cmp	r6, #19
 8012f76:	fa43 f306 	asr.w	r3, r3, r6
 8012f7a:	bf0c      	ite	eq
 8012f7c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8012f80:	2400      	movne	r4, #0
 8012f82:	4313      	orrs	r3, r2
 8012f84:	4916      	ldr	r1, [pc, #88]	; (8012fe0 <rint+0x100>)
 8012f86:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8012f8a:	4622      	mov	r2, r4
 8012f8c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012f90:	4620      	mov	r0, r4
 8012f92:	4629      	mov	r1, r5
 8012f94:	f7ed f97a 	bl	800028c <__adddf3>
 8012f98:	e9cd 0100 	strd	r0, r1, [sp]
 8012f9c:	4622      	mov	r2, r4
 8012f9e:	462b      	mov	r3, r5
 8012fa0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012fa4:	f7ed f970 	bl	8000288 <__aeabi_dsub>
 8012fa8:	e7d2      	b.n	8012f50 <rint+0x70>
 8012faa:	2e33      	cmp	r6, #51	; 0x33
 8012fac:	dd07      	ble.n	8012fbe <rint+0xde>
 8012fae:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012fb2:	d1cd      	bne.n	8012f50 <rint+0x70>
 8012fb4:	ee10 2a10 	vmov	r2, s0
 8012fb8:	f7ed f968 	bl	800028c <__adddf3>
 8012fbc:	e7c8      	b.n	8012f50 <rint+0x70>
 8012fbe:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8012fc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012fc6:	40f2      	lsrs	r2, r6
 8012fc8:	4210      	tst	r0, r2
 8012fca:	d0c1      	beq.n	8012f50 <rint+0x70>
 8012fcc:	0852      	lsrs	r2, r2, #1
 8012fce:	4210      	tst	r0, r2
 8012fd0:	bf1f      	itttt	ne
 8012fd2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8012fd6:	ea20 0202 	bicne.w	r2, r0, r2
 8012fda:	4134      	asrne	r4, r6
 8012fdc:	4314      	orrne	r4, r2
 8012fde:	e7d1      	b.n	8012f84 <rint+0xa4>
 8012fe0:	080138d8 	.word	0x080138d8
 8012fe4:	000fffff 	.word	0x000fffff

08012fe8 <scalbn>:
 8012fe8:	b570      	push	{r4, r5, r6, lr}
 8012fea:	ec55 4b10 	vmov	r4, r5, d0
 8012fee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012ff2:	4606      	mov	r6, r0
 8012ff4:	462b      	mov	r3, r5
 8012ff6:	b9aa      	cbnz	r2, 8013024 <scalbn+0x3c>
 8012ff8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012ffc:	4323      	orrs	r3, r4
 8012ffe:	d03b      	beq.n	8013078 <scalbn+0x90>
 8013000:	4b31      	ldr	r3, [pc, #196]	; (80130c8 <scalbn+0xe0>)
 8013002:	4629      	mov	r1, r5
 8013004:	2200      	movs	r2, #0
 8013006:	ee10 0a10 	vmov	r0, s0
 801300a:	f7ed faf5 	bl	80005f8 <__aeabi_dmul>
 801300e:	4b2f      	ldr	r3, [pc, #188]	; (80130cc <scalbn+0xe4>)
 8013010:	429e      	cmp	r6, r3
 8013012:	4604      	mov	r4, r0
 8013014:	460d      	mov	r5, r1
 8013016:	da12      	bge.n	801303e <scalbn+0x56>
 8013018:	a327      	add	r3, pc, #156	; (adr r3, 80130b8 <scalbn+0xd0>)
 801301a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801301e:	f7ed faeb 	bl	80005f8 <__aeabi_dmul>
 8013022:	e009      	b.n	8013038 <scalbn+0x50>
 8013024:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8013028:	428a      	cmp	r2, r1
 801302a:	d10c      	bne.n	8013046 <scalbn+0x5e>
 801302c:	ee10 2a10 	vmov	r2, s0
 8013030:	4620      	mov	r0, r4
 8013032:	4629      	mov	r1, r5
 8013034:	f7ed f92a 	bl	800028c <__adddf3>
 8013038:	4604      	mov	r4, r0
 801303a:	460d      	mov	r5, r1
 801303c:	e01c      	b.n	8013078 <scalbn+0x90>
 801303e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8013042:	460b      	mov	r3, r1
 8013044:	3a36      	subs	r2, #54	; 0x36
 8013046:	4432      	add	r2, r6
 8013048:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801304c:	428a      	cmp	r2, r1
 801304e:	dd0b      	ble.n	8013068 <scalbn+0x80>
 8013050:	ec45 4b11 	vmov	d1, r4, r5
 8013054:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80130c0 <scalbn+0xd8>
 8013058:	f000 f83c 	bl	80130d4 <copysign>
 801305c:	a318      	add	r3, pc, #96	; (adr r3, 80130c0 <scalbn+0xd8>)
 801305e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013062:	ec51 0b10 	vmov	r0, r1, d0
 8013066:	e7da      	b.n	801301e <scalbn+0x36>
 8013068:	2a00      	cmp	r2, #0
 801306a:	dd08      	ble.n	801307e <scalbn+0x96>
 801306c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8013070:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8013074:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8013078:	ec45 4b10 	vmov	d0, r4, r5
 801307c:	bd70      	pop	{r4, r5, r6, pc}
 801307e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8013082:	da0d      	bge.n	80130a0 <scalbn+0xb8>
 8013084:	f24c 3350 	movw	r3, #50000	; 0xc350
 8013088:	429e      	cmp	r6, r3
 801308a:	ec45 4b11 	vmov	d1, r4, r5
 801308e:	dce1      	bgt.n	8013054 <scalbn+0x6c>
 8013090:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80130b8 <scalbn+0xd0>
 8013094:	f000 f81e 	bl	80130d4 <copysign>
 8013098:	a307      	add	r3, pc, #28	; (adr r3, 80130b8 <scalbn+0xd0>)
 801309a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801309e:	e7e0      	b.n	8013062 <scalbn+0x7a>
 80130a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80130a4:	3236      	adds	r2, #54	; 0x36
 80130a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80130aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80130ae:	4620      	mov	r0, r4
 80130b0:	4629      	mov	r1, r5
 80130b2:	2200      	movs	r2, #0
 80130b4:	4b06      	ldr	r3, [pc, #24]	; (80130d0 <scalbn+0xe8>)
 80130b6:	e7b2      	b.n	801301e <scalbn+0x36>
 80130b8:	c2f8f359 	.word	0xc2f8f359
 80130bc:	01a56e1f 	.word	0x01a56e1f
 80130c0:	8800759c 	.word	0x8800759c
 80130c4:	7e37e43c 	.word	0x7e37e43c
 80130c8:	43500000 	.word	0x43500000
 80130cc:	ffff3cb0 	.word	0xffff3cb0
 80130d0:	3c900000 	.word	0x3c900000

080130d4 <copysign>:
 80130d4:	ec51 0b10 	vmov	r0, r1, d0
 80130d8:	ee11 0a90 	vmov	r0, s3
 80130dc:	ee10 2a10 	vmov	r2, s0
 80130e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80130e4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80130e8:	ea41 0300 	orr.w	r3, r1, r0
 80130ec:	ec43 2b10 	vmov	d0, r2, r3
 80130f0:	4770      	bx	lr
	...

080130f4 <_init>:
 80130f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80130f6:	bf00      	nop
 80130f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80130fa:	bc08      	pop	{r3}
 80130fc:	469e      	mov	lr, r3
 80130fe:	4770      	bx	lr

08013100 <_fini>:
 8013100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013102:	bf00      	nop
 8013104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013106:	bc08      	pop	{r3}
 8013108:	469e      	mov	lr, r3
 801310a:	4770      	bx	lr
