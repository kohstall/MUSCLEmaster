
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004238  08004238  00014238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004250  08004250  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004250  08004250  00014250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004258  08004258  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004258  08004258  00014258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800425c  0800425c  0001425c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000620  2000000c  0800426c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  0800426c  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000127f1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021e9  00000000  00000000  0003282d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000012f8  00000000  00000000  00034a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001210  00000000  00000000  00035d10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020029  00000000  00000000  00036f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d4cf  00000000  00000000  00056f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5c8d  00000000  00000000  00064418  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012a0a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052cc  00000000  00000000  0012a120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004220 	.word	0x08004220

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004220 	.word	0x08004220

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004cc:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <HAL_Init+0x40>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a0d      	ldr	r2, [pc, #52]	; (8000508 <HAL_Init+0x40>)
 80004d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004d8:	4b0b      	ldr	r3, [pc, #44]	; (8000508 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0a      	ldr	r2, [pc, #40]	; (8000508 <HAL_Init+0x40>)
 80004de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004e4:	4b08      	ldr	r3, [pc, #32]	; (8000508 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a07      	ldr	r2, [pc, #28]	; (8000508 <HAL_Init+0x40>)
 80004ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004f0:	2003      	movs	r0, #3
 80004f2:	f000 fcab 	bl	8000e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 f808 	bl	800050c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80004fc:	f003 fb56 	bl	8003bac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000500:	2300      	movs	r3, #0
}
 8000502:	4618      	mov	r0, r3
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	40023c00 	.word	0x40023c00

0800050c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <HAL_InitTick+0x54>)
 8000516:	681a      	ldr	r2, [r3, #0]
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <HAL_InitTick+0x58>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	4619      	mov	r1, r3
 800051e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000522:	fbb3 f3f1 	udiv	r3, r3, r1
 8000526:	fbb2 f3f3 	udiv	r3, r2, r3
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fcc3 	bl	8000eb6 <HAL_SYSTICK_Config>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000536:	2301      	movs	r3, #1
 8000538:	e00e      	b.n	8000558 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	2b0f      	cmp	r3, #15
 800053e:	d80a      	bhi.n	8000556 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	2200      	movs	r2, #0
 8000542:	6879      	ldr	r1, [r7, #4]
 8000544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000548:	f000 fc8b 	bl	8000e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	4a06      	ldr	r2, [pc, #24]	; (8000568 <HAL_InitTick+0x5c>)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000552:	2300      	movs	r3, #0
 8000554:	e000      	b.n	8000558 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000556:	2301      	movs	r3, #1
}
 8000558:	4618      	mov	r0, r3
 800055a:	3708      	adds	r7, #8
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000008 	.word	0x20000008
 8000564:	20000004 	.word	0x20000004
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000570:	4b06      	ldr	r3, [pc, #24]	; (800058c <HAL_IncTick+0x20>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	4b06      	ldr	r3, [pc, #24]	; (8000590 <HAL_IncTick+0x24>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4413      	add	r3, r2
 800057c:	4a04      	ldr	r2, [pc, #16]	; (8000590 <HAL_IncTick+0x24>)
 800057e:	6013      	str	r3, [r2, #0]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000004 	.word	0x20000004
 8000590:	20000028 	.word	0x20000028

08000594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  return uwTick;
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_GetTick+0x14>)
 800059a:	681b      	ldr	r3, [r3, #0]
}
 800059c:	4618      	mov	r0, r3
 800059e:	46bd      	mov	sp, r7
 80005a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005b4:	f7ff ffee 	bl	8000594 <HAL_GetTick>
 80005b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80005c4:	d005      	beq.n	80005d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <HAL_Delay+0x40>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4413      	add	r3, r2
 80005d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005d2:	bf00      	nop
 80005d4:	f7ff ffde 	bl	8000594 <HAL_GetTick>
 80005d8:	4602      	mov	r2, r0
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	68fa      	ldr	r2, [r7, #12]
 80005e0:	429a      	cmp	r2, r3
 80005e2:	d8f7      	bhi.n	80005d4 <HAL_Delay+0x28>
  {
  }
}
 80005e4:	bf00      	nop
 80005e6:	3710      	adds	r7, #16
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	20000004 	.word	0x20000004

080005f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005f8:	2300      	movs	r3, #0
 80005fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000602:	2301      	movs	r3, #1
 8000604:	e033      	b.n	800066e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060a:	2b00      	cmp	r3, #0
 800060c:	d109      	bne.n	8000622 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f003 faf4 	bl	8003bfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000626:	f003 0310 	and.w	r3, r3, #16
 800062a:	2b00      	cmp	r3, #0
 800062c:	d118      	bne.n	8000660 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000632:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000636:	f023 0302 	bic.w	r3, r3, #2
 800063a:	f043 0202 	orr.w	r2, r3, #2
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 f93a 	bl	80008bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0201 	orr.w	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
 800065e:	e001      	b.n	8000664 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
	...

08000678 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000678:	b480      	push	{r7}
 800067a:	b085      	sub	sp, #20
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000682:	2300      	movs	r3, #0
 8000684:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800068c:	2b01      	cmp	r3, #1
 800068e:	d101      	bne.n	8000694 <HAL_ADC_ConfigChannel+0x1c>
 8000690:	2302      	movs	r3, #2
 8000692:	e105      	b.n	80008a0 <HAL_ADC_ConfigChannel+0x228>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	2201      	movs	r2, #1
 8000698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800069c:	683b      	ldr	r3, [r7, #0]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b09      	cmp	r3, #9
 80006a2:	d925      	bls.n	80006f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	68d9      	ldr	r1, [r3, #12]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	4613      	mov	r3, r2
 80006b4:	005b      	lsls	r3, r3, #1
 80006b6:	4413      	add	r3, r2
 80006b8:	3b1e      	subs	r3, #30
 80006ba:	2207      	movs	r2, #7
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	43da      	mvns	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	400a      	ands	r2, r1
 80006c8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	68d9      	ldr	r1, [r3, #12]
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	689a      	ldr	r2, [r3, #8]
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	4618      	mov	r0, r3
 80006dc:	4603      	mov	r3, r0
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	4403      	add	r3, r0
 80006e2:	3b1e      	subs	r3, #30
 80006e4:	409a      	lsls	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	430a      	orrs	r2, r1
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	e022      	b.n	8000736 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6919      	ldr	r1, [r3, #16]
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	4613      	mov	r3, r2
 8000700:	005b      	lsls	r3, r3, #1
 8000702:	4413      	add	r3, r2
 8000704:	2207      	movs	r2, #7
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	400a      	ands	r2, r1
 8000712:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	6919      	ldr	r1, [r3, #16]
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	689a      	ldr	r2, [r3, #8]
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	4618      	mov	r0, r3
 8000726:	4603      	mov	r3, r0
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	4403      	add	r3, r0
 800072c:	409a      	lsls	r2, r3
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	430a      	orrs	r2, r1
 8000734:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	2b06      	cmp	r3, #6
 800073c:	d824      	bhi.n	8000788 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	685a      	ldr	r2, [r3, #4]
 8000748:	4613      	mov	r3, r2
 800074a:	009b      	lsls	r3, r3, #2
 800074c:	4413      	add	r3, r2
 800074e:	3b05      	subs	r3, #5
 8000750:	221f      	movs	r2, #31
 8000752:	fa02 f303 	lsl.w	r3, r2, r3
 8000756:	43da      	mvns	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	400a      	ands	r2, r1
 800075e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	b29b      	uxth	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	4613      	mov	r3, r2
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	4413      	add	r3, r2
 8000778:	3b05      	subs	r3, #5
 800077a:	fa00 f203 	lsl.w	r2, r0, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	430a      	orrs	r2, r1
 8000784:	635a      	str	r2, [r3, #52]	; 0x34
 8000786:	e04c      	b.n	8000822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	2b0c      	cmp	r3, #12
 800078e:	d824      	bhi.n	80007da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000796:	683b      	ldr	r3, [r7, #0]
 8000798:	685a      	ldr	r2, [r3, #4]
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	3b23      	subs	r3, #35	; 0x23
 80007a2:	221f      	movs	r2, #31
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	43da      	mvns	r2, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	400a      	ands	r2, r1
 80007b0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	685a      	ldr	r2, [r3, #4]
 80007c4:	4613      	mov	r3, r2
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	4413      	add	r3, r2
 80007ca:	3b23      	subs	r3, #35	; 0x23
 80007cc:	fa00 f203 	lsl.w	r2, r0, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	430a      	orrs	r2, r1
 80007d6:	631a      	str	r2, [r3, #48]	; 0x30
 80007d8:	e023      	b.n	8000822 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	685a      	ldr	r2, [r3, #4]
 80007e4:	4613      	mov	r3, r2
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	4413      	add	r3, r2
 80007ea:	3b41      	subs	r3, #65	; 0x41
 80007ec:	221f      	movs	r2, #31
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	43da      	mvns	r2, r3
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	400a      	ands	r2, r1
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	b29b      	uxth	r3, r3
 8000808:	4618      	mov	r0, r3
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	685a      	ldr	r2, [r3, #4]
 800080e:	4613      	mov	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	4413      	add	r3, r2
 8000814:	3b41      	subs	r3, #65	; 0x41
 8000816:	fa00 f203 	lsl.w	r2, r0, r3
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	430a      	orrs	r2, r1
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000822:	4b22      	ldr	r3, [pc, #136]	; (80008ac <HAL_ADC_ConfigChannel+0x234>)
 8000824:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a21      	ldr	r2, [pc, #132]	; (80008b0 <HAL_ADC_ConfigChannel+0x238>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d109      	bne.n	8000844 <HAL_ADC_ConfigChannel+0x1cc>
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b12      	cmp	r3, #18
 8000836:	d105      	bne.n	8000844 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a19      	ldr	r2, [pc, #100]	; (80008b0 <HAL_ADC_ConfigChannel+0x238>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d123      	bne.n	8000896 <HAL_ADC_ConfigChannel+0x21e>
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	2b10      	cmp	r3, #16
 8000854:	d003      	beq.n	800085e <HAL_ADC_ConfigChannel+0x1e6>
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b11      	cmp	r3, #17
 800085c:	d11b      	bne.n	8000896 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800085e:	68fb      	ldr	r3, [r7, #12]
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	2b10      	cmp	r3, #16
 8000870:	d111      	bne.n	8000896 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000872:	4b10      	ldr	r3, [pc, #64]	; (80008b4 <HAL_ADC_ConfigChannel+0x23c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <HAL_ADC_ConfigChannel+0x240>)
 8000878:	fba2 2303 	umull	r2, r3, r2, r3
 800087c:	0c9a      	lsrs	r2, r3, #18
 800087e:	4613      	mov	r3, r2
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	4413      	add	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000888:	e002      	b.n	8000890 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	3b01      	subs	r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d1f9      	bne.n	800088a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2200      	movs	r2, #0
 800089a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	40012300 	.word	0x40012300
 80008b0:	40012000 	.word	0x40012000
 80008b4:	20000008 	.word	0x20000008
 80008b8:	431bde83 	.word	0x431bde83

080008bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008bc:	b480      	push	{r7}
 80008be:	b085      	sub	sp, #20
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80008c4:	4b79      	ldr	r3, [pc, #484]	; (8000aac <ADC_Init+0x1f0>)
 80008c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	685a      	ldr	r2, [r3, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	431a      	orrs	r2, r3
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	685a      	ldr	r2, [r3, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80008f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6859      	ldr	r1, [r3, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	691b      	ldr	r3, [r3, #16]
 80008fc:	021a      	lsls	r2, r3, #8
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	430a      	orrs	r2, r1
 8000904:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	685a      	ldr	r2, [r3, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000914:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	6859      	ldr	r1, [r3, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	430a      	orrs	r2, r1
 8000926:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000936:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6899      	ldr	r1, [r3, #8]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	68da      	ldr	r2, [r3, #12]
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	430a      	orrs	r2, r1
 8000948:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800094e:	4a58      	ldr	r2, [pc, #352]	; (8000ab0 <ADC_Init+0x1f4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d022      	beq.n	800099a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	689a      	ldr	r2, [r3, #8]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000962:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	6899      	ldr	r1, [r3, #8]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	430a      	orrs	r2, r1
 8000974:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	689a      	ldr	r2, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000984:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	6899      	ldr	r1, [r3, #8]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	430a      	orrs	r2, r1
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	e00f      	b.n	80009ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	689a      	ldr	r2, [r3, #8]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80009a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	689a      	ldr	r2, [r3, #8]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80009b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	689a      	ldr	r2, [r3, #8]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 0202 	bic.w	r2, r2, #2
 80009c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	6899      	ldr	r1, [r3, #8]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	7e1b      	ldrb	r3, [r3, #24]
 80009d4:	005a      	lsls	r2, r3, #1
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	430a      	orrs	r2, r1
 80009dc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d01b      	beq.n	8000a20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	685a      	ldr	r2, [r3, #4]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80009f6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	685a      	ldr	r2, [r3, #4]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000a06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	6859      	ldr	r1, [r3, #4]
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a12:	3b01      	subs	r3, #1
 8000a14:	035a      	lsls	r2, r3, #13
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	430a      	orrs	r2, r1
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	e007      	b.n	8000a30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	685a      	ldr	r2, [r3, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000a2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	3b01      	subs	r3, #1
 8000a4c:	051a      	lsls	r2, r3, #20
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	430a      	orrs	r2, r1
 8000a54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689a      	ldr	r2, [r3, #8]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6899      	ldr	r1, [r3, #8]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000a72:	025a      	lsls	r2, r3, #9
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	689a      	ldr	r2, [r3, #8]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	6899      	ldr	r1, [r3, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	695b      	ldr	r3, [r3, #20]
 8000a96:	029a      	lsls	r2, r3, #10
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	430a      	orrs	r2, r1
 8000a9e:	609a      	str	r2, [r3, #8]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr
 8000aac:	40012300 	.word	0x40012300
 8000ab0:	0f000001 	.word	0x0f000001

08000ab4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d101      	bne.n	8000ac6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e0ed      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d102      	bne.n	8000ad8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f003 f93e 	bl	8003d54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	f022 0202 	bic.w	r2, r2, #2
 8000ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000ae8:	f7ff fd54 	bl	8000594 <HAL_GetTick>
 8000aec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000aee:	e012      	b.n	8000b16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000af0:	f7ff fd50 	bl	8000594 <HAL_GetTick>
 8000af4:	4602      	mov	r2, r0
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	1ad3      	subs	r3, r2, r3
 8000afa:	2b0a      	cmp	r3, #10
 8000afc:	d90b      	bls.n	8000b16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2205      	movs	r2, #5
 8000b0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	e0c5      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f003 0302 	and.w	r3, r3, #2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d1e5      	bne.n	8000af0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f042 0201 	orr.w	r2, r2, #1
 8000b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000b34:	f7ff fd2e 	bl	8000594 <HAL_GetTick>
 8000b38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b3a:	e012      	b.n	8000b62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000b3c:	f7ff fd2a 	bl	8000594 <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	2b0a      	cmp	r3, #10
 8000b48:	d90b      	bls.n	8000b62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2205      	movs	r2, #5
 8000b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	e09f      	b.n	8000ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f003 0301 	and.w	r3, r3, #1
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d0e5      	beq.n	8000b3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	7e1b      	ldrb	r3, [r3, #24]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d108      	bne.n	8000b8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	e007      	b.n	8000b9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681a      	ldr	r2, [r3, #0]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	7e5b      	ldrb	r3, [r3, #25]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d108      	bne.n	8000bb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	681a      	ldr	r2, [r3, #0]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	e007      	b.n	8000bc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	7e9b      	ldrb	r3, [r3, #26]
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d108      	bne.n	8000bde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f042 0220 	orr.w	r2, r2, #32
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	e007      	b.n	8000bee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f022 0220 	bic.w	r2, r2, #32
 8000bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	7edb      	ldrb	r3, [r3, #27]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d108      	bne.n	8000c08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f022 0210 	bic.w	r2, r2, #16
 8000c04:	601a      	str	r2, [r3, #0]
 8000c06:	e007      	b.n	8000c18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	681a      	ldr	r2, [r3, #0]
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	f042 0210 	orr.w	r2, r2, #16
 8000c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	7f1b      	ldrb	r3, [r3, #28]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d108      	bne.n	8000c32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f042 0208 	orr.w	r2, r2, #8
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	e007      	b.n	8000c42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f022 0208 	bic.w	r2, r2, #8
 8000c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7f5b      	ldrb	r3, [r3, #29]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d108      	bne.n	8000c5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f042 0204 	orr.w	r2, r2, #4
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	e007      	b.n	8000c6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f022 0204 	bic.w	r2, r2, #4
 8000c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	431a      	orrs	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	691b      	ldr	r3, [r3, #16]
 8000c7a:	431a      	orrs	r2, r3
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	695b      	ldr	r3, [r3, #20]
 8000c80:	ea42 0103 	orr.w	r1, r2, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	1e5a      	subs	r2, r3, #1
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	430a      	orrs	r2, r1
 8000c90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3710      	adds	r7, #16
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
	...

08000cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b085      	sub	sp, #20
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0307 	and.w	r3, r3, #7
 8000cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cc2:	68ba      	ldr	r2, [r7, #8]
 8000cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cc8:	4013      	ands	r3, r2
 8000cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cde:	4a04      	ldr	r2, [pc, #16]	; (8000cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	60d3      	str	r3, [r2, #12]
}
 8000ce4:	bf00      	nop
 8000ce6:	3714      	adds	r7, #20
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cf8:	4b04      	ldr	r3, [pc, #16]	; (8000d0c <__NVIC_GetPriorityGrouping+0x18>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	0a1b      	lsrs	r3, r3, #8
 8000cfe:	f003 0307 	and.w	r3, r3, #7
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	e000ed00 	.word	0xe000ed00

08000d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	db0b      	blt.n	8000d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	f003 021f 	and.w	r2, r3, #31
 8000d28:	4907      	ldr	r1, [pc, #28]	; (8000d48 <__NVIC_EnableIRQ+0x38>)
 8000d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2e:	095b      	lsrs	r3, r3, #5
 8000d30:	2001      	movs	r0, #1
 8000d32:	fa00 f202 	lsl.w	r2, r0, r2
 8000d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100

08000d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	6039      	str	r1, [r7, #0]
 8000d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	db0a      	blt.n	8000d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	490c      	ldr	r1, [pc, #48]	; (8000d98 <__NVIC_SetPriority+0x4c>)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	b2d2      	uxtb	r2, r2
 8000d6e:	440b      	add	r3, r1
 8000d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d74:	e00a      	b.n	8000d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b2da      	uxtb	r2, r3
 8000d7a:	4908      	ldr	r1, [pc, #32]	; (8000d9c <__NVIC_SetPriority+0x50>)
 8000d7c:	79fb      	ldrb	r3, [r7, #7]
 8000d7e:	f003 030f 	and.w	r3, r3, #15
 8000d82:	3b04      	subs	r3, #4
 8000d84:	0112      	lsls	r2, r2, #4
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	440b      	add	r3, r1
 8000d8a:	761a      	strb	r2, [r3, #24]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000e100 	.word	0xe000e100
 8000d9c:	e000ed00 	.word	0xe000ed00

08000da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	60f8      	str	r0, [r7, #12]
 8000da8:	60b9      	str	r1, [r7, #8]
 8000daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000db4:	69fb      	ldr	r3, [r7, #28]
 8000db6:	f1c3 0307 	rsb	r3, r3, #7
 8000dba:	2b04      	cmp	r3, #4
 8000dbc:	bf28      	it	cs
 8000dbe:	2304      	movcs	r3, #4
 8000dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	2b06      	cmp	r3, #6
 8000dc8:	d902      	bls.n	8000dd0 <NVIC_EncodePriority+0x30>
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3b03      	subs	r3, #3
 8000dce:	e000      	b.n	8000dd2 <NVIC_EncodePriority+0x32>
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43da      	mvns	r2, r3
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	401a      	ands	r2, r3
 8000de4:	697b      	ldr	r3, [r7, #20]
 8000de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000de8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	fa01 f303 	lsl.w	r3, r1, r3
 8000df2:	43d9      	mvns	r1, r3
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000df8:	4313      	orrs	r3, r2
         );
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3724      	adds	r7, #36	; 0x24
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3b01      	subs	r3, #1
 8000e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e18:	d301      	bcc.n	8000e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00f      	b.n	8000e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <SysTick_Config+0x40>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	3b01      	subs	r3, #1
 8000e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e26:	210f      	movs	r1, #15
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e2c:	f7ff ff8e 	bl	8000d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SysTick_Config+0x40>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e36:	4b04      	ldr	r3, [pc, #16]	; (8000e48 <SysTick_Config+0x40>)
 8000e38:	2207      	movs	r2, #7
 8000e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	e000e010 	.word	0xe000e010

08000e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ff29 	bl	8000cac <__NVIC_SetPriorityGrouping>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
 8000e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e74:	f7ff ff3e 	bl	8000cf4 <__NVIC_GetPriorityGrouping>
 8000e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e7a:	687a      	ldr	r2, [r7, #4]
 8000e7c:	68b9      	ldr	r1, [r7, #8]
 8000e7e:	6978      	ldr	r0, [r7, #20]
 8000e80:	f7ff ff8e 	bl	8000da0 <NVIC_EncodePriority>
 8000e84:	4602      	mov	r2, r0
 8000e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e8a:	4611      	mov	r1, r2
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff5d 	bl	8000d4c <__NVIC_SetPriority>
}
 8000e92:	bf00      	nop
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff31 	bl	8000d10 <__NVIC_EnableIRQ>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ffa2 	bl	8000e08 <SysTick_Config>
 8000ec4:	4603      	mov	r3, r0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	; 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e16b      	b.n	80011c4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 815a 	bne.w	80011be <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d00b      	beq.n	8000f2a <HAL_GPIO_Init+0x5a>
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d007      	beq.n	8000f2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f1e:	2b11      	cmp	r3, #17
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	2b12      	cmp	r3, #18
 8000f28:	d130      	bne.n	8000f8c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	091b      	lsrs	r3, r3, #4
 8000f76:	f003 0201 	and.w	r2, r3, #1
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	005b      	lsls	r3, r3, #1
 8000f96:	2203      	movs	r2, #3
 8000f98:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d003      	beq.n	8000fcc <HAL_GPIO_Init+0xfc>
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	2b12      	cmp	r3, #18
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	69b9      	ldr	r1, [r7, #24]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80b4 	beq.w	80011be <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b5f      	ldr	r3, [pc, #380]	; (80011d8 <HAL_GPIO_Init+0x308>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a5e      	ldr	r2, [pc, #376]	; (80011d8 <HAL_GPIO_Init+0x308>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b5c      	ldr	r3, [pc, #368]	; (80011d8 <HAL_GPIO_Init+0x308>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001072:	4a5a      	ldr	r2, [pc, #360]	; (80011dc <HAL_GPIO_Init+0x30c>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a51      	ldr	r2, [pc, #324]	; (80011e0 <HAL_GPIO_Init+0x310>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d02b      	beq.n	80010f6 <HAL_GPIO_Init+0x226>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a50      	ldr	r2, [pc, #320]	; (80011e4 <HAL_GPIO_Init+0x314>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d025      	beq.n	80010f2 <HAL_GPIO_Init+0x222>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a4f      	ldr	r2, [pc, #316]	; (80011e8 <HAL_GPIO_Init+0x318>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d01f      	beq.n	80010ee <HAL_GPIO_Init+0x21e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a4e      	ldr	r2, [pc, #312]	; (80011ec <HAL_GPIO_Init+0x31c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d019      	beq.n	80010ea <HAL_GPIO_Init+0x21a>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <HAL_GPIO_Init+0x320>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d013      	beq.n	80010e6 <HAL_GPIO_Init+0x216>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x324>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d00d      	beq.n	80010e2 <HAL_GPIO_Init+0x212>
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4a4b      	ldr	r2, [pc, #300]	; (80011f8 <HAL_GPIO_Init+0x328>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d007      	beq.n	80010de <HAL_GPIO_Init+0x20e>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4a4a      	ldr	r2, [pc, #296]	; (80011fc <HAL_GPIO_Init+0x32c>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_GPIO_Init+0x20a>
 80010d6:	2307      	movs	r3, #7
 80010d8:	e00e      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010da:	2308      	movs	r3, #8
 80010dc:	e00c      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010de:	2306      	movs	r3, #6
 80010e0:	e00a      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010e2:	2305      	movs	r3, #5
 80010e4:	e008      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010e6:	2304      	movs	r3, #4
 80010e8:	e006      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010ea:	2303      	movs	r3, #3
 80010ec:	e004      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010ee:	2302      	movs	r3, #2
 80010f0:	e002      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010f2:	2301      	movs	r3, #1
 80010f4:	e000      	b.n	80010f8 <HAL_GPIO_Init+0x228>
 80010f6:	2300      	movs	r3, #0
 80010f8:	69fa      	ldr	r2, [r7, #28]
 80010fa:	f002 0203 	and.w	r2, r2, #3
 80010fe:	0092      	lsls	r2, r2, #2
 8001100:	4093      	lsls	r3, r2
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4313      	orrs	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001108:	4934      	ldr	r1, [pc, #208]	; (80011dc <HAL_GPIO_Init+0x30c>)
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	089b      	lsrs	r3, r3, #2
 800110e:	3302      	adds	r3, #2
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001116:	4b3a      	ldr	r3, [pc, #232]	; (8001200 <HAL_GPIO_Init+0x330>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800111c:	693b      	ldr	r3, [r7, #16]
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	4313      	orrs	r3, r2
 8001138:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800113a:	4a31      	ldr	r2, [pc, #196]	; (8001200 <HAL_GPIO_Init+0x330>)
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001140:	4b2f      	ldr	r3, [pc, #188]	; (8001200 <HAL_GPIO_Init+0x330>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	43db      	mvns	r3, r3
 800114a:	69ba      	ldr	r2, [r7, #24]
 800114c:	4013      	ands	r3, r2
 800114e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001158:	2b00      	cmp	r3, #0
 800115a:	d003      	beq.n	8001164 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001164:	4a26      	ldr	r2, [pc, #152]	; (8001200 <HAL_GPIO_Init+0x330>)
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116a:	4b25      	ldr	r3, [pc, #148]	; (8001200 <HAL_GPIO_Init+0x330>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	43db      	mvns	r3, r3
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	4013      	ands	r3, r2
 8001178:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	693b      	ldr	r3, [r7, #16]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800118e:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <HAL_GPIO_Init+0x330>)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_GPIO_Init+0x330>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d003      	beq.n	80011b8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011b0:	69ba      	ldr	r2, [r7, #24]
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011b8:	4a11      	ldr	r2, [pc, #68]	; (8001200 <HAL_GPIO_Init+0x330>)
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	2b0f      	cmp	r3, #15
 80011c8:	f67f ae90 	bls.w	8000eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011cc:	bf00      	nop
 80011ce:	3724      	adds	r7, #36	; 0x24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40013800 	.word	0x40013800
 80011e0:	40020000 	.word	0x40020000
 80011e4:	40020400 	.word	0x40020400
 80011e8:	40020800 	.word	0x40020800
 80011ec:	40020c00 	.word	0x40020c00
 80011f0:	40021000 	.word	0x40021000
 80011f4:	40021400 	.word	0x40021400
 80011f8:	40021800 	.word	0x40021800
 80011fc:	40021c00 	.word	0x40021c00
 8001200:	40013c00 	.word	0x40013c00

08001204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d003      	beq.n	8001222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001220:	e003      	b.n	800122a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001222:	887b      	ldrh	r3, [r7, #2]
 8001224:	041a      	lsls	r2, r3, #16
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	619a      	str	r2, [r3, #24]
}
 800122a:	bf00      	nop
 800122c:	370c      	adds	r7, #12
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695a      	ldr	r2, [r3, #20]
 8001246:	887b      	ldrh	r3, [r7, #2]
 8001248:	401a      	ands	r2, r3
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	429a      	cmp	r2, r3
 800124e:	d104      	bne.n	800125a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001250:	887b      	ldrh	r3, [r7, #2]
 8001252:	041a      	lsls	r2, r3, #16
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001258:	e002      	b.n	8001260 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	619a      	str	r2, [r3, #24]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001278:	695a      	ldr	r2, [r3, #20]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	4013      	ands	r3, r2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d006      	beq.n	8001290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001288:	88fb      	ldrh	r3, [r7, #6]
 800128a:	4618      	mov	r0, r3
 800128c:	f002 fc72 	bl	8003b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40013c00 	.word	0x40013c00

0800129c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e11f      	b.n	80014ee <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d106      	bne.n	80012c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f002 fd8e 	bl	8003de4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2224      	movs	r2, #36	; 0x24
 80012cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f022 0201 	bic.w	r2, r2, #1
 80012de:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012ee:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012fe:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001300:	f000 fe36 	bl	8001f70 <HAL_RCC_GetPCLK1Freq>
 8001304:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	4a7b      	ldr	r2, [pc, #492]	; (80014f8 <HAL_I2C_Init+0x25c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d807      	bhi.n	8001320 <HAL_I2C_Init+0x84>
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4a7a      	ldr	r2, [pc, #488]	; (80014fc <HAL_I2C_Init+0x260>)
 8001314:	4293      	cmp	r3, r2
 8001316:	bf94      	ite	ls
 8001318:	2301      	movls	r3, #1
 800131a:	2300      	movhi	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	e006      	b.n	800132e <HAL_I2C_Init+0x92>
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4a77      	ldr	r2, [pc, #476]	; (8001500 <HAL_I2C_Init+0x264>)
 8001324:	4293      	cmp	r3, r2
 8001326:	bf94      	ite	ls
 8001328:	2301      	movls	r3, #1
 800132a:	2300      	movhi	r3, #0
 800132c:	b2db      	uxtb	r3, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e0db      	b.n	80014ee <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	4a72      	ldr	r2, [pc, #456]	; (8001504 <HAL_I2C_Init+0x268>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	0c9b      	lsrs	r3, r3, #18
 8001340:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	68ba      	ldr	r2, [r7, #8]
 8001352:	430a      	orrs	r2, r1
 8001354:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	6a1b      	ldr	r3, [r3, #32]
 800135c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	4a64      	ldr	r2, [pc, #400]	; (80014f8 <HAL_I2C_Init+0x25c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d802      	bhi.n	8001370 <HAL_I2C_Init+0xd4>
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	3301      	adds	r3, #1
 800136e:	e009      	b.n	8001384 <HAL_I2C_Init+0xe8>
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001376:	fb02 f303 	mul.w	r3, r2, r3
 800137a:	4a63      	ldr	r2, [pc, #396]	; (8001508 <HAL_I2C_Init+0x26c>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	099b      	lsrs	r3, r3, #6
 8001382:	3301      	adds	r3, #1
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	430b      	orrs	r3, r1
 800138a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	69db      	ldr	r3, [r3, #28]
 8001392:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001396:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	4956      	ldr	r1, [pc, #344]	; (80014f8 <HAL_I2C_Init+0x25c>)
 80013a0:	428b      	cmp	r3, r1
 80013a2:	d80d      	bhi.n	80013c0 <HAL_I2C_Init+0x124>
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	1e59      	subs	r1, r3, #1
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80013b2:	3301      	adds	r3, #1
 80013b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013b8:	2b04      	cmp	r3, #4
 80013ba:	bf38      	it	cc
 80013bc:	2304      	movcc	r3, #4
 80013be:	e04f      	b.n	8001460 <HAL_I2C_Init+0x1c4>
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d111      	bne.n	80013ec <HAL_I2C_Init+0x150>
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	1e58      	subs	r0, r3, #1
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6859      	ldr	r1, [r3, #4]
 80013d0:	460b      	mov	r3, r1
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	440b      	add	r3, r1
 80013d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80013da:	3301      	adds	r3, #1
 80013dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf0c      	ite	eq
 80013e4:	2301      	moveq	r3, #1
 80013e6:	2300      	movne	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	e012      	b.n	8001412 <HAL_I2C_Init+0x176>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	1e58      	subs	r0, r3, #1
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6859      	ldr	r1, [r3, #4]
 80013f4:	460b      	mov	r3, r1
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	440b      	add	r3, r1
 80013fa:	0099      	lsls	r1, r3, #2
 80013fc:	440b      	add	r3, r1
 80013fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8001402:	3301      	adds	r3, #1
 8001404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001408:	2b00      	cmp	r3, #0
 800140a:	bf0c      	ite	eq
 800140c:	2301      	moveq	r3, #1
 800140e:	2300      	movne	r3, #0
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <HAL_I2C_Init+0x17e>
 8001416:	2301      	movs	r3, #1
 8001418:	e022      	b.n	8001460 <HAL_I2C_Init+0x1c4>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10e      	bne.n	8001440 <HAL_I2C_Init+0x1a4>
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	1e58      	subs	r0, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6859      	ldr	r1, [r3, #4]
 800142a:	460b      	mov	r3, r1
 800142c:	005b      	lsls	r3, r3, #1
 800142e:	440b      	add	r3, r1
 8001430:	fbb0 f3f3 	udiv	r3, r0, r3
 8001434:	3301      	adds	r3, #1
 8001436:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800143a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800143e:	e00f      	b.n	8001460 <HAL_I2C_Init+0x1c4>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	1e58      	subs	r0, r3, #1
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6859      	ldr	r1, [r3, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	0099      	lsls	r1, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	fbb0 f3f3 	udiv	r3, r0, r3
 8001456:	3301      	adds	r3, #1
 8001458:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800145c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	6809      	ldr	r1, [r1, #0]
 8001464:	4313      	orrs	r3, r2
 8001466:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	69da      	ldr	r2, [r3, #28]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	431a      	orrs	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	430a      	orrs	r2, r1
 8001482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800148e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	6911      	ldr	r1, [r2, #16]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	68d2      	ldr	r2, [r2, #12]
 800149a:	4311      	orrs	r1, r2
 800149c:	687a      	ldr	r2, [r7, #4]
 800149e:	6812      	ldr	r2, [r2, #0]
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	68db      	ldr	r3, [r3, #12]
 80014aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	695a      	ldr	r2, [r3, #20]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	699b      	ldr	r3, [r3, #24]
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	430a      	orrs	r2, r1
 80014be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	681a      	ldr	r2, [r3, #0]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f042 0201 	orr.w	r2, r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2220      	movs	r2, #32
 80014da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	000186a0 	.word	0x000186a0
 80014fc:	001e847f 	.word	0x001e847f
 8001500:	003d08ff 	.word	0x003d08ff
 8001504:	431bde83 	.word	0x431bde83
 8001508:	10624dd3 	.word	0x10624dd3

0800150c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800150c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150e:	b08f      	sub	sp, #60	; 0x3c
 8001510:	af0a      	add	r7, sp, #40	; 0x28
 8001512:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e10f      	b.n	800173e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800152a:	b2db      	uxtb	r3, r3
 800152c:	2b00      	cmp	r3, #0
 800152e:	d106      	bne.n	800153e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f002 fd79 	bl	8004030 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2203      	movs	r2, #3
 8001542:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800154a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4618      	mov	r0, r3
 800155e:	f001 fd2d 	bl	8002fbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	687e      	ldr	r6, [r7, #4]
 800156a:	466d      	mov	r5, sp
 800156c:	f106 0410 	add.w	r4, r6, #16
 8001570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001574:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001576:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001578:	e894 0003 	ldmia.w	r4, {r0, r1}
 800157c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001580:	1d33      	adds	r3, r6, #4
 8001582:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001584:	6838      	ldr	r0, [r7, #0]
 8001586:	f001 fcb8 	bl	8002efa <USB_CoreInit>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d005      	beq.n	800159c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2202      	movs	r2, #2
 8001594:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0d0      	b.n	800173e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f001 fd1b 	bl	8002fde <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a8:	2300      	movs	r3, #0
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	e04a      	b.n	8001644 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015ae:	7bfa      	ldrb	r2, [r7, #15]
 80015b0:	6879      	ldr	r1, [r7, #4]
 80015b2:	4613      	mov	r3, r2
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	1a9b      	subs	r3, r3, r2
 80015b8:	009b      	lsls	r3, r3, #2
 80015ba:	440b      	add	r3, r1
 80015bc:	333d      	adds	r3, #61	; 0x3d
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015c2:	7bfa      	ldrb	r2, [r7, #15]
 80015c4:	6879      	ldr	r1, [r7, #4]
 80015c6:	4613      	mov	r3, r2
 80015c8:	00db      	lsls	r3, r3, #3
 80015ca:	1a9b      	subs	r3, r3, r2
 80015cc:	009b      	lsls	r3, r3, #2
 80015ce:	440b      	add	r3, r1
 80015d0:	333c      	adds	r3, #60	; 0x3c
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80015d6:	7bfa      	ldrb	r2, [r7, #15]
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	b298      	uxth	r0, r3
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	4613      	mov	r3, r2
 80015e0:	00db      	lsls	r3, r3, #3
 80015e2:	1a9b      	subs	r3, r3, r2
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	3342      	adds	r3, #66	; 0x42
 80015ea:	4602      	mov	r2, r0
 80015ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015ee:	7bfa      	ldrb	r2, [r7, #15]
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	4613      	mov	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	1a9b      	subs	r3, r3, r2
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	333f      	adds	r3, #63	; 0x3f
 80015fe:	2200      	movs	r2, #0
 8001600:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001602:	7bfa      	ldrb	r2, [r7, #15]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	3344      	adds	r3, #68	; 0x44
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001616:	7bfa      	ldrb	r2, [r7, #15]
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	1a9b      	subs	r3, r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	440b      	add	r3, r1
 8001624:	3348      	adds	r3, #72	; 0x48
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	00db      	lsls	r3, r3, #3
 8001632:	1a9b      	subs	r3, r3, r2
 8001634:	009b      	lsls	r3, r3, #2
 8001636:	440b      	add	r3, r1
 8001638:	3350      	adds	r3, #80	; 0x50
 800163a:	2200      	movs	r2, #0
 800163c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	3301      	adds	r3, #1
 8001642:	73fb      	strb	r3, [r7, #15]
 8001644:	7bfa      	ldrb	r2, [r7, #15]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	429a      	cmp	r2, r3
 800164c:	d3af      	bcc.n	80015ae <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800164e:	2300      	movs	r3, #0
 8001650:	73fb      	strb	r3, [r7, #15]
 8001652:	e044      	b.n	80016de <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	1a9b      	subs	r3, r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800166a:	7bfa      	ldrb	r2, [r7, #15]
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	4613      	mov	r3, r2
 8001670:	00db      	lsls	r3, r3, #3
 8001672:	1a9b      	subs	r3, r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800167c:	7bfa      	ldrb	r2, [r7, #15]
 800167e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001680:	7bfa      	ldrb	r2, [r7, #15]
 8001682:	6879      	ldr	r1, [r7, #4]
 8001684:	4613      	mov	r3, r2
 8001686:	00db      	lsls	r3, r3, #3
 8001688:	1a9b      	subs	r3, r3, r2
 800168a:	009b      	lsls	r3, r3, #2
 800168c:	440b      	add	r3, r1
 800168e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001696:	7bfa      	ldrb	r2, [r7, #15]
 8001698:	6879      	ldr	r1, [r7, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	440b      	add	r3, r1
 80016a4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80016a8:	2200      	movs	r2, #0
 80016aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ac:	7bfa      	ldrb	r2, [r7, #15]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	4613      	mov	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	1a9b      	subs	r3, r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80016c2:	7bfa      	ldrb	r2, [r7, #15]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	440b      	add	r3, r1
 80016d0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	3301      	adds	r3, #1
 80016dc:	73fb      	strb	r3, [r7, #15]
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d3b5      	bcc.n	8001654 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	603b      	str	r3, [r7, #0]
 80016ee:	687e      	ldr	r6, [r7, #4]
 80016f0:	466d      	mov	r5, sp
 80016f2:	f106 0410 	add.w	r4, r6, #16
 80016f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001702:	e885 0003 	stmia.w	r5, {r0, r1}
 8001706:	1d33      	adds	r3, r6, #4
 8001708:	cb0e      	ldmia	r3, {r1, r2, r3}
 800170a:	6838      	ldr	r0, [r7, #0]
 800170c:	f001 fc92 	bl	8003034 <USB_DevInit>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d005      	beq.n	8001722 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2202      	movs	r2, #2
 800171a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00d      	b.n	800173e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	2201      	movs	r2, #1
 800172e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f001 fe4f 	bl	80033da <USB_DevDisconnect>

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d101      	bne.n	800175a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e25b      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b00      	cmp	r3, #0
 8001764:	d075      	beq.n	8001852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001766:	4ba3      	ldr	r3, [pc, #652]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b04      	cmp	r3, #4
 8001770:	d00c      	beq.n	800178c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001772:	4ba0      	ldr	r3, [pc, #640]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800177a:	2b08      	cmp	r3, #8
 800177c:	d112      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800177e:	4b9d      	ldr	r3, [pc, #628]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800178a:	d10b      	bne.n	80017a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	4b99      	ldr	r3, [pc, #612]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d05b      	beq.n	8001850 <HAL_RCC_OscConfig+0x108>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d157      	bne.n	8001850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e236      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ac:	d106      	bne.n	80017bc <HAL_RCC_OscConfig+0x74>
 80017ae:	4b91      	ldr	r3, [pc, #580]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a90      	ldr	r2, [pc, #576]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e01d      	b.n	80017f8 <HAL_RCC_OscConfig+0xb0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c4:	d10c      	bne.n	80017e0 <HAL_RCC_OscConfig+0x98>
 80017c6:	4b8b      	ldr	r3, [pc, #556]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a8a      	ldr	r2, [pc, #552]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	4b88      	ldr	r3, [pc, #544]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a87      	ldr	r2, [pc, #540]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	e00b      	b.n	80017f8 <HAL_RCC_OscConfig+0xb0>
 80017e0:	4b84      	ldr	r3, [pc, #528]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a83      	ldr	r2, [pc, #524]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b81      	ldr	r3, [pc, #516]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a80      	ldr	r2, [pc, #512]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80017f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d013      	beq.n	8001828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7fe fec8 	bl	8000594 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001808:	f7fe fec4 	bl	8000594 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1fb      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b76      	ldr	r3, [pc, #472]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0xc0>
 8001826:	e014      	b.n	8001852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001828:	f7fe feb4 	bl	8000594 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001830:	f7fe feb0 	bl	8000594 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b64      	cmp	r3, #100	; 0x64
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1e7      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001842:	4b6c      	ldr	r3, [pc, #432]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f0      	bne.n	8001830 <HAL_RCC_OscConfig+0xe8>
 800184e:	e000      	b.n	8001852 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d063      	beq.n	8001926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800185e:	4b65      	ldr	r3, [pc, #404]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b00      	cmp	r3, #0
 8001868:	d00b      	beq.n	8001882 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800186a:	4b62      	ldr	r3, [pc, #392]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001872:	2b08      	cmp	r3, #8
 8001874:	d11c      	bne.n	80018b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001876:	4b5f      	ldr	r3, [pc, #380]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d116      	bne.n	80018b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d005      	beq.n	800189a <HAL_RCC_OscConfig+0x152>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d001      	beq.n	800189a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e1bb      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800189a:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4952      	ldr	r1, [pc, #328]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	4313      	orrs	r3, r2
 80018ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018ae:	e03a      	b.n	8001926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d020      	beq.n	80018fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b8:	4b4f      	ldr	r3, [pc, #316]	; (80019f8 <HAL_RCC_OscConfig+0x2b0>)
 80018ba:	2201      	movs	r2, #1
 80018bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018be:	f7fe fe69 	bl	8000594 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018c6:	f7fe fe65 	bl	8000594 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e19c      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d8:	4b46      	ldr	r3, [pc, #280]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e4:	4b43      	ldr	r3, [pc, #268]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	691b      	ldr	r3, [r3, #16]
 80018f0:	00db      	lsls	r3, r3, #3
 80018f2:	4940      	ldr	r1, [pc, #256]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
 80018f8:	e015      	b.n	8001926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fa:	4b3f      	ldr	r3, [pc, #252]	; (80019f8 <HAL_RCC_OscConfig+0x2b0>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001900:	f7fe fe48 	bl	8000594 <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001908:	f7fe fe44 	bl	8000594 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e17b      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191a:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0308 	and.w	r3, r3, #8
 800192e:	2b00      	cmp	r3, #0
 8001930:	d030      	beq.n	8001994 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	695b      	ldr	r3, [r3, #20]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d016      	beq.n	8001968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800193a:	4b30      	ldr	r3, [pc, #192]	; (80019fc <HAL_RCC_OscConfig+0x2b4>)
 800193c:	2201      	movs	r2, #1
 800193e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001940:	f7fe fe28 	bl	8000594 <HAL_GetTick>
 8001944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001948:	f7fe fe24 	bl	8000594 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e15b      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195a:	4b26      	ldr	r3, [pc, #152]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 800195c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0f0      	beq.n	8001948 <HAL_RCC_OscConfig+0x200>
 8001966:	e015      	b.n	8001994 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001968:	4b24      	ldr	r3, [pc, #144]	; (80019fc <HAL_RCC_OscConfig+0x2b4>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800196e:	f7fe fe11 	bl	8000594 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001976:	f7fe fe0d 	bl	8000594 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e144      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001988:	4b1a      	ldr	r3, [pc, #104]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 800198a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800198c:	f003 0302 	and.w	r3, r3, #2
 8001990:	2b00      	cmp	r3, #0
 8001992:	d1f0      	bne.n	8001976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0304 	and.w	r3, r3, #4
 800199c:	2b00      	cmp	r3, #0
 800199e:	f000 80a0 	beq.w	8001ae2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019a2:	2300      	movs	r3, #0
 80019a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019a6:	4b13      	ldr	r3, [pc, #76]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d10f      	bne.n	80019d2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6413      	str	r3, [r2, #64]	; 0x40
 80019c2:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <HAL_RCC_OscConfig+0x2ac>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ce:	2301      	movs	r3, #1
 80019d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019d2:	4b0b      	ldr	r3, [pc, #44]	; (8001a00 <HAL_RCC_OscConfig+0x2b8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d121      	bne.n	8001a22 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019de:	4b08      	ldr	r3, [pc, #32]	; (8001a00 <HAL_RCC_OscConfig+0x2b8>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a07      	ldr	r2, [pc, #28]	; (8001a00 <HAL_RCC_OscConfig+0x2b8>)
 80019e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ea:	f7fe fdd3 	bl	8000594 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f0:	e011      	b.n	8001a16 <HAL_RCC_OscConfig+0x2ce>
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	42470000 	.word	0x42470000
 80019fc:	42470e80 	.word	0x42470e80
 8001a00:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a04:	f7fe fdc6 	bl	8000594 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0fd      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a16:	4b81      	ldr	r3, [pc, #516]	; (8001c1c <HAL_RCC_OscConfig+0x4d4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d0f0      	beq.n	8001a04 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d106      	bne.n	8001a38 <HAL_RCC_OscConfig+0x2f0>
 8001a2a:	4b7d      	ldr	r3, [pc, #500]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	4a7c      	ldr	r2, [pc, #496]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6713      	str	r3, [r2, #112]	; 0x70
 8001a36:	e01c      	b.n	8001a72 <HAL_RCC_OscConfig+0x32a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b05      	cmp	r3, #5
 8001a3e:	d10c      	bne.n	8001a5a <HAL_RCC_OscConfig+0x312>
 8001a40:	4b77      	ldr	r3, [pc, #476]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a44:	4a76      	ldr	r2, [pc, #472]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a46:	f043 0304 	orr.w	r3, r3, #4
 8001a4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a4c:	4b74      	ldr	r3, [pc, #464]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a50:	4a73      	ldr	r2, [pc, #460]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a52:	f043 0301 	orr.w	r3, r3, #1
 8001a56:	6713      	str	r3, [r2, #112]	; 0x70
 8001a58:	e00b      	b.n	8001a72 <HAL_RCC_OscConfig+0x32a>
 8001a5a:	4b71      	ldr	r3, [pc, #452]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a5e:	4a70      	ldr	r2, [pc, #448]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a60:	f023 0301 	bic.w	r3, r3, #1
 8001a64:	6713      	str	r3, [r2, #112]	; 0x70
 8001a66:	4b6e      	ldr	r3, [pc, #440]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6a:	4a6d      	ldr	r2, [pc, #436]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a6c:	f023 0304 	bic.w	r3, r3, #4
 8001a70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d015      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7a:	f7fe fd8b 	bl	8000594 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7fe fd87 	bl	8000594 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d901      	bls.n	8001a98 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e0bc      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a98:	4b61      	ldr	r3, [pc, #388]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9c:	f003 0302 	and.w	r3, r3, #2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0ee      	beq.n	8001a82 <HAL_RCC_OscConfig+0x33a>
 8001aa4:	e014      	b.n	8001ad0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aa6:	f7fe fd75 	bl	8000594 <HAL_GetTick>
 8001aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aac:	e00a      	b.n	8001ac4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001aae:	f7fe fd71 	bl	8000594 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	693b      	ldr	r3, [r7, #16]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e0a6      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac4:	4b56      	ldr	r3, [pc, #344]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1ee      	bne.n	8001aae <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ad0:	7dfb      	ldrb	r3, [r7, #23]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d105      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad6:	4b52      	ldr	r3, [pc, #328]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a51      	ldr	r2, [pc, #324]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001adc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	699b      	ldr	r3, [r3, #24]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8092 	beq.w	8001c10 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aec:	4b4c      	ldr	r3, [pc, #304]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d05c      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d141      	bne.n	8001b84 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b48      	ldr	r3, [pc, #288]	; (8001c24 <HAL_RCC_OscConfig+0x4dc>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7fe fd45 	bl	8000594 <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7fe fd41 	bl	8000594 <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e078      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b20:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1f0      	bne.n	8001b0e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	019b      	lsls	r3, r3, #6
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	085b      	lsrs	r3, r3, #1
 8001b44:	3b01      	subs	r3, #1
 8001b46:	041b      	lsls	r3, r3, #16
 8001b48:	431a      	orrs	r2, r3
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4e:	061b      	lsls	r3, r3, #24
 8001b50:	4933      	ldr	r1, [pc, #204]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b56:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <HAL_RCC_OscConfig+0x4dc>)
 8001b58:	2201      	movs	r2, #1
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7fe fd1a 	bl	8000594 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b64:	f7fe fd16 	bl	8000594 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e04d      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f0      	beq.n	8001b64 <HAL_RCC_OscConfig+0x41c>
 8001b82:	e045      	b.n	8001c10 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	4b27      	ldr	r3, [pc, #156]	; (8001c24 <HAL_RCC_OscConfig+0x4dc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7fe fd03 	bl	8000594 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b92:	f7fe fcff 	bl	8000594 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e036      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f0      	bne.n	8001b92 <HAL_RCC_OscConfig+0x44a>
 8001bb0:	e02e      	b.n	8001c10 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	699b      	ldr	r3, [r3, #24]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e029      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001bbe:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_RCC_OscConfig+0x4d8>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69db      	ldr	r3, [r3, #28]
 8001bce:	429a      	cmp	r2, r3
 8001bd0:	d11c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d115      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001be0:	68fa      	ldr	r2, [r7, #12]
 8001be2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001be6:	4013      	ands	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d10d      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d106      	bne.n	8001c0c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000
 8001c20:	40023800 	.word	0x40023800
 8001c24:	42470060 	.word	0x42470060

08001c28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b084      	sub	sp, #16
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e0cc      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c3c:	4b68      	ldr	r3, [pc, #416]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d90c      	bls.n	8001c64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4a:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c52:	4b63      	ldr	r3, [pc, #396]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d001      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0b8      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d020      	beq.n	8001cb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0304 	and.w	r3, r3, #4
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c7c:	4b59      	ldr	r3, [pc, #356]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	4a58      	ldr	r2, [pc, #352]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d005      	beq.n	8001ca0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c94:	4b53      	ldr	r3, [pc, #332]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	4a52      	ldr	r2, [pc, #328]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca0:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	494d      	ldr	r1, [pc, #308]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d044      	beq.n	8001d48 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d107      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d119      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e07f      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d003      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ce2:	2b03      	cmp	r3, #3
 8001ce4:	d107      	bne.n	8001cf6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce6:	4b3f      	ldr	r3, [pc, #252]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e06f      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e067      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f023 0203 	bic.w	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4934      	ldr	r1, [pc, #208]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d18:	f7fe fc3c 	bl	8000594 <HAL_GetTick>
 8001d1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d20:	f7fe fc38 	bl	8000594 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e04f      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d36:	4b2b      	ldr	r3, [pc, #172]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	f003 020c 	and.w	r2, r3, #12
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d1eb      	bne.n	8001d20 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 030f 	and.w	r3, r3, #15
 8001d50:	683a      	ldr	r2, [r7, #0]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d20c      	bcs.n	8001d70 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d56:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5e:	4b20      	ldr	r3, [pc, #128]	; (8001de0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d001      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e032      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d008      	beq.n	8001d8e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d7c:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4916      	ldr	r1, [pc, #88]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	00db      	lsls	r3, r3, #3
 8001da8:	490e      	ldr	r1, [pc, #56]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001daa:	4313      	orrs	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dae:	f000 f821 	bl	8001df4 <HAL_RCC_GetSysClockFreq>
 8001db2:	4601      	mov	r1, r0
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <HAL_RCC_ClockConfig+0x1bc>)
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	091b      	lsrs	r3, r3, #4
 8001dba:	f003 030f 	and.w	r3, r3, #15
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	; (8001de8 <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	5cd3      	ldrb	r3, [r2, r3]
 8001dc2:	fa21 f303 	lsr.w	r3, r1, r3
 8001dc6:	4a09      	ldr	r2, [pc, #36]	; (8001dec <HAL_RCC_ClockConfig+0x1c4>)
 8001dc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <HAL_RCC_ClockConfig+0x1c8>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7fe fb9c 	bl	800050c <HAL_InitTick>

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3710      	adds	r7, #16
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40023c00 	.word	0x40023c00
 8001de4:	40023800 	.word	0x40023800
 8001de8:	08004238 	.word	0x08004238
 8001dec:	20000008 	.word	0x20000008
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	2300      	movs	r3, #0
 8001e04:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e0a:	4b50      	ldr	r3, [pc, #320]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	f003 030c 	and.w	r3, r3, #12
 8001e12:	2b04      	cmp	r3, #4
 8001e14:	d007      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x32>
 8001e16:	2b08      	cmp	r3, #8
 8001e18:	d008      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x38>
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f040 808d 	bne.w	8001f3a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e20:	4b4b      	ldr	r3, [pc, #300]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001e22:	60bb      	str	r3, [r7, #8]
       break;
 8001e24:	e08c      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e26:	4b4b      	ldr	r3, [pc, #300]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e28:	60bb      	str	r3, [r7, #8]
      break;
 8001e2a:	e089      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e34:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e36:	4b45      	ldr	r3, [pc, #276]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d023      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e42:	4b42      	ldr	r3, [pc, #264]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	099b      	lsrs	r3, r3, #6
 8001e48:	f04f 0400 	mov.w	r4, #0
 8001e4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	ea03 0501 	and.w	r5, r3, r1
 8001e58:	ea04 0602 	and.w	r6, r4, r2
 8001e5c:	4a3d      	ldr	r2, [pc, #244]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e5e:	fb02 f106 	mul.w	r1, r2, r6
 8001e62:	2200      	movs	r2, #0
 8001e64:	fb02 f205 	mul.w	r2, r2, r5
 8001e68:	440a      	add	r2, r1
 8001e6a:	493a      	ldr	r1, [pc, #232]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x160>)
 8001e6c:	fba5 0101 	umull	r0, r1, r5, r1
 8001e70:	1853      	adds	r3, r2, r1
 8001e72:	4619      	mov	r1, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f04f 0400 	mov.w	r4, #0
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4623      	mov	r3, r4
 8001e7e:	f7fe f9a3 	bl	80001c8 <__aeabi_uldivmod>
 8001e82:	4603      	mov	r3, r0
 8001e84:	460c      	mov	r4, r1
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	e049      	b.n	8001f1e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	099b      	lsrs	r3, r3, #6
 8001e90:	f04f 0400 	mov.w	r4, #0
 8001e94:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e98:	f04f 0200 	mov.w	r2, #0
 8001e9c:	ea03 0501 	and.w	r5, r3, r1
 8001ea0:	ea04 0602 	and.w	r6, r4, r2
 8001ea4:	4629      	mov	r1, r5
 8001ea6:	4632      	mov	r2, r6
 8001ea8:	f04f 0300 	mov.w	r3, #0
 8001eac:	f04f 0400 	mov.w	r4, #0
 8001eb0:	0154      	lsls	r4, r2, #5
 8001eb2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001eb6:	014b      	lsls	r3, r1, #5
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4622      	mov	r2, r4
 8001ebc:	1b49      	subs	r1, r1, r5
 8001ebe:	eb62 0206 	sbc.w	r2, r2, r6
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	f04f 0400 	mov.w	r4, #0
 8001eca:	0194      	lsls	r4, r2, #6
 8001ecc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ed0:	018b      	lsls	r3, r1, #6
 8001ed2:	1a5b      	subs	r3, r3, r1
 8001ed4:	eb64 0402 	sbc.w	r4, r4, r2
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	f04f 0200 	mov.w	r2, #0
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ee6:	00d9      	lsls	r1, r3, #3
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4614      	mov	r4, r2
 8001eec:	195b      	adds	r3, r3, r5
 8001eee:	eb44 0406 	adc.w	r4, r4, r6
 8001ef2:	f04f 0100 	mov.w	r1, #0
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	02a2      	lsls	r2, r4, #10
 8001efc:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f00:	0299      	lsls	r1, r3, #10
 8001f02:	460b      	mov	r3, r1
 8001f04:	4614      	mov	r4, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	4621      	mov	r1, r4
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	f04f 0400 	mov.w	r4, #0
 8001f10:	461a      	mov	r2, r3
 8001f12:	4623      	mov	r3, r4
 8001f14:	f7fe f958 	bl	80001c8 <__aeabi_uldivmod>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f1e:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x158>)
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	0c1b      	lsrs	r3, r3, #16
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	3301      	adds	r3, #1
 8001f2a:	005b      	lsls	r3, r3, #1
 8001f2c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f36:	60bb      	str	r3, [r7, #8]
      break;
 8001f38:	e002      	b.n	8001f40 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001f3c:	60bb      	str	r3, [r7, #8]
      break;
 8001f3e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f40:	68bb      	ldr	r3, [r7, #8]
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3714      	adds	r7, #20
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800
 8001f50:	00f42400 	.word	0x00f42400
 8001f54:	017d7840 	.word	0x017d7840

08001f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f5c:	4b03      	ldr	r3, [pc, #12]	; (8001f6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	20000008 	.word	0x20000008

08001f70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f74:	f7ff fff0 	bl	8001f58 <HAL_RCC_GetHCLKFreq>
 8001f78:	4601      	mov	r1, r0
 8001f7a:	4b05      	ldr	r3, [pc, #20]	; (8001f90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0a9b      	lsrs	r3, r3, #10
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4a03      	ldr	r2, [pc, #12]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f86:	5cd3      	ldrb	r3, [r2, r3]
 8001f88:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	40023800 	.word	0x40023800
 8001f94:	08004248 	.word	0x08004248

08001f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e056      	b.n	8002058 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d106      	bne.n	8001fca <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	f001 ff89 	bl	8003edc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685a      	ldr	r2, [r3, #4]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	431a      	orrs	r2, r3
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	431a      	orrs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	6a1b      	ldr	r3, [r3, #32]
 8002012:	ea42 0103 	orr.w	r1, r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	430a      	orrs	r2, r1
 8002020:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	0c1b      	lsrs	r3, r3, #16
 8002028:	f003 0104 	and.w	r1, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69da      	ldr	r2, [r3, #28]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002046:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002056:	2300      	movs	r3, #0
}
 8002058:	4618      	mov	r0, r3
 800205a:	3708      	adds	r7, #8
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}

08002060 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d101      	bne.n	8002072 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e01d      	b.n	80020ae <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b00      	cmp	r3, #0
 800207c:	d106      	bne.n	800208c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f001 ff70 	bl	8003f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3304      	adds	r3, #4
 800209c:	4619      	mov	r1, r3
 800209e:	4610      	mov	r0, r2
 80020a0:	f000 fc08 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d101      	bne.n	80020c8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	e01d      	b.n	8002104 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d106      	bne.n	80020e2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f815 	bl	800210c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2202      	movs	r2, #2
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3304      	adds	r3, #4
 80020f2:	4619      	mov	r1, r3
 80020f4:	4610      	mov	r0, r2
 80020f6:	f000 fbdd 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2201      	movs	r2, #1
 8002130:	6839      	ldr	r1, [r7, #0]
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fea8 	bl	8002e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a15      	ldr	r2, [pc, #84]	; (8002194 <HAL_TIM_OC_Start+0x74>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d004      	beq.n	800214c <HAL_TIM_OC_Start+0x2c>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_TIM_OC_Start+0x78>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d101      	bne.n	8002150 <HAL_TIM_OC_Start+0x30>
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_TIM_OC_Start+0x32>
 8002150:	2300      	movs	r3, #0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d007      	beq.n	8002166 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002164:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2b06      	cmp	r3, #6
 8002176:	d007      	beq.n	8002188 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0201 	orr.w	r2, r2, #1
 8002186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	40010000 	.word	0x40010000
 8002198:	40010400 	.word	0x40010400

0800219c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b082      	sub	sp, #8
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e01d      	b.n	80021ea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f815 	bl	80021f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2202      	movs	r2, #2
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3304      	adds	r3, #4
 80021d8:	4619      	mov	r1, r3
 80021da:	4610      	mov	r0, r2
 80021dc:	f000 fb6a 	bl	80028b4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2201      	movs	r2, #1
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2201      	movs	r2, #1
 8002218:	6839      	ldr	r1, [r7, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fe34 	bl	8002e88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a15      	ldr	r2, [pc, #84]	; (800227c <HAL_TIM_PWM_Start+0x74>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d004      	beq.n	8002234 <HAL_TIM_PWM_Start+0x2c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a14      	ldr	r2, [pc, #80]	; (8002280 <HAL_TIM_PWM_Start+0x78>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d101      	bne.n	8002238 <HAL_TIM_PWM_Start+0x30>
 8002234:	2301      	movs	r3, #1
 8002236:	e000      	b.n	800223a <HAL_TIM_PWM_Start+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d007      	beq.n	800224e <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	689b      	ldr	r3, [r3, #8]
 8002254:	f003 0307 	and.w	r3, r3, #7
 8002258:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b06      	cmp	r3, #6
 800225e:	d007      	beq.n	8002270 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f042 0201 	orr.w	r2, r2, #1
 800226e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40010000 	.word	0x40010000
 8002280:	40010400 	.word	0x40010400

08002284 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b02      	cmp	r3, #2
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b02      	cmp	r3, #2
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0202 	mvn.w	r2, #2
 80022b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 fad5 	bl	8002876 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 fac7 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fad8 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0304 	and.w	r3, r3, #4
 80022f8:	2b04      	cmp	r3, #4
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0204 	mvn.w	r2, #4
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699b      	ldr	r3, [r3, #24]
 8002312:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f000 faab 	bl	8002876 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fa9d 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 faae 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b08      	cmp	r3, #8
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0208 	mvn.w	r2, #8
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2204      	movs	r2, #4
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 fa81 	bl	8002876 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa73 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fa84 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	2b10      	cmp	r3, #16
 8002394:	d122      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0310 	and.w	r3, r3, #16
 80023a0:	2b10      	cmp	r3, #16
 80023a2:	d11b      	bne.n	80023dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0210 	mvn.w	r2, #16
 80023ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2208      	movs	r2, #8
 80023b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f000 fa57 	bl	8002876 <HAL_TIM_IC_CaptureCallback>
 80023c8:	e005      	b.n	80023d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fa49 	bl	8002862 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 fa5a 	bl	800288a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2200      	movs	r2, #0
 80023da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d10e      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	d107      	bne.n	8002408 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f06f 0201 	mvn.w	r2, #1
 8002400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f000 fa23 	bl	800284e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691b      	ldr	r3, [r3, #16]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b80      	cmp	r3, #128	; 0x80
 8002414:	d10e      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002420:	2b80      	cmp	r3, #128	; 0x80
 8002422:	d107      	bne.n	8002434 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800242c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 fd59 	bl	8002ee6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	691b      	ldr	r3, [r3, #16]
 800243a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243e:	2b40      	cmp	r3, #64	; 0x40
 8002440:	d10e      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800244c:	2b40      	cmp	r3, #64	; 0x40
 800244e:	d107      	bne.n	8002460 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fa1f 	bl	800289e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	2b20      	cmp	r3, #32
 800246c:	d10e      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b20      	cmp	r3, #32
 800247a:	d107      	bne.n	800248c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f06f 0220 	mvn.w	r2, #32
 8002484:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fd23 	bl	8002ed2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_OC_ConfigChannel+0x1a>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e04e      	b.n	800254c <HAL_TIM_OC_ConfigChannel+0xb8>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2202      	movs	r2, #2
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0c      	cmp	r3, #12
 80024c2:	d839      	bhi.n	8002538 <HAL_TIM_OC_ConfigChannel+0xa4>
 80024c4:	a201      	add	r2, pc, #4	; (adr r2, 80024cc <HAL_TIM_OC_ConfigChannel+0x38>)
 80024c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ca:	bf00      	nop
 80024cc:	08002501 	.word	0x08002501
 80024d0:	08002539 	.word	0x08002539
 80024d4:	08002539 	.word	0x08002539
 80024d8:	08002539 	.word	0x08002539
 80024dc:	0800250f 	.word	0x0800250f
 80024e0:	08002539 	.word	0x08002539
 80024e4:	08002539 	.word	0x08002539
 80024e8:	08002539 	.word	0x08002539
 80024ec:	0800251d 	.word	0x0800251d
 80024f0:	08002539 	.word	0x08002539
 80024f4:	08002539 	.word	0x08002539
 80024f8:	08002539 	.word	0x08002539
 80024fc:	0800252b 	.word	0x0800252b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68b9      	ldr	r1, [r7, #8]
 8002506:	4618      	mov	r0, r3
 8002508:	f000 fa74 	bl	80029f4 <TIM_OC1_SetConfig>
      break;
 800250c:	e015      	b.n	800253a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68b9      	ldr	r1, [r7, #8]
 8002514:	4618      	mov	r0, r3
 8002516:	f000 fadd 	bl	8002ad4 <TIM_OC2_SetConfig>
      break;
 800251a:	e00e      	b.n	800253a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 fb4c 	bl	8002bc0 <TIM_OC3_SetConfig>
      break;
 8002528:	e007      	b.n	800253a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68b9      	ldr	r1, [r7, #8]
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fbb9 	bl	8002ca8 <TIM_OC4_SetConfig>
      break;
 8002536:	e000      	b.n	800253a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8002538:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2201      	movs	r2, #1
 800253e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002566:	2b01      	cmp	r3, #1
 8002568:	d101      	bne.n	800256e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800256a:	2302      	movs	r3, #2
 800256c:	e0b4      	b.n	80026d8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2201      	movs	r2, #1
 8002572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2202      	movs	r2, #2
 800257a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b0c      	cmp	r3, #12
 8002582:	f200 809f 	bhi.w	80026c4 <HAL_TIM_PWM_ConfigChannel+0x170>
 8002586:	a201      	add	r2, pc, #4	; (adr r2, 800258c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	080025c1 	.word	0x080025c1
 8002590:	080026c5 	.word	0x080026c5
 8002594:	080026c5 	.word	0x080026c5
 8002598:	080026c5 	.word	0x080026c5
 800259c:	08002601 	.word	0x08002601
 80025a0:	080026c5 	.word	0x080026c5
 80025a4:	080026c5 	.word	0x080026c5
 80025a8:	080026c5 	.word	0x080026c5
 80025ac:	08002643 	.word	0x08002643
 80025b0:	080026c5 	.word	0x080026c5
 80025b4:	080026c5 	.word	0x080026c5
 80025b8:	080026c5 	.word	0x080026c5
 80025bc:	08002683 	.word	0x08002683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68b9      	ldr	r1, [r7, #8]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f000 fa14 	bl	80029f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0208 	orr.w	r2, r2, #8
 80025da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	699a      	ldr	r2, [r3, #24]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0204 	bic.w	r2, r2, #4
 80025ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6999      	ldr	r1, [r3, #24]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	691a      	ldr	r2, [r3, #16]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	619a      	str	r2, [r3, #24]
      break;
 80025fe:	e062      	b.n	80026c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68b9      	ldr	r1, [r7, #8]
 8002606:	4618      	mov	r0, r3
 8002608:	f000 fa64 	bl	8002ad4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	699a      	ldr	r2, [r3, #24]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800262a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6999      	ldr	r1, [r3, #24]
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	021a      	lsls	r2, r3, #8
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	619a      	str	r2, [r3, #24]
      break;
 8002640:	e041      	b.n	80026c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68b9      	ldr	r1, [r7, #8]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fab9 	bl	8002bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	69da      	ldr	r2, [r3, #28]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f042 0208 	orr.w	r2, r2, #8
 800265c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0204 	bic.w	r2, r2, #4
 800266c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	69d9      	ldr	r1, [r3, #28]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	691a      	ldr	r2, [r3, #16]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	61da      	str	r2, [r3, #28]
      break;
 8002680:	e021      	b.n	80026c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68b9      	ldr	r1, [r7, #8]
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fb0d 	bl	8002ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	69da      	ldr	r2, [r3, #28]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800269c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	69da      	ldr	r2, [r3, #28]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69d9      	ldr	r1, [r3, #28]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	021a      	lsls	r2, r3, #8
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	430a      	orrs	r2, r1
 80026c0:	61da      	str	r2, [r3, #28]
      break;
 80026c2:	e000      	b.n	80026c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80026c4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d101      	bne.n	80026f8 <HAL_TIM_ConfigClockSource+0x18>
 80026f4:	2302      	movs	r3, #2
 80026f6:	e0a6      	b.n	8002846 <HAL_TIM_ConfigClockSource+0x166>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2201      	movs	r2, #1
 80026fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2202      	movs	r2, #2
 8002704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002716:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800271e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b40      	cmp	r3, #64	; 0x40
 800272e:	d067      	beq.n	8002800 <HAL_TIM_ConfigClockSource+0x120>
 8002730:	2b40      	cmp	r3, #64	; 0x40
 8002732:	d80b      	bhi.n	800274c <HAL_TIM_ConfigClockSource+0x6c>
 8002734:	2b10      	cmp	r3, #16
 8002736:	d073      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0x140>
 8002738:	2b10      	cmp	r3, #16
 800273a:	d802      	bhi.n	8002742 <HAL_TIM_ConfigClockSource+0x62>
 800273c:	2b00      	cmp	r3, #0
 800273e:	d06f      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002740:	e078      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002742:	2b20      	cmp	r3, #32
 8002744:	d06c      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0x140>
 8002746:	2b30      	cmp	r3, #48	; 0x30
 8002748:	d06a      	beq.n	8002820 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800274a:	e073      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800274c:	2b70      	cmp	r3, #112	; 0x70
 800274e:	d00d      	beq.n	800276c <HAL_TIM_ConfigClockSource+0x8c>
 8002750:	2b70      	cmp	r3, #112	; 0x70
 8002752:	d804      	bhi.n	800275e <HAL_TIM_ConfigClockSource+0x7e>
 8002754:	2b50      	cmp	r3, #80	; 0x50
 8002756:	d033      	beq.n	80027c0 <HAL_TIM_ConfigClockSource+0xe0>
 8002758:	2b60      	cmp	r3, #96	; 0x60
 800275a:	d041      	beq.n	80027e0 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800275c:	e06a      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800275e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002762:	d066      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x152>
 8002764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002768:	d017      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800276a:	e063      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685a      	ldr	r2, [r3, #4]
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	f000 fb64 	bl	8002e48 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800278e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	609a      	str	r2, [r3, #8]
      break;
 8002798:	e04c      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6899      	ldr	r1, [r3, #8]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	f000 fb4d 	bl	8002e48 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027bc:	609a      	str	r2, [r3, #8]
      break;
 80027be:	e039      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f000 fac1 	bl	8002d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2150      	movs	r1, #80	; 0x50
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fb1a 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 80027de:	e029      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	6859      	ldr	r1, [r3, #4]
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	461a      	mov	r2, r3
 80027ee:	f000 fae0 	bl	8002db2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2160      	movs	r1, #96	; 0x60
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 fb0a 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 80027fe:	e019      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6818      	ldr	r0, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	461a      	mov	r2, r3
 800280e:	f000 faa1 	bl	8002d54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2140      	movs	r1, #64	; 0x40
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fafa 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 800281e:	e009      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4619      	mov	r1, r3
 800282a:	4610      	mov	r0, r2
 800282c:	f000 faf1 	bl	8002e12 <TIM_ITRx_SetConfig>
      break;
 8002830:	e000      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002832:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800286a:	bf00      	nop
 800286c:	370c      	adds	r7, #12
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr

08002876 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr

0800289e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800289e:	b480      	push	{r7}
 80028a0:	b083      	sub	sp, #12
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028a6:	bf00      	nop
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	4a40      	ldr	r2, [pc, #256]	; (80029c8 <TIM_Base_SetConfig+0x114>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d013      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d2:	d00f      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3d      	ldr	r2, [pc, #244]	; (80029cc <TIM_Base_SetConfig+0x118>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00b      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a3c      	ldr	r2, [pc, #240]	; (80029d0 <TIM_Base_SetConfig+0x11c>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3b      	ldr	r2, [pc, #236]	; (80029d4 <TIM_Base_SetConfig+0x120>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a3a      	ldr	r2, [pc, #232]	; (80029d8 <TIM_Base_SetConfig+0x124>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d108      	bne.n	8002906 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a2f      	ldr	r2, [pc, #188]	; (80029c8 <TIM_Base_SetConfig+0x114>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d02b      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d027      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a2c      	ldr	r2, [pc, #176]	; (80029cc <TIM_Base_SetConfig+0x118>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d023      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a2b      	ldr	r2, [pc, #172]	; (80029d0 <TIM_Base_SetConfig+0x11c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d01f      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <TIM_Base_SetConfig+0x120>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d01b      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a29      	ldr	r2, [pc, #164]	; (80029d8 <TIM_Base_SetConfig+0x124>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d017      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a28      	ldr	r2, [pc, #160]	; (80029dc <TIM_Base_SetConfig+0x128>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a27      	ldr	r2, [pc, #156]	; (80029e0 <TIM_Base_SetConfig+0x12c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00f      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a26      	ldr	r2, [pc, #152]	; (80029e4 <TIM_Base_SetConfig+0x130>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d00b      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a25      	ldr	r2, [pc, #148]	; (80029e8 <TIM_Base_SetConfig+0x134>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d007      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a24      	ldr	r2, [pc, #144]	; (80029ec <TIM_Base_SetConfig+0x138>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d003      	beq.n	8002966 <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <TIM_Base_SetConfig+0x13c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d108      	bne.n	8002978 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <TIM_Base_SetConfig+0x114>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d003      	beq.n	80029ac <TIM_Base_SetConfig+0xf8>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a0c      	ldr	r2, [pc, #48]	; (80029d8 <TIM_Base_SetConfig+0x124>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d103      	bne.n	80029b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	615a      	str	r2, [r3, #20]
}
 80029ba:	bf00      	nop
 80029bc:	3714      	adds	r7, #20
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	40010000 	.word	0x40010000
 80029cc:	40000400 	.word	0x40000400
 80029d0:	40000800 	.word	0x40000800
 80029d4:	40000c00 	.word	0x40000c00
 80029d8:	40010400 	.word	0x40010400
 80029dc:	40014000 	.word	0x40014000
 80029e0:	40014400 	.word	0x40014400
 80029e4:	40014800 	.word	0x40014800
 80029e8:	40001800 	.word	0x40001800
 80029ec:	40001c00 	.word	0x40001c00
 80029f0:	40002000 	.word	0x40002000

080029f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b087      	sub	sp, #28
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	f023 0201 	bic.w	r2, r3, #1
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f023 0303 	bic.w	r3, r3, #3
 8002a2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	f023 0302 	bic.w	r3, r3, #2
 8002a3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <TIM_OC1_SetConfig+0xd8>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d003      	beq.n	8002a58 <TIM_OC1_SetConfig+0x64>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <TIM_OC1_SetConfig+0xdc>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d10c      	bne.n	8002a72 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 0308 	bic.w	r3, r3, #8
 8002a5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 0304 	bic.w	r3, r3, #4
 8002a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a15      	ldr	r2, [pc, #84]	; (8002acc <TIM_OC1_SetConfig+0xd8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d003      	beq.n	8002a82 <TIM_OC1_SetConfig+0x8e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a14      	ldr	r2, [pc, #80]	; (8002ad0 <TIM_OC1_SetConfig+0xdc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d111      	bne.n	8002aa6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695b      	ldr	r3, [r3, #20]
 8002a96:	693a      	ldr	r2, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68fa      	ldr	r2, [r7, #12]
 8002ab0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	621a      	str	r2, [r3, #32]
}
 8002ac0:	bf00      	nop
 8002ac2:	371c      	adds	r7, #28
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40010000 	.word	0x40010000
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	f023 0210 	bic.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	699b      	ldr	r3, [r3, #24]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	021b      	lsls	r3, r3, #8
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	f023 0320 	bic.w	r3, r3, #32
 8002b1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	011b      	lsls	r3, r3, #4
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <TIM_OC2_SetConfig+0xe4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d003      	beq.n	8002b3c <TIM_OC2_SetConfig+0x68>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <TIM_OC2_SetConfig+0xe8>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d10d      	bne.n	8002b58 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a17      	ldr	r2, [pc, #92]	; (8002bb8 <TIM_OC2_SetConfig+0xe4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_OC2_SetConfig+0x94>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a16      	ldr	r2, [pc, #88]	; (8002bbc <TIM_OC2_SetConfig+0xe8>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d113      	bne.n	8002b90 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	699b      	ldr	r3, [r3, #24]
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	621a      	str	r2, [r3, #32]
}
 8002baa:	bf00      	nop
 8002bac:	371c      	adds	r7, #28
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	40010000 	.word	0x40010000
 8002bbc:	40010400 	.word	0x40010400

08002bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b087      	sub	sp, #28
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a1b      	ldr	r3, [r3, #32]
 8002bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0303 	bic.w	r3, r3, #3
 8002bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	021b      	lsls	r3, r3, #8
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a21      	ldr	r2, [pc, #132]	; (8002ca0 <TIM_OC3_SetConfig+0xe0>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d003      	beq.n	8002c26 <TIM_OC3_SetConfig+0x66>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <TIM_OC3_SetConfig+0xe4>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d10d      	bne.n	8002c42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	697a      	ldr	r2, [r7, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a16      	ldr	r2, [pc, #88]	; (8002ca0 <TIM_OC3_SetConfig+0xe0>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d003      	beq.n	8002c52 <TIM_OC3_SetConfig+0x92>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <TIM_OC3_SetConfig+0xe4>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d113      	bne.n	8002c7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69db      	ldr	r3, [r3, #28]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	031b      	lsls	r3, r3, #12
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a12      	ldr	r2, [pc, #72]	; (8002d4c <TIM_OC4_SetConfig+0xa4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_OC4_SetConfig+0x68>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a11      	ldr	r2, [pc, #68]	; (8002d50 <TIM_OC4_SetConfig+0xa8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d109      	bne.n	8002d24 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	019b      	lsls	r3, r3, #6
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	697a      	ldr	r2, [r7, #20]
 8002d28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	68fa      	ldr	r2, [r7, #12]
 8002d2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	621a      	str	r2, [r3, #32]
}
 8002d3e:	bf00      	nop
 8002d40:	371c      	adds	r7, #28
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40010400 	.word	0x40010400

08002d54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b087      	sub	sp, #28
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f023 0201 	bic.w	r2, r3, #1
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	f023 030a 	bic.w	r3, r3, #10
 8002d90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	621a      	str	r2, [r3, #32]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b087      	sub	sp, #28
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0210 	bic.w	r2, r3, #16
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	699b      	ldr	r3, [r3, #24]
 8002dce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ddc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	031b      	lsls	r3, r3, #12
 8002de2:	697a      	ldr	r2, [r7, #20]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	693a      	ldr	r2, [r7, #16]
 8002e04:	621a      	str	r2, [r3, #32]
}
 8002e06:	bf00      	nop
 8002e08:	371c      	adds	r7, #28
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr

08002e12 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e12:	b480      	push	{r7}
 8002e14:	b085      	sub	sp, #20
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
 8002e1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f043 0307 	orr.w	r3, r3, #7
 8002e34:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	609a      	str	r2, [r3, #8]
}
 8002e3c:	bf00      	nop
 8002e3e:	3714      	adds	r7, #20
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b087      	sub	sp, #28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e62:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	021a      	lsls	r2, r3, #8
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	431a      	orrs	r2, r3
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	609a      	str	r2, [r3, #8]
}
 8002e7c:	bf00      	nop
 8002e7e:	371c      	adds	r7, #28
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b087      	sub	sp, #28
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	60f8      	str	r0, [r7, #12]
 8002e90:	60b9      	str	r1, [r7, #8]
 8002e92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	f003 031f 	and.w	r3, r3, #31
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1a      	ldr	r2, [r3, #32]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a1a      	ldr	r2, [r3, #32]
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 031f 	and.w	r3, r3, #31
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec0:	431a      	orrs	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	621a      	str	r2, [r3, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002eda:	bf00      	nop
 8002edc:	370c      	adds	r7, #12
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002efa:	b084      	sub	sp, #16
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	f107 001c 	add.w	r0, r7, #28
 8002f08:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d122      	bne.n	8002f58 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002f3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d105      	bne.n	8002f4c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f000 fa5d 	bl	800340c <USB_CoreReset>
 8002f52:	4603      	mov	r3, r0
 8002f54:	73fb      	strb	r3, [r7, #15]
 8002f56:	e01a      	b.n	8002f8e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 fa51 	bl	800340c <USB_CoreReset>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002f6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	639a      	str	r2, [r3, #56]	; 0x38
 8002f80:	e005      	b.n	8002f8e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d10b      	bne.n	8002fac <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f043 0206 	orr.w	r2, r3, #6
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f043 0220 	orr.w	r2, r3, #32
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fb8:	b004      	add	sp, #16
 8002fba:	4770      	bx	lr

08002fbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 0201 	bic.w	r2, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b082      	sub	sp, #8
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	68db      	ldr	r3, [r3, #12]
 8002fee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002ff6:	78fb      	ldrb	r3, [r7, #3]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d106      	bne.n	800300a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	60da      	str	r2, [r3, #12]
 8003008:	e00b      	b.n	8003022 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800300a:	78fb      	ldrb	r3, [r7, #3]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d106      	bne.n	800301e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	60da      	str	r2, [r3, #12]
 800301c:	e001      	b.n	8003022 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e003      	b.n	800302a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003022:	2032      	movs	r0, #50	; 0x32
 8003024:	f7fd fac2 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003034:	b084      	sub	sp, #16
 8003036:	b580      	push	{r7, lr}
 8003038:	b086      	sub	sp, #24
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
 800303e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003046:	2300      	movs	r3, #0
 8003048:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800304e:	2300      	movs	r3, #0
 8003050:	613b      	str	r3, [r7, #16]
 8003052:	e009      	b.n	8003068 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003054:	687a      	ldr	r2, [r7, #4]
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3340      	adds	r3, #64	; 0x40
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	2200      	movs	r2, #0
 8003060:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	3301      	adds	r3, #1
 8003066:	613b      	str	r3, [r7, #16]
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	2b0e      	cmp	r3, #14
 800306c:	d9f2      	bls.n	8003054 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800306e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003070:	2b00      	cmp	r3, #0
 8003072:	d112      	bne.n	800309a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003084:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	639a      	str	r2, [r3, #56]	; 0x38
 8003098:	e00b      	b.n	80030b2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030aa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80030b8:	461a      	mov	r2, r3
 80030ba:	2300      	movs	r3, #0
 80030bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030c4:	4619      	mov	r1, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030cc:	461a      	mov	r2, r3
 80030ce:	680b      	ldr	r3, [r1, #0]
 80030d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80030d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d10c      	bne.n	80030f2 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80030d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d104      	bne.n	80030e8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80030de:	2100      	movs	r1, #0
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f961 	bl	80033a8 <USB_SetDevSpeed>
 80030e6:	e008      	b.n	80030fa <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80030e8:	2101      	movs	r1, #1
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f000 f95c 	bl	80033a8 <USB_SetDevSpeed>
 80030f0:	e003      	b.n	80030fa <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80030f2:	2103      	movs	r1, #3
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f957 	bl	80033a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80030fa:	2110      	movs	r1, #16
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 f90b 	bl	8003318 <USB_FlushTxFifo>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f929 	bl	8003364 <USB_FlushRxFifo>
 8003112:	4603      	mov	r3, r0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d001      	beq.n	800311c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003122:	461a      	mov	r2, r3
 8003124:	2300      	movs	r3, #0
 8003126:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800312e:	461a      	mov	r2, r3
 8003130:	2300      	movs	r3, #0
 8003132:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800313a:	461a      	mov	r2, r3
 800313c:	2300      	movs	r3, #0
 800313e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	e043      	b.n	80031ce <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	015a      	lsls	r2, r3, #5
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800315c:	d118      	bne.n	8003190 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10a      	bne.n	800317a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	015a      	lsls	r2, r3, #5
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	4413      	add	r3, r2
 800316c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003170:	461a      	mov	r2, r3
 8003172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e013      	b.n	80031a2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003186:	461a      	mov	r2, r3
 8003188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	e008      	b.n	80031a2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	015a      	lsls	r2, r3, #5
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800319c:	461a      	mov	r2, r3
 800319e:	2300      	movs	r3, #0
 80031a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	015a      	lsls	r2, r3, #5
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	4413      	add	r3, r2
 80031aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ae:	461a      	mov	r2, r3
 80031b0:	2300      	movs	r3, #0
 80031b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	015a      	lsls	r2, r3, #5
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4413      	add	r3, r2
 80031bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c0:	461a      	mov	r2, r3
 80031c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	3301      	adds	r3, #1
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d3b7      	bcc.n	8003146 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031d6:	2300      	movs	r3, #0
 80031d8:	613b      	str	r3, [r7, #16]
 80031da:	e043      	b.n	8003264 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80031ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031f2:	d118      	bne.n	8003226 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	015a      	lsls	r2, r3, #5
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4413      	add	r3, r2
 8003202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003206:	461a      	mov	r2, r3
 8003208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800320c:	6013      	str	r3, [r2, #0]
 800320e:	e013      	b.n	8003238 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800321c:	461a      	mov	r2, r3
 800321e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003222:	6013      	str	r3, [r2, #0]
 8003224:	e008      	b.n	8003238 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	015a      	lsls	r2, r3, #5
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	4413      	add	r3, r2
 800322e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003232:	461a      	mov	r2, r3
 8003234:	2300      	movs	r3, #0
 8003236:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	461a      	mov	r2, r3
 8003246:	2300      	movs	r3, #0
 8003248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	015a      	lsls	r2, r3, #5
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003256:	461a      	mov	r2, r3
 8003258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800325c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	3301      	adds	r3, #1
 8003262:	613b      	str	r3, [r7, #16]
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	429a      	cmp	r2, r3
 800326a:	d3b7      	bcc.n	80031dc <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800327a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800327e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8003280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003282:	2b01      	cmp	r3, #1
 8003284:	d111      	bne.n	80032aa <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800328c:	461a      	mov	r2, r3
 800328e:	4b20      	ldr	r3, [pc, #128]	; (8003310 <USB_DevInit+0x2dc>)
 8003290:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a4:	f043 0303 	orr.w	r3, r3, #3
 80032a8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80032b6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80032b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d105      	bne.n	80032ca <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	f043 0210 	orr.w	r2, r3, #16
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	4b11      	ldr	r3, [pc, #68]	; (8003314 <USB_DevInit+0x2e0>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80032d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	f043 0208 	orr.w	r2, r3, #8
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80032e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d107      	bne.n	80032fe <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80032f6:	f043 0304 	orr.w	r3, r3, #4
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80032fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3718      	adds	r7, #24
 8003304:	46bd      	mov	sp, r7
 8003306:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800330a:	b004      	add	sp, #16
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	00800100 	.word	0x00800100
 8003314:	803c3800 	.word	0x803c3800

08003318 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003318:	b480      	push	{r7}
 800331a:	b085      	sub	sp, #20
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003322:	2300      	movs	r3, #0
 8003324:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	019b      	lsls	r3, r3, #6
 800332a:	f043 0220 	orr.w	r2, r3, #32
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	3301      	adds	r3, #1
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a09      	ldr	r2, [pc, #36]	; (8003360 <USB_FlushTxFifo+0x48>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d901      	bls.n	8003344 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e006      	b.n	8003352 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f003 0320 	and.w	r3, r3, #32
 800334c:	2b20      	cmp	r3, #32
 800334e:	d0f0      	beq.n	8003332 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	3714      	adds	r7, #20
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	00030d40 	.word	0x00030d40

08003364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003364:	b480      	push	{r7}
 8003366:	b085      	sub	sp, #20
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2210      	movs	r2, #16
 8003374:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	3301      	adds	r3, #1
 800337a:	60fb      	str	r3, [r7, #12]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <USB_FlushRxFifo+0x40>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d901      	bls.n	8003388 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e006      	b.n	8003396 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	f003 0310 	and.w	r3, r3, #16
 8003390:	2b10      	cmp	r3, #16
 8003392:	d0f0      	beq.n	8003376 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003394:	2300      	movs	r3, #0
}
 8003396:	4618      	mov	r0, r3
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	00030d40 	.word	0x00030d40

080033a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	68f9      	ldr	r1, [r7, #12]
 80033c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033c8:	4313      	orrs	r3, r2
 80033ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3714      	adds	r7, #20
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr

080033da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b084      	sub	sp, #16
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f4:	f043 0302 	orr.w	r3, r3, #2
 80033f8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80033fa:	2003      	movs	r0, #3
 80033fc:	f7fd f8d6 	bl	80005ac <HAL_Delay>

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
	...

0800340c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800340c:	b480      	push	{r7}
 800340e:	b085      	sub	sp, #20
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3301      	adds	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4a13      	ldr	r2, [pc, #76]	; (8003470 <USB_CoreReset+0x64>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d901      	bls.n	800342a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e01b      	b.n	8003462 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	2b00      	cmp	r3, #0
 8003430:	daf2      	bge.n	8003418 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	f043 0201 	orr.w	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	3301      	adds	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4a09      	ldr	r2, [pc, #36]	; (8003470 <USB_CoreReset+0x64>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d901      	bls.n	8003454 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e006      	b.n	8003462 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	691b      	ldr	r3, [r3, #16]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b01      	cmp	r3, #1
 800345e:	d0f0      	beq.n	8003442 <USB_CoreReset+0x36>

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr
 800346e:	bf00      	nop
 8003470:	00030d40 	.word	0x00030d40

08003474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003478:	f7fd f826 	bl	80004c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800347c:	f000 f832 	bl	80034e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003480:	f000 fab0 	bl	80039e4 <MX_GPIO_Init>
  MX_TIM9_Init();
 8003484:	f000 fa04 	bl	8003890 <MX_TIM9_Init>
  MX_SPI2_Init();
 8003488:	f000 f9cc 	bl	8003824 <MX_SPI2_Init>
  MX_ADC1_Init();
 800348c:	f000 f896 	bl	80035bc <MX_ADC1_Init>
  MX_ADC2_Init();
 8003490:	f000 f8e6 	bl	8003660 <MX_ADC2_Init>
  MX_CAN1_Init();
 8003494:	f000 f936 	bl	8003704 <MX_CAN1_Init>
  MX_I2C1_Init();
 8003498:	f000 f968 	bl	800376c <MX_I2C1_Init>
  MX_I2C2_Init();
 800349c:	f000 f994 	bl	80037c8 <MX_I2C2_Init>
  MX_USB_OTG_FS_PCD_Init();
 80034a0:	f000 fa72 	bl	8003988 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80034a4:	2100      	movs	r1, #0
 80034a6:	480b      	ldr	r0, [pc, #44]	; (80034d4 <main+0x60>)
 80034a8:	f7fe feae 	bl	8002208 <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 80034ac:	2104      	movs	r1, #4
 80034ae:	4809      	ldr	r0, [pc, #36]	; (80034d4 <main+0x60>)
 80034b0:	f7fe fe36 	bl	8002120 <HAL_TIM_OC_Start>
  while (1)
  {

	  //HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);

	  HAL_GPIO_TogglePin(GENERATOR_GPIO_Port, GENERATOR_Pin);
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	4808      	ldr	r0, [pc, #32]	; (80034d8 <main+0x64>)
 80034b8:	f7fd febd 	bl	8001236 <HAL_GPIO_TogglePin>

	  GPIOE->BSRR = GPIO_PIN_4;
 80034bc:	4b07      	ldr	r3, [pc, #28]	; (80034dc <main+0x68>)
 80034be:	2210      	movs	r2, #16
 80034c0:	619a      	str	r2, [r3, #24]

	  TIM9->CCR1 = 100;
 80034c2:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <main+0x6c>)
 80034c4:	2264      	movs	r2, #100	; 0x64
 80034c6:	635a      	str	r2, [r3, #52]	; 0x34

	  HAL_Delay(600);
 80034c8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80034cc:	f7fd f86e 	bl	80005ac <HAL_Delay>
	  HAL_GPIO_TogglePin(GENERATOR_GPIO_Port, GENERATOR_Pin);
 80034d0:	e7f0      	b.n	80034b4 <main+0x40>
 80034d2:	bf00      	nop
 80034d4:	200005c4 	.word	0x200005c4
 80034d8:	40020800 	.word	0x40020800
 80034dc:	40021000 	.word	0x40021000
 80034e0:	40014000 	.word	0x40014000

080034e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b094      	sub	sp, #80	; 0x50
 80034e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ea:	f107 0320 	add.w	r3, r7, #32
 80034ee:	2230      	movs	r2, #48	; 0x30
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f000 fe8c 	bl	8004210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034f8:	f107 030c 	add.w	r3, r7, #12
 80034fc:	2200      	movs	r2, #0
 80034fe:	601a      	str	r2, [r3, #0]
 8003500:	605a      	str	r2, [r3, #4]
 8003502:	609a      	str	r2, [r3, #8]
 8003504:	60da      	str	r2, [r3, #12]
 8003506:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003508:	2300      	movs	r3, #0
 800350a:	60bb      	str	r3, [r7, #8]
 800350c:	4b29      	ldr	r3, [pc, #164]	; (80035b4 <SystemClock_Config+0xd0>)
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	4a28      	ldr	r2, [pc, #160]	; (80035b4 <SystemClock_Config+0xd0>)
 8003512:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003516:	6413      	str	r3, [r2, #64]	; 0x40
 8003518:	4b26      	ldr	r3, [pc, #152]	; (80035b4 <SystemClock_Config+0xd0>)
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003520:	60bb      	str	r3, [r7, #8]
 8003522:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003524:	2300      	movs	r3, #0
 8003526:	607b      	str	r3, [r7, #4]
 8003528:	4b23      	ldr	r3, [pc, #140]	; (80035b8 <SystemClock_Config+0xd4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a22      	ldr	r2, [pc, #136]	; (80035b8 <SystemClock_Config+0xd4>)
 800352e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <SystemClock_Config+0xd4>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800353c:	607b      	str	r3, [r7, #4]
 800353e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8003540:	2303      	movs	r3, #3
 8003542:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003544:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003548:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800354a:	2301      	movs	r3, #1
 800354c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800354e:	2310      	movs	r3, #16
 8003550:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003552:	2302      	movs	r3, #2
 8003554:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003556:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800355a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800355c:	230f      	movs	r3, #15
 800355e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8003560:	2390      	movs	r3, #144	; 0x90
 8003562:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003564:	2302      	movs	r3, #2
 8003566:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8003568:	2305      	movs	r3, #5
 800356a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800356c:	f107 0320 	add.w	r3, r7, #32
 8003570:	4618      	mov	r0, r3
 8003572:	f7fe f8e9 	bl	8001748 <HAL_RCC_OscConfig>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800357c:	f000 fb0e 	bl	8003b9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003580:	230f      	movs	r3, #15
 8003582:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003584:	2300      	movs	r3, #0
 8003586:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800358c:	2300      	movs	r3, #0
 800358e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003590:	2300      	movs	r3, #0
 8003592:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003594:	f107 030c 	add.w	r3, r7, #12
 8003598:	2100      	movs	r1, #0
 800359a:	4618      	mov	r0, r3
 800359c:	f7fe fb44 	bl	8001c28 <HAL_RCC_ClockConfig>
 80035a0:	4603      	mov	r3, r0
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80035a6:	f000 faf9 	bl	8003b9c <Error_Handler>
  }
}
 80035aa:	bf00      	nop
 80035ac:	3750      	adds	r7, #80	; 0x50
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000

080035bc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80035c2:	463b      	mov	r3, r7
 80035c4:	2200      	movs	r2, #0
 80035c6:	601a      	str	r2, [r3, #0]
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	609a      	str	r2, [r3, #8]
 80035cc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <MX_ADC1_Init+0x98>)
 80035d0:	4a21      	ldr	r2, [pc, #132]	; (8003658 <MX_ADC1_Init+0x9c>)
 80035d2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80035d4:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <MX_ADC1_Init+0x98>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <MX_ADC1_Init+0x98>)
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <MX_ADC1_Init+0x98>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <MX_ADC1_Init+0x98>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <MX_ADC1_Init+0x98>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80035f4:	4b17      	ldr	r3, [pc, #92]	; (8003654 <MX_ADC1_Init+0x98>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80035fa:	4b16      	ldr	r3, [pc, #88]	; (8003654 <MX_ADC1_Init+0x98>)
 80035fc:	4a17      	ldr	r2, [pc, #92]	; (800365c <MX_ADC1_Init+0xa0>)
 80035fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003600:	4b14      	ldr	r3, [pc, #80]	; (8003654 <MX_ADC1_Init+0x98>)
 8003602:	2200      	movs	r2, #0
 8003604:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003606:	4b13      	ldr	r3, [pc, #76]	; (8003654 <MX_ADC1_Init+0x98>)
 8003608:	2201      	movs	r2, #1
 800360a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800360c:	4b11      	ldr	r3, [pc, #68]	; (8003654 <MX_ADC1_Init+0x98>)
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003614:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <MX_ADC1_Init+0x98>)
 8003616:	2201      	movs	r2, #1
 8003618:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800361a:	480e      	ldr	r0, [pc, #56]	; (8003654 <MX_ADC1_Init+0x98>)
 800361c:	f7fc ffe8 	bl	80005f0 <HAL_ADC_Init>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003626:	f000 fab9 	bl	8003b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800362a:	2302      	movs	r3, #2
 800362c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800362e:	2301      	movs	r3, #1
 8003630:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003636:	463b      	mov	r3, r7
 8003638:	4619      	mov	r1, r3
 800363a:	4806      	ldr	r0, [pc, #24]	; (8003654 <MX_ADC1_Init+0x98>)
 800363c:	f7fd f81c 	bl	8000678 <HAL_ADC_ConfigChannel>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d001      	beq.n	800364a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8003646:	f000 faa9 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800364a:	bf00      	nop
 800364c:	3710      	adds	r7, #16
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}
 8003652:	bf00      	nop
 8003654:	2000057c 	.word	0x2000057c
 8003658:	40012000 	.word	0x40012000
 800365c:	0f000001 	.word	0x0f000001

08003660 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003666:	463b      	mov	r3, r7
 8003668:	2200      	movs	r2, #0
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	605a      	str	r2, [r3, #4]
 800366e:	609a      	str	r2, [r3, #8]
 8003670:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8003672:	4b21      	ldr	r3, [pc, #132]	; (80036f8 <MX_ADC2_Init+0x98>)
 8003674:	4a21      	ldr	r2, [pc, #132]	; (80036fc <MX_ADC2_Init+0x9c>)
 8003676:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8003678:	4b1f      	ldr	r3, [pc, #124]	; (80036f8 <MX_ADC2_Init+0x98>)
 800367a:	2200      	movs	r2, #0
 800367c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800367e:	4b1e      	ldr	r3, [pc, #120]	; (80036f8 <MX_ADC2_Init+0x98>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <MX_ADC2_Init+0x98>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800368a:	4b1b      	ldr	r3, [pc, #108]	; (80036f8 <MX_ADC2_Init+0x98>)
 800368c:	2200      	movs	r2, #0
 800368e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003690:	4b19      	ldr	r3, [pc, #100]	; (80036f8 <MX_ADC2_Init+0x98>)
 8003692:	2200      	movs	r2, #0
 8003694:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003698:	4b17      	ldr	r3, [pc, #92]	; (80036f8 <MX_ADC2_Init+0x98>)
 800369a:	2200      	movs	r2, #0
 800369c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <MX_ADC2_Init+0x98>)
 80036a0:	4a17      	ldr	r2, [pc, #92]	; (8003700 <MX_ADC2_Init+0xa0>)
 80036a2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036a4:	4b14      	ldr	r3, [pc, #80]	; (80036f8 <MX_ADC2_Init+0x98>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80036aa:	4b13      	ldr	r3, [pc, #76]	; (80036f8 <MX_ADC2_Init+0x98>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80036b0:	4b11      	ldr	r3, [pc, #68]	; (80036f8 <MX_ADC2_Init+0x98>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036b8:	4b0f      	ldr	r3, [pc, #60]	; (80036f8 <MX_ADC2_Init+0x98>)
 80036ba:	2201      	movs	r2, #1
 80036bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80036be:	480e      	ldr	r0, [pc, #56]	; (80036f8 <MX_ADC2_Init+0x98>)
 80036c0:	f7fc ff96 	bl	80005f0 <HAL_ADC_Init>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80036ca:	f000 fa67 	bl	8003b9c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80036ce:	230e      	movs	r3, #14
 80036d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80036d2:	2301      	movs	r3, #1
 80036d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80036da:	463b      	mov	r3, r7
 80036dc:	4619      	mov	r1, r3
 80036de:	4806      	ldr	r0, [pc, #24]	; (80036f8 <MX_ADC2_Init+0x98>)
 80036e0:	f7fc ffca 	bl	8000678 <HAL_ADC_ConfigChannel>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d001      	beq.n	80036ee <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80036ea:	f000 fa57 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000084 	.word	0x20000084
 80036fc:	40012100 	.word	0x40012100
 8003700:	0f000001 	.word	0x0f000001

08003704 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003708:	4b16      	ldr	r3, [pc, #88]	; (8003764 <MX_CAN1_Init+0x60>)
 800370a:	4a17      	ldr	r2, [pc, #92]	; (8003768 <MX_CAN1_Init+0x64>)
 800370c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 800370e:	4b15      	ldr	r3, [pc, #84]	; (8003764 <MX_CAN1_Init+0x60>)
 8003710:	2210      	movs	r2, #16
 8003712:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003714:	4b13      	ldr	r3, [pc, #76]	; (8003764 <MX_CAN1_Init+0x60>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800371a:	4b12      	ldr	r3, [pc, #72]	; (8003764 <MX_CAN1_Init+0x60>)
 800371c:	2200      	movs	r2, #0
 800371e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8003720:	4b10      	ldr	r3, [pc, #64]	; (8003764 <MX_CAN1_Init+0x60>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003726:	4b0f      	ldr	r3, [pc, #60]	; (8003764 <MX_CAN1_Init+0x60>)
 8003728:	2200      	movs	r2, #0
 800372a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800372c:	4b0d      	ldr	r3, [pc, #52]	; (8003764 <MX_CAN1_Init+0x60>)
 800372e:	2200      	movs	r2, #0
 8003730:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003732:	4b0c      	ldr	r3, [pc, #48]	; (8003764 <MX_CAN1_Init+0x60>)
 8003734:	2200      	movs	r2, #0
 8003736:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <MX_CAN1_Init+0x60>)
 800373a:	2200      	movs	r2, #0
 800373c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800373e:	4b09      	ldr	r3, [pc, #36]	; (8003764 <MX_CAN1_Init+0x60>)
 8003740:	2200      	movs	r2, #0
 8003742:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003744:	4b07      	ldr	r3, [pc, #28]	; (8003764 <MX_CAN1_Init+0x60>)
 8003746:	2200      	movs	r2, #0
 8003748:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800374a:	4b06      	ldr	r3, [pc, #24]	; (8003764 <MX_CAN1_Init+0x60>)
 800374c:	2200      	movs	r2, #0
 800374e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003750:	4804      	ldr	r0, [pc, #16]	; (8003764 <MX_CAN1_Init+0x60>)
 8003752:	f7fd f9af 	bl	8000ab4 <HAL_CAN_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 800375c:	f000 fa1e 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000604 	.word	0x20000604
 8003768:	40006400 	.word	0x40006400

0800376c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003770:	4b12      	ldr	r3, [pc, #72]	; (80037bc <MX_I2C1_Init+0x50>)
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <MX_I2C1_Init+0x54>)
 8003774:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003776:	4b11      	ldr	r3, [pc, #68]	; (80037bc <MX_I2C1_Init+0x50>)
 8003778:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <MX_I2C1_Init+0x58>)
 800377a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800377c:	4b0f      	ldr	r3, [pc, #60]	; (80037bc <MX_I2C1_Init+0x50>)
 800377e:	2200      	movs	r2, #0
 8003780:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003782:	4b0e      	ldr	r3, [pc, #56]	; (80037bc <MX_I2C1_Init+0x50>)
 8003784:	2200      	movs	r2, #0
 8003786:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003788:	4b0c      	ldr	r3, [pc, #48]	; (80037bc <MX_I2C1_Init+0x50>)
 800378a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800378e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003790:	4b0a      	ldr	r3, [pc, #40]	; (80037bc <MX_I2C1_Init+0x50>)
 8003792:	2200      	movs	r2, #0
 8003794:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003796:	4b09      	ldr	r3, [pc, #36]	; (80037bc <MX_I2C1_Init+0x50>)
 8003798:	2200      	movs	r2, #0
 800379a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800379c:	4b07      	ldr	r3, [pc, #28]	; (80037bc <MX_I2C1_Init+0x50>)
 800379e:	2200      	movs	r2, #0
 80037a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037a2:	4b06      	ldr	r3, [pc, #24]	; (80037bc <MX_I2C1_Init+0x50>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80037a8:	4804      	ldr	r0, [pc, #16]	; (80037bc <MX_I2C1_Init+0x50>)
 80037aa:	f7fd fd77 	bl	800129c <HAL_I2C_Init>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80037b4:	f000 f9f2 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80037b8:	bf00      	nop
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	200000cc 	.word	0x200000cc
 80037c0:	40005400 	.word	0x40005400
 80037c4:	000186a0 	.word	0x000186a0

080037c8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80037cc:	4b12      	ldr	r3, [pc, #72]	; (8003818 <MX_I2C2_Init+0x50>)
 80037ce:	4a13      	ldr	r2, [pc, #76]	; (800381c <MX_I2C2_Init+0x54>)
 80037d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80037d2:	4b11      	ldr	r3, [pc, #68]	; (8003818 <MX_I2C2_Init+0x50>)
 80037d4:	4a12      	ldr	r2, [pc, #72]	; (8003820 <MX_I2C2_Init+0x58>)
 80037d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80037d8:	4b0f      	ldr	r3, [pc, #60]	; (8003818 <MX_I2C2_Init+0x50>)
 80037da:	2200      	movs	r2, #0
 80037dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <MX_I2C2_Init+0x50>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <MX_I2C2_Init+0x50>)
 80037e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80037ea:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80037ec:	4b0a      	ldr	r3, [pc, #40]	; (8003818 <MX_I2C2_Init+0x50>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80037f2:	4b09      	ldr	r3, [pc, #36]	; (8003818 <MX_I2C2_Init+0x50>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037f8:	4b07      	ldr	r3, [pc, #28]	; (8003818 <MX_I2C2_Init+0x50>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037fe:	4b06      	ldr	r3, [pc, #24]	; (8003818 <MX_I2C2_Init+0x50>)
 8003800:	2200      	movs	r2, #0
 8003802:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003804:	4804      	ldr	r0, [pc, #16]	; (8003818 <MX_I2C2_Init+0x50>)
 8003806:	f7fd fd49 	bl	800129c <HAL_I2C_Init>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d001      	beq.n	8003814 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8003810:	f000 f9c4 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003814:	bf00      	nop
 8003816:	bd80      	pop	{r7, pc}
 8003818:	20000528 	.word	0x20000528
 800381c:	40005800 	.word	0x40005800
 8003820:	000186a0 	.word	0x000186a0

08003824 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003828:	4b17      	ldr	r3, [pc, #92]	; (8003888 <MX_SPI2_Init+0x64>)
 800382a:	4a18      	ldr	r2, [pc, #96]	; (800388c <MX_SPI2_Init+0x68>)
 800382c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800382e:	4b16      	ldr	r3, [pc, #88]	; (8003888 <MX_SPI2_Init+0x64>)
 8003830:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003834:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003836:	4b14      	ldr	r3, [pc, #80]	; (8003888 <MX_SPI2_Init+0x64>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800383c:	4b12      	ldr	r3, [pc, #72]	; (8003888 <MX_SPI2_Init+0x64>)
 800383e:	2200      	movs	r2, #0
 8003840:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <MX_SPI2_Init+0x64>)
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003848:	4b0f      	ldr	r3, [pc, #60]	; (8003888 <MX_SPI2_Init+0x64>)
 800384a:	2200      	movs	r2, #0
 800384c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <MX_SPI2_Init+0x64>)
 8003850:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003854:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003856:	4b0c      	ldr	r3, [pc, #48]	; (8003888 <MX_SPI2_Init+0x64>)
 8003858:	2200      	movs	r2, #0
 800385a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <MX_SPI2_Init+0x64>)
 800385e:	2200      	movs	r2, #0
 8003860:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003862:	4b09      	ldr	r3, [pc, #36]	; (8003888 <MX_SPI2_Init+0x64>)
 8003864:	2200      	movs	r2, #0
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003868:	4b07      	ldr	r3, [pc, #28]	; (8003888 <MX_SPI2_Init+0x64>)
 800386a:	2200      	movs	r2, #0
 800386c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800386e:	4b06      	ldr	r3, [pc, #24]	; (8003888 <MX_SPI2_Init+0x64>)
 8003870:	220a      	movs	r2, #10
 8003872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003874:	4804      	ldr	r0, [pc, #16]	; (8003888 <MX_SPI2_Init+0x64>)
 8003876:	f7fe fb8f 	bl	8001f98 <HAL_SPI_Init>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003880:	f000 f98c 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003884:	bf00      	nop
 8003886:	bd80      	pop	{r7, pc}
 8003888:	2000002c 	.word	0x2000002c
 800388c:	40003800 	.word	0x40003800

08003890 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08c      	sub	sp, #48	; 0x30
 8003894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003896:	f107 0320 	add.w	r3, r7, #32
 800389a:	2200      	movs	r2, #0
 800389c:	601a      	str	r2, [r3, #0]
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	609a      	str	r2, [r3, #8]
 80038a2:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038a4:	1d3b      	adds	r3, r7, #4
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	60da      	str	r2, [r3, #12]
 80038b0:	611a      	str	r2, [r3, #16]
 80038b2:	615a      	str	r2, [r3, #20]
 80038b4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80038b6:	4b32      	ldr	r3, [pc, #200]	; (8003980 <MX_TIM9_Init+0xf0>)
 80038b8:	4a32      	ldr	r2, [pc, #200]	; (8003984 <MX_TIM9_Init+0xf4>)
 80038ba:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 32000;
 80038bc:	4b30      	ldr	r3, [pc, #192]	; (8003980 <MX_TIM9_Init+0xf0>)
 80038be:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 80038c2:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c4:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <MX_TIM9_Init+0xf0>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 80038ca:	4b2d      	ldr	r3, [pc, #180]	; (8003980 <MX_TIM9_Init+0xf0>)
 80038cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038d0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038d2:	4b2b      	ldr	r3, [pc, #172]	; (8003980 <MX_TIM9_Init+0xf0>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d8:	4b29      	ldr	r3, [pc, #164]	; (8003980 <MX_TIM9_Init+0xf0>)
 80038da:	2200      	movs	r2, #0
 80038dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80038de:	4828      	ldr	r0, [pc, #160]	; (8003980 <MX_TIM9_Init+0xf0>)
 80038e0:	f7fe fbbe 	bl	8002060 <HAL_TIM_Base_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 80038ea:	f000 f957 	bl	8003b9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038f2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80038f4:	f107 0320 	add.w	r3, r7, #32
 80038f8:	4619      	mov	r1, r3
 80038fa:	4821      	ldr	r0, [pc, #132]	; (8003980 <MX_TIM9_Init+0xf0>)
 80038fc:	f7fe fef0 	bl	80026e0 <HAL_TIM_ConfigClockSource>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8003906:	f000 f949 	bl	8003b9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800390a:	481d      	ldr	r0, [pc, #116]	; (8003980 <MX_TIM9_Init+0xf0>)
 800390c:	f7fe fc46 	bl	800219c <HAL_TIM_PWM_Init>
 8003910:	4603      	mov	r3, r0
 8003912:	2b00      	cmp	r3, #0
 8003914:	d001      	beq.n	800391a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8003916:	f000 f941 	bl	8003b9c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
 800391a:	4819      	ldr	r0, [pc, #100]	; (8003980 <MX_TIM9_Init+0xf0>)
 800391c:	f7fe fbcb 	bl	80020b6 <HAL_TIM_OC_Init>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM9_Init+0x9a>
  {
    Error_Handler();
 8003926:	f000 f939 	bl	8003b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800392a:	2360      	movs	r3, #96	; 0x60
 800392c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800392e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003932:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003934:	2300      	movs	r3, #0
 8003936:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800393c:	1d3b      	adds	r3, r7, #4
 800393e:	2200      	movs	r2, #0
 8003940:	4619      	mov	r1, r3
 8003942:	480f      	ldr	r0, [pc, #60]	; (8003980 <MX_TIM9_Init+0xf0>)
 8003944:	f7fe fe06 	bl	8002554 <HAL_TIM_PWM_ConfigChannel>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <MX_TIM9_Init+0xc2>
  {
    Error_Handler();
 800394e:	f000 f925 	bl	8003b9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_INACTIVE;
 8003952:	2320      	movs	r3, #32
 8003954:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 8003956:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800395a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_OC_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800395c:	1d3b      	adds	r3, r7, #4
 800395e:	2204      	movs	r2, #4
 8003960:	4619      	mov	r1, r3
 8003962:	4807      	ldr	r0, [pc, #28]	; (8003980 <MX_TIM9_Init+0xf0>)
 8003964:	f7fe fd96 	bl	8002494 <HAL_TIM_OC_ConfigChannel>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_TIM9_Init+0xe2>
  {
    Error_Handler();
 800396e:	f000 f915 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8003972:	4803      	ldr	r0, [pc, #12]	; (8003980 <MX_TIM9_Init+0xf0>)
 8003974:	f000 fb22 	bl	8003fbc <HAL_TIM_MspPostInit>

}
 8003978:	bf00      	nop
 800397a:	3730      	adds	r7, #48	; 0x30
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	200005c4 	.word	0x200005c4
 8003984:	40014000 	.word	0x40014000

08003988 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800398c:	4b14      	ldr	r3, [pc, #80]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800398e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003992:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8003994:	4b12      	ldr	r3, [pc, #72]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003996:	2204      	movs	r2, #4
 8003998:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800399a:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800399c:	2202      	movs	r2, #2
 800399e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80039a0:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80039a6:	4b0e      	ldr	r3, [pc, #56]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039a8:	2202      	movs	r2, #2
 80039aa:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80039ac:	4b0c      	ldr	r3, [pc, #48]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ae:	2200      	movs	r2, #0
 80039b0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80039b2:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80039b8:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80039be:	4b08      	ldr	r3, [pc, #32]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80039c4:	4b06      	ldr	r3, [pc, #24]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80039ca:	4805      	ldr	r0, [pc, #20]	; (80039e0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80039cc:	f7fd fd9e 	bl	800150c <HAL_PCD_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80039d6:	f000 f8e1 	bl	8003b9c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80039da:	bf00      	nop
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	20000120 	.word	0x20000120

080039e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b08c      	sub	sp, #48	; 0x30
 80039e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ea:	f107 031c 	add.w	r3, r7, #28
 80039ee:	2200      	movs	r2, #0
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	605a      	str	r2, [r3, #4]
 80039f4:	609a      	str	r2, [r3, #8]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	4b58      	ldr	r3, [pc, #352]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a02:	4a57      	ldr	r2, [pc, #348]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a04:	f043 0310 	orr.w	r3, r3, #16
 8003a08:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0a:	4b55      	ldr	r3, [pc, #340]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0e:	f003 0310 	and.w	r3, r3, #16
 8003a12:	61bb      	str	r3, [r7, #24]
 8003a14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	4b51      	ldr	r3, [pc, #324]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1e:	4a50      	ldr	r2, [pc, #320]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	6313      	str	r3, [r2, #48]	; 0x30
 8003a26:	4b4e      	ldr	r3, [pc, #312]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	f003 0304 	and.w	r3, r3, #4
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	4b4a      	ldr	r3, [pc, #296]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3a:	4a49      	ldr	r2, [pc, #292]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a40:	6313      	str	r3, [r2, #48]	; 0x30
 8003a42:	4b47      	ldr	r3, [pc, #284]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	4b43      	ldr	r3, [pc, #268]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	4a42      	ldr	r2, [pc, #264]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a5e:	4b40      	ldr	r3, [pc, #256]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60bb      	str	r3, [r7, #8]
 8003a6e:	4b3c      	ldr	r3, [pc, #240]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	4a3b      	ldr	r2, [pc, #236]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
 8003a7a:	4b39      	ldr	r3, [pc, #228]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	60bb      	str	r3, [r7, #8]
 8003a84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	4b35      	ldr	r3, [pc, #212]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	4a34      	ldr	r2, [pc, #208]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a90:	f043 0308 	orr.w	r3, r3, #8
 8003a94:	6313      	str	r3, [r2, #48]	; 0x30
 8003a96:	4b32      	ldr	r3, [pc, #200]	; (8003b60 <MX_GPIO_Init+0x17c>)
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|M0_AH_Pin|EN_GATE_Pin 
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f24c 2118 	movw	r1, #49688	; 0xc218
 8003aa8:	482e      	ldr	r0, [pc, #184]	; (8003b64 <MX_GPIO_Init+0x180>)
 8003aaa:	f7fd fbab 	bl	8001204 <HAL_GPIO_WritePin>
                          |M0_DC_CAL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GENERATOR_GPIO_Port, GENERATOR_Pin, GPIO_PIN_RESET);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	2180      	movs	r1, #128	; 0x80
 8003ab2:	482d      	ldr	r0, [pc, #180]	; (8003b68 <MX_GPIO_Init+0x184>)
 8003ab4:	f7fd fba6 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(nSCS_GPIO_Port, nSCS_Pin, GPIO_PIN_RESET);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2180      	movs	r1, #128	; 0x80
 8003abc:	482b      	ldr	r0, [pc, #172]	; (8003b6c <MX_GPIO_Init+0x188>)
 8003abe:	f7fd fba1 	bl	8001204 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin M0_AH_Pin EN_GATE_Pin 
                           M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|M0_AH_Pin|EN_GATE_Pin 
 8003ac2:	f24c 2318 	movw	r3, #49688	; 0xc218
 8003ac6:	61fb      	str	r3, [r7, #28]
                          |M0_DC_CAL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ad4:	f107 031c 	add.w	r3, r7, #28
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4822      	ldr	r0, [pc, #136]	; (8003b64 <MX_GPIO_Init+0x180>)
 8003adc:	f7fd f9f8 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_A_U_Pin */
  GPIO_InitStruct.Pin = ROT0_A_U_Pin;
 8003ae0:	2340      	movs	r3, #64	; 0x40
 8003ae2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ae4:	4b22      	ldr	r3, [pc, #136]	; (8003b70 <MX_GPIO_Init+0x18c>)
 8003ae6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_A_U_GPIO_Port, &GPIO_InitStruct);
 8003aec:	f107 031c 	add.w	r3, r7, #28
 8003af0:	4619      	mov	r1, r3
 8003af2:	481d      	ldr	r0, [pc, #116]	; (8003b68 <MX_GPIO_Init+0x184>)
 8003af4:	f7fd f9ec 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : GENERATOR_Pin */
  GPIO_InitStruct.Pin = GENERATOR_Pin;
 8003af8:	2380      	movs	r3, #128	; 0x80
 8003afa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003afc:	2301      	movs	r3, #1
 8003afe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b00:	2300      	movs	r3, #0
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b04:	2300      	movs	r3, #0
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GENERATOR_GPIO_Port, &GPIO_InitStruct);
 8003b08:	f107 031c 	add.w	r3, r7, #28
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	4816      	ldr	r0, [pc, #88]	; (8003b68 <MX_GPIO_Init+0x184>)
 8003b10:	f7fd f9de 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 8003b14:	2370      	movs	r3, #112	; 0x70
 8003b16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b20:	f107 031c 	add.w	r3, r7, #28
 8003b24:	4619      	mov	r1, r3
 8003b26:	4811      	ldr	r0, [pc, #68]	; (8003b6c <MX_GPIO_Init+0x188>)
 8003b28:	f7fd f9d2 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : nSCS_Pin */
  GPIO_InitStruct.Pin = nSCS_Pin;
 8003b2c:	2380      	movs	r3, #128	; 0x80
 8003b2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b30:	2301      	movs	r3, #1
 8003b32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(nSCS_GPIO_Port, &GPIO_InitStruct);
 8003b3c:	f107 031c 	add.w	r3, r7, #28
 8003b40:	4619      	mov	r1, r3
 8003b42:	480a      	ldr	r0, [pc, #40]	; (8003b6c <MX_GPIO_Init+0x188>)
 8003b44:	f7fd f9c4 	bl	8000ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	2017      	movs	r0, #23
 8003b4e:	f7fd f988 	bl	8000e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b52:	2017      	movs	r0, #23
 8003b54:	f7fd f9a1 	bl	8000e9a <HAL_NVIC_EnableIRQ>

}
 8003b58:	bf00      	nop
 8003b5a:	3730      	adds	r7, #48	; 0x30
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40023800 	.word	0x40023800
 8003b64:	40021000 	.word	0x40021000
 8003b68:	40020800 	.word	0x40020800
 8003b6c:	40020c00 	.word	0x40020c00
 8003b70:	10110000 	.word	0x10110000

08003b74 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_A_U_Pin){
 8003b7e:	88fb      	ldrh	r3, [r7, #6]
 8003b80:	2b40      	cmp	r3, #64	; 0x40
 8003b82:	d104      	bne.n	8003b8e <HAL_GPIO_EXTI_Callback+0x1a>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8003b84:	2108      	movs	r1, #8
 8003b86:	4804      	ldr	r0, [pc, #16]	; (8003b98 <HAL_GPIO_EXTI_Callback+0x24>)
 8003b88:	f7fd fb55 	bl	8001236 <HAL_GPIO_TogglePin>
	}
	else{
		__NOP();
	}
}
 8003b8c:	e000      	b.n	8003b90 <HAL_GPIO_EXTI_Callback+0x1c>
		__NOP();
 8003b8e:	bf00      	nop
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40021000 	.word	0x40021000

08003b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003ba0:	bf00      	nop
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
	...

08003bac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	607b      	str	r3, [r7, #4]
 8003bb6:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <HAL_MspInit+0x4c>)
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	4a0f      	ldr	r2, [pc, #60]	; (8003bf8 <HAL_MspInit+0x4c>)
 8003bbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003bc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <HAL_MspInit+0x4c>)
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bca:	607b      	str	r3, [r7, #4]
 8003bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	4b09      	ldr	r3, [pc, #36]	; (8003bf8 <HAL_MspInit+0x4c>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	4a08      	ldr	r2, [pc, #32]	; (8003bf8 <HAL_MspInit+0x4c>)
 8003bd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bde:	4b06      	ldr	r3, [pc, #24]	; (8003bf8 <HAL_MspInit+0x4c>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bea:	bf00      	nop
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	40023800 	.word	0x40023800

08003bfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08e      	sub	sp, #56	; 0x38
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
 8003c0c:	605a      	str	r2, [r3, #4]
 8003c0e:	609a      	str	r2, [r3, #8]
 8003c10:	60da      	str	r2, [r3, #12]
 8003c12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a48      	ldr	r2, [pc, #288]	; (8003d3c <HAL_ADC_MspInit+0x140>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d142      	bne.n	8003ca4 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	623b      	str	r3, [r7, #32]
 8003c22:	4b47      	ldr	r3, [pc, #284]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c26:	4a46      	ldr	r2, [pc, #280]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c2c:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2e:	4b44      	ldr	r3, [pc, #272]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c36:	623b      	str	r3, [r7, #32]
 8003c38:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	4b40      	ldr	r3, [pc, #256]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	4a3f      	ldr	r2, [pc, #252]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c44:	f043 0304 	orr.w	r3, r3, #4
 8003c48:	6313      	str	r3, [r2, #48]	; 0x30
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	f003 0304 	and.w	r3, r3, #4
 8003c52:	61fb      	str	r3, [r7, #28]
 8003c54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	4b39      	ldr	r3, [pc, #228]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5e:	4a38      	ldr	r2, [pc, #224]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	6313      	str	r3, [r2, #48]	; 0x30
 8003c66:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	61bb      	str	r3, [r7, #24]
 8003c70:	69bb      	ldr	r3, [r7, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = ASENSE_Pin|BSENSE_Pin|CSENSE_Pin;
 8003c72:	230e      	movs	r3, #14
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c76:	2303      	movs	r3, #3
 8003c78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c82:	4619      	mov	r1, r3
 8003c84:	482f      	ldr	r0, [pc, #188]	; (8003d44 <HAL_ADC_MspInit+0x148>)
 8003c86:	f7fd f923 	bl	8000ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_Pin|M0_SO1_Pin|M0_SO2_Pin|TEMP_Pin 
 8003c8a:	233e      	movs	r3, #62	; 0x3e
 8003c8c:	627b      	str	r3, [r7, #36]	; 0x24
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	482a      	ldr	r0, [pc, #168]	; (8003d48 <HAL_ADC_MspInit+0x14c>)
 8003c9e:	f7fd f917 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003ca2:	e046      	b.n	8003d32 <HAL_ADC_MspInit+0x136>
  else if(hadc->Instance==ADC2)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a28      	ldr	r2, [pc, #160]	; (8003d4c <HAL_ADC_MspInit+0x150>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d141      	bne.n	8003d32 <HAL_ADC_MspInit+0x136>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb6:	4a22      	ldr	r2, [pc, #136]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003cbc:	6453      	str	r3, [r2, #68]	; 0x44
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cca:	2300      	movs	r3, #0
 8003ccc:	613b      	str	r3, [r7, #16]
 8003cce:	4b1c      	ldr	r3, [pc, #112]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a1b      	ldr	r2, [pc, #108]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cd4:	f043 0304 	orr.w	r3, r3, #4
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b19      	ldr	r3, [pc, #100]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	4a14      	ldr	r2, [pc, #80]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_ADC_MspInit+0x144>)
 8003cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfa:	f003 0302 	and.w	r3, r3, #2
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STRAIN0_Pin|STRAIN1_Pin;
 8003d02:	2330      	movs	r3, #48	; 0x30
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d06:	2303      	movs	r3, #3
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d12:	4619      	mov	r1, r3
 8003d14:	480b      	ldr	r0, [pc, #44]	; (8003d44 <HAL_ADC_MspInit+0x148>)
 8003d16:	f7fd f8db 	bl	8000ed0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_S_Pin;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d22:	2300      	movs	r3, #0
 8003d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_S_GPIO_Port, &GPIO_InitStruct);
 8003d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4808      	ldr	r0, [pc, #32]	; (8003d50 <HAL_ADC_MspInit+0x154>)
 8003d2e:	f7fd f8cf 	bl	8000ed0 <HAL_GPIO_Init>
}
 8003d32:	bf00      	nop
 8003d34:	3738      	adds	r7, #56	; 0x38
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40012000 	.word	0x40012000
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40020800 	.word	0x40020800
 8003d48:	40020000 	.word	0x40020000
 8003d4c:	40012100 	.word	0x40012100
 8003d50:	40020400 	.word	0x40020400

08003d54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b08a      	sub	sp, #40	; 0x28
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d5c:	f107 0314 	add.w	r3, r7, #20
 8003d60:	2200      	movs	r2, #0
 8003d62:	601a      	str	r2, [r3, #0]
 8003d64:	605a      	str	r2, [r3, #4]
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	60da      	str	r2, [r3, #12]
 8003d6a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a19      	ldr	r2, [pc, #100]	; (8003dd8 <HAL_CAN_MspInit+0x84>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d12b      	bne.n	8003dce <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003d76:	2300      	movs	r3, #0
 8003d78:	613b      	str	r3, [r7, #16]
 8003d7a:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_CAN_MspInit+0x88>)
 8003d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7e:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <HAL_CAN_MspInit+0x88>)
 8003d80:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d84:	6413      	str	r3, [r2, #64]	; 0x40
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_CAN_MspInit+0x88>)
 8003d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d92:	2300      	movs	r3, #0
 8003d94:	60fb      	str	r3, [r7, #12]
 8003d96:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_CAN_MspInit+0x88>)
 8003d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9a:	4a10      	ldr	r2, [pc, #64]	; (8003ddc <HAL_CAN_MspInit+0x88>)
 8003d9c:	f043 0308 	orr.w	r3, r3, #8
 8003da0:	6313      	str	r3, [r2, #48]	; 0x30
 8003da2:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_CAN_MspInit+0x88>)
 8003da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da6:	f003 0308 	and.w	r3, r3, #8
 8003daa:	60fb      	str	r3, [r7, #12]
 8003dac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003dae:	2303      	movs	r3, #3
 8003db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db2:	2302      	movs	r3, #2
 8003db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003dbe:	2309      	movs	r3, #9
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dc2:	f107 0314 	add.w	r3, r7, #20
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4805      	ldr	r0, [pc, #20]	; (8003de0 <HAL_CAN_MspInit+0x8c>)
 8003dca:	f7fd f881 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003dce:	bf00      	nop
 8003dd0:	3728      	adds	r7, #40	; 0x28
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	40006400 	.word	0x40006400
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40020c00 	.word	0x40020c00

08003de4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	f107 031c 	add.w	r3, r7, #28
 8003df0:	2200      	movs	r2, #0
 8003df2:	601a      	str	r2, [r3, #0]
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	60da      	str	r2, [r3, #12]
 8003dfa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a32      	ldr	r2, [pc, #200]	; (8003ecc <HAL_I2C_MspInit+0xe8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d12c      	bne.n	8003e60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	4b31      	ldr	r3, [pc, #196]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	4a30      	ldr	r2, [pc, #192]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e10:	f043 0302 	orr.w	r3, r3, #2
 8003e14:	6313      	str	r3, [r2, #48]	; 0x30
 8003e16:	4b2e      	ldr	r3, [pc, #184]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	f003 0302 	and.w	r3, r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e22:	23c0      	movs	r3, #192	; 0xc0
 8003e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e26:	2312      	movs	r3, #18
 8003e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e32:	2304      	movs	r3, #4
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e36:	f107 031c 	add.w	r3, r7, #28
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	4825      	ldr	r0, [pc, #148]	; (8003ed4 <HAL_I2C_MspInit+0xf0>)
 8003e3e:	f7fd f847 	bl	8000ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	4b22      	ldr	r3, [pc, #136]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4a:	4a21      	ldr	r2, [pc, #132]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e50:	6413      	str	r3, [r2, #64]	; 0x40
 8003e52:	4b1f      	ldr	r3, [pc, #124]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5a:	617b      	str	r3, [r7, #20]
 8003e5c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e5e:	e031      	b.n	8003ec4 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a1c      	ldr	r2, [pc, #112]	; (8003ed8 <HAL_I2C_MspInit+0xf4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d12c      	bne.n	8003ec4 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e72:	4a17      	ldr	r2, [pc, #92]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e74:	f043 0302 	orr.w	r3, r3, #2
 8003e78:	6313      	str	r3, [r2, #48]	; 0x30
 8003e7a:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	613b      	str	r3, [r7, #16]
 8003e84:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003e86:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003e8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e8c:	2312      	movs	r3, #18
 8003e8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e90:	2301      	movs	r3, #1
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e94:	2303      	movs	r3, #3
 8003e96:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003e98:	2304      	movs	r3, #4
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e9c:	f107 031c 	add.w	r3, r7, #28
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <HAL_I2C_MspInit+0xf0>)
 8003ea4:	f7fd f814 	bl	8000ed0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	4b08      	ldr	r3, [pc, #32]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb0:	4a07      	ldr	r2, [pc, #28]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003eb2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003eb6:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb8:	4b05      	ldr	r3, [pc, #20]	; (8003ed0 <HAL_I2C_MspInit+0xec>)
 8003eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
}
 8003ec4:	bf00      	nop
 8003ec6:	3730      	adds	r7, #48	; 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40005400 	.word	0x40005400
 8003ed0:	40023800 	.word	0x40023800
 8003ed4:	40020400 	.word	0x40020400
 8003ed8:	40005800 	.word	0x40005800

08003edc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08a      	sub	sp, #40	; 0x28
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	f107 0314 	add.w	r3, r7, #20
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a19      	ldr	r2, [pc, #100]	; (8003f60 <HAL_SPI_MspInit+0x84>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d12c      	bne.n	8003f58 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	4b18      	ldr	r3, [pc, #96]	; (8003f64 <HAL_SPI_MspInit+0x88>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a17      	ldr	r2, [pc, #92]	; (8003f64 <HAL_SPI_MspInit+0x88>)
 8003f08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_SPI_MspInit+0x88>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f16:	613b      	str	r3, [r7, #16]
 8003f18:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60fb      	str	r3, [r7, #12]
 8003f1e:	4b11      	ldr	r3, [pc, #68]	; (8003f64 <HAL_SPI_MspInit+0x88>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a10      	ldr	r2, [pc, #64]	; (8003f64 <HAL_SPI_MspInit+0x88>)
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b0e      	ldr	r3, [pc, #56]	; (8003f64 <HAL_SPI_MspInit+0x88>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0302 	and.w	r3, r3, #2
 8003f32:	60fb      	str	r3, [r7, #12]
 8003f34:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration    
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003f36:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003f3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f44:	2303      	movs	r3, #3
 8003f46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f48:	2305      	movs	r3, #5
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f4c:	f107 0314 	add.w	r3, r7, #20
 8003f50:	4619      	mov	r1, r3
 8003f52:	4805      	ldr	r0, [pc, #20]	; (8003f68 <HAL_SPI_MspInit+0x8c>)
 8003f54:	f7fc ffbc 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003f58:	bf00      	nop
 8003f5a:	3728      	adds	r7, #40	; 0x28
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}
 8003f60:	40003800 	.word	0x40003800
 8003f64:	40023800 	.word	0x40023800
 8003f68:	40020400 	.word	0x40020400

08003f6c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a0e      	ldr	r2, [pc, #56]	; (8003fb4 <HAL_TIM_Base_MspInit+0x48>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d115      	bne.n	8003faa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	4b0d      	ldr	r3, [pc, #52]	; (8003fb8 <HAL_TIM_Base_MspInit+0x4c>)
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	4a0c      	ldr	r2, [pc, #48]	; (8003fb8 <HAL_TIM_Base_MspInit+0x4c>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <HAL_TIM_Base_MspInit+0x4c>)
 8003f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	2100      	movs	r1, #0
 8003f9e:	2018      	movs	r0, #24
 8003fa0:	f7fc ff5f 	bl	8000e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8003fa4:	2018      	movs	r0, #24
 8003fa6:	f7fc ff78 	bl	8000e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003faa:	bf00      	nop
 8003fac:	3710      	adds	r7, #16
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40014000 	.word	0x40014000
 8003fb8:	40023800 	.word	0x40023800

08003fbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]
 8003fcc:	605a      	str	r2, [r3, #4]
 8003fce:	609a      	str	r2, [r3, #8]
 8003fd0:	60da      	str	r2, [r3, #12]
 8003fd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a12      	ldr	r2, [pc, #72]	; (8004024 <HAL_TIM_MspPostInit+0x68>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d11d      	bne.n	800401a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60bb      	str	r3, [r7, #8]
 8003fe2:	4b11      	ldr	r3, [pc, #68]	; (8004028 <HAL_TIM_MspPostInit+0x6c>)
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	4a10      	ldr	r2, [pc, #64]	; (8004028 <HAL_TIM_MspPostInit+0x6c>)
 8003fe8:	f043 0310 	orr.w	r3, r3, #16
 8003fec:	6313      	str	r3, [r2, #48]	; 0x30
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <HAL_TIM_MspPostInit+0x6c>)
 8003ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration    
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003ffa:	2360      	movs	r3, #96	; 0x60
 8003ffc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800400a:	2303      	movs	r3, #3
 800400c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800400e:	f107 030c 	add.w	r3, r7, #12
 8004012:	4619      	mov	r1, r3
 8004014:	4805      	ldr	r0, [pc, #20]	; (800402c <HAL_TIM_MspPostInit+0x70>)
 8004016:	f7fc ff5b 	bl	8000ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800401a:	bf00      	nop
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40014000 	.word	0x40014000
 8004028:	40023800 	.word	0x40023800
 800402c:	40021000 	.word	0x40021000

08004030 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004038:	f107 0314 	add.w	r3, r7, #20
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]
 8004040:	605a      	str	r2, [r3, #4]
 8004042:	609a      	str	r2, [r3, #8]
 8004044:	60da      	str	r2, [r3, #12]
 8004046:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004050:	d132      	bne.n	80040b8 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004052:	2300      	movs	r3, #0
 8004054:	613b      	str	r3, [r7, #16]
 8004056:	4b1a      	ldr	r3, [pc, #104]	; (80040c0 <HAL_PCD_MspInit+0x90>)
 8004058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405a:	4a19      	ldr	r2, [pc, #100]	; (80040c0 <HAL_PCD_MspInit+0x90>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	6313      	str	r3, [r2, #48]	; 0x30
 8004062:	4b17      	ldr	r3, [pc, #92]	; (80040c0 <HAL_PCD_MspInit+0x90>)
 8004064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004066:	f003 0301 	and.w	r3, r3, #1
 800406a:	613b      	str	r3, [r7, #16]
 800406c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800406e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004072:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004074:	2302      	movs	r3, #2
 8004076:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800407c:	2303      	movs	r3, #3
 800407e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8004080:	230a      	movs	r3, #10
 8004082:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4619      	mov	r1, r3
 800408a:	480e      	ldr	r0, [pc, #56]	; (80040c4 <HAL_PCD_MspInit+0x94>)
 800408c:	f7fc ff20 	bl	8000ed0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8004090:	4b0b      	ldr	r3, [pc, #44]	; (80040c0 <HAL_PCD_MspInit+0x90>)
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	4a0a      	ldr	r2, [pc, #40]	; (80040c0 <HAL_PCD_MspInit+0x90>)
 8004096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409a:	6353      	str	r3, [r2, #52]	; 0x34
 800409c:	2300      	movs	r3, #0
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <HAL_PCD_MspInit+0x90>)
 80040a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040a4:	4a06      	ldr	r2, [pc, #24]	; (80040c0 <HAL_PCD_MspInit+0x90>)
 80040a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040aa:	6453      	str	r3, [r2, #68]	; 0x44
 80040ac:	4b04      	ldr	r3, [pc, #16]	; (80040c0 <HAL_PCD_MspInit+0x90>)
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80040b8:	bf00      	nop
 80040ba:	3728      	adds	r7, #40	; 0x28
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	40023800 	.word	0x40023800
 80040c4:	40020000 	.word	0x40020000

080040c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80040cc:	bf00      	nop
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr

080040d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80040d6:	b480      	push	{r7}
 80040d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80040da:	e7fe      	b.n	80040da <HardFault_Handler+0x4>

080040dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80040dc:	b480      	push	{r7}
 80040de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80040e0:	e7fe      	b.n	80040e0 <MemManage_Handler+0x4>

080040e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80040e2:	b480      	push	{r7}
 80040e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80040e6:	e7fe      	b.n	80040e6 <BusFault_Handler+0x4>

080040e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80040ec:	e7fe      	b.n	80040ec <UsageFault_Handler+0x4>

080040ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80040ee:	b480      	push	{r7}
 80040f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80040f2:	bf00      	nop
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004100:	bf00      	nop
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800410a:	b480      	push	{r7}
 800410c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800410e:	bf00      	nop
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800411c:	f7fc fa26 	bl	800056c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004120:	bf00      	nop
 8004122:	bd80      	pop	{r7, pc}

08004124 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8004128:	2040      	movs	r0, #64	; 0x40
 800412a:	f7fd f89f 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800412e:	bf00      	nop
 8004130:	bd80      	pop	{r7, pc}
	...

08004134 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004138:	4802      	ldr	r0, [pc, #8]	; (8004144 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800413a:	f7fe f8a3 	bl	8002284 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800413e:	bf00      	nop
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	200005c4 	.word	0x200005c4

08004148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800414c:	4b08      	ldr	r3, [pc, #32]	; (8004170 <SystemInit+0x28>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	4a07      	ldr	r2, [pc, #28]	; (8004170 <SystemInit+0x28>)
 8004154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <SystemInit+0x28>)
 800415e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004162:	609a      	str	r2, [r3, #8]
#endif
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	e000ed00 	.word	0xe000ed00

08004174 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004174:	f8df d034 	ldr.w	sp, [pc, #52]	; 80041ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004178:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800417a:	e003      	b.n	8004184 <LoopCopyDataInit>

0800417c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800417c:	4b0c      	ldr	r3, [pc, #48]	; (80041b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800417e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004180:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004182:	3104      	adds	r1, #4

08004184 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004184:	480b      	ldr	r0, [pc, #44]	; (80041b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004188:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800418a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800418c:	d3f6      	bcc.n	800417c <CopyDataInit>
  ldr  r2, =_sbss
 800418e:	4a0b      	ldr	r2, [pc, #44]	; (80041bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004190:	e002      	b.n	8004198 <LoopFillZerobss>

08004192 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004192:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004194:	f842 3b04 	str.w	r3, [r2], #4

08004198 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004198:	4b09      	ldr	r3, [pc, #36]	; (80041c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800419a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800419c:	d3f9      	bcc.n	8004192 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800419e:	f7ff ffd3 	bl	8004148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80041a2:	f000 f811 	bl	80041c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80041a6:	f7ff f965 	bl	8003474 <main>
  bx  lr    
 80041aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80041ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80041b0:	08004260 	.word	0x08004260
  ldr  r0, =_sdata
 80041b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80041b8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80041bc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80041c0:	2000062c 	.word	0x2000062c

080041c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80041c4:	e7fe      	b.n	80041c4 <ADC_IRQHandler>
	...

080041c8 <__libc_init_array>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	4e0d      	ldr	r6, [pc, #52]	; (8004200 <__libc_init_array+0x38>)
 80041cc:	4c0d      	ldr	r4, [pc, #52]	; (8004204 <__libc_init_array+0x3c>)
 80041ce:	1ba4      	subs	r4, r4, r6
 80041d0:	10a4      	asrs	r4, r4, #2
 80041d2:	2500      	movs	r5, #0
 80041d4:	42a5      	cmp	r5, r4
 80041d6:	d109      	bne.n	80041ec <__libc_init_array+0x24>
 80041d8:	4e0b      	ldr	r6, [pc, #44]	; (8004208 <__libc_init_array+0x40>)
 80041da:	4c0c      	ldr	r4, [pc, #48]	; (800420c <__libc_init_array+0x44>)
 80041dc:	f000 f820 	bl	8004220 <_init>
 80041e0:	1ba4      	subs	r4, r4, r6
 80041e2:	10a4      	asrs	r4, r4, #2
 80041e4:	2500      	movs	r5, #0
 80041e6:	42a5      	cmp	r5, r4
 80041e8:	d105      	bne.n	80041f6 <__libc_init_array+0x2e>
 80041ea:	bd70      	pop	{r4, r5, r6, pc}
 80041ec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041f0:	4798      	blx	r3
 80041f2:	3501      	adds	r5, #1
 80041f4:	e7ee      	b.n	80041d4 <__libc_init_array+0xc>
 80041f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80041fa:	4798      	blx	r3
 80041fc:	3501      	adds	r5, #1
 80041fe:	e7f2      	b.n	80041e6 <__libc_init_array+0x1e>
 8004200:	08004258 	.word	0x08004258
 8004204:	08004258 	.word	0x08004258
 8004208:	08004258 	.word	0x08004258
 800420c:	0800425c 	.word	0x0800425c

08004210 <memset>:
 8004210:	4402      	add	r2, r0
 8004212:	4603      	mov	r3, r0
 8004214:	4293      	cmp	r3, r2
 8004216:	d100      	bne.n	800421a <memset+0xa>
 8004218:	4770      	bx	lr
 800421a:	f803 1b01 	strb.w	r1, [r3], #1
 800421e:	e7f9      	b.n	8004214 <memset+0x4>

08004220 <_init>:
 8004220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004222:	bf00      	nop
 8004224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004226:	bc08      	pop	{r3}
 8004228:	469e      	mov	lr, r3
 800422a:	4770      	bx	lr

0800422c <_fini>:
 800422c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800422e:	bf00      	nop
 8004230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004232:	bc08      	pop	{r3}
 8004234:	469e      	mov	lr, r3
 8004236:	4770      	bx	lr
