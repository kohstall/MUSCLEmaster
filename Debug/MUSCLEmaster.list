
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a084  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800a218  0800a218  0001a218  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4a0  0800a4a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4a0  0800a4a0  0001a4a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4a8  0800a4a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4a8  0800a4a8  0001a4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4ac  0800a4ac  0001a4ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800a4b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000070  0800a520  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000039c  0800a520  0002039c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014263  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025d8  00000000  00000000  00034303  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  000368e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012b8  00000000  00000000  00037ca0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001fa30  00000000  00000000  00038f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e655  00000000  00000000  00058988  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cbbf4  00000000  00000000  00066fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00132bd1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d0c  00000000  00000000  00132c4c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a1fc 	.word	0x0800a1fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800a1fc 	.word	0x0800a1fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c70:	f000 b972 	b.w	8000f58 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	9e08      	ldr	r6, [sp, #32]
 8000c92:	4604      	mov	r4, r0
 8000c94:	4688      	mov	r8, r1
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d14b      	bne.n	8000d32 <__udivmoddi4+0xa6>
 8000c9a:	428a      	cmp	r2, r1
 8000c9c:	4615      	mov	r5, r2
 8000c9e:	d967      	bls.n	8000d70 <__udivmoddi4+0xe4>
 8000ca0:	fab2 f282 	clz	r2, r2
 8000ca4:	b14a      	cbz	r2, 8000cba <__udivmoddi4+0x2e>
 8000ca6:	f1c2 0720 	rsb	r7, r2, #32
 8000caa:	fa01 f302 	lsl.w	r3, r1, r2
 8000cae:	fa20 f707 	lsr.w	r7, r0, r7
 8000cb2:	4095      	lsls	r5, r2
 8000cb4:	ea47 0803 	orr.w	r8, r7, r3
 8000cb8:	4094      	lsls	r4, r2
 8000cba:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cbe:	0c23      	lsrs	r3, r4, #16
 8000cc0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cc4:	fa1f fc85 	uxth.w	ip, r5
 8000cc8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ccc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cd0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cd4:	4299      	cmp	r1, r3
 8000cd6:	d909      	bls.n	8000cec <__udivmoddi4+0x60>
 8000cd8:	18eb      	adds	r3, r5, r3
 8000cda:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cde:	f080 811b 	bcs.w	8000f18 <__udivmoddi4+0x28c>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 8118 	bls.w	8000f18 <__udivmoddi4+0x28c>
 8000ce8:	3f02      	subs	r7, #2
 8000cea:	442b      	add	r3, r5
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d00:	45a4      	cmp	ip, r4
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x8c>
 8000d04:	192c      	adds	r4, r5, r4
 8000d06:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d0a:	f080 8107 	bcs.w	8000f1c <__udivmoddi4+0x290>
 8000d0e:	45a4      	cmp	ip, r4
 8000d10:	f240 8104 	bls.w	8000f1c <__udivmoddi4+0x290>
 8000d14:	3802      	subs	r0, #2
 8000d16:	442c      	add	r4, r5
 8000d18:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d1c:	eba4 040c 	sub.w	r4, r4, ip
 8000d20:	2700      	movs	r7, #0
 8000d22:	b11e      	cbz	r6, 8000d2c <__udivmoddi4+0xa0>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c6 4300 	strd	r4, r3, [r6]
 8000d2c:	4639      	mov	r1, r7
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xbe>
 8000d36:	2e00      	cmp	r6, #0
 8000d38:	f000 80eb 	beq.w	8000f12 <__udivmoddi4+0x286>
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d42:	4638      	mov	r0, r7
 8000d44:	4639      	mov	r1, r7
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f783 	clz	r7, r3
 8000d4e:	2f00      	cmp	r7, #0
 8000d50:	d147      	bne.n	8000de2 <__udivmoddi4+0x156>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd0>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80fa 	bhi.w	8000f50 <__udivmoddi4+0x2c4>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	4698      	mov	r8, r3
 8000d66:	2e00      	cmp	r6, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa0>
 8000d6a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xe8>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 808f 	bne.w	8000e9c <__udivmoddi4+0x210>
 8000d7e:	1b49      	subs	r1, r1, r5
 8000d80:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d84:	fa1f f885 	uxth.w	r8, r5
 8000d88:	2701      	movs	r7, #1
 8000d8a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d8e:	0c23      	lsrs	r3, r4, #16
 8000d90:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d98:	fb08 f10c 	mul.w	r1, r8, ip
 8000d9c:	4299      	cmp	r1, r3
 8000d9e:	d907      	bls.n	8000db0 <__udivmoddi4+0x124>
 8000da0:	18eb      	adds	r3, r5, r3
 8000da2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000da6:	d202      	bcs.n	8000dae <__udivmoddi4+0x122>
 8000da8:	4299      	cmp	r1, r3
 8000daa:	f200 80cd 	bhi.w	8000f48 <__udivmoddi4+0x2bc>
 8000dae:	4684      	mov	ip, r0
 8000db0:	1a59      	subs	r1, r3, r1
 8000db2:	b2a3      	uxth	r3, r4
 8000db4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000db8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dc0:	fb08 f800 	mul.w	r8, r8, r0
 8000dc4:	45a0      	cmp	r8, r4
 8000dc6:	d907      	bls.n	8000dd8 <__udivmoddi4+0x14c>
 8000dc8:	192c      	adds	r4, r5, r4
 8000dca:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dce:	d202      	bcs.n	8000dd6 <__udivmoddi4+0x14a>
 8000dd0:	45a0      	cmp	r8, r4
 8000dd2:	f200 80b6 	bhi.w	8000f42 <__udivmoddi4+0x2b6>
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	eba4 0408 	sub.w	r4, r4, r8
 8000ddc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de0:	e79f      	b.n	8000d22 <__udivmoddi4+0x96>
 8000de2:	f1c7 0c20 	rsb	ip, r7, #32
 8000de6:	40bb      	lsls	r3, r7
 8000de8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dec:	ea4e 0e03 	orr.w	lr, lr, r3
 8000df0:	fa01 f407 	lsl.w	r4, r1, r7
 8000df4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000df8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dfc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e00:	4325      	orrs	r5, r4
 8000e02:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e06:	0c2c      	lsrs	r4, r5, #16
 8000e08:	fb08 3319 	mls	r3, r8, r9, r3
 8000e0c:	fa1f fa8e 	uxth.w	sl, lr
 8000e10:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e14:	fb09 f40a 	mul.w	r4, r9, sl
 8000e18:	429c      	cmp	r4, r3
 8000e1a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e1e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e22:	d90b      	bls.n	8000e3c <__udivmoddi4+0x1b0>
 8000e24:	eb1e 0303 	adds.w	r3, lr, r3
 8000e28:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e2c:	f080 8087 	bcs.w	8000f3e <__udivmoddi4+0x2b2>
 8000e30:	429c      	cmp	r4, r3
 8000e32:	f240 8084 	bls.w	8000f3e <__udivmoddi4+0x2b2>
 8000e36:	f1a9 0902 	sub.w	r9, r9, #2
 8000e3a:	4473      	add	r3, lr
 8000e3c:	1b1b      	subs	r3, r3, r4
 8000e3e:	b2ad      	uxth	r5, r5
 8000e40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e44:	fb08 3310 	mls	r3, r8, r0, r3
 8000e48:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e4c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e50:	45a2      	cmp	sl, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1da>
 8000e54:	eb1e 0404 	adds.w	r4, lr, r4
 8000e58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e5c:	d26b      	bcs.n	8000f36 <__udivmoddi4+0x2aa>
 8000e5e:	45a2      	cmp	sl, r4
 8000e60:	d969      	bls.n	8000f36 <__udivmoddi4+0x2aa>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4474      	add	r4, lr
 8000e66:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e6a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e6e:	eba4 040a 	sub.w	r4, r4, sl
 8000e72:	454c      	cmp	r4, r9
 8000e74:	46c2      	mov	sl, r8
 8000e76:	464b      	mov	r3, r9
 8000e78:	d354      	bcc.n	8000f24 <__udivmoddi4+0x298>
 8000e7a:	d051      	beq.n	8000f20 <__udivmoddi4+0x294>
 8000e7c:	2e00      	cmp	r6, #0
 8000e7e:	d069      	beq.n	8000f54 <__udivmoddi4+0x2c8>
 8000e80:	ebb1 050a 	subs.w	r5, r1, sl
 8000e84:	eb64 0403 	sbc.w	r4, r4, r3
 8000e88:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e8c:	40fd      	lsrs	r5, r7
 8000e8e:	40fc      	lsrs	r4, r7
 8000e90:	ea4c 0505 	orr.w	r5, ip, r5
 8000e94:	e9c6 5400 	strd	r5, r4, [r6]
 8000e98:	2700      	movs	r7, #0
 8000e9a:	e747      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000e9c:	f1c2 0320 	rsb	r3, r2, #32
 8000ea0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ea4:	4095      	lsls	r5, r2
 8000ea6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eaa:	fa21 f303 	lsr.w	r3, r1, r3
 8000eae:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eb2:	4338      	orrs	r0, r7
 8000eb4:	0c01      	lsrs	r1, r0, #16
 8000eb6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eba:	fa1f f885 	uxth.w	r8, r5
 8000ebe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ec2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec6:	fb07 f308 	mul.w	r3, r7, r8
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x256>
 8000ed2:	1869      	adds	r1, r5, r1
 8000ed4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ed8:	d22f      	bcs.n	8000f3a <__udivmoddi4+0x2ae>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d92d      	bls.n	8000f3a <__udivmoddi4+0x2ae>
 8000ede:	3f02      	subs	r7, #2
 8000ee0:	4429      	add	r1, r5
 8000ee2:	1acb      	subs	r3, r1, r3
 8000ee4:	b281      	uxth	r1, r0
 8000ee6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eea:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb00 f308 	mul.w	r3, r0, r8
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d907      	bls.n	8000f0a <__udivmoddi4+0x27e>
 8000efa:	1869      	adds	r1, r5, r1
 8000efc:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f00:	d217      	bcs.n	8000f32 <__udivmoddi4+0x2a6>
 8000f02:	428b      	cmp	r3, r1
 8000f04:	d915      	bls.n	8000f32 <__udivmoddi4+0x2a6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4429      	add	r1, r5
 8000f0a:	1ac9      	subs	r1, r1, r3
 8000f0c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f10:	e73b      	b.n	8000d8a <__udivmoddi4+0xfe>
 8000f12:	4637      	mov	r7, r6
 8000f14:	4630      	mov	r0, r6
 8000f16:	e709      	b.n	8000d2c <__udivmoddi4+0xa0>
 8000f18:	4607      	mov	r7, r0
 8000f1a:	e6e7      	b.n	8000cec <__udivmoddi4+0x60>
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	e6fb      	b.n	8000d18 <__udivmoddi4+0x8c>
 8000f20:	4541      	cmp	r1, r8
 8000f22:	d2ab      	bcs.n	8000e7c <__udivmoddi4+0x1f0>
 8000f24:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f28:	eb69 020e 	sbc.w	r2, r9, lr
 8000f2c:	3801      	subs	r0, #1
 8000f2e:	4613      	mov	r3, r2
 8000f30:	e7a4      	b.n	8000e7c <__udivmoddi4+0x1f0>
 8000f32:	4660      	mov	r0, ip
 8000f34:	e7e9      	b.n	8000f0a <__udivmoddi4+0x27e>
 8000f36:	4618      	mov	r0, r3
 8000f38:	e795      	b.n	8000e66 <__udivmoddi4+0x1da>
 8000f3a:	4667      	mov	r7, ip
 8000f3c:	e7d1      	b.n	8000ee2 <__udivmoddi4+0x256>
 8000f3e:	4681      	mov	r9, r0
 8000f40:	e77c      	b.n	8000e3c <__udivmoddi4+0x1b0>
 8000f42:	3802      	subs	r0, #2
 8000f44:	442c      	add	r4, r5
 8000f46:	e747      	b.n	8000dd8 <__udivmoddi4+0x14c>
 8000f48:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f4c:	442b      	add	r3, r5
 8000f4e:	e72f      	b.n	8000db0 <__udivmoddi4+0x124>
 8000f50:	4638      	mov	r0, r7
 8000f52:	e708      	b.n	8000d66 <__udivmoddi4+0xda>
 8000f54:	4637      	mov	r7, r6
 8000f56:	e6e9      	b.n	8000d2c <__udivmoddi4+0xa0>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	; (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	; (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 ff49 	bl	8001e1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f006 ffb4 	bl	8007efc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 ff61 	bl	8001e86 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fdc:	f000 ff29 	bl	8001e32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000004 	.word	0x20000004
 8000ffc:	20000000 	.word	0x20000000

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	; (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000004 	.word	0x20000004
 8001024:	20000098 	.word	0x20000098

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000098 	.word	0x20000098

08001040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e033      	b.n	80010be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f006 ff74 	bl	8007f4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	d118      	bne.n	80010b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001082:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001086:	f023 0302 	bic.w	r3, r3, #2
 800108a:	f043 0202 	orr.w	r2, r3, #2
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 fbf0 	bl	8001878 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f023 0303 	bic.w	r3, r3, #3
 80010a6:	f043 0201 	orr.w	r2, r3, #1
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	641a      	str	r2, [r3, #64]	; 0x40
 80010ae:	e001      	b.n	80010b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010b0:	2301      	movs	r3, #1
 80010b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
	...

080010c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Start+0x1a>
 80010de:	2302      	movs	r3, #2
 80010e0:	e0a5      	b.n	800122e <HAL_ADC_Start+0x166>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d018      	beq.n	800112a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001108:	4b4c      	ldr	r3, [pc, #304]	; (800123c <HAL_ADC_Start+0x174>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a4c      	ldr	r2, [pc, #304]	; (8001240 <HAL_ADC_Start+0x178>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9a      	lsrs	r2, r3, #18
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800111c:	e002      	b.n	8001124 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	3b01      	subs	r3, #1
 8001122:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f9      	bne.n	800111e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b01      	cmp	r3, #1
 8001136:	d179      	bne.n	800122c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001140:	f023 0301 	bic.w	r3, r3, #1
 8001144:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001156:	2b00      	cmp	r3, #0
 8001158:	d007      	beq.n	800116a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001162:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001172:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001176:	d106      	bne.n	8001186 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800117c:	f023 0206 	bic.w	r2, r3, #6
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	645a      	str	r2, [r3, #68]	; 0x44
 8001184:	e002      	b.n	800118c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001194:	4b2b      	ldr	r3, [pc, #172]	; (8001244 <HAL_ADC_Start+0x17c>)
 8001196:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011a0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 031f 	and.w	r3, r3, #31
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d12a      	bne.n	8001204 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a25      	ldr	r2, [pc, #148]	; (8001248 <HAL_ADC_Start+0x180>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d015      	beq.n	80011e4 <HAL_ADC_Start+0x11c>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a23      	ldr	r2, [pc, #140]	; (800124c <HAL_ADC_Start+0x184>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d105      	bne.n	80011ce <HAL_ADC_Start+0x106>
 80011c2:	4b20      	ldr	r3, [pc, #128]	; (8001244 <HAL_ADC_Start+0x17c>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d00a      	beq.n	80011e4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <HAL_ADC_Start+0x188>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d129      	bne.n	800122c <HAL_ADC_Start+0x164>
 80011d8:	4b1a      	ldr	r3, [pc, #104]	; (8001244 <HAL_ADC_Start+0x17c>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	2b0f      	cmp	r3, #15
 80011e2:	d823      	bhi.n	800122c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d11c      	bne.n	800122c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	e013      	b.n	800122c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a0f      	ldr	r2, [pc, #60]	; (8001248 <HAL_ADC_Start+0x180>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d10e      	bne.n	800122c <HAL_ADC_Start+0x164>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d107      	bne.n	800122c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689a      	ldr	r2, [r3, #8]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800122a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	20000008 	.word	0x20000008
 8001240:	431bde83 	.word	0x431bde83
 8001244:	40012300 	.word	0x40012300
 8001248:	40012000 	.word	0x40012000
 800124c:	40012100 	.word	0x40012100
 8001250:	40012200 	.word	0x40012200

08001254 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800126c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001270:	d113      	bne.n	800129a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800127c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001280:	d10b      	bne.n	800129a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	f043 0220 	orr.w	r2, r3, #32
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e05c      	b.n	8001354 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800129a:	f7ff fec5 	bl	8001028 <HAL_GetTick>
 800129e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012a0:	e01a      	b.n	80012d8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80012a8:	d016      	beq.n	80012d8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d007      	beq.n	80012c0 <HAL_ADC_PollForConversion+0x6c>
 80012b0:	f7ff feba 	bl	8001028 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d20b      	bcs.n	80012d8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c4:	f043 0204 	orr.w	r2, r3, #4
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e03d      	b.n	8001354 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d1dd      	bne.n	80012a2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f06f 0212 	mvn.w	r2, #18
 80012ee:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001306:	2b00      	cmp	r3, #0
 8001308:	d123      	bne.n	8001352 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800130e:	2b00      	cmp	r3, #0
 8001310:	d11f      	bne.n	8001352 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001318:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800132a:	2b00      	cmp	r3, #0
 800132c:	d111      	bne.n	8001352 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001332:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f043 0201 	orr.w	r2, r3, #1
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	4618      	mov	r0, r3
 8001356:	3710      	adds	r7, #16
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001364:	2300      	movs	r3, #0
 8001366:	60fb      	str	r3, [r7, #12]
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b02      	cmp	r3, #2
 8001378:	bf0c      	ite	eq
 800137a:	2301      	moveq	r3, #1
 800137c:	2300      	movne	r3, #0
 800137e:	b2db      	uxtb	r3, r3
 8001380:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0320 	and.w	r3, r3, #32
 800138c:	2b20      	cmp	r3, #32
 800138e:	bf0c      	ite	eq
 8001390:	2301      	moveq	r3, #1
 8001392:	2300      	movne	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d049      	beq.n	8001432 <HAL_ADC_IRQHandler+0xd6>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d046      	beq.n	8001432 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 0310 	and.w	r3, r3, #16
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d105      	bne.n	80013bc <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d12b      	bne.n	8001422 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d127      	bne.n	8001422 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013d8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d119      	bne.n	8001422 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	685a      	ldr	r2, [r3, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f022 0220 	bic.w	r2, r2, #32
 80013fc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d105      	bne.n	8001422 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f043 0201 	orr.w	r2, r3, #1
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 f8e8 	bl	80015f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f06f 0212 	mvn.w	r2, #18
 8001430:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0304 	and.w	r3, r3, #4
 800143c:	2b04      	cmp	r3, #4
 800143e:	bf0c      	ite	eq
 8001440:	2301      	moveq	r3, #1
 8001442:	2300      	movne	r3, #0
 8001444:	b2db      	uxtb	r3, r3
 8001446:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	2b80      	cmp	r3, #128	; 0x80
 8001454:	bf0c      	ite	eq
 8001456:	2301      	moveq	r3, #1
 8001458:	2300      	movne	r3, #0
 800145a:	b2db      	uxtb	r3, r3
 800145c:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d057      	beq.n	8001514 <HAL_ADC_IRQHandler+0x1b8>
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d054      	beq.n	8001514 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 0310 	and.w	r3, r3, #16
 8001472:	2b00      	cmp	r3, #0
 8001474:	d105      	bne.n	8001482 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d139      	bne.n	8001504 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001496:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800149a:	2b00      	cmp	r3, #0
 800149c:	d006      	beq.n	80014ac <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d12b      	bne.n	8001504 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d124      	bne.n	8001504 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d11d      	bne.n	8001504 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d119      	bne.n	8001504 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014de:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d105      	bne.n	8001504 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	f000 fab3 	bl	8001a70 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f06f 020c 	mvn.w	r2, #12
 8001512:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b01      	cmp	r3, #1
 8001520:	bf0c      	ite	eq
 8001522:	2301      	moveq	r3, #1
 8001524:	2300      	movne	r3, #0
 8001526:	b2db      	uxtb	r3, r3
 8001528:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001534:	2b40      	cmp	r3, #64	; 0x40
 8001536:	bf0c      	ite	eq
 8001538:	2301      	moveq	r3, #1
 800153a:	2300      	movne	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d017      	beq.n	8001576 <HAL_ADC_IRQHandler+0x21a>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d014      	beq.n	8001576 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b01      	cmp	r3, #1
 8001558:	d10d      	bne.n	8001576 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 f850 	bl	800160c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f06f 0201 	mvn.w	r2, #1
 8001574:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0320 	and.w	r3, r3, #32
 8001580:	2b20      	cmp	r3, #32
 8001582:	bf0c      	ite	eq
 8001584:	2301      	moveq	r3, #1
 8001586:	2300      	movne	r3, #0
 8001588:	b2db      	uxtb	r3, r3
 800158a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001596:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d015      	beq.n	80015d6 <HAL_ADC_IRQHandler+0x27a>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d012      	beq.n	80015d6 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	f043 0202 	orr.w	r2, r3, #2
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f06f 0220 	mvn.w	r2, #32
 80015c4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f82a 	bl	8001620 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f06f 0220 	mvn.w	r2, #32
 80015d4:	601a      	str	r2, [r3, #0]
  }
}
 80015d6:	bf00      	nop
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80015de:	b480      	push	{r7}
 80015e0:	b083      	sub	sp, #12
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001600:	bf00      	nop
 8001602:	370c      	adds	r7, #12
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr

0800160c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001628:	bf00      	nop
 800162a:	370c      	adds	r7, #12
 800162c:	46bd      	mov	sp, r7
 800162e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001632:	4770      	bx	lr

08001634 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800163e:	2300      	movs	r3, #0
 8001640:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001648:	2b01      	cmp	r3, #1
 800164a:	d101      	bne.n	8001650 <HAL_ADC_ConfigChannel+0x1c>
 800164c:	2302      	movs	r3, #2
 800164e:	e105      	b.n	800185c <HAL_ADC_ConfigChannel+0x228>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b09      	cmp	r3, #9
 800165e:	d925      	bls.n	80016ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68d9      	ldr	r1, [r3, #12]
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	b29b      	uxth	r3, r3
 800166c:	461a      	mov	r2, r3
 800166e:	4613      	mov	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	4413      	add	r3, r2
 8001674:	3b1e      	subs	r3, #30
 8001676:	2207      	movs	r2, #7
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43da      	mvns	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	400a      	ands	r2, r1
 8001684:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68d9      	ldr	r1, [r3, #12]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	b29b      	uxth	r3, r3
 8001696:	4618      	mov	r0, r3
 8001698:	4603      	mov	r3, r0
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	4403      	add	r3, r0
 800169e:	3b1e      	subs	r3, #30
 80016a0:	409a      	lsls	r2, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	430a      	orrs	r2, r1
 80016a8:	60da      	str	r2, [r3, #12]
 80016aa:	e022      	b.n	80016f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6919      	ldr	r1, [r3, #16]
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	461a      	mov	r2, r3
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	2207      	movs	r2, #7
 80016c2:	fa02 f303 	lsl.w	r3, r2, r3
 80016c6:	43da      	mvns	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	400a      	ands	r2, r1
 80016ce:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6919      	ldr	r1, [r3, #16]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	689a      	ldr	r2, [r3, #8]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4618      	mov	r0, r3
 80016e2:	4603      	mov	r3, r0
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	4403      	add	r3, r0
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b06      	cmp	r3, #6
 80016f8:	d824      	bhi.n	8001744 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	3b05      	subs	r3, #5
 800170c:	221f      	movs	r2, #31
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43da      	mvns	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	400a      	ands	r2, r1
 800171a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685a      	ldr	r2, [r3, #4]
 800172e:	4613      	mov	r3, r2
 8001730:	009b      	lsls	r3, r3, #2
 8001732:	4413      	add	r3, r2
 8001734:	3b05      	subs	r3, #5
 8001736:	fa00 f203 	lsl.w	r2, r0, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
 8001742:	e04c      	b.n	80017de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d824      	bhi.n	8001796 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685a      	ldr	r2, [r3, #4]
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	3b23      	subs	r3, #35	; 0x23
 800175e:	221f      	movs	r2, #31
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43da      	mvns	r2, r3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	400a      	ands	r2, r1
 800176c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	4618      	mov	r0, r3
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685a      	ldr	r2, [r3, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	3b23      	subs	r3, #35	; 0x23
 8001788:	fa00 f203 	lsl.w	r2, r0, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	631a      	str	r2, [r3, #48]	; 0x30
 8001794:	e023      	b.n	80017de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685a      	ldr	r2, [r3, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	4413      	add	r3, r2
 80017a6:	3b41      	subs	r3, #65	; 0x41
 80017a8:	221f      	movs	r2, #31
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	400a      	ands	r2, r1
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	3b41      	subs	r3, #65	; 0x41
 80017d2:	fa00 f203 	lsl.w	r2, r0, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017de:	4b22      	ldr	r3, [pc, #136]	; (8001868 <HAL_ADC_ConfigChannel+0x234>)
 80017e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a21      	ldr	r2, [pc, #132]	; (800186c <HAL_ADC_ConfigChannel+0x238>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d109      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x1cc>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b12      	cmp	r3, #18
 80017f2:	d105      	bne.n	8001800 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a19      	ldr	r2, [pc, #100]	; (800186c <HAL_ADC_ConfigChannel+0x238>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d123      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x21e>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b10      	cmp	r3, #16
 8001810:	d003      	beq.n	800181a <HAL_ADC_ConfigChannel+0x1e6>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b11      	cmp	r3, #17
 8001818:	d11b      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b10      	cmp	r3, #16
 800182c:	d111      	bne.n	8001852 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800182e:	4b10      	ldr	r3, [pc, #64]	; (8001870 <HAL_ADC_ConfigChannel+0x23c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a10      	ldr	r2, [pc, #64]	; (8001874 <HAL_ADC_ConfigChannel+0x240>)
 8001834:	fba2 2303 	umull	r2, r3, r2, r3
 8001838:	0c9a      	lsrs	r2, r3, #18
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001844:	e002      	b.n	800184c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	3b01      	subs	r3, #1
 800184a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f9      	bne.n	8001846 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	40012300 	.word	0x40012300
 800186c:	40012000 	.word	0x40012000
 8001870:	20000008 	.word	0x20000008
 8001874:	431bde83 	.word	0x431bde83

08001878 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001880:	4b79      	ldr	r3, [pc, #484]	; (8001a68 <ADC_Init+0x1f0>)
 8001882:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	431a      	orrs	r2, r3
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	021a      	lsls	r2, r3, #8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	430a      	orrs	r2, r1
 80018c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685a      	ldr	r2, [r3, #4]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	430a      	orrs	r2, r1
 80018e2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6899      	ldr	r1, [r3, #8]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	68da      	ldr	r2, [r3, #12]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	430a      	orrs	r2, r1
 8001904:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190a:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <ADC_Init+0x1f4>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d022      	beq.n	8001956 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800191e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6899      	ldr	r1, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	430a      	orrs	r2, r1
 8001930:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6899      	ldr	r1, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	e00f      	b.n	8001976 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001964:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001974:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0202 	bic.w	r2, r2, #2
 8001984:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6899      	ldr	r1, [r3, #8]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	7e1b      	ldrb	r3, [r3, #24]
 8001990:	005a      	lsls	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	430a      	orrs	r2, r1
 8001998:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d01b      	beq.n	80019dc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	685a      	ldr	r2, [r3, #4]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019b2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019c2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6859      	ldr	r1, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	3b01      	subs	r3, #1
 80019d0:	035a      	lsls	r2, r3, #13
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	e007      	b.n	80019ec <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	685a      	ldr	r2, [r3, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ea:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69db      	ldr	r3, [r3, #28]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	051a      	lsls	r2, r3, #20
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a20:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a2e:	025a      	lsls	r2, r3, #9
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	689a      	ldr	r2, [r3, #8]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a46:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	6899      	ldr	r1, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	029a      	lsls	r2, r3, #10
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	609a      	str	r2, [r3, #8]
}
 8001a5c:	bf00      	nop
 8001a5e:	3714      	adds	r7, #20
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr
 8001a68:	40012300 	.word	0x40012300
 8001a6c:	0f000001 	.word	0x0f000001

08001a70 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e0ed      	b.n	8001c72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d102      	bne.n	8001aa8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f006 fb0e 	bl	80080c4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0202 	bic.w	r2, r2, #2
 8001ab6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ab8:	f7ff fab6 	bl	8001028 <HAL_GetTick>
 8001abc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001abe:	e012      	b.n	8001ae6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ac0:	f7ff fab2 	bl	8001028 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	d90b      	bls.n	8001ae6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2205      	movs	r2, #5
 8001ade:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e0c5      	b.n	8001c72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1e5      	bne.n	8001ac0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0201 	orr.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b04:	f7ff fa90 	bl	8001028 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b0a:	e012      	b.n	8001b32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b0c:	f7ff fa8c 	bl	8001028 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b0a      	cmp	r3, #10
 8001b18:	d90b      	bls.n	8001b32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b1e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2205      	movs	r2, #5
 8001b2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e09f      	b.n	8001c72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0e5      	beq.n	8001b0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e1b      	ldrb	r3, [r3, #24]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d108      	bne.n	8001b5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b56:	601a      	str	r2, [r3, #0]
 8001b58:	e007      	b.n	8001b6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7e5b      	ldrb	r3, [r3, #25]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d108      	bne.n	8001b84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e007      	b.n	8001b94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	7e9b      	ldrb	r3, [r3, #26]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d108      	bne.n	8001bae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0220 	orr.w	r2, r2, #32
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	e007      	b.n	8001bbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f022 0220 	bic.w	r2, r2, #32
 8001bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7edb      	ldrb	r3, [r3, #27]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d108      	bne.n	8001bd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 0210 	bic.w	r2, r2, #16
 8001bd4:	601a      	str	r2, [r3, #0]
 8001bd6:	e007      	b.n	8001be8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0210 	orr.w	r2, r2, #16
 8001be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	7f1b      	ldrb	r3, [r3, #28]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d108      	bne.n	8001c02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0208 	orr.w	r2, r2, #8
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e007      	b.n	8001c12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0208 	bic.w	r2, r2, #8
 8001c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	7f5b      	ldrb	r3, [r3, #29]
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d108      	bne.n	8001c2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	681a      	ldr	r2, [r3, #0]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f042 0204 	orr.w	r2, r2, #4
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	e007      	b.n	8001c3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0204 	bic.w	r2, r2, #4
 8001c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	431a      	orrs	r2, r3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	ea42 0103 	orr.w	r1, r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	1e5a      	subs	r2, r3, #1
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	430a      	orrs	r2, r1
 8001c60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c92:	68ba      	ldr	r2, [r7, #8]
 8001c94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c98:	4013      	ands	r3, r2
 8001c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ca8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cae:	4a04      	ldr	r2, [pc, #16]	; (8001cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	60d3      	str	r3, [r2, #12]
}
 8001cb4:	bf00      	nop
 8001cb6:	3714      	adds	r7, #20
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr
 8001cc0:	e000ed00 	.word	0xe000ed00

08001cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <__NVIC_GetPriorityGrouping+0x18>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	0a1b      	lsrs	r3, r3, #8
 8001cce:	f003 0307 	and.w	r3, r3, #7
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	db0b      	blt.n	8001d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	f003 021f 	and.w	r2, r3, #31
 8001cf8:	4907      	ldr	r1, [pc, #28]	; (8001d18 <__NVIC_EnableIRQ+0x38>)
 8001cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	2001      	movs	r0, #1
 8001d02:	fa00 f202 	lsl.w	r2, r0, r2
 8001d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	; (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	; (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	; 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de8:	d301      	bcc.n	8001dee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dea:	2301      	movs	r3, #1
 8001dec:	e00f      	b.n	8001e0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dee:	4a0a      	ldr	r2, [pc, #40]	; (8001e18 <SysTick_Config+0x40>)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df6:	210f      	movs	r1, #15
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfc:	f7ff ff8e 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e00:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <SysTick_Config+0x40>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e06:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <SysTick_Config+0x40>)
 8001e08:	2207      	movs	r2, #7
 8001e0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e0c:	2300      	movs	r3, #0
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	e000e010 	.word	0xe000e010

08001e1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b082      	sub	sp, #8
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e24:	6878      	ldr	r0, [r7, #4]
 8001e26:	f7ff ff29 	bl	8001c7c <__NVIC_SetPriorityGrouping>
}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b086      	sub	sp, #24
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	60b9      	str	r1, [r7, #8]
 8001e3c:	607a      	str	r2, [r7, #4]
 8001e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e44:	f7ff ff3e 	bl	8001cc4 <__NVIC_GetPriorityGrouping>
 8001e48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e4a:	687a      	ldr	r2, [r7, #4]
 8001e4c:	68b9      	ldr	r1, [r7, #8]
 8001e4e:	6978      	ldr	r0, [r7, #20]
 8001e50:	f7ff ff8e 	bl	8001d70 <NVIC_EncodePriority>
 8001e54:	4602      	mov	r2, r0
 8001e56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e5a:	4611      	mov	r1, r2
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff ff5d 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e62:	bf00      	nop
 8001e64:	3718      	adds	r7, #24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e6a:	b580      	push	{r7, lr}
 8001e6c:	b082      	sub	sp, #8
 8001e6e:	af00      	add	r7, sp, #0
 8001e70:	4603      	mov	r3, r0
 8001e72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff31 	bl	8001ce0 <__NVIC_EnableIRQ>
}
 8001e7e:	bf00      	nop
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff ffa2 	bl	8001dd8 <SysTick_Config>
 8001e94:	4603      	mov	r3, r0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	b083      	sub	sp, #12
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d004      	beq.n	8001ebc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2280      	movs	r2, #128	; 0x80
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e00c      	b.n	8001ed6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b089      	sub	sp, #36	; 0x24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	e16b      	b.n	80021d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f00:	2201      	movs	r2, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f14:	693a      	ldr	r2, [r7, #16]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	f040 815a 	bne.w	80021d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d00b      	beq.n	8001f3e <HAL_GPIO_Init+0x5a>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d007      	beq.n	8001f3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f32:	2b11      	cmp	r3, #17
 8001f34:	d003      	beq.n	8001f3e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	2b12      	cmp	r3, #18
 8001f3c:	d130      	bne.n	8001fa0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4013      	ands	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	69ba      	ldr	r2, [r7, #24]
 8001f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f74:	2201      	movs	r2, #1
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 0201 	and.w	r2, r3, #1
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0xfc>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	2b12      	cmp	r3, #18
 8001fde:	d123      	bne.n	8002028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	08da      	lsrs	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	3208      	adds	r2, #8
 8001fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	220f      	movs	r2, #15
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	691a      	ldr	r2, [r3, #16]
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	08da      	lsrs	r2, r3, #3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	3208      	adds	r2, #8
 8002022:	69b9      	ldr	r1, [r7, #24]
 8002024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 0203 	and.w	r2, r3, #3
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fa02 f303 	lsl.w	r3, r2, r3
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	f000 80b4 	beq.w	80021d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	4b5f      	ldr	r3, [pc, #380]	; (80021ec <HAL_GPIO_Init+0x308>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a5e      	ldr	r2, [pc, #376]	; (80021ec <HAL_GPIO_Init+0x308>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b5c      	ldr	r3, [pc, #368]	; (80021ec <HAL_GPIO_Init+0x308>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002086:	4a5a      	ldr	r2, [pc, #360]	; (80021f0 <HAL_GPIO_Init+0x30c>)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	3302      	adds	r3, #2
 800208e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	220f      	movs	r2, #15
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	4013      	ands	r3, r2
 80020a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a51      	ldr	r2, [pc, #324]	; (80021f4 <HAL_GPIO_Init+0x310>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d02b      	beq.n	800210a <HAL_GPIO_Init+0x226>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a50      	ldr	r2, [pc, #320]	; (80021f8 <HAL_GPIO_Init+0x314>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d025      	beq.n	8002106 <HAL_GPIO_Init+0x222>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a4f      	ldr	r2, [pc, #316]	; (80021fc <HAL_GPIO_Init+0x318>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01f      	beq.n	8002102 <HAL_GPIO_Init+0x21e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a4e      	ldr	r2, [pc, #312]	; (8002200 <HAL_GPIO_Init+0x31c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d019      	beq.n	80020fe <HAL_GPIO_Init+0x21a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a4d      	ldr	r2, [pc, #308]	; (8002204 <HAL_GPIO_Init+0x320>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0x216>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a4c      	ldr	r2, [pc, #304]	; (8002208 <HAL_GPIO_Init+0x324>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00d      	beq.n	80020f6 <HAL_GPIO_Init+0x212>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a4b      	ldr	r2, [pc, #300]	; (800220c <HAL_GPIO_Init+0x328>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <HAL_GPIO_Init+0x20e>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a4a      	ldr	r2, [pc, #296]	; (8002210 <HAL_GPIO_Init+0x32c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <HAL_GPIO_Init+0x20a>
 80020ea:	2307      	movs	r3, #7
 80020ec:	e00e      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020ee:	2308      	movs	r3, #8
 80020f0:	e00c      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e00a      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e008      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e006      	b.n	800210c <HAL_GPIO_Init+0x228>
 80020fe:	2303      	movs	r3, #3
 8002100:	e004      	b.n	800210c <HAL_GPIO_Init+0x228>
 8002102:	2302      	movs	r3, #2
 8002104:	e002      	b.n	800210c <HAL_GPIO_Init+0x228>
 8002106:	2301      	movs	r3, #1
 8002108:	e000      	b.n	800210c <HAL_GPIO_Init+0x228>
 800210a:	2300      	movs	r3, #0
 800210c:	69fa      	ldr	r2, [r7, #28]
 800210e:	f002 0203 	and.w	r2, r2, #3
 8002112:	0092      	lsls	r2, r2, #2
 8002114:	4093      	lsls	r3, r2
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800211c:	4934      	ldr	r1, [pc, #208]	; (80021f0 <HAL_GPIO_Init+0x30c>)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <HAL_GPIO_Init+0x330>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	43db      	mvns	r3, r3
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	4013      	ands	r3, r2
 8002138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d003      	beq.n	800214e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800214e:	4a31      	ldr	r2, [pc, #196]	; (8002214 <HAL_GPIO_Init+0x330>)
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002154:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <HAL_GPIO_Init+0x330>)
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	43db      	mvns	r3, r3
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002178:	4a26      	ldr	r2, [pc, #152]	; (8002214 <HAL_GPIO_Init+0x330>)
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800217e:	4b25      	ldr	r3, [pc, #148]	; (8002214 <HAL_GPIO_Init+0x330>)
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	43db      	mvns	r3, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4013      	ands	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d003      	beq.n	80021a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	4313      	orrs	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021a2:	4a1c      	ldr	r2, [pc, #112]	; (8002214 <HAL_GPIO_Init+0x330>)
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021a8:	4b1a      	ldr	r3, [pc, #104]	; (8002214 <HAL_GPIO_Init+0x330>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021cc:	4a11      	ldr	r2, [pc, #68]	; (8002214 <HAL_GPIO_Init+0x330>)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	3301      	adds	r3, #1
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	69fb      	ldr	r3, [r7, #28]
 80021da:	2b0f      	cmp	r3, #15
 80021dc:	f67f ae90 	bls.w	8001f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021e0:	bf00      	nop
 80021e2:	3724      	adds	r7, #36	; 0x24
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40013800 	.word	0x40013800
 80021f4:	40020000 	.word	0x40020000
 80021f8:	40020400 	.word	0x40020400
 80021fc:	40020800 	.word	0x40020800
 8002200:	40020c00 	.word	0x40020c00
 8002204:	40021000 	.word	0x40021000
 8002208:	40021400 	.word	0x40021400
 800220c:	40021800 	.word	0x40021800
 8002210:	40021c00 	.word	0x40021c00
 8002214:	40013c00 	.word	0x40013c00

08002218 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	460b      	mov	r3, r1
 8002222:	807b      	strh	r3, [r7, #2]
 8002224:	4613      	mov	r3, r2
 8002226:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	787b      	ldrb	r3, [r7, #1]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d003      	beq.n	8002236 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800222e:	887a      	ldrh	r2, [r7, #2]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002234:	e003      	b.n	800223e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002236:	887b      	ldrh	r3, [r7, #2]
 8002238:	041a      	lsls	r2, r3, #16
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	619a      	str	r2, [r3, #24]
}
 800223e:	bf00      	nop
 8002240:	370c      	adds	r7, #12
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr

0800224a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800224a:	b480      	push	{r7}
 800224c:	b083      	sub	sp, #12
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
 8002252:	460b      	mov	r3, r1
 8002254:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	695a      	ldr	r2, [r3, #20]
 800225a:	887b      	ldrh	r3, [r7, #2]
 800225c:	401a      	ands	r2, r3
 800225e:	887b      	ldrh	r3, [r7, #2]
 8002260:	429a      	cmp	r2, r3
 8002262:	d104      	bne.n	800226e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002264:	887b      	ldrh	r3, [r7, #2]
 8002266:	041a      	lsls	r2, r3, #16
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 800226c:	e002      	b.n	8002274 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800226e:	887a      	ldrh	r2, [r7, #2]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	619a      	str	r2, [r3, #24]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	4603      	mov	r3, r0
 8002288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800228a:	4b08      	ldr	r3, [pc, #32]	; (80022ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800228c:	695a      	ldr	r2, [r3, #20]
 800228e:	88fb      	ldrh	r3, [r7, #6]
 8002290:	4013      	ands	r3, r2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d006      	beq.n	80022a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800229c:	88fb      	ldrh	r3, [r7, #6]
 800229e:	4618      	mov	r0, r3
 80022a0:	f005 fe0a 	bl	8007eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 80022a4:	bf00      	nop
 80022a6:	3708      	adds	r7, #8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40013c00 	.word	0x40013c00

080022b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e11f      	b.n	8002502 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d106      	bne.n	80022dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022d6:	6878      	ldr	r0, [r7, #4]
 80022d8:	f005 ff3c 	bl	8008154 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2224      	movs	r2, #36	; 0x24
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f022 0201 	bic.w	r2, r2, #1
 80022f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002302:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002312:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002314:	f001 fb8e 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8002318:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	4a7b      	ldr	r2, [pc, #492]	; (800250c <HAL_I2C_Init+0x25c>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d807      	bhi.n	8002334 <HAL_I2C_Init+0x84>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a7a      	ldr	r2, [pc, #488]	; (8002510 <HAL_I2C_Init+0x260>)
 8002328:	4293      	cmp	r3, r2
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	e006      	b.n	8002342 <HAL_I2C_Init+0x92>
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4a77      	ldr	r2, [pc, #476]	; (8002514 <HAL_I2C_Init+0x264>)
 8002338:	4293      	cmp	r3, r2
 800233a:	bf94      	ite	ls
 800233c:	2301      	movls	r3, #1
 800233e:	2300      	movhi	r3, #0
 8002340:	b2db      	uxtb	r3, r3
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0db      	b.n	8002502 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	4a72      	ldr	r2, [pc, #456]	; (8002518 <HAL_I2C_Init+0x268>)
 800234e:	fba2 2303 	umull	r2, r3, r2, r3
 8002352:	0c9b      	lsrs	r3, r3, #18
 8002354:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	4a64      	ldr	r2, [pc, #400]	; (800250c <HAL_I2C_Init+0x25c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d802      	bhi.n	8002384 <HAL_I2C_Init+0xd4>
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	3301      	adds	r3, #1
 8002382:	e009      	b.n	8002398 <HAL_I2C_Init+0xe8>
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800238a:	fb02 f303 	mul.w	r3, r2, r3
 800238e:	4a63      	ldr	r2, [pc, #396]	; (800251c <HAL_I2C_Init+0x26c>)
 8002390:	fba2 2303 	umull	r2, r3, r2, r3
 8002394:	099b      	lsrs	r3, r3, #6
 8002396:	3301      	adds	r3, #1
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	6812      	ldr	r2, [r2, #0]
 800239c:	430b      	orrs	r3, r1
 800239e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	4956      	ldr	r1, [pc, #344]	; (800250c <HAL_I2C_Init+0x25c>)
 80023b4:	428b      	cmp	r3, r1
 80023b6:	d80d      	bhi.n	80023d4 <HAL_I2C_Init+0x124>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	1e59      	subs	r1, r3, #1
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023c6:	3301      	adds	r3, #1
 80023c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023cc:	2b04      	cmp	r3, #4
 80023ce:	bf38      	it	cc
 80023d0:	2304      	movcc	r3, #4
 80023d2:	e04f      	b.n	8002474 <HAL_I2C_Init+0x1c4>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d111      	bne.n	8002400 <HAL_I2C_Init+0x150>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	1e58      	subs	r0, r3, #1
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6859      	ldr	r1, [r3, #4]
 80023e4:	460b      	mov	r3, r1
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	440b      	add	r3, r1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	3301      	adds	r3, #1
 80023f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf0c      	ite	eq
 80023f8:	2301      	moveq	r3, #1
 80023fa:	2300      	movne	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e012      	b.n	8002426 <HAL_I2C_Init+0x176>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	1e58      	subs	r0, r3, #1
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6859      	ldr	r1, [r3, #4]
 8002408:	460b      	mov	r3, r1
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	440b      	add	r3, r1
 800240e:	0099      	lsls	r1, r3, #2
 8002410:	440b      	add	r3, r1
 8002412:	fbb0 f3f3 	udiv	r3, r0, r3
 8002416:	3301      	adds	r3, #1
 8002418:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800241c:	2b00      	cmp	r3, #0
 800241e:	bf0c      	ite	eq
 8002420:	2301      	moveq	r3, #1
 8002422:	2300      	movne	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x17e>
 800242a:	2301      	movs	r3, #1
 800242c:	e022      	b.n	8002474 <HAL_I2C_Init+0x1c4>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10e      	bne.n	8002454 <HAL_I2C_Init+0x1a4>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1e58      	subs	r0, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6859      	ldr	r1, [r3, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	440b      	add	r3, r1
 8002444:	fbb0 f3f3 	udiv	r3, r0, r3
 8002448:	3301      	adds	r3, #1
 800244a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002452:	e00f      	b.n	8002474 <HAL_I2C_Init+0x1c4>
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1e58      	subs	r0, r3, #1
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6859      	ldr	r1, [r3, #4]
 800245c:	460b      	mov	r3, r1
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	0099      	lsls	r1, r3, #2
 8002464:	440b      	add	r3, r1
 8002466:	fbb0 f3f3 	udiv	r3, r0, r3
 800246a:	3301      	adds	r3, #1
 800246c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002470:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6809      	ldr	r1, [r1, #0]
 8002478:	4313      	orrs	r3, r2
 800247a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69da      	ldr	r2, [r3, #28]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	430a      	orrs	r2, r1
 8002496:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	6911      	ldr	r1, [r2, #16]
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	4311      	orrs	r1, r2
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	6812      	ldr	r2, [r2, #0]
 80024b4:	430b      	orrs	r3, r1
 80024b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695a      	ldr	r2, [r3, #20]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f042 0201 	orr.w	r2, r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2220      	movs	r2, #32
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	000186a0 	.word	0x000186a0
 8002510:	001e847f 	.word	0x001e847f
 8002514:	003d08ff 	.word	0x003d08ff
 8002518:	431bde83 	.word	0x431bde83
 800251c:	10624dd3 	.word	0x10624dd3

08002520 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b088      	sub	sp, #32
 8002524:	af02      	add	r7, sp, #8
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	607a      	str	r2, [r7, #4]
 800252a:	461a      	mov	r2, r3
 800252c:	460b      	mov	r3, r1
 800252e:	817b      	strh	r3, [r7, #10]
 8002530:	4613      	mov	r3, r2
 8002532:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002534:	f7fe fd78 	bl	8001028 <HAL_GetTick>
 8002538:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b20      	cmp	r3, #32
 8002544:	f040 80e0 	bne.w	8002708 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	2319      	movs	r3, #25
 800254e:	2201      	movs	r2, #1
 8002550:	4970      	ldr	r1, [pc, #448]	; (8002714 <HAL_I2C_Master_Transmit+0x1f4>)
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fc56 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d001      	beq.n	8002562 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
 8002560:	e0d3      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_I2C_Master_Transmit+0x50>
 800256c:	2302      	movs	r3, #2
 800256e:	e0cc      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b01      	cmp	r3, #1
 8002584:	d007      	beq.n	8002596 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f042 0201 	orr.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2221      	movs	r2, #33	; 0x21
 80025aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2210      	movs	r2, #16
 80025b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	893a      	ldrh	r2, [r7, #8]
 80025c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4a50      	ldr	r2, [pc, #320]	; (8002718 <HAL_I2C_Master_Transmit+0x1f8>)
 80025d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025d8:	8979      	ldrh	r1, [r7, #10]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fac2 	bl	8002b68 <I2C_MasterRequestWrite>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e08d      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002604:	e066      	b.n	80026d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	6a39      	ldr	r1, [r7, #32]
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f000 fcd0 	bl	8002fb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00d      	beq.n	8002632 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261a:	2b04      	cmp	r3, #4
 800261c:	d107      	bne.n	800262e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800262c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e06b      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	781a      	ldrb	r2, [r3, #0]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002642:	1c5a      	adds	r2, r3, #1
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	3b01      	subs	r3, #1
 8002650:	b29a      	uxth	r2, r3
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b04      	cmp	r3, #4
 800266e:	d11b      	bne.n	80026a8 <HAL_I2C_Master_Transmit+0x188>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	2b00      	cmp	r3, #0
 8002676:	d017      	beq.n	80026a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800267c:	781a      	ldrb	r2, [r3, #0]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002692:	b29b      	uxth	r3, r3
 8002694:	3b01      	subs	r3, #1
 8002696:	b29a      	uxth	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026a0:	3b01      	subs	r3, #1
 80026a2:	b29a      	uxth	r2, r3
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	6a39      	ldr	r1, [r7, #32]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 fcc0 	bl	8003032 <I2C_WaitOnBTFFlagUntilTimeout>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d00d      	beq.n	80026d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b04      	cmp	r3, #4
 80026be:	d107      	bne.n	80026d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e01a      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d194      	bne.n	8002606 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
  }
}
 800270a:	4618      	mov	r0, r3
 800270c:	3718      	adds	r7, #24
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	00100002 	.word	0x00100002
 8002718:	ffff0000 	.word	0xffff0000

0800271c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08c      	sub	sp, #48	; 0x30
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	607a      	str	r2, [r7, #4]
 8002726:	461a      	mov	r2, r3
 8002728:	460b      	mov	r3, r1
 800272a:	817b      	strh	r3, [r7, #10]
 800272c:	4613      	mov	r3, r2
 800272e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002730:	f7fe fc7a 	bl	8001028 <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b20      	cmp	r3, #32
 8002740:	f040 820b 	bne.w	8002b5a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	9300      	str	r3, [sp, #0]
 8002748:	2319      	movs	r3, #25
 800274a:	2201      	movs	r2, #1
 800274c:	497c      	ldr	r1, [pc, #496]	; (8002940 <HAL_I2C_Master_Receive+0x224>)
 800274e:	68f8      	ldr	r0, [r7, #12]
 8002750:	f000 fb58 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800275a:	2302      	movs	r3, #2
 800275c:	e1fe      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_I2C_Master_Receive+0x50>
 8002768:	2302      	movs	r3, #2
 800276a:	e1f7      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b01      	cmp	r3, #1
 8002780:	d007      	beq.n	8002792 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2222      	movs	r2, #34	; 0x22
 80027a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2210      	movs	r2, #16
 80027ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	893a      	ldrh	r2, [r7, #8]
 80027c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c8:	b29a      	uxth	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4a5c      	ldr	r2, [pc, #368]	; (8002944 <HAL_I2C_Master_Receive+0x228>)
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027d4:	8979      	ldrh	r1, [r7, #10]
 80027d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fa46 	bl	8002c6c <I2C_MasterRequestRead>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e1b8      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d113      	bne.n	800281a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	623b      	str	r3, [r7, #32]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	623b      	str	r3, [r7, #32]
 8002806:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	e18c      	b.n	8002b34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281e:	2b01      	cmp	r3, #1
 8002820:	d11b      	bne.n	800285a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002830:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002832:	2300      	movs	r3, #0
 8002834:	61fb      	str	r3, [r7, #28]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	61fb      	str	r3, [r7, #28]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	61fb      	str	r3, [r7, #28]
 8002846:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e16c      	b.n	8002b34 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	2b02      	cmp	r3, #2
 8002860:	d11b      	bne.n	800289a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002870:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002880:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	61bb      	str	r3, [r7, #24]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	e14c      	b.n	8002b34 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80028c0:	e138      	b.n	8002b34 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	f200 80f1 	bhi.w	8002aae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d123      	bne.n	800291c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80028d8:	68f8      	ldr	r0, [r7, #12]
 80028da:	f000 fbeb 	bl	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e139      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691a      	ldr	r2, [r3, #16]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	3b01      	subs	r3, #1
 8002914:	b29a      	uxth	r2, r3
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	855a      	strh	r2, [r3, #42]	; 0x2a
 800291a:	e10b      	b.n	8002b34 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	2b02      	cmp	r3, #2
 8002922:	d14e      	bne.n	80029c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	2200      	movs	r2, #0
 800292c:	4906      	ldr	r1, [pc, #24]	; (8002948 <HAL_I2C_Master_Receive+0x22c>)
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f000 fa68 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d008      	beq.n	800294c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e10e      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
 800293e:	bf00      	nop
 8002940:	00100002 	.word	0x00100002
 8002944:	ffff0000 	.word	0xffff0000
 8002948:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	691a      	ldr	r2, [r3, #16]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	3b01      	subs	r3, #1
 8002988:	b29a      	uxth	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	b2d2      	uxtb	r2, r2
 800299a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	1c5a      	adds	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029aa:	3b01      	subs	r3, #1
 80029ac:	b29a      	uxth	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b6:	b29b      	uxth	r3, r3
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c0:	e0b8      	b.n	8002b34 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c8:	2200      	movs	r2, #0
 80029ca:	4966      	ldr	r1, [pc, #408]	; (8002b64 <HAL_I2C_Master_Receive+0x448>)
 80029cc:	68f8      	ldr	r0, [r7, #12]
 80029ce:	f000 fa19 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0bf      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	691a      	ldr	r2, [r3, #16]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	3b01      	subs	r3, #1
 8002a18:	b29a      	uxth	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a20:	9300      	str	r3, [sp, #0]
 8002a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a24:	2200      	movs	r2, #0
 8002a26:	494f      	ldr	r1, [pc, #316]	; (8002b64 <HAL_I2C_Master_Receive+0x448>)
 8002a28:	68f8      	ldr	r0, [r7, #12]
 8002a2a:	f000 f9eb 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e091      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691a      	ldr	r2, [r3, #16]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a64:	3b01      	subs	r3, #1
 8002a66:	b29a      	uxth	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29a      	uxth	r2, r3
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	1c5a      	adds	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aac:	e042      	b.n	8002b34 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 fafe 	bl	80030b4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e04c      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	b2d2      	uxtb	r2, r2
 8002ace:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ade:	3b01      	subs	r3, #1
 8002ae0:	b29a      	uxth	r2, r3
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	3b01      	subs	r3, #1
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d118      	bne.n	8002b34 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	691a      	ldr	r2, [r3, #16]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f47f aec2 	bne.w	80028c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e000      	b.n	8002b5c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b5a:	2302      	movs	r3, #2
  }
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3728      	adds	r7, #40	; 0x28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	00010004 	.word	0x00010004

08002b68 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	607a      	str	r2, [r7, #4]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	460b      	mov	r3, r1
 8002b76:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2b08      	cmp	r3, #8
 8002b82:	d006      	beq.n	8002b92 <I2C_MasterRequestWrite+0x2a>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d003      	beq.n	8002b92 <I2C_MasterRequestWrite+0x2a>
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b90:	d108      	bne.n	8002ba4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	e00b      	b.n	8002bbc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	2b12      	cmp	r3, #18
 8002baa:	d107      	bne.n	8002bbc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bc8:	68f8      	ldr	r0, [r7, #12]
 8002bca:	f000 f91b 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d00c      	beq.n	8002bee <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d003      	beq.n	8002bea <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e035      	b.n	8002c5a <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bf6:	d108      	bne.n	8002c0a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bf8:	897b      	ldrh	r3, [r7, #10]
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c06:	611a      	str	r2, [r3, #16]
 8002c08:	e01b      	b.n	8002c42 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c0a:	897b      	ldrh	r3, [r7, #10]
 8002c0c:	11db      	asrs	r3, r3, #7
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f003 0306 	and.w	r3, r3, #6
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	f063 030f 	orn	r3, r3, #15
 8002c1a:	b2da      	uxtb	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	490f      	ldr	r1, [pc, #60]	; (8002c64 <I2C_MasterRequestWrite+0xfc>)
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f000 f942 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e010      	b.n	8002c5a <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c38:	897b      	ldrh	r3, [r7, #10]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	4908      	ldr	r1, [pc, #32]	; (8002c68 <I2C_MasterRequestWrite+0x100>)
 8002c48:	68f8      	ldr	r0, [r7, #12]
 8002c4a:	f000 f932 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d001      	beq.n	8002c58 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e000      	b.n	8002c5a <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002c58:	2300      	movs	r3, #0
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	00010008 	.word	0x00010008
 8002c68:	00010002 	.word	0x00010002

08002c6c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af02      	add	r7, sp, #8
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	607a      	str	r2, [r7, #4]
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c80:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c90:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d006      	beq.n	8002ca6 <I2C_MasterRequestRead+0x3a>
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d003      	beq.n	8002ca6 <I2C_MasterRequestRead+0x3a>
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ca4:	d108      	bne.n	8002cb8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	e00b      	b.n	8002cd0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	2b11      	cmp	r3, #17
 8002cbe:	d107      	bne.n	8002cd0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f891 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00c      	beq.n	8002d02 <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e078      	b.n	8002df4 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	691b      	ldr	r3, [r3, #16]
 8002d06:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d0a:	d108      	bne.n	8002d1e <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d0c:	897b      	ldrh	r3, [r7, #10]
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	b2da      	uxtb	r2, r3
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	611a      	str	r2, [r3, #16]
 8002d1c:	e05e      	b.n	8002ddc <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d1e:	897b      	ldrh	r3, [r7, #10]
 8002d20:	11db      	asrs	r3, r3, #7
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	f003 0306 	and.w	r3, r3, #6
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	f063 030f 	orn	r3, r3, #15
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4930      	ldr	r1, [pc, #192]	; (8002dfc <I2C_MasterRequestRead+0x190>)
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 f8b8 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e053      	b.n	8002df4 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d4c:	897b      	ldrh	r3, [r7, #10]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	4929      	ldr	r1, [pc, #164]	; (8002e00 <I2C_MasterRequestRead+0x194>)
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f8a8 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e043      	b.n	8002df4 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	695b      	ldr	r3, [r3, #20]
 8002d76:	613b      	str	r3, [r7, #16]
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	613b      	str	r3, [r7, #16]
 8002d80:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d90:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 f830 	bl	8002e04 <I2C_WaitOnFlagUntilTimeout>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00c      	beq.n	8002dc4 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e017      	b.n	8002df4 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dc4:	897b      	ldrh	r3, [r7, #10]
 8002dc6:	11db      	asrs	r3, r3, #7
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	f003 0306 	and.w	r3, r3, #6
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	f063 030e 	orn	r3, r3, #14
 8002dd4:	b2da      	uxtb	r2, r3
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	4907      	ldr	r1, [pc, #28]	; (8002e00 <I2C_MasterRequestRead+0x194>)
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 f865 	bl	8002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e000      	b.n	8002df4 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3718      	adds	r7, #24
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	00010008 	.word	0x00010008
 8002e00:	00010002 	.word	0x00010002

08002e04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e14:	e025      	b.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e1c:	d021      	beq.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7fe f903 	bl	8001028 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	683a      	ldr	r2, [r7, #0]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e023      	b.n	8002eaa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d10d      	bne.n	8002e88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	43da      	mvns	r2, r3
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	4013      	ands	r3, r2
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	bf0c      	ite	eq
 8002e7e:	2301      	moveq	r3, #1
 8002e80:	2300      	movne	r3, #0
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	461a      	mov	r2, r3
 8002e86:	e00c      	b.n	8002ea2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4013      	ands	r3, r2
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf0c      	ite	eq
 8002e9a:	2301      	moveq	r3, #1
 8002e9c:	2300      	movne	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	79fb      	ldrb	r3, [r7, #7]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d0b6      	beq.n	8002e16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	60f8      	str	r0, [r7, #12]
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ec0:	e051      	b.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed0:	d123      	bne.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ee0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002eea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2220      	movs	r2, #32
 8002ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	f043 0204 	orr.w	r2, r3, #4
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e046      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f20:	d021      	beq.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f22:	f7fe f881 	bl	8001028 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d302      	bcc.n	8002f38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d116      	bne.n	8002f66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	f043 0220 	orr.w	r2, r3, #32
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e020      	b.n	8002fa8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	0c1b      	lsrs	r3, r3, #16
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d10c      	bne.n	8002f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695b      	ldr	r3, [r3, #20]
 8002f76:	43da      	mvns	r2, r3
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	bf14      	ite	ne
 8002f82:	2301      	movne	r3, #1
 8002f84:	2300      	moveq	r3, #0
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	e00b      	b.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	43da      	mvns	r2, r3
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4013      	ands	r3, r2
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	bf14      	ite	ne
 8002f9c:	2301      	movne	r3, #1
 8002f9e:	2300      	moveq	r3, #0
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d18d      	bne.n	8002ec2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fbc:	e02d      	b.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f8ce 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e02d      	b.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd4:	d021      	beq.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd6:	f7fe f827 	bl	8001028 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d302      	bcc.n	8002fec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d116      	bne.n	800301a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003006:	f043 0220 	orr.w	r2, r3, #32
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e007      	b.n	800302a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003024:	2b80      	cmp	r3, #128	; 0x80
 8003026:	d1ca      	bne.n	8002fbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3710      	adds	r7, #16
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
 800303a:	60b9      	str	r1, [r7, #8]
 800303c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303e:	e02d      	b.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f88d 	bl	8003160 <I2C_IsAcknowledgeFailed>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e02d      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003056:	d021      	beq.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003058:	f7fd ffe6 	bl	8001028 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	429a      	cmp	r2, r3
 8003066:	d302      	bcc.n	800306e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d116      	bne.n	800309c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2200      	movs	r2, #0
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e007      	b.n	80030ac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b04      	cmp	r3, #4
 80030a8:	d1ca      	bne.n	8003040 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c0:	e042      	b.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	695b      	ldr	r3, [r3, #20]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	2b10      	cmp	r3, #16
 80030ce:	d119      	bne.n	8003104 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0210 	mvn.w	r2, #16
 80030d8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e029      	b.n	8003158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003104:	f7fd ff90 	bl	8001028 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	68ba      	ldr	r2, [r7, #8]
 8003110:	429a      	cmp	r2, r3
 8003112:	d302      	bcc.n	800311a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d116      	bne.n	8003148 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e007      	b.n	8003158 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	695b      	ldr	r3, [r3, #20]
 800314e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003152:	2b40      	cmp	r3, #64	; 0x40
 8003154:	d1b5      	bne.n	80030c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003156:	2300      	movs	r3, #0
}
 8003158:	4618      	mov	r0, r3
 800315a:	3710      	adds	r7, #16
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}

08003160 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d11b      	bne.n	80031b0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003180:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	f043 0204 	orr.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e000      	b.n	80031b2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031b0:	2300      	movs	r3, #0
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d101      	bne.n	80031d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e25b      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d075      	beq.n	80032ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031de:	4ba3      	ldr	r3, [pc, #652]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d00c      	beq.n	8003204 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4ba0      	ldr	r3, [pc, #640]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031f2:	2b08      	cmp	r3, #8
 80031f4:	d112      	bne.n	800321c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f6:	4b9d      	ldr	r3, [pc, #628]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003202:	d10b      	bne.n	800321c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003204:	4b99      	ldr	r3, [pc, #612]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d05b      	beq.n	80032c8 <HAL_RCC_OscConfig+0x108>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d157      	bne.n	80032c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e236      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d106      	bne.n	8003234 <HAL_RCC_OscConfig+0x74>
 8003226:	4b91      	ldr	r3, [pc, #580]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a90      	ldr	r2, [pc, #576]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 800322c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	e01d      	b.n	8003270 <HAL_RCC_OscConfig+0xb0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x98>
 800323e:	4b8b      	ldr	r3, [pc, #556]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a8a      	ldr	r2, [pc, #552]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003244:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4b88      	ldr	r3, [pc, #544]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a87      	ldr	r2, [pc, #540]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003250:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003254:	6013      	str	r3, [r2, #0]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0xb0>
 8003258:	4b84      	ldr	r3, [pc, #528]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a83      	ldr	r2, [pc, #524]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 800325e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	4b81      	ldr	r3, [pc, #516]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a80      	ldr	r2, [pc, #512]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 800326a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d013      	beq.n	80032a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003278:	f7fd fed6 	bl	8001028 <HAL_GetTick>
 800327c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	e008      	b.n	8003292 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003280:	f7fd fed2 	bl	8001028 <HAL_GetTick>
 8003284:	4602      	mov	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	2b64      	cmp	r3, #100	; 0x64
 800328c:	d901      	bls.n	8003292 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e1fb      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	4b76      	ldr	r3, [pc, #472]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800329a:	2b00      	cmp	r3, #0
 800329c:	d0f0      	beq.n	8003280 <HAL_RCC_OscConfig+0xc0>
 800329e:	e014      	b.n	80032ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a0:	f7fd fec2 	bl	8001028 <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a8:	f7fd febe 	bl	8001028 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b64      	cmp	r3, #100	; 0x64
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e1e7      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	4b6c      	ldr	r3, [pc, #432]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0xe8>
 80032c6:	e000      	b.n	80032ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d063      	beq.n	800339e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d6:	4b65      	ldr	r3, [pc, #404]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00b      	beq.n	80032fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b62      	ldr	r3, [pc, #392]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ea:	2b08      	cmp	r3, #8
 80032ec:	d11c      	bne.n	8003328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ee:	4b5f      	ldr	r3, [pc, #380]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d116      	bne.n	8003328 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fa:	4b5c      	ldr	r3, [pc, #368]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x152>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d001      	beq.n	8003312 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e1bb      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003312:	4b56      	ldr	r3, [pc, #344]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	4952      	ldr	r1, [pc, #328]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003322:	4313      	orrs	r3, r2
 8003324:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003326:	e03a      	b.n	800339e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003330:	4b4f      	ldr	r3, [pc, #316]	; (8003470 <HAL_RCC_OscConfig+0x2b0>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003336:	f7fd fe77 	bl	8001028 <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333e:	f7fd fe73 	bl	8001028 <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e19c      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800335c:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	4940      	ldr	r1, [pc, #256]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 800336c:	4313      	orrs	r3, r2
 800336e:	600b      	str	r3, [r1, #0]
 8003370:	e015      	b.n	800339e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003372:	4b3f      	ldr	r3, [pc, #252]	; (8003470 <HAL_RCC_OscConfig+0x2b0>)
 8003374:	2200      	movs	r2, #0
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fd fe56 	bl	8001028 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003380:	f7fd fe52 	bl	8001028 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e17b      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d1f0      	bne.n	8003380 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0308 	and.w	r3, r3, #8
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d030      	beq.n	800340c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b2:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCC_OscConfig+0x2b4>)
 80033b4:	2201      	movs	r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b8:	f7fd fe36 	bl	8001028 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c0:	f7fd fe32 	bl	8001028 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e15b      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	4b26      	ldr	r3, [pc, #152]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 80033d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x200>
 80033de:	e015      	b.n	800340c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e0:	4b24      	ldr	r3, [pc, #144]	; (8003474 <HAL_RCC_OscConfig+0x2b4>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fd fe1f 	bl	8001028 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033ec:	e008      	b.n	8003400 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ee:	f7fd fe1b 	bl	8001028 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d901      	bls.n	8003400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e144      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b1a      	ldr	r3, [pc, #104]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1f0      	bne.n	80033ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 80a0 	beq.w	800355a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b13      	ldr	r3, [pc, #76]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a0e      	ldr	r2, [pc, #56]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_OscConfig+0x2ac>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_OscConfig+0x2b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d121      	bne.n	800349a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_RCC_OscConfig+0x2b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a07      	ldr	r2, [pc, #28]	; (8003478 <HAL_RCC_OscConfig+0x2b8>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fd fde1 	bl	8001028 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e011      	b.n	800348e <HAL_RCC_OscConfig+0x2ce>
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	42470000 	.word	0x42470000
 8003474:	42470e80 	.word	0x42470e80
 8003478:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347c:	f7fd fdd4 	bl	8001028 <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	2b02      	cmp	r3, #2
 8003488:	d901      	bls.n	800348e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800348a:	2303      	movs	r3, #3
 800348c:	e0fd      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348e:	4b81      	ldr	r3, [pc, #516]	; (8003694 <HAL_RCC_OscConfig+0x4d4>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0f0      	beq.n	800347c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d106      	bne.n	80034b0 <HAL_RCC_OscConfig+0x2f0>
 80034a2:	4b7d      	ldr	r3, [pc, #500]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a6:	4a7c      	ldr	r2, [pc, #496]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034a8:	f043 0301 	orr.w	r3, r3, #1
 80034ac:	6713      	str	r3, [r2, #112]	; 0x70
 80034ae:	e01c      	b.n	80034ea <HAL_RCC_OscConfig+0x32a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b05      	cmp	r3, #5
 80034b6:	d10c      	bne.n	80034d2 <HAL_RCC_OscConfig+0x312>
 80034b8:	4b77      	ldr	r3, [pc, #476]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034bc:	4a76      	ldr	r2, [pc, #472]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034be:	f043 0304 	orr.w	r3, r3, #4
 80034c2:	6713      	str	r3, [r2, #112]	; 0x70
 80034c4:	4b74      	ldr	r3, [pc, #464]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c8:	4a73      	ldr	r2, [pc, #460]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034ca:	f043 0301 	orr.w	r3, r3, #1
 80034ce:	6713      	str	r3, [r2, #112]	; 0x70
 80034d0:	e00b      	b.n	80034ea <HAL_RCC_OscConfig+0x32a>
 80034d2:	4b71      	ldr	r3, [pc, #452]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a70      	ldr	r2, [pc, #448]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	4b6e      	ldr	r3, [pc, #440]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a6d      	ldr	r2, [pc, #436]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80034e4:	f023 0304 	bic.w	r3, r3, #4
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d015      	beq.n	800351e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f2:	f7fd fd99 	bl	8001028 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	e00a      	b.n	8003510 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034fa:	f7fd fd95 	bl	8001028 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	f241 3288 	movw	r2, #5000	; 0x1388
 8003508:	4293      	cmp	r3, r2
 800350a:	d901      	bls.n	8003510 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e0bc      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003510:	4b61      	ldr	r3, [pc, #388]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	f003 0302 	and.w	r3, r3, #2
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0ee      	beq.n	80034fa <HAL_RCC_OscConfig+0x33a>
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800351e:	f7fd fd83 	bl	8001028 <HAL_GetTick>
 8003522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003524:	e00a      	b.n	800353c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003526:	f7fd fd7f 	bl	8001028 <HAL_GetTick>
 800352a:	4602      	mov	r2, r0
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	1ad3      	subs	r3, r2, r3
 8003530:	f241 3288 	movw	r2, #5000	; 0x1388
 8003534:	4293      	cmp	r3, r2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e0a6      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353c:	4b56      	ldr	r3, [pc, #344]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 800353e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003540:	f003 0302 	and.w	r3, r3, #2
 8003544:	2b00      	cmp	r3, #0
 8003546:	d1ee      	bne.n	8003526 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354e:	4b52      	ldr	r3, [pc, #328]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 8003550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003552:	4a51      	ldr	r2, [pc, #324]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 8003554:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8092 	beq.w	8003688 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003564:	4b4c      	ldr	r3, [pc, #304]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
 800356c:	2b08      	cmp	r3, #8
 800356e:	d05c      	beq.n	800362a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d141      	bne.n	80035fc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003578:	4b48      	ldr	r3, [pc, #288]	; (800369c <HAL_RCC_OscConfig+0x4dc>)
 800357a:	2200      	movs	r2, #0
 800357c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357e:	f7fd fd53 	bl	8001028 <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003584:	e008      	b.n	8003598 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003586:	f7fd fd4f 	bl	8001028 <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d901      	bls.n	8003598 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e078      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003598:	4b3f      	ldr	r3, [pc, #252]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d1f0      	bne.n	8003586 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a1b      	ldr	r3, [r3, #32]
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	019b      	lsls	r3, r3, #6
 80035b4:	431a      	orrs	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	085b      	lsrs	r3, r3, #1
 80035bc:	3b01      	subs	r3, #1
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	061b      	lsls	r3, r3, #24
 80035c8:	4933      	ldr	r1, [pc, #204]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80035ca:	4313      	orrs	r3, r2
 80035cc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035ce:	4b33      	ldr	r3, [pc, #204]	; (800369c <HAL_RCC_OscConfig+0x4dc>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fd fd28 	bl	8001028 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035dc:	f7fd fd24 	bl	8001028 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e04d      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035ee:	4b2a      	ldr	r3, [pc, #168]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d0f0      	beq.n	80035dc <HAL_RCC_OscConfig+0x41c>
 80035fa:	e045      	b.n	8003688 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035fc:	4b27      	ldr	r3, [pc, #156]	; (800369c <HAL_RCC_OscConfig+0x4dc>)
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003602:	f7fd fd11 	bl	8001028 <HAL_GetTick>
 8003606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003608:	e008      	b.n	800361c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800360a:	f7fd fd0d 	bl	8001028 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	2b02      	cmp	r3, #2
 8003616:	d901      	bls.n	800361c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003618:	2303      	movs	r3, #3
 800361a:	e036      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1f0      	bne.n	800360a <HAL_RCC_OscConfig+0x44a>
 8003628:	e02e      	b.n	8003688 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	699b      	ldr	r3, [r3, #24]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d101      	bne.n	8003636 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e029      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003636:	4b18      	ldr	r3, [pc, #96]	; (8003698 <HAL_RCC_OscConfig+0x4d8>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69db      	ldr	r3, [r3, #28]
 8003646:	429a      	cmp	r2, r3
 8003648:	d11c      	bne.n	8003684 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003654:	429a      	cmp	r2, r3
 8003656:	d115      	bne.n	8003684 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003658:	68fa      	ldr	r2, [r7, #12]
 800365a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800365e:	4013      	ands	r3, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003664:	4293      	cmp	r3, r2
 8003666:	d10d      	bne.n	8003684 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003672:	429a      	cmp	r2, r3
 8003674:	d106      	bne.n	8003684 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3718      	adds	r7, #24
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	40007000 	.word	0x40007000
 8003698:	40023800 	.word	0x40023800
 800369c:	42470060 	.word	0x42470060

080036a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e0cc      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b4:	4b68      	ldr	r3, [pc, #416]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 030f 	and.w	r3, r3, #15
 80036bc:	683a      	ldr	r2, [r7, #0]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d90c      	bls.n	80036dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c2:	4b65      	ldr	r3, [pc, #404]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ca:	4b63      	ldr	r3, [pc, #396]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d001      	beq.n	80036dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0b8      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d020      	beq.n	800372a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f4:	4b59      	ldr	r3, [pc, #356]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	4a58      	ldr	r2, [pc, #352]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0308 	and.w	r3, r3, #8
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800370c:	4b53      	ldr	r3, [pc, #332]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	4a52      	ldr	r2, [pc, #328]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003716:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003718:	4b50      	ldr	r3, [pc, #320]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	494d      	ldr	r1, [pc, #308]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d044      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	2b01      	cmp	r3, #1
 800373c:	d107      	bne.n	800374e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800373e:	4b47      	ldr	r3, [pc, #284]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d119      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e07f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d003      	beq.n	800375e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	2b03      	cmp	r3, #3
 800375c:	d107      	bne.n	800376e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800375e:	4b3f      	ldr	r3, [pc, #252]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d109      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e06f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800376e:	4b3b      	ldr	r3, [pc, #236]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e067      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800377e:	4b37      	ldr	r3, [pc, #220]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f023 0203 	bic.w	r2, r3, #3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	4934      	ldr	r1, [pc, #208]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	4313      	orrs	r3, r2
 800378e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003790:	f7fd fc4a 	bl	8001028 <HAL_GetTick>
 8003794:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	e00a      	b.n	80037ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003798:	f7fd fc46 	bl	8001028 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e04f      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ae:	4b2b      	ldr	r3, [pc, #172]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 020c 	and.w	r2, r3, #12
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	429a      	cmp	r2, r3
 80037be:	d1eb      	bne.n	8003798 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c0:	4b25      	ldr	r3, [pc, #148]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	683a      	ldr	r2, [r7, #0]
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d20c      	bcs.n	80037e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	b2d2      	uxtb	r2, r2
 80037d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_RCC_ClockConfig+0x1b8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 030f 	and.w	r3, r3, #15
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e032      	b.n	800384e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d008      	beq.n	8003806 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f4:	4b19      	ldr	r3, [pc, #100]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	4916      	ldr	r1, [pc, #88]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d009      	beq.n	8003826 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003812:	4b12      	ldr	r3, [pc, #72]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	490e      	ldr	r1, [pc, #56]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	4313      	orrs	r3, r2
 8003824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003826:	f000 f821 	bl	800386c <HAL_RCC_GetSysClockFreq>
 800382a:	4601      	mov	r1, r0
 800382c:	4b0b      	ldr	r3, [pc, #44]	; (800385c <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	091b      	lsrs	r3, r3, #4
 8003832:	f003 030f 	and.w	r3, r3, #15
 8003836:	4a0a      	ldr	r2, [pc, #40]	; (8003860 <HAL_RCC_ClockConfig+0x1c0>)
 8003838:	5cd3      	ldrb	r3, [r2, r3]
 800383a:	fa21 f303 	lsr.w	r3, r1, r3
 800383e:	4a09      	ldr	r2, [pc, #36]	; (8003864 <HAL_RCC_ClockConfig+0x1c4>)
 8003840:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c8>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f7fd fbaa 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 800384c:	2300      	movs	r3, #0
}
 800384e:	4618      	mov	r0, r3
 8003850:	3710      	adds	r7, #16
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	40023c00 	.word	0x40023c00
 800385c:	40023800 	.word	0x40023800
 8003860:	0800a254 	.word	0x0800a254
 8003864:	20000008 	.word	0x20000008
 8003868:	20000000 	.word	0x20000000

0800386c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800386c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003872:	2300      	movs	r3, #0
 8003874:	607b      	str	r3, [r7, #4]
 8003876:	2300      	movs	r3, #0
 8003878:	60fb      	str	r3, [r7, #12]
 800387a:	2300      	movs	r3, #0
 800387c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003882:	4b63      	ldr	r3, [pc, #396]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 030c 	and.w	r3, r3, #12
 800388a:	2b04      	cmp	r3, #4
 800388c:	d007      	beq.n	800389e <HAL_RCC_GetSysClockFreq+0x32>
 800388e:	2b08      	cmp	r3, #8
 8003890:	d008      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x38>
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 80b4 	bne.w	8003a00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003898:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800389a:	60bb      	str	r3, [r7, #8]
       break;
 800389c:	e0b3      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800389e:	4b5e      	ldr	r3, [pc, #376]	; (8003a18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80038a0:	60bb      	str	r3, [r7, #8]
      break;
 80038a2:	e0b0      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038a4:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ae:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d04a      	beq.n	8003950 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ba:	4b55      	ldr	r3, [pc, #340]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	099b      	lsrs	r3, r3, #6
 80038c0:	f04f 0400 	mov.w	r4, #0
 80038c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80038c8:	f04f 0200 	mov.w	r2, #0
 80038cc:	ea03 0501 	and.w	r5, r3, r1
 80038d0:	ea04 0602 	and.w	r6, r4, r2
 80038d4:	4629      	mov	r1, r5
 80038d6:	4632      	mov	r2, r6
 80038d8:	f04f 0300 	mov.w	r3, #0
 80038dc:	f04f 0400 	mov.w	r4, #0
 80038e0:	0154      	lsls	r4, r2, #5
 80038e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e6:	014b      	lsls	r3, r1, #5
 80038e8:	4619      	mov	r1, r3
 80038ea:	4622      	mov	r2, r4
 80038ec:	1b49      	subs	r1, r1, r5
 80038ee:	eb62 0206 	sbc.w	r2, r2, r6
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	0194      	lsls	r4, r2, #6
 80038fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003900:	018b      	lsls	r3, r1, #6
 8003902:	1a5b      	subs	r3, r3, r1
 8003904:	eb64 0402 	sbc.w	r4, r4, r2
 8003908:	f04f 0100 	mov.w	r1, #0
 800390c:	f04f 0200 	mov.w	r2, #0
 8003910:	00e2      	lsls	r2, r4, #3
 8003912:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003916:	00d9      	lsls	r1, r3, #3
 8003918:	460b      	mov	r3, r1
 800391a:	4614      	mov	r4, r2
 800391c:	195b      	adds	r3, r3, r5
 800391e:	eb44 0406 	adc.w	r4, r4, r6
 8003922:	f04f 0100 	mov.w	r1, #0
 8003926:	f04f 0200 	mov.w	r2, #0
 800392a:	0262      	lsls	r2, r4, #9
 800392c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003930:	0259      	lsls	r1, r3, #9
 8003932:	460b      	mov	r3, r1
 8003934:	4614      	mov	r4, r2
 8003936:	4618      	mov	r0, r3
 8003938:	4621      	mov	r1, r4
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f04f 0400 	mov.w	r4, #0
 8003940:	461a      	mov	r2, r3
 8003942:	4623      	mov	r3, r4
 8003944:	f7fd f98a 	bl	8000c5c <__aeabi_uldivmod>
 8003948:	4603      	mov	r3, r0
 800394a:	460c      	mov	r4, r1
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e049      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003950:	4b2f      	ldr	r3, [pc, #188]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	099b      	lsrs	r3, r3, #6
 8003956:	f04f 0400 	mov.w	r4, #0
 800395a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	ea03 0501 	and.w	r5, r3, r1
 8003966:	ea04 0602 	and.w	r6, r4, r2
 800396a:	4629      	mov	r1, r5
 800396c:	4632      	mov	r2, r6
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	f04f 0400 	mov.w	r4, #0
 8003976:	0154      	lsls	r4, r2, #5
 8003978:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800397c:	014b      	lsls	r3, r1, #5
 800397e:	4619      	mov	r1, r3
 8003980:	4622      	mov	r2, r4
 8003982:	1b49      	subs	r1, r1, r5
 8003984:	eb62 0206 	sbc.w	r2, r2, r6
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	f04f 0400 	mov.w	r4, #0
 8003990:	0194      	lsls	r4, r2, #6
 8003992:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003996:	018b      	lsls	r3, r1, #6
 8003998:	1a5b      	subs	r3, r3, r1
 800399a:	eb64 0402 	sbc.w	r4, r4, r2
 800399e:	f04f 0100 	mov.w	r1, #0
 80039a2:	f04f 0200 	mov.w	r2, #0
 80039a6:	00e2      	lsls	r2, r4, #3
 80039a8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039ac:	00d9      	lsls	r1, r3, #3
 80039ae:	460b      	mov	r3, r1
 80039b0:	4614      	mov	r4, r2
 80039b2:	195b      	adds	r3, r3, r5
 80039b4:	eb44 0406 	adc.w	r4, r4, r6
 80039b8:	f04f 0100 	mov.w	r1, #0
 80039bc:	f04f 0200 	mov.w	r2, #0
 80039c0:	02a2      	lsls	r2, r4, #10
 80039c2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80039c6:	0299      	lsls	r1, r3, #10
 80039c8:	460b      	mov	r3, r1
 80039ca:	4614      	mov	r4, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	4621      	mov	r1, r4
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	461a      	mov	r2, r3
 80039d8:	4623      	mov	r3, r4
 80039da:	f7fd f93f 	bl	8000c5c <__aeabi_uldivmod>
 80039de:	4603      	mov	r3, r0
 80039e0:	460c      	mov	r4, r1
 80039e2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039e4:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	3301      	adds	r3, #1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039fc:	60bb      	str	r3, [r7, #8]
      break;
 80039fe:	e002      	b.n	8003a06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a00:	4b04      	ldr	r3, [pc, #16]	; (8003a14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003a02:	60bb      	str	r3, [r7, #8]
      break;
 8003a04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a06:	68bb      	ldr	r3, [r7, #8]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a10:	40023800 	.word	0x40023800
 8003a14:	00f42400 	.word	0x00f42400
 8003a18:	007a1200 	.word	0x007a1200

08003a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a20:	4b03      	ldr	r3, [pc, #12]	; (8003a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a22:	681b      	ldr	r3, [r3, #0]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	20000008 	.word	0x20000008

08003a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a38:	f7ff fff0 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a3c:	4601      	mov	r1, r0
 8003a3e:	4b05      	ldr	r3, [pc, #20]	; (8003a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	0a9b      	lsrs	r3, r3, #10
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a4a:	5cd3      	ldrb	r3, [r2, r3]
 8003a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	40023800 	.word	0x40023800
 8003a58:	0800a264 	.word	0x0800a264

08003a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003a60:	f7ff ffdc 	bl	8003a1c <HAL_RCC_GetHCLKFreq>
 8003a64:	4601      	mov	r1, r0
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	0b5b      	lsrs	r3, r3, #13
 8003a6c:	f003 0307 	and.w	r3, r3, #7
 8003a70:	4a03      	ldr	r2, [pc, #12]	; (8003a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	0800a264 	.word	0x0800a264

08003a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d101      	bne.n	8003a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e056      	b.n	8003b44 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f004 fbcb 	bl	800824c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2202      	movs	r2, #2
 8003aba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003acc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	685a      	ldr	r2, [r3, #4]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	68db      	ldr	r3, [r3, #12]
 8003adc:	431a      	orrs	r2, r3
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	699b      	ldr	r3, [r3, #24]
 8003aee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	ea42 0103 	orr.w	r1, r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	699b      	ldr	r3, [r3, #24]
 8003b12:	0c1b      	lsrs	r3, r3, #16
 8003b14:	f003 0104 	and.w	r1, r3, #4
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	430a      	orrs	r2, r1
 8003b22:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69da      	ldr	r2, [r3, #28]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b32:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3708      	adds	r7, #8
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b088      	sub	sp, #32
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	603b      	str	r3, [r7, #0]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d101      	bne.n	8003b6e <HAL_SPI_Transmit+0x22>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e11e      	b.n	8003dac <HAL_SPI_Transmit+0x260>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b76:	f7fd fa57 	bl	8001028 <HAL_GetTick>
 8003b7a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d002      	beq.n	8003b92 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b8c:	2302      	movs	r3, #2
 8003b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b90:	e103      	b.n	8003d9a <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d002      	beq.n	8003b9e <HAL_SPI_Transmit+0x52>
 8003b98:	88fb      	ldrh	r3, [r7, #6]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ba2:	e0fa      	b.n	8003d9a <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	68ba      	ldr	r2, [r7, #8]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	88fa      	ldrh	r2, [r7, #6]
 8003bbc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	88fa      	ldrh	r2, [r7, #6]
 8003bc2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bea:	d107      	bne.n	8003bfc <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bfa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c06:	2b40      	cmp	r3, #64	; 0x40
 8003c08:	d007      	beq.n	8003c1a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c18:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c22:	d14b      	bne.n	8003cbc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_SPI_Transmit+0xe6>
 8003c2c:	8afb      	ldrh	r3, [r7, #22]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d13e      	bne.n	8003cb0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	881a      	ldrh	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c42:	1c9a      	adds	r2, r3, #2
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c56:	e02b      	b.n	8003cb0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d112      	bne.n	8003c8c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6a:	881a      	ldrh	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	1c9a      	adds	r2, r3, #2
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c80:	b29b      	uxth	r3, r3
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c8a:	e011      	b.n	8003cb0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c8c:	f7fd f9cc 	bl	8001028 <HAL_GetTick>
 8003c90:	4602      	mov	r2, r0
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	1ad3      	subs	r3, r2, r3
 8003c96:	683a      	ldr	r2, [r7, #0]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d803      	bhi.n	8003ca4 <HAL_SPI_Transmit+0x158>
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ca2:	d102      	bne.n	8003caa <HAL_SPI_Transmit+0x15e>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d102      	bne.n	8003cb0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003cae:	e074      	b.n	8003d9a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1ce      	bne.n	8003c58 <HAL_SPI_Transmit+0x10c>
 8003cba:	e04c      	b.n	8003d56 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_SPI_Transmit+0x17e>
 8003cc4:	8afb      	ldrh	r3, [r7, #22]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d140      	bne.n	8003d4c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	330c      	adds	r3, #12
 8003cd4:	7812      	ldrb	r2, [r2, #0]
 8003cd6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003cf0:	e02c      	b.n	8003d4c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d113      	bne.n	8003d28 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	330c      	adds	r3, #12
 8003d0a:	7812      	ldrb	r2, [r2, #0]
 8003d0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d26:	e011      	b.n	8003d4c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d28:	f7fd f97e 	bl	8001028 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d803      	bhi.n	8003d40 <HAL_SPI_Transmit+0x1f4>
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d3e:	d102      	bne.n	8003d46 <HAL_SPI_Transmit+0x1fa>
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d102      	bne.n	8003d4c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003d4a:	e026      	b.n	8003d9a <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1cd      	bne.n	8003cf2 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d56:	69ba      	ldr	r2, [r7, #24]
 8003d58:	6839      	ldr	r1, [r7, #0]
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fcc4 	bl	80046e8 <SPI_EndRxTxTransaction>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d002      	beq.n	8003d6c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10a      	bne.n	8003d8a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68db      	ldr	r3, [r3, #12]
 8003d7e:	613b      	str	r3, [r7, #16]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	613b      	str	r3, [r7, #16]
 8003d88:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d002      	beq.n	8003d98 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e000      	b.n	8003d9a <HAL_SPI_Transmit+0x24e>
  }

error:
 8003d98:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003daa:	7ffb      	ldrb	r3, [r7, #31]
}
 8003dac:	4618      	mov	r0, r3
 8003dae:	3720      	adds	r7, #32
 8003db0:	46bd      	mov	sp, r7
 8003db2:	bd80      	pop	{r7, pc}

08003db4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	603b      	str	r3, [r7, #0]
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dd0:	d112      	bne.n	8003df8 <HAL_SPI_Receive+0x44>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10e      	bne.n	8003df8 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2204      	movs	r2, #4
 8003dde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003de2:	88fa      	ldrh	r2, [r7, #6]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	4613      	mov	r3, r2
 8003dea:	68ba      	ldr	r2, [r7, #8]
 8003dec:	68b9      	ldr	r1, [r7, #8]
 8003dee:	68f8      	ldr	r0, [r7, #12]
 8003df0:	f000 f8e9 	bl	8003fc6 <HAL_SPI_TransmitReceive>
 8003df4:	4603      	mov	r3, r0
 8003df6:	e0e2      	b.n	8003fbe <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_SPI_Receive+0x52>
 8003e02:	2302      	movs	r3, #2
 8003e04:	e0db      	b.n	8003fbe <HAL_SPI_Receive+0x20a>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e0e:	f7fd f90b 	bl	8001028 <HAL_GetTick>
 8003e12:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d002      	beq.n	8003e26 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003e20:	2302      	movs	r3, #2
 8003e22:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e24:	e0c2      	b.n	8003fac <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_SPI_Receive+0x7e>
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e36:	e0b9      	b.n	8003fac <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2204      	movs	r2, #4
 8003e3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	88fa      	ldrh	r2, [r7, #6]
 8003e56:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7e:	d107      	bne.n	8003e90 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e8e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9a:	2b40      	cmp	r3, #64	; 0x40
 8003e9c:	d007      	beq.n	8003eae <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003eac:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d162      	bne.n	8003f7c <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003eb6:	e02e      	b.n	8003f16 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d115      	bne.n	8003ef2 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f103 020c 	add.w	r2, r3, #12
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed2:	7812      	ldrb	r2, [r2, #0]
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ef0:	e011      	b.n	8003f16 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ef2:	f7fd f899 	bl	8001028 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	683a      	ldr	r2, [r7, #0]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d803      	bhi.n	8003f0a <HAL_SPI_Receive+0x156>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f08:	d102      	bne.n	8003f10 <HAL_SPI_Receive+0x15c>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d102      	bne.n	8003f16 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f14:	e04a      	b.n	8003fac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1cb      	bne.n	8003eb8 <HAL_SPI_Receive+0x104>
 8003f20:	e031      	b.n	8003f86 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d113      	bne.n	8003f58 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	b292      	uxth	r2, r2
 8003f3c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	1c9a      	adds	r2, r3, #2
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f56:	e011      	b.n	8003f7c <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f58:	f7fd f866 	bl	8001028 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d803      	bhi.n	8003f70 <HAL_SPI_Receive+0x1bc>
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f6e:	d102      	bne.n	8003f76 <HAL_SPI_Receive+0x1c2>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d102      	bne.n	8003f7c <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003f7a:	e017      	b.n	8003fac <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f80:	b29b      	uxth	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1cd      	bne.n	8003f22 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	6839      	ldr	r1, [r7, #0]
 8003f8a:	68f8      	ldr	r0, [r7, #12]
 8003f8c:	f000 fb46 	bl	800461c <SPI_EndRxTransaction>
 8003f90:	4603      	mov	r3, r0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d002      	beq.n	8003faa <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
 8003fa8:	e000      	b.n	8003fac <HAL_SPI_Receive+0x1f8>
  }

error :
 8003faa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b08c      	sub	sp, #48	; 0x30
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_SPI_TransmitReceive+0x26>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e18a      	b.n	8004302 <HAL_SPI_TransmitReceive+0x33c>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff4:	f7fd f818 	bl	8001028 <HAL_GetTick>
 8003ff8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800400e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004012:	2b01      	cmp	r3, #1
 8004014:	d00f      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x70>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401c:	d107      	bne.n	800402e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_SPI_TransmitReceive+0x68>
 8004026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402a:	2b04      	cmp	r3, #4
 800402c:	d003      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800402e:	2302      	movs	r3, #2
 8004030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004034:	e15b      	b.n	80042ee <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x82>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x82>
 8004042:	887b      	ldrh	r3, [r7, #2]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800404e:	e14e      	b.n	80042ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b04      	cmp	r3, #4
 800405a:	d003      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2205      	movs	r2, #5
 8004060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	887a      	ldrh	r2, [r7, #2]
 800407a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	887a      	ldrh	r2, [r7, #2]
 8004086:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d007      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c0:	d178      	bne.n	80041b4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x10a>
 80040ca:	8b7b      	ldrh	r3, [r7, #26]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d166      	bne.n	800419e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f4:	e053      	b.n	800419e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d11b      	bne.n	800413c <HAL_SPI_TransmitReceive+0x176>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <HAL_SPI_TransmitReceive+0x176>
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d113      	bne.n	800413c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d119      	bne.n	800417e <HAL_SPI_TransmitReceive+0x1b8>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d014      	beq.n	800417e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	b292      	uxth	r2, r2
 8004160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	1c9a      	adds	r2, r3, #2
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800417a:	2301      	movs	r3, #1
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800417e:	f7fc ff53 	bl	8001028 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418a:	429a      	cmp	r2, r3
 800418c:	d807      	bhi.n	800419e <HAL_SPI_TransmitReceive+0x1d8>
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004194:	d003      	beq.n	800419e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800419c:	e0a7      	b.n	80042ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d1a6      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x130>
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1a1      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x130>
 80041b2:	e07c      	b.n	80042ae <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_SPI_TransmitReceive+0x1fc>
 80041bc:	8b7b      	ldrh	r3, [r7, #26]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d16b      	bne.n	800429a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	330c      	adds	r3, #12
 80041cc:	7812      	ldrb	r2, [r2, #0]
 80041ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041d4:	1c5a      	adds	r2, r3, #1
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041e8:	e057      	b.n	800429a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d11c      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x26c>
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d017      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x26c>
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d114      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	7812      	ldrb	r2, [r2, #0]
 8004214:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d119      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x2ae>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004274:	f7fc fed8 	bl	8001028 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004280:	429a      	cmp	r2, r3
 8004282:	d803      	bhi.n	800428c <HAL_SPI_TransmitReceive+0x2c6>
 8004284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800428a:	d102      	bne.n	8004292 <HAL_SPI_TransmitReceive+0x2cc>
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	2b00      	cmp	r3, #0
 8004290:	d103      	bne.n	800429a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004298:	e029      	b.n	80042ee <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1a2      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x224>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d19d      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fa18 	bl	80046e8 <SPI_EndRxTxTransaction>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d006      	beq.n	80042cc <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042ca:	e010      	b.n	80042ee <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10b      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042d4:	2300      	movs	r3, #0
 80042d6:	617b      	str	r3, [r7, #20]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	617b      	str	r3, [r7, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	e000      	b.n	80042ee <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80042ec:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80042fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004302:	4618      	mov	r0, r3
 8004304:	3730      	adds	r7, #48	; 0x30
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}
	...

0800430c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b088      	sub	sp, #32
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	099b      	lsrs	r3, r3, #6
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	2b00      	cmp	r3, #0
 800432e:	d10f      	bne.n	8004350 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00a      	beq.n	8004350 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	099b      	lsrs	r3, r3, #6
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d004      	beq.n	8004350 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
    return;
 800434e:	e0d8      	b.n	8004502 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	085b      	lsrs	r3, r3, #1
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00a      	beq.n	8004372 <HAL_SPI_IRQHandler+0x66>
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	09db      	lsrs	r3, r3, #7
 8004360:	f003 0301 	and.w	r3, r3, #1
 8004364:	2b00      	cmp	r3, #0
 8004366:	d004      	beq.n	8004372 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	4798      	blx	r3
    return;
 8004370:	e0c7      	b.n	8004502 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	095b      	lsrs	r3, r3, #5
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	2b00      	cmp	r3, #0
 800437c:	d10c      	bne.n	8004398 <HAL_SPI_IRQHandler+0x8c>
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	099b      	lsrs	r3, r3, #6
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d106      	bne.n	8004398 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	0a1b      	lsrs	r3, r3, #8
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80b5 	beq.w	8004502 <HAL_SPI_IRQHandler+0x1f6>
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	095b      	lsrs	r3, r3, #5
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 80ae 	beq.w	8004502 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d023      	beq.n	80043fa <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d011      	beq.n	80043e2 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c2:	f043 0204 	orr.w	r2, r3, #4
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	617b      	str	r3, [r7, #20]
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	e00b      	b.n	80043fa <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043e2:	2300      	movs	r3, #0
 80043e4:	613b      	str	r3, [r7, #16]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	613b      	str	r3, [r7, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	693b      	ldr	r3, [r7, #16]
        return;
 80043f8:	e083      	b.n	8004502 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d014      	beq.n	8004430 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f043 0201 	orr.w	r2, r3, #1
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	60fb      	str	r3, [r7, #12]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442c:	601a      	str	r2, [r3, #0]
 800442e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	0a1b      	lsrs	r3, r3, #8
 8004434:	f003 0301 	and.w	r3, r3, #1
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00c      	beq.n	8004456 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004440:	f043 0208 	orr.w	r2, r3, #8
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004448:	2300      	movs	r3, #0
 800444a:	60bb      	str	r3, [r7, #8]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	60bb      	str	r3, [r7, #8]
 8004454:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800445a:	2b00      	cmp	r3, #0
 800445c:	d050      	beq.n	8004500 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	685a      	ldr	r2, [r3, #4]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800446c:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d104      	bne.n	800448a <HAL_SPI_IRQHandler+0x17e>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d034      	beq.n	80044f4 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685a      	ldr	r2, [r3, #4]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f022 0203 	bic.w	r2, r2, #3
 8004498:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d011      	beq.n	80044c6 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044a6:	4a18      	ldr	r2, [pc, #96]	; (8004508 <HAL_SPI_IRQHandler+0x1fc>)
 80044a8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ae:	4618      	mov	r0, r3
 80044b0:	f7fd fcf5 	bl	8001e9e <HAL_DMA_Abort_IT>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d005      	beq.n	80044c6 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d016      	beq.n	80044fc <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d2:	4a0d      	ldr	r2, [pc, #52]	; (8004508 <HAL_SPI_IRQHandler+0x1fc>)
 80044d4:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd fcdf 	bl	8001e9e <HAL_DMA_Abort_IT>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80044f2:	e003      	b.n	80044fc <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f809 	bl	800450c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80044fa:	e000      	b.n	80044fe <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80044fc:	bf00      	nop
    return;
 80044fe:	bf00      	nop
 8004500:	bf00      	nop
  }
}
 8004502:	3720      	adds	r7, #32
 8004504:	46bd      	mov	sp, r7
 8004506:	bd80      	pop	{r7, pc}
 8004508:	08004521 	.word	0x08004521

0800450c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004514:	bf00      	nop
 8004516:	370c      	adds	r7, #12
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f7ff ffe6 	bl	800450c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004540:	bf00      	nop
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	4613      	mov	r3, r2
 8004556:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004558:	e04c      	b.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004560:	d048      	beq.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004562:	f7fc fd61 	bl	8001028 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d902      	bls.n	8004578 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d13d      	bne.n	80045f4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004586:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004590:	d111      	bne.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459a:	d004      	beq.n	80045a6 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045a4:	d107      	bne.n	80045b6 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045b4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045be:	d10f      	bne.n	80045e0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045de:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80045f0:	2303      	movs	r3, #3
 80045f2:	e00f      	b.n	8004614 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689a      	ldr	r2, [r3, #8]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4013      	ands	r3, r2
 80045fe:	68ba      	ldr	r2, [r7, #8]
 8004600:	429a      	cmp	r2, r3
 8004602:	bf0c      	ite	eq
 8004604:	2301      	moveq	r3, #1
 8004606:	2300      	movne	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	461a      	mov	r2, r3
 800460c:	79fb      	ldrb	r3, [r7, #7]
 800460e:	429a      	cmp	r2, r3
 8004610:	d1a3      	bne.n	800455a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af02      	add	r7, sp, #8
 8004622:	60f8      	str	r0, [r7, #12]
 8004624:	60b9      	str	r1, [r7, #8]
 8004626:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004630:	d111      	bne.n	8004656 <SPI_EndRxTransaction+0x3a>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800463a:	d004      	beq.n	8004646 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004644:	d107      	bne.n	8004656 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004654:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800465e:	d12a      	bne.n	80046b6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004668:	d012      	beq.n	8004690 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	9300      	str	r3, [sp, #0]
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2200      	movs	r2, #0
 8004672:	2180      	movs	r1, #128	; 0x80
 8004674:	68f8      	ldr	r0, [r7, #12]
 8004676:	f7ff ff67 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	d02d      	beq.n	80046dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e026      	b.n	80046de <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	9300      	str	r3, [sp, #0]
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2200      	movs	r2, #0
 8004698:	2101      	movs	r1, #1
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff ff54 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d01a      	beq.n	80046dc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046aa:	f043 0220 	orr.w	r2, r3, #32
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e013      	b.n	80046de <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	2200      	movs	r2, #0
 80046be:	2101      	movs	r1, #1
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff ff41 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e000      	b.n	80046de <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
	...

080046e8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b088      	sub	sp, #32
 80046ec:	af02      	add	r7, sp, #8
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80046f4:	4b1b      	ldr	r3, [pc, #108]	; (8004764 <SPI_EndRxTxTransaction+0x7c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1b      	ldr	r2, [pc, #108]	; (8004768 <SPI_EndRxTxTransaction+0x80>)
 80046fa:	fba2 2303 	umull	r2, r3, r2, r3
 80046fe:	0d5b      	lsrs	r3, r3, #21
 8004700:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004712:	d112      	bne.n	800473a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2200      	movs	r2, #0
 800471c:	2180      	movs	r1, #128	; 0x80
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff ff12 	bl	8004548 <SPI_WaitFlagStateUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d016      	beq.n	8004758 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e00f      	b.n	800475a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00a      	beq.n	8004756 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	3b01      	subs	r3, #1
 8004744:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004750:	2b80      	cmp	r3, #128	; 0x80
 8004752:	d0f2      	beq.n	800473a <SPI_EndRxTxTransaction+0x52>
 8004754:	e000      	b.n	8004758 <SPI_EndRxTxTransaction+0x70>
        break;
 8004756:	bf00      	nop
  }

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000008 	.word	0x20000008
 8004768:	165e9f81 	.word	0x165e9f81

0800476c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b082      	sub	sp, #8
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d101      	bne.n	800477e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e01d      	b.n	80047ba <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d106      	bne.n	8004798 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f003 fdaa 	bl	80082ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	3304      	adds	r3, #4
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f000 fd2e 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
	...

080047c4 <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f001 f92c 	bl	8005a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <HAL_TIM_OC_Start+0x74>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <HAL_TIM_OC_Start+0x2c>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a14      	ldr	r2, [pc, #80]	; (800483c <HAL_TIM_OC_Start+0x78>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d101      	bne.n	80047f4 <HAL_TIM_OC_Start+0x30>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_TIM_OC_Start+0x32>
 80047f4:	2300      	movs	r3, #0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2b06      	cmp	r3, #6
 800481a:	d007      	beq.n	800482c <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	40010000 	.word	0x40010000
 800483c:	40010400 	.word	0x40010400

08004840 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e01d      	b.n	800488e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d106      	bne.n	800486c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f815 	bl	8004896 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	3304      	adds	r3, #4
 800487c:	4619      	mov	r1, r3
 800487e:	4610      	mov	r0, r2
 8004880:	f000 fcc4 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	4618      	mov	r0, r3
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004896:	b480      	push	{r7}
 8004898:	b083      	sub	sp, #12
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800489e:	bf00      	nop
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2201      	movs	r2, #1
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f001 f8b8 	bl	8005a34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a15      	ldr	r2, [pc, #84]	; (8004920 <HAL_TIM_PWM_Start+0x74>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_TIM_PWM_Start+0x2c>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a14      	ldr	r2, [pc, #80]	; (8004924 <HAL_TIM_PWM_Start+0x78>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d101      	bne.n	80048dc <HAL_TIM_PWM_Start+0x30>
 80048d8:	2301      	movs	r3, #1
 80048da:	e000      	b.n	80048de <HAL_TIM_PWM_Start+0x32>
 80048dc:	2300      	movs	r3, #0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b06      	cmp	r3, #6
 8004902:	d007      	beq.n	8004914 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f042 0201 	orr.w	r2, r2, #1
 8004912:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3710      	adds	r7, #16
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	40010000 	.word	0x40010000
 8004924:	40010400 	.word	0x40010400

08004928 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e01d      	b.n	8004976 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b00      	cmp	r3, #0
 8004944:	d106      	bne.n	8004954 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f815 	bl	800497e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f000 fc50 	bl	800520c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004974:	2300      	movs	r3, #0
}
 8004976:	4618      	mov	r0, r3
 8004978:	3708      	adds	r7, #8
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800497e:	b480      	push	{r7}
 8004980:	b083      	sub	sp, #12
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr

08004992 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b086      	sub	sp, #24
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d101      	bne.n	80049a6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e083      	b.n	8004aae <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f003 fd3a 	bl	8008434 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f000 fc10 	bl	800520c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	689b      	ldr	r3, [r3, #8]
 80049f2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	6a1b      	ldr	r3, [r3, #32]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	697a      	ldr	r2, [r7, #20]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	f023 0303 	bic.w	r3, r3, #3
 8004a18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	689a      	ldr	r2, [r3, #8]
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	021b      	lsls	r3, r3, #8
 8004a24:	4313      	orrs	r3, r2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004a32:	f023 030c 	bic.w	r3, r3, #12
 8004a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68da      	ldr	r2, [r3, #12]
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	69db      	ldr	r3, [r3, #28]
 8004a4c:	021b      	lsls	r3, r3, #8
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	011a      	lsls	r2, r3, #4
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	031b      	lsls	r3, r3, #12
 8004a62:	4313      	orrs	r3, r2
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	4313      	orrs	r3, r2
 8004a68:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004a70:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004a78:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	685a      	ldr	r2, [r3, #4]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	4313      	orrs	r3, r2
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3718      	adds	r7, #24
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b082      	sub	sp, #8
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d002      	beq.n	8004acc <HAL_TIM_Encoder_Start_IT+0x16>
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d010      	beq.n	8004aec <HAL_TIM_Encoder_Start_IT+0x36>
 8004aca:	e01f      	b.n	8004b0c <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 ffad 	bl	8005a34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	68da      	ldr	r2, [r3, #12]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0202 	orr.w	r2, r2, #2
 8004ae8:	60da      	str	r2, [r3, #12]
      break;
 8004aea:	e02e      	b.n	8004b4a <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2201      	movs	r2, #1
 8004af2:	2104      	movs	r1, #4
 8004af4:	4618      	mov	r0, r3
 8004af6:	f000 ff9d 	bl	8005a34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68da      	ldr	r2, [r3, #12]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0204 	orr.w	r2, r2, #4
 8004b08:	60da      	str	r2, [r3, #12]
      break;
 8004b0a:	e01e      	b.n	8004b4a <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2201      	movs	r2, #1
 8004b12:	2100      	movs	r1, #0
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 ff8d 	bl	8005a34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	2104      	movs	r1, #4
 8004b22:	4618      	mov	r0, r3
 8004b24:	f000 ff86 	bl	8005a34 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0202 	orr.w	r2, r2, #2
 8004b36:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f042 0204 	orr.w	r2, r2, #4
 8004b46:	60da      	str	r2, [r3, #12]
      break;
 8004b48:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0201 	orr.w	r2, r2, #1
 8004b58:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b082      	sub	sp, #8
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	f003 0302 	and.w	r3, r3, #2
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d122      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b02      	cmp	r3, #2
 8004b86:	d11b      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f06f 0202 	mvn.w	r2, #2
 8004b90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2201      	movs	r2, #1
 8004b96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	f003 0303 	and.w	r3, r3, #3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d003      	beq.n	8004bae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fb11 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004bac:	e005      	b.n	8004bba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fb03 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fb14 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f003 0304 	and.w	r3, r3, #4
 8004bca:	2b04      	cmp	r3, #4
 8004bcc:	d122      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0304 	and.w	r3, r3, #4
 8004bd8:	2b04      	cmp	r3, #4
 8004bda:	d11b      	bne.n	8004c14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0204 	mvn.w	r2, #4
 8004be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	699b      	ldr	r3, [r3, #24]
 8004bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fae7 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004c00:	e005      	b.n	8004c0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 fad9 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 faea 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	f003 0308 	and.w	r3, r3, #8
 8004c1e:	2b08      	cmp	r3, #8
 8004c20:	d122      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f003 0308 	and.w	r3, r3, #8
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d11b      	bne.n	8004c68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f06f 0208 	mvn.w	r2, #8
 8004c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2204      	movs	r2, #4
 8004c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	69db      	ldr	r3, [r3, #28]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f000 fabd 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004c54:	e005      	b.n	8004c62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 faaf 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fac0 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b10      	cmp	r3, #16
 8004c74:	d122      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68db      	ldr	r3, [r3, #12]
 8004c7c:	f003 0310 	and.w	r3, r3, #16
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d11b      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f06f 0210 	mvn.w	r2, #16
 8004c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2208      	movs	r2, #8
 8004c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 fa93 	bl	80051ce <HAL_TIM_IC_CaptureCallback>
 8004ca8:	e005      	b.n	8004cb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fa85 	bl	80051ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 fa96 	bl	80051e2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0301 	and.w	r3, r3, #1
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d10e      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68db      	ldr	r3, [r3, #12]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d107      	bne.n	8004ce8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0201 	mvn.w	r2, #1
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 fa5f 	bl	80051a6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	691b      	ldr	r3, [r3, #16]
 8004cee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf2:	2b80      	cmp	r3, #128	; 0x80
 8004cf4:	d10e      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d00:	2b80      	cmp	r3, #128	; 0x80
 8004d02:	d107      	bne.n	8004d14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 ffb8 	bl	8005c84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1e:	2b40      	cmp	r3, #64	; 0x40
 8004d20:	d10e      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d2c:	2b40      	cmp	r3, #64	; 0x40
 8004d2e:	d107      	bne.n	8004d40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa5b 	bl	80051f6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b20      	cmp	r3, #32
 8004d4c:	d10e      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	f003 0320 	and.w	r3, r3, #32
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d107      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f06f 0220 	mvn.w	r2, #32
 8004d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f000 ff82 	bl	8005c70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d6c:	bf00      	nop
 8004d6e:	3708      	adds	r7, #8
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d101      	bne.n	8004d8e <HAL_TIM_IC_ConfigChannel+0x1a>
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	e08a      	b.n	8004ea4 <HAL_TIM_IC_ConfigChannel+0x130>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2202      	movs	r2, #2
 8004d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d11b      	bne.n	8004ddc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6818      	ldr	r0, [r3, #0]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6819      	ldr	r1, [r3, #0]
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f000 fc7a 	bl	80056ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f022 020c 	bic.w	r2, r2, #12
 8004dc6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	6999      	ldr	r1, [r3, #24]
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	619a      	str	r2, [r3, #24]
 8004dda:	e05a      	b.n	8004e92 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d11c      	bne.n	8004e1c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6818      	ldr	r0, [r3, #0]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	6819      	ldr	r1, [r3, #0]
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f000 fcfe 	bl	80057f2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	699a      	ldr	r2, [r3, #24]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e04:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6999      	ldr	r1, [r3, #24]
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	021a      	lsls	r2, r3, #8
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	619a      	str	r2, [r3, #24]
 8004e1a:	e03a      	b.n	8004e92 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d11b      	bne.n	8004e5a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6818      	ldr	r0, [r3, #0]
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	6819      	ldr	r1, [r3, #0]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	f000 fd4b 	bl	80058cc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 020c 	bic.w	r2, r2, #12
 8004e44:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69d9      	ldr	r1, [r3, #28]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	689a      	ldr	r2, [r3, #8]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
 8004e58:	e01b      	b.n	8004e92 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6818      	ldr	r0, [r3, #0]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	6819      	ldr	r1, [r3, #0]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	685a      	ldr	r2, [r3, #4]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f000 fd6b 	bl	8005944 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	69da      	ldr	r2, [r3, #28]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004e7c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69d9      	ldr	r1, [r3, #28]
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	021a      	lsls	r2, r3, #8
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	60f8      	str	r0, [r7, #12]
 8004eb4:	60b9      	str	r1, [r7, #8]
 8004eb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d101      	bne.n	8004ec6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ec2:	2302      	movs	r3, #2
 8004ec4:	e0b4      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x184>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2201      	movs	r2, #1
 8004eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	f200 809f 	bhi.w	800501c <HAL_TIM_PWM_ConfigChannel+0x170>
 8004ede:	a201      	add	r2, pc, #4	; (adr r2, 8004ee4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee4:	08004f19 	.word	0x08004f19
 8004ee8:	0800501d 	.word	0x0800501d
 8004eec:	0800501d 	.word	0x0800501d
 8004ef0:	0800501d 	.word	0x0800501d
 8004ef4:	08004f59 	.word	0x08004f59
 8004ef8:	0800501d 	.word	0x0800501d
 8004efc:	0800501d 	.word	0x0800501d
 8004f00:	0800501d 	.word	0x0800501d
 8004f04:	08004f9b 	.word	0x08004f9b
 8004f08:	0800501d 	.word	0x0800501d
 8004f0c:	0800501d 	.word	0x0800501d
 8004f10:	0800501d 	.word	0x0800501d
 8004f14:	08004fdb 	.word	0x08004fdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68b9      	ldr	r1, [r7, #8]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f000 fa14 	bl	800534c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699a      	ldr	r2, [r3, #24]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0208 	orr.w	r2, r2, #8
 8004f32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	699a      	ldr	r2, [r3, #24]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f022 0204 	bic.w	r2, r2, #4
 8004f42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	6999      	ldr	r1, [r3, #24]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	691a      	ldr	r2, [r3, #16]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	619a      	str	r2, [r3, #24]
      break;
 8004f56:	e062      	b.n	800501e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68b9      	ldr	r1, [r7, #8]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 fa64 	bl	800542c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	699a      	ldr	r2, [r3, #24]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699a      	ldr	r2, [r3, #24]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	6999      	ldr	r1, [r3, #24]
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	021a      	lsls	r2, r3, #8
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	430a      	orrs	r2, r1
 8004f96:	619a      	str	r2, [r3, #24]
      break;
 8004f98:	e041      	b.n	800501e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	68b9      	ldr	r1, [r7, #8]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fab9 	bl	8005518 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	69da      	ldr	r2, [r3, #28]
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0208 	orr.w	r2, r2, #8
 8004fb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	69da      	ldr	r2, [r3, #28]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f022 0204 	bic.w	r2, r2, #4
 8004fc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	69d9      	ldr	r1, [r3, #28]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	61da      	str	r2, [r3, #28]
      break;
 8004fd8:	e021      	b.n	800501e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fb0d 	bl	8005600 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	69da      	ldr	r2, [r3, #28]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	69da      	ldr	r2, [r3, #28]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69d9      	ldr	r1, [r3, #28]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	691b      	ldr	r3, [r3, #16]
 8005010:	021a      	lsls	r2, r3, #8
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	430a      	orrs	r2, r1
 8005018:	61da      	str	r2, [r3, #28]
      break;
 800501a:	e000      	b.n	800501e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800501c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2200      	movs	r2, #0
 800502a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800502e:	2300      	movs	r3, #0
}
 8005030:	4618      	mov	r0, r3
 8005032:	3710      	adds	r7, #16
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b084      	sub	sp, #16
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005048:	2b01      	cmp	r3, #1
 800504a:	d101      	bne.n	8005050 <HAL_TIM_ConfigClockSource+0x18>
 800504c:	2302      	movs	r3, #2
 800504e:	e0a6      	b.n	800519e <HAL_TIM_ConfigClockSource+0x166>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800506e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005076:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b40      	cmp	r3, #64	; 0x40
 8005086:	d067      	beq.n	8005158 <HAL_TIM_ConfigClockSource+0x120>
 8005088:	2b40      	cmp	r3, #64	; 0x40
 800508a:	d80b      	bhi.n	80050a4 <HAL_TIM_ConfigClockSource+0x6c>
 800508c:	2b10      	cmp	r3, #16
 800508e:	d073      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x140>
 8005090:	2b10      	cmp	r3, #16
 8005092:	d802      	bhi.n	800509a <HAL_TIM_ConfigClockSource+0x62>
 8005094:	2b00      	cmp	r3, #0
 8005096:	d06f      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005098:	e078      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800509a:	2b20      	cmp	r3, #32
 800509c:	d06c      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x140>
 800509e:	2b30      	cmp	r3, #48	; 0x30
 80050a0:	d06a      	beq.n	8005178 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80050a2:	e073      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050a4:	2b70      	cmp	r3, #112	; 0x70
 80050a6:	d00d      	beq.n	80050c4 <HAL_TIM_ConfigClockSource+0x8c>
 80050a8:	2b70      	cmp	r3, #112	; 0x70
 80050aa:	d804      	bhi.n	80050b6 <HAL_TIM_ConfigClockSource+0x7e>
 80050ac:	2b50      	cmp	r3, #80	; 0x50
 80050ae:	d033      	beq.n	8005118 <HAL_TIM_ConfigClockSource+0xe0>
 80050b0:	2b60      	cmp	r3, #96	; 0x60
 80050b2:	d041      	beq.n	8005138 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80050b4:	e06a      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80050b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ba:	d066      	beq.n	800518a <HAL_TIM_ConfigClockSource+0x152>
 80050bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050c0:	d017      	beq.n	80050f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80050c2:	e063      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6818      	ldr	r0, [r3, #0]
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	6899      	ldr	r1, [r3, #8]
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f000 fc8e 	bl	80059f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80050e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	609a      	str	r2, [r3, #8]
      break;
 80050f0:	e04c      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6818      	ldr	r0, [r3, #0]
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	6899      	ldr	r1, [r3, #8]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f000 fc77 	bl	80059f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	689a      	ldr	r2, [r3, #8]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005114:	609a      	str	r2, [r3, #8]
      break;
 8005116:	e039      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6818      	ldr	r0, [r3, #0]
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	6859      	ldr	r1, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	461a      	mov	r2, r3
 8005126:	f000 fb35 	bl	8005794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2150      	movs	r1, #80	; 0x50
 8005130:	4618      	mov	r0, r3
 8005132:	f000 fc44 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 8005136:	e029      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6818      	ldr	r0, [r3, #0]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	6859      	ldr	r1, [r3, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	461a      	mov	r2, r3
 8005146:	f000 fb91 	bl	800586c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	2160      	movs	r1, #96	; 0x60
 8005150:	4618      	mov	r0, r3
 8005152:	f000 fc34 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 8005156:	e019      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	6859      	ldr	r1, [r3, #4]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	461a      	mov	r2, r3
 8005166:	f000 fb15 	bl	8005794 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	2140      	movs	r1, #64	; 0x40
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fc24 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 8005176:	e009      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 fc1b 	bl	80059be <TIM_ITRx_SetConfig>
      break;
 8005188:	e000      	b.n	800518c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800518a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051a6:	b480      	push	{r7}
 80051a8:	b083      	sub	sp, #12
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80051ae:	bf00      	nop
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051d6:	bf00      	nop
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr

080051e2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051e2:	b480      	push	{r7}
 80051e4:	b083      	sub	sp, #12
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051ea:	bf00      	nop
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800520c:	b480      	push	{r7}
 800520e:	b085      	sub	sp, #20
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a40      	ldr	r2, [pc, #256]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800522a:	d00f      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a3d      	ldr	r2, [pc, #244]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a3c      	ldr	r2, [pc, #240]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a3b      	ldr	r2, [pc, #236]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a3a      	ldr	r2, [pc, #232]	; (8005330 <TIM_Base_SetConfig+0x124>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d108      	bne.n	800525e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005252:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a2f      	ldr	r2, [pc, #188]	; (8005320 <TIM_Base_SetConfig+0x114>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d02b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800526c:	d027      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a2c      	ldr	r2, [pc, #176]	; (8005324 <TIM_Base_SetConfig+0x118>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d023      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a2b      	ldr	r2, [pc, #172]	; (8005328 <TIM_Base_SetConfig+0x11c>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d01f      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2a      	ldr	r2, [pc, #168]	; (800532c <TIM_Base_SetConfig+0x120>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a29      	ldr	r2, [pc, #164]	; (8005330 <TIM_Base_SetConfig+0x124>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d017      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a28      	ldr	r2, [pc, #160]	; (8005334 <TIM_Base_SetConfig+0x128>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d013      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a27      	ldr	r2, [pc, #156]	; (8005338 <TIM_Base_SetConfig+0x12c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d00f      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a26      	ldr	r2, [pc, #152]	; (800533c <TIM_Base_SetConfig+0x130>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d00b      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a25      	ldr	r2, [pc, #148]	; (8005340 <TIM_Base_SetConfig+0x134>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d007      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a24      	ldr	r2, [pc, #144]	; (8005344 <TIM_Base_SetConfig+0x138>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d003      	beq.n	80052be <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a23      	ldr	r2, [pc, #140]	; (8005348 <TIM_Base_SetConfig+0x13c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d108      	bne.n	80052d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	68fa      	ldr	r2, [r7, #12]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	695b      	ldr	r3, [r3, #20]
 80052da:	4313      	orrs	r3, r2
 80052dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	4a0a      	ldr	r2, [pc, #40]	; (8005320 <TIM_Base_SetConfig+0x114>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d003      	beq.n	8005304 <TIM_Base_SetConfig+0xf8>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a0c      	ldr	r2, [pc, #48]	; (8005330 <TIM_Base_SetConfig+0x124>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d103      	bne.n	800530c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	615a      	str	r2, [r3, #20]
}
 8005312:	bf00      	nop
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	40010000 	.word	0x40010000
 8005324:	40000400 	.word	0x40000400
 8005328:	40000800 	.word	0x40000800
 800532c:	40000c00 	.word	0x40000c00
 8005330:	40010400 	.word	0x40010400
 8005334:	40014000 	.word	0x40014000
 8005338:	40014400 	.word	0x40014400
 800533c:	40014800 	.word	0x40014800
 8005340:	40001800 	.word	0x40001800
 8005344:	40001c00 	.word	0x40001c00
 8005348:	40002000 	.word	0x40002000

0800534c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	f023 0201 	bic.w	r2, r3, #1
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800537a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	4313      	orrs	r3, r2
 800538c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f023 0302 	bic.w	r3, r3, #2
 8005394:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	697a      	ldr	r2, [r7, #20]
 800539c:	4313      	orrs	r3, r2
 800539e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a20      	ldr	r2, [pc, #128]	; (8005424 <TIM_OC1_SetConfig+0xd8>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d003      	beq.n	80053b0 <TIM_OC1_SetConfig+0x64>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a1f      	ldr	r2, [pc, #124]	; (8005428 <TIM_OC1_SetConfig+0xdc>)
 80053ac:	4293      	cmp	r3, r2
 80053ae:	d10c      	bne.n	80053ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f023 0308 	bic.w	r3, r3, #8
 80053b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	697a      	ldr	r2, [r7, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f023 0304 	bic.w	r3, r3, #4
 80053c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC1_SetConfig+0xd8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_OC1_SetConfig+0x8e>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <TIM_OC1_SetConfig+0xdc>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d111      	bne.n	80053fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	699b      	ldr	r3, [r3, #24]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68fa      	ldr	r2, [r7, #12]
 8005408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685a      	ldr	r2, [r3, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	621a      	str	r2, [r3, #32]
}
 8005418:	bf00      	nop
 800541a:	371c      	adds	r7, #28
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	40010000 	.word	0x40010000
 8005428:	40010400 	.word	0x40010400

0800542c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f023 0210 	bic.w	r2, r3, #16
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005462:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4313      	orrs	r3, r2
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f023 0320 	bic.w	r3, r3, #32
 8005476:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	4313      	orrs	r3, r2
 8005482:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a22      	ldr	r2, [pc, #136]	; (8005510 <TIM_OC2_SetConfig+0xe4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC2_SetConfig+0x68>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a21      	ldr	r2, [pc, #132]	; (8005514 <TIM_OC2_SetConfig+0xe8>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d10d      	bne.n	80054b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	4a17      	ldr	r2, [pc, #92]	; (8005510 <TIM_OC2_SetConfig+0xe4>)
 80054b4:	4293      	cmp	r3, r2
 80054b6:	d003      	beq.n	80054c0 <TIM_OC2_SetConfig+0x94>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	4a16      	ldr	r2, [pc, #88]	; (8005514 <TIM_OC2_SetConfig+0xe8>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d113      	bne.n	80054e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054c0:	693b      	ldr	r3, [r7, #16]
 80054c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	4313      	orrs	r3, r2
 80054da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	699b      	ldr	r3, [r3, #24]
 80054e0:	009b      	lsls	r3, r3, #2
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	621a      	str	r2, [r3, #32]
}
 8005502:	bf00      	nop
 8005504:	371c      	adds	r7, #28
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40010000 	.word	0x40010000
 8005514:	40010400 	.word	0x40010400

08005518 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005518:	b480      	push	{r7}
 800551a:	b087      	sub	sp, #28
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6a1b      	ldr	r3, [r3, #32]
 8005532:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	69db      	ldr	r3, [r3, #28]
 800553e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0303 	bic.w	r3, r3, #3
 800554e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	4313      	orrs	r3, r2
 8005558:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005560:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	021b      	lsls	r3, r3, #8
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	4313      	orrs	r3, r2
 800556c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a21      	ldr	r2, [pc, #132]	; (80055f8 <TIM_OC3_SetConfig+0xe0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC3_SetConfig+0x66>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a20      	ldr	r2, [pc, #128]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d10d      	bne.n	800559a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	68db      	ldr	r3, [r3, #12]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005598:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a16      	ldr	r2, [pc, #88]	; (80055f8 <TIM_OC3_SetConfig+0xe0>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d003      	beq.n	80055aa <TIM_OC3_SetConfig+0x92>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a15      	ldr	r2, [pc, #84]	; (80055fc <TIM_OC3_SetConfig+0xe4>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d113      	bne.n	80055d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	40010000 	.word	0x40010000
 80055fc:	40010400 	.word	0x40010400

08005600 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005600:	b480      	push	{r7}
 8005602:	b087      	sub	sp, #28
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a1b      	ldr	r3, [r3, #32]
 800560e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a1b      	ldr	r3, [r3, #32]
 800561a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005636:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	021b      	lsls	r3, r3, #8
 800563e:	68fa      	ldr	r2, [r7, #12]
 8005640:	4313      	orrs	r3, r2
 8005642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800564a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	031b      	lsls	r3, r3, #12
 8005652:	693a      	ldr	r2, [r7, #16]
 8005654:	4313      	orrs	r3, r2
 8005656:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a12      	ldr	r2, [pc, #72]	; (80056a4 <TIM_OC4_SetConfig+0xa4>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d003      	beq.n	8005668 <TIM_OC4_SetConfig+0x68>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a11      	ldr	r2, [pc, #68]	; (80056a8 <TIM_OC4_SetConfig+0xa8>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d109      	bne.n	800567c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800566e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	019b      	lsls	r3, r3, #6
 8005676:	697a      	ldr	r2, [r7, #20]
 8005678:	4313      	orrs	r3, r2
 800567a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	693a      	ldr	r2, [r7, #16]
 8005694:	621a      	str	r2, [r3, #32]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	40010000 	.word	0x40010000
 80056a8:	40010400 	.word	0x40010400

080056ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	f023 0201 	bic.w	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	4a28      	ldr	r2, [pc, #160]	; (8005778 <TIM_TI1_SetConfig+0xcc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d01b      	beq.n	8005712 <TIM_TI1_SetConfig+0x66>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e0:	d017      	beq.n	8005712 <TIM_TI1_SetConfig+0x66>
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4a25      	ldr	r2, [pc, #148]	; (800577c <TIM_TI1_SetConfig+0xd0>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d013      	beq.n	8005712 <TIM_TI1_SetConfig+0x66>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a24      	ldr	r2, [pc, #144]	; (8005780 <TIM_TI1_SetConfig+0xd4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00f      	beq.n	8005712 <TIM_TI1_SetConfig+0x66>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	4a23      	ldr	r2, [pc, #140]	; (8005784 <TIM_TI1_SetConfig+0xd8>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d00b      	beq.n	8005712 <TIM_TI1_SetConfig+0x66>
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4a22      	ldr	r2, [pc, #136]	; (8005788 <TIM_TI1_SetConfig+0xdc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d007      	beq.n	8005712 <TIM_TI1_SetConfig+0x66>
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4a21      	ldr	r2, [pc, #132]	; (800578c <TIM_TI1_SetConfig+0xe0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d003      	beq.n	8005712 <TIM_TI1_SetConfig+0x66>
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	4a20      	ldr	r2, [pc, #128]	; (8005790 <TIM_TI1_SetConfig+0xe4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d101      	bne.n	8005716 <TIM_TI1_SetConfig+0x6a>
 8005712:	2301      	movs	r3, #1
 8005714:	e000      	b.n	8005718 <TIM_TI1_SetConfig+0x6c>
 8005716:	2300      	movs	r3, #0
 8005718:	2b00      	cmp	r3, #0
 800571a:	d008      	beq.n	800572e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f023 0303 	bic.w	r3, r3, #3
 8005722:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	e003      	b.n	8005736 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f043 0301 	orr.w	r3, r3, #1
 8005734:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	011b      	lsls	r3, r3, #4
 8005742:	b2db      	uxtb	r3, r3
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	4313      	orrs	r3, r2
 8005748:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	f023 030a 	bic.w	r3, r3, #10
 8005750:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f003 030a 	and.w	r3, r3, #10
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	4313      	orrs	r3, r2
 800575c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	697a      	ldr	r2, [r7, #20]
 8005762:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40000400 	.word	0x40000400
 8005780:	40000800 	.word	0x40000800
 8005784:	40000c00 	.word	0x40000c00
 8005788:	40010400 	.word	0x40010400
 800578c:	40014000 	.word	0x40014000
 8005790:	40001800 	.word	0x40001800

08005794 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	60f8      	str	r0, [r7, #12]
 800579c:	60b9      	str	r1, [r7, #8]
 800579e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a1b      	ldr	r3, [r3, #32]
 80057aa:	f023 0201 	bic.w	r2, r3, #1
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	f023 030a 	bic.w	r3, r3, #10
 80057d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057d2:	697a      	ldr	r2, [r7, #20]
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	4313      	orrs	r3, r2
 80057d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	621a      	str	r2, [r3, #32]
}
 80057e6:	bf00      	nop
 80057e8:	371c      	adds	r7, #28
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr

080057f2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b087      	sub	sp, #28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	6a1b      	ldr	r3, [r3, #32]
 8005804:	f023 0210 	bic.w	r2, r3, #16
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800581e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005830:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	031b      	lsls	r3, r3, #12
 8005836:	b29b      	uxth	r3, r3
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005844:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	011b      	lsls	r3, r3, #4
 800584a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800584e:	693a      	ldr	r2, [r7, #16]
 8005850:	4313      	orrs	r3, r2
 8005852:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	697a      	ldr	r2, [r7, #20]
 8005858:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	621a      	str	r2, [r3, #32]
}
 8005860:	bf00      	nop
 8005862:	371c      	adds	r7, #28
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6a1b      	ldr	r3, [r3, #32]
 800587c:	f023 0210 	bic.w	r2, r3, #16
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005896:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	031b      	lsls	r3, r3, #12
 800589c:	697a      	ldr	r2, [r7, #20]
 800589e:	4313      	orrs	r3, r2
 80058a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80058a2:	693b      	ldr	r3, [r7, #16]
 80058a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80058a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	011b      	lsls	r3, r3, #4
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	4313      	orrs	r3, r2
 80058b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	621a      	str	r2, [r3, #32]
}
 80058c0:	bf00      	nop
 80058c2:	371c      	adds	r7, #28
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	60f8      	str	r0, [r7, #12]
 80058d4:	60b9      	str	r1, [r7, #8]
 80058d6:	607a      	str	r2, [r7, #4]
 80058d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	69db      	ldr	r3, [r3, #28]
 80058ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 0303 	bic.w	r3, r3, #3
 80058f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80058fa:	697a      	ldr	r2, [r7, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005908:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	b2db      	uxtb	r3, r3
 8005910:	697a      	ldr	r2, [r7, #20]
 8005912:	4313      	orrs	r3, r2
 8005914:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800591c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800591e:	68bb      	ldr	r3, [r7, #8]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	693a      	ldr	r2, [r7, #16]
 8005936:	621a      	str	r2, [r3, #32]
}
 8005938:	bf00      	nop
 800593a:	371c      	adds	r7, #28
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005944:	b480      	push	{r7}
 8005946:	b087      	sub	sp, #28
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a1b      	ldr	r3, [r3, #32]
 8005968:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800596a:	697b      	ldr	r3, [r7, #20]
 800596c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005970:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	021b      	lsls	r3, r3, #8
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005982:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	031b      	lsls	r3, r3, #12
 8005988:	b29b      	uxth	r3, r3
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005996:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	031b      	lsls	r3, r3, #12
 800599c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80059a0:	693a      	ldr	r2, [r7, #16]
 80059a2:	4313      	orrs	r3, r2
 80059a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	693a      	ldr	r2, [r7, #16]
 80059b0:	621a      	str	r2, [r3, #32]
}
 80059b2:	bf00      	nop
 80059b4:	371c      	adds	r7, #28
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr

080059be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059be:	b480      	push	{r7}
 80059c0:	b085      	sub	sp, #20
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	f043 0307 	orr.w	r3, r3, #7
 80059e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	609a      	str	r2, [r3, #8]
}
 80059e8:	bf00      	nop
 80059ea:	3714      	adds	r7, #20
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b087      	sub	sp, #28
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]
 8005a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	021a      	lsls	r2, r3, #8
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	697a      	ldr	r2, [r7, #20]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	697a      	ldr	r2, [r7, #20]
 8005a26:	609a      	str	r2, [r3, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	371c      	adds	r7, #28
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b087      	sub	sp, #28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 031f 	and.w	r3, r3, #31
 8005a46:	2201      	movs	r2, #1
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6a1a      	ldr	r2, [r3, #32]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	43db      	mvns	r3, r3
 8005a56:	401a      	ands	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	6a1a      	ldr	r2, [r3, #32]
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	f003 031f 	and.w	r3, r3, #31
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2204      	movs	r2, #4
 8005a8e:	6839      	ldr	r1, [r7, #0]
 8005a90:	4618      	mov	r0, r3
 8005a92:	f000 f901 	bl	8005c98 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005aa4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0307 	and.w	r3, r3, #7
 8005ab0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2b06      	cmp	r3, #6
 8005ab6:	d007      	beq.n	8005ac8 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
	...

08005ad4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e05a      	b.n	8005ba2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2202      	movs	r2, #2
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	4a21      	ldr	r2, [pc, #132]	; (8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d022      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b38:	d01d      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4a1d      	ldr	r2, [pc, #116]	; (8005bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d018      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1b      	ldr	r2, [pc, #108]	; (8005bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d013      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1a      	ldr	r2, [pc, #104]	; (8005bbc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00e      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a18      	ldr	r2, [pc, #96]	; (8005bc0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d009      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a17      	ldr	r2, [pc, #92]	; (8005bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d004      	beq.n	8005b76 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a15      	ldr	r2, [pc, #84]	; (8005bc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d10c      	bne.n	8005b90 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b7c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	68ba      	ldr	r2, [r7, #8]
 8005b84:	4313      	orrs	r3, r2
 8005b86:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3714      	adds	r7, #20
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bac:	4770      	bx	lr
 8005bae:	bf00      	nop
 8005bb0:	40010000 	.word	0x40010000
 8005bb4:	40000400 	.word	0x40000400
 8005bb8:	40000800 	.word	0x40000800
 8005bbc:	40000c00 	.word	0x40000c00
 8005bc0:	40010400 	.word	0x40010400
 8005bc4:	40014000 	.word	0x40014000
 8005bc8:	40001800 	.word	0x40001800

08005bcc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005bcc:	b480      	push	{r7}
 8005bce:	b085      	sub	sp, #20
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e03d      	b.n	8005c64 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	69db      	ldr	r3, [r3, #28]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b083      	sub	sp, #12
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005c98:	b480      	push	{r7}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	f003 031f 	and.w	r3, r3, #31
 8005caa:	2204      	movs	r2, #4
 8005cac:	fa02 f303 	lsl.w	r3, r2, r3
 8005cb0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1a      	ldr	r2, [r3, #32]
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	43db      	mvns	r3, r3
 8005cba:	401a      	ands	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6a1a      	ldr	r2, [r3, #32]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f003 031f 	and.w	r3, r3, #31
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	621a      	str	r2, [r3, #32]
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ce2:	b580      	push	{r7, lr}
 8005ce4:	b082      	sub	sp, #8
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e03f      	b.n	8005d74 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005cfa:	b2db      	uxtb	r3, r3
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d106      	bne.n	8005d0e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f002 fc5b 	bl	80085c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2224      	movs	r2, #36	; 0x24
 8005d12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68da      	ldr	r2, [r3, #12]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d24:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d26:	6878      	ldr	r0, [r7, #4]
 8005d28:	f000 fb02 	bl	8006330 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	691a      	ldr	r2, [r3, #16]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d4a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d5a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2220      	movs	r2, #32
 8005d66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2220      	movs	r2, #32
 8005d6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005d72:	2300      	movs	r3, #0
}
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b085      	sub	sp, #20
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	4613      	mov	r3, r2
 8005d88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d130      	bne.n	8005df8 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d002      	beq.n	8005da2 <HAL_UART_Transmit_IT+0x26>
 8005d9c:	88fb      	ldrh	r3, [r7, #6]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d101      	bne.n	8005da6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e029      	b.n	8005dfa <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d101      	bne.n	8005db4 <HAL_UART_Transmit_IT+0x38>
 8005db0:	2302      	movs	r3, #2
 8005db2:	e022      	b.n	8005dfa <HAL_UART_Transmit_IT+0x7e>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2201      	movs	r2, #1
 8005db8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	88fa      	ldrh	r2, [r7, #6]
 8005dc6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	88fa      	ldrh	r2, [r7, #6]
 8005dcc:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2221      	movs	r2, #33	; 0x21
 8005dd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	68da      	ldr	r2, [r3, #12]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005df2:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	e000      	b.n	8005dfa <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005df8:	2302      	movs	r3, #2
  }
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e06:	b480      	push	{r7}
 8005e08:	b085      	sub	sp, #20
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	60f8      	str	r0, [r7, #12]
 8005e0e:	60b9      	str	r1, [r7, #8]
 8005e10:	4613      	mov	r3, r2
 8005e12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d140      	bne.n	8005ea2 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_UART_Receive_IT+0x26>
 8005e26:	88fb      	ldrh	r3, [r7, #6]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e039      	b.n	8005ea4 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e36:	2b01      	cmp	r3, #1
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Receive_IT+0x38>
 8005e3a:	2302      	movs	r3, #2
 8005e3c:	e032      	b.n	8005ea4 <HAL_UART_Receive_IT+0x9e>
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2201      	movs	r2, #1
 8005e42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	88fa      	ldrh	r2, [r7, #6]
 8005e50:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	88fa      	ldrh	r2, [r7, #6]
 8005e56:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2222      	movs	r2, #34	; 0x22
 8005e62:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e7c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	695a      	ldr	r2, [r3, #20]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	68da      	ldr	r2, [r3, #12]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f042 0220 	orr.w	r2, r2, #32
 8005e9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr

08005eb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b088      	sub	sp, #32
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	695b      	ldr	r3, [r3, #20]
 8005ece:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	f003 030f 	and.w	r3, r3, #15
 8005ede:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005ee0:	693b      	ldr	r3, [r7, #16]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10d      	bne.n	8005f02 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <HAL_UART_IRQHandler+0x52>
 8005ef0:	69bb      	ldr	r3, [r7, #24]
 8005ef2:	f003 0320 	and.w	r3, r3, #32
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f996 	bl	800622c <UART_Receive_IT>
      return;
 8005f00:	e0d1      	b.n	80060a6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80b0 	beq.w	800606a <HAL_UART_IRQHandler+0x1ba>
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d105      	bne.n	8005f20 <HAL_UART_IRQHandler+0x70>
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80a5 	beq.w	800606a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00a      	beq.n	8005f40 <HAL_UART_IRQHandler+0x90>
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	f043 0201 	orr.w	r2, r3, #1
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f003 0304 	and.w	r3, r3, #4
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00a      	beq.n	8005f60 <HAL_UART_IRQHandler+0xb0>
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f58:	f043 0202 	orr.w	r2, r3, #2
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00a      	beq.n	8005f80 <HAL_UART_IRQHandler+0xd0>
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f78:	f043 0204 	orr.w	r2, r3, #4
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	f003 0308 	and.w	r3, r3, #8
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00f      	beq.n	8005faa <HAL_UART_IRQHandler+0xfa>
 8005f8a:	69bb      	ldr	r3, [r7, #24]
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d104      	bne.n	8005f9e <HAL_UART_IRQHandler+0xee>
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fa2:	f043 0208 	orr.w	r2, r3, #8
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d078      	beq.n	80060a4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	f003 0320 	and.w	r3, r3, #32
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d007      	beq.n	8005fcc <HAL_UART_IRQHandler+0x11c>
 8005fbc:	69bb      	ldr	r3, [r7, #24]
 8005fbe:	f003 0320 	and.w	r3, r3, #32
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d002      	beq.n	8005fcc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f930 	bl	800622c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd6:	2b40      	cmp	r3, #64	; 0x40
 8005fd8:	bf0c      	ite	eq
 8005fda:	2301      	moveq	r3, #1
 8005fdc:	2300      	movne	r3, #0
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d102      	bne.n	8005ff4 <HAL_UART_IRQHandler+0x144>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d031      	beq.n	8006058 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f879 	bl	80060ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006004:	2b40      	cmp	r3, #64	; 0x40
 8006006:	d123      	bne.n	8006050 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695a      	ldr	r2, [r3, #20]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006016:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800601c:	2b00      	cmp	r3, #0
 800601e:	d013      	beq.n	8006048 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006024:	4a21      	ldr	r2, [pc, #132]	; (80060ac <HAL_UART_IRQHandler+0x1fc>)
 8006026:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602c:	4618      	mov	r0, r3
 800602e:	f7fb ff36 	bl	8001e9e <HAL_DMA_Abort_IT>
 8006032:	4603      	mov	r3, r0
 8006034:	2b00      	cmp	r3, #0
 8006036:	d016      	beq.n	8006066 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006042:	4610      	mov	r0, r2
 8006044:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006046:	e00e      	b.n	8006066 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 f845 	bl	80060d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800604e:	e00a      	b.n	8006066 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 f841 	bl	80060d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006056:	e006      	b.n	8006066 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 f83d 	bl	80060d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2200      	movs	r2, #0
 8006062:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006064:	e01e      	b.n	80060a4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006066:	bf00      	nop
    return;
 8006068:	e01c      	b.n	80060a4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006070:	2b00      	cmp	r3, #0
 8006072:	d008      	beq.n	8006086 <HAL_UART_IRQHandler+0x1d6>
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607a:	2b00      	cmp	r3, #0
 800607c:	d003      	beq.n	8006086 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f866 	bl	8006150 <UART_Transmit_IT>
    return;
 8006084:	e00f      	b.n	80060a6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00a      	beq.n	80060a6 <HAL_UART_IRQHandler+0x1f6>
 8006090:	69bb      	ldr	r3, [r7, #24]
 8006092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d005      	beq.n	80060a6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f8ae 	bl	80061fc <UART_EndTransmit_IT>
    return;
 80060a0:	bf00      	nop
 80060a2:	e000      	b.n	80060a6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80060a4:	bf00      	nop
  }
}
 80060a6:	3720      	adds	r7, #32
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}
 80060ac:	08006129 	.word	0x08006129

080060b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr

080060d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68da      	ldr	r2, [r3, #12]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006102:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695a      	ldr	r2, [r3, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0201 	bic.w	r2, r2, #1
 8006112:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006134:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2200      	movs	r2, #0
 800613a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	2200      	movs	r2, #0
 8006140:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006142:	68f8      	ldr	r0, [r7, #12]
 8006144:	f7ff ffc8 	bl	80060d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006148:	bf00      	nop
 800614a:	3710      	adds	r7, #16
 800614c:	46bd      	mov	sp, r7
 800614e:	bd80      	pop	{r7, pc}

08006150 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b085      	sub	sp, #20
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b21      	cmp	r3, #33	; 0x21
 8006162:	d144      	bne.n	80061ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	689b      	ldr	r3, [r3, #8]
 8006168:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616c:	d11a      	bne.n	80061a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6a1b      	ldr	r3, [r3, #32]
 8006172:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	461a      	mov	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006182:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d105      	bne.n	8006198 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a1b      	ldr	r3, [r3, #32]
 8006190:	1c9a      	adds	r2, r3, #2
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	621a      	str	r2, [r3, #32]
 8006196:	e00e      	b.n	80061b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6a1b      	ldr	r3, [r3, #32]
 800619c:	1c5a      	adds	r2, r3, #1
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	621a      	str	r2, [r3, #32]
 80061a2:	e008      	b.n	80061b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	1c59      	adds	r1, r3, #1
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	6211      	str	r1, [r2, #32]
 80061ae:	781a      	ldrb	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ba:	b29b      	uxth	r3, r3
 80061bc:	3b01      	subs	r3, #1
 80061be:	b29b      	uxth	r3, r3
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	4619      	mov	r1, r3
 80061c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d10f      	bne.n	80061ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68da      	ldr	r2, [r3, #12]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80061ea:	2300      	movs	r3, #0
 80061ec:	e000      	b.n	80061f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80061ee:	2302      	movs	r3, #2
  }
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3714      	adds	r7, #20
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	68da      	ldr	r2, [r3, #12]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006212:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff ff47 	bl	80060b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3708      	adds	r7, #8
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}

0800622c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800623a:	b2db      	uxtb	r3, r3
 800623c:	2b22      	cmp	r3, #34	; 0x22
 800623e:	d171      	bne.n	8006324 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006248:	d123      	bne.n	8006292 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800624e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691b      	ldr	r3, [r3, #16]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d10e      	bne.n	8006276 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	b29b      	uxth	r3, r3
 8006260:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006264:	b29a      	uxth	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	629a      	str	r2, [r3, #40]	; 0x28
 8006274:	e029      	b.n	80062ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	b29b      	uxth	r3, r3
 800627e:	b2db      	uxtb	r3, r3
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	629a      	str	r2, [r3, #40]	; 0x28
 8006290:	e01b      	b.n	80062ca <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	691b      	ldr	r3, [r3, #16]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6858      	ldr	r0, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062a4:	1c59      	adds	r1, r3, #1
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6291      	str	r1, [r2, #40]	; 0x28
 80062aa:	b2c2      	uxtb	r2, r0
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	e00c      	b.n	80062ca <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	b2da      	uxtb	r2, r3
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	1c58      	adds	r0, r3, #1
 80062be:	6879      	ldr	r1, [r7, #4]
 80062c0:	6288      	str	r0, [r1, #40]	; 0x28
 80062c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	3b01      	subs	r3, #1
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	687a      	ldr	r2, [r7, #4]
 80062d6:	4619      	mov	r1, r3
 80062d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d120      	bne.n	8006320 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68da      	ldr	r2, [r3, #12]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0220 	bic.w	r2, r2, #32
 80062ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68da      	ldr	r2, [r3, #12]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695a      	ldr	r2, [r3, #20]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f022 0201 	bic.w	r2, r2, #1
 800630c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2220      	movs	r2, #32
 8006312:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fed4 	bl	80060c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800631c:	2300      	movs	r3, #0
 800631e:	e002      	b.n	8006326 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006320:	2300      	movs	r3, #0
 8006322:	e000      	b.n	8006326 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006324:	2302      	movs	r3, #2
  }
}
 8006326:	4618      	mov	r0, r3
 8006328:	3710      	adds	r7, #16
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}
	...

08006330 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006334:	b085      	sub	sp, #20
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	68da      	ldr	r2, [r3, #12]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	689a      	ldr	r2, [r3, #8]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	691b      	ldr	r3, [r3, #16]
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	695b      	ldr	r3, [r3, #20]
 800635e:	431a      	orrs	r2, r3
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	69db      	ldr	r3, [r3, #28]
 8006364:	4313      	orrs	r3, r2
 8006366:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006372:	f023 030c 	bic.w	r3, r3, #12
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6812      	ldr	r2, [r2, #0]
 800637a:	68f9      	ldr	r1, [r7, #12]
 800637c:	430b      	orrs	r3, r1
 800637e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	699a      	ldr	r2, [r3, #24]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	430a      	orrs	r2, r1
 8006394:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800639e:	f040 818b 	bne.w	80066b8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4ac1      	ldr	r2, [pc, #772]	; (80066ac <UART_SetConfig+0x37c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d005      	beq.n	80063b8 <UART_SetConfig+0x88>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	4abf      	ldr	r2, [pc, #764]	; (80066b0 <UART_SetConfig+0x380>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	f040 80bd 	bne.w	8006532 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063b8:	f7fd fb50 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 80063bc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	461d      	mov	r5, r3
 80063c2:	f04f 0600 	mov.w	r6, #0
 80063c6:	46a8      	mov	r8, r5
 80063c8:	46b1      	mov	r9, r6
 80063ca:	eb18 0308 	adds.w	r3, r8, r8
 80063ce:	eb49 0409 	adc.w	r4, r9, r9
 80063d2:	4698      	mov	r8, r3
 80063d4:	46a1      	mov	r9, r4
 80063d6:	eb18 0805 	adds.w	r8, r8, r5
 80063da:	eb49 0906 	adc.w	r9, r9, r6
 80063de:	f04f 0100 	mov.w	r1, #0
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063ea:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063ee:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063f2:	4688      	mov	r8, r1
 80063f4:	4691      	mov	r9, r2
 80063f6:	eb18 0005 	adds.w	r0, r8, r5
 80063fa:	eb49 0106 	adc.w	r1, r9, r6
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	461d      	mov	r5, r3
 8006404:	f04f 0600 	mov.w	r6, #0
 8006408:	196b      	adds	r3, r5, r5
 800640a:	eb46 0406 	adc.w	r4, r6, r6
 800640e:	461a      	mov	r2, r3
 8006410:	4623      	mov	r3, r4
 8006412:	f7fa fc23 	bl	8000c5c <__aeabi_uldivmod>
 8006416:	4603      	mov	r3, r0
 8006418:	460c      	mov	r4, r1
 800641a:	461a      	mov	r2, r3
 800641c:	4ba5      	ldr	r3, [pc, #660]	; (80066b4 <UART_SetConfig+0x384>)
 800641e:	fba3 2302 	umull	r2, r3, r3, r2
 8006422:	095b      	lsrs	r3, r3, #5
 8006424:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	461d      	mov	r5, r3
 800642c:	f04f 0600 	mov.w	r6, #0
 8006430:	46a9      	mov	r9, r5
 8006432:	46b2      	mov	sl, r6
 8006434:	eb19 0309 	adds.w	r3, r9, r9
 8006438:	eb4a 040a 	adc.w	r4, sl, sl
 800643c:	4699      	mov	r9, r3
 800643e:	46a2      	mov	sl, r4
 8006440:	eb19 0905 	adds.w	r9, r9, r5
 8006444:	eb4a 0a06 	adc.w	sl, sl, r6
 8006448:	f04f 0100 	mov.w	r1, #0
 800644c:	f04f 0200 	mov.w	r2, #0
 8006450:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006454:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006458:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800645c:	4689      	mov	r9, r1
 800645e:	4692      	mov	sl, r2
 8006460:	eb19 0005 	adds.w	r0, r9, r5
 8006464:	eb4a 0106 	adc.w	r1, sl, r6
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	461d      	mov	r5, r3
 800646e:	f04f 0600 	mov.w	r6, #0
 8006472:	196b      	adds	r3, r5, r5
 8006474:	eb46 0406 	adc.w	r4, r6, r6
 8006478:	461a      	mov	r2, r3
 800647a:	4623      	mov	r3, r4
 800647c:	f7fa fbee 	bl	8000c5c <__aeabi_uldivmod>
 8006480:	4603      	mov	r3, r0
 8006482:	460c      	mov	r4, r1
 8006484:	461a      	mov	r2, r3
 8006486:	4b8b      	ldr	r3, [pc, #556]	; (80066b4 <UART_SetConfig+0x384>)
 8006488:	fba3 1302 	umull	r1, r3, r3, r2
 800648c:	095b      	lsrs	r3, r3, #5
 800648e:	2164      	movs	r1, #100	; 0x64
 8006490:	fb01 f303 	mul.w	r3, r1, r3
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	00db      	lsls	r3, r3, #3
 8006498:	3332      	adds	r3, #50	; 0x32
 800649a:	4a86      	ldr	r2, [pc, #536]	; (80066b4 <UART_SetConfig+0x384>)
 800649c:	fba2 2303 	umull	r2, r3, r2, r3
 80064a0:	095b      	lsrs	r3, r3, #5
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064a8:	4498      	add	r8, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	461d      	mov	r5, r3
 80064ae:	f04f 0600 	mov.w	r6, #0
 80064b2:	46a9      	mov	r9, r5
 80064b4:	46b2      	mov	sl, r6
 80064b6:	eb19 0309 	adds.w	r3, r9, r9
 80064ba:	eb4a 040a 	adc.w	r4, sl, sl
 80064be:	4699      	mov	r9, r3
 80064c0:	46a2      	mov	sl, r4
 80064c2:	eb19 0905 	adds.w	r9, r9, r5
 80064c6:	eb4a 0a06 	adc.w	sl, sl, r6
 80064ca:	f04f 0100 	mov.w	r1, #0
 80064ce:	f04f 0200 	mov.w	r2, #0
 80064d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064de:	4689      	mov	r9, r1
 80064e0:	4692      	mov	sl, r2
 80064e2:	eb19 0005 	adds.w	r0, r9, r5
 80064e6:	eb4a 0106 	adc.w	r1, sl, r6
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	461d      	mov	r5, r3
 80064f0:	f04f 0600 	mov.w	r6, #0
 80064f4:	196b      	adds	r3, r5, r5
 80064f6:	eb46 0406 	adc.w	r4, r6, r6
 80064fa:	461a      	mov	r2, r3
 80064fc:	4623      	mov	r3, r4
 80064fe:	f7fa fbad 	bl	8000c5c <__aeabi_uldivmod>
 8006502:	4603      	mov	r3, r0
 8006504:	460c      	mov	r4, r1
 8006506:	461a      	mov	r2, r3
 8006508:	4b6a      	ldr	r3, [pc, #424]	; (80066b4 <UART_SetConfig+0x384>)
 800650a:	fba3 1302 	umull	r1, r3, r3, r2
 800650e:	095b      	lsrs	r3, r3, #5
 8006510:	2164      	movs	r1, #100	; 0x64
 8006512:	fb01 f303 	mul.w	r3, r1, r3
 8006516:	1ad3      	subs	r3, r2, r3
 8006518:	00db      	lsls	r3, r3, #3
 800651a:	3332      	adds	r3, #50	; 0x32
 800651c:	4a65      	ldr	r2, [pc, #404]	; (80066b4 <UART_SetConfig+0x384>)
 800651e:	fba2 2303 	umull	r2, r3, r2, r3
 8006522:	095b      	lsrs	r3, r3, #5
 8006524:	f003 0207 	and.w	r2, r3, #7
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	4442      	add	r2, r8
 800652e:	609a      	str	r2, [r3, #8]
 8006530:	e26f      	b.n	8006a12 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006532:	f7fd fa7f 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8006536:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	461d      	mov	r5, r3
 800653c:	f04f 0600 	mov.w	r6, #0
 8006540:	46a8      	mov	r8, r5
 8006542:	46b1      	mov	r9, r6
 8006544:	eb18 0308 	adds.w	r3, r8, r8
 8006548:	eb49 0409 	adc.w	r4, r9, r9
 800654c:	4698      	mov	r8, r3
 800654e:	46a1      	mov	r9, r4
 8006550:	eb18 0805 	adds.w	r8, r8, r5
 8006554:	eb49 0906 	adc.w	r9, r9, r6
 8006558:	f04f 0100 	mov.w	r1, #0
 800655c:	f04f 0200 	mov.w	r2, #0
 8006560:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006564:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006568:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800656c:	4688      	mov	r8, r1
 800656e:	4691      	mov	r9, r2
 8006570:	eb18 0005 	adds.w	r0, r8, r5
 8006574:	eb49 0106 	adc.w	r1, r9, r6
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	461d      	mov	r5, r3
 800657e:	f04f 0600 	mov.w	r6, #0
 8006582:	196b      	adds	r3, r5, r5
 8006584:	eb46 0406 	adc.w	r4, r6, r6
 8006588:	461a      	mov	r2, r3
 800658a:	4623      	mov	r3, r4
 800658c:	f7fa fb66 	bl	8000c5c <__aeabi_uldivmod>
 8006590:	4603      	mov	r3, r0
 8006592:	460c      	mov	r4, r1
 8006594:	461a      	mov	r2, r3
 8006596:	4b47      	ldr	r3, [pc, #284]	; (80066b4 <UART_SetConfig+0x384>)
 8006598:	fba3 2302 	umull	r2, r3, r3, r2
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	461d      	mov	r5, r3
 80065a6:	f04f 0600 	mov.w	r6, #0
 80065aa:	46a9      	mov	r9, r5
 80065ac:	46b2      	mov	sl, r6
 80065ae:	eb19 0309 	adds.w	r3, r9, r9
 80065b2:	eb4a 040a 	adc.w	r4, sl, sl
 80065b6:	4699      	mov	r9, r3
 80065b8:	46a2      	mov	sl, r4
 80065ba:	eb19 0905 	adds.w	r9, r9, r5
 80065be:	eb4a 0a06 	adc.w	sl, sl, r6
 80065c2:	f04f 0100 	mov.w	r1, #0
 80065c6:	f04f 0200 	mov.w	r2, #0
 80065ca:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065ce:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065d2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065d6:	4689      	mov	r9, r1
 80065d8:	4692      	mov	sl, r2
 80065da:	eb19 0005 	adds.w	r0, r9, r5
 80065de:	eb4a 0106 	adc.w	r1, sl, r6
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	461d      	mov	r5, r3
 80065e8:	f04f 0600 	mov.w	r6, #0
 80065ec:	196b      	adds	r3, r5, r5
 80065ee:	eb46 0406 	adc.w	r4, r6, r6
 80065f2:	461a      	mov	r2, r3
 80065f4:	4623      	mov	r3, r4
 80065f6:	f7fa fb31 	bl	8000c5c <__aeabi_uldivmod>
 80065fa:	4603      	mov	r3, r0
 80065fc:	460c      	mov	r4, r1
 80065fe:	461a      	mov	r2, r3
 8006600:	4b2c      	ldr	r3, [pc, #176]	; (80066b4 <UART_SetConfig+0x384>)
 8006602:	fba3 1302 	umull	r1, r3, r3, r2
 8006606:	095b      	lsrs	r3, r3, #5
 8006608:	2164      	movs	r1, #100	; 0x64
 800660a:	fb01 f303 	mul.w	r3, r1, r3
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	3332      	adds	r3, #50	; 0x32
 8006614:	4a27      	ldr	r2, [pc, #156]	; (80066b4 <UART_SetConfig+0x384>)
 8006616:	fba2 2303 	umull	r2, r3, r2, r3
 800661a:	095b      	lsrs	r3, r3, #5
 800661c:	005b      	lsls	r3, r3, #1
 800661e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006622:	4498      	add	r8, r3
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	461d      	mov	r5, r3
 8006628:	f04f 0600 	mov.w	r6, #0
 800662c:	46a9      	mov	r9, r5
 800662e:	46b2      	mov	sl, r6
 8006630:	eb19 0309 	adds.w	r3, r9, r9
 8006634:	eb4a 040a 	adc.w	r4, sl, sl
 8006638:	4699      	mov	r9, r3
 800663a:	46a2      	mov	sl, r4
 800663c:	eb19 0905 	adds.w	r9, r9, r5
 8006640:	eb4a 0a06 	adc.w	sl, sl, r6
 8006644:	f04f 0100 	mov.w	r1, #0
 8006648:	f04f 0200 	mov.w	r2, #0
 800664c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006650:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006654:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006658:	4689      	mov	r9, r1
 800665a:	4692      	mov	sl, r2
 800665c:	eb19 0005 	adds.w	r0, r9, r5
 8006660:	eb4a 0106 	adc.w	r1, sl, r6
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	461d      	mov	r5, r3
 800666a:	f04f 0600 	mov.w	r6, #0
 800666e:	196b      	adds	r3, r5, r5
 8006670:	eb46 0406 	adc.w	r4, r6, r6
 8006674:	461a      	mov	r2, r3
 8006676:	4623      	mov	r3, r4
 8006678:	f7fa faf0 	bl	8000c5c <__aeabi_uldivmod>
 800667c:	4603      	mov	r3, r0
 800667e:	460c      	mov	r4, r1
 8006680:	461a      	mov	r2, r3
 8006682:	4b0c      	ldr	r3, [pc, #48]	; (80066b4 <UART_SetConfig+0x384>)
 8006684:	fba3 1302 	umull	r1, r3, r3, r2
 8006688:	095b      	lsrs	r3, r3, #5
 800668a:	2164      	movs	r1, #100	; 0x64
 800668c:	fb01 f303 	mul.w	r3, r1, r3
 8006690:	1ad3      	subs	r3, r2, r3
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	3332      	adds	r3, #50	; 0x32
 8006696:	4a07      	ldr	r2, [pc, #28]	; (80066b4 <UART_SetConfig+0x384>)
 8006698:	fba2 2303 	umull	r2, r3, r2, r3
 800669c:	095b      	lsrs	r3, r3, #5
 800669e:	f003 0207 	and.w	r2, r3, #7
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4442      	add	r2, r8
 80066a8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80066aa:	e1b2      	b.n	8006a12 <UART_SetConfig+0x6e2>
 80066ac:	40011000 	.word	0x40011000
 80066b0:	40011400 	.word	0x40011400
 80066b4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4ad7      	ldr	r2, [pc, #860]	; (8006a1c <UART_SetConfig+0x6ec>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d005      	beq.n	80066ce <UART_SetConfig+0x39e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4ad6      	ldr	r2, [pc, #856]	; (8006a20 <UART_SetConfig+0x6f0>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	f040 80d1 	bne.w	8006870 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80066ce:	f7fd f9c5 	bl	8003a5c <HAL_RCC_GetPCLK2Freq>
 80066d2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	469a      	mov	sl, r3
 80066d8:	f04f 0b00 	mov.w	fp, #0
 80066dc:	46d0      	mov	r8, sl
 80066de:	46d9      	mov	r9, fp
 80066e0:	eb18 0308 	adds.w	r3, r8, r8
 80066e4:	eb49 0409 	adc.w	r4, r9, r9
 80066e8:	4698      	mov	r8, r3
 80066ea:	46a1      	mov	r9, r4
 80066ec:	eb18 080a 	adds.w	r8, r8, sl
 80066f0:	eb49 090b 	adc.w	r9, r9, fp
 80066f4:	f04f 0100 	mov.w	r1, #0
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006700:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006704:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006708:	4688      	mov	r8, r1
 800670a:	4691      	mov	r9, r2
 800670c:	eb1a 0508 	adds.w	r5, sl, r8
 8006710:	eb4b 0609 	adc.w	r6, fp, r9
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	4619      	mov	r1, r3
 800671a:	f04f 0200 	mov.w	r2, #0
 800671e:	f04f 0300 	mov.w	r3, #0
 8006722:	f04f 0400 	mov.w	r4, #0
 8006726:	0094      	lsls	r4, r2, #2
 8006728:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800672c:	008b      	lsls	r3, r1, #2
 800672e:	461a      	mov	r2, r3
 8006730:	4623      	mov	r3, r4
 8006732:	4628      	mov	r0, r5
 8006734:	4631      	mov	r1, r6
 8006736:	f7fa fa91 	bl	8000c5c <__aeabi_uldivmod>
 800673a:	4603      	mov	r3, r0
 800673c:	460c      	mov	r4, r1
 800673e:	461a      	mov	r2, r3
 8006740:	4bb8      	ldr	r3, [pc, #736]	; (8006a24 <UART_SetConfig+0x6f4>)
 8006742:	fba3 2302 	umull	r2, r3, r3, r2
 8006746:	095b      	lsrs	r3, r3, #5
 8006748:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	469b      	mov	fp, r3
 8006750:	f04f 0c00 	mov.w	ip, #0
 8006754:	46d9      	mov	r9, fp
 8006756:	46e2      	mov	sl, ip
 8006758:	eb19 0309 	adds.w	r3, r9, r9
 800675c:	eb4a 040a 	adc.w	r4, sl, sl
 8006760:	4699      	mov	r9, r3
 8006762:	46a2      	mov	sl, r4
 8006764:	eb19 090b 	adds.w	r9, r9, fp
 8006768:	eb4a 0a0c 	adc.w	sl, sl, ip
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006778:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800677c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006780:	4689      	mov	r9, r1
 8006782:	4692      	mov	sl, r2
 8006784:	eb1b 0509 	adds.w	r5, fp, r9
 8006788:	eb4c 060a 	adc.w	r6, ip, sl
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	4619      	mov	r1, r3
 8006792:	f04f 0200 	mov.w	r2, #0
 8006796:	f04f 0300 	mov.w	r3, #0
 800679a:	f04f 0400 	mov.w	r4, #0
 800679e:	0094      	lsls	r4, r2, #2
 80067a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067a4:	008b      	lsls	r3, r1, #2
 80067a6:	461a      	mov	r2, r3
 80067a8:	4623      	mov	r3, r4
 80067aa:	4628      	mov	r0, r5
 80067ac:	4631      	mov	r1, r6
 80067ae:	f7fa fa55 	bl	8000c5c <__aeabi_uldivmod>
 80067b2:	4603      	mov	r3, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	461a      	mov	r2, r3
 80067b8:	4b9a      	ldr	r3, [pc, #616]	; (8006a24 <UART_SetConfig+0x6f4>)
 80067ba:	fba3 1302 	umull	r1, r3, r3, r2
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	2164      	movs	r1, #100	; 0x64
 80067c2:	fb01 f303 	mul.w	r3, r1, r3
 80067c6:	1ad3      	subs	r3, r2, r3
 80067c8:	011b      	lsls	r3, r3, #4
 80067ca:	3332      	adds	r3, #50	; 0x32
 80067cc:	4a95      	ldr	r2, [pc, #596]	; (8006a24 <UART_SetConfig+0x6f4>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	095b      	lsrs	r3, r3, #5
 80067d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80067d8:	4498      	add	r8, r3
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	469b      	mov	fp, r3
 80067de:	f04f 0c00 	mov.w	ip, #0
 80067e2:	46d9      	mov	r9, fp
 80067e4:	46e2      	mov	sl, ip
 80067e6:	eb19 0309 	adds.w	r3, r9, r9
 80067ea:	eb4a 040a 	adc.w	r4, sl, sl
 80067ee:	4699      	mov	r9, r3
 80067f0:	46a2      	mov	sl, r4
 80067f2:	eb19 090b 	adds.w	r9, r9, fp
 80067f6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067fa:	f04f 0100 	mov.w	r1, #0
 80067fe:	f04f 0200 	mov.w	r2, #0
 8006802:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006806:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800680a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800680e:	4689      	mov	r9, r1
 8006810:	4692      	mov	sl, r2
 8006812:	eb1b 0509 	adds.w	r5, fp, r9
 8006816:	eb4c 060a 	adc.w	r6, ip, sl
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	4619      	mov	r1, r3
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	f04f 0300 	mov.w	r3, #0
 8006828:	f04f 0400 	mov.w	r4, #0
 800682c:	0094      	lsls	r4, r2, #2
 800682e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006832:	008b      	lsls	r3, r1, #2
 8006834:	461a      	mov	r2, r3
 8006836:	4623      	mov	r3, r4
 8006838:	4628      	mov	r0, r5
 800683a:	4631      	mov	r1, r6
 800683c:	f7fa fa0e 	bl	8000c5c <__aeabi_uldivmod>
 8006840:	4603      	mov	r3, r0
 8006842:	460c      	mov	r4, r1
 8006844:	461a      	mov	r2, r3
 8006846:	4b77      	ldr	r3, [pc, #476]	; (8006a24 <UART_SetConfig+0x6f4>)
 8006848:	fba3 1302 	umull	r1, r3, r3, r2
 800684c:	095b      	lsrs	r3, r3, #5
 800684e:	2164      	movs	r1, #100	; 0x64
 8006850:	fb01 f303 	mul.w	r3, r1, r3
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	011b      	lsls	r3, r3, #4
 8006858:	3332      	adds	r3, #50	; 0x32
 800685a:	4a72      	ldr	r2, [pc, #456]	; (8006a24 <UART_SetConfig+0x6f4>)
 800685c:	fba2 2303 	umull	r2, r3, r2, r3
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	f003 020f 	and.w	r2, r3, #15
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4442      	add	r2, r8
 800686c:	609a      	str	r2, [r3, #8]
 800686e:	e0d0      	b.n	8006a12 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006870:	f7fd f8e0 	bl	8003a34 <HAL_RCC_GetPCLK1Freq>
 8006874:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	469a      	mov	sl, r3
 800687a:	f04f 0b00 	mov.w	fp, #0
 800687e:	46d0      	mov	r8, sl
 8006880:	46d9      	mov	r9, fp
 8006882:	eb18 0308 	adds.w	r3, r8, r8
 8006886:	eb49 0409 	adc.w	r4, r9, r9
 800688a:	4698      	mov	r8, r3
 800688c:	46a1      	mov	r9, r4
 800688e:	eb18 080a 	adds.w	r8, r8, sl
 8006892:	eb49 090b 	adc.w	r9, r9, fp
 8006896:	f04f 0100 	mov.w	r1, #0
 800689a:	f04f 0200 	mov.w	r2, #0
 800689e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068a2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068a6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068aa:	4688      	mov	r8, r1
 80068ac:	4691      	mov	r9, r2
 80068ae:	eb1a 0508 	adds.w	r5, sl, r8
 80068b2:	eb4b 0609 	adc.w	r6, fp, r9
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	4619      	mov	r1, r3
 80068bc:	f04f 0200 	mov.w	r2, #0
 80068c0:	f04f 0300 	mov.w	r3, #0
 80068c4:	f04f 0400 	mov.w	r4, #0
 80068c8:	0094      	lsls	r4, r2, #2
 80068ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068ce:	008b      	lsls	r3, r1, #2
 80068d0:	461a      	mov	r2, r3
 80068d2:	4623      	mov	r3, r4
 80068d4:	4628      	mov	r0, r5
 80068d6:	4631      	mov	r1, r6
 80068d8:	f7fa f9c0 	bl	8000c5c <__aeabi_uldivmod>
 80068dc:	4603      	mov	r3, r0
 80068de:	460c      	mov	r4, r1
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b50      	ldr	r3, [pc, #320]	; (8006a24 <UART_SetConfig+0x6f4>)
 80068e4:	fba3 2302 	umull	r2, r3, r3, r2
 80068e8:	095b      	lsrs	r3, r3, #5
 80068ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	469b      	mov	fp, r3
 80068f2:	f04f 0c00 	mov.w	ip, #0
 80068f6:	46d9      	mov	r9, fp
 80068f8:	46e2      	mov	sl, ip
 80068fa:	eb19 0309 	adds.w	r3, r9, r9
 80068fe:	eb4a 040a 	adc.w	r4, sl, sl
 8006902:	4699      	mov	r9, r3
 8006904:	46a2      	mov	sl, r4
 8006906:	eb19 090b 	adds.w	r9, r9, fp
 800690a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800690e:	f04f 0100 	mov.w	r1, #0
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800691a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800691e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006922:	4689      	mov	r9, r1
 8006924:	4692      	mov	sl, r2
 8006926:	eb1b 0509 	adds.w	r5, fp, r9
 800692a:	eb4c 060a 	adc.w	r6, ip, sl
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	4619      	mov	r1, r3
 8006934:	f04f 0200 	mov.w	r2, #0
 8006938:	f04f 0300 	mov.w	r3, #0
 800693c:	f04f 0400 	mov.w	r4, #0
 8006940:	0094      	lsls	r4, r2, #2
 8006942:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006946:	008b      	lsls	r3, r1, #2
 8006948:	461a      	mov	r2, r3
 800694a:	4623      	mov	r3, r4
 800694c:	4628      	mov	r0, r5
 800694e:	4631      	mov	r1, r6
 8006950:	f7fa f984 	bl	8000c5c <__aeabi_uldivmod>
 8006954:	4603      	mov	r3, r0
 8006956:	460c      	mov	r4, r1
 8006958:	461a      	mov	r2, r3
 800695a:	4b32      	ldr	r3, [pc, #200]	; (8006a24 <UART_SetConfig+0x6f4>)
 800695c:	fba3 1302 	umull	r1, r3, r3, r2
 8006960:	095b      	lsrs	r3, r3, #5
 8006962:	2164      	movs	r1, #100	; 0x64
 8006964:	fb01 f303 	mul.w	r3, r1, r3
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	011b      	lsls	r3, r3, #4
 800696c:	3332      	adds	r3, #50	; 0x32
 800696e:	4a2d      	ldr	r2, [pc, #180]	; (8006a24 <UART_SetConfig+0x6f4>)
 8006970:	fba2 2303 	umull	r2, r3, r2, r3
 8006974:	095b      	lsrs	r3, r3, #5
 8006976:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800697a:	4498      	add	r8, r3
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	469b      	mov	fp, r3
 8006980:	f04f 0c00 	mov.w	ip, #0
 8006984:	46d9      	mov	r9, fp
 8006986:	46e2      	mov	sl, ip
 8006988:	eb19 0309 	adds.w	r3, r9, r9
 800698c:	eb4a 040a 	adc.w	r4, sl, sl
 8006990:	4699      	mov	r9, r3
 8006992:	46a2      	mov	sl, r4
 8006994:	eb19 090b 	adds.w	r9, r9, fp
 8006998:	eb4a 0a0c 	adc.w	sl, sl, ip
 800699c:	f04f 0100 	mov.w	r1, #0
 80069a0:	f04f 0200 	mov.w	r2, #0
 80069a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069b0:	4689      	mov	r9, r1
 80069b2:	4692      	mov	sl, r2
 80069b4:	eb1b 0509 	adds.w	r5, fp, r9
 80069b8:	eb4c 060a 	adc.w	r6, ip, sl
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	4619      	mov	r1, r3
 80069c2:	f04f 0200 	mov.w	r2, #0
 80069c6:	f04f 0300 	mov.w	r3, #0
 80069ca:	f04f 0400 	mov.w	r4, #0
 80069ce:	0094      	lsls	r4, r2, #2
 80069d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80069d4:	008b      	lsls	r3, r1, #2
 80069d6:	461a      	mov	r2, r3
 80069d8:	4623      	mov	r3, r4
 80069da:	4628      	mov	r0, r5
 80069dc:	4631      	mov	r1, r6
 80069de:	f7fa f93d 	bl	8000c5c <__aeabi_uldivmod>
 80069e2:	4603      	mov	r3, r0
 80069e4:	460c      	mov	r4, r1
 80069e6:	461a      	mov	r2, r3
 80069e8:	4b0e      	ldr	r3, [pc, #56]	; (8006a24 <UART_SetConfig+0x6f4>)
 80069ea:	fba3 1302 	umull	r1, r3, r3, r2
 80069ee:	095b      	lsrs	r3, r3, #5
 80069f0:	2164      	movs	r1, #100	; 0x64
 80069f2:	fb01 f303 	mul.w	r3, r1, r3
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	011b      	lsls	r3, r3, #4
 80069fa:	3332      	adds	r3, #50	; 0x32
 80069fc:	4a09      	ldr	r2, [pc, #36]	; (8006a24 <UART_SetConfig+0x6f4>)
 80069fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	f003 020f 	and.w	r2, r3, #15
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4442      	add	r2, r8
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	e7ff      	b.n	8006a12 <UART_SetConfig+0x6e2>
 8006a12:	bf00      	nop
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a1c:	40011000 	.word	0x40011000
 8006a20:	40011400 	.word	0x40011400
 8006a24:	51eb851f 	.word	0x51eb851f

08006a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a2c:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8006a30:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a32:	f7fa fa93 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a36:	f000 fdb3 	bl	80075a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a3a:	f001 f977 	bl	8007d2c <MX_GPIO_Init>
  MX_TIM9_Init();
 8006a3e:	f001 f893 	bl	8007b68 <MX_TIM9_Init>
  MX_SPI2_Init();
 8006a42:	f000 ff49 	bl	80078d8 <MX_SPI2_Init>
  MX_ADC1_Init();
 8006a46:	f000 fe13 	bl	8007670 <MX_ADC1_Init>
  MX_ADC2_Init();
 8006a4a:	f000 fe63 	bl	8007714 <MX_ADC2_Init>
  MX_CAN1_Init();
 8006a4e:	f000 feb3 	bl	80077b8 <MX_CAN1_Init>
  MX_I2C1_Init();
 8006a52:	f000 fee5 	bl	8007820 <MX_I2C1_Init>
  MX_I2C2_Init();
 8006a56:	f000 ff11 	bl	800787c <MX_I2C2_Init>
  MX_TIM1_Init();
 8006a5a:	f000 ff75 	bl	8007948 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8006a5e:	f001 f93b 	bl	8007cd8 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8006a62:	f001 f829 	bl	8007ab8 <MX_TIM8_Init>
  MX_TIM13_Init();
 8006a66:	f001 f8f1 	bl	8007c4c <MX_TIM13_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8006a6a:	2100      	movs	r1, #0
 8006a6c:	4875      	ldr	r0, [pc, #468]	; (8006c44 <main+0x21c>)
 8006a6e:	f7fd ff1d 	bl	80048ac <HAL_TIM_PWM_Start>
  HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2);
 8006a72:	2104      	movs	r1, #4
 8006a74:	4873      	ldr	r0, [pc, #460]	; (8006c44 <main+0x21c>)
 8006a76:	f7fd fea5 	bl	80047c4 <HAL_TIM_OC_Start>



  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a80:	4871      	ldr	r0, [pc, #452]	; (8006c48 <main+0x220>)
 8006a82:	f7fb fbc9 	bl	8002218 <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8, 0);
 8006a86:	2200      	movs	r2, #0
 8006a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a8c:	486e      	ldr	r0, [pc, #440]	; (8006c48 <main+0x220>)
 8006a8e:	f7fb fbc3 	bl	8002218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, 0);
 8006a92:	2200      	movs	r2, #0
 8006a94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a98:	486b      	ldr	r0, [pc, #428]	; (8006c48 <main+0x220>)
 8006a9a:	f7fb fbbd 	bl	8002218 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_12, 1);
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006aa4:	4868      	ldr	r0, [pc, #416]	; (8006c48 <main+0x220>)
 8006aa6:	f7fb fbb7 	bl	8002218 <HAL_GPIO_WritePin>

  SCB->CPACR |= 0xf00000;
 8006aaa:	4b68      	ldr	r3, [pc, #416]	; (8006c4c <main+0x224>)
 8006aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ab0:	4a66      	ldr	r2, [pc, #408]	; (8006c4c <main+0x224>)
 8006ab2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006ab6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
//  for(;;)
//   {
//   HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
//   HAL_Delay(600);
//   }
  int i=0;
 8006aba:	2300      	movs	r3, #0
 8006abc:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
  uint32_t i_fast = 0;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
  uint32_t i_slow = 0;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
  uint32_t fast2slow = 10000;
 8006acc:	f242 7310 	movw	r3, #10000	; 0x2710
 8006ad0:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c

  //strcpy((char*)buf, "YUUP");
  sprintf((char*)buf, "START");
 8006ad4:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8006ad8:	4a5d      	ldr	r2, [pc, #372]	; (8006c50 <main+0x228>)
 8006ada:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ade:	6018      	str	r0, [r3, #0]
 8006ae0:	3304      	adds	r3, #4
 8006ae2:	8019      	strh	r1, [r3, #0]
  ch='t';
 8006ae4:	2374      	movs	r3, #116	; 0x74
 8006ae6:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
  int blink_duration = 100;
 8006aea:	2364      	movs	r3, #100	; 0x64
 8006aec:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428

  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 8006af0:	213c      	movs	r1, #60	; 0x3c
 8006af2:	4858      	ldr	r0, [pc, #352]	; (8006c54 <main+0x22c>)
 8006af4:	f7fd ffdf 	bl	8004ab6 <HAL_TIM_Encoder_Start_IT>
//  HAL_Delay(2);


  // --- MOTOR DRIVER ----------------------------------------------------
  //EN_GATE
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8006af8:	2100      	movs	r1, #0
 8006afa:	4857      	ldr	r0, [pc, #348]	; (8006c58 <main+0x230>)
 8006afc:	f7fd fed6 	bl	80048ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 8006b00:	2100      	movs	r1, #0
 8006b02:	4855      	ldr	r0, [pc, #340]	; (8006c58 <main+0x230>)
 8006b04:	f7fe ffbb 	bl	8005a7e <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8006b08:	2104      	movs	r1, #4
 8006b0a:	4853      	ldr	r0, [pc, #332]	; (8006c58 <main+0x230>)
 8006b0c:	f7fd fece 	bl	80048ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 8006b10:	2104      	movs	r1, #4
 8006b12:	4851      	ldr	r0, [pc, #324]	; (8006c58 <main+0x230>)
 8006b14:	f7fe ffb3 	bl	8005a7e <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8006b18:	2108      	movs	r1, #8
 8006b1a:	484f      	ldr	r0, [pc, #316]	; (8006c58 <main+0x230>)
 8006b1c:	f7fd fec6 	bl	80048ac <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 8006b20:	2108      	movs	r1, #8
 8006b22:	484d      	ldr	r0, [pc, #308]	; (8006c58 <main+0x230>)
 8006b24:	f7fe ffab 	bl	8005a7e <HAL_TIMEx_PWMN_Start>

  HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006b2e:	4846      	ldr	r0, [pc, #280]	; (8006c48 <main+0x220>)
 8006b30:	f7fb fb72 	bl	8002218 <HAL_GPIO_WritePin>

  // --- ADC --------------------------------------
  ADC_ChannelConfTypeDef adcChannel;
  adcChannel.Channel = ADC_CHANNEL_14;
 8006b34:	230e      	movs	r3, #14
 8006b36:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8
	adcChannel.Rank = 1;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
	adcChannel.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8006b40:	2307      	movs	r3, #7
 8006b42:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
	adcChannel.Offset = 0;
 8006b46:	2300      	movs	r3, #0
 8006b48:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4

	HAL_ADC_ConfigChannel(&hadc2, &adcChannel);
 8006b4c:	f507 7372 	add.w	r3, r7, #968	; 0x3c8
 8006b50:	4619      	mov	r1, r3
 8006b52:	4842      	ldr	r0, [pc, #264]	; (8006c5c <main+0x234>)
 8006b54:	f7fa fd6e 	bl	8001634 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc2);
 8006b58:	4840      	ldr	r0, [pc, #256]	; (8006c5c <main+0x234>)
 8006b5a:	f7fa fab5 	bl	80010c8 <HAL_ADC_Start>

  // --- ADC ----------------------------------------------------
	//see https://visualgdb.com/tutorials/arm/stm32/adc/
	//uint32_t a_val;
	//a_val = HAL_ADC_GetValue(&hadc2)
	HAL_ADC_Start(&hadc2);
 8006b5e:	483f      	ldr	r0, [pc, #252]	; (8006c5c <main+0x234>)
 8006b60:	f7fa fab2 	bl	80010c8 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc2, 2000) == HAL_OK)
 8006b64:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8006b68:	483c      	ldr	r0, [pc, #240]	; (8006c5c <main+0x234>)
 8006b6a:	f7fa fb73 	bl	8001254 <HAL_ADC_PollForConversion>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d109      	bne.n	8006b88 <main+0x160>
	{
			g_ADCValue = HAL_ADC_GetValue(&hadc2);
 8006b74:	4839      	ldr	r0, [pc, #228]	; (8006c5c <main+0x234>)
 8006b76:	f7fa fd32 	bl	80015de <HAL_ADC_GetValue>
 8006b7a:	f8c7 0424 	str.w	r0, [r7, #1060]	; 0x424
			g_MeasurementNumber++;
 8006b7e:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 8006b82:	3301      	adds	r3, #1
 8006b84:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
	// ---I2C2 IMU ------------------------------------------------
	//see: https://www.youtube.com/watch?v=isOekyygpR8
	//b1101000
	char accel_char[20];

	buf[0] = 0x6B; //power register
 8006b88:	236b      	movs	r3, #107	; 0x6b
 8006b8a:	f887 33dc 	strb.w	r3, [r7, #988]	; 0x3dc
	buf[1] = 0x00; //switch on
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 33dd 	strb.w	r3, [r7, #989]	; 0x3dd
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 2, HAL_MAX_DELAY);
 8006b94:	23d0      	movs	r3, #208	; 0xd0
 8006b96:	b299      	uxth	r1, r3
 8006b98:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 8006b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	482e      	ldr	r0, [pc, #184]	; (8006c60 <main+0x238>)
 8006ba6:	f7fb fcbb 	bl	8002520 <HAL_I2C_Master_Transmit>
 8006baa:	4603      	mov	r3, r0
 8006bac:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	if (ret != HAL_OK){
 8006bb0:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <main+0x1a2>
		strcpy((char*)buf, "Error IMU T\r\n");
 8006bb8:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8006bbc:	4a29      	ldr	r2, [pc, #164]	; (8006c64 <main+0x23c>)
 8006bbe:	461c      	mov	r4, r3
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006bc4:	c407      	stmia	r4!, {r0, r1, r2}
 8006bc6:	8023      	strh	r3, [r4, #0]
 8006bc8:	e002      	b.n	8006bd0 <main+0x1a8>
	} else {
		buf[0] = 0x00;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	f887 33dc 	strb.w	r3, [r7, #988]	; 0x3dc
	}

	buf[0] = 0x3B;
 8006bd0:	233b      	movs	r3, #59	; 0x3b
 8006bd2:	f887 33dc 	strb.w	r3, [r7, #988]	; 0x3dc
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006bd6:	23d0      	movs	r3, #208	; 0xd0
 8006bd8:	b299      	uxth	r1, r3
 8006bda:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 8006bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2301      	movs	r3, #1
 8006be6:	481e      	ldr	r0, [pc, #120]	; (8006c60 <main+0x238>)
 8006be8:	f7fb fc9a 	bl	8002520 <HAL_I2C_Master_Transmit>
 8006bec:	4603      	mov	r3, r0
 8006bee:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	if (ret != HAL_OK){
 8006bf2:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <main+0x1e4>
		strcpy((char*)buf, "Error IMU T\r\n");
 8006bfa:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8006bfe:	4a19      	ldr	r2, [pc, #100]	; (8006c64 <main+0x23c>)
 8006c00:	461c      	mov	r4, r3
 8006c02:	4613      	mov	r3, r2
 8006c04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c06:	c407      	stmia	r4!, {r0, r1, r2}
 8006c08:	8023      	strh	r3, [r4, #0]
 8006c0a:	e03b      	b.n	8006c84 <main+0x25c>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, buf, 1, HAL_MAX_DELAY);
 8006c0c:	23d0      	movs	r3, #208	; 0xd0
 8006c0e:	b299      	uxth	r1, r3
 8006c10:	f507 7277 	add.w	r2, r7, #988	; 0x3dc
 8006c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c18:	9300      	str	r3, [sp, #0]
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	4810      	ldr	r0, [pc, #64]	; (8006c60 <main+0x238>)
 8006c1e:	f7fb fd7d 	bl	800271c <HAL_I2C_Master_Receive>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		if (ret != HAL_OK){
 8006c28:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01d      	beq.n	8006c6c <main+0x244>
			strcpy((char*)buf, "Error IMU R\r\n");
 8006c30:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8006c34:	4a0c      	ldr	r2, [pc, #48]	; (8006c68 <main+0x240>)
 8006c36:	461c      	mov	r4, r3
 8006c38:	4613      	mov	r3, r2
 8006c3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c3c:	c407      	stmia	r4!, {r0, r1, r2}
 8006c3e:	8023      	strh	r3, [r4, #0]
 8006c40:	e020      	b.n	8006c84 <main+0x25c>
 8006c42:	bf00      	nop
 8006c44:	20000330 	.word	0x20000330
 8006c48:	40021000 	.word	0x40021000
 8006c4c:	e000ed00 	.word	0xe000ed00
 8006c50:	0800a218 	.word	0x0800a218
 8006c54:	200000f4 	.word	0x200000f4
 8006c58:	200002f0 	.word	0x200002f0
 8006c5c:	20000174 	.word	0x20000174
 8006c60:	20000210 	.word	0x20000210
 8006c64:	0800a220 	.word	0x0800a220
 8006c68:	0800a230 	.word	0x0800a230
		} else {
			accel8l = (int8_t)buf[0];
 8006c6c:	f897 33dc 	ldrb.w	r3, [r7, #988]	; 0x3dc
 8006c70:	f887 341e 	strb.w	r3, [r7, #1054]	; 0x41e
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 8006c74:	f897 241e 	ldrb.w	r2, [r7, #1054]	; 0x41e
 8006c78:	f507 736d 	add.w	r3, r7, #948	; 0x3b4
 8006c7c:	496a      	ldr	r1, [pc, #424]	; (8006e28 <main+0x400>)
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f001 fe58 	bl	8008934 <siprintf>
//					}
//
//				}

	// --- TIMERS ----------------------------------------------------
	TIM9->CCR1 = blink_duration;
 8006c84:	4a69      	ldr	r2, [pc, #420]	; (8006e2c <main+0x404>)
 8006c86:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8006c8a:	6353      	str	r3, [r2, #52]	; 0x34
	TIM9->CCR2 = blink_duration;
 8006c8c:	4a67      	ldr	r2, [pc, #412]	; (8006e2c <main+0x404>)
 8006c8e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 8006c92:	6393      	str	r3, [r2, #56]	; 0x38

	// --- GPIO ----------------------------------------------------

  GPIOE->BSRR = GPIO_PIN_4; //switches LD2
 8006c94:	4b66      	ldr	r3, [pc, #408]	; (8006e30 <main+0x408>)
 8006c96:	2210      	movs	r2, #16
 8006c98:	619a      	str	r2, [r3, #24]


  // --- SPI ----------------------------------------------------
	//ROT0_nCS_GPIO_Port->BSRR = (uint32_t)ROT0_nCS_Pin << 16U;

	uint16_t address = 0x0000;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
	uint16_t value = 0x0000;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f8a7 33b0 	strh.w	r3, [r7, #944]	; 0x3b0

	// --- set ABI and enable PWM
	//TODO: Error handling
	address = AS_ADDR_SETTINGS1 | AS_WRITE ;
 8006ca6:	2318      	movs	r3, #24
 8006ca8:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
	value = 0x0080 | AS_ODD;
 8006cac:	f248 0380 	movw	r3, #32896	; 0x8080
 8006cb0:	f8a7 33b0 	strh.w	r3, [r7, #944]	; 0x3b0
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cba:	485e      	ldr	r0, [pc, #376]	; (8006e34 <main+0x40c>)
 8006cbc:	f7fb faac 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006cc0:	f207 31b2 	addw	r1, r7, #946	; 0x3b2
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	485b      	ldr	r0, [pc, #364]	; (8006e38 <main+0x410>)
 8006cca:	f7fc ff3f 	bl	8003b4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cd4:	4857      	ldr	r0, [pc, #348]	; (8006e34 <main+0x40c>)
 8006cd6:	f7fb fa9f 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ce0:	4854      	ldr	r0, [pc, #336]	; (8006e34 <main+0x40c>)
 8006ce2:	f7fb fa99 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8006ce6:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8006cea:	2301      	movs	r3, #1
 8006cec:	2201      	movs	r2, #1
 8006cee:	4852      	ldr	r0, [pc, #328]	; (8006e38 <main+0x410>)
 8006cf0:	f7fc ff2c 	bl	8003b4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cfa:	484e      	ldr	r0, [pc, #312]	; (8006e34 <main+0x40c>)
 8006cfc:	f7fb fa8c 	bl	8002218 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses
	address = AS_ADDR_SETTINGS2 | AS_WRITE ;
 8006d00:	f248 0319 	movw	r3, #32793	; 0x8019
 8006d04:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
	value = 0x0020 | AS_ODD;
 8006d08:	f248 0320 	movw	r3, #32800	; 0x8020
 8006d0c:	f8a7 33b0 	strh.w	r3, [r7, #944]	; 0x3b0
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d10:	2200      	movs	r2, #0
 8006d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d16:	4847      	ldr	r0, [pc, #284]	; (8006e34 <main+0x40c>)
 8006d18:	f7fb fa7e 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);
 8006d1c:	f207 31b2 	addw	r1, r7, #946	; 0x3b2
 8006d20:	2301      	movs	r3, #1
 8006d22:	2201      	movs	r2, #1
 8006d24:	4844      	ldr	r0, [pc, #272]	; (8006e38 <main+0x410>)
 8006d26:	f7fc ff11 	bl	8003b4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d30:	4840      	ldr	r0, [pc, #256]	; (8006e34 <main+0x40c>)
 8006d32:	f7fb fa71 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d36:	2200      	movs	r2, #0
 8006d38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d3c:	483d      	ldr	r0, [pc, #244]	; (8006e34 <main+0x40c>)
 8006d3e:	f7fb fa6b 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&value, 1, 1);
 8006d42:	f507 716c 	add.w	r1, r7, #944	; 0x3b0
 8006d46:	2301      	movs	r3, #1
 8006d48:	2201      	movs	r2, #1
 8006d4a:	483b      	ldr	r0, [pc, #236]	; (8006e38 <main+0x410>)
 8006d4c:	f7fc fefe 	bl	8003b4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006d50:	2201      	movs	r2, #1
 8006d52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d56:	4837      	ldr	r0, [pc, #220]	; (8006e34 <main+0x40c>)
 8006d58:	f7fb fa5e 	bl	8002218 <HAL_GPIO_WritePin>

	// --- read angle
	address = 0x3FFE | AS_READ ;
 8006d5c:	f647 73fe 	movw	r3, #32766	; 0x7ffe
 8006d60:	f8a7 33b2 	strh.w	r3, [r7, #946]	; 0x3b2
	uint16_t angle = 0x0000;
 8006d64:	2300      	movs	r3, #0
 8006d66:	f8a7 33ae 	strh.w	r3, [r7, #942]	; 0x3ae
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d70:	4830      	ldr	r0, [pc, #192]	; (8006e34 <main+0x40c>)
 8006d72:	f7fb fa51 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint16_t *)&address, 1, 1);//this is the value
 8006d76:	f207 31b2 	addw	r1, r7, #946	; 0x3b2
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	482e      	ldr	r0, [pc, #184]	; (8006e38 <main+0x410>)
 8006d80:	f7fc fee4 	bl	8003b4c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006d84:	2201      	movs	r2, #1
 8006d86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d8a:	482a      	ldr	r0, [pc, #168]	; (8006e34 <main+0x40c>)
 8006d8c:	f7fb fa44 	bl	8002218 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8006d90:	2200      	movs	r2, #0
 8006d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d96:	4827      	ldr	r0, [pc, #156]	; (8006e34 <main+0x40c>)
 8006d98:	f7fb fa3e 	bl	8002218 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint16_t *)&angle, 1, 1);
 8006d9c:	f207 31ae 	addw	r1, r7, #942	; 0x3ae
 8006da0:	2301      	movs	r3, #1
 8006da2:	2201      	movs	r2, #1
 8006da4:	4824      	ldr	r0, [pc, #144]	; (8006e38 <main+0x410>)
 8006da6:	f7fd f805 	bl	8003db4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8006daa:	2201      	movs	r2, #1
 8006dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006db0:	4820      	ldr	r0, [pc, #128]	; (8006e34 <main+0x40c>)
 8006db2:	f7fb fa31 	bl	8002218 <HAL_GPIO_WritePin>

	// --- Calibrate counter_angle -----------------------------------
	angle &= AS_DATA_MASK;
 8006db6:	f8b7 33ae 	ldrh.w	r3, [r7, #942]	; 0x3ae
 8006dba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	f8a7 33ae 	strh.w	r3, [r7, #942]	; 0x3ae
	TIM8->CNT = (uint16_t) ((float)angle /16384.0 * 2000.0);
 8006dc4:	f8b7 33ae 	ldrh.w	r3, [r7, #942]	; 0x3ae
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd0:	ee17 0a90 	vmov	r0, s15
 8006dd4:	f7f9 fbb8 	bl	8000548 <__aeabi_f2d>
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <main+0x414>)
 8006dde:	f7f9 fd35 	bl	800084c <__aeabi_ddiv>
 8006de2:	4603      	mov	r3, r0
 8006de4:	460c      	mov	r4, r1
 8006de6:	4618      	mov	r0, r3
 8006de8:	4621      	mov	r1, r4
 8006dea:	f04f 0200 	mov.w	r2, #0
 8006dee:	4b14      	ldr	r3, [pc, #80]	; (8006e40 <main+0x418>)
 8006df0:	f7f9 fc02 	bl	80005f8 <__aeabi_dmul>
 8006df4:	4603      	mov	r3, r0
 8006df6:	460c      	mov	r4, r1
 8006df8:	4618      	mov	r0, r3
 8006dfa:	4621      	mov	r1, r4
 8006dfc:	f7f9 febe 	bl	8000b7c <__aeabi_d2uiz>
 8006e00:	4603      	mov	r3, r0
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	4b0f      	ldr	r3, [pc, #60]	; (8006e44 <main+0x41c>)
 8006e06:	625a      	str	r2, [r3, #36]	; 0x24



	float amp = 0.05;  // amp
 8006e08:	4b0f      	ldr	r3, [pc, #60]	; (8006e48 <main+0x420>)
 8006e0a:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8006e0e:	6013      	str	r3, [r2, #0]
	float phase_shift = PI/2;
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <main+0x424>)
 8006e12:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8006e16:	6013      	str	r3, [r2, #0]
	int pwm = 2048;
 8006e18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006e1c:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418

  float lookup[210];

  for (int i=0; i<210; i++){
 8006e20:	2300      	movs	r3, #0
 8006e22:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8006e26:	e06b      	b.n	8006f00 <main+0x4d8>
 8006e28:	0800a240 	.word	0x0800a240
 8006e2c:	40014000 	.word	0x40014000
 8006e30:	40021000 	.word	0x40021000
 8006e34:	40020c00 	.word	0x40020c00
 8006e38:	2000009c 	.word	0x2000009c
 8006e3c:	40d00000 	.word	0x40d00000
 8006e40:	409f4000 	.word	0x409f4000
 8006e44:	40010400 	.word	0x40010400
 8006e48:	3d4ccccd 	.word	0x3d4ccccd
 8006e4c:	3fc90fd8 	.word	0x3fc90fd8
      lookup[i] = cos((float)i/100.0) + cos((float)i/100.0-1.047);
 8006e50:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8006e54:	ee07 3a90 	vmov	s15, r3
 8006e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e5c:	ee17 0a90 	vmov	r0, s15
 8006e60:	f7f9 fb72 	bl	8000548 <__aeabi_f2d>
 8006e64:	f04f 0200 	mov.w	r2, #0
 8006e68:	4ba3      	ldr	r3, [pc, #652]	; (80070f8 <main+0x6d0>)
 8006e6a:	f7f9 fcef 	bl	800084c <__aeabi_ddiv>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	460c      	mov	r4, r1
 8006e72:	ec44 3b17 	vmov	d7, r3, r4
 8006e76:	eeb0 0a47 	vmov.f32	s0, s14
 8006e7a:	eef0 0a67 	vmov.f32	s1, s15
 8006e7e:	f002 f9af 	bl	80091e0 <cos>
 8006e82:	ec56 5b10 	vmov	r5, r6, d0
 8006e86:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8006e8a:	ee07 3a90 	vmov	s15, r3
 8006e8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e92:	ee17 0a90 	vmov	r0, s15
 8006e96:	f7f9 fb57 	bl	8000548 <__aeabi_f2d>
 8006e9a:	f04f 0200 	mov.w	r2, #0
 8006e9e:	4b96      	ldr	r3, [pc, #600]	; (80070f8 <main+0x6d0>)
 8006ea0:	f7f9 fcd4 	bl	800084c <__aeabi_ddiv>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	460c      	mov	r4, r1
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	4621      	mov	r1, r4
 8006eac:	a38e      	add	r3, pc, #568	; (adr r3, 80070e8 <main+0x6c0>)
 8006eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb2:	f7f9 f9e9 	bl	8000288 <__aeabi_dsub>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	460c      	mov	r4, r1
 8006eba:	ec44 3b17 	vmov	d7, r3, r4
 8006ebe:	eeb0 0a47 	vmov.f32	s0, s14
 8006ec2:	eef0 0a67 	vmov.f32	s1, s15
 8006ec6:	f002 f98b 	bl	80091e0 <cos>
 8006eca:	ec54 3b10 	vmov	r3, r4, d0
 8006ece:	461a      	mov	r2, r3
 8006ed0:	4623      	mov	r3, r4
 8006ed2:	4628      	mov	r0, r5
 8006ed4:	4631      	mov	r1, r6
 8006ed6:	f7f9 f9d9 	bl	800028c <__adddf3>
 8006eda:	4603      	mov	r3, r0
 8006edc:	460c      	mov	r4, r1
 8006ede:	4618      	mov	r0, r3
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	f7f9 fe6b 	bl	8000bbc <__aeabi_d2f>
 8006ee6:	4601      	mov	r1, r0
 8006ee8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006eec:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4413      	add	r3, r2
 8006ef4:	6019      	str	r1, [r3, #0]
  for (int i=0; i<210; i++){
 8006ef6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8006efa:	3301      	adds	r3, #1
 8006efc:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8006f00:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8006f04:	2bd1      	cmp	r3, #209	; 0xd1
 8006f06:	dda3      	ble.n	8006e50 <main+0x428>
  {
  	// -------------------------------------------------------------
		// --- FAST PROCESS ----------------------------------------------------
		// -------------------------------------------------------------
  	//HAL_Delay(1);
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006f08:	4b7c      	ldr	r3, [pc, #496]	; (80070fc <main+0x6d4>)
 8006f0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f0e:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006f10:	4b7a      	ldr	r3, [pc, #488]	; (80070fc <main+0x6d4>)
 8006f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f16:	619a      	str	r2, [r3, #24]
  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006f18:	4b78      	ldr	r3, [pc, #480]	; (80070fc <main+0x6d4>)
 8006f1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f1e:	619a      	str	r2, [r3, #24]
  	  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006f20:	4b76      	ldr	r3, [pc, #472]	; (80070fc <main+0x6d4>)
 8006f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f26:	619a      	str	r2, [r3, #24]
  	  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006f28:	4b74      	ldr	r3, [pc, #464]	; (80070fc <main+0x6d4>)
 8006f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f2e:	619a      	str	r2, [r3, #24]
  	  	  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006f30:	4b72      	ldr	r3, [pc, #456]	; (80070fc <main+0x6d4>)
 8006f32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f36:	619a      	str	r2, [r3, #24]
  	  	  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006f38:	4b70      	ldr	r3, [pc, #448]	; (80070fc <main+0x6d4>)
 8006f3a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f3e:	619a      	str	r2, [r3, #24]
  	  	  	  	debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006f40:	4b6e      	ldr	r3, [pc, #440]	; (80070fc <main+0x6d4>)
 8006f42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f46:	619a      	str	r2, [r3, #24]


  	// --- get angle from encoder 0...2000
  	EncVal = TIM8->CNT;//takes 200ns
 8006f48:	4b6d      	ldr	r3, [pc, #436]	; (8007100 <main+0x6d8>)
 8006f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4c:	b21a      	sxth	r2, r3
 8006f4e:	4b6d      	ldr	r3, [pc, #436]	; (8007104 <main+0x6dc>)
 8006f50:	801a      	strh	r2, [r3, #0]
  	float phase = (float) EncVal * 0.02199 ; //(float) EncVal / 2000.0 * 2*PI * 7 ; //takes 1500ns
 8006f52:	4b6c      	ldr	r3, [pc, #432]	; (8007104 <main+0x6dc>)
 8006f54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f58:	ee07 3a90 	vmov	s15, r3
 8006f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f60:	ee17 0a90 	vmov	r0, s15
 8006f64:	f7f9 faf0 	bl	8000548 <__aeabi_f2d>
 8006f68:	a361      	add	r3, pc, #388	; (adr r3, 80070f0 <main+0x6c8>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 fb43 	bl	80005f8 <__aeabi_dmul>
 8006f72:	4603      	mov	r3, r0
 8006f74:	460c      	mov	r4, r1
 8006f76:	4618      	mov	r0, r3
 8006f78:	4621      	mov	r1, r4
 8006f7a:	f7f9 fe1f 	bl	8000bbc <__aeabi_d2f>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	f207 4214 	addw	r2, r7, #1044	; 0x414
 8006f84:	6013      	str	r3, [r2, #0]

  	debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006f86:	4b5d      	ldr	r3, [pc, #372]	; (80070fc <main+0x6d4>)
 8006f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f8c:	619a      	str	r2, [r3, #24]


    float u0 = 0.5773; //0.5 * 2.0 / 1.73205;// maximal possible U on one coil thanks to wankel //takes<200ns
 8006f8e:	4b5e      	ldr	r3, [pc, #376]	; (8007108 <main+0x6e0>)
 8006f90:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8006f94:	6013      	str	r3, [r2, #0]

    u0 *= amp;  //takes<200ns
 8006f96:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8006f9a:	ed93 7a00 	vldr	s14, [r3]
 8006f9e:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8006fa2:	edd3 7a00 	vldr	s15, [r3]
 8006fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006faa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8006fae:	edc3 7a00 	vstr	s15, [r3]

    phase += phase_shift;  //takes<200ns
 8006fb2:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006fb6:	ed93 7a00 	vldr	s14, [r3]
 8006fba:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8006fbe:	edd3 7a00 	vldr	s15, [r3]
 8006fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fc6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006fca:	edc3 7a00 	vstr	s15, [r3]

    debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 8006fce:	4b4b      	ldr	r3, [pc, #300]	; (80070fc <main+0x6d4>)
 8006fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fd4:	619a      	str	r2, [r3, #24]
    debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8006fd6:	4b49      	ldr	r3, [pc, #292]	; (80070fc <main+0x6d4>)
 8006fd8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006fdc:	619a      	str	r2, [r3, #24]

    phase *= 100;
 8006fde:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006fe2:	edd3 7a00 	vldr	s15, [r3]
 8006fe6:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800710c <main+0x6e4>
 8006fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006fee:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006ff2:	edc3 7a00 	vstr	s15, [r3]
    int int_phase = (int) phase;
 8006ff6:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8006ffa:	edd3 7a00 	vldr	s15, [r3]
 8006ffe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007002:	ee17 3a90 	vmov	r3, s15
 8007006:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
    int_phase = int_phase % 628;
 800700a:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800700e:	4a40      	ldr	r2, [pc, #256]	; (8007110 <main+0x6e8>)
 8007010:	fb82 1203 	smull	r1, r2, r2, r3
 8007014:	11d1      	asrs	r1, r2, #7
 8007016:	17da      	asrs	r2, r3, #31
 8007018:	1a8a      	subs	r2, r1, r2
 800701a:	f44f 711d 	mov.w	r1, #628	; 0x274
 800701e:	fb01 f202 	mul.w	r2, r1, r2
 8007022:	1a9b      	subs	r3, r3, r2
 8007024:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
    if (int_phase < 0) {
 8007028:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800702c:	2b00      	cmp	r3, #0
 800702e:	da05      	bge.n	800703c <main+0x614>
    	int_phase += 628;
 8007030:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8007034:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8007038:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
    }

    float uA = 0;
 800703c:	f04f 0300 	mov.w	r3, #0
 8007040:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 8007044:	6013      	str	r3, [r2, #0]
    float uB = 0;
 8007046:	f04f 0300 	mov.w	r3, #0
 800704a:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 800704e:	6013      	str	r3, [r2, #0]
    float uC = 0;
 8007050:	f04f 0300 	mov.w	r3, #0
 8007054:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8007058:	6013      	str	r3, [r2, #0]

    debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 800705a:	4b28      	ldr	r3, [pc, #160]	; (80070fc <main+0x6d4>)
 800705c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007060:	619a      	str	r2, [r3, #24]
//    			uB = lookup[2]; // takes 3mus
//    			uC = 0;

    // ---- lookup  this optimized routine brings roundtrip down to 5mus

    if  (int_phase < 210)	{ //0...209
 8007062:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8007066:	2bd1      	cmp	r3, #209	; 0xd1
 8007068:	dc1b      	bgt.n	80070a2 <main+0x67a>
			uA = lookup[int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 800706a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800706e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8007072:	009b      	lsls	r3, r3, #2
 8007074:	4413      	add	r3, r2
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800707c:	6013      	str	r3, [r2, #0]
			uB = lookup[210 - 1 - int_phase]; // takes 3mus
 800707e:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8007082:	f1c3 03d1 	rsb	r3, r3, #209	; 0xd1
 8007086:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	4413      	add	r3, r2
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8007094:	6013      	str	r3, [r2, #0]
			uC = 0;
 8007096:	f04f 0300 	mov.w	r3, #0
 800709a:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800709e:	6013      	str	r3, [r2, #0]
 80070a0:	e056      	b.n	8007150 <main+0x728>
    }
	 else if  (int_phase < 420){	 //210...419
 80070a2:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80070a6:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 80070aa:	da33      	bge.n	8007114 <main+0x6ec>
			uA = 0; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 80070b4:	6013      	str	r3, [r2, #0]
			uB = lookup[int_phase - 210]; // takes 3mus
 80070b6:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80070ba:	3bd2      	subs	r3, #210	; 0xd2
 80070bc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80070c0:	009b      	lsls	r3, r3, #2
 80070c2:	4413      	add	r3, r2
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 80070ca:	6013      	str	r3, [r2, #0]
			uC = lookup[420 - 1 - int_phase];
 80070cc:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 80070d0:	f5c3 73d1 	rsb	r3, r3, #418	; 0x1a2
 80070d4:	3301      	adds	r3, #1
 80070d6:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80070e4:	6013      	str	r3, [r2, #0]
 80070e6:	e033      	b.n	8007150 <main+0x728>
 80070e8:	126e978d 	.word	0x126e978d
 80070ec:	3ff0c083 	.word	0x3ff0c083
 80070f0:	eb5b2d4d 	.word	0xeb5b2d4d
 80070f4:	3f96848b 	.word	0x3f96848b
 80070f8:	40590000 	.word	0x40590000
 80070fc:	40020c00 	.word	0x40020c00
 8007100:	40010400 	.word	0x40010400
 8007104:	200002ec 	.word	0x200002ec
 8007108:	3f13c9ef 	.word	0x3f13c9ef
 800710c:	42c80000 	.word	0x42c80000
 8007110:	342da7f3 	.word	0x342da7f3
	 }
	 else	{  //420...629
			uA = lookup[630 - 1 - int_phase]; //takes<32000ns !!!!!!!!!!!!!! with the fast implement it's just 2000ns !!!!!
 8007114:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8007118:	f5c3 731d 	rsb	r3, r3, #628	; 0x274
 800711c:	3301      	adds	r3, #1
 800711e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f207 423c 	addw	r2, r7, #1084	; 0x43c
 800712c:	6013      	str	r3, [r2, #0]
			uB = 0; // takes 3mus
 800712e:	f04f 0300 	mov.w	r3, #0
 8007132:	f507 6287 	add.w	r2, r7, #1080	; 0x438
 8007136:	6013      	str	r3, [r2, #0]
			uC = lookup[int_phase - 420];
 8007138:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 800713c:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 8007140:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4413      	add	r3, r2
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	f207 4234 	addw	r2, r7, #1076	; 0x434
 800714e:	6013      	str	r3, [r2, #0]
		}

    debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
 8007150:	4be9      	ldr	r3, [pc, #932]	; (80074f8 <main+0xad0>)
 8007152:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007156:	619a      	str	r2, [r3, #24]

    int pwmA = (uint16_t) (pwm * u0 * uA); //takes<200ns
 8007158:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800715c:	ee07 3a90 	vmov	s15, r3
 8007160:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007164:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8007168:	edd3 7a00 	vldr	s15, [r3]
 800716c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007170:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 8007174:	edd3 7a00 	vldr	s15, [r3]
 8007178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800717c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007180:	ee17 3a90 	vmov	r3, s15
 8007184:	b29b      	uxth	r3, r3
 8007186:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
    int pwmB = (uint16_t) (pwm * u0 * uB); //takes<200ns
 800718a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800718e:	ee07 3a90 	vmov	s15, r3
 8007192:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007196:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800719a:	edd3 7a00 	vldr	s15, [r3]
 800719e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071a2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80071a6:	edd3 7a00 	vldr	s15, [r3]
 80071aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071b2:	ee17 3a90 	vmov	r3, s15
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	f8c7 3408 	str.w	r3, [r7, #1032]	; 0x408
    int pwmC = (uint16_t) (pwm * u0 * uC); //takes<200ns
 80071bc:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80071c0:	ee07 3a90 	vmov	s15, r3
 80071c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071c8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80071cc:	edd3 7a00 	vldr	s15, [r3]
 80071d0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80071d4:	f207 4334 	addw	r3, r7, #1076	; 0x434
 80071d8:	edd3 7a00 	vldr	s15, [r3]
 80071dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071e4:	ee17 3a90 	vmov	r3, s15
 80071e8:	b29b      	uxth	r3, r3
 80071ea:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404

    // ---- end lookup

    debug1_out_GPIO_Port->BSRR = (uint32_t)debug1_out_Pin << 16U;
 80071ee:	4bc2      	ldr	r3, [pc, #776]	; (80074f8 <main+0xad0>)
 80071f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071f4:	619a      	str	r2, [r3, #24]

  	// --- MOTOR DRIVER ----------------------------------------------------
  	// --- PWM pulses 0...2048
  	TIM1->CCR1 = pwmA; //takes<150ns
 80071f6:	4ac1      	ldr	r2, [pc, #772]	; (80074fc <main+0xad4>)
 80071f8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80071fc:	6353      	str	r3, [r2, #52]	; 0x34
  	TIM1->CCR2 = pwmB; //takes<150ns
 80071fe:	4abf      	ldr	r2, [pc, #764]	; (80074fc <main+0xad4>)
 8007200:	f8d7 3408 	ldr.w	r3, [r7, #1032]	; 0x408
 8007204:	6393      	str	r3, [r2, #56]	; 0x38
  	TIM1->CCR3 = pwmC; //takes<150ns
 8007206:	4abd      	ldr	r2, [pc, #756]	; (80074fc <main+0xad4>)
 8007208:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800720c:	63d3      	str	r3, [r2, #60]	; 0x3c

	  // -------------------------------------------------------------
	  // --- SLOW PROCESS ----------------------------------------------------
	  // -------------------------------------------------------------

	  if (i_fast%fast2slow == 0){
 800720e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007212:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8007216:	fbb3 f2f2 	udiv	r2, r3, r2
 800721a:	f8d7 142c 	ldr.w	r1, [r7, #1068]	; 0x42c
 800721e:	fb01 f202 	mul.w	r2, r1, r2
 8007222:	1a9b      	subs	r3, r3, r2
 8007224:	2b00      	cmp	r3, #0
 8007226:	f040 81b1 	bne.w	800758c <main+0xb64>

	  	// --- GPIO ----------------------------------------------------
	  	HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800722a:	2110      	movs	r1, #16
 800722c:	48b4      	ldr	r0, [pc, #720]	; (8007500 <main+0xad8>)
 800722e:	f7fb f80c 	bl	800224a <HAL_GPIO_TogglePin>
			char buffer4[20];




			itoa((int)phase, buffer0, 10);
 8007232:	f207 4314 	addw	r3, r7, #1044	; 0x414
 8007236:	edd3 7a00 	vldr	s15, [r3]
 800723a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800723e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007242:	220a      	movs	r2, #10
 8007244:	4619      	mov	r1, r3
 8007246:	ee17 0a90 	vmov	r0, s15
 800724a:	f001 fb69 	bl	8008920 <itoa>
			itoa(amp*1000, buffer1, 10);
 800724e:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8007252:	edd3 7a00 	vldr	s15, [r3]
 8007256:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8007504 <main+0xadc>
 800725a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800725e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007262:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007266:	220a      	movs	r2, #10
 8007268:	4619      	mov	r1, r3
 800726a:	ee17 0a90 	vmov	r0, s15
 800726e:	f001 fb57 	bl	8008920 <itoa>
			itoa(phase_shift*1000, buffer2, 10);
 8007272:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8007276:	edd3 7a00 	vldr	s15, [r3]
 800727a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8007504 <main+0xadc>
 800727e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007286:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800728a:	220a      	movs	r2, #10
 800728c:	4619      	mov	r1, r3
 800728e:	ee17 0a90 	vmov	r0, s15
 8007292:	f001 fb45 	bl	8008920 <itoa>
			itoa(pwmA, buffer3, 10);
 8007296:	f107 0314 	add.w	r3, r7, #20
 800729a:	220a      	movs	r2, #10
 800729c:	4619      	mov	r1, r3
 800729e:	f8d7 040c 	ldr.w	r0, [r7, #1036]	; 0x40c
 80072a2:	f001 fb3d 	bl	8008920 <itoa>
			itoa(int_phase, buffer4, 10);
 80072a6:	463b      	mov	r3, r7
 80072a8:	220a      	movs	r2, #10
 80072aa:	4619      	mov	r1, r3
 80072ac:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 80072b0:	f001 fb36 	bl	8008920 <itoa>

			itoa(uA*100, buffer0, 10);
 80072b4:	f207 433c 	addw	r3, r7, #1084	; 0x43c
 80072b8:	edd3 7a00 	vldr	s15, [r3]
 80072bc:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8007508 <main+0xae0>
 80072c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072c8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80072cc:	220a      	movs	r2, #10
 80072ce:	4619      	mov	r1, r3
 80072d0:	ee17 0a90 	vmov	r0, s15
 80072d4:	f001 fb24 	bl	8008920 <itoa>
			itoa(uB*100, buffer1, 10);
 80072d8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 80072dc:	edd3 7a00 	vldr	s15, [r3]
 80072e0:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8007508 <main+0xae0>
 80072e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80072e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80072ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80072f0:	220a      	movs	r2, #10
 80072f2:	4619      	mov	r1, r3
 80072f4:	ee17 0a90 	vmov	r0, s15
 80072f8:	f001 fb12 	bl	8008920 <itoa>
			itoa(uC*100, buffer2, 10);
 80072fc:	f207 4334 	addw	r3, r7, #1076	; 0x434
 8007300:	edd3 7a00 	vldr	s15, [r3]
 8007304:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8007508 <main+0xae0>
 8007308:	ee67 7a87 	vmul.f32	s15, s15, s14
 800730c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007310:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8007314:	220a      	movs	r2, #10
 8007316:	4619      	mov	r1, r3
 8007318:	ee17 0a90 	vmov	r0, s15
 800731c:	f001 fb00 	bl	8008920 <itoa>
			itoa(lookup[209]*100, buffer3, 10);
 8007320:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8007324:	edd3 7ad1 	vldr	s15, [r3, #836]	; 0x344
 8007328:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8007508 <main+0xae0>
 800732c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007330:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007334:	f107 0314 	add.w	r3, r7, #20
 8007338:	220a      	movs	r2, #10
 800733a:	4619      	mov	r1, r3
 800733c:	ee17 0a90 	vmov	r0, s15
 8007340:	f001 faee 	bl	8008920 <itoa>
			itoa(int_phase, buffer4, 10);
 8007344:	463b      	mov	r3, r7
 8007346:	220a      	movs	r2, #10
 8007348:	4619      	mov	r1, r3
 800734a:	f8d7 0440 	ldr.w	r0, [r7, #1088]	; 0x440
 800734e:	f001 fae7 	bl	8008920 <itoa>



			HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 8007352:	f207 33db 	addw	r3, r7, #987	; 0x3db
 8007356:	2201      	movs	r2, #1
 8007358:	4619      	mov	r1, r3
 800735a:	486c      	ldr	r0, [pc, #432]	; (800750c <main+0xae4>)
 800735c:	f7fe fd53 	bl	8005e06 <HAL_UART_Receive_IT>

			sprintf((char*)buf, strcat(strcat(buffer0, "_"),strcat(strcat(buffer1, "_"), strcat(strcat(buffer2, "#"), strcat(strcat(buffer3, "_"), strcat(buffer4, "_\r\n"))))));
 8007360:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007364:	4618      	mov	r0, r3
 8007366:	f7f8 ff33 	bl	80001d0 <strlen>
 800736a:	4603      	mov	r3, r0
 800736c:	461a      	mov	r2, r3
 800736e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8007372:	4413      	add	r3, r2
 8007374:	4966      	ldr	r1, [pc, #408]	; (8007510 <main+0xae8>)
 8007376:	461a      	mov	r2, r3
 8007378:	460b      	mov	r3, r1
 800737a:	881b      	ldrh	r3, [r3, #0]
 800737c:	8013      	strh	r3, [r2, #0]
 800737e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8007382:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007386:	4618      	mov	r0, r3
 8007388:	f7f8 ff22 	bl	80001d0 <strlen>
 800738c:	4603      	mov	r3, r0
 800738e:	461a      	mov	r2, r3
 8007390:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007394:	4413      	add	r3, r2
 8007396:	495e      	ldr	r1, [pc, #376]	; (8007510 <main+0xae8>)
 8007398:	461a      	mov	r2, r3
 800739a:	460b      	mov	r3, r1
 800739c:	881b      	ldrh	r3, [r3, #0]
 800739e:	8013      	strh	r3, [r2, #0]
 80073a0:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 80073a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073a8:	4618      	mov	r0, r3
 80073aa:	f7f8 ff11 	bl	80001d0 <strlen>
 80073ae:	4603      	mov	r3, r0
 80073b0:	461a      	mov	r2, r3
 80073b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80073b6:	4413      	add	r3, r2
 80073b8:	4956      	ldr	r1, [pc, #344]	; (8007514 <main+0xaec>)
 80073ba:	461a      	mov	r2, r3
 80073bc:	460b      	mov	r3, r1
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	8013      	strh	r3, [r2, #0]
 80073c2:	f107 0628 	add.w	r6, r7, #40	; 0x28
 80073c6:	f107 0314 	add.w	r3, r7, #20
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7f8 ff00 	bl	80001d0 <strlen>
 80073d0:	4603      	mov	r3, r0
 80073d2:	461a      	mov	r2, r3
 80073d4:	f107 0314 	add.w	r3, r7, #20
 80073d8:	4413      	add	r3, r2
 80073da:	494d      	ldr	r1, [pc, #308]	; (8007510 <main+0xae8>)
 80073dc:	461a      	mov	r2, r3
 80073de:	460b      	mov	r3, r1
 80073e0:	881b      	ldrh	r3, [r3, #0]
 80073e2:	8013      	strh	r3, [r2, #0]
 80073e4:	f107 0814 	add.w	r8, r7, #20
 80073e8:	463b      	mov	r3, r7
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7f8 fef0 	bl	80001d0 <strlen>
 80073f0:	4603      	mov	r3, r0
 80073f2:	461a      	mov	r2, r3
 80073f4:	463b      	mov	r3, r7
 80073f6:	4413      	add	r3, r2
 80073f8:	4a47      	ldr	r2, [pc, #284]	; (8007518 <main+0xaf0>)
 80073fa:	6810      	ldr	r0, [r2, #0]
 80073fc:	6018      	str	r0, [r3, #0]
 80073fe:	463b      	mov	r3, r7
 8007400:	4619      	mov	r1, r3
 8007402:	4640      	mov	r0, r8
 8007404:	f001 fab6 	bl	8008974 <strcat>
 8007408:	4603      	mov	r3, r0
 800740a:	4619      	mov	r1, r3
 800740c:	4630      	mov	r0, r6
 800740e:	f001 fab1 	bl	8008974 <strcat>
 8007412:	4603      	mov	r3, r0
 8007414:	4619      	mov	r1, r3
 8007416:	4628      	mov	r0, r5
 8007418:	f001 faac 	bl	8008974 <strcat>
 800741c:	4603      	mov	r3, r0
 800741e:	4619      	mov	r1, r3
 8007420:	4620      	mov	r0, r4
 8007422:	f001 faa7 	bl	8008974 <strcat>
 8007426:	4602      	mov	r2, r0
 8007428:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 800742c:	4611      	mov	r1, r2
 800742e:	4618      	mov	r0, r3
 8007430:	f001 fa80 	bl	8008934 <siprintf>
			HAL_UART_Transmit_IT(&huart3, buf, strlen((char*)buf));
 8007434:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8007438:	4618      	mov	r0, r3
 800743a:	f7f8 fec9 	bl	80001d0 <strlen>
 800743e:	4603      	mov	r3, r0
 8007440:	b29a      	uxth	r2, r3
 8007442:	f507 7377 	add.w	r3, r7, #988	; 0x3dc
 8007446:	4619      	mov	r1, r3
 8007448:	4830      	ldr	r0, [pc, #192]	; (800750c <main+0xae4>)
 800744a:	f7fe fc97 	bl	8005d7c <HAL_UART_Transmit_IT>

			switch(ch){
 800744e:	f897 33db 	ldrb.w	r3, [r7, #987]	; 0x3db
 8007452:	3b61      	subs	r3, #97	; 0x61
 8007454:	2b16      	cmp	r3, #22
 8007456:	f200 8091 	bhi.w	800757c <main+0xb54>
 800745a:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <main+0xa38>)
 800745c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007460:	0800751d 	.word	0x0800751d
 8007464:	0800757d 	.word	0x0800757d
 8007468:	0800757d 	.word	0x0800757d
 800746c:	0800754d 	.word	0x0800754d
 8007470:	0800757d 	.word	0x0800757d
 8007474:	0800757d 	.word	0x0800757d
 8007478:	0800757d 	.word	0x0800757d
 800747c:	0800757d 	.word	0x0800757d
 8007480:	0800757d 	.word	0x0800757d
 8007484:	0800757d 	.word	0x0800757d
 8007488:	0800757d 	.word	0x0800757d
 800748c:	0800757d 	.word	0x0800757d
 8007490:	0800757d 	.word	0x0800757d
 8007494:	0800757d 	.word	0x0800757d
 8007498:	0800757d 	.word	0x0800757d
 800749c:	0800757d 	.word	0x0800757d
 80074a0:	0800757d 	.word	0x0800757d
 80074a4:	0800757d 	.word	0x0800757d
 80074a8:	080074d9 	.word	0x080074d9
 80074ac:	0800757d 	.word	0x0800757d
 80074b0:	0800757d 	.word	0x0800757d
 80074b4:	0800757d 	.word	0x0800757d
 80074b8:	080074bd 	.word	0x080074bd
				case 'w':
					ch='t';
 80074bc:	2374      	movs	r3, #116	; 0x74
 80074be:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
					amp *= 2;
 80074c2:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80074c6:	edd3 7a00 	vldr	s15, [r3]
 80074ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80074ce:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80074d2:	edc3 7a00 	vstr	s15, [r3]
					break;
 80074d6:	e054      	b.n	8007582 <main+0xb5a>
				case 's':
					ch='t';
 80074d8:	2374      	movs	r3, #116	; 0x74
 80074da:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
					amp /= 2;
 80074de:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80074e2:	ed93 7a00 	vldr	s14, [r3]
 80074e6:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80074ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074ee:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80074f2:	edc3 7a00 	vstr	s15, [r3]
					break;
 80074f6:	e044      	b.n	8007582 <main+0xb5a>
 80074f8:	40020c00 	.word	0x40020c00
 80074fc:	40010000 	.word	0x40010000
 8007500:	40021000 	.word	0x40021000
 8007504:	447a0000 	.word	0x447a0000
 8007508:	42c80000 	.word	0x42c80000
 800750c:	20000134 	.word	0x20000134
 8007510:	0800a248 	.word	0x0800a248
 8007514:	0800a24c 	.word	0x0800a24c
 8007518:	0800a250 	.word	0x0800a250
				case 'a':
					ch='t';
 800751c:	2374      	movs	r3, #116	; 0x74
 800751e:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
					phase_shift += 0.1;
 8007522:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8007526:	6818      	ldr	r0, [r3, #0]
 8007528:	f7f9 f80e 	bl	8000548 <__aeabi_f2d>
 800752c:	a31a      	add	r3, pc, #104	; (adr r3, 8007598 <main+0xb70>)
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f7f8 feab 	bl	800028c <__adddf3>
 8007536:	4603      	mov	r3, r0
 8007538:	460c      	mov	r4, r1
 800753a:	4618      	mov	r0, r3
 800753c:	4621      	mov	r1, r4
 800753e:	f7f9 fb3d 	bl	8000bbc <__aeabi_d2f>
 8007542:	4603      	mov	r3, r0
 8007544:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8007548:	6013      	str	r3, [r2, #0]
					break;
 800754a:	e01a      	b.n	8007582 <main+0xb5a>
				case 'd':
					ch='t';
 800754c:	2374      	movs	r3, #116	; 0x74
 800754e:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db
					phase_shift -= 0.1;
 8007552:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	f7f8 fff6 	bl	8000548 <__aeabi_f2d>
 800755c:	a30e      	add	r3, pc, #56	; (adr r3, 8007598 <main+0xb70>)
 800755e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007562:	f7f8 fe91 	bl	8000288 <__aeabi_dsub>
 8007566:	4603      	mov	r3, r0
 8007568:	460c      	mov	r4, r1
 800756a:	4618      	mov	r0, r3
 800756c:	4621      	mov	r1, r4
 800756e:	f7f9 fb25 	bl	8000bbc <__aeabi_d2f>
 8007572:	4603      	mov	r3, r0
 8007574:	f507 6289 	add.w	r2, r7, #1096	; 0x448
 8007578:	6013      	str	r3, [r2, #0]
					break;
 800757a:	e002      	b.n	8007582 <main+0xb5a>
				default:
					ch='t';
 800757c:	2374      	movs	r3, #116	; 0x74
 800757e:	f887 33db 	strb.w	r3, [r7, #987]	; 0x3db

			}
			i_slow++;
 8007582:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8007586:	3301      	adds	r3, #1
 8007588:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
	  }

	  i_fast++;
 800758c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8007590:	3301      	adds	r3, #1
 8007592:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
  {
 8007596:	e4b7      	b.n	8006f08 <main+0x4e0>
 8007598:	9999999a 	.word	0x9999999a
 800759c:	3fb99999 	.word	0x3fb99999

080075a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b094      	sub	sp, #80	; 0x50
 80075a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075a6:	f107 0320 	add.w	r3, r7, #32
 80075aa:	2230      	movs	r2, #48	; 0x30
 80075ac:	2100      	movs	r1, #0
 80075ae:	4618      	mov	r0, r3
 80075b0:	f001 f9b8 	bl	8008924 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075b4:	f107 030c 	add.w	r3, r7, #12
 80075b8:	2200      	movs	r2, #0
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	605a      	str	r2, [r3, #4]
 80075be:	609a      	str	r2, [r3, #8]
 80075c0:	60da      	str	r2, [r3, #12]
 80075c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80075c4:	2300      	movs	r3, #0
 80075c6:	60bb      	str	r3, [r7, #8]
 80075c8:	4b27      	ldr	r3, [pc, #156]	; (8007668 <SystemClock_Config+0xc8>)
 80075ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075cc:	4a26      	ldr	r2, [pc, #152]	; (8007668 <SystemClock_Config+0xc8>)
 80075ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d2:	6413      	str	r3, [r2, #64]	; 0x40
 80075d4:	4b24      	ldr	r3, [pc, #144]	; (8007668 <SystemClock_Config+0xc8>)
 80075d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075dc:	60bb      	str	r3, [r7, #8]
 80075de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80075e0:	2300      	movs	r3, #0
 80075e2:	607b      	str	r3, [r7, #4]
 80075e4:	4b21      	ldr	r3, [pc, #132]	; (800766c <SystemClock_Config+0xcc>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a20      	ldr	r2, [pc, #128]	; (800766c <SystemClock_Config+0xcc>)
 80075ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80075ee:	6013      	str	r3, [r2, #0]
 80075f0:	4b1e      	ldr	r3, [pc, #120]	; (800766c <SystemClock_Config+0xcc>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075f8:	607b      	str	r3, [r7, #4]
 80075fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80075fc:	2302      	movs	r3, #2
 80075fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007600:	2301      	movs	r3, #1
 8007602:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007604:	2310      	movs	r3, #16
 8007606:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007608:	2302      	movs	r3, #2
 800760a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800760c:	2300      	movs	r3, #0
 800760e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8007610:	2308      	movs	r3, #8
 8007612:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8007614:	2354      	movs	r3, #84	; 0x54
 8007616:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007618:	2302      	movs	r3, #2
 800761a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800761c:	2303      	movs	r3, #3
 800761e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007620:	f107 0320 	add.w	r3, r7, #32
 8007624:	4618      	mov	r0, r3
 8007626:	f7fb fdcb 	bl	80031c0 <HAL_RCC_OscConfig>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d001      	beq.n	8007634 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007630:	f000 fc5c 	bl	8007eec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007634:	230f      	movs	r3, #15
 8007636:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007638:	2302      	movs	r3, #2
 800763a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800763c:	2300      	movs	r3, #0
 800763e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007640:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007644:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007646:	2300      	movs	r3, #0
 8007648:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800764a:	f107 030c 	add.w	r3, r7, #12
 800764e:	2102      	movs	r1, #2
 8007650:	4618      	mov	r0, r3
 8007652:	f7fc f825 	bl	80036a0 <HAL_RCC_ClockConfig>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d001      	beq.n	8007660 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800765c:	f000 fc46 	bl	8007eec <Error_Handler>
  }
}
 8007660:	bf00      	nop
 8007662:	3750      	adds	r7, #80	; 0x50
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}
 8007668:	40023800 	.word	0x40023800
 800766c:	40007000 	.word	0x40007000

08007670 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007676:	463b      	mov	r3, r7
 8007678:	2200      	movs	r2, #0
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	605a      	str	r2, [r3, #4]
 800767e:	609a      	str	r2, [r3, #8]
 8007680:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8007682:	4b21      	ldr	r3, [pc, #132]	; (8007708 <MX_ADC1_Init+0x98>)
 8007684:	4a21      	ldr	r2, [pc, #132]	; (800770c <MX_ADC1_Init+0x9c>)
 8007686:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007688:	4b1f      	ldr	r3, [pc, #124]	; (8007708 <MX_ADC1_Init+0x98>)
 800768a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800768e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007690:	4b1d      	ldr	r3, [pc, #116]	; (8007708 <MX_ADC1_Init+0x98>)
 8007692:	2200      	movs	r2, #0
 8007694:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007696:	4b1c      	ldr	r3, [pc, #112]	; (8007708 <MX_ADC1_Init+0x98>)
 8007698:	2200      	movs	r2, #0
 800769a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800769c:	4b1a      	ldr	r3, [pc, #104]	; (8007708 <MX_ADC1_Init+0x98>)
 800769e:	2200      	movs	r2, #0
 80076a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80076a2:	4b19      	ldr	r3, [pc, #100]	; (8007708 <MX_ADC1_Init+0x98>)
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80076aa:	4b17      	ldr	r3, [pc, #92]	; (8007708 <MX_ADC1_Init+0x98>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80076b0:	4b15      	ldr	r3, [pc, #84]	; (8007708 <MX_ADC1_Init+0x98>)
 80076b2:	4a17      	ldr	r2, [pc, #92]	; (8007710 <MX_ADC1_Init+0xa0>)
 80076b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <MX_ADC1_Init+0x98>)
 80076b8:	2200      	movs	r2, #0
 80076ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80076bc:	4b12      	ldr	r3, [pc, #72]	; (8007708 <MX_ADC1_Init+0x98>)
 80076be:	2201      	movs	r2, #1
 80076c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80076c2:	4b11      	ldr	r3, [pc, #68]	; (8007708 <MX_ADC1_Init+0x98>)
 80076c4:	2200      	movs	r2, #0
 80076c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80076ca:	4b0f      	ldr	r3, [pc, #60]	; (8007708 <MX_ADC1_Init+0x98>)
 80076cc:	2201      	movs	r2, #1
 80076ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80076d0:	480d      	ldr	r0, [pc, #52]	; (8007708 <MX_ADC1_Init+0x98>)
 80076d2:	f7f9 fcb5 	bl	8001040 <HAL_ADC_Init>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d001      	beq.n	80076e0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80076dc:	f000 fc06 	bl	8007eec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80076e0:	2302      	movs	r3, #2
 80076e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80076e4:	2301      	movs	r3, #1
 80076e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80076e8:	2300      	movs	r3, #0
 80076ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076ec:	463b      	mov	r3, r7
 80076ee:	4619      	mov	r1, r3
 80076f0:	4805      	ldr	r0, [pc, #20]	; (8007708 <MX_ADC1_Init+0x98>)
 80076f2:	f7f9 ff9f 	bl	8001634 <HAL_ADC_ConfigChannel>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d001      	beq.n	8007700 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80076fc:	f000 fbf6 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8007700:	bf00      	nop
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}
 8007708:	20000264 	.word	0x20000264
 800770c:	40012000 	.word	0x40012000
 8007710:	0f000001 	.word	0x0f000001

08007714 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b084      	sub	sp, #16
 8007718:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800771a:	463b      	mov	r3, r7
 800771c:	2200      	movs	r2, #0
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	605a      	str	r2, [r3, #4]
 8007722:	609a      	str	r2, [r3, #8]
 8007724:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8007726:	4b21      	ldr	r3, [pc, #132]	; (80077ac <MX_ADC2_Init+0x98>)
 8007728:	4a21      	ldr	r2, [pc, #132]	; (80077b0 <MX_ADC2_Init+0x9c>)
 800772a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800772c:	4b1f      	ldr	r3, [pc, #124]	; (80077ac <MX_ADC2_Init+0x98>)
 800772e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007732:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8007734:	4b1d      	ldr	r3, [pc, #116]	; (80077ac <MX_ADC2_Init+0x98>)
 8007736:	2200      	movs	r2, #0
 8007738:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800773a:	4b1c      	ldr	r3, [pc, #112]	; (80077ac <MX_ADC2_Init+0x98>)
 800773c:	2200      	movs	r2, #0
 800773e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8007740:	4b1a      	ldr	r3, [pc, #104]	; (80077ac <MX_ADC2_Init+0x98>)
 8007742:	2201      	movs	r2, #1
 8007744:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8007746:	4b19      	ldr	r3, [pc, #100]	; (80077ac <MX_ADC2_Init+0x98>)
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800774e:	4b17      	ldr	r3, [pc, #92]	; (80077ac <MX_ADC2_Init+0x98>)
 8007750:	2200      	movs	r2, #0
 8007752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007754:	4b15      	ldr	r3, [pc, #84]	; (80077ac <MX_ADC2_Init+0x98>)
 8007756:	4a17      	ldr	r2, [pc, #92]	; (80077b4 <MX_ADC2_Init+0xa0>)
 8007758:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800775a:	4b14      	ldr	r3, [pc, #80]	; (80077ac <MX_ADC2_Init+0x98>)
 800775c:	2200      	movs	r2, #0
 800775e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8007760:	4b12      	ldr	r3, [pc, #72]	; (80077ac <MX_ADC2_Init+0x98>)
 8007762:	2201      	movs	r2, #1
 8007764:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8007766:	4b11      	ldr	r3, [pc, #68]	; (80077ac <MX_ADC2_Init+0x98>)
 8007768:	2200      	movs	r2, #0
 800776a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800776e:	4b0f      	ldr	r3, [pc, #60]	; (80077ac <MX_ADC2_Init+0x98>)
 8007770:	2201      	movs	r2, #1
 8007772:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8007774:	480d      	ldr	r0, [pc, #52]	; (80077ac <MX_ADC2_Init+0x98>)
 8007776:	f7f9 fc63 	bl	8001040 <HAL_ADC_Init>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8007780:	f000 fbb4 	bl	8007eec <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8007784:	2308      	movs	r3, #8
 8007786:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8007788:	2301      	movs	r3, #1
 800778a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800778c:	2300      	movs	r3, #0
 800778e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8007790:	463b      	mov	r3, r7
 8007792:	4619      	mov	r1, r3
 8007794:	4805      	ldr	r0, [pc, #20]	; (80077ac <MX_ADC2_Init+0x98>)
 8007796:	f7f9 ff4d 	bl	8001634 <HAL_ADC_ConfigChannel>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80077a0:	f000 fba4 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80077a4:	bf00      	nop
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}
 80077ac:	20000174 	.word	0x20000174
 80077b0:	40012100 	.word	0x40012100
 80077b4:	0f000001 	.word	0x0f000001

080077b8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80077bc:	4b16      	ldr	r3, [pc, #88]	; (8007818 <MX_CAN1_Init+0x60>)
 80077be:	4a17      	ldr	r2, [pc, #92]	; (800781c <MX_CAN1_Init+0x64>)
 80077c0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80077c2:	4b15      	ldr	r3, [pc, #84]	; (8007818 <MX_CAN1_Init+0x60>)
 80077c4:	2210      	movs	r2, #16
 80077c6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80077c8:	4b13      	ldr	r3, [pc, #76]	; (8007818 <MX_CAN1_Init+0x60>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80077ce:	4b12      	ldr	r3, [pc, #72]	; (8007818 <MX_CAN1_Init+0x60>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80077d4:	4b10      	ldr	r3, [pc, #64]	; (8007818 <MX_CAN1_Init+0x60>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80077da:	4b0f      	ldr	r3, [pc, #60]	; (8007818 <MX_CAN1_Init+0x60>)
 80077dc:	2200      	movs	r2, #0
 80077de:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80077e0:	4b0d      	ldr	r3, [pc, #52]	; (8007818 <MX_CAN1_Init+0x60>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <MX_CAN1_Init+0x60>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80077ec:	4b0a      	ldr	r3, [pc, #40]	; (8007818 <MX_CAN1_Init+0x60>)
 80077ee:	2200      	movs	r2, #0
 80077f0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80077f2:	4b09      	ldr	r3, [pc, #36]	; (8007818 <MX_CAN1_Init+0x60>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80077f8:	4b07      	ldr	r3, [pc, #28]	; (8007818 <MX_CAN1_Init+0x60>)
 80077fa:	2200      	movs	r2, #0
 80077fc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80077fe:	4b06      	ldr	r3, [pc, #24]	; (8007818 <MX_CAN1_Init+0x60>)
 8007800:	2200      	movs	r2, #0
 8007802:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007804:	4804      	ldr	r0, [pc, #16]	; (8007818 <MX_CAN1_Init+0x60>)
 8007806:	f7fa f93d 	bl	8001a84 <HAL_CAN_Init>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8007810:	f000 fb6c 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007814:	bf00      	nop
 8007816:	bd80      	pop	{r7, pc}
 8007818:	20000370 	.word	0x20000370
 800781c:	40006400 	.word	0x40006400

08007820 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8007824:	4b12      	ldr	r3, [pc, #72]	; (8007870 <MX_I2C1_Init+0x50>)
 8007826:	4a13      	ldr	r2, [pc, #76]	; (8007874 <MX_I2C1_Init+0x54>)
 8007828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800782a:	4b11      	ldr	r3, [pc, #68]	; (8007870 <MX_I2C1_Init+0x50>)
 800782c:	4a12      	ldr	r2, [pc, #72]	; (8007878 <MX_I2C1_Init+0x58>)
 800782e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007830:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <MX_I2C1_Init+0x50>)
 8007832:	2200      	movs	r2, #0
 8007834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8007836:	4b0e      	ldr	r3, [pc, #56]	; (8007870 <MX_I2C1_Init+0x50>)
 8007838:	2200      	movs	r2, #0
 800783a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <MX_I2C1_Init+0x50>)
 800783e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007844:	4b0a      	ldr	r3, [pc, #40]	; (8007870 <MX_I2C1_Init+0x50>)
 8007846:	2200      	movs	r2, #0
 8007848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800784a:	4b09      	ldr	r3, [pc, #36]	; (8007870 <MX_I2C1_Init+0x50>)
 800784c:	2200      	movs	r2, #0
 800784e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <MX_I2C1_Init+0x50>)
 8007852:	2200      	movs	r2, #0
 8007854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007856:	4b06      	ldr	r3, [pc, #24]	; (8007870 <MX_I2C1_Init+0x50>)
 8007858:	2200      	movs	r2, #0
 800785a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800785c:	4804      	ldr	r0, [pc, #16]	; (8007870 <MX_I2C1_Init+0x50>)
 800785e:	f7fa fd27 	bl	80022b0 <HAL_I2C_Init>
 8007862:	4603      	mov	r3, r0
 8007864:	2b00      	cmp	r3, #0
 8007866:	d001      	beq.n	800786c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007868:	f000 fb40 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800786c:	bf00      	nop
 800786e:	bd80      	pop	{r7, pc}
 8007870:	200001bc 	.word	0x200001bc
 8007874:	40005400 	.word	0x40005400
 8007878:	000186a0 	.word	0x000186a0

0800787c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007880:	4b12      	ldr	r3, [pc, #72]	; (80078cc <MX_I2C2_Init+0x50>)
 8007882:	4a13      	ldr	r2, [pc, #76]	; (80078d0 <MX_I2C2_Init+0x54>)
 8007884:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8007886:	4b11      	ldr	r3, [pc, #68]	; (80078cc <MX_I2C2_Init+0x50>)
 8007888:	4a12      	ldr	r2, [pc, #72]	; (80078d4 <MX_I2C2_Init+0x58>)
 800788a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800788c:	4b0f      	ldr	r3, [pc, #60]	; (80078cc <MX_I2C2_Init+0x50>)
 800788e:	2200      	movs	r2, #0
 8007890:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8007892:	4b0e      	ldr	r3, [pc, #56]	; (80078cc <MX_I2C2_Init+0x50>)
 8007894:	2200      	movs	r2, #0
 8007896:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007898:	4b0c      	ldr	r3, [pc, #48]	; (80078cc <MX_I2C2_Init+0x50>)
 800789a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800789e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80078a0:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <MX_I2C2_Init+0x50>)
 80078a2:	2200      	movs	r2, #0
 80078a4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80078a6:	4b09      	ldr	r3, [pc, #36]	; (80078cc <MX_I2C2_Init+0x50>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80078ac:	4b07      	ldr	r3, [pc, #28]	; (80078cc <MX_I2C2_Init+0x50>)
 80078ae:	2200      	movs	r2, #0
 80078b0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80078b2:	4b06      	ldr	r3, [pc, #24]	; (80078cc <MX_I2C2_Init+0x50>)
 80078b4:	2200      	movs	r2, #0
 80078b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80078b8:	4804      	ldr	r0, [pc, #16]	; (80078cc <MX_I2C2_Init+0x50>)
 80078ba:	f7fa fcf9 	bl	80022b0 <HAL_I2C_Init>
 80078be:	4603      	mov	r3, r0
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d001      	beq.n	80078c8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80078c4:	f000 fb12 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80078c8:	bf00      	nop
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	20000210 	.word	0x20000210
 80078d0:	40005800 	.word	0x40005800
 80078d4:	000186a0 	.word	0x000186a0

080078d8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80078dc:	4b18      	ldr	r3, [pc, #96]	; (8007940 <MX_SPI2_Init+0x68>)
 80078de:	4a19      	ldr	r2, [pc, #100]	; (8007944 <MX_SPI2_Init+0x6c>)
 80078e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80078e2:	4b17      	ldr	r3, [pc, #92]	; (8007940 <MX_SPI2_Init+0x68>)
 80078e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80078e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80078ea:	4b15      	ldr	r3, [pc, #84]	; (8007940 <MX_SPI2_Init+0x68>)
 80078ec:	2200      	movs	r2, #0
 80078ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80078f0:	4b13      	ldr	r3, [pc, #76]	; (8007940 <MX_SPI2_Init+0x68>)
 80078f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80078f6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80078f8:	4b11      	ldr	r3, [pc, #68]	; (8007940 <MX_SPI2_Init+0x68>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80078fe:	4b10      	ldr	r3, [pc, #64]	; (8007940 <MX_SPI2_Init+0x68>)
 8007900:	2201      	movs	r2, #1
 8007902:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8007904:	4b0e      	ldr	r3, [pc, #56]	; (8007940 <MX_SPI2_Init+0x68>)
 8007906:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800790a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800790c:	4b0c      	ldr	r3, [pc, #48]	; (8007940 <MX_SPI2_Init+0x68>)
 800790e:	2218      	movs	r2, #24
 8007910:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007912:	4b0b      	ldr	r3, [pc, #44]	; (8007940 <MX_SPI2_Init+0x68>)
 8007914:	2200      	movs	r2, #0
 8007916:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8007918:	4b09      	ldr	r3, [pc, #36]	; (8007940 <MX_SPI2_Init+0x68>)
 800791a:	2200      	movs	r2, #0
 800791c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800791e:	4b08      	ldr	r3, [pc, #32]	; (8007940 <MX_SPI2_Init+0x68>)
 8007920:	2200      	movs	r2, #0
 8007922:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8007924:	4b06      	ldr	r3, [pc, #24]	; (8007940 <MX_SPI2_Init+0x68>)
 8007926:	220a      	movs	r2, #10
 8007928:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800792a:	4805      	ldr	r0, [pc, #20]	; (8007940 <MX_SPI2_Init+0x68>)
 800792c:	f7fc f8aa 	bl	8003a84 <HAL_SPI_Init>
 8007930:	4603      	mov	r3, r0
 8007932:	2b00      	cmp	r3, #0
 8007934:	d001      	beq.n	800793a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8007936:	f000 fad9 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800793a:	bf00      	nop
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	2000009c 	.word	0x2000009c
 8007944:	40003800 	.word	0x40003800

08007948 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b096      	sub	sp, #88	; 0x58
 800794c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800794e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007952:	2200      	movs	r2, #0
 8007954:	601a      	str	r2, [r3, #0]
 8007956:	605a      	str	r2, [r3, #4]
 8007958:	609a      	str	r2, [r3, #8]
 800795a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800795c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]
 8007964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007966:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]
 800796e:	605a      	str	r2, [r3, #4]
 8007970:	609a      	str	r2, [r3, #8]
 8007972:	60da      	str	r2, [r3, #12]
 8007974:	611a      	str	r2, [r3, #16]
 8007976:	615a      	str	r2, [r3, #20]
 8007978:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800797a:	1d3b      	adds	r3, r7, #4
 800797c:	2220      	movs	r2, #32
 800797e:	2100      	movs	r1, #0
 8007980:	4618      	mov	r0, r3
 8007982:	f000 ffcf 	bl	8008924 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007986:	4b4a      	ldr	r3, [pc, #296]	; (8007ab0 <MX_TIM1_Init+0x168>)
 8007988:	4a4a      	ldr	r2, [pc, #296]	; (8007ab4 <MX_TIM1_Init+0x16c>)
 800798a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 800798c:	4b48      	ldr	r3, [pc, #288]	; (8007ab0 <MX_TIM1_Init+0x168>)
 800798e:	2201      	movs	r2, #1
 8007990:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007992:	4b47      	ldr	r3, [pc, #284]	; (8007ab0 <MX_TIM1_Init+0x168>)
 8007994:	2200      	movs	r2, #0
 8007996:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2048;
 8007998:	4b45      	ldr	r3, [pc, #276]	; (8007ab0 <MX_TIM1_Init+0x168>)
 800799a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800799e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079a0:	4b43      	ldr	r3, [pc, #268]	; (8007ab0 <MX_TIM1_Init+0x168>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80079a6:	4b42      	ldr	r3, [pc, #264]	; (8007ab0 <MX_TIM1_Init+0x168>)
 80079a8:	2200      	movs	r2, #0
 80079aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079ac:	4b40      	ldr	r3, [pc, #256]	; (8007ab0 <MX_TIM1_Init+0x168>)
 80079ae:	2200      	movs	r2, #0
 80079b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80079b2:	483f      	ldr	r0, [pc, #252]	; (8007ab0 <MX_TIM1_Init+0x168>)
 80079b4:	f7fc feda 	bl	800476c <HAL_TIM_Base_Init>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80079be:	f000 fa95 	bl	8007eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80079c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80079cc:	4619      	mov	r1, r3
 80079ce:	4838      	ldr	r0, [pc, #224]	; (8007ab0 <MX_TIM1_Init+0x168>)
 80079d0:	f7fd fb32 	bl	8005038 <HAL_TIM_ConfigClockSource>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80079da:	f000 fa87 	bl	8007eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80079de:	4834      	ldr	r0, [pc, #208]	; (8007ab0 <MX_TIM1_Init+0x168>)
 80079e0:	f7fc ff2e 	bl	8004840 <HAL_TIM_PWM_Init>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d001      	beq.n	80079ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80079ea:	f000 fa7f 	bl	8007eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079ee:	2300      	movs	r3, #0
 80079f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80079f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80079fa:	4619      	mov	r1, r3
 80079fc:	482c      	ldr	r0, [pc, #176]	; (8007ab0 <MX_TIM1_Init+0x168>)
 80079fe:	f7fe f869 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8007a02:	4603      	mov	r3, r0
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d001      	beq.n	8007a0c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8007a08:	f000 fa70 	bl	8007eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007a0c:	2360      	movs	r3, #96	; 0x60
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8007a10:	2300      	movs	r3, #0
 8007a12:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007a14:	2300      	movs	r3, #0
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007a20:	2300      	movs	r3, #0
 8007a22:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8007a24:	2300      	movs	r3, #0
 8007a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007a28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	4619      	mov	r1, r3
 8007a30:	481f      	ldr	r0, [pc, #124]	; (8007ab0 <MX_TIM1_Init+0x168>)
 8007a32:	f7fd fa3b 	bl	8004eac <HAL_TIM_PWM_ConfigChannel>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d001      	beq.n	8007a40 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8007a3c:	f000 fa56 	bl	8007eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a44:	2204      	movs	r2, #4
 8007a46:	4619      	mov	r1, r3
 8007a48:	4819      	ldr	r0, [pc, #100]	; (8007ab0 <MX_TIM1_Init+0x168>)
 8007a4a:	f7fd fa2f 	bl	8004eac <HAL_TIM_PWM_ConfigChannel>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8007a54:	f000 fa4a 	bl	8007eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a5c:	2208      	movs	r2, #8
 8007a5e:	4619      	mov	r1, r3
 8007a60:	4813      	ldr	r0, [pc, #76]	; (8007ab0 <MX_TIM1_Init+0x168>)
 8007a62:	f7fd fa23 	bl	8004eac <HAL_TIM_PWM_ConfigChannel>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8007a6c:	f000 fa3e 	bl	8007eec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8007a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a88:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007a8e:	1d3b      	adds	r3, r7, #4
 8007a90:	4619      	mov	r1, r3
 8007a92:	4807      	ldr	r0, [pc, #28]	; (8007ab0 <MX_TIM1_Init+0x168>)
 8007a94:	f7fe f89a 	bl	8005bcc <HAL_TIMEx_ConfigBreakDeadTime>
 8007a98:	4603      	mov	r3, r0
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8007a9e:	f000 fa25 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8007aa2:	4803      	ldr	r0, [pc, #12]	; (8007ab0 <MX_TIM1_Init+0x168>)
 8007aa4:	f000 fd2e 	bl	8008504 <HAL_TIM_MspPostInit>

}
 8007aa8:	bf00      	nop
 8007aaa:	3758      	adds	r7, #88	; 0x58
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}
 8007ab0:	200002f0 	.word	0x200002f0
 8007ab4:	40010000 	.word	0x40010000

08007ab8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08c      	sub	sp, #48	; 0x30
 8007abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007abe:	f107 030c 	add.w	r3, r7, #12
 8007ac2:	2224      	movs	r2, #36	; 0x24
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 ff2c 	bl	8008924 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007acc:	1d3b      	adds	r3, r7, #4
 8007ace:	2200      	movs	r2, #0
 8007ad0:	601a      	str	r2, [r3, #0]
 8007ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8007ad4:	4b22      	ldr	r3, [pc, #136]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007ad6:	4a23      	ldr	r2, [pc, #140]	; (8007b64 <MX_TIM8_Init+0xac>)
 8007ad8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007ada:	4b21      	ldr	r3, [pc, #132]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007adc:	2200      	movs	r2, #0
 8007ade:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007ae0:	4b1f      	ldr	r3, [pc, #124]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8007ae6:	4b1e      	ldr	r3, [pc, #120]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007ae8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aec:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007aee:	4b1c      	ldr	r3, [pc, #112]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007af0:	2200      	movs	r2, #0
 8007af2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007af4:	4b1a      	ldr	r3, [pc, #104]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007af6:	2200      	movs	r2, #0
 8007af8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007afa:	4b19      	ldr	r3, [pc, #100]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007b00:	2303      	movs	r3, #3
 8007b02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007b04:	2300      	movs	r3, #0
 8007b06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007b08:	2301      	movs	r3, #1
 8007b0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007b10:	2300      	movs	r3, #0
 8007b12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007b14:	2300      	movs	r3, #0
 8007b16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007b20:	2300      	movs	r3, #0
 8007b22:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8007b24:	f107 030c 	add.w	r3, r7, #12
 8007b28:	4619      	mov	r1, r3
 8007b2a:	480d      	ldr	r0, [pc, #52]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007b2c:	f7fc ff31 	bl	8004992 <HAL_TIM_Encoder_Init>
 8007b30:	4603      	mov	r3, r0
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007b36:	f000 f9d9 	bl	8007eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b3e:	2300      	movs	r3, #0
 8007b40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007b42:	1d3b      	adds	r3, r7, #4
 8007b44:	4619      	mov	r1, r3
 8007b46:	4806      	ldr	r0, [pc, #24]	; (8007b60 <MX_TIM8_Init+0xa8>)
 8007b48:	f7fd ffc4 	bl	8005ad4 <HAL_TIMEx_MasterConfigSynchronization>
 8007b4c:	4603      	mov	r3, r0
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d001      	beq.n	8007b56 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8007b52:	f000 f9cb 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8007b56:	bf00      	nop
 8007b58:	3730      	adds	r7, #48	; 0x30
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	200000f4 	.word	0x200000f4
 8007b64:	40010400 	.word	0x40010400

08007b68 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b08c      	sub	sp, #48	; 0x30
 8007b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007b6e:	f107 0320 	add.w	r3, r7, #32
 8007b72:	2200      	movs	r2, #0
 8007b74:	601a      	str	r2, [r3, #0]
 8007b76:	605a      	str	r2, [r3, #4]
 8007b78:	609a      	str	r2, [r3, #8]
 8007b7a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007b7c:	1d3b      	adds	r3, r7, #4
 8007b7e:	2200      	movs	r2, #0
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	605a      	str	r2, [r3, #4]
 8007b84:	609a      	str	r2, [r3, #8]
 8007b86:	60da      	str	r2, [r3, #12]
 8007b88:	611a      	str	r2, [r3, #16]
 8007b8a:	615a      	str	r2, [r3, #20]
 8007b8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8007b8e:	4b2d      	ldr	r3, [pc, #180]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007b90:	4a2d      	ldr	r2, [pc, #180]	; (8007c48 <MX_TIM9_Init+0xe0>)
 8007b92:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 2;
 8007b94:	4b2b      	ldr	r3, [pc, #172]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007b96:	2202      	movs	r2, #2
 8007b98:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b9a:	4b2a      	ldr	r3, [pc, #168]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 4096;
 8007ba0:	4b28      	ldr	r3, [pc, #160]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007ba2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ba6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ba8:	4b26      	ldr	r3, [pc, #152]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007baa:	2200      	movs	r2, #0
 8007bac:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007bae:	4b25      	ldr	r3, [pc, #148]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8007bb4:	4823      	ldr	r0, [pc, #140]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007bb6:	f7fc fdd9 	bl	800476c <HAL_TIM_Base_Init>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d001      	beq.n	8007bc4 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8007bc0:	f000 f994 	bl	8007eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007bc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8007bca:	f107 0320 	add.w	r3, r7, #32
 8007bce:	4619      	mov	r1, r3
 8007bd0:	481c      	ldr	r0, [pc, #112]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007bd2:	f7fd fa31 	bl	8005038 <HAL_TIM_ConfigClockSource>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d001      	beq.n	8007be0 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8007bdc:	f000 f986 	bl	8007eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8007be0:	4818      	ldr	r0, [pc, #96]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007be2:	f7fc fe2d 	bl	8004840 <HAL_TIM_PWM_Init>
 8007be6:	4603      	mov	r3, r0
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d001      	beq.n	8007bf0 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8007bec:	f000 f97e 	bl	8007eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8007bf0:	2360      	movs	r3, #96	; 0x60
 8007bf2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1000;
 8007bf4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007bf8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007c02:	1d3b      	adds	r3, r7, #4
 8007c04:	2200      	movs	r2, #0
 8007c06:	4619      	mov	r1, r3
 8007c08:	480e      	ldr	r0, [pc, #56]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007c0a:	f7fd f94f 	bl	8004eac <HAL_TIM_PWM_ConfigChannel>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8007c14:	f000 f96a 	bl	8007eec <Error_Handler>
  }
  sConfigOC.Pulse = 2000;
 8007c18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8007c1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007c1e:	1d3b      	adds	r3, r7, #4
 8007c20:	2204      	movs	r2, #4
 8007c22:	4619      	mov	r1, r3
 8007c24:	4807      	ldr	r0, [pc, #28]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007c26:	f7fd f941 	bl	8004eac <HAL_TIM_PWM_ConfigChannel>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d001      	beq.n	8007c34 <MX_TIM9_Init+0xcc>
  {
    Error_Handler();
 8007c30:	f000 f95c 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8007c34:	4803      	ldr	r0, [pc, #12]	; (8007c44 <MX_TIM9_Init+0xdc>)
 8007c36:	f000 fc65 	bl	8008504 <HAL_TIM_MspPostInit>

}
 8007c3a:	bf00      	nop
 8007c3c:	3730      	adds	r7, #48	; 0x30
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}
 8007c42:	bf00      	nop
 8007c44:	20000330 	.word	0x20000330
 8007c48:	40014000 	.word	0x40014000

08007c4c <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b084      	sub	sp, #16
 8007c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_IC_InitTypeDef sConfigIC = {0};
 8007c52:	463b      	mov	r3, r7
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]
 8007c58:	605a      	str	r2, [r3, #4]
 8007c5a:	609a      	str	r2, [r3, #8]
 8007c5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8007c5e:	4b1c      	ldr	r3, [pc, #112]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007c60:	4a1c      	ldr	r2, [pc, #112]	; (8007cd4 <MX_TIM13_Init+0x88>)
 8007c62:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 8007c64:	4b1a      	ldr	r3, [pc, #104]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007c66:	2200      	movs	r2, #0
 8007c68:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007c6a:	4b19      	ldr	r3, [pc, #100]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 0;
 8007c70:	4b17      	ldr	r3, [pc, #92]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007c76:	4b16      	ldr	r3, [pc, #88]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007c7c:	4b14      	ldr	r3, [pc, #80]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007c7e:	2200      	movs	r2, #0
 8007c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8007c82:	4813      	ldr	r0, [pc, #76]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007c84:	f7fc fd72 	bl	800476c <HAL_TIM_Base_Init>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <MX_TIM13_Init+0x46>
  {
    Error_Handler();
 8007c8e:	f000 f92d 	bl	8007eec <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim13) != HAL_OK)
 8007c92:	480f      	ldr	r0, [pc, #60]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007c94:	f7fc fe48 	bl	8004928 <HAL_TIM_IC_Init>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <MX_TIM13_Init+0x56>
  {
    Error_Handler();
 8007c9e:	f000 f925 	bl	8007eec <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim13, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	4805      	ldr	r0, [pc, #20]	; (8007cd0 <MX_TIM13_Init+0x84>)
 8007cba:	f7fd f85b 	bl	8004d74 <HAL_TIM_IC_ConfigChannel>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <MX_TIM13_Init+0x7c>
  {
    Error_Handler();
 8007cc4:	f000 f912 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8007cc8:	bf00      	nop
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200002ac 	.word	0x200002ac
 8007cd4:	40001c00 	.word	0x40001c00

08007cd8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8007cdc:	4b11      	ldr	r3, [pc, #68]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007cde:	4a12      	ldr	r2, [pc, #72]	; (8007d28 <MX_USART3_UART_Init+0x50>)
 8007ce0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8007ce2:	4b10      	ldr	r3, [pc, #64]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007ce4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007ce8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8007cea:	4b0e      	ldr	r3, [pc, #56]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007cec:	2200      	movs	r2, #0
 8007cee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8007cf0:	4b0c      	ldr	r3, [pc, #48]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8007cf6:	4b0b      	ldr	r3, [pc, #44]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8007cfc:	4b09      	ldr	r3, [pc, #36]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007cfe:	220c      	movs	r2, #12
 8007d00:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d02:	4b08      	ldr	r3, [pc, #32]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007d04:	2200      	movs	r2, #0
 8007d06:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d08:	4b06      	ldr	r3, [pc, #24]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8007d0e:	4805      	ldr	r0, [pc, #20]	; (8007d24 <MX_USART3_UART_Init+0x4c>)
 8007d10:	f7fd ffe7 	bl	8005ce2 <HAL_UART_Init>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d001      	beq.n	8007d1e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8007d1a:	f000 f8e7 	bl	8007eec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8007d1e:	bf00      	nop
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	20000134 	.word	0x20000134
 8007d28:	40004800 	.word	0x40004800

08007d2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b08c      	sub	sp, #48	; 0x30
 8007d30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d32:	f107 031c 	add.w	r3, r7, #28
 8007d36:	2200      	movs	r2, #0
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	605a      	str	r2, [r3, #4]
 8007d3c:	609a      	str	r2, [r3, #8]
 8007d3e:	60da      	str	r2, [r3, #12]
 8007d40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007d42:	2300      	movs	r3, #0
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	4b57      	ldr	r3, [pc, #348]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d4a:	4a56      	ldr	r2, [pc, #344]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d4c:	f043 0310 	orr.w	r3, r3, #16
 8007d50:	6313      	str	r3, [r2, #48]	; 0x30
 8007d52:	4b54      	ldr	r3, [pc, #336]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d56:	f003 0310 	and.w	r3, r3, #16
 8007d5a:	61bb      	str	r3, [r7, #24]
 8007d5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007d5e:	2300      	movs	r3, #0
 8007d60:	617b      	str	r3, [r7, #20]
 8007d62:	4b50      	ldr	r3, [pc, #320]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	4a4f      	ldr	r2, [pc, #316]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007d6e:	4b4d      	ldr	r3, [pc, #308]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d76:	617b      	str	r3, [r7, #20]
 8007d78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	613b      	str	r3, [r7, #16]
 8007d7e:	4b49      	ldr	r3, [pc, #292]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d82:	4a48      	ldr	r2, [pc, #288]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d84:	f043 0304 	orr.w	r3, r3, #4
 8007d88:	6313      	str	r3, [r2, #48]	; 0x30
 8007d8a:	4b46      	ldr	r3, [pc, #280]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d8e:	f003 0304 	and.w	r3, r3, #4
 8007d92:	613b      	str	r3, [r7, #16]
 8007d94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d96:	2300      	movs	r3, #0
 8007d98:	60fb      	str	r3, [r7, #12]
 8007d9a:	4b42      	ldr	r3, [pc, #264]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d9e:	4a41      	ldr	r2, [pc, #260]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007da0:	f043 0301 	orr.w	r3, r3, #1
 8007da4:	6313      	str	r3, [r2, #48]	; 0x30
 8007da6:	4b3f      	ldr	r3, [pc, #252]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	60fb      	str	r3, [r7, #12]
 8007db0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007db2:	2300      	movs	r3, #0
 8007db4:	60bb      	str	r3, [r7, #8]
 8007db6:	4b3b      	ldr	r3, [pc, #236]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dba:	4a3a      	ldr	r2, [pc, #232]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007dbc:	f043 0302 	orr.w	r3, r3, #2
 8007dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007dc2:	4b38      	ldr	r3, [pc, #224]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	60bb      	str	r3, [r7, #8]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007dce:	2300      	movs	r3, #0
 8007dd0:	607b      	str	r3, [r7, #4]
 8007dd2:	4b34      	ldr	r3, [pc, #208]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd6:	4a33      	ldr	r2, [pc, #204]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007dd8:	f043 0308 	orr.w	r3, r3, #8
 8007ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8007dde:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <MX_GPIO_Init+0x178>)
 8007de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007de2:	f003 0308 	and.w	r3, r3, #8
 8007de6:	607b      	str	r3, [r7, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 8007dea:	2200      	movs	r2, #0
 8007dec:	f24c 0118 	movw	r1, #49176	; 0xc018
 8007df0:	482d      	ldr	r0, [pc, #180]	; (8007ea8 <MX_GPIO_Init+0x17c>)
 8007df2:	f7fa fa11 	bl	8002218 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 8007df6:	2200      	movs	r2, #0
 8007df8:	f64b 0180 	movw	r1, #47232	; 0xb880
 8007dfc:	482b      	ldr	r0, [pc, #172]	; (8007eac <MX_GPIO_Init+0x180>)
 8007dfe:	f7fa fa0b 	bl	8002218 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 8007e02:	f24c 0318 	movw	r3, #49176	; 0xc018
 8007e06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e10:	2300      	movs	r3, #0
 8007e12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007e14:	f107 031c 	add.w	r3, r7, #28
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4823      	ldr	r0, [pc, #140]	; (8007ea8 <MX_GPIO_Init+0x17c>)
 8007e1c:	f7fa f862 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 8007e20:	f64b 0380 	movw	r3, #47232	; 0xb880
 8007e24:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007e26:	2301      	movs	r3, #1
 8007e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e32:	f107 031c 	add.w	r3, r7, #28
 8007e36:	4619      	mov	r1, r3
 8007e38:	481c      	ldr	r0, [pc, #112]	; (8007eac <MX_GPIO_Init+0x180>)
 8007e3a:	f7fa f853 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 8007e3e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e44:	2300      	movs	r3, #0
 8007e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 8007e4c:	f107 031c 	add.w	r3, r7, #28
 8007e50:	4619      	mov	r1, r3
 8007e52:	4816      	ldr	r0, [pc, #88]	; (8007eac <MX_GPIO_Init+0x180>)
 8007e54:	f7fa f846 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 8007e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007e5e:	4b14      	ldr	r3, [pc, #80]	; (8007eb0 <MX_GPIO_Init+0x184>)
 8007e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 8007e66:	f107 031c 	add.w	r3, r7, #28
 8007e6a:	4619      	mov	r1, r3
 8007e6c:	4811      	ldr	r0, [pc, #68]	; (8007eb4 <MX_GPIO_Init+0x188>)
 8007e6e:	f7fa f839 	bl	8001ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 8007e72:	2370      	movs	r3, #112	; 0x70
 8007e74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e76:	2300      	movs	r3, #0
 8007e78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e7a:	2301      	movs	r3, #1
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e7e:	f107 031c 	add.w	r3, r7, #28
 8007e82:	4619      	mov	r1, r3
 8007e84:	4809      	ldr	r0, [pc, #36]	; (8007eac <MX_GPIO_Init+0x180>)
 8007e86:	f7fa f82d 	bl	8001ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	2017      	movs	r0, #23
 8007e90:	f7f9 ffcf 	bl	8001e32 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007e94:	2017      	movs	r0, #23
 8007e96:	f7f9 ffe8 	bl	8001e6a <HAL_NVIC_EnableIRQ>

}
 8007e9a:	bf00      	nop
 8007e9c:	3730      	adds	r7, #48	; 0x30
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	40021000 	.word	0x40021000
 8007eac:	40020c00 	.word	0x40020c00
 8007eb0:	10110000 	.word	0x10110000
 8007eb4:	40020800 	.word	0x40020800

08007eb8 <HAL_GPIO_EXTI_Callback>:
//	else{
//		__NOP();
//	}
//}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec8:	d107      	bne.n	8007eda <HAL_GPIO_EXTI_Callback+0x22>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
 8007eca:	2108      	movs	r1, #8
 8007ecc:	4805      	ldr	r0, [pc, #20]	; (8007ee4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8007ece:	f7fa f9bc 	bl	800224a <HAL_GPIO_TogglePin>
		TIM8->CNT = 0;     //TODO: there is acually some stepping happening under the I pulse so we have to distinguish between step from right and step from left
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <HAL_GPIO_EXTI_Callback+0x30>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	else{
		__NOP();
	}
}
 8007ed8:	e000      	b.n	8007edc <HAL_GPIO_EXTI_Callback+0x24>
		__NOP();
 8007eda:	bf00      	nop
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40021000 	.word	0x40021000
 8007ee8:	40010400 	.word	0x40010400

08007eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007eec:	b480      	push	{r7}
 8007eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ef0:	bf00      	nop
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef8:	4770      	bx	lr
	...

08007efc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f02:	2300      	movs	r3, #0
 8007f04:	607b      	str	r3, [r7, #4]
 8007f06:	4b10      	ldr	r3, [pc, #64]	; (8007f48 <HAL_MspInit+0x4c>)
 8007f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f0a:	4a0f      	ldr	r2, [pc, #60]	; (8007f48 <HAL_MspInit+0x4c>)
 8007f0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007f10:	6453      	str	r3, [r2, #68]	; 0x44
 8007f12:	4b0d      	ldr	r3, [pc, #52]	; (8007f48 <HAL_MspInit+0x4c>)
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f1a:	607b      	str	r3, [r7, #4]
 8007f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007f1e:	2300      	movs	r3, #0
 8007f20:	603b      	str	r3, [r7, #0]
 8007f22:	4b09      	ldr	r3, [pc, #36]	; (8007f48 <HAL_MspInit+0x4c>)
 8007f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f26:	4a08      	ldr	r2, [pc, #32]	; (8007f48 <HAL_MspInit+0x4c>)
 8007f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007f2e:	4b06      	ldr	r3, [pc, #24]	; (8007f48 <HAL_MspInit+0x4c>)
 8007f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr
 8007f46:	bf00      	nop
 8007f48:	40023800 	.word	0x40023800

08007f4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b08e      	sub	sp, #56	; 0x38
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]
 8007f5c:	605a      	str	r2, [r3, #4]
 8007f5e:	609a      	str	r2, [r3, #8]
 8007f60:	60da      	str	r2, [r3, #12]
 8007f62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a50      	ldr	r2, [pc, #320]	; (80080ac <HAL_ADC_MspInit+0x160>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d14a      	bne.n	8008004 <HAL_ADC_MspInit+0xb8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8007f6e:	2300      	movs	r3, #0
 8007f70:	623b      	str	r3, [r7, #32]
 8007f72:	4b4f      	ldr	r3, [pc, #316]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f76:	4a4e      	ldr	r2, [pc, #312]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007f78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8007f7e:	4b4c      	ldr	r3, [pc, #304]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f86:	623b      	str	r3, [r7, #32]
 8007f88:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
 8007f8e:	4b48      	ldr	r3, [pc, #288]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f92:	4a47      	ldr	r2, [pc, #284]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007f94:	f043 0304 	orr.w	r3, r3, #4
 8007f98:	6313      	str	r3, [r2, #48]	; 0x30
 8007f9a:	4b45      	ldr	r3, [pc, #276]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f9e:	f003 0304 	and.w	r3, r3, #4
 8007fa2:	61fb      	str	r3, [r7, #28]
 8007fa4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	61bb      	str	r3, [r7, #24]
 8007faa:	4b41      	ldr	r3, [pc, #260]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fae:	4a40      	ldr	r2, [pc, #256]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007fb0:	f043 0301 	orr.w	r3, r3, #1
 8007fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8007fb6:	4b3e      	ldr	r3, [pc, #248]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8007fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	61bb      	str	r3, [r7, #24]
 8007fc0:	69bb      	ldr	r3, [r7, #24]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5 
    */
    GPIO_InitStruct.Pin = ASENSE_Pin|BSENSE_Pin|CSENSE_Pin;
 8007fc2:	230e      	movs	r3, #14
 8007fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007fce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4837      	ldr	r0, [pc, #220]	; (80080b4 <HAL_ADC_MspInit+0x168>)
 8007fd6:	f7f9 ff85 	bl	8001ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I_Pin|M0_SO1_Pin|M0_SO2_Pin|TEMP_Pin 
 8007fda:	233e      	movs	r3, #62	; 0x3e
 8007fdc:	627b      	str	r3, [r7, #36]	; 0x24
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007fde:	2303      	movs	r3, #3
 8007fe0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fea:	4619      	mov	r1, r3
 8007fec:	4832      	ldr	r0, [pc, #200]	; (80080b8 <HAL_ADC_MspInit+0x16c>)
 8007fee:	f7f9 ff79 	bl	8001ee4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	2012      	movs	r0, #18
 8007ff8:	f7f9 ff1b 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8007ffc:	2012      	movs	r0, #18
 8007ffe:	f7f9 ff34 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8008002:	e04e      	b.n	80080a2 <HAL_ADC_MspInit+0x156>
  else if(hadc->Instance==ADC2)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a2c      	ldr	r2, [pc, #176]	; (80080bc <HAL_ADC_MspInit+0x170>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d149      	bne.n	80080a2 <HAL_ADC_MspInit+0x156>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800800e:	2300      	movs	r3, #0
 8008010:	617b      	str	r3, [r7, #20]
 8008012:	4b27      	ldr	r3, [pc, #156]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8008014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008016:	4a26      	ldr	r2, [pc, #152]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8008018:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800801c:	6453      	str	r3, [r2, #68]	; 0x44
 800801e:	4b24      	ldr	r3, [pc, #144]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8008020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008026:	617b      	str	r3, [r7, #20]
 8008028:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800802a:	2300      	movs	r3, #0
 800802c:	613b      	str	r3, [r7, #16]
 800802e:	4b20      	ldr	r3, [pc, #128]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8008030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008032:	4a1f      	ldr	r2, [pc, #124]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8008034:	f043 0304 	orr.w	r3, r3, #4
 8008038:	6313      	str	r3, [r2, #48]	; 0x30
 800803a:	4b1d      	ldr	r3, [pc, #116]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 800803c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	613b      	str	r3, [r7, #16]
 8008044:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008046:	2300      	movs	r3, #0
 8008048:	60fb      	str	r3, [r7, #12]
 800804a:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 800804c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800804e:	4a18      	ldr	r2, [pc, #96]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8008050:	f043 0302 	orr.w	r3, r3, #2
 8008054:	6313      	str	r3, [r2, #48]	; 0x30
 8008056:	4b16      	ldr	r3, [pc, #88]	; (80080b0 <HAL_ADC_MspInit+0x164>)
 8008058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805a:	f003 0302 	and.w	r3, r3, #2
 800805e:	60fb      	str	r3, [r7, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STRAIN0_Pin|STRAIN1_Pin;
 8008062:	2330      	movs	r3, #48	; 0x30
 8008064:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008066:	2303      	movs	r3, #3
 8008068:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800806a:	2300      	movs	r3, #0
 800806c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800806e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008072:	4619      	mov	r1, r3
 8008074:	480f      	ldr	r0, [pc, #60]	; (80080b4 <HAL_ADC_MspInit+0x168>)
 8008076:	f7f9 ff35 	bl	8001ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VBUS_S_Pin;
 800807a:	2301      	movs	r3, #1
 800807c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800807e:	2303      	movs	r3, #3
 8008080:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008082:	2300      	movs	r3, #0
 8008084:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VBUS_S_GPIO_Port, &GPIO_InitStruct);
 8008086:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800808a:	4619      	mov	r1, r3
 800808c:	480c      	ldr	r0, [pc, #48]	; (80080c0 <HAL_ADC_MspInit+0x174>)
 800808e:	f7f9 ff29 	bl	8001ee4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8008092:	2200      	movs	r2, #0
 8008094:	2100      	movs	r1, #0
 8008096:	2012      	movs	r0, #18
 8008098:	f7f9 fecb 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800809c:	2012      	movs	r0, #18
 800809e:	f7f9 fee4 	bl	8001e6a <HAL_NVIC_EnableIRQ>
}
 80080a2:	bf00      	nop
 80080a4:	3738      	adds	r7, #56	; 0x38
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	40012000 	.word	0x40012000
 80080b0:	40023800 	.word	0x40023800
 80080b4:	40020800 	.word	0x40020800
 80080b8:	40020000 	.word	0x40020000
 80080bc:	40012100 	.word	0x40012100
 80080c0:	40020400 	.word	0x40020400

080080c4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b08a      	sub	sp, #40	; 0x28
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080cc:	f107 0314 	add.w	r3, r7, #20
 80080d0:	2200      	movs	r2, #0
 80080d2:	601a      	str	r2, [r3, #0]
 80080d4:	605a      	str	r2, [r3, #4]
 80080d6:	609a      	str	r2, [r3, #8]
 80080d8:	60da      	str	r2, [r3, #12]
 80080da:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a19      	ldr	r2, [pc, #100]	; (8008148 <HAL_CAN_MspInit+0x84>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d12b      	bne.n	800813e <HAL_CAN_MspInit+0x7a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80080e6:	2300      	movs	r3, #0
 80080e8:	613b      	str	r3, [r7, #16]
 80080ea:	4b18      	ldr	r3, [pc, #96]	; (800814c <HAL_CAN_MspInit+0x88>)
 80080ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ee:	4a17      	ldr	r2, [pc, #92]	; (800814c <HAL_CAN_MspInit+0x88>)
 80080f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80080f4:	6413      	str	r3, [r2, #64]	; 0x40
 80080f6:	4b15      	ldr	r3, [pc, #84]	; (800814c <HAL_CAN_MspInit+0x88>)
 80080f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080fe:	613b      	str	r3, [r7, #16]
 8008100:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	4b11      	ldr	r3, [pc, #68]	; (800814c <HAL_CAN_MspInit+0x88>)
 8008108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800810a:	4a10      	ldr	r2, [pc, #64]	; (800814c <HAL_CAN_MspInit+0x88>)
 800810c:	f043 0308 	orr.w	r3, r3, #8
 8008110:	6313      	str	r3, [r2, #48]	; 0x30
 8008112:	4b0e      	ldr	r3, [pc, #56]	; (800814c <HAL_CAN_MspInit+0x88>)
 8008114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008116:	f003 0308 	and.w	r3, r3, #8
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800811e:	2303      	movs	r3, #3
 8008120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008122:	2302      	movs	r3, #2
 8008124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008126:	2300      	movs	r3, #0
 8008128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800812a:	2303      	movs	r3, #3
 800812c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800812e:	2309      	movs	r3, #9
 8008130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008132:	f107 0314 	add.w	r3, r7, #20
 8008136:	4619      	mov	r1, r3
 8008138:	4805      	ldr	r0, [pc, #20]	; (8008150 <HAL_CAN_MspInit+0x8c>)
 800813a:	f7f9 fed3 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800813e:	bf00      	nop
 8008140:	3728      	adds	r7, #40	; 0x28
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	40006400 	.word	0x40006400
 800814c:	40023800 	.word	0x40023800
 8008150:	40020c00 	.word	0x40020c00

08008154 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b08c      	sub	sp, #48	; 0x30
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800815c:	f107 031c 	add.w	r3, r7, #28
 8008160:	2200      	movs	r2, #0
 8008162:	601a      	str	r2, [r3, #0]
 8008164:	605a      	str	r2, [r3, #4]
 8008166:	609a      	str	r2, [r3, #8]
 8008168:	60da      	str	r2, [r3, #12]
 800816a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a32      	ldr	r2, [pc, #200]	; (800823c <HAL_I2C_MspInit+0xe8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d12c      	bne.n	80081d0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008176:	2300      	movs	r3, #0
 8008178:	61bb      	str	r3, [r7, #24]
 800817a:	4b31      	ldr	r3, [pc, #196]	; (8008240 <HAL_I2C_MspInit+0xec>)
 800817c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800817e:	4a30      	ldr	r2, [pc, #192]	; (8008240 <HAL_I2C_MspInit+0xec>)
 8008180:	f043 0302 	orr.w	r3, r3, #2
 8008184:	6313      	str	r3, [r2, #48]	; 0x30
 8008186:	4b2e      	ldr	r3, [pc, #184]	; (8008240 <HAL_I2C_MspInit+0xec>)
 8008188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818a:	f003 0302 	and.w	r3, r3, #2
 800818e:	61bb      	str	r3, [r7, #24]
 8008190:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008192:	23c0      	movs	r3, #192	; 0xc0
 8008194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008196:	2312      	movs	r3, #18
 8008198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800819a:	2301      	movs	r3, #1
 800819c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800819e:	2303      	movs	r3, #3
 80081a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80081a2:	2304      	movs	r3, #4
 80081a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081a6:	f107 031c 	add.w	r3, r7, #28
 80081aa:	4619      	mov	r1, r3
 80081ac:	4825      	ldr	r0, [pc, #148]	; (8008244 <HAL_I2C_MspInit+0xf0>)
 80081ae:	f7f9 fe99 	bl	8001ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80081b2:	2300      	movs	r3, #0
 80081b4:	617b      	str	r3, [r7, #20]
 80081b6:	4b22      	ldr	r3, [pc, #136]	; (8008240 <HAL_I2C_MspInit+0xec>)
 80081b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ba:	4a21      	ldr	r2, [pc, #132]	; (8008240 <HAL_I2C_MspInit+0xec>)
 80081bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081c0:	6413      	str	r3, [r2, #64]	; 0x40
 80081c2:	4b1f      	ldr	r3, [pc, #124]	; (8008240 <HAL_I2C_MspInit+0xec>)
 80081c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80081ca:	617b      	str	r3, [r7, #20]
 80081cc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80081ce:	e031      	b.n	8008234 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a1c      	ldr	r2, [pc, #112]	; (8008248 <HAL_I2C_MspInit+0xf4>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d12c      	bne.n	8008234 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081da:	2300      	movs	r3, #0
 80081dc:	613b      	str	r3, [r7, #16]
 80081de:	4b18      	ldr	r3, [pc, #96]	; (8008240 <HAL_I2C_MspInit+0xec>)
 80081e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e2:	4a17      	ldr	r2, [pc, #92]	; (8008240 <HAL_I2C_MspInit+0xec>)
 80081e4:	f043 0302 	orr.w	r3, r3, #2
 80081e8:	6313      	str	r3, [r2, #48]	; 0x30
 80081ea:	4b15      	ldr	r3, [pc, #84]	; (8008240 <HAL_I2C_MspInit+0xec>)
 80081ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081ee:	f003 0302 	and.w	r3, r3, #2
 80081f2:	613b      	str	r3, [r7, #16]
 80081f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80081f6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80081fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081fc:	2312      	movs	r3, #18
 80081fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008200:	2301      	movs	r3, #1
 8008202:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008204:	2303      	movs	r3, #3
 8008206:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008208:	2304      	movs	r3, #4
 800820a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800820c:	f107 031c 	add.w	r3, r7, #28
 8008210:	4619      	mov	r1, r3
 8008212:	480c      	ldr	r0, [pc, #48]	; (8008244 <HAL_I2C_MspInit+0xf0>)
 8008214:	f7f9 fe66 	bl	8001ee4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008218:	2300      	movs	r3, #0
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	4b08      	ldr	r3, [pc, #32]	; (8008240 <HAL_I2C_MspInit+0xec>)
 800821e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008220:	4a07      	ldr	r2, [pc, #28]	; (8008240 <HAL_I2C_MspInit+0xec>)
 8008222:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008226:	6413      	str	r3, [r2, #64]	; 0x40
 8008228:	4b05      	ldr	r3, [pc, #20]	; (8008240 <HAL_I2C_MspInit+0xec>)
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008230:	60fb      	str	r3, [r7, #12]
 8008232:	68fb      	ldr	r3, [r7, #12]
}
 8008234:	bf00      	nop
 8008236:	3730      	adds	r7, #48	; 0x30
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}
 800823c:	40005400 	.word	0x40005400
 8008240:	40023800 	.word	0x40023800
 8008244:	40020400 	.word	0x40020400
 8008248:	40005800 	.word	0x40005800

0800824c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b08a      	sub	sp, #40	; 0x28
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008254:	f107 0314 	add.w	r3, r7, #20
 8008258:	2200      	movs	r2, #0
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	605a      	str	r2, [r3, #4]
 800825e:	609a      	str	r2, [r3, #8]
 8008260:	60da      	str	r2, [r3, #12]
 8008262:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a1d      	ldr	r2, [pc, #116]	; (80082e0 <HAL_SPI_MspInit+0x94>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d134      	bne.n	80082d8 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800826e:	2300      	movs	r3, #0
 8008270:	613b      	str	r3, [r7, #16]
 8008272:	4b1c      	ldr	r3, [pc, #112]	; (80082e4 <HAL_SPI_MspInit+0x98>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	4a1b      	ldr	r2, [pc, #108]	; (80082e4 <HAL_SPI_MspInit+0x98>)
 8008278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800827c:	6413      	str	r3, [r2, #64]	; 0x40
 800827e:	4b19      	ldr	r3, [pc, #100]	; (80082e4 <HAL_SPI_MspInit+0x98>)
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008286:	613b      	str	r3, [r7, #16]
 8008288:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
 800828e:	4b15      	ldr	r3, [pc, #84]	; (80082e4 <HAL_SPI_MspInit+0x98>)
 8008290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008292:	4a14      	ldr	r2, [pc, #80]	; (80082e4 <HAL_SPI_MspInit+0x98>)
 8008294:	f043 0302 	orr.w	r3, r3, #2
 8008298:	6313      	str	r3, [r2, #48]	; 0x30
 800829a:	4b12      	ldr	r3, [pc, #72]	; (80082e4 <HAL_SPI_MspInit+0x98>)
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	f003 0302 	and.w	r3, r3, #2
 80082a2:	60fb      	str	r3, [r7, #12]
 80082a4:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80082a6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80082aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ac:	2302      	movs	r3, #2
 80082ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b0:	2300      	movs	r3, #0
 80082b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80082b4:	2303      	movs	r3, #3
 80082b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80082b8:	2305      	movs	r3, #5
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80082bc:	f107 0314 	add.w	r3, r7, #20
 80082c0:	4619      	mov	r1, r3
 80082c2:	4809      	ldr	r0, [pc, #36]	; (80082e8 <HAL_SPI_MspInit+0x9c>)
 80082c4:	f7f9 fe0e 	bl	8001ee4 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80082c8:	2200      	movs	r2, #0
 80082ca:	2100      	movs	r1, #0
 80082cc:	2024      	movs	r0, #36	; 0x24
 80082ce:	f7f9 fdb0 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80082d2:	2024      	movs	r0, #36	; 0x24
 80082d4:	f7f9 fdc9 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80082d8:	bf00      	nop
 80082da:	3728      	adds	r7, #40	; 0x28
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}
 80082e0:	40003800 	.word	0x40003800
 80082e4:	40023800 	.word	0x40023800
 80082e8:	40020400 	.word	0x40020400

080082ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08c      	sub	sp, #48	; 0x30
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082f4:	f107 031c 	add.w	r3, r7, #28
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	605a      	str	r2, [r3, #4]
 80082fe:	609a      	str	r2, [r3, #8]
 8008300:	60da      	str	r2, [r3, #12]
 8008302:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a45      	ldr	r2, [pc, #276]	; (8008420 <HAL_TIM_Base_MspInit+0x134>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d12e      	bne.n	800836c <HAL_TIM_Base_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800830e:	2300      	movs	r3, #0
 8008310:	61bb      	str	r3, [r7, #24]
 8008312:	4b44      	ldr	r3, [pc, #272]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 8008314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008316:	4a43      	ldr	r2, [pc, #268]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 8008318:	f043 0301 	orr.w	r3, r3, #1
 800831c:	6453      	str	r3, [r2, #68]	; 0x44
 800831e:	4b41      	ldr	r3, [pc, #260]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	f003 0301 	and.w	r3, r3, #1
 8008326:	61bb      	str	r3, [r7, #24]
 8008328:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800832a:	2200      	movs	r2, #0
 800832c:	2100      	movs	r1, #0
 800832e:	2018      	movs	r0, #24
 8008330:	f7f9 fd7f 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8008334:	2018      	movs	r0, #24
 8008336:	f7f9 fd98 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800833a:	2200      	movs	r2, #0
 800833c:	2100      	movs	r1, #0
 800833e:	2019      	movs	r0, #25
 8008340:	f7f9 fd77 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8008344:	2019      	movs	r0, #25
 8008346:	f7f9 fd90 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800834a:	2200      	movs	r2, #0
 800834c:	2100      	movs	r1, #0
 800834e:	201a      	movs	r0, #26
 8008350:	f7f9 fd6f 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8008354:	201a      	movs	r0, #26
 8008356:	f7f9 fd88 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800835a:	2200      	movs	r2, #0
 800835c:	2100      	movs	r1, #0
 800835e:	201b      	movs	r0, #27
 8008360:	f7f9 fd67 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8008364:	201b      	movs	r0, #27
 8008366:	f7f9 fd80 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 800836a:	e054      	b.n	8008416 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM9)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a2d      	ldr	r2, [pc, #180]	; (8008428 <HAL_TIM_Base_MspInit+0x13c>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d116      	bne.n	80083a4 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8008376:	2300      	movs	r3, #0
 8008378:	617b      	str	r3, [r7, #20]
 800837a:	4b2a      	ldr	r3, [pc, #168]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 800837c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800837e:	4a29      	ldr	r2, [pc, #164]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 8008380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008384:	6453      	str	r3, [r2, #68]	; 0x44
 8008386:	4b27      	ldr	r3, [pc, #156]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 8008388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8008392:	2200      	movs	r2, #0
 8008394:	2100      	movs	r1, #0
 8008396:	2018      	movs	r0, #24
 8008398:	f7f9 fd4b 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800839c:	2018      	movs	r0, #24
 800839e:	f7f9 fd64 	bl	8001e6a <HAL_NVIC_EnableIRQ>
}
 80083a2:	e038      	b.n	8008416 <HAL_TIM_Base_MspInit+0x12a>
  else if(htim_base->Instance==TIM13)
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	4a20      	ldr	r2, [pc, #128]	; (800842c <HAL_TIM_Base_MspInit+0x140>)
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d133      	bne.n	8008416 <HAL_TIM_Base_MspInit+0x12a>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80083ae:	2300      	movs	r3, #0
 80083b0:	613b      	str	r3, [r7, #16]
 80083b2:	4b1c      	ldr	r3, [pc, #112]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	4a1b      	ldr	r2, [pc, #108]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 80083b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083bc:	6413      	str	r3, [r2, #64]	; 0x40
 80083be:	4b19      	ldr	r3, [pc, #100]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c6:	613b      	str	r3, [r7, #16]
 80083c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ca:	2300      	movs	r3, #0
 80083cc:	60fb      	str	r3, [r7, #12]
 80083ce:	4b15      	ldr	r3, [pc, #84]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 80083d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083d2:	4a14      	ldr	r2, [pc, #80]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 80083d4:	f043 0301 	orr.w	r3, r3, #1
 80083d8:	6313      	str	r3, [r2, #48]	; 0x30
 80083da:	4b12      	ldr	r3, [pc, #72]	; (8008424 <HAL_TIM_Base_MspInit+0x138>)
 80083dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083de:	f003 0301 	and.w	r3, r3, #1
 80083e2:	60fb      	str	r3, [r7, #12]
 80083e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80083e6:	2340      	movs	r3, #64	; 0x40
 80083e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083ea:	2302      	movs	r3, #2
 80083ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083ee:	2300      	movs	r3, #0
 80083f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083f2:	2300      	movs	r3, #0
 80083f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80083f6:	2309      	movs	r3, #9
 80083f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083fa:	f107 031c 	add.w	r3, r7, #28
 80083fe:	4619      	mov	r1, r3
 8008400:	480b      	ldr	r0, [pc, #44]	; (8008430 <HAL_TIM_Base_MspInit+0x144>)
 8008402:	f7f9 fd6f 	bl	8001ee4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8008406:	2200      	movs	r2, #0
 8008408:	2100      	movs	r1, #0
 800840a:	202c      	movs	r0, #44	; 0x2c
 800840c:	f7f9 fd11 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8008410:	202c      	movs	r0, #44	; 0x2c
 8008412:	f7f9 fd2a 	bl	8001e6a <HAL_NVIC_EnableIRQ>
}
 8008416:	bf00      	nop
 8008418:	3730      	adds	r7, #48	; 0x30
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	40010000 	.word	0x40010000
 8008424:	40023800 	.word	0x40023800
 8008428:	40014000 	.word	0x40014000
 800842c:	40001c00 	.word	0x40001c00
 8008430:	40020000 	.word	0x40020000

08008434 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b08a      	sub	sp, #40	; 0x28
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800843c:	f107 0314 	add.w	r3, r7, #20
 8008440:	2200      	movs	r2, #0
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	605a      	str	r2, [r3, #4]
 8008446:	609a      	str	r2, [r3, #8]
 8008448:	60da      	str	r2, [r3, #12]
 800844a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4a29      	ldr	r2, [pc, #164]	; (80084f8 <HAL_TIM_Encoder_MspInit+0xc4>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d14b      	bne.n	80084ee <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	4b28      	ldr	r3, [pc, #160]	; (80084fc <HAL_TIM_Encoder_MspInit+0xc8>)
 800845c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845e:	4a27      	ldr	r2, [pc, #156]	; (80084fc <HAL_TIM_Encoder_MspInit+0xc8>)
 8008460:	f043 0302 	orr.w	r3, r3, #2
 8008464:	6453      	str	r3, [r2, #68]	; 0x44
 8008466:	4b25      	ldr	r3, [pc, #148]	; (80084fc <HAL_TIM_Encoder_MspInit+0xc8>)
 8008468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800846a:	f003 0302 	and.w	r3, r3, #2
 800846e:	613b      	str	r3, [r7, #16]
 8008470:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008472:	2300      	movs	r3, #0
 8008474:	60fb      	str	r3, [r7, #12]
 8008476:	4b21      	ldr	r3, [pc, #132]	; (80084fc <HAL_TIM_Encoder_MspInit+0xc8>)
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	4a20      	ldr	r2, [pc, #128]	; (80084fc <HAL_TIM_Encoder_MspInit+0xc8>)
 800847c:	f043 0304 	orr.w	r3, r3, #4
 8008480:	6313      	str	r3, [r2, #48]	; 0x30
 8008482:	4b1e      	ldr	r3, [pc, #120]	; (80084fc <HAL_TIM_Encoder_MspInit+0xc8>)
 8008484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008486:	f003 0304 	and.w	r3, r3, #4
 800848a:	60fb      	str	r3, [r7, #12]
 800848c:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800848e:	23c0      	movs	r3, #192	; 0xc0
 8008490:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008492:	2302      	movs	r3, #2
 8008494:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008496:	2300      	movs	r3, #0
 8008498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800849a:	2300      	movs	r3, #0
 800849c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800849e:	2303      	movs	r3, #3
 80084a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084a2:	f107 0314 	add.w	r3, r7, #20
 80084a6:	4619      	mov	r1, r3
 80084a8:	4815      	ldr	r0, [pc, #84]	; (8008500 <HAL_TIM_Encoder_MspInit+0xcc>)
 80084aa:	f7f9 fd1b 	bl	8001ee4 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80084ae:	2200      	movs	r2, #0
 80084b0:	2100      	movs	r1, #0
 80084b2:	202b      	movs	r0, #43	; 0x2b
 80084b4:	f7f9 fcbd 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80084b8:	202b      	movs	r0, #43	; 0x2b
 80084ba:	f7f9 fcd6 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80084be:	2200      	movs	r2, #0
 80084c0:	2100      	movs	r1, #0
 80084c2:	202c      	movs	r0, #44	; 0x2c
 80084c4:	f7f9 fcb5 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80084c8:	202c      	movs	r0, #44	; 0x2c
 80084ca:	f7f9 fcce 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80084ce:	2200      	movs	r2, #0
 80084d0:	2100      	movs	r1, #0
 80084d2:	202d      	movs	r0, #45	; 0x2d
 80084d4:	f7f9 fcad 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80084d8:	202d      	movs	r0, #45	; 0x2d
 80084da:	f7f9 fcc6 	bl	8001e6a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 80084de:	2200      	movs	r2, #0
 80084e0:	2100      	movs	r1, #0
 80084e2:	202e      	movs	r0, #46	; 0x2e
 80084e4:	f7f9 fca5 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 80084e8:	202e      	movs	r0, #46	; 0x2e
 80084ea:	f7f9 fcbe 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80084ee:	bf00      	nop
 80084f0:	3728      	adds	r7, #40	; 0x28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	40010400 	.word	0x40010400
 80084fc:	40023800 	.word	0x40023800
 8008500:	40020800 	.word	0x40020800

08008504 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b08a      	sub	sp, #40	; 0x28
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800850c:	f107 0314 	add.w	r3, r7, #20
 8008510:	2200      	movs	r2, #0
 8008512:	601a      	str	r2, [r3, #0]
 8008514:	605a      	str	r2, [r3, #4]
 8008516:	609a      	str	r2, [r3, #8]
 8008518:	60da      	str	r2, [r3, #12]
 800851a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4a24      	ldr	r2, [pc, #144]	; (80085b4 <HAL_TIM_MspPostInit+0xb0>)
 8008522:	4293      	cmp	r3, r2
 8008524:	d11f      	bne.n	8008566 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008526:	2300      	movs	r3, #0
 8008528:	613b      	str	r3, [r7, #16]
 800852a:	4b23      	ldr	r3, [pc, #140]	; (80085b8 <HAL_TIM_MspPostInit+0xb4>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	4a22      	ldr	r2, [pc, #136]	; (80085b8 <HAL_TIM_MspPostInit+0xb4>)
 8008530:	f043 0310 	orr.w	r3, r3, #16
 8008534:	6313      	str	r3, [r2, #48]	; 0x30
 8008536:	4b20      	ldr	r3, [pc, #128]	; (80085b8 <HAL_TIM_MspPostInit+0xb4>)
 8008538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800853a:	f003 0310 	and.w	r3, r3, #16
 800853e:	613b      	str	r3, [r7, #16]
 8008540:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8008542:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 8008546:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008548:	2302      	movs	r3, #2
 800854a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800854c:	2300      	movs	r3, #0
 800854e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008550:	2300      	movs	r3, #0
 8008552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8008554:	2301      	movs	r3, #1
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008558:	f107 0314 	add.w	r3, r7, #20
 800855c:	4619      	mov	r1, r3
 800855e:	4817      	ldr	r0, [pc, #92]	; (80085bc <HAL_TIM_MspPostInit+0xb8>)
 8008560:	f7f9 fcc0 	bl	8001ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8008564:	e022      	b.n	80085ac <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4a15      	ldr	r2, [pc, #84]	; (80085c0 <HAL_TIM_MspPostInit+0xbc>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d11d      	bne.n	80085ac <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008570:	2300      	movs	r3, #0
 8008572:	60fb      	str	r3, [r7, #12]
 8008574:	4b10      	ldr	r3, [pc, #64]	; (80085b8 <HAL_TIM_MspPostInit+0xb4>)
 8008576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008578:	4a0f      	ldr	r2, [pc, #60]	; (80085b8 <HAL_TIM_MspPostInit+0xb4>)
 800857a:	f043 0310 	orr.w	r3, r3, #16
 800857e:	6313      	str	r3, [r2, #48]	; 0x30
 8008580:	4b0d      	ldr	r3, [pc, #52]	; (80085b8 <HAL_TIM_MspPostInit+0xb4>)
 8008582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008584:	f003 0310 	and.w	r3, r3, #16
 8008588:	60fb      	str	r3, [r7, #12]
 800858a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800858c:	2360      	movs	r3, #96	; 0x60
 800858e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008590:	2302      	movs	r3, #2
 8008592:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008594:	2300      	movs	r3, #0
 8008596:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008598:	2300      	movs	r3, #0
 800859a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800859c:	2303      	movs	r3, #3
 800859e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80085a0:	f107 0314 	add.w	r3, r7, #20
 80085a4:	4619      	mov	r1, r3
 80085a6:	4805      	ldr	r0, [pc, #20]	; (80085bc <HAL_TIM_MspPostInit+0xb8>)
 80085a8:	f7f9 fc9c 	bl	8001ee4 <HAL_GPIO_Init>
}
 80085ac:	bf00      	nop
 80085ae:	3728      	adds	r7, #40	; 0x28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40010000 	.word	0x40010000
 80085b8:	40023800 	.word	0x40023800
 80085bc:	40021000 	.word	0x40021000
 80085c0:	40014000 	.word	0x40014000

080085c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b08a      	sub	sp, #40	; 0x28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085cc:	f107 0314 	add.w	r3, r7, #20
 80085d0:	2200      	movs	r2, #0
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	605a      	str	r2, [r3, #4]
 80085d6:	609a      	str	r2, [r3, #8]
 80085d8:	60da      	str	r2, [r3, #12]
 80085da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a1d      	ldr	r2, [pc, #116]	; (8008658 <HAL_UART_MspInit+0x94>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d134      	bne.n	8008650 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80085e6:	2300      	movs	r3, #0
 80085e8:	613b      	str	r3, [r7, #16]
 80085ea:	4b1c      	ldr	r3, [pc, #112]	; (800865c <HAL_UART_MspInit+0x98>)
 80085ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ee:	4a1b      	ldr	r2, [pc, #108]	; (800865c <HAL_UART_MspInit+0x98>)
 80085f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085f4:	6413      	str	r3, [r2, #64]	; 0x40
 80085f6:	4b19      	ldr	r3, [pc, #100]	; (800865c <HAL_UART_MspInit+0x98>)
 80085f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085fe:	613b      	str	r3, [r7, #16]
 8008600:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
 8008606:	4b15      	ldr	r3, [pc, #84]	; (800865c <HAL_UART_MspInit+0x98>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	4a14      	ldr	r2, [pc, #80]	; (800865c <HAL_UART_MspInit+0x98>)
 800860c:	f043 0308 	orr.w	r3, r3, #8
 8008610:	6313      	str	r3, [r2, #48]	; 0x30
 8008612:	4b12      	ldr	r3, [pc, #72]	; (800865c <HAL_UART_MspInit+0x98>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	f003 0308 	and.w	r3, r3, #8
 800861a:	60fb      	str	r3, [r7, #12]
 800861c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800861e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008622:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008624:	2302      	movs	r3, #2
 8008626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008628:	2301      	movs	r3, #1
 800862a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800862c:	2303      	movs	r3, #3
 800862e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8008630:	2307      	movs	r3, #7
 8008632:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008634:	f107 0314 	add.w	r3, r7, #20
 8008638:	4619      	mov	r1, r3
 800863a:	4809      	ldr	r0, [pc, #36]	; (8008660 <HAL_UART_MspInit+0x9c>)
 800863c:	f7f9 fc52 	bl	8001ee4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8008640:	2200      	movs	r2, #0
 8008642:	2100      	movs	r1, #0
 8008644:	2027      	movs	r0, #39	; 0x27
 8008646:	f7f9 fbf4 	bl	8001e32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800864a:	2027      	movs	r0, #39	; 0x27
 800864c:	f7f9 fc0d 	bl	8001e6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8008650:	bf00      	nop
 8008652:	3728      	adds	r7, #40	; 0x28
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40004800 	.word	0x40004800
 800865c:	40023800 	.word	0x40023800
 8008660:	40020c00 	.word	0x40020c00

08008664 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008664:	b480      	push	{r7}
 8008666:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008668:	bf00      	nop
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008672:	b480      	push	{r7}
 8008674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008676:	e7fe      	b.n	8008676 <HardFault_Handler+0x4>

08008678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008678:	b480      	push	{r7}
 800867a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800867c:	e7fe      	b.n	800867c <MemManage_Handler+0x4>

0800867e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800867e:	b480      	push	{r7}
 8008680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008682:	e7fe      	b.n	8008682 <BusFault_Handler+0x4>

08008684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008684:	b480      	push	{r7}
 8008686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008688:	e7fe      	b.n	8008688 <UsageFault_Handler+0x4>

0800868a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800868a:	b480      	push	{r7}
 800868c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800868e:	bf00      	nop
 8008690:	46bd      	mov	sp, r7
 8008692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008696:	4770      	bx	lr

08008698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800869c:	bf00      	nop
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr

080086a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086a6:	b480      	push	{r7}
 80086a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086aa:	bf00      	nop
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086b4:	b580      	push	{r7, lr}
 80086b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086b8:	f7f8 fca2 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086bc:	bf00      	nop
 80086be:	bd80      	pop	{r7, pc}

080086c0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80086c4:	4803      	ldr	r0, [pc, #12]	; (80086d4 <ADC_IRQHandler+0x14>)
 80086c6:	f7f8 fe49 	bl	800135c <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80086ca:	4803      	ldr	r0, [pc, #12]	; (80086d8 <ADC_IRQHandler+0x18>)
 80086cc:	f7f8 fe46 	bl	800135c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80086d0:	bf00      	nop
 80086d2:	bd80      	pop	{r7, pc}
 80086d4:	20000264 	.word	0x20000264
 80086d8:	20000174 	.word	0x20000174

080086dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80086e0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80086e4:	f7f9 fdcc 	bl	8002280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80086e8:	bf00      	nop
 80086ea:	bd80      	pop	{r7, pc}

080086ec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80086f0:	4803      	ldr	r0, [pc, #12]	; (8008700 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 80086f2:	f7fc fa37 	bl	8004b64 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 80086f6:	4803      	ldr	r0, [pc, #12]	; (8008704 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 80086f8:	f7fc fa34 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80086fc:	bf00      	nop
 80086fe:	bd80      	pop	{r7, pc}
 8008700:	200002f0 	.word	0x200002f0
 8008704:	20000330 	.word	0x20000330

08008708 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800870c:	4802      	ldr	r0, [pc, #8]	; (8008718 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800870e:	f7fc fa29 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008712:	bf00      	nop
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200002f0 	.word	0x200002f0

0800871c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008720:	4802      	ldr	r0, [pc, #8]	; (800872c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8008722:	f7fc fa1f 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8008726:	bf00      	nop
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200002f0 	.word	0x200002f0

08008730 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008734:	4802      	ldr	r0, [pc, #8]	; (8008740 <TIM1_CC_IRQHandler+0x10>)
 8008736:	f7fc fa15 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800873a:	bf00      	nop
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	200002f0 	.word	0x200002f0

08008744 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008748:	4802      	ldr	r0, [pc, #8]	; (8008754 <SPI2_IRQHandler+0x10>)
 800874a:	f7fb fddf 	bl	800430c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800874e:	bf00      	nop
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	2000009c 	.word	0x2000009c

08008758 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800875c:	4802      	ldr	r0, [pc, #8]	; (8008768 <USART3_IRQHandler+0x10>)
 800875e:	f7fd fba7 	bl	8005eb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8008762:	bf00      	nop
 8008764:	bd80      	pop	{r7, pc}
 8008766:	bf00      	nop
 8008768:	20000134 	.word	0x20000134

0800876c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008770:	4802      	ldr	r0, [pc, #8]	; (800877c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8008772:	f7fc f9f7 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8008776:	bf00      	nop
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	200000f4 	.word	0x200000f4

08008780 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8008784:	4803      	ldr	r0, [pc, #12]	; (8008794 <TIM8_UP_TIM13_IRQHandler+0x14>)
 8008786:	f7fc f9ed 	bl	8004b64 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim13);
 800878a:	4803      	ldr	r0, [pc, #12]	; (8008798 <TIM8_UP_TIM13_IRQHandler+0x18>)
 800878c:	f7fc f9ea 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8008790:	bf00      	nop
 8008792:	bd80      	pop	{r7, pc}
 8008794:	200000f4 	.word	0x200000f4
 8008798:	200002ac 	.word	0x200002ac

0800879c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80087a0:	4802      	ldr	r0, [pc, #8]	; (80087ac <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80087a2:	f7fc f9df 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80087a6:	bf00      	nop
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200000f4 	.word	0x200000f4

080087b0 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80087b4:	4802      	ldr	r0, [pc, #8]	; (80087c0 <TIM8_CC_IRQHandler+0x10>)
 80087b6:	f7fc f9d5 	bl	8004b64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80087ba:	bf00      	nop
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	200000f4 	.word	0x200000f4

080087c4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80087cc:	4b11      	ldr	r3, [pc, #68]	; (8008814 <_sbrk+0x50>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d102      	bne.n	80087da <_sbrk+0x16>
		heap_end = &end;
 80087d4:	4b0f      	ldr	r3, [pc, #60]	; (8008814 <_sbrk+0x50>)
 80087d6:	4a10      	ldr	r2, [pc, #64]	; (8008818 <_sbrk+0x54>)
 80087d8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80087da:	4b0e      	ldr	r3, [pc, #56]	; (8008814 <_sbrk+0x50>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80087e0:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <_sbrk+0x50>)
 80087e2:	681a      	ldr	r2, [r3, #0]
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4413      	add	r3, r2
 80087e8:	466a      	mov	r2, sp
 80087ea:	4293      	cmp	r3, r2
 80087ec:	d907      	bls.n	80087fe <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80087ee:	f000 f855 	bl	800889c <__errno>
 80087f2:	4602      	mov	r2, r0
 80087f4:	230c      	movs	r3, #12
 80087f6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80087f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80087fc:	e006      	b.n	800880c <_sbrk+0x48>
	}

	heap_end += incr;
 80087fe:	4b05      	ldr	r3, [pc, #20]	; (8008814 <_sbrk+0x50>)
 8008800:	681a      	ldr	r2, [r3, #0]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4413      	add	r3, r2
 8008806:	4a03      	ldr	r2, [pc, #12]	; (8008814 <_sbrk+0x50>)
 8008808:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800880a:	68fb      	ldr	r3, [r7, #12]
}
 800880c:	4618      	mov	r0, r3
 800880e:	3710      	adds	r7, #16
 8008810:	46bd      	mov	sp, r7
 8008812:	bd80      	pop	{r7, pc}
 8008814:	2000008c 	.word	0x2000008c
 8008818:	200003a0 	.word	0x200003a0

0800881c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800881c:	b480      	push	{r7}
 800881e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008820:	4b08      	ldr	r3, [pc, #32]	; (8008844 <SystemInit+0x28>)
 8008822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008826:	4a07      	ldr	r2, [pc, #28]	; (8008844 <SystemInit+0x28>)
 8008828:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800882c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008830:	4b04      	ldr	r3, [pc, #16]	; (8008844 <SystemInit+0x28>)
 8008832:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008836:	609a      	str	r2, [r3, #8]
#endif
}
 8008838:	bf00      	nop
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	e000ed00 	.word	0xe000ed00

08008848 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008848:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008880 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800884c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800884e:	e003      	b.n	8008858 <LoopCopyDataInit>

08008850 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008850:	4b0c      	ldr	r3, [pc, #48]	; (8008884 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008852:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008854:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008856:	3104      	adds	r1, #4

08008858 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008858:	480b      	ldr	r0, [pc, #44]	; (8008888 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800885a:	4b0c      	ldr	r3, [pc, #48]	; (800888c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800885c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800885e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008860:	d3f6      	bcc.n	8008850 <CopyDataInit>
  ldr  r2, =_sbss
 8008862:	4a0b      	ldr	r2, [pc, #44]	; (8008890 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008864:	e002      	b.n	800886c <LoopFillZerobss>

08008866 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008866:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008868:	f842 3b04 	str.w	r3, [r2], #4

0800886c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800886c:	4b09      	ldr	r3, [pc, #36]	; (8008894 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800886e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008870:	d3f9      	bcc.n	8008866 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008872:	f7ff ffd3 	bl	800881c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008876:	f000 f817 	bl	80088a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800887a:	f7fe f8d5 	bl	8006a28 <main>
  bx  lr    
 800887e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8008880:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008884:	0800a4b0 	.word	0x0800a4b0
  ldr  r0, =_sdata
 8008888:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800888c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8008890:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8008894:	2000039c 	.word	0x2000039c

08008898 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008898:	e7fe      	b.n	8008898 <CAN1_RX0_IRQHandler>
	...

0800889c <__errno>:
 800889c:	4b01      	ldr	r3, [pc, #4]	; (80088a4 <__errno+0x8>)
 800889e:	6818      	ldr	r0, [r3, #0]
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	2000000c 	.word	0x2000000c

080088a8 <__libc_init_array>:
 80088a8:	b570      	push	{r4, r5, r6, lr}
 80088aa:	4e0d      	ldr	r6, [pc, #52]	; (80088e0 <__libc_init_array+0x38>)
 80088ac:	4c0d      	ldr	r4, [pc, #52]	; (80088e4 <__libc_init_array+0x3c>)
 80088ae:	1ba4      	subs	r4, r4, r6
 80088b0:	10a4      	asrs	r4, r4, #2
 80088b2:	2500      	movs	r5, #0
 80088b4:	42a5      	cmp	r5, r4
 80088b6:	d109      	bne.n	80088cc <__libc_init_array+0x24>
 80088b8:	4e0b      	ldr	r6, [pc, #44]	; (80088e8 <__libc_init_array+0x40>)
 80088ba:	4c0c      	ldr	r4, [pc, #48]	; (80088ec <__libc_init_array+0x44>)
 80088bc:	f001 fc9e 	bl	800a1fc <_init>
 80088c0:	1ba4      	subs	r4, r4, r6
 80088c2:	10a4      	asrs	r4, r4, #2
 80088c4:	2500      	movs	r5, #0
 80088c6:	42a5      	cmp	r5, r4
 80088c8:	d105      	bne.n	80088d6 <__libc_init_array+0x2e>
 80088ca:	bd70      	pop	{r4, r5, r6, pc}
 80088cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088d0:	4798      	blx	r3
 80088d2:	3501      	adds	r5, #1
 80088d4:	e7ee      	b.n	80088b4 <__libc_init_array+0xc>
 80088d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80088da:	4798      	blx	r3
 80088dc:	3501      	adds	r5, #1
 80088de:	e7f2      	b.n	80088c6 <__libc_init_array+0x1e>
 80088e0:	0800a4a8 	.word	0x0800a4a8
 80088e4:	0800a4a8 	.word	0x0800a4a8
 80088e8:	0800a4a8 	.word	0x0800a4a8
 80088ec:	0800a4ac 	.word	0x0800a4ac

080088f0 <__itoa>:
 80088f0:	1e93      	subs	r3, r2, #2
 80088f2:	2b22      	cmp	r3, #34	; 0x22
 80088f4:	b510      	push	{r4, lr}
 80088f6:	460c      	mov	r4, r1
 80088f8:	d904      	bls.n	8008904 <__itoa+0x14>
 80088fa:	2300      	movs	r3, #0
 80088fc:	700b      	strb	r3, [r1, #0]
 80088fe:	461c      	mov	r4, r3
 8008900:	4620      	mov	r0, r4
 8008902:	bd10      	pop	{r4, pc}
 8008904:	2a0a      	cmp	r2, #10
 8008906:	d109      	bne.n	800891c <__itoa+0x2c>
 8008908:	2800      	cmp	r0, #0
 800890a:	da07      	bge.n	800891c <__itoa+0x2c>
 800890c:	232d      	movs	r3, #45	; 0x2d
 800890e:	700b      	strb	r3, [r1, #0]
 8008910:	4240      	negs	r0, r0
 8008912:	2101      	movs	r1, #1
 8008914:	4421      	add	r1, r4
 8008916:	f000 f83d 	bl	8008994 <__utoa>
 800891a:	e7f1      	b.n	8008900 <__itoa+0x10>
 800891c:	2100      	movs	r1, #0
 800891e:	e7f9      	b.n	8008914 <__itoa+0x24>

08008920 <itoa>:
 8008920:	f7ff bfe6 	b.w	80088f0 <__itoa>

08008924 <memset>:
 8008924:	4402      	add	r2, r0
 8008926:	4603      	mov	r3, r0
 8008928:	4293      	cmp	r3, r2
 800892a:	d100      	bne.n	800892e <memset+0xa>
 800892c:	4770      	bx	lr
 800892e:	f803 1b01 	strb.w	r1, [r3], #1
 8008932:	e7f9      	b.n	8008928 <memset+0x4>

08008934 <siprintf>:
 8008934:	b40e      	push	{r1, r2, r3}
 8008936:	b500      	push	{lr}
 8008938:	b09c      	sub	sp, #112	; 0x70
 800893a:	ab1d      	add	r3, sp, #116	; 0x74
 800893c:	9002      	str	r0, [sp, #8]
 800893e:	9006      	str	r0, [sp, #24]
 8008940:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008944:	4809      	ldr	r0, [pc, #36]	; (800896c <siprintf+0x38>)
 8008946:	9107      	str	r1, [sp, #28]
 8008948:	9104      	str	r1, [sp, #16]
 800894a:	4909      	ldr	r1, [pc, #36]	; (8008970 <siprintf+0x3c>)
 800894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008950:	9105      	str	r1, [sp, #20]
 8008952:	6800      	ldr	r0, [r0, #0]
 8008954:	9301      	str	r3, [sp, #4]
 8008956:	a902      	add	r1, sp, #8
 8008958:	f000 f8b4 	bl	8008ac4 <_svfiprintf_r>
 800895c:	9b02      	ldr	r3, [sp, #8]
 800895e:	2200      	movs	r2, #0
 8008960:	701a      	strb	r2, [r3, #0]
 8008962:	b01c      	add	sp, #112	; 0x70
 8008964:	f85d eb04 	ldr.w	lr, [sp], #4
 8008968:	b003      	add	sp, #12
 800896a:	4770      	bx	lr
 800896c:	2000000c 	.word	0x2000000c
 8008970:	ffff0208 	.word	0xffff0208

08008974 <strcat>:
 8008974:	b510      	push	{r4, lr}
 8008976:	4603      	mov	r3, r0
 8008978:	781a      	ldrb	r2, [r3, #0]
 800897a:	1c5c      	adds	r4, r3, #1
 800897c:	b93a      	cbnz	r2, 800898e <strcat+0x1a>
 800897e:	3b01      	subs	r3, #1
 8008980:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008984:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008988:	2a00      	cmp	r2, #0
 800898a:	d1f9      	bne.n	8008980 <strcat+0xc>
 800898c:	bd10      	pop	{r4, pc}
 800898e:	4623      	mov	r3, r4
 8008990:	e7f2      	b.n	8008978 <strcat+0x4>
	...

08008994 <__utoa>:
 8008994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008996:	4b1d      	ldr	r3, [pc, #116]	; (8008a0c <__utoa+0x78>)
 8008998:	b08b      	sub	sp, #44	; 0x2c
 800899a:	4605      	mov	r5, r0
 800899c:	460c      	mov	r4, r1
 800899e:	466e      	mov	r6, sp
 80089a0:	f103 0c20 	add.w	ip, r3, #32
 80089a4:	6818      	ldr	r0, [r3, #0]
 80089a6:	6859      	ldr	r1, [r3, #4]
 80089a8:	4637      	mov	r7, r6
 80089aa:	c703      	stmia	r7!, {r0, r1}
 80089ac:	3308      	adds	r3, #8
 80089ae:	4563      	cmp	r3, ip
 80089b0:	463e      	mov	r6, r7
 80089b2:	d1f7      	bne.n	80089a4 <__utoa+0x10>
 80089b4:	6818      	ldr	r0, [r3, #0]
 80089b6:	791b      	ldrb	r3, [r3, #4]
 80089b8:	713b      	strb	r3, [r7, #4]
 80089ba:	1e93      	subs	r3, r2, #2
 80089bc:	2b22      	cmp	r3, #34	; 0x22
 80089be:	6038      	str	r0, [r7, #0]
 80089c0:	f04f 0300 	mov.w	r3, #0
 80089c4:	d904      	bls.n	80089d0 <__utoa+0x3c>
 80089c6:	7023      	strb	r3, [r4, #0]
 80089c8:	461c      	mov	r4, r3
 80089ca:	4620      	mov	r0, r4
 80089cc:	b00b      	add	sp, #44	; 0x2c
 80089ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d0:	1e66      	subs	r6, r4, #1
 80089d2:	fbb5 f0f2 	udiv	r0, r5, r2
 80089d6:	af0a      	add	r7, sp, #40	; 0x28
 80089d8:	fb02 5510 	mls	r5, r2, r0, r5
 80089dc:	443d      	add	r5, r7
 80089de:	1c59      	adds	r1, r3, #1
 80089e0:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 80089e4:	f806 5f01 	strb.w	r5, [r6, #1]!
 80089e8:	4605      	mov	r5, r0
 80089ea:	b968      	cbnz	r0, 8008a08 <__utoa+0x74>
 80089ec:	5460      	strb	r0, [r4, r1]
 80089ee:	4423      	add	r3, r4
 80089f0:	4622      	mov	r2, r4
 80089f2:	1b19      	subs	r1, r3, r4
 80089f4:	1b10      	subs	r0, r2, r4
 80089f6:	4281      	cmp	r1, r0
 80089f8:	dde7      	ble.n	80089ca <__utoa+0x36>
 80089fa:	7811      	ldrb	r1, [r2, #0]
 80089fc:	7818      	ldrb	r0, [r3, #0]
 80089fe:	f802 0b01 	strb.w	r0, [r2], #1
 8008a02:	f803 1901 	strb.w	r1, [r3], #-1
 8008a06:	e7f4      	b.n	80089f2 <__utoa+0x5e>
 8008a08:	460b      	mov	r3, r1
 8008a0a:	e7e2      	b.n	80089d2 <__utoa+0x3e>
 8008a0c:	0800a26c 	.word	0x0800a26c

08008a10 <__ssputs_r>:
 8008a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a14:	688e      	ldr	r6, [r1, #8]
 8008a16:	429e      	cmp	r6, r3
 8008a18:	4682      	mov	sl, r0
 8008a1a:	460c      	mov	r4, r1
 8008a1c:	4690      	mov	r8, r2
 8008a1e:	4699      	mov	r9, r3
 8008a20:	d837      	bhi.n	8008a92 <__ssputs_r+0x82>
 8008a22:	898a      	ldrh	r2, [r1, #12]
 8008a24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008a28:	d031      	beq.n	8008a8e <__ssputs_r+0x7e>
 8008a2a:	6825      	ldr	r5, [r4, #0]
 8008a2c:	6909      	ldr	r1, [r1, #16]
 8008a2e:	1a6f      	subs	r7, r5, r1
 8008a30:	6965      	ldr	r5, [r4, #20]
 8008a32:	2302      	movs	r3, #2
 8008a34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008a38:	fb95 f5f3 	sdiv	r5, r5, r3
 8008a3c:	f109 0301 	add.w	r3, r9, #1
 8008a40:	443b      	add	r3, r7
 8008a42:	429d      	cmp	r5, r3
 8008a44:	bf38      	it	cc
 8008a46:	461d      	movcc	r5, r3
 8008a48:	0553      	lsls	r3, r2, #21
 8008a4a:	d530      	bpl.n	8008aae <__ssputs_r+0x9e>
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	f000 fb2b 	bl	80090a8 <_malloc_r>
 8008a52:	4606      	mov	r6, r0
 8008a54:	b950      	cbnz	r0, 8008a6c <__ssputs_r+0x5c>
 8008a56:	230c      	movs	r3, #12
 8008a58:	f8ca 3000 	str.w	r3, [sl]
 8008a5c:	89a3      	ldrh	r3, [r4, #12]
 8008a5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a62:	81a3      	strh	r3, [r4, #12]
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6c:	463a      	mov	r2, r7
 8008a6e:	6921      	ldr	r1, [r4, #16]
 8008a70:	f000 faa8 	bl	8008fc4 <memcpy>
 8008a74:	89a3      	ldrh	r3, [r4, #12]
 8008a76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a7e:	81a3      	strh	r3, [r4, #12]
 8008a80:	6126      	str	r6, [r4, #16]
 8008a82:	6165      	str	r5, [r4, #20]
 8008a84:	443e      	add	r6, r7
 8008a86:	1bed      	subs	r5, r5, r7
 8008a88:	6026      	str	r6, [r4, #0]
 8008a8a:	60a5      	str	r5, [r4, #8]
 8008a8c:	464e      	mov	r6, r9
 8008a8e:	454e      	cmp	r6, r9
 8008a90:	d900      	bls.n	8008a94 <__ssputs_r+0x84>
 8008a92:	464e      	mov	r6, r9
 8008a94:	4632      	mov	r2, r6
 8008a96:	4641      	mov	r1, r8
 8008a98:	6820      	ldr	r0, [r4, #0]
 8008a9a:	f000 fa9e 	bl	8008fda <memmove>
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	1b9b      	subs	r3, r3, r6
 8008aa2:	60a3      	str	r3, [r4, #8]
 8008aa4:	6823      	ldr	r3, [r4, #0]
 8008aa6:	441e      	add	r6, r3
 8008aa8:	6026      	str	r6, [r4, #0]
 8008aaa:	2000      	movs	r0, #0
 8008aac:	e7dc      	b.n	8008a68 <__ssputs_r+0x58>
 8008aae:	462a      	mov	r2, r5
 8008ab0:	f000 fb54 	bl	800915c <_realloc_r>
 8008ab4:	4606      	mov	r6, r0
 8008ab6:	2800      	cmp	r0, #0
 8008ab8:	d1e2      	bne.n	8008a80 <__ssputs_r+0x70>
 8008aba:	6921      	ldr	r1, [r4, #16]
 8008abc:	4650      	mov	r0, sl
 8008abe:	f000 faa5 	bl	800900c <_free_r>
 8008ac2:	e7c8      	b.n	8008a56 <__ssputs_r+0x46>

08008ac4 <_svfiprintf_r>:
 8008ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ac8:	461d      	mov	r5, r3
 8008aca:	898b      	ldrh	r3, [r1, #12]
 8008acc:	061f      	lsls	r7, r3, #24
 8008ace:	b09d      	sub	sp, #116	; 0x74
 8008ad0:	4680      	mov	r8, r0
 8008ad2:	460c      	mov	r4, r1
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	d50f      	bpl.n	8008af8 <_svfiprintf_r+0x34>
 8008ad8:	690b      	ldr	r3, [r1, #16]
 8008ada:	b96b      	cbnz	r3, 8008af8 <_svfiprintf_r+0x34>
 8008adc:	2140      	movs	r1, #64	; 0x40
 8008ade:	f000 fae3 	bl	80090a8 <_malloc_r>
 8008ae2:	6020      	str	r0, [r4, #0]
 8008ae4:	6120      	str	r0, [r4, #16]
 8008ae6:	b928      	cbnz	r0, 8008af4 <_svfiprintf_r+0x30>
 8008ae8:	230c      	movs	r3, #12
 8008aea:	f8c8 3000 	str.w	r3, [r8]
 8008aee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008af2:	e0c8      	b.n	8008c86 <_svfiprintf_r+0x1c2>
 8008af4:	2340      	movs	r3, #64	; 0x40
 8008af6:	6163      	str	r3, [r4, #20]
 8008af8:	2300      	movs	r3, #0
 8008afa:	9309      	str	r3, [sp, #36]	; 0x24
 8008afc:	2320      	movs	r3, #32
 8008afe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b02:	2330      	movs	r3, #48	; 0x30
 8008b04:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b08:	9503      	str	r5, [sp, #12]
 8008b0a:	f04f 0b01 	mov.w	fp, #1
 8008b0e:	4637      	mov	r7, r6
 8008b10:	463d      	mov	r5, r7
 8008b12:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008b16:	b10b      	cbz	r3, 8008b1c <_svfiprintf_r+0x58>
 8008b18:	2b25      	cmp	r3, #37	; 0x25
 8008b1a:	d13e      	bne.n	8008b9a <_svfiprintf_r+0xd6>
 8008b1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8008b20:	d00b      	beq.n	8008b3a <_svfiprintf_r+0x76>
 8008b22:	4653      	mov	r3, sl
 8008b24:	4632      	mov	r2, r6
 8008b26:	4621      	mov	r1, r4
 8008b28:	4640      	mov	r0, r8
 8008b2a:	f7ff ff71 	bl	8008a10 <__ssputs_r>
 8008b2e:	3001      	adds	r0, #1
 8008b30:	f000 80a4 	beq.w	8008c7c <_svfiprintf_r+0x1b8>
 8008b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b36:	4453      	add	r3, sl
 8008b38:	9309      	str	r3, [sp, #36]	; 0x24
 8008b3a:	783b      	ldrb	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	f000 809d 	beq.w	8008c7c <_svfiprintf_r+0x1b8>
 8008b42:	2300      	movs	r3, #0
 8008b44:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008b48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b4c:	9304      	str	r3, [sp, #16]
 8008b4e:	9307      	str	r3, [sp, #28]
 8008b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b54:	931a      	str	r3, [sp, #104]	; 0x68
 8008b56:	462f      	mov	r7, r5
 8008b58:	2205      	movs	r2, #5
 8008b5a:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008b5e:	4850      	ldr	r0, [pc, #320]	; (8008ca0 <_svfiprintf_r+0x1dc>)
 8008b60:	f7f7 fb3e 	bl	80001e0 <memchr>
 8008b64:	9b04      	ldr	r3, [sp, #16]
 8008b66:	b9d0      	cbnz	r0, 8008b9e <_svfiprintf_r+0xda>
 8008b68:	06d9      	lsls	r1, r3, #27
 8008b6a:	bf44      	itt	mi
 8008b6c:	2220      	movmi	r2, #32
 8008b6e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b72:	071a      	lsls	r2, r3, #28
 8008b74:	bf44      	itt	mi
 8008b76:	222b      	movmi	r2, #43	; 0x2b
 8008b78:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008b7c:	782a      	ldrb	r2, [r5, #0]
 8008b7e:	2a2a      	cmp	r2, #42	; 0x2a
 8008b80:	d015      	beq.n	8008bae <_svfiprintf_r+0xea>
 8008b82:	9a07      	ldr	r2, [sp, #28]
 8008b84:	462f      	mov	r7, r5
 8008b86:	2000      	movs	r0, #0
 8008b88:	250a      	movs	r5, #10
 8008b8a:	4639      	mov	r1, r7
 8008b8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b90:	3b30      	subs	r3, #48	; 0x30
 8008b92:	2b09      	cmp	r3, #9
 8008b94:	d94d      	bls.n	8008c32 <_svfiprintf_r+0x16e>
 8008b96:	b1b8      	cbz	r0, 8008bc8 <_svfiprintf_r+0x104>
 8008b98:	e00f      	b.n	8008bba <_svfiprintf_r+0xf6>
 8008b9a:	462f      	mov	r7, r5
 8008b9c:	e7b8      	b.n	8008b10 <_svfiprintf_r+0x4c>
 8008b9e:	4a40      	ldr	r2, [pc, #256]	; (8008ca0 <_svfiprintf_r+0x1dc>)
 8008ba0:	1a80      	subs	r0, r0, r2
 8008ba2:	fa0b f000 	lsl.w	r0, fp, r0
 8008ba6:	4318      	orrs	r0, r3
 8008ba8:	9004      	str	r0, [sp, #16]
 8008baa:	463d      	mov	r5, r7
 8008bac:	e7d3      	b.n	8008b56 <_svfiprintf_r+0x92>
 8008bae:	9a03      	ldr	r2, [sp, #12]
 8008bb0:	1d11      	adds	r1, r2, #4
 8008bb2:	6812      	ldr	r2, [r2, #0]
 8008bb4:	9103      	str	r1, [sp, #12]
 8008bb6:	2a00      	cmp	r2, #0
 8008bb8:	db01      	blt.n	8008bbe <_svfiprintf_r+0xfa>
 8008bba:	9207      	str	r2, [sp, #28]
 8008bbc:	e004      	b.n	8008bc8 <_svfiprintf_r+0x104>
 8008bbe:	4252      	negs	r2, r2
 8008bc0:	f043 0302 	orr.w	r3, r3, #2
 8008bc4:	9207      	str	r2, [sp, #28]
 8008bc6:	9304      	str	r3, [sp, #16]
 8008bc8:	783b      	ldrb	r3, [r7, #0]
 8008bca:	2b2e      	cmp	r3, #46	; 0x2e
 8008bcc:	d10c      	bne.n	8008be8 <_svfiprintf_r+0x124>
 8008bce:	787b      	ldrb	r3, [r7, #1]
 8008bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8008bd2:	d133      	bne.n	8008c3c <_svfiprintf_r+0x178>
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	1d1a      	adds	r2, r3, #4
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	9203      	str	r2, [sp, #12]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	bfb8      	it	lt
 8008be0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008be4:	3702      	adds	r7, #2
 8008be6:	9305      	str	r3, [sp, #20]
 8008be8:	4d2e      	ldr	r5, [pc, #184]	; (8008ca4 <_svfiprintf_r+0x1e0>)
 8008bea:	7839      	ldrb	r1, [r7, #0]
 8008bec:	2203      	movs	r2, #3
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f7f7 faf6 	bl	80001e0 <memchr>
 8008bf4:	b138      	cbz	r0, 8008c06 <_svfiprintf_r+0x142>
 8008bf6:	2340      	movs	r3, #64	; 0x40
 8008bf8:	1b40      	subs	r0, r0, r5
 8008bfa:	fa03 f000 	lsl.w	r0, r3, r0
 8008bfe:	9b04      	ldr	r3, [sp, #16]
 8008c00:	4303      	orrs	r3, r0
 8008c02:	3701      	adds	r7, #1
 8008c04:	9304      	str	r3, [sp, #16]
 8008c06:	7839      	ldrb	r1, [r7, #0]
 8008c08:	4827      	ldr	r0, [pc, #156]	; (8008ca8 <_svfiprintf_r+0x1e4>)
 8008c0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c0e:	2206      	movs	r2, #6
 8008c10:	1c7e      	adds	r6, r7, #1
 8008c12:	f7f7 fae5 	bl	80001e0 <memchr>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d038      	beq.n	8008c8c <_svfiprintf_r+0x1c8>
 8008c1a:	4b24      	ldr	r3, [pc, #144]	; (8008cac <_svfiprintf_r+0x1e8>)
 8008c1c:	bb13      	cbnz	r3, 8008c64 <_svfiprintf_r+0x1a0>
 8008c1e:	9b03      	ldr	r3, [sp, #12]
 8008c20:	3307      	adds	r3, #7
 8008c22:	f023 0307 	bic.w	r3, r3, #7
 8008c26:	3308      	adds	r3, #8
 8008c28:	9303      	str	r3, [sp, #12]
 8008c2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c2c:	444b      	add	r3, r9
 8008c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c30:	e76d      	b.n	8008b0e <_svfiprintf_r+0x4a>
 8008c32:	fb05 3202 	mla	r2, r5, r2, r3
 8008c36:	2001      	movs	r0, #1
 8008c38:	460f      	mov	r7, r1
 8008c3a:	e7a6      	b.n	8008b8a <_svfiprintf_r+0xc6>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	3701      	adds	r7, #1
 8008c40:	9305      	str	r3, [sp, #20]
 8008c42:	4619      	mov	r1, r3
 8008c44:	250a      	movs	r5, #10
 8008c46:	4638      	mov	r0, r7
 8008c48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c4c:	3a30      	subs	r2, #48	; 0x30
 8008c4e:	2a09      	cmp	r2, #9
 8008c50:	d903      	bls.n	8008c5a <_svfiprintf_r+0x196>
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d0c8      	beq.n	8008be8 <_svfiprintf_r+0x124>
 8008c56:	9105      	str	r1, [sp, #20]
 8008c58:	e7c6      	b.n	8008be8 <_svfiprintf_r+0x124>
 8008c5a:	fb05 2101 	mla	r1, r5, r1, r2
 8008c5e:	2301      	movs	r3, #1
 8008c60:	4607      	mov	r7, r0
 8008c62:	e7f0      	b.n	8008c46 <_svfiprintf_r+0x182>
 8008c64:	ab03      	add	r3, sp, #12
 8008c66:	9300      	str	r3, [sp, #0]
 8008c68:	4622      	mov	r2, r4
 8008c6a:	4b11      	ldr	r3, [pc, #68]	; (8008cb0 <_svfiprintf_r+0x1ec>)
 8008c6c:	a904      	add	r1, sp, #16
 8008c6e:	4640      	mov	r0, r8
 8008c70:	f3af 8000 	nop.w
 8008c74:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008c78:	4681      	mov	r9, r0
 8008c7a:	d1d6      	bne.n	8008c2a <_svfiprintf_r+0x166>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	065b      	lsls	r3, r3, #25
 8008c80:	f53f af35 	bmi.w	8008aee <_svfiprintf_r+0x2a>
 8008c84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008c86:	b01d      	add	sp, #116	; 0x74
 8008c88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c8c:	ab03      	add	r3, sp, #12
 8008c8e:	9300      	str	r3, [sp, #0]
 8008c90:	4622      	mov	r2, r4
 8008c92:	4b07      	ldr	r3, [pc, #28]	; (8008cb0 <_svfiprintf_r+0x1ec>)
 8008c94:	a904      	add	r1, sp, #16
 8008c96:	4640      	mov	r0, r8
 8008c98:	f000 f882 	bl	8008da0 <_printf_i>
 8008c9c:	e7ea      	b.n	8008c74 <_svfiprintf_r+0x1b0>
 8008c9e:	bf00      	nop
 8008ca0:	0800a291 	.word	0x0800a291
 8008ca4:	0800a297 	.word	0x0800a297
 8008ca8:	0800a29b 	.word	0x0800a29b
 8008cac:	00000000 	.word	0x00000000
 8008cb0:	08008a11 	.word	0x08008a11

08008cb4 <_printf_common>:
 8008cb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb8:	4691      	mov	r9, r2
 8008cba:	461f      	mov	r7, r3
 8008cbc:	688a      	ldr	r2, [r1, #8]
 8008cbe:	690b      	ldr	r3, [r1, #16]
 8008cc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	bfb8      	it	lt
 8008cc8:	4613      	movlt	r3, r2
 8008cca:	f8c9 3000 	str.w	r3, [r9]
 8008cce:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	b112      	cbz	r2, 8008cde <_printf_common+0x2a>
 8008cd8:	3301      	adds	r3, #1
 8008cda:	f8c9 3000 	str.w	r3, [r9]
 8008cde:	6823      	ldr	r3, [r4, #0]
 8008ce0:	0699      	lsls	r1, r3, #26
 8008ce2:	bf42      	ittt	mi
 8008ce4:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008ce8:	3302      	addmi	r3, #2
 8008cea:	f8c9 3000 	strmi.w	r3, [r9]
 8008cee:	6825      	ldr	r5, [r4, #0]
 8008cf0:	f015 0506 	ands.w	r5, r5, #6
 8008cf4:	d107      	bne.n	8008d06 <_printf_common+0x52>
 8008cf6:	f104 0a19 	add.w	sl, r4, #25
 8008cfa:	68e3      	ldr	r3, [r4, #12]
 8008cfc:	f8d9 2000 	ldr.w	r2, [r9]
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	42ab      	cmp	r3, r5
 8008d04:	dc28      	bgt.n	8008d58 <_printf_common+0xa4>
 8008d06:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d0a:	6822      	ldr	r2, [r4, #0]
 8008d0c:	3300      	adds	r3, #0
 8008d0e:	bf18      	it	ne
 8008d10:	2301      	movne	r3, #1
 8008d12:	0692      	lsls	r2, r2, #26
 8008d14:	d42d      	bmi.n	8008d72 <_printf_common+0xbe>
 8008d16:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d1a:	4639      	mov	r1, r7
 8008d1c:	4630      	mov	r0, r6
 8008d1e:	47c0      	blx	r8
 8008d20:	3001      	adds	r0, #1
 8008d22:	d020      	beq.n	8008d66 <_printf_common+0xb2>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	68e5      	ldr	r5, [r4, #12]
 8008d28:	f8d9 2000 	ldr.w	r2, [r9]
 8008d2c:	f003 0306 	and.w	r3, r3, #6
 8008d30:	2b04      	cmp	r3, #4
 8008d32:	bf08      	it	eq
 8008d34:	1aad      	subeq	r5, r5, r2
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	6922      	ldr	r2, [r4, #16]
 8008d3a:	bf0c      	ite	eq
 8008d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d40:	2500      	movne	r5, #0
 8008d42:	4293      	cmp	r3, r2
 8008d44:	bfc4      	itt	gt
 8008d46:	1a9b      	subgt	r3, r3, r2
 8008d48:	18ed      	addgt	r5, r5, r3
 8008d4a:	f04f 0900 	mov.w	r9, #0
 8008d4e:	341a      	adds	r4, #26
 8008d50:	454d      	cmp	r5, r9
 8008d52:	d11a      	bne.n	8008d8a <_printf_common+0xd6>
 8008d54:	2000      	movs	r0, #0
 8008d56:	e008      	b.n	8008d6a <_printf_common+0xb6>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	4652      	mov	r2, sl
 8008d5c:	4639      	mov	r1, r7
 8008d5e:	4630      	mov	r0, r6
 8008d60:	47c0      	blx	r8
 8008d62:	3001      	adds	r0, #1
 8008d64:	d103      	bne.n	8008d6e <_printf_common+0xba>
 8008d66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d6e:	3501      	adds	r5, #1
 8008d70:	e7c3      	b.n	8008cfa <_printf_common+0x46>
 8008d72:	18e1      	adds	r1, r4, r3
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	2030      	movs	r0, #48	; 0x30
 8008d78:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d7c:	4422      	add	r2, r4
 8008d7e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d82:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d86:	3302      	adds	r3, #2
 8008d88:	e7c5      	b.n	8008d16 <_printf_common+0x62>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	4622      	mov	r2, r4
 8008d8e:	4639      	mov	r1, r7
 8008d90:	4630      	mov	r0, r6
 8008d92:	47c0      	blx	r8
 8008d94:	3001      	adds	r0, #1
 8008d96:	d0e6      	beq.n	8008d66 <_printf_common+0xb2>
 8008d98:	f109 0901 	add.w	r9, r9, #1
 8008d9c:	e7d8      	b.n	8008d50 <_printf_common+0x9c>
	...

08008da0 <_printf_i>:
 8008da0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008da4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008da8:	460c      	mov	r4, r1
 8008daa:	7e09      	ldrb	r1, [r1, #24]
 8008dac:	b085      	sub	sp, #20
 8008dae:	296e      	cmp	r1, #110	; 0x6e
 8008db0:	4617      	mov	r7, r2
 8008db2:	4606      	mov	r6, r0
 8008db4:	4698      	mov	r8, r3
 8008db6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008db8:	f000 80b3 	beq.w	8008f22 <_printf_i+0x182>
 8008dbc:	d822      	bhi.n	8008e04 <_printf_i+0x64>
 8008dbe:	2963      	cmp	r1, #99	; 0x63
 8008dc0:	d036      	beq.n	8008e30 <_printf_i+0x90>
 8008dc2:	d80a      	bhi.n	8008dda <_printf_i+0x3a>
 8008dc4:	2900      	cmp	r1, #0
 8008dc6:	f000 80b9 	beq.w	8008f3c <_printf_i+0x19c>
 8008dca:	2958      	cmp	r1, #88	; 0x58
 8008dcc:	f000 8083 	beq.w	8008ed6 <_printf_i+0x136>
 8008dd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008dd4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008dd8:	e032      	b.n	8008e40 <_printf_i+0xa0>
 8008dda:	2964      	cmp	r1, #100	; 0x64
 8008ddc:	d001      	beq.n	8008de2 <_printf_i+0x42>
 8008dde:	2969      	cmp	r1, #105	; 0x69
 8008de0:	d1f6      	bne.n	8008dd0 <_printf_i+0x30>
 8008de2:	6820      	ldr	r0, [r4, #0]
 8008de4:	6813      	ldr	r3, [r2, #0]
 8008de6:	0605      	lsls	r5, r0, #24
 8008de8:	f103 0104 	add.w	r1, r3, #4
 8008dec:	d52a      	bpl.n	8008e44 <_printf_i+0xa4>
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6011      	str	r1, [r2, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	da03      	bge.n	8008dfe <_printf_i+0x5e>
 8008df6:	222d      	movs	r2, #45	; 0x2d
 8008df8:	425b      	negs	r3, r3
 8008dfa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008dfe:	486f      	ldr	r0, [pc, #444]	; (8008fbc <_printf_i+0x21c>)
 8008e00:	220a      	movs	r2, #10
 8008e02:	e039      	b.n	8008e78 <_printf_i+0xd8>
 8008e04:	2973      	cmp	r1, #115	; 0x73
 8008e06:	f000 809d 	beq.w	8008f44 <_printf_i+0x1a4>
 8008e0a:	d808      	bhi.n	8008e1e <_printf_i+0x7e>
 8008e0c:	296f      	cmp	r1, #111	; 0x6f
 8008e0e:	d020      	beq.n	8008e52 <_printf_i+0xb2>
 8008e10:	2970      	cmp	r1, #112	; 0x70
 8008e12:	d1dd      	bne.n	8008dd0 <_printf_i+0x30>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	f043 0320 	orr.w	r3, r3, #32
 8008e1a:	6023      	str	r3, [r4, #0]
 8008e1c:	e003      	b.n	8008e26 <_printf_i+0x86>
 8008e1e:	2975      	cmp	r1, #117	; 0x75
 8008e20:	d017      	beq.n	8008e52 <_printf_i+0xb2>
 8008e22:	2978      	cmp	r1, #120	; 0x78
 8008e24:	d1d4      	bne.n	8008dd0 <_printf_i+0x30>
 8008e26:	2378      	movs	r3, #120	; 0x78
 8008e28:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e2c:	4864      	ldr	r0, [pc, #400]	; (8008fc0 <_printf_i+0x220>)
 8008e2e:	e055      	b.n	8008edc <_printf_i+0x13c>
 8008e30:	6813      	ldr	r3, [r2, #0]
 8008e32:	1d19      	adds	r1, r3, #4
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6011      	str	r1, [r2, #0]
 8008e38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e40:	2301      	movs	r3, #1
 8008e42:	e08c      	b.n	8008f5e <_printf_i+0x1be>
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	6011      	str	r1, [r2, #0]
 8008e48:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e4c:	bf18      	it	ne
 8008e4e:	b21b      	sxthne	r3, r3
 8008e50:	e7cf      	b.n	8008df2 <_printf_i+0x52>
 8008e52:	6813      	ldr	r3, [r2, #0]
 8008e54:	6825      	ldr	r5, [r4, #0]
 8008e56:	1d18      	adds	r0, r3, #4
 8008e58:	6010      	str	r0, [r2, #0]
 8008e5a:	0628      	lsls	r0, r5, #24
 8008e5c:	d501      	bpl.n	8008e62 <_printf_i+0xc2>
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	e002      	b.n	8008e68 <_printf_i+0xc8>
 8008e62:	0668      	lsls	r0, r5, #25
 8008e64:	d5fb      	bpl.n	8008e5e <_printf_i+0xbe>
 8008e66:	881b      	ldrh	r3, [r3, #0]
 8008e68:	4854      	ldr	r0, [pc, #336]	; (8008fbc <_printf_i+0x21c>)
 8008e6a:	296f      	cmp	r1, #111	; 0x6f
 8008e6c:	bf14      	ite	ne
 8008e6e:	220a      	movne	r2, #10
 8008e70:	2208      	moveq	r2, #8
 8008e72:	2100      	movs	r1, #0
 8008e74:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e78:	6865      	ldr	r5, [r4, #4]
 8008e7a:	60a5      	str	r5, [r4, #8]
 8008e7c:	2d00      	cmp	r5, #0
 8008e7e:	f2c0 8095 	blt.w	8008fac <_printf_i+0x20c>
 8008e82:	6821      	ldr	r1, [r4, #0]
 8008e84:	f021 0104 	bic.w	r1, r1, #4
 8008e88:	6021      	str	r1, [r4, #0]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d13d      	bne.n	8008f0a <_printf_i+0x16a>
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	f040 808e 	bne.w	8008fb0 <_printf_i+0x210>
 8008e94:	4665      	mov	r5, ip
 8008e96:	2a08      	cmp	r2, #8
 8008e98:	d10b      	bne.n	8008eb2 <_printf_i+0x112>
 8008e9a:	6823      	ldr	r3, [r4, #0]
 8008e9c:	07db      	lsls	r3, r3, #31
 8008e9e:	d508      	bpl.n	8008eb2 <_printf_i+0x112>
 8008ea0:	6923      	ldr	r3, [r4, #16]
 8008ea2:	6862      	ldr	r2, [r4, #4]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	bfde      	ittt	le
 8008ea8:	2330      	movle	r3, #48	; 0x30
 8008eaa:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008eae:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008eb2:	ebac 0305 	sub.w	r3, ip, r5
 8008eb6:	6123      	str	r3, [r4, #16]
 8008eb8:	f8cd 8000 	str.w	r8, [sp]
 8008ebc:	463b      	mov	r3, r7
 8008ebe:	aa03      	add	r2, sp, #12
 8008ec0:	4621      	mov	r1, r4
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	f7ff fef6 	bl	8008cb4 <_printf_common>
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d14d      	bne.n	8008f68 <_printf_i+0x1c8>
 8008ecc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ed0:	b005      	add	sp, #20
 8008ed2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ed6:	4839      	ldr	r0, [pc, #228]	; (8008fbc <_printf_i+0x21c>)
 8008ed8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008edc:	6813      	ldr	r3, [r2, #0]
 8008ede:	6821      	ldr	r1, [r4, #0]
 8008ee0:	1d1d      	adds	r5, r3, #4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	6015      	str	r5, [r2, #0]
 8008ee6:	060a      	lsls	r2, r1, #24
 8008ee8:	d50b      	bpl.n	8008f02 <_printf_i+0x162>
 8008eea:	07ca      	lsls	r2, r1, #31
 8008eec:	bf44      	itt	mi
 8008eee:	f041 0120 	orrmi.w	r1, r1, #32
 8008ef2:	6021      	strmi	r1, [r4, #0]
 8008ef4:	b91b      	cbnz	r3, 8008efe <_printf_i+0x15e>
 8008ef6:	6822      	ldr	r2, [r4, #0]
 8008ef8:	f022 0220 	bic.w	r2, r2, #32
 8008efc:	6022      	str	r2, [r4, #0]
 8008efe:	2210      	movs	r2, #16
 8008f00:	e7b7      	b.n	8008e72 <_printf_i+0xd2>
 8008f02:	064d      	lsls	r5, r1, #25
 8008f04:	bf48      	it	mi
 8008f06:	b29b      	uxthmi	r3, r3
 8008f08:	e7ef      	b.n	8008eea <_printf_i+0x14a>
 8008f0a:	4665      	mov	r5, ip
 8008f0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f10:	fb02 3311 	mls	r3, r2, r1, r3
 8008f14:	5cc3      	ldrb	r3, [r0, r3]
 8008f16:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f1a:	460b      	mov	r3, r1
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	d1f5      	bne.n	8008f0c <_printf_i+0x16c>
 8008f20:	e7b9      	b.n	8008e96 <_printf_i+0xf6>
 8008f22:	6813      	ldr	r3, [r2, #0]
 8008f24:	6825      	ldr	r5, [r4, #0]
 8008f26:	6961      	ldr	r1, [r4, #20]
 8008f28:	1d18      	adds	r0, r3, #4
 8008f2a:	6010      	str	r0, [r2, #0]
 8008f2c:	0628      	lsls	r0, r5, #24
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	d501      	bpl.n	8008f36 <_printf_i+0x196>
 8008f32:	6019      	str	r1, [r3, #0]
 8008f34:	e002      	b.n	8008f3c <_printf_i+0x19c>
 8008f36:	066a      	lsls	r2, r5, #25
 8008f38:	d5fb      	bpl.n	8008f32 <_printf_i+0x192>
 8008f3a:	8019      	strh	r1, [r3, #0]
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	6123      	str	r3, [r4, #16]
 8008f40:	4665      	mov	r5, ip
 8008f42:	e7b9      	b.n	8008eb8 <_printf_i+0x118>
 8008f44:	6813      	ldr	r3, [r2, #0]
 8008f46:	1d19      	adds	r1, r3, #4
 8008f48:	6011      	str	r1, [r2, #0]
 8008f4a:	681d      	ldr	r5, [r3, #0]
 8008f4c:	6862      	ldr	r2, [r4, #4]
 8008f4e:	2100      	movs	r1, #0
 8008f50:	4628      	mov	r0, r5
 8008f52:	f7f7 f945 	bl	80001e0 <memchr>
 8008f56:	b108      	cbz	r0, 8008f5c <_printf_i+0x1bc>
 8008f58:	1b40      	subs	r0, r0, r5
 8008f5a:	6060      	str	r0, [r4, #4]
 8008f5c:	6863      	ldr	r3, [r4, #4]
 8008f5e:	6123      	str	r3, [r4, #16]
 8008f60:	2300      	movs	r3, #0
 8008f62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f66:	e7a7      	b.n	8008eb8 <_printf_i+0x118>
 8008f68:	6923      	ldr	r3, [r4, #16]
 8008f6a:	462a      	mov	r2, r5
 8008f6c:	4639      	mov	r1, r7
 8008f6e:	4630      	mov	r0, r6
 8008f70:	47c0      	blx	r8
 8008f72:	3001      	adds	r0, #1
 8008f74:	d0aa      	beq.n	8008ecc <_printf_i+0x12c>
 8008f76:	6823      	ldr	r3, [r4, #0]
 8008f78:	079b      	lsls	r3, r3, #30
 8008f7a:	d413      	bmi.n	8008fa4 <_printf_i+0x204>
 8008f7c:	68e0      	ldr	r0, [r4, #12]
 8008f7e:	9b03      	ldr	r3, [sp, #12]
 8008f80:	4298      	cmp	r0, r3
 8008f82:	bfb8      	it	lt
 8008f84:	4618      	movlt	r0, r3
 8008f86:	e7a3      	b.n	8008ed0 <_printf_i+0x130>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	464a      	mov	r2, r9
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	4630      	mov	r0, r6
 8008f90:	47c0      	blx	r8
 8008f92:	3001      	adds	r0, #1
 8008f94:	d09a      	beq.n	8008ecc <_printf_i+0x12c>
 8008f96:	3501      	adds	r5, #1
 8008f98:	68e3      	ldr	r3, [r4, #12]
 8008f9a:	9a03      	ldr	r2, [sp, #12]
 8008f9c:	1a9b      	subs	r3, r3, r2
 8008f9e:	42ab      	cmp	r3, r5
 8008fa0:	dcf2      	bgt.n	8008f88 <_printf_i+0x1e8>
 8008fa2:	e7eb      	b.n	8008f7c <_printf_i+0x1dc>
 8008fa4:	2500      	movs	r5, #0
 8008fa6:	f104 0919 	add.w	r9, r4, #25
 8008faa:	e7f5      	b.n	8008f98 <_printf_i+0x1f8>
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1ac      	bne.n	8008f0a <_printf_i+0x16a>
 8008fb0:	7803      	ldrb	r3, [r0, #0]
 8008fb2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fb6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fba:	e76c      	b.n	8008e96 <_printf_i+0xf6>
 8008fbc:	0800a2a2 	.word	0x0800a2a2
 8008fc0:	0800a2b3 	.word	0x0800a2b3

08008fc4 <memcpy>:
 8008fc4:	b510      	push	{r4, lr}
 8008fc6:	1e43      	subs	r3, r0, #1
 8008fc8:	440a      	add	r2, r1
 8008fca:	4291      	cmp	r1, r2
 8008fcc:	d100      	bne.n	8008fd0 <memcpy+0xc>
 8008fce:	bd10      	pop	{r4, pc}
 8008fd0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fd4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fd8:	e7f7      	b.n	8008fca <memcpy+0x6>

08008fda <memmove>:
 8008fda:	4288      	cmp	r0, r1
 8008fdc:	b510      	push	{r4, lr}
 8008fde:	eb01 0302 	add.w	r3, r1, r2
 8008fe2:	d807      	bhi.n	8008ff4 <memmove+0x1a>
 8008fe4:	1e42      	subs	r2, r0, #1
 8008fe6:	4299      	cmp	r1, r3
 8008fe8:	d00a      	beq.n	8009000 <memmove+0x26>
 8008fea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fee:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008ff2:	e7f8      	b.n	8008fe6 <memmove+0xc>
 8008ff4:	4283      	cmp	r3, r0
 8008ff6:	d9f5      	bls.n	8008fe4 <memmove+0xa>
 8008ff8:	1881      	adds	r1, r0, r2
 8008ffa:	1ad2      	subs	r2, r2, r3
 8008ffc:	42d3      	cmn	r3, r2
 8008ffe:	d100      	bne.n	8009002 <memmove+0x28>
 8009000:	bd10      	pop	{r4, pc}
 8009002:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009006:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800900a:	e7f7      	b.n	8008ffc <memmove+0x22>

0800900c <_free_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4605      	mov	r5, r0
 8009010:	2900      	cmp	r1, #0
 8009012:	d045      	beq.n	80090a0 <_free_r+0x94>
 8009014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009018:	1f0c      	subs	r4, r1, #4
 800901a:	2b00      	cmp	r3, #0
 800901c:	bfb8      	it	lt
 800901e:	18e4      	addlt	r4, r4, r3
 8009020:	f000 f8d2 	bl	80091c8 <__malloc_lock>
 8009024:	4a1f      	ldr	r2, [pc, #124]	; (80090a4 <_free_r+0x98>)
 8009026:	6813      	ldr	r3, [r2, #0]
 8009028:	4610      	mov	r0, r2
 800902a:	b933      	cbnz	r3, 800903a <_free_r+0x2e>
 800902c:	6063      	str	r3, [r4, #4]
 800902e:	6014      	str	r4, [r2, #0]
 8009030:	4628      	mov	r0, r5
 8009032:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009036:	f000 b8c8 	b.w	80091ca <__malloc_unlock>
 800903a:	42a3      	cmp	r3, r4
 800903c:	d90c      	bls.n	8009058 <_free_r+0x4c>
 800903e:	6821      	ldr	r1, [r4, #0]
 8009040:	1862      	adds	r2, r4, r1
 8009042:	4293      	cmp	r3, r2
 8009044:	bf04      	itt	eq
 8009046:	681a      	ldreq	r2, [r3, #0]
 8009048:	685b      	ldreq	r3, [r3, #4]
 800904a:	6063      	str	r3, [r4, #4]
 800904c:	bf04      	itt	eq
 800904e:	1852      	addeq	r2, r2, r1
 8009050:	6022      	streq	r2, [r4, #0]
 8009052:	6004      	str	r4, [r0, #0]
 8009054:	e7ec      	b.n	8009030 <_free_r+0x24>
 8009056:	4613      	mov	r3, r2
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	b10a      	cbz	r2, 8009060 <_free_r+0x54>
 800905c:	42a2      	cmp	r2, r4
 800905e:	d9fa      	bls.n	8009056 <_free_r+0x4a>
 8009060:	6819      	ldr	r1, [r3, #0]
 8009062:	1858      	adds	r0, r3, r1
 8009064:	42a0      	cmp	r0, r4
 8009066:	d10b      	bne.n	8009080 <_free_r+0x74>
 8009068:	6820      	ldr	r0, [r4, #0]
 800906a:	4401      	add	r1, r0
 800906c:	1858      	adds	r0, r3, r1
 800906e:	4282      	cmp	r2, r0
 8009070:	6019      	str	r1, [r3, #0]
 8009072:	d1dd      	bne.n	8009030 <_free_r+0x24>
 8009074:	6810      	ldr	r0, [r2, #0]
 8009076:	6852      	ldr	r2, [r2, #4]
 8009078:	605a      	str	r2, [r3, #4]
 800907a:	4401      	add	r1, r0
 800907c:	6019      	str	r1, [r3, #0]
 800907e:	e7d7      	b.n	8009030 <_free_r+0x24>
 8009080:	d902      	bls.n	8009088 <_free_r+0x7c>
 8009082:	230c      	movs	r3, #12
 8009084:	602b      	str	r3, [r5, #0]
 8009086:	e7d3      	b.n	8009030 <_free_r+0x24>
 8009088:	6820      	ldr	r0, [r4, #0]
 800908a:	1821      	adds	r1, r4, r0
 800908c:	428a      	cmp	r2, r1
 800908e:	bf04      	itt	eq
 8009090:	6811      	ldreq	r1, [r2, #0]
 8009092:	6852      	ldreq	r2, [r2, #4]
 8009094:	6062      	str	r2, [r4, #4]
 8009096:	bf04      	itt	eq
 8009098:	1809      	addeq	r1, r1, r0
 800909a:	6021      	streq	r1, [r4, #0]
 800909c:	605c      	str	r4, [r3, #4]
 800909e:	e7c7      	b.n	8009030 <_free_r+0x24>
 80090a0:	bd38      	pop	{r3, r4, r5, pc}
 80090a2:	bf00      	nop
 80090a4:	20000090 	.word	0x20000090

080090a8 <_malloc_r>:
 80090a8:	b570      	push	{r4, r5, r6, lr}
 80090aa:	1ccd      	adds	r5, r1, #3
 80090ac:	f025 0503 	bic.w	r5, r5, #3
 80090b0:	3508      	adds	r5, #8
 80090b2:	2d0c      	cmp	r5, #12
 80090b4:	bf38      	it	cc
 80090b6:	250c      	movcc	r5, #12
 80090b8:	2d00      	cmp	r5, #0
 80090ba:	4606      	mov	r6, r0
 80090bc:	db01      	blt.n	80090c2 <_malloc_r+0x1a>
 80090be:	42a9      	cmp	r1, r5
 80090c0:	d903      	bls.n	80090ca <_malloc_r+0x22>
 80090c2:	230c      	movs	r3, #12
 80090c4:	6033      	str	r3, [r6, #0]
 80090c6:	2000      	movs	r0, #0
 80090c8:	bd70      	pop	{r4, r5, r6, pc}
 80090ca:	f000 f87d 	bl	80091c8 <__malloc_lock>
 80090ce:	4a21      	ldr	r2, [pc, #132]	; (8009154 <_malloc_r+0xac>)
 80090d0:	6814      	ldr	r4, [r2, #0]
 80090d2:	4621      	mov	r1, r4
 80090d4:	b991      	cbnz	r1, 80090fc <_malloc_r+0x54>
 80090d6:	4c20      	ldr	r4, [pc, #128]	; (8009158 <_malloc_r+0xb0>)
 80090d8:	6823      	ldr	r3, [r4, #0]
 80090da:	b91b      	cbnz	r3, 80090e4 <_malloc_r+0x3c>
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 f863 	bl	80091a8 <_sbrk_r>
 80090e2:	6020      	str	r0, [r4, #0]
 80090e4:	4629      	mov	r1, r5
 80090e6:	4630      	mov	r0, r6
 80090e8:	f000 f85e 	bl	80091a8 <_sbrk_r>
 80090ec:	1c43      	adds	r3, r0, #1
 80090ee:	d124      	bne.n	800913a <_malloc_r+0x92>
 80090f0:	230c      	movs	r3, #12
 80090f2:	6033      	str	r3, [r6, #0]
 80090f4:	4630      	mov	r0, r6
 80090f6:	f000 f868 	bl	80091ca <__malloc_unlock>
 80090fa:	e7e4      	b.n	80090c6 <_malloc_r+0x1e>
 80090fc:	680b      	ldr	r3, [r1, #0]
 80090fe:	1b5b      	subs	r3, r3, r5
 8009100:	d418      	bmi.n	8009134 <_malloc_r+0x8c>
 8009102:	2b0b      	cmp	r3, #11
 8009104:	d90f      	bls.n	8009126 <_malloc_r+0x7e>
 8009106:	600b      	str	r3, [r1, #0]
 8009108:	50cd      	str	r5, [r1, r3]
 800910a:	18cc      	adds	r4, r1, r3
 800910c:	4630      	mov	r0, r6
 800910e:	f000 f85c 	bl	80091ca <__malloc_unlock>
 8009112:	f104 000b 	add.w	r0, r4, #11
 8009116:	1d23      	adds	r3, r4, #4
 8009118:	f020 0007 	bic.w	r0, r0, #7
 800911c:	1ac3      	subs	r3, r0, r3
 800911e:	d0d3      	beq.n	80090c8 <_malloc_r+0x20>
 8009120:	425a      	negs	r2, r3
 8009122:	50e2      	str	r2, [r4, r3]
 8009124:	e7d0      	b.n	80090c8 <_malloc_r+0x20>
 8009126:	428c      	cmp	r4, r1
 8009128:	684b      	ldr	r3, [r1, #4]
 800912a:	bf16      	itet	ne
 800912c:	6063      	strne	r3, [r4, #4]
 800912e:	6013      	streq	r3, [r2, #0]
 8009130:	460c      	movne	r4, r1
 8009132:	e7eb      	b.n	800910c <_malloc_r+0x64>
 8009134:	460c      	mov	r4, r1
 8009136:	6849      	ldr	r1, [r1, #4]
 8009138:	e7cc      	b.n	80090d4 <_malloc_r+0x2c>
 800913a:	1cc4      	adds	r4, r0, #3
 800913c:	f024 0403 	bic.w	r4, r4, #3
 8009140:	42a0      	cmp	r0, r4
 8009142:	d005      	beq.n	8009150 <_malloc_r+0xa8>
 8009144:	1a21      	subs	r1, r4, r0
 8009146:	4630      	mov	r0, r6
 8009148:	f000 f82e 	bl	80091a8 <_sbrk_r>
 800914c:	3001      	adds	r0, #1
 800914e:	d0cf      	beq.n	80090f0 <_malloc_r+0x48>
 8009150:	6025      	str	r5, [r4, #0]
 8009152:	e7db      	b.n	800910c <_malloc_r+0x64>
 8009154:	20000090 	.word	0x20000090
 8009158:	20000094 	.word	0x20000094

0800915c <_realloc_r>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	4607      	mov	r7, r0
 8009160:	4614      	mov	r4, r2
 8009162:	460e      	mov	r6, r1
 8009164:	b921      	cbnz	r1, 8009170 <_realloc_r+0x14>
 8009166:	4611      	mov	r1, r2
 8009168:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800916c:	f7ff bf9c 	b.w	80090a8 <_malloc_r>
 8009170:	b922      	cbnz	r2, 800917c <_realloc_r+0x20>
 8009172:	f7ff ff4b 	bl	800900c <_free_r>
 8009176:	4625      	mov	r5, r4
 8009178:	4628      	mov	r0, r5
 800917a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800917c:	f000 f826 	bl	80091cc <_malloc_usable_size_r>
 8009180:	42a0      	cmp	r0, r4
 8009182:	d20f      	bcs.n	80091a4 <_realloc_r+0x48>
 8009184:	4621      	mov	r1, r4
 8009186:	4638      	mov	r0, r7
 8009188:	f7ff ff8e 	bl	80090a8 <_malloc_r>
 800918c:	4605      	mov	r5, r0
 800918e:	2800      	cmp	r0, #0
 8009190:	d0f2      	beq.n	8009178 <_realloc_r+0x1c>
 8009192:	4631      	mov	r1, r6
 8009194:	4622      	mov	r2, r4
 8009196:	f7ff ff15 	bl	8008fc4 <memcpy>
 800919a:	4631      	mov	r1, r6
 800919c:	4638      	mov	r0, r7
 800919e:	f7ff ff35 	bl	800900c <_free_r>
 80091a2:	e7e9      	b.n	8009178 <_realloc_r+0x1c>
 80091a4:	4635      	mov	r5, r6
 80091a6:	e7e7      	b.n	8009178 <_realloc_r+0x1c>

080091a8 <_sbrk_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4c06      	ldr	r4, [pc, #24]	; (80091c4 <_sbrk_r+0x1c>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	4605      	mov	r5, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	6023      	str	r3, [r4, #0]
 80091b4:	f7ff fb06 	bl	80087c4 <_sbrk>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_sbrk_r+0x1a>
 80091bc:	6823      	ldr	r3, [r4, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_sbrk_r+0x1a>
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	20000398 	.word	0x20000398

080091c8 <__malloc_lock>:
 80091c8:	4770      	bx	lr

080091ca <__malloc_unlock>:
 80091ca:	4770      	bx	lr

080091cc <_malloc_usable_size_r>:
 80091cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091d0:	1f18      	subs	r0, r3, #4
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bfbc      	itt	lt
 80091d6:	580b      	ldrlt	r3, [r1, r0]
 80091d8:	18c0      	addlt	r0, r0, r3
 80091da:	4770      	bx	lr
 80091dc:	0000      	movs	r0, r0
	...

080091e0 <cos>:
 80091e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091e2:	ec51 0b10 	vmov	r0, r1, d0
 80091e6:	4a1e      	ldr	r2, [pc, #120]	; (8009260 <cos+0x80>)
 80091e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80091ec:	4293      	cmp	r3, r2
 80091ee:	dc06      	bgt.n	80091fe <cos+0x1e>
 80091f0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8009258 <cos+0x78>
 80091f4:	f000 fa2c 	bl	8009650 <__kernel_cos>
 80091f8:	ec51 0b10 	vmov	r0, r1, d0
 80091fc:	e007      	b.n	800920e <cos+0x2e>
 80091fe:	4a19      	ldr	r2, [pc, #100]	; (8009264 <cos+0x84>)
 8009200:	4293      	cmp	r3, r2
 8009202:	dd09      	ble.n	8009218 <cos+0x38>
 8009204:	ee10 2a10 	vmov	r2, s0
 8009208:	460b      	mov	r3, r1
 800920a:	f7f7 f83d 	bl	8000288 <__aeabi_dsub>
 800920e:	ec41 0b10 	vmov	d0, r0, r1
 8009212:	b005      	add	sp, #20
 8009214:	f85d fb04 	ldr.w	pc, [sp], #4
 8009218:	4668      	mov	r0, sp
 800921a:	f000 f825 	bl	8009268 <__ieee754_rem_pio2>
 800921e:	f000 0003 	and.w	r0, r0, #3
 8009222:	2801      	cmp	r0, #1
 8009224:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009228:	ed9d 0b00 	vldr	d0, [sp]
 800922c:	d007      	beq.n	800923e <cos+0x5e>
 800922e:	2802      	cmp	r0, #2
 8009230:	d00e      	beq.n	8009250 <cos+0x70>
 8009232:	2800      	cmp	r0, #0
 8009234:	d0de      	beq.n	80091f4 <cos+0x14>
 8009236:	2001      	movs	r0, #1
 8009238:	f000 fe12 	bl	8009e60 <__kernel_sin>
 800923c:	e7dc      	b.n	80091f8 <cos+0x18>
 800923e:	f000 fe0f 	bl	8009e60 <__kernel_sin>
 8009242:	ec53 2b10 	vmov	r2, r3, d0
 8009246:	ee10 0a10 	vmov	r0, s0
 800924a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800924e:	e7de      	b.n	800920e <cos+0x2e>
 8009250:	f000 f9fe 	bl	8009650 <__kernel_cos>
 8009254:	e7f5      	b.n	8009242 <cos+0x62>
 8009256:	bf00      	nop
	...
 8009260:	3fe921fb 	.word	0x3fe921fb
 8009264:	7fefffff 	.word	0x7fefffff

08009268 <__ieee754_rem_pio2>:
 8009268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800926c:	ec57 6b10 	vmov	r6, r7, d0
 8009270:	4bc3      	ldr	r3, [pc, #780]	; (8009580 <__ieee754_rem_pio2+0x318>)
 8009272:	b08d      	sub	sp, #52	; 0x34
 8009274:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009278:	4598      	cmp	r8, r3
 800927a:	4604      	mov	r4, r0
 800927c:	9704      	str	r7, [sp, #16]
 800927e:	dc07      	bgt.n	8009290 <__ieee754_rem_pio2+0x28>
 8009280:	2200      	movs	r2, #0
 8009282:	2300      	movs	r3, #0
 8009284:	ed84 0b00 	vstr	d0, [r4]
 8009288:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800928c:	2500      	movs	r5, #0
 800928e:	e027      	b.n	80092e0 <__ieee754_rem_pio2+0x78>
 8009290:	4bbc      	ldr	r3, [pc, #752]	; (8009584 <__ieee754_rem_pio2+0x31c>)
 8009292:	4598      	cmp	r8, r3
 8009294:	dc75      	bgt.n	8009382 <__ieee754_rem_pio2+0x11a>
 8009296:	9b04      	ldr	r3, [sp, #16]
 8009298:	4dbb      	ldr	r5, [pc, #748]	; (8009588 <__ieee754_rem_pio2+0x320>)
 800929a:	2b00      	cmp	r3, #0
 800929c:	ee10 0a10 	vmov	r0, s0
 80092a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8009548 <__ieee754_rem_pio2+0x2e0>)
 80092a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092a6:	4639      	mov	r1, r7
 80092a8:	dd36      	ble.n	8009318 <__ieee754_rem_pio2+0xb0>
 80092aa:	f7f6 ffed 	bl	8000288 <__aeabi_dsub>
 80092ae:	45a8      	cmp	r8, r5
 80092b0:	4606      	mov	r6, r0
 80092b2:	460f      	mov	r7, r1
 80092b4:	d018      	beq.n	80092e8 <__ieee754_rem_pio2+0x80>
 80092b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009550 <__ieee754_rem_pio2+0x2e8>)
 80092b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092bc:	f7f6 ffe4 	bl	8000288 <__aeabi_dsub>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	e9c4 2300 	strd	r2, r3, [r4]
 80092c8:	4630      	mov	r0, r6
 80092ca:	4639      	mov	r1, r7
 80092cc:	f7f6 ffdc 	bl	8000288 <__aeabi_dsub>
 80092d0:	a39f      	add	r3, pc, #636	; (adr r3, 8009550 <__ieee754_rem_pio2+0x2e8>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f7f6 ffd7 	bl	8000288 <__aeabi_dsub>
 80092da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80092de:	2501      	movs	r5, #1
 80092e0:	4628      	mov	r0, r5
 80092e2:	b00d      	add	sp, #52	; 0x34
 80092e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092e8:	a39b      	add	r3, pc, #620	; (adr r3, 8009558 <__ieee754_rem_pio2+0x2f0>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f6 ffcb 	bl	8000288 <__aeabi_dsub>
 80092f2:	a39b      	add	r3, pc, #620	; (adr r3, 8009560 <__ieee754_rem_pio2+0x2f8>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	4606      	mov	r6, r0
 80092fa:	460f      	mov	r7, r1
 80092fc:	f7f6 ffc4 	bl	8000288 <__aeabi_dsub>
 8009300:	4602      	mov	r2, r0
 8009302:	460b      	mov	r3, r1
 8009304:	e9c4 2300 	strd	r2, r3, [r4]
 8009308:	4630      	mov	r0, r6
 800930a:	4639      	mov	r1, r7
 800930c:	f7f6 ffbc 	bl	8000288 <__aeabi_dsub>
 8009310:	a393      	add	r3, pc, #588	; (adr r3, 8009560 <__ieee754_rem_pio2+0x2f8>)
 8009312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009316:	e7de      	b.n	80092d6 <__ieee754_rem_pio2+0x6e>
 8009318:	f7f6 ffb8 	bl	800028c <__adddf3>
 800931c:	45a8      	cmp	r8, r5
 800931e:	4606      	mov	r6, r0
 8009320:	460f      	mov	r7, r1
 8009322:	d016      	beq.n	8009352 <__ieee754_rem_pio2+0xea>
 8009324:	a38a      	add	r3, pc, #552	; (adr r3, 8009550 <__ieee754_rem_pio2+0x2e8>)
 8009326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800932a:	f7f6 ffaf 	bl	800028c <__adddf3>
 800932e:	4602      	mov	r2, r0
 8009330:	460b      	mov	r3, r1
 8009332:	e9c4 2300 	strd	r2, r3, [r4]
 8009336:	4630      	mov	r0, r6
 8009338:	4639      	mov	r1, r7
 800933a:	f7f6 ffa5 	bl	8000288 <__aeabi_dsub>
 800933e:	a384      	add	r3, pc, #528	; (adr r3, 8009550 <__ieee754_rem_pio2+0x2e8>)
 8009340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009344:	f7f6 ffa2 	bl	800028c <__adddf3>
 8009348:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800934c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009350:	e7c6      	b.n	80092e0 <__ieee754_rem_pio2+0x78>
 8009352:	a381      	add	r3, pc, #516	; (adr r3, 8009558 <__ieee754_rem_pio2+0x2f0>)
 8009354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009358:	f7f6 ff98 	bl	800028c <__adddf3>
 800935c:	a380      	add	r3, pc, #512	; (adr r3, 8009560 <__ieee754_rem_pio2+0x2f8>)
 800935e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009362:	4606      	mov	r6, r0
 8009364:	460f      	mov	r7, r1
 8009366:	f7f6 ff91 	bl	800028c <__adddf3>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	e9c4 2300 	strd	r2, r3, [r4]
 8009372:	4630      	mov	r0, r6
 8009374:	4639      	mov	r1, r7
 8009376:	f7f6 ff87 	bl	8000288 <__aeabi_dsub>
 800937a:	a379      	add	r3, pc, #484	; (adr r3, 8009560 <__ieee754_rem_pio2+0x2f8>)
 800937c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009380:	e7e0      	b.n	8009344 <__ieee754_rem_pio2+0xdc>
 8009382:	4b82      	ldr	r3, [pc, #520]	; (800958c <__ieee754_rem_pio2+0x324>)
 8009384:	4598      	cmp	r8, r3
 8009386:	f300 80d0 	bgt.w	800952a <__ieee754_rem_pio2+0x2c2>
 800938a:	f000 fe23 	bl	8009fd4 <fabs>
 800938e:	ec57 6b10 	vmov	r6, r7, d0
 8009392:	ee10 0a10 	vmov	r0, s0
 8009396:	a374      	add	r3, pc, #464	; (adr r3, 8009568 <__ieee754_rem_pio2+0x300>)
 8009398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800939c:	4639      	mov	r1, r7
 800939e:	f7f7 f92b 	bl	80005f8 <__aeabi_dmul>
 80093a2:	2200      	movs	r2, #0
 80093a4:	4b7a      	ldr	r3, [pc, #488]	; (8009590 <__ieee754_rem_pio2+0x328>)
 80093a6:	f7f6 ff71 	bl	800028c <__adddf3>
 80093aa:	f7f7 fbbf 	bl	8000b2c <__aeabi_d2iz>
 80093ae:	4605      	mov	r5, r0
 80093b0:	f7f7 f8b8 	bl	8000524 <__aeabi_i2d>
 80093b4:	a364      	add	r3, pc, #400	; (adr r3, 8009548 <__ieee754_rem_pio2+0x2e0>)
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093be:	f7f7 f91b 	bl	80005f8 <__aeabi_dmul>
 80093c2:	4602      	mov	r2, r0
 80093c4:	460b      	mov	r3, r1
 80093c6:	4630      	mov	r0, r6
 80093c8:	4639      	mov	r1, r7
 80093ca:	f7f6 ff5d 	bl	8000288 <__aeabi_dsub>
 80093ce:	a360      	add	r3, pc, #384	; (adr r3, 8009550 <__ieee754_rem_pio2+0x2e8>)
 80093d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d4:	4682      	mov	sl, r0
 80093d6:	468b      	mov	fp, r1
 80093d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093dc:	f7f7 f90c 	bl	80005f8 <__aeabi_dmul>
 80093e0:	2d1f      	cmp	r5, #31
 80093e2:	4606      	mov	r6, r0
 80093e4:	460f      	mov	r7, r1
 80093e6:	dc0c      	bgt.n	8009402 <__ieee754_rem_pio2+0x19a>
 80093e8:	1e6a      	subs	r2, r5, #1
 80093ea:	4b6a      	ldr	r3, [pc, #424]	; (8009594 <__ieee754_rem_pio2+0x32c>)
 80093ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f0:	4543      	cmp	r3, r8
 80093f2:	d006      	beq.n	8009402 <__ieee754_rem_pio2+0x19a>
 80093f4:	4632      	mov	r2, r6
 80093f6:	463b      	mov	r3, r7
 80093f8:	4650      	mov	r0, sl
 80093fa:	4659      	mov	r1, fp
 80093fc:	f7f6 ff44 	bl	8000288 <__aeabi_dsub>
 8009400:	e00e      	b.n	8009420 <__ieee754_rem_pio2+0x1b8>
 8009402:	4632      	mov	r2, r6
 8009404:	463b      	mov	r3, r7
 8009406:	4650      	mov	r0, sl
 8009408:	4659      	mov	r1, fp
 800940a:	f7f6 ff3d 	bl	8000288 <__aeabi_dsub>
 800940e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	9a05      	ldr	r2, [sp, #20]
 8009416:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800941a:	1ad3      	subs	r3, r2, r3
 800941c:	2b10      	cmp	r3, #16
 800941e:	dc02      	bgt.n	8009426 <__ieee754_rem_pio2+0x1be>
 8009420:	e9c4 0100 	strd	r0, r1, [r4]
 8009424:	e039      	b.n	800949a <__ieee754_rem_pio2+0x232>
 8009426:	a34c      	add	r3, pc, #304	; (adr r3, 8009558 <__ieee754_rem_pio2+0x2f0>)
 8009428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009430:	f7f7 f8e2 	bl	80005f8 <__aeabi_dmul>
 8009434:	4606      	mov	r6, r0
 8009436:	460f      	mov	r7, r1
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4650      	mov	r0, sl
 800943e:	4659      	mov	r1, fp
 8009440:	f7f6 ff22 	bl	8000288 <__aeabi_dsub>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4680      	mov	r8, r0
 800944a:	4689      	mov	r9, r1
 800944c:	4650      	mov	r0, sl
 800944e:	4659      	mov	r1, fp
 8009450:	f7f6 ff1a 	bl	8000288 <__aeabi_dsub>
 8009454:	4632      	mov	r2, r6
 8009456:	463b      	mov	r3, r7
 8009458:	f7f6 ff16 	bl	8000288 <__aeabi_dsub>
 800945c:	a340      	add	r3, pc, #256	; (adr r3, 8009560 <__ieee754_rem_pio2+0x2f8>)
 800945e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009462:	4606      	mov	r6, r0
 8009464:	460f      	mov	r7, r1
 8009466:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800946a:	f7f7 f8c5 	bl	80005f8 <__aeabi_dmul>
 800946e:	4632      	mov	r2, r6
 8009470:	463b      	mov	r3, r7
 8009472:	f7f6 ff09 	bl	8000288 <__aeabi_dsub>
 8009476:	4602      	mov	r2, r0
 8009478:	460b      	mov	r3, r1
 800947a:	4606      	mov	r6, r0
 800947c:	460f      	mov	r7, r1
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f6 ff01 	bl	8000288 <__aeabi_dsub>
 8009486:	9a05      	ldr	r2, [sp, #20]
 8009488:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800948c:	1ad3      	subs	r3, r2, r3
 800948e:	2b31      	cmp	r3, #49	; 0x31
 8009490:	dc20      	bgt.n	80094d4 <__ieee754_rem_pio2+0x26c>
 8009492:	e9c4 0100 	strd	r0, r1, [r4]
 8009496:	46c2      	mov	sl, r8
 8009498:	46cb      	mov	fp, r9
 800949a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800949e:	4650      	mov	r0, sl
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	4659      	mov	r1, fp
 80094a6:	f7f6 feef 	bl	8000288 <__aeabi_dsub>
 80094aa:	463b      	mov	r3, r7
 80094ac:	4632      	mov	r2, r6
 80094ae:	f7f6 feeb 	bl	8000288 <__aeabi_dsub>
 80094b2:	9b04      	ldr	r3, [sp, #16]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80094ba:	f6bf af11 	bge.w	80092e0 <__ieee754_rem_pio2+0x78>
 80094be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80094c2:	6063      	str	r3, [r4, #4]
 80094c4:	f8c4 8000 	str.w	r8, [r4]
 80094c8:	60a0      	str	r0, [r4, #8]
 80094ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80094ce:	60e3      	str	r3, [r4, #12]
 80094d0:	426d      	negs	r5, r5
 80094d2:	e705      	b.n	80092e0 <__ieee754_rem_pio2+0x78>
 80094d4:	a326      	add	r3, pc, #152	; (adr r3, 8009570 <__ieee754_rem_pio2+0x308>)
 80094d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80094de:	f7f7 f88b 	bl	80005f8 <__aeabi_dmul>
 80094e2:	4606      	mov	r6, r0
 80094e4:	460f      	mov	r7, r1
 80094e6:	4602      	mov	r2, r0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4640      	mov	r0, r8
 80094ec:	4649      	mov	r1, r9
 80094ee:	f7f6 fecb 	bl	8000288 <__aeabi_dsub>
 80094f2:	4602      	mov	r2, r0
 80094f4:	460b      	mov	r3, r1
 80094f6:	4682      	mov	sl, r0
 80094f8:	468b      	mov	fp, r1
 80094fa:	4640      	mov	r0, r8
 80094fc:	4649      	mov	r1, r9
 80094fe:	f7f6 fec3 	bl	8000288 <__aeabi_dsub>
 8009502:	4632      	mov	r2, r6
 8009504:	463b      	mov	r3, r7
 8009506:	f7f6 febf 	bl	8000288 <__aeabi_dsub>
 800950a:	a31b      	add	r3, pc, #108	; (adr r3, 8009578 <__ieee754_rem_pio2+0x310>)
 800950c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009510:	4606      	mov	r6, r0
 8009512:	460f      	mov	r7, r1
 8009514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009518:	f7f7 f86e 	bl	80005f8 <__aeabi_dmul>
 800951c:	4632      	mov	r2, r6
 800951e:	463b      	mov	r3, r7
 8009520:	f7f6 feb2 	bl	8000288 <__aeabi_dsub>
 8009524:	4606      	mov	r6, r0
 8009526:	460f      	mov	r7, r1
 8009528:	e764      	b.n	80093f4 <__ieee754_rem_pio2+0x18c>
 800952a:	4b1b      	ldr	r3, [pc, #108]	; (8009598 <__ieee754_rem_pio2+0x330>)
 800952c:	4598      	cmp	r8, r3
 800952e:	dd35      	ble.n	800959c <__ieee754_rem_pio2+0x334>
 8009530:	ee10 2a10 	vmov	r2, s0
 8009534:	463b      	mov	r3, r7
 8009536:	4630      	mov	r0, r6
 8009538:	4639      	mov	r1, r7
 800953a:	f7f6 fea5 	bl	8000288 <__aeabi_dsub>
 800953e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009542:	e9c4 0100 	strd	r0, r1, [r4]
 8009546:	e6a1      	b.n	800928c <__ieee754_rem_pio2+0x24>
 8009548:	54400000 	.word	0x54400000
 800954c:	3ff921fb 	.word	0x3ff921fb
 8009550:	1a626331 	.word	0x1a626331
 8009554:	3dd0b461 	.word	0x3dd0b461
 8009558:	1a600000 	.word	0x1a600000
 800955c:	3dd0b461 	.word	0x3dd0b461
 8009560:	2e037073 	.word	0x2e037073
 8009564:	3ba3198a 	.word	0x3ba3198a
 8009568:	6dc9c883 	.word	0x6dc9c883
 800956c:	3fe45f30 	.word	0x3fe45f30
 8009570:	2e000000 	.word	0x2e000000
 8009574:	3ba3198a 	.word	0x3ba3198a
 8009578:	252049c1 	.word	0x252049c1
 800957c:	397b839a 	.word	0x397b839a
 8009580:	3fe921fb 	.word	0x3fe921fb
 8009584:	4002d97b 	.word	0x4002d97b
 8009588:	3ff921fb 	.word	0x3ff921fb
 800958c:	413921fb 	.word	0x413921fb
 8009590:	3fe00000 	.word	0x3fe00000
 8009594:	0800a2c4 	.word	0x0800a2c4
 8009598:	7fefffff 	.word	0x7fefffff
 800959c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80095a0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80095a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80095a8:	4630      	mov	r0, r6
 80095aa:	460f      	mov	r7, r1
 80095ac:	f7f7 fabe 	bl	8000b2c <__aeabi_d2iz>
 80095b0:	f7f6 ffb8 	bl	8000524 <__aeabi_i2d>
 80095b4:	4602      	mov	r2, r0
 80095b6:	460b      	mov	r3, r1
 80095b8:	4630      	mov	r0, r6
 80095ba:	4639      	mov	r1, r7
 80095bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80095c0:	f7f6 fe62 	bl	8000288 <__aeabi_dsub>
 80095c4:	2200      	movs	r2, #0
 80095c6:	4b1f      	ldr	r3, [pc, #124]	; (8009644 <__ieee754_rem_pio2+0x3dc>)
 80095c8:	f7f7 f816 	bl	80005f8 <__aeabi_dmul>
 80095cc:	460f      	mov	r7, r1
 80095ce:	4606      	mov	r6, r0
 80095d0:	f7f7 faac 	bl	8000b2c <__aeabi_d2iz>
 80095d4:	f7f6 ffa6 	bl	8000524 <__aeabi_i2d>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4630      	mov	r0, r6
 80095de:	4639      	mov	r1, r7
 80095e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095e4:	f7f6 fe50 	bl	8000288 <__aeabi_dsub>
 80095e8:	2200      	movs	r2, #0
 80095ea:	4b16      	ldr	r3, [pc, #88]	; (8009644 <__ieee754_rem_pio2+0x3dc>)
 80095ec:	f7f7 f804 	bl	80005f8 <__aeabi_dmul>
 80095f0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80095f4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80095f8:	f04f 0803 	mov.w	r8, #3
 80095fc:	2600      	movs	r6, #0
 80095fe:	2700      	movs	r7, #0
 8009600:	4632      	mov	r2, r6
 8009602:	463b      	mov	r3, r7
 8009604:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009608:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800960c:	f7f7 fa5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009610:	b9b0      	cbnz	r0, 8009640 <__ieee754_rem_pio2+0x3d8>
 8009612:	4b0d      	ldr	r3, [pc, #52]	; (8009648 <__ieee754_rem_pio2+0x3e0>)
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	2302      	movs	r3, #2
 8009618:	9300      	str	r3, [sp, #0]
 800961a:	462a      	mov	r2, r5
 800961c:	4643      	mov	r3, r8
 800961e:	4621      	mov	r1, r4
 8009620:	a806      	add	r0, sp, #24
 8009622:	f000 f8dd 	bl	80097e0 <__kernel_rem_pio2>
 8009626:	9b04      	ldr	r3, [sp, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	4605      	mov	r5, r0
 800962c:	f6bf ae58 	bge.w	80092e0 <__ieee754_rem_pio2+0x78>
 8009630:	6863      	ldr	r3, [r4, #4]
 8009632:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009636:	6063      	str	r3, [r4, #4]
 8009638:	68e3      	ldr	r3, [r4, #12]
 800963a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800963e:	e746      	b.n	80094ce <__ieee754_rem_pio2+0x266>
 8009640:	46d0      	mov	r8, sl
 8009642:	e7dd      	b.n	8009600 <__ieee754_rem_pio2+0x398>
 8009644:	41700000 	.word	0x41700000
 8009648:	0800a344 	.word	0x0800a344
 800964c:	00000000 	.word	0x00000000

08009650 <__kernel_cos>:
 8009650:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	ec59 8b10 	vmov	r8, r9, d0
 8009658:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800965c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009660:	ed2d 8b02 	vpush	{d8}
 8009664:	eeb0 8a41 	vmov.f32	s16, s2
 8009668:	eef0 8a61 	vmov.f32	s17, s3
 800966c:	da07      	bge.n	800967e <__kernel_cos+0x2e>
 800966e:	ee10 0a10 	vmov	r0, s0
 8009672:	4649      	mov	r1, r9
 8009674:	f7f7 fa5a 	bl	8000b2c <__aeabi_d2iz>
 8009678:	2800      	cmp	r0, #0
 800967a:	f000 8089 	beq.w	8009790 <__kernel_cos+0x140>
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	4640      	mov	r0, r8
 8009684:	4649      	mov	r1, r9
 8009686:	f7f6 ffb7 	bl	80005f8 <__aeabi_dmul>
 800968a:	2200      	movs	r2, #0
 800968c:	4b4e      	ldr	r3, [pc, #312]	; (80097c8 <__kernel_cos+0x178>)
 800968e:	4604      	mov	r4, r0
 8009690:	460d      	mov	r5, r1
 8009692:	f7f6 ffb1 	bl	80005f8 <__aeabi_dmul>
 8009696:	a340      	add	r3, pc, #256	; (adr r3, 8009798 <__kernel_cos+0x148>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	4682      	mov	sl, r0
 800969e:	468b      	mov	fp, r1
 80096a0:	4620      	mov	r0, r4
 80096a2:	4629      	mov	r1, r5
 80096a4:	f7f6 ffa8 	bl	80005f8 <__aeabi_dmul>
 80096a8:	a33d      	add	r3, pc, #244	; (adr r3, 80097a0 <__kernel_cos+0x150>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 fded 	bl	800028c <__adddf3>
 80096b2:	4622      	mov	r2, r4
 80096b4:	462b      	mov	r3, r5
 80096b6:	f7f6 ff9f 	bl	80005f8 <__aeabi_dmul>
 80096ba:	a33b      	add	r3, pc, #236	; (adr r3, 80097a8 <__kernel_cos+0x158>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7f6 fde2 	bl	8000288 <__aeabi_dsub>
 80096c4:	4622      	mov	r2, r4
 80096c6:	462b      	mov	r3, r5
 80096c8:	f7f6 ff96 	bl	80005f8 <__aeabi_dmul>
 80096cc:	a338      	add	r3, pc, #224	; (adr r3, 80097b0 <__kernel_cos+0x160>)
 80096ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d2:	f7f6 fddb 	bl	800028c <__adddf3>
 80096d6:	4622      	mov	r2, r4
 80096d8:	462b      	mov	r3, r5
 80096da:	f7f6 ff8d 	bl	80005f8 <__aeabi_dmul>
 80096de:	a336      	add	r3, pc, #216	; (adr r3, 80097b8 <__kernel_cos+0x168>)
 80096e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e4:	f7f6 fdd0 	bl	8000288 <__aeabi_dsub>
 80096e8:	4622      	mov	r2, r4
 80096ea:	462b      	mov	r3, r5
 80096ec:	f7f6 ff84 	bl	80005f8 <__aeabi_dmul>
 80096f0:	a333      	add	r3, pc, #204	; (adr r3, 80097c0 <__kernel_cos+0x170>)
 80096f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096f6:	f7f6 fdc9 	bl	800028c <__adddf3>
 80096fa:	4622      	mov	r2, r4
 80096fc:	462b      	mov	r3, r5
 80096fe:	f7f6 ff7b 	bl	80005f8 <__aeabi_dmul>
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	f7f6 ff77 	bl	80005f8 <__aeabi_dmul>
 800970a:	ec53 2b18 	vmov	r2, r3, d8
 800970e:	4604      	mov	r4, r0
 8009710:	460d      	mov	r5, r1
 8009712:	4640      	mov	r0, r8
 8009714:	4649      	mov	r1, r9
 8009716:	f7f6 ff6f 	bl	80005f8 <__aeabi_dmul>
 800971a:	460b      	mov	r3, r1
 800971c:	4602      	mov	r2, r0
 800971e:	4629      	mov	r1, r5
 8009720:	4620      	mov	r0, r4
 8009722:	f7f6 fdb1 	bl	8000288 <__aeabi_dsub>
 8009726:	4b29      	ldr	r3, [pc, #164]	; (80097cc <__kernel_cos+0x17c>)
 8009728:	429e      	cmp	r6, r3
 800972a:	4680      	mov	r8, r0
 800972c:	4689      	mov	r9, r1
 800972e:	dc11      	bgt.n	8009754 <__kernel_cos+0x104>
 8009730:	4602      	mov	r2, r0
 8009732:	460b      	mov	r3, r1
 8009734:	4650      	mov	r0, sl
 8009736:	4659      	mov	r1, fp
 8009738:	f7f6 fda6 	bl	8000288 <__aeabi_dsub>
 800973c:	460b      	mov	r3, r1
 800973e:	4924      	ldr	r1, [pc, #144]	; (80097d0 <__kernel_cos+0x180>)
 8009740:	4602      	mov	r2, r0
 8009742:	2000      	movs	r0, #0
 8009744:	f7f6 fda0 	bl	8000288 <__aeabi_dsub>
 8009748:	ecbd 8b02 	vpop	{d8}
 800974c:	ec41 0b10 	vmov	d0, r0, r1
 8009750:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009754:	4b1f      	ldr	r3, [pc, #124]	; (80097d4 <__kernel_cos+0x184>)
 8009756:	491e      	ldr	r1, [pc, #120]	; (80097d0 <__kernel_cos+0x180>)
 8009758:	429e      	cmp	r6, r3
 800975a:	bfcc      	ite	gt
 800975c:	4d1e      	ldrgt	r5, [pc, #120]	; (80097d8 <__kernel_cos+0x188>)
 800975e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009762:	2400      	movs	r4, #0
 8009764:	4622      	mov	r2, r4
 8009766:	462b      	mov	r3, r5
 8009768:	2000      	movs	r0, #0
 800976a:	f7f6 fd8d 	bl	8000288 <__aeabi_dsub>
 800976e:	4622      	mov	r2, r4
 8009770:	4606      	mov	r6, r0
 8009772:	460f      	mov	r7, r1
 8009774:	462b      	mov	r3, r5
 8009776:	4650      	mov	r0, sl
 8009778:	4659      	mov	r1, fp
 800977a:	f7f6 fd85 	bl	8000288 <__aeabi_dsub>
 800977e:	4642      	mov	r2, r8
 8009780:	464b      	mov	r3, r9
 8009782:	f7f6 fd81 	bl	8000288 <__aeabi_dsub>
 8009786:	4602      	mov	r2, r0
 8009788:	460b      	mov	r3, r1
 800978a:	4630      	mov	r0, r6
 800978c:	4639      	mov	r1, r7
 800978e:	e7d9      	b.n	8009744 <__kernel_cos+0xf4>
 8009790:	2000      	movs	r0, #0
 8009792:	490f      	ldr	r1, [pc, #60]	; (80097d0 <__kernel_cos+0x180>)
 8009794:	e7d8      	b.n	8009748 <__kernel_cos+0xf8>
 8009796:	bf00      	nop
 8009798:	be8838d4 	.word	0xbe8838d4
 800979c:	bda8fae9 	.word	0xbda8fae9
 80097a0:	bdb4b1c4 	.word	0xbdb4b1c4
 80097a4:	3e21ee9e 	.word	0x3e21ee9e
 80097a8:	809c52ad 	.word	0x809c52ad
 80097ac:	3e927e4f 	.word	0x3e927e4f
 80097b0:	19cb1590 	.word	0x19cb1590
 80097b4:	3efa01a0 	.word	0x3efa01a0
 80097b8:	16c15177 	.word	0x16c15177
 80097bc:	3f56c16c 	.word	0x3f56c16c
 80097c0:	5555554c 	.word	0x5555554c
 80097c4:	3fa55555 	.word	0x3fa55555
 80097c8:	3fe00000 	.word	0x3fe00000
 80097cc:	3fd33332 	.word	0x3fd33332
 80097d0:	3ff00000 	.word	0x3ff00000
 80097d4:	3fe90000 	.word	0x3fe90000
 80097d8:	3fd20000 	.word	0x3fd20000
 80097dc:	00000000 	.word	0x00000000

080097e0 <__kernel_rem_pio2>:
 80097e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e4:	ed2d 8b02 	vpush	{d8}
 80097e8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80097ec:	1ed4      	subs	r4, r2, #3
 80097ee:	9308      	str	r3, [sp, #32]
 80097f0:	9101      	str	r1, [sp, #4]
 80097f2:	4bc5      	ldr	r3, [pc, #788]	; (8009b08 <__kernel_rem_pio2+0x328>)
 80097f4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80097f6:	9009      	str	r0, [sp, #36]	; 0x24
 80097f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80097fc:	9304      	str	r3, [sp, #16]
 80097fe:	9b08      	ldr	r3, [sp, #32]
 8009800:	3b01      	subs	r3, #1
 8009802:	9307      	str	r3, [sp, #28]
 8009804:	2318      	movs	r3, #24
 8009806:	fb94 f4f3 	sdiv	r4, r4, r3
 800980a:	f06f 0317 	mvn.w	r3, #23
 800980e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009812:	fb04 3303 	mla	r3, r4, r3, r3
 8009816:	eb03 0a02 	add.w	sl, r3, r2
 800981a:	9b04      	ldr	r3, [sp, #16]
 800981c:	9a07      	ldr	r2, [sp, #28]
 800981e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009af8 <__kernel_rem_pio2+0x318>
 8009822:	eb03 0802 	add.w	r8, r3, r2
 8009826:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009828:	1aa7      	subs	r7, r4, r2
 800982a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800982e:	ae22      	add	r6, sp, #136	; 0x88
 8009830:	2500      	movs	r5, #0
 8009832:	4545      	cmp	r5, r8
 8009834:	dd13      	ble.n	800985e <__kernel_rem_pio2+0x7e>
 8009836:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009af8 <__kernel_rem_pio2+0x318>
 800983a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800983e:	2600      	movs	r6, #0
 8009840:	9b04      	ldr	r3, [sp, #16]
 8009842:	429e      	cmp	r6, r3
 8009844:	dc32      	bgt.n	80098ac <__kernel_rem_pio2+0xcc>
 8009846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009848:	9302      	str	r3, [sp, #8]
 800984a:	9b08      	ldr	r3, [sp, #32]
 800984c:	199d      	adds	r5, r3, r6
 800984e:	ab22      	add	r3, sp, #136	; 0x88
 8009850:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009854:	9306      	str	r3, [sp, #24]
 8009856:	ec59 8b18 	vmov	r8, r9, d8
 800985a:	2700      	movs	r7, #0
 800985c:	e01f      	b.n	800989e <__kernel_rem_pio2+0xbe>
 800985e:	42ef      	cmn	r7, r5
 8009860:	d407      	bmi.n	8009872 <__kernel_rem_pio2+0x92>
 8009862:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009866:	f7f6 fe5d 	bl	8000524 <__aeabi_i2d>
 800986a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800986e:	3501      	adds	r5, #1
 8009870:	e7df      	b.n	8009832 <__kernel_rem_pio2+0x52>
 8009872:	ec51 0b18 	vmov	r0, r1, d8
 8009876:	e7f8      	b.n	800986a <__kernel_rem_pio2+0x8a>
 8009878:	9906      	ldr	r1, [sp, #24]
 800987a:	9d02      	ldr	r5, [sp, #8]
 800987c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009880:	9106      	str	r1, [sp, #24]
 8009882:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009886:	9502      	str	r5, [sp, #8]
 8009888:	f7f6 feb6 	bl	80005f8 <__aeabi_dmul>
 800988c:	4602      	mov	r2, r0
 800988e:	460b      	mov	r3, r1
 8009890:	4640      	mov	r0, r8
 8009892:	4649      	mov	r1, r9
 8009894:	f7f6 fcfa 	bl	800028c <__adddf3>
 8009898:	3701      	adds	r7, #1
 800989a:	4680      	mov	r8, r0
 800989c:	4689      	mov	r9, r1
 800989e:	9b07      	ldr	r3, [sp, #28]
 80098a0:	429f      	cmp	r7, r3
 80098a2:	dde9      	ble.n	8009878 <__kernel_rem_pio2+0x98>
 80098a4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80098a8:	3601      	adds	r6, #1
 80098aa:	e7c9      	b.n	8009840 <__kernel_rem_pio2+0x60>
 80098ac:	9b04      	ldr	r3, [sp, #16]
 80098ae:	aa0e      	add	r2, sp, #56	; 0x38
 80098b0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80098b4:	930c      	str	r3, [sp, #48]	; 0x30
 80098b6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80098b8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80098bc:	9c04      	ldr	r4, [sp, #16]
 80098be:	930b      	str	r3, [sp, #44]	; 0x2c
 80098c0:	ab9a      	add	r3, sp, #616	; 0x268
 80098c2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80098c6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098ca:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80098ce:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80098d2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80098d6:	ab9a      	add	r3, sp, #616	; 0x268
 80098d8:	445b      	add	r3, fp
 80098da:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 80098de:	2500      	movs	r5, #0
 80098e0:	1b63      	subs	r3, r4, r5
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	dc78      	bgt.n	80099d8 <__kernel_rem_pio2+0x1f8>
 80098e6:	4650      	mov	r0, sl
 80098e8:	ec49 8b10 	vmov	d0, r8, r9
 80098ec:	f000 fc00 	bl	800a0f0 <scalbn>
 80098f0:	ec57 6b10 	vmov	r6, r7, d0
 80098f4:	2200      	movs	r2, #0
 80098f6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80098fa:	ee10 0a10 	vmov	r0, s0
 80098fe:	4639      	mov	r1, r7
 8009900:	f7f6 fe7a 	bl	80005f8 <__aeabi_dmul>
 8009904:	ec41 0b10 	vmov	d0, r0, r1
 8009908:	f000 fb6e 	bl	8009fe8 <floor>
 800990c:	2200      	movs	r2, #0
 800990e:	ec51 0b10 	vmov	r0, r1, d0
 8009912:	4b7e      	ldr	r3, [pc, #504]	; (8009b0c <__kernel_rem_pio2+0x32c>)
 8009914:	f7f6 fe70 	bl	80005f8 <__aeabi_dmul>
 8009918:	4602      	mov	r2, r0
 800991a:	460b      	mov	r3, r1
 800991c:	4630      	mov	r0, r6
 800991e:	4639      	mov	r1, r7
 8009920:	f7f6 fcb2 	bl	8000288 <__aeabi_dsub>
 8009924:	460f      	mov	r7, r1
 8009926:	4606      	mov	r6, r0
 8009928:	f7f7 f900 	bl	8000b2c <__aeabi_d2iz>
 800992c:	9006      	str	r0, [sp, #24]
 800992e:	f7f6 fdf9 	bl	8000524 <__aeabi_i2d>
 8009932:	4602      	mov	r2, r0
 8009934:	460b      	mov	r3, r1
 8009936:	4630      	mov	r0, r6
 8009938:	4639      	mov	r1, r7
 800993a:	f7f6 fca5 	bl	8000288 <__aeabi_dsub>
 800993e:	f1ba 0f00 	cmp.w	sl, #0
 8009942:	4606      	mov	r6, r0
 8009944:	460f      	mov	r7, r1
 8009946:	dd6c      	ble.n	8009a22 <__kernel_rem_pio2+0x242>
 8009948:	1e62      	subs	r2, r4, #1
 800994a:	ab0e      	add	r3, sp, #56	; 0x38
 800994c:	f1ca 0118 	rsb	r1, sl, #24
 8009950:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009954:	9d06      	ldr	r5, [sp, #24]
 8009956:	fa40 f301 	asr.w	r3, r0, r1
 800995a:	441d      	add	r5, r3
 800995c:	408b      	lsls	r3, r1
 800995e:	1ac0      	subs	r0, r0, r3
 8009960:	ab0e      	add	r3, sp, #56	; 0x38
 8009962:	9506      	str	r5, [sp, #24]
 8009964:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009968:	f1ca 0317 	rsb	r3, sl, #23
 800996c:	fa40 f303 	asr.w	r3, r0, r3
 8009970:	9302      	str	r3, [sp, #8]
 8009972:	9b02      	ldr	r3, [sp, #8]
 8009974:	2b00      	cmp	r3, #0
 8009976:	dd62      	ble.n	8009a3e <__kernel_rem_pio2+0x25e>
 8009978:	9b06      	ldr	r3, [sp, #24]
 800997a:	2200      	movs	r2, #0
 800997c:	3301      	adds	r3, #1
 800997e:	9306      	str	r3, [sp, #24]
 8009980:	4615      	mov	r5, r2
 8009982:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009986:	4294      	cmp	r4, r2
 8009988:	f300 8095 	bgt.w	8009ab6 <__kernel_rem_pio2+0x2d6>
 800998c:	f1ba 0f00 	cmp.w	sl, #0
 8009990:	dd07      	ble.n	80099a2 <__kernel_rem_pio2+0x1c2>
 8009992:	f1ba 0f01 	cmp.w	sl, #1
 8009996:	f000 80a2 	beq.w	8009ade <__kernel_rem_pio2+0x2fe>
 800999a:	f1ba 0f02 	cmp.w	sl, #2
 800999e:	f000 80c1 	beq.w	8009b24 <__kernel_rem_pio2+0x344>
 80099a2:	9b02      	ldr	r3, [sp, #8]
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d14a      	bne.n	8009a3e <__kernel_rem_pio2+0x25e>
 80099a8:	4632      	mov	r2, r6
 80099aa:	463b      	mov	r3, r7
 80099ac:	2000      	movs	r0, #0
 80099ae:	4958      	ldr	r1, [pc, #352]	; (8009b10 <__kernel_rem_pio2+0x330>)
 80099b0:	f7f6 fc6a 	bl	8000288 <__aeabi_dsub>
 80099b4:	4606      	mov	r6, r0
 80099b6:	460f      	mov	r7, r1
 80099b8:	2d00      	cmp	r5, #0
 80099ba:	d040      	beq.n	8009a3e <__kernel_rem_pio2+0x25e>
 80099bc:	4650      	mov	r0, sl
 80099be:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009b00 <__kernel_rem_pio2+0x320>
 80099c2:	f000 fb95 	bl	800a0f0 <scalbn>
 80099c6:	4630      	mov	r0, r6
 80099c8:	4639      	mov	r1, r7
 80099ca:	ec53 2b10 	vmov	r2, r3, d0
 80099ce:	f7f6 fc5b 	bl	8000288 <__aeabi_dsub>
 80099d2:	4606      	mov	r6, r0
 80099d4:	460f      	mov	r7, r1
 80099d6:	e032      	b.n	8009a3e <__kernel_rem_pio2+0x25e>
 80099d8:	2200      	movs	r2, #0
 80099da:	4b4e      	ldr	r3, [pc, #312]	; (8009b14 <__kernel_rem_pio2+0x334>)
 80099dc:	4640      	mov	r0, r8
 80099de:	4649      	mov	r1, r9
 80099e0:	f7f6 fe0a 	bl	80005f8 <__aeabi_dmul>
 80099e4:	f7f7 f8a2 	bl	8000b2c <__aeabi_d2iz>
 80099e8:	f7f6 fd9c 	bl	8000524 <__aeabi_i2d>
 80099ec:	2200      	movs	r2, #0
 80099ee:	4b4a      	ldr	r3, [pc, #296]	; (8009b18 <__kernel_rem_pio2+0x338>)
 80099f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099f4:	f7f6 fe00 	bl	80005f8 <__aeabi_dmul>
 80099f8:	4602      	mov	r2, r0
 80099fa:	460b      	mov	r3, r1
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fc42 	bl	8000288 <__aeabi_dsub>
 8009a04:	f7f7 f892 	bl	8000b2c <__aeabi_d2iz>
 8009a08:	ab0e      	add	r3, sp, #56	; 0x38
 8009a0a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009a0e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009a12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a16:	f7f6 fc39 	bl	800028c <__adddf3>
 8009a1a:	3501      	adds	r5, #1
 8009a1c:	4680      	mov	r8, r0
 8009a1e:	4689      	mov	r9, r1
 8009a20:	e75e      	b.n	80098e0 <__kernel_rem_pio2+0x100>
 8009a22:	d105      	bne.n	8009a30 <__kernel_rem_pio2+0x250>
 8009a24:	1e63      	subs	r3, r4, #1
 8009a26:	aa0e      	add	r2, sp, #56	; 0x38
 8009a28:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009a2c:	15c3      	asrs	r3, r0, #23
 8009a2e:	e79f      	b.n	8009970 <__kernel_rem_pio2+0x190>
 8009a30:	2200      	movs	r2, #0
 8009a32:	4b3a      	ldr	r3, [pc, #232]	; (8009b1c <__kernel_rem_pio2+0x33c>)
 8009a34:	f7f7 f866 	bl	8000b04 <__aeabi_dcmpge>
 8009a38:	2800      	cmp	r0, #0
 8009a3a:	d139      	bne.n	8009ab0 <__kernel_rem_pio2+0x2d0>
 8009a3c:	9002      	str	r0, [sp, #8]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	2300      	movs	r3, #0
 8009a42:	4630      	mov	r0, r6
 8009a44:	4639      	mov	r1, r7
 8009a46:	f7f7 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a4a:	2800      	cmp	r0, #0
 8009a4c:	f000 80c7 	beq.w	8009bde <__kernel_rem_pio2+0x3fe>
 8009a50:	1e65      	subs	r5, r4, #1
 8009a52:	462b      	mov	r3, r5
 8009a54:	2200      	movs	r2, #0
 8009a56:	9904      	ldr	r1, [sp, #16]
 8009a58:	428b      	cmp	r3, r1
 8009a5a:	da6a      	bge.n	8009b32 <__kernel_rem_pio2+0x352>
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	f000 8088 	beq.w	8009b72 <__kernel_rem_pio2+0x392>
 8009a62:	ab0e      	add	r3, sp, #56	; 0x38
 8009a64:	f1aa 0a18 	sub.w	sl, sl, #24
 8009a68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 80b4 	beq.w	8009bda <__kernel_rem_pio2+0x3fa>
 8009a72:	4650      	mov	r0, sl
 8009a74:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009b00 <__kernel_rem_pio2+0x320>
 8009a78:	f000 fb3a 	bl	800a0f0 <scalbn>
 8009a7c:	00ec      	lsls	r4, r5, #3
 8009a7e:	ab72      	add	r3, sp, #456	; 0x1c8
 8009a80:	191e      	adds	r6, r3, r4
 8009a82:	ec59 8b10 	vmov	r8, r9, d0
 8009a86:	f106 0a08 	add.w	sl, r6, #8
 8009a8a:	462f      	mov	r7, r5
 8009a8c:	2f00      	cmp	r7, #0
 8009a8e:	f280 80df 	bge.w	8009c50 <__kernel_rem_pio2+0x470>
 8009a92:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009af8 <__kernel_rem_pio2+0x318>
 8009a96:	f04f 0a00 	mov.w	sl, #0
 8009a9a:	eba5 030a 	sub.w	r3, r5, sl
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	f2c0 810a 	blt.w	8009cb8 <__kernel_rem_pio2+0x4d8>
 8009aa4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009b20 <__kernel_rem_pio2+0x340>
 8009aa8:	ec59 8b18 	vmov	r8, r9, d8
 8009aac:	2700      	movs	r7, #0
 8009aae:	e0f5      	b.n	8009c9c <__kernel_rem_pio2+0x4bc>
 8009ab0:	2302      	movs	r3, #2
 8009ab2:	9302      	str	r3, [sp, #8]
 8009ab4:	e760      	b.n	8009978 <__kernel_rem_pio2+0x198>
 8009ab6:	ab0e      	add	r3, sp, #56	; 0x38
 8009ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009abc:	b94d      	cbnz	r5, 8009ad2 <__kernel_rem_pio2+0x2f2>
 8009abe:	b12b      	cbz	r3, 8009acc <__kernel_rem_pio2+0x2ec>
 8009ac0:	a80e      	add	r0, sp, #56	; 0x38
 8009ac2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009ac6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009aca:	2301      	movs	r3, #1
 8009acc:	3201      	adds	r2, #1
 8009ace:	461d      	mov	r5, r3
 8009ad0:	e759      	b.n	8009986 <__kernel_rem_pio2+0x1a6>
 8009ad2:	a80e      	add	r0, sp, #56	; 0x38
 8009ad4:	1acb      	subs	r3, r1, r3
 8009ad6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009ada:	462b      	mov	r3, r5
 8009adc:	e7f6      	b.n	8009acc <__kernel_rem_pio2+0x2ec>
 8009ade:	1e62      	subs	r2, r4, #1
 8009ae0:	ab0e      	add	r3, sp, #56	; 0x38
 8009ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ae6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009aea:	a90e      	add	r1, sp, #56	; 0x38
 8009aec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009af0:	e757      	b.n	80099a2 <__kernel_rem_pio2+0x1c2>
 8009af2:	bf00      	nop
 8009af4:	f3af 8000 	nop.w
	...
 8009b04:	3ff00000 	.word	0x3ff00000
 8009b08:	0800a490 	.word	0x0800a490
 8009b0c:	40200000 	.word	0x40200000
 8009b10:	3ff00000 	.word	0x3ff00000
 8009b14:	3e700000 	.word	0x3e700000
 8009b18:	41700000 	.word	0x41700000
 8009b1c:	3fe00000 	.word	0x3fe00000
 8009b20:	0800a450 	.word	0x0800a450
 8009b24:	1e62      	subs	r2, r4, #1
 8009b26:	ab0e      	add	r3, sp, #56	; 0x38
 8009b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b2c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009b30:	e7db      	b.n	8009aea <__kernel_rem_pio2+0x30a>
 8009b32:	a90e      	add	r1, sp, #56	; 0x38
 8009b34:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	430a      	orrs	r2, r1
 8009b3c:	e78b      	b.n	8009a56 <__kernel_rem_pio2+0x276>
 8009b3e:	3301      	adds	r3, #1
 8009b40:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009b44:	2900      	cmp	r1, #0
 8009b46:	d0fa      	beq.n	8009b3e <__kernel_rem_pio2+0x35e>
 8009b48:	9a08      	ldr	r2, [sp, #32]
 8009b4a:	4422      	add	r2, r4
 8009b4c:	00d2      	lsls	r2, r2, #3
 8009b4e:	a922      	add	r1, sp, #136	; 0x88
 8009b50:	18e3      	adds	r3, r4, r3
 8009b52:	9206      	str	r2, [sp, #24]
 8009b54:	440a      	add	r2, r1
 8009b56:	9302      	str	r3, [sp, #8]
 8009b58:	f10b 0108 	add.w	r1, fp, #8
 8009b5c:	f102 0308 	add.w	r3, r2, #8
 8009b60:	1c66      	adds	r6, r4, #1
 8009b62:	910a      	str	r1, [sp, #40]	; 0x28
 8009b64:	2500      	movs	r5, #0
 8009b66:	930d      	str	r3, [sp, #52]	; 0x34
 8009b68:	9b02      	ldr	r3, [sp, #8]
 8009b6a:	42b3      	cmp	r3, r6
 8009b6c:	da04      	bge.n	8009b78 <__kernel_rem_pio2+0x398>
 8009b6e:	461c      	mov	r4, r3
 8009b70:	e6a6      	b.n	80098c0 <__kernel_rem_pio2+0xe0>
 8009b72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009b74:	2301      	movs	r3, #1
 8009b76:	e7e3      	b.n	8009b40 <__kernel_rem_pio2+0x360>
 8009b78:	9b06      	ldr	r3, [sp, #24]
 8009b7a:	18ef      	adds	r7, r5, r3
 8009b7c:	ab22      	add	r3, sp, #136	; 0x88
 8009b7e:	441f      	add	r7, r3
 8009b80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b82:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009b86:	f7f6 fccd 	bl	8000524 <__aeabi_i2d>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8c:	461c      	mov	r4, r3
 8009b8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b90:	e9c7 0100 	strd	r0, r1, [r7]
 8009b94:	eb03 0b05 	add.w	fp, r3, r5
 8009b98:	2700      	movs	r7, #0
 8009b9a:	f04f 0800 	mov.w	r8, #0
 8009b9e:	f04f 0900 	mov.w	r9, #0
 8009ba2:	9b07      	ldr	r3, [sp, #28]
 8009ba4:	429f      	cmp	r7, r3
 8009ba6:	dd08      	ble.n	8009bba <__kernel_rem_pio2+0x3da>
 8009ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009baa:	aa72      	add	r2, sp, #456	; 0x1c8
 8009bac:	18eb      	adds	r3, r5, r3
 8009bae:	4413      	add	r3, r2
 8009bb0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8009bb4:	3601      	adds	r6, #1
 8009bb6:	3508      	adds	r5, #8
 8009bb8:	e7d6      	b.n	8009b68 <__kernel_rem_pio2+0x388>
 8009bba:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009bbe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009bc2:	f7f6 fd19 	bl	80005f8 <__aeabi_dmul>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4640      	mov	r0, r8
 8009bcc:	4649      	mov	r1, r9
 8009bce:	f7f6 fb5d 	bl	800028c <__adddf3>
 8009bd2:	3701      	adds	r7, #1
 8009bd4:	4680      	mov	r8, r0
 8009bd6:	4689      	mov	r9, r1
 8009bd8:	e7e3      	b.n	8009ba2 <__kernel_rem_pio2+0x3c2>
 8009bda:	3d01      	subs	r5, #1
 8009bdc:	e741      	b.n	8009a62 <__kernel_rem_pio2+0x282>
 8009bde:	f1ca 0000 	rsb	r0, sl, #0
 8009be2:	ec47 6b10 	vmov	d0, r6, r7
 8009be6:	f000 fa83 	bl	800a0f0 <scalbn>
 8009bea:	ec57 6b10 	vmov	r6, r7, d0
 8009bee:	2200      	movs	r2, #0
 8009bf0:	4b99      	ldr	r3, [pc, #612]	; (8009e58 <__kernel_rem_pio2+0x678>)
 8009bf2:	ee10 0a10 	vmov	r0, s0
 8009bf6:	4639      	mov	r1, r7
 8009bf8:	f7f6 ff84 	bl	8000b04 <__aeabi_dcmpge>
 8009bfc:	b1f8      	cbz	r0, 8009c3e <__kernel_rem_pio2+0x45e>
 8009bfe:	2200      	movs	r2, #0
 8009c00:	4b96      	ldr	r3, [pc, #600]	; (8009e5c <__kernel_rem_pio2+0x67c>)
 8009c02:	4630      	mov	r0, r6
 8009c04:	4639      	mov	r1, r7
 8009c06:	f7f6 fcf7 	bl	80005f8 <__aeabi_dmul>
 8009c0a:	f7f6 ff8f 	bl	8000b2c <__aeabi_d2iz>
 8009c0e:	4680      	mov	r8, r0
 8009c10:	f7f6 fc88 	bl	8000524 <__aeabi_i2d>
 8009c14:	2200      	movs	r2, #0
 8009c16:	4b90      	ldr	r3, [pc, #576]	; (8009e58 <__kernel_rem_pio2+0x678>)
 8009c18:	f7f6 fcee 	bl	80005f8 <__aeabi_dmul>
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	4602      	mov	r2, r0
 8009c20:	4639      	mov	r1, r7
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7f6 fb30 	bl	8000288 <__aeabi_dsub>
 8009c28:	f7f6 ff80 	bl	8000b2c <__aeabi_d2iz>
 8009c2c:	1c65      	adds	r5, r4, #1
 8009c2e:	ab0e      	add	r3, sp, #56	; 0x38
 8009c30:	f10a 0a18 	add.w	sl, sl, #24
 8009c34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009c38:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009c3c:	e719      	b.n	8009a72 <__kernel_rem_pio2+0x292>
 8009c3e:	4630      	mov	r0, r6
 8009c40:	4639      	mov	r1, r7
 8009c42:	f7f6 ff73 	bl	8000b2c <__aeabi_d2iz>
 8009c46:	ab0e      	add	r3, sp, #56	; 0x38
 8009c48:	4625      	mov	r5, r4
 8009c4a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009c4e:	e710      	b.n	8009a72 <__kernel_rem_pio2+0x292>
 8009c50:	ab0e      	add	r3, sp, #56	; 0x38
 8009c52:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009c56:	f7f6 fc65 	bl	8000524 <__aeabi_i2d>
 8009c5a:	4642      	mov	r2, r8
 8009c5c:	464b      	mov	r3, r9
 8009c5e:	f7f6 fccb 	bl	80005f8 <__aeabi_dmul>
 8009c62:	2200      	movs	r2, #0
 8009c64:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8009c68:	4b7c      	ldr	r3, [pc, #496]	; (8009e5c <__kernel_rem_pio2+0x67c>)
 8009c6a:	4640      	mov	r0, r8
 8009c6c:	4649      	mov	r1, r9
 8009c6e:	f7f6 fcc3 	bl	80005f8 <__aeabi_dmul>
 8009c72:	3f01      	subs	r7, #1
 8009c74:	4680      	mov	r8, r0
 8009c76:	4689      	mov	r9, r1
 8009c78:	e708      	b.n	8009a8c <__kernel_rem_pio2+0x2ac>
 8009c7a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8009c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c82:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8009c86:	f7f6 fcb7 	bl	80005f8 <__aeabi_dmul>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4640      	mov	r0, r8
 8009c90:	4649      	mov	r1, r9
 8009c92:	f7f6 fafb 	bl	800028c <__adddf3>
 8009c96:	3701      	adds	r7, #1
 8009c98:	4680      	mov	r8, r0
 8009c9a:	4689      	mov	r9, r1
 8009c9c:	9b04      	ldr	r3, [sp, #16]
 8009c9e:	429f      	cmp	r7, r3
 8009ca0:	dc01      	bgt.n	8009ca6 <__kernel_rem_pio2+0x4c6>
 8009ca2:	45ba      	cmp	sl, r7
 8009ca4:	dae9      	bge.n	8009c7a <__kernel_rem_pio2+0x49a>
 8009ca6:	ab4a      	add	r3, sp, #296	; 0x128
 8009ca8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009cac:	e9c3 8900 	strd	r8, r9, [r3]
 8009cb0:	f10a 0a01 	add.w	sl, sl, #1
 8009cb4:	3e08      	subs	r6, #8
 8009cb6:	e6f0      	b.n	8009a9a <__kernel_rem_pio2+0x2ba>
 8009cb8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009cba:	2b03      	cmp	r3, #3
 8009cbc:	d85b      	bhi.n	8009d76 <__kernel_rem_pio2+0x596>
 8009cbe:	e8df f003 	tbb	[pc, r3]
 8009cc2:	264a      	.short	0x264a
 8009cc4:	0226      	.short	0x0226
 8009cc6:	ab9a      	add	r3, sp, #616	; 0x268
 8009cc8:	441c      	add	r4, r3
 8009cca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009cce:	46a2      	mov	sl, r4
 8009cd0:	46ab      	mov	fp, r5
 8009cd2:	f1bb 0f00 	cmp.w	fp, #0
 8009cd6:	dc6c      	bgt.n	8009db2 <__kernel_rem_pio2+0x5d2>
 8009cd8:	46a2      	mov	sl, r4
 8009cda:	46ab      	mov	fp, r5
 8009cdc:	f1bb 0f01 	cmp.w	fp, #1
 8009ce0:	f300 8086 	bgt.w	8009df0 <__kernel_rem_pio2+0x610>
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	2d01      	cmp	r5, #1
 8009cea:	f300 80a0 	bgt.w	8009e2e <__kernel_rem_pio2+0x64e>
 8009cee:	9b02      	ldr	r3, [sp, #8]
 8009cf0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009cf4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	f040 809e 	bne.w	8009e3a <__kernel_rem_pio2+0x65a>
 8009cfe:	9b01      	ldr	r3, [sp, #4]
 8009d00:	e9c3 7800 	strd	r7, r8, [r3]
 8009d04:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009d08:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009d0c:	e033      	b.n	8009d76 <__kernel_rem_pio2+0x596>
 8009d0e:	3408      	adds	r4, #8
 8009d10:	ab4a      	add	r3, sp, #296	; 0x128
 8009d12:	441c      	add	r4, r3
 8009d14:	462e      	mov	r6, r5
 8009d16:	2000      	movs	r0, #0
 8009d18:	2100      	movs	r1, #0
 8009d1a:	2e00      	cmp	r6, #0
 8009d1c:	da3a      	bge.n	8009d94 <__kernel_rem_pio2+0x5b4>
 8009d1e:	9b02      	ldr	r3, [sp, #8]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d03d      	beq.n	8009da0 <__kernel_rem_pio2+0x5c0>
 8009d24:	4602      	mov	r2, r0
 8009d26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d2a:	9c01      	ldr	r4, [sp, #4]
 8009d2c:	e9c4 2300 	strd	r2, r3, [r4]
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009d38:	f7f6 faa6 	bl	8000288 <__aeabi_dsub>
 8009d3c:	ae4c      	add	r6, sp, #304	; 0x130
 8009d3e:	2401      	movs	r4, #1
 8009d40:	42a5      	cmp	r5, r4
 8009d42:	da30      	bge.n	8009da6 <__kernel_rem_pio2+0x5c6>
 8009d44:	9b02      	ldr	r3, [sp, #8]
 8009d46:	b113      	cbz	r3, 8009d4e <__kernel_rem_pio2+0x56e>
 8009d48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	9b01      	ldr	r3, [sp, #4]
 8009d50:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009d54:	e00f      	b.n	8009d76 <__kernel_rem_pio2+0x596>
 8009d56:	ab9a      	add	r3, sp, #616	; 0x268
 8009d58:	441c      	add	r4, r3
 8009d5a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009d5e:	2000      	movs	r0, #0
 8009d60:	2100      	movs	r1, #0
 8009d62:	2d00      	cmp	r5, #0
 8009d64:	da10      	bge.n	8009d88 <__kernel_rem_pio2+0x5a8>
 8009d66:	9b02      	ldr	r3, [sp, #8]
 8009d68:	b113      	cbz	r3, 8009d70 <__kernel_rem_pio2+0x590>
 8009d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009d6e:	4619      	mov	r1, r3
 8009d70:	9b01      	ldr	r3, [sp, #4]
 8009d72:	e9c3 0100 	strd	r0, r1, [r3]
 8009d76:	9b06      	ldr	r3, [sp, #24]
 8009d78:	f003 0007 	and.w	r0, r3, #7
 8009d7c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8009d80:	ecbd 8b02 	vpop	{d8}
 8009d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d88:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d8c:	f7f6 fa7e 	bl	800028c <__adddf3>
 8009d90:	3d01      	subs	r5, #1
 8009d92:	e7e6      	b.n	8009d62 <__kernel_rem_pio2+0x582>
 8009d94:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009d98:	f7f6 fa78 	bl	800028c <__adddf3>
 8009d9c:	3e01      	subs	r6, #1
 8009d9e:	e7bc      	b.n	8009d1a <__kernel_rem_pio2+0x53a>
 8009da0:	4602      	mov	r2, r0
 8009da2:	460b      	mov	r3, r1
 8009da4:	e7c1      	b.n	8009d2a <__kernel_rem_pio2+0x54a>
 8009da6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009daa:	f7f6 fa6f 	bl	800028c <__adddf3>
 8009dae:	3401      	adds	r4, #1
 8009db0:	e7c6      	b.n	8009d40 <__kernel_rem_pio2+0x560>
 8009db2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8009db6:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009dba:	4640      	mov	r0, r8
 8009dbc:	ec53 2b17 	vmov	r2, r3, d7
 8009dc0:	4649      	mov	r1, r9
 8009dc2:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009dc6:	f7f6 fa61 	bl	800028c <__adddf3>
 8009dca:	4602      	mov	r2, r0
 8009dcc:	460b      	mov	r3, r1
 8009dce:	4606      	mov	r6, r0
 8009dd0:	460f      	mov	r7, r1
 8009dd2:	4640      	mov	r0, r8
 8009dd4:	4649      	mov	r1, r9
 8009dd6:	f7f6 fa57 	bl	8000288 <__aeabi_dsub>
 8009dda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dde:	f7f6 fa55 	bl	800028c <__adddf3>
 8009de2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009de6:	e9ca 0100 	strd	r0, r1, [sl]
 8009dea:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8009dee:	e770      	b.n	8009cd2 <__kernel_rem_pio2+0x4f2>
 8009df0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8009df4:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009df8:	4630      	mov	r0, r6
 8009dfa:	ec53 2b17 	vmov	r2, r3, d7
 8009dfe:	4639      	mov	r1, r7
 8009e00:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009e04:	f7f6 fa42 	bl	800028c <__adddf3>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4680      	mov	r8, r0
 8009e0e:	4689      	mov	r9, r1
 8009e10:	4630      	mov	r0, r6
 8009e12:	4639      	mov	r1, r7
 8009e14:	f7f6 fa38 	bl	8000288 <__aeabi_dsub>
 8009e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009e1c:	f7f6 fa36 	bl	800028c <__adddf3>
 8009e20:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009e24:	e9ca 0100 	strd	r0, r1, [sl]
 8009e28:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8009e2c:	e756      	b.n	8009cdc <__kernel_rem_pio2+0x4fc>
 8009e2e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009e32:	f7f6 fa2b 	bl	800028c <__adddf3>
 8009e36:	3d01      	subs	r5, #1
 8009e38:	e756      	b.n	8009ce8 <__kernel_rem_pio2+0x508>
 8009e3a:	9b01      	ldr	r3, [sp, #4]
 8009e3c:	9a01      	ldr	r2, [sp, #4]
 8009e3e:	601f      	str	r7, [r3, #0]
 8009e40:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009e44:	605c      	str	r4, [r3, #4]
 8009e46:	609d      	str	r5, [r3, #8]
 8009e48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009e4c:	60d3      	str	r3, [r2, #12]
 8009e4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e52:	6110      	str	r0, [r2, #16]
 8009e54:	6153      	str	r3, [r2, #20]
 8009e56:	e78e      	b.n	8009d76 <__kernel_rem_pio2+0x596>
 8009e58:	41700000 	.word	0x41700000
 8009e5c:	3e700000 	.word	0x3e700000

08009e60 <__kernel_sin>:
 8009e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e64:	ec55 4b10 	vmov	r4, r5, d0
 8009e68:	b085      	sub	sp, #20
 8009e6a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009e6e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009e72:	ed8d 1b00 	vstr	d1, [sp]
 8009e76:	9002      	str	r0, [sp, #8]
 8009e78:	da06      	bge.n	8009e88 <__kernel_sin+0x28>
 8009e7a:	ee10 0a10 	vmov	r0, s0
 8009e7e:	4629      	mov	r1, r5
 8009e80:	f7f6 fe54 	bl	8000b2c <__aeabi_d2iz>
 8009e84:	2800      	cmp	r0, #0
 8009e86:	d051      	beq.n	8009f2c <__kernel_sin+0xcc>
 8009e88:	4622      	mov	r2, r4
 8009e8a:	462b      	mov	r3, r5
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	4629      	mov	r1, r5
 8009e90:	f7f6 fbb2 	bl	80005f8 <__aeabi_dmul>
 8009e94:	4682      	mov	sl, r0
 8009e96:	468b      	mov	fp, r1
 8009e98:	4602      	mov	r2, r0
 8009e9a:	460b      	mov	r3, r1
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	4629      	mov	r1, r5
 8009ea0:	f7f6 fbaa 	bl	80005f8 <__aeabi_dmul>
 8009ea4:	a341      	add	r3, pc, #260	; (adr r3, 8009fac <__kernel_sin+0x14c>)
 8009ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eaa:	4680      	mov	r8, r0
 8009eac:	4689      	mov	r9, r1
 8009eae:	4650      	mov	r0, sl
 8009eb0:	4659      	mov	r1, fp
 8009eb2:	f7f6 fba1 	bl	80005f8 <__aeabi_dmul>
 8009eb6:	a33f      	add	r3, pc, #252	; (adr r3, 8009fb4 <__kernel_sin+0x154>)
 8009eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ebc:	f7f6 f9e4 	bl	8000288 <__aeabi_dsub>
 8009ec0:	4652      	mov	r2, sl
 8009ec2:	465b      	mov	r3, fp
 8009ec4:	f7f6 fb98 	bl	80005f8 <__aeabi_dmul>
 8009ec8:	a33c      	add	r3, pc, #240	; (adr r3, 8009fbc <__kernel_sin+0x15c>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	f7f6 f9dd 	bl	800028c <__adddf3>
 8009ed2:	4652      	mov	r2, sl
 8009ed4:	465b      	mov	r3, fp
 8009ed6:	f7f6 fb8f 	bl	80005f8 <__aeabi_dmul>
 8009eda:	a33a      	add	r3, pc, #232	; (adr r3, 8009fc4 <__kernel_sin+0x164>)
 8009edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ee0:	f7f6 f9d2 	bl	8000288 <__aeabi_dsub>
 8009ee4:	4652      	mov	r2, sl
 8009ee6:	465b      	mov	r3, fp
 8009ee8:	f7f6 fb86 	bl	80005f8 <__aeabi_dmul>
 8009eec:	a337      	add	r3, pc, #220	; (adr r3, 8009fcc <__kernel_sin+0x16c>)
 8009eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ef2:	f7f6 f9cb 	bl	800028c <__adddf3>
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	4606      	mov	r6, r0
 8009efa:	460f      	mov	r7, r1
 8009efc:	b9db      	cbnz	r3, 8009f36 <__kernel_sin+0xd6>
 8009efe:	4602      	mov	r2, r0
 8009f00:	460b      	mov	r3, r1
 8009f02:	4650      	mov	r0, sl
 8009f04:	4659      	mov	r1, fp
 8009f06:	f7f6 fb77 	bl	80005f8 <__aeabi_dmul>
 8009f0a:	a325      	add	r3, pc, #148	; (adr r3, 8009fa0 <__kernel_sin+0x140>)
 8009f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f10:	f7f6 f9ba 	bl	8000288 <__aeabi_dsub>
 8009f14:	4642      	mov	r2, r8
 8009f16:	464b      	mov	r3, r9
 8009f18:	f7f6 fb6e 	bl	80005f8 <__aeabi_dmul>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	4620      	mov	r0, r4
 8009f22:	4629      	mov	r1, r5
 8009f24:	f7f6 f9b2 	bl	800028c <__adddf3>
 8009f28:	4604      	mov	r4, r0
 8009f2a:	460d      	mov	r5, r1
 8009f2c:	ec45 4b10 	vmov	d0, r4, r5
 8009f30:	b005      	add	sp, #20
 8009f32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f36:	2200      	movs	r2, #0
 8009f38:	4b1b      	ldr	r3, [pc, #108]	; (8009fa8 <__kernel_sin+0x148>)
 8009f3a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f3e:	f7f6 fb5b 	bl	80005f8 <__aeabi_dmul>
 8009f42:	4632      	mov	r2, r6
 8009f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f48:	463b      	mov	r3, r7
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	f7f6 fb53 	bl	80005f8 <__aeabi_dmul>
 8009f52:	4602      	mov	r2, r0
 8009f54:	460b      	mov	r3, r1
 8009f56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f5a:	f7f6 f995 	bl	8000288 <__aeabi_dsub>
 8009f5e:	4652      	mov	r2, sl
 8009f60:	465b      	mov	r3, fp
 8009f62:	f7f6 fb49 	bl	80005f8 <__aeabi_dmul>
 8009f66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f6a:	f7f6 f98d 	bl	8000288 <__aeabi_dsub>
 8009f6e:	a30c      	add	r3, pc, #48	; (adr r3, 8009fa0 <__kernel_sin+0x140>)
 8009f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f74:	4606      	mov	r6, r0
 8009f76:	460f      	mov	r7, r1
 8009f78:	4640      	mov	r0, r8
 8009f7a:	4649      	mov	r1, r9
 8009f7c:	f7f6 fb3c 	bl	80005f8 <__aeabi_dmul>
 8009f80:	4602      	mov	r2, r0
 8009f82:	460b      	mov	r3, r1
 8009f84:	4630      	mov	r0, r6
 8009f86:	4639      	mov	r1, r7
 8009f88:	f7f6 f980 	bl	800028c <__adddf3>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	460b      	mov	r3, r1
 8009f90:	4620      	mov	r0, r4
 8009f92:	4629      	mov	r1, r5
 8009f94:	f7f6 f978 	bl	8000288 <__aeabi_dsub>
 8009f98:	e7c6      	b.n	8009f28 <__kernel_sin+0xc8>
 8009f9a:	bf00      	nop
 8009f9c:	f3af 8000 	nop.w
 8009fa0:	55555549 	.word	0x55555549
 8009fa4:	3fc55555 	.word	0x3fc55555
 8009fa8:	3fe00000 	.word	0x3fe00000
 8009fac:	5acfd57c 	.word	0x5acfd57c
 8009fb0:	3de5d93a 	.word	0x3de5d93a
 8009fb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8009fb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8009fbc:	57b1fe7d 	.word	0x57b1fe7d
 8009fc0:	3ec71de3 	.word	0x3ec71de3
 8009fc4:	19c161d5 	.word	0x19c161d5
 8009fc8:	3f2a01a0 	.word	0x3f2a01a0
 8009fcc:	1110f8a6 	.word	0x1110f8a6
 8009fd0:	3f811111 	.word	0x3f811111

08009fd4 <fabs>:
 8009fd4:	ec51 0b10 	vmov	r0, r1, d0
 8009fd8:	ee10 2a10 	vmov	r2, s0
 8009fdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009fe0:	ec43 2b10 	vmov	d0, r2, r3
 8009fe4:	4770      	bx	lr
	...

08009fe8 <floor>:
 8009fe8:	ec51 0b10 	vmov	r0, r1, d0
 8009fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ff0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009ff4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009ff8:	2e13      	cmp	r6, #19
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	ee10 5a10 	vmov	r5, s0
 800a000:	4680      	mov	r8, r0
 800a002:	dc34      	bgt.n	800a06e <floor+0x86>
 800a004:	2e00      	cmp	r6, #0
 800a006:	da16      	bge.n	800a036 <floor+0x4e>
 800a008:	a335      	add	r3, pc, #212	; (adr r3, 800a0e0 <floor+0xf8>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 f93d 	bl	800028c <__adddf3>
 800a012:	2200      	movs	r2, #0
 800a014:	2300      	movs	r3, #0
 800a016:	f7f6 fd7f 	bl	8000b18 <__aeabi_dcmpgt>
 800a01a:	b148      	cbz	r0, 800a030 <floor+0x48>
 800a01c:	2c00      	cmp	r4, #0
 800a01e:	da59      	bge.n	800a0d4 <floor+0xec>
 800a020:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a024:	4a30      	ldr	r2, [pc, #192]	; (800a0e8 <floor+0x100>)
 800a026:	432b      	orrs	r3, r5
 800a028:	2500      	movs	r5, #0
 800a02a:	42ab      	cmp	r3, r5
 800a02c:	bf18      	it	ne
 800a02e:	4614      	movne	r4, r2
 800a030:	4621      	mov	r1, r4
 800a032:	4628      	mov	r0, r5
 800a034:	e025      	b.n	800a082 <floor+0x9a>
 800a036:	4f2d      	ldr	r7, [pc, #180]	; (800a0ec <floor+0x104>)
 800a038:	4137      	asrs	r7, r6
 800a03a:	ea01 0307 	and.w	r3, r1, r7
 800a03e:	4303      	orrs	r3, r0
 800a040:	d01f      	beq.n	800a082 <floor+0x9a>
 800a042:	a327      	add	r3, pc, #156	; (adr r3, 800a0e0 <floor+0xf8>)
 800a044:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a048:	f7f6 f920 	bl	800028c <__adddf3>
 800a04c:	2200      	movs	r2, #0
 800a04e:	2300      	movs	r3, #0
 800a050:	f7f6 fd62 	bl	8000b18 <__aeabi_dcmpgt>
 800a054:	2800      	cmp	r0, #0
 800a056:	d0eb      	beq.n	800a030 <floor+0x48>
 800a058:	2c00      	cmp	r4, #0
 800a05a:	bfbe      	ittt	lt
 800a05c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a060:	fa43 f606 	asrlt.w	r6, r3, r6
 800a064:	19a4      	addlt	r4, r4, r6
 800a066:	ea24 0407 	bic.w	r4, r4, r7
 800a06a:	2500      	movs	r5, #0
 800a06c:	e7e0      	b.n	800a030 <floor+0x48>
 800a06e:	2e33      	cmp	r6, #51	; 0x33
 800a070:	dd0b      	ble.n	800a08a <floor+0xa2>
 800a072:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a076:	d104      	bne.n	800a082 <floor+0x9a>
 800a078:	ee10 2a10 	vmov	r2, s0
 800a07c:	460b      	mov	r3, r1
 800a07e:	f7f6 f905 	bl	800028c <__adddf3>
 800a082:	ec41 0b10 	vmov	d0, r0, r1
 800a086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a08a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a08e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a092:	fa23 f707 	lsr.w	r7, r3, r7
 800a096:	4207      	tst	r7, r0
 800a098:	d0f3      	beq.n	800a082 <floor+0x9a>
 800a09a:	a311      	add	r3, pc, #68	; (adr r3, 800a0e0 <floor+0xf8>)
 800a09c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0a0:	f7f6 f8f4 	bl	800028c <__adddf3>
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f7f6 fd36 	bl	8000b18 <__aeabi_dcmpgt>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d0bf      	beq.n	800a030 <floor+0x48>
 800a0b0:	2c00      	cmp	r4, #0
 800a0b2:	da02      	bge.n	800a0ba <floor+0xd2>
 800a0b4:	2e14      	cmp	r6, #20
 800a0b6:	d103      	bne.n	800a0c0 <floor+0xd8>
 800a0b8:	3401      	adds	r4, #1
 800a0ba:	ea25 0507 	bic.w	r5, r5, r7
 800a0be:	e7b7      	b.n	800a030 <floor+0x48>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a0c6:	fa03 f606 	lsl.w	r6, r3, r6
 800a0ca:	4435      	add	r5, r6
 800a0cc:	4545      	cmp	r5, r8
 800a0ce:	bf38      	it	cc
 800a0d0:	18e4      	addcc	r4, r4, r3
 800a0d2:	e7f2      	b.n	800a0ba <floor+0xd2>
 800a0d4:	2500      	movs	r5, #0
 800a0d6:	462c      	mov	r4, r5
 800a0d8:	e7aa      	b.n	800a030 <floor+0x48>
 800a0da:	bf00      	nop
 800a0dc:	f3af 8000 	nop.w
 800a0e0:	8800759c 	.word	0x8800759c
 800a0e4:	7e37e43c 	.word	0x7e37e43c
 800a0e8:	bff00000 	.word	0xbff00000
 800a0ec:	000fffff 	.word	0x000fffff

0800a0f0 <scalbn>:
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	ec55 4b10 	vmov	r4, r5, d0
 800a0f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	462b      	mov	r3, r5
 800a0fe:	b9aa      	cbnz	r2, 800a12c <scalbn+0x3c>
 800a100:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a104:	4323      	orrs	r3, r4
 800a106:	d03b      	beq.n	800a180 <scalbn+0x90>
 800a108:	4b31      	ldr	r3, [pc, #196]	; (800a1d0 <scalbn+0xe0>)
 800a10a:	4629      	mov	r1, r5
 800a10c:	2200      	movs	r2, #0
 800a10e:	ee10 0a10 	vmov	r0, s0
 800a112:	f7f6 fa71 	bl	80005f8 <__aeabi_dmul>
 800a116:	4b2f      	ldr	r3, [pc, #188]	; (800a1d4 <scalbn+0xe4>)
 800a118:	429e      	cmp	r6, r3
 800a11a:	4604      	mov	r4, r0
 800a11c:	460d      	mov	r5, r1
 800a11e:	da12      	bge.n	800a146 <scalbn+0x56>
 800a120:	a327      	add	r3, pc, #156	; (adr r3, 800a1c0 <scalbn+0xd0>)
 800a122:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a126:	f7f6 fa67 	bl	80005f8 <__aeabi_dmul>
 800a12a:	e009      	b.n	800a140 <scalbn+0x50>
 800a12c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a130:	428a      	cmp	r2, r1
 800a132:	d10c      	bne.n	800a14e <scalbn+0x5e>
 800a134:	ee10 2a10 	vmov	r2, s0
 800a138:	4620      	mov	r0, r4
 800a13a:	4629      	mov	r1, r5
 800a13c:	f7f6 f8a6 	bl	800028c <__adddf3>
 800a140:	4604      	mov	r4, r0
 800a142:	460d      	mov	r5, r1
 800a144:	e01c      	b.n	800a180 <scalbn+0x90>
 800a146:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a14a:	460b      	mov	r3, r1
 800a14c:	3a36      	subs	r2, #54	; 0x36
 800a14e:	4432      	add	r2, r6
 800a150:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a154:	428a      	cmp	r2, r1
 800a156:	dd0b      	ble.n	800a170 <scalbn+0x80>
 800a158:	ec45 4b11 	vmov	d1, r4, r5
 800a15c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a1c8 <scalbn+0xd8>
 800a160:	f000 f83c 	bl	800a1dc <copysign>
 800a164:	a318      	add	r3, pc, #96	; (adr r3, 800a1c8 <scalbn+0xd8>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	ec51 0b10 	vmov	r0, r1, d0
 800a16e:	e7da      	b.n	800a126 <scalbn+0x36>
 800a170:	2a00      	cmp	r2, #0
 800a172:	dd08      	ble.n	800a186 <scalbn+0x96>
 800a174:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a178:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a17c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a180:	ec45 4b10 	vmov	d0, r4, r5
 800a184:	bd70      	pop	{r4, r5, r6, pc}
 800a186:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a18a:	da0d      	bge.n	800a1a8 <scalbn+0xb8>
 800a18c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a190:	429e      	cmp	r6, r3
 800a192:	ec45 4b11 	vmov	d1, r4, r5
 800a196:	dce1      	bgt.n	800a15c <scalbn+0x6c>
 800a198:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a1c0 <scalbn+0xd0>
 800a19c:	f000 f81e 	bl	800a1dc <copysign>
 800a1a0:	a307      	add	r3, pc, #28	; (adr r3, 800a1c0 <scalbn+0xd0>)
 800a1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a6:	e7e0      	b.n	800a16a <scalbn+0x7a>
 800a1a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1ac:	3236      	adds	r2, #54	; 0x36
 800a1ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a1b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a1b6:	4620      	mov	r0, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <scalbn+0xe8>)
 800a1be:	e7b2      	b.n	800a126 <scalbn+0x36>
 800a1c0:	c2f8f359 	.word	0xc2f8f359
 800a1c4:	01a56e1f 	.word	0x01a56e1f
 800a1c8:	8800759c 	.word	0x8800759c
 800a1cc:	7e37e43c 	.word	0x7e37e43c
 800a1d0:	43500000 	.word	0x43500000
 800a1d4:	ffff3cb0 	.word	0xffff3cb0
 800a1d8:	3c900000 	.word	0x3c900000

0800a1dc <copysign>:
 800a1dc:	ec51 0b10 	vmov	r0, r1, d0
 800a1e0:	ee11 0a90 	vmov	r0, s3
 800a1e4:	ee10 2a10 	vmov	r2, s0
 800a1e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a1ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a1f0:	ea41 0300 	orr.w	r3, r1, r0
 800a1f4:	ec43 2b10 	vmov	d0, r2, r3
 800a1f8:	4770      	bx	lr
	...

0800a1fc <_init>:
 800a1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1fe:	bf00      	nop
 800a200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a202:	bc08      	pop	{r3}
 800a204:	469e      	mov	lr, r3
 800a206:	4770      	bx	lr

0800a208 <_fini>:
 800a208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a20a:	bf00      	nop
 800a20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a20e:	bc08      	pop	{r3}
 800a210:	469e      	mov	lr, r3
 800a212:	4770      	bx	lr
