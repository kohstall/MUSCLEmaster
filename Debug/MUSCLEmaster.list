
MUSCLEmaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eb94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  0800ed28  0800ed28  0001ed28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f268  0800f268  000200b8  2**0
                  CONTENTS
  4 .ARM          00000008  0800f268  0800f268  0001f268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f270  0800f270  000200b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f270  0800f270  0001f270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f274  0800f274  0001f274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  0800f278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002490  200000b8  0800f330  000200b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002548  0800f330  00022548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a407  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002eaa  00000000  00000000  0003a4ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018a8  00000000  00000000  0003d3a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001778  00000000  00000000  0003ec48  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022cd8  00000000  00000000  000403c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000126d9  00000000  00000000  00063098  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ee7  00000000  00000000  00075771  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00149658  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073ec  00000000  00000000  001496d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b8 	.word	0x200000b8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ed0c 	.word	0x0800ed0c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000bc 	.word	0x200000bc
 80001cc:	0800ed0c 	.word	0x0800ed0c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b972 	b.w	8000f44 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	4688      	mov	r8, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14b      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4615      	mov	r5, r2
 8000c8a:	d967      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0720 	rsb	r7, r2, #32
 8000c96:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c9e:	4095      	lsls	r5, r2
 8000ca0:	ea47 0803 	orr.w	r8, r7, r3
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb0:	fa1f fc85 	uxth.w	ip, r5
 8000cb4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cb8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18eb      	adds	r3, r5, r3
 8000cc6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000cca:	f080 811b 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8118 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000cd4:	3f02      	subs	r7, #2
 8000cd6:	442b      	add	r3, r5
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cec:	45a4      	cmp	ip, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	192c      	adds	r4, r5, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8107 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	f240 8104 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000d00:	3802      	subs	r0, #2
 8000d02:	442c      	add	r4, r5
 8000d04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d08:	eba4 040c 	sub.w	r4, r4, ip
 8000d0c:	2700      	movs	r7, #0
 8000d0e:	b11e      	cbz	r6, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c6 4300 	strd	r4, r3, [r6]
 8000d18:	4639      	mov	r1, r7
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d909      	bls.n	8000d36 <__udivmoddi4+0xbe>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80eb 	beq.w	8000efe <__udivmoddi4+0x286>
 8000d28:	2700      	movs	r7, #0
 8000d2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d2e:	4638      	mov	r0, r7
 8000d30:	4639      	mov	r1, r7
 8000d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d36:	fab3 f783 	clz	r7, r3
 8000d3a:	2f00      	cmp	r7, #0
 8000d3c:	d147      	bne.n	8000dce <__udivmoddi4+0x156>
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d302      	bcc.n	8000d48 <__udivmoddi4+0xd0>
 8000d42:	4282      	cmp	r2, r0
 8000d44:	f200 80fa 	bhi.w	8000f3c <__udivmoddi4+0x2c4>
 8000d48:	1a84      	subs	r4, r0, r2
 8000d4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d4e:	2001      	movs	r0, #1
 8000d50:	4698      	mov	r8, r3
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	d0e0      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000d56:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5a:	e7dd      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000d5c:	b902      	cbnz	r2, 8000d60 <__udivmoddi4+0xe8>
 8000d5e:	deff      	udf	#255	; 0xff
 8000d60:	fab2 f282 	clz	r2, r2
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f040 808f 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d6a:	1b49      	subs	r1, r1, r5
 8000d6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d70:	fa1f f885 	uxth.w	r8, r5
 8000d74:	2701      	movs	r7, #1
 8000d76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7a:	0c23      	lsrs	r3, r4, #16
 8000d7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d84:	fb08 f10c 	mul.w	r1, r8, ip
 8000d88:	4299      	cmp	r1, r3
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8c:	18eb      	adds	r3, r5, r3
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4299      	cmp	r1, r3
 8000d96:	f200 80cd 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1a59      	subs	r1, r3, r1
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000da8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x14c>
 8000db4:	192c      	adds	r4, r5, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x14a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80b6 	bhi.w	8000f2e <__udivmoddi4+0x2b6>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e79f      	b.n	8000d0e <__udivmoddi4+0x96>
 8000dce:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd2:	40bb      	lsls	r3, r7
 8000dd4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000dd8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000ddc:	fa01 f407 	lsl.w	r4, r1, r7
 8000de0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000de8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dec:	4325      	orrs	r5, r4
 8000dee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df2:	0c2c      	lsrs	r4, r5, #16
 8000df4:	fb08 3319 	mls	r3, r8, r9, r3
 8000df8:	fa1f fa8e 	uxth.w	sl, lr
 8000dfc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e00:	fb09 f40a 	mul.w	r4, r9, sl
 8000e04:	429c      	cmp	r4, r3
 8000e06:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1e 0303 	adds.w	r3, lr, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	f080 8087 	bcs.w	8000f2a <__udivmoddi4+0x2b2>
 8000e1c:	429c      	cmp	r4, r3
 8000e1e:	f240 8084 	bls.w	8000f2a <__udivmoddi4+0x2b2>
 8000e22:	f1a9 0902 	sub.w	r9, r9, #2
 8000e26:	4473      	add	r3, lr
 8000e28:	1b1b      	subs	r3, r3, r4
 8000e2a:	b2ad      	uxth	r5, r5
 8000e2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e30:	fb08 3310 	mls	r3, r8, r0, r3
 8000e34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e3c:	45a2      	cmp	sl, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1e 0404 	adds.w	r4, lr, r4
 8000e44:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e48:	d26b      	bcs.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4a:	45a2      	cmp	sl, r4
 8000e4c:	d969      	bls.n	8000f22 <__udivmoddi4+0x2aa>
 8000e4e:	3802      	subs	r0, #2
 8000e50:	4474      	add	r4, lr
 8000e52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	eba4 040a 	sub.w	r4, r4, sl
 8000e5e:	454c      	cmp	r4, r9
 8000e60:	46c2      	mov	sl, r8
 8000e62:	464b      	mov	r3, r9
 8000e64:	d354      	bcc.n	8000f10 <__udivmoddi4+0x298>
 8000e66:	d051      	beq.n	8000f0c <__udivmoddi4+0x294>
 8000e68:	2e00      	cmp	r6, #0
 8000e6a:	d069      	beq.n	8000f40 <__udivmoddi4+0x2c8>
 8000e6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e70:	eb64 0403 	sbc.w	r4, r4, r3
 8000e74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e78:	40fd      	lsrs	r5, r7
 8000e7a:	40fc      	lsrs	r4, r7
 8000e7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e80:	e9c6 5400 	strd	r5, r4, [r6]
 8000e84:	2700      	movs	r7, #0
 8000e86:	e747      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000e88:	f1c2 0320 	rsb	r3, r2, #32
 8000e8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e90:	4095      	lsls	r5, r2
 8000e92:	fa01 f002 	lsl.w	r0, r1, r2
 8000e96:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e9e:	4338      	orrs	r0, r7
 8000ea0:	0c01      	lsrs	r1, r0, #16
 8000ea2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ea6:	fa1f f885 	uxth.w	r8, r5
 8000eaa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb2:	fb07 f308 	mul.w	r3, r7, r8
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x256>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000ec4:	d22f      	bcs.n	8000f26 <__udivmoddi4+0x2ae>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d92d      	bls.n	8000f26 <__udivmoddi4+0x2ae>
 8000eca:	3f02      	subs	r7, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1acb      	subs	r3, r1, r3
 8000ed0:	b281      	uxth	r1, r0
 8000ed2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ed6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ede:	fb00 f308 	mul.w	r3, r0, r8
 8000ee2:	428b      	cmp	r3, r1
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x27e>
 8000ee6:	1869      	adds	r1, r5, r1
 8000ee8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000eec:	d217      	bcs.n	8000f1e <__udivmoddi4+0x2a6>
 8000eee:	428b      	cmp	r3, r1
 8000ef0:	d915      	bls.n	8000f1e <__udivmoddi4+0x2a6>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4429      	add	r1, r5
 8000ef6:	1ac9      	subs	r1, r1, r3
 8000ef8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000efc:	e73b      	b.n	8000d76 <__udivmoddi4+0xfe>
 8000efe:	4637      	mov	r7, r6
 8000f00:	4630      	mov	r0, r6
 8000f02:	e709      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f04:	4607      	mov	r7, r0
 8000f06:	e6e7      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fb      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f0c:	4541      	cmp	r1, r8
 8000f0e:	d2ab      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f10:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f14:	eb69 020e 	sbc.w	r2, r9, lr
 8000f18:	3801      	subs	r0, #1
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	e7a4      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f1e:	4660      	mov	r0, ip
 8000f20:	e7e9      	b.n	8000ef6 <__udivmoddi4+0x27e>
 8000f22:	4618      	mov	r0, r3
 8000f24:	e795      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f26:	4667      	mov	r7, ip
 8000f28:	e7d1      	b.n	8000ece <__udivmoddi4+0x256>
 8000f2a:	4681      	mov	r9, r0
 8000f2c:	e77c      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f2e:	3802      	subs	r0, #2
 8000f30:	442c      	add	r4, r5
 8000f32:	e747      	b.n	8000dc4 <__udivmoddi4+0x14c>
 8000f34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f38:	442b      	add	r3, r5
 8000f3a:	e72f      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	e708      	b.n	8000d52 <__udivmoddi4+0xda>
 8000f40:	4637      	mov	r7, r6
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0xa0>

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	; (8000f88 <HAL_Init+0x40>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <HAL_Init+0x40>)
 8000f52:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f56:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f58:	4b0b      	ldr	r3, [pc, #44]	; (8000f88 <HAL_Init+0x40>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_Init+0x40>)
 8000f5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f62:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <HAL_Init+0x40>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a07      	ldr	r2, [pc, #28]	; (8000f88 <HAL_Init+0x40>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f70:	2003      	movs	r0, #3
 8000f72:	f001 fddf 	bl	8002b34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f76:	2000      	movs	r0, #0
 8000f78:	f000 f808 	bl	8000f8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f7c:	f00b fa1c 	bl	800c3b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	40023c00 	.word	0x40023c00

08000f8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_InitTick+0x54>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b12      	ldr	r3, [pc, #72]	; (8000fe4 <HAL_InitTick+0x58>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fdf7 	bl	8002b9e <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e00e      	b.n	8000fd8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2b0f      	cmp	r3, #15
 8000fbe:	d80a      	bhi.n	8000fd6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	6879      	ldr	r1, [r7, #4]
 8000fc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fc8:	f001 fdbf 	bl	8002b4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <HAL_InitTick+0x5c>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	e000      	b.n	8000fd8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	2000004c 	.word	0x2000004c
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	20000000 	.word	0x20000000

08000fec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <HAL_IncTick+0x20>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x24>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a04      	ldr	r2, [pc, #16]	; (8001010 <HAL_IncTick+0x24>)
 8000ffe:	6013      	str	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000004 	.word	0x20000004
 8001010:	20000190 	.word	0x20000190

08001014 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_GetTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	20000190 	.word	0x20000190

0800102c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001034:	f7ff ffee 	bl	8001014 <HAL_GetTick>
 8001038:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001044:	d005      	beq.n	8001052 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_Delay+0x40>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	461a      	mov	r2, r3
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001052:	bf00      	nop
 8001054:	f7ff ffde 	bl	8001014 <HAL_GetTick>
 8001058:	4602      	mov	r2, r0
 800105a:	68bb      	ldr	r3, [r7, #8]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	429a      	cmp	r2, r3
 8001062:	d8f7      	bhi.n	8001054 <HAL_Delay+0x28>
  {
  }
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	20000004 	.word	0x20000004

08001070 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001078:	2300      	movs	r3, #0
 800107a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d101      	bne.n	8001086 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
 8001084:	e033      	b.n	80010ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	2b00      	cmp	r3, #0
 800108c:	d109      	bne.n	80010a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f00b f9ba 	bl	800c408 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d118      	bne.n	80010e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80010b6:	f023 0302 	bic.w	r3, r3, #2
 80010ba:	f043 0202 	orr.w	r2, r3, #2
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f000 fb94 	bl	80017f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	2200      	movs	r2, #0
 80010cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	f023 0303 	bic.w	r3, r3, #3
 80010d6:	f043 0201 	orr.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	641a      	str	r2, [r3, #64]	; 0x40
 80010de:	e001      	b.n	80010e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3710      	adds	r7, #16
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b084      	sub	sp, #16
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80010fe:	2300      	movs	r3, #0
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0302 	and.w	r3, r3, #2
 8001110:	2b02      	cmp	r3, #2
 8001112:	bf0c      	ite	eq
 8001114:	2301      	moveq	r3, #1
 8001116:	2300      	movne	r3, #0
 8001118:	b2db      	uxtb	r3, r3
 800111a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f003 0320 	and.w	r3, r3, #32
 8001126:	2b20      	cmp	r3, #32
 8001128:	bf0c      	ite	eq
 800112a:	2301      	moveq	r3, #1
 800112c:	2300      	movne	r3, #0
 800112e:	b2db      	uxtb	r3, r3
 8001130:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d049      	beq.n	80011cc <HAL_ADC_IRQHandler+0xd6>
 8001138:	68bb      	ldr	r3, [r7, #8]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d046      	beq.n	80011cc <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001142:	f003 0310 	and.w	r3, r3, #16
 8001146:	2b00      	cmp	r3, #0
 8001148:	d105      	bne.n	8001156 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001160:	2b00      	cmp	r3, #0
 8001162:	d12b      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001168:	2b00      	cmp	r3, #0
 800116a:	d127      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001172:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001176:	2b00      	cmp	r3, #0
 8001178:	d006      	beq.n	8001188 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001184:	2b00      	cmp	r3, #0
 8001186:	d119      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f022 0220 	bic.w	r2, r2, #32
 8001196:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	f043 0201 	orr.w	r2, r3, #1
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f9cd 	bl	800155c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f06f 0212 	mvn.w	r2, #18
 80011ca:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 0304 	and.w	r3, r3, #4
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	bf0c      	ite	eq
 80011da:	2301      	moveq	r3, #1
 80011dc:	2300      	movne	r3, #0
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ec:	2b80      	cmp	r3, #128	; 0x80
 80011ee:	bf0c      	ite	eq
 80011f0:	2301      	moveq	r3, #1
 80011f2:	2300      	movne	r3, #0
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d057      	beq.n	80012ae <HAL_ADC_IRQHandler+0x1b8>
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d054      	beq.n	80012ae <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d139      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001230:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001234:	2b00      	cmp	r3, #0
 8001236:	d006      	beq.n	8001246 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001242:	2b00      	cmp	r3, #0
 8001244:	d12b      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001250:	2b00      	cmp	r3, #0
 8001252:	d124      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800125e:	2b00      	cmp	r3, #0
 8001260:	d11d      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001266:	2b00      	cmp	r3, #0
 8001268:	d119      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	685a      	ldr	r2, [r3, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001278:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d105      	bne.n	800129e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f043 0201 	orr.w	r2, r3, #1
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fd1a 	bl	8001cd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f06f 020c 	mvn.w	r2, #12
 80012ac:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0301 	and.w	r3, r3, #1
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	bf0c      	ite	eq
 80012bc:	2301      	moveq	r3, #1
 80012be:	2300      	movne	r3, #0
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012ce:	2b40      	cmp	r3, #64	; 0x40
 80012d0:	bf0c      	ite	eq
 80012d2:	2301      	moveq	r3, #1
 80012d4:	2300      	movne	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d017      	beq.n	8001310 <HAL_ADC_IRQHandler+0x21a>
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d014      	beq.n	8001310 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d10d      	bne.n	8001310 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f000 f93f 	bl	8001584 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f06f 0201 	mvn.w	r2, #1
 800130e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0320 	and.w	r3, r3, #32
 800131a:	2b20      	cmp	r3, #32
 800131c:	bf0c      	ite	eq
 800131e:	2301      	moveq	r3, #1
 8001320:	2300      	movne	r3, #0
 8001322:	b2db      	uxtb	r3, r3
 8001324:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d015      	beq.n	8001370 <HAL_ADC_IRQHandler+0x27a>
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d012      	beq.n	8001370 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134e:	f043 0202 	orr.w	r2, r3, #2
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f06f 0220 	mvn.w	r2, #32
 800135e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f919 	bl	8001598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f06f 0220 	mvn.w	r2, #32
 800136e:	601a      	str	r2, [r3, #0]
  }
}
 8001370:	bf00      	nop
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af00      	add	r7, sp, #0
 800137e:	60f8      	str	r0, [r7, #12]
 8001380:	60b9      	str	r1, [r7, #8]
 8001382:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800138e:	2b01      	cmp	r3, #1
 8001390:	d101      	bne.n	8001396 <HAL_ADC_Start_DMA+0x1e>
 8001392:	2302      	movs	r3, #2
 8001394:	e0cc      	b.n	8001530 <HAL_ADC_Start_DMA+0x1b8>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2201      	movs	r2, #1
 800139a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	2b01      	cmp	r3, #1
 80013aa:	d018      	beq.n	80013de <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	689a      	ldr	r2, [r3, #8]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f042 0201 	orr.w	r2, r2, #1
 80013ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013bc:	4b5e      	ldr	r3, [pc, #376]	; (8001538 <HAL_ADC_Start_DMA+0x1c0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a5e      	ldr	r2, [pc, #376]	; (800153c <HAL_ADC_Start_DMA+0x1c4>)
 80013c2:	fba2 2303 	umull	r2, r3, r2, r3
 80013c6:	0c9a      	lsrs	r2, r3, #18
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013d0:	e002      	b.n	80013d8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	3b01      	subs	r3, #1
 80013d6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f9      	bne.n	80013d2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 0301 	and.w	r3, r3, #1
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	f040 80a0 	bne.w	800152e <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80013f6:	f023 0301 	bic.w	r3, r3, #1
 80013fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800140c:	2b00      	cmp	r3, #0
 800140e:	d007      	beq.n	8001420 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001414:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001418:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001424:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800142c:	d106      	bne.n	800143c <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001432:	f023 0206 	bic.w	r2, r3, #6
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	645a      	str	r2, [r3, #68]	; 0x44
 800143a:	e002      	b.n	8001442 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	2200      	movs	r2, #0
 8001440:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2200      	movs	r2, #0
 8001446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800144a:	4b3d      	ldr	r3, [pc, #244]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 800144c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	4a3c      	ldr	r2, [pc, #240]	; (8001544 <HAL_ADC_Start_DMA+0x1cc>)
 8001454:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	4a3b      	ldr	r2, [pc, #236]	; (8001548 <HAL_ADC_Start_DMA+0x1d0>)
 800145c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	4a3a      	ldr	r2, [pc, #232]	; (800154c <HAL_ADC_Start_DMA+0x1d4>)
 8001464:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800146e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	685a      	ldr	r2, [r3, #4]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800147e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800148e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	334c      	adds	r3, #76	; 0x4c
 800149a:	4619      	mov	r1, r3
 800149c:	68ba      	ldr	r2, [r7, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f001 fc38 	bl	8002d14 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 031f 	and.w	r3, r3, #31
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d12a      	bne.n	8001506 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a26      	ldr	r2, [pc, #152]	; (8001550 <HAL_ADC_Start_DMA+0x1d8>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d015      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x16e>
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a25      	ldr	r2, [pc, #148]	; (8001554 <HAL_ADC_Start_DMA+0x1dc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d105      	bne.n	80014d0 <HAL_ADC_Start_DMA+0x158>
 80014c4:	4b1e      	ldr	r3, [pc, #120]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d00a      	beq.n	80014e6 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a20      	ldr	r2, [pc, #128]	; (8001558 <HAL_ADC_Start_DMA+0x1e0>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d129      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
 80014da:	4b19      	ldr	r3, [pc, #100]	; (8001540 <HAL_ADC_Start_DMA+0x1c8>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	f003 031f 	and.w	r3, r3, #31
 80014e2:	2b0f      	cmp	r3, #15
 80014e4:	d823      	bhi.n	800152e <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11c      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e013      	b.n	800152e <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	4a11      	ldr	r2, [pc, #68]	; (8001550 <HAL_ADC_Start_DMA+0x1d8>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d10e      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d107      	bne.n	800152e <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689a      	ldr	r2, [r3, #8]
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800152c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3718      	adds	r7, #24
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}
 8001538:	2000004c 	.word	0x2000004c
 800153c:	431bde83 	.word	0x431bde83
 8001540:	40012300 	.word	0x40012300
 8001544:	080019e9 	.word	0x080019e9
 8001548:	08001aa3 	.word	0x08001aa3
 800154c:	08001abf 	.word	0x08001abf
 8001550:	40012000 	.word	0x40012000
 8001554:	40012100 	.word	0x40012100
 8001558:	40012200 	.word	0x40012200

0800155c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e105      	b.n	80017d4 <HAL_ADC_ConfigChannel+0x228>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d925      	bls.n	8001624 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	68d9      	ldr	r1, [r3, #12]
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	4613      	mov	r3, r2
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	4413      	add	r3, r2
 80015ec:	3b1e      	subs	r3, #30
 80015ee:	2207      	movs	r2, #7
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43da      	mvns	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	400a      	ands	r2, r1
 80015fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68d9      	ldr	r1, [r3, #12]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	b29b      	uxth	r3, r3
 800160e:	4618      	mov	r0, r3
 8001610:	4603      	mov	r3, r0
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4403      	add	r3, r0
 8001616:	3b1e      	subs	r3, #30
 8001618:	409a      	lsls	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	430a      	orrs	r2, r1
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	e022      	b.n	800166a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6919      	ldr	r1, [r3, #16]
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	b29b      	uxth	r3, r3
 8001630:	461a      	mov	r2, r3
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	2207      	movs	r2, #7
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43da      	mvns	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	400a      	ands	r2, r1
 8001646:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	6919      	ldr	r1, [r3, #16]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	689a      	ldr	r2, [r3, #8]
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	b29b      	uxth	r3, r3
 8001658:	4618      	mov	r0, r3
 800165a:	4603      	mov	r3, r0
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4403      	add	r3, r0
 8001660:	409a      	lsls	r2, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b06      	cmp	r3, #6
 8001670:	d824      	bhi.n	80016bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685a      	ldr	r2, [r3, #4]
 800167c:	4613      	mov	r3, r2
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	4413      	add	r3, r2
 8001682:	3b05      	subs	r3, #5
 8001684:	221f      	movs	r2, #31
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	400a      	ands	r2, r1
 8001692:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	b29b      	uxth	r3, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b05      	subs	r3, #5
 80016ae:	fa00 f203 	lsl.w	r2, r0, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	635a      	str	r2, [r3, #52]	; 0x34
 80016ba:	e04c      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	2b0c      	cmp	r3, #12
 80016c2:	d824      	bhi.n	800170e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	3b23      	subs	r3, #35	; 0x23
 80016d6:	221f      	movs	r2, #31
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43da      	mvns	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	400a      	ands	r2, r1
 80016e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	b29b      	uxth	r3, r3
 80016f2:	4618      	mov	r0, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b23      	subs	r3, #35	; 0x23
 8001700:	fa00 f203 	lsl.w	r2, r0, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	430a      	orrs	r2, r1
 800170a:	631a      	str	r2, [r3, #48]	; 0x30
 800170c:	e023      	b.n	8001756 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	3b41      	subs	r3, #65	; 0x41
 8001720:	221f      	movs	r2, #31
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	400a      	ands	r2, r1
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4618      	mov	r0, r3
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	; 0x41
 800174a:	fa00 f203 	lsl.w	r2, r0, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	430a      	orrs	r2, r1
 8001754:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001756:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_ADC_ConfigChannel+0x234>)
 8001758:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a21      	ldr	r2, [pc, #132]	; (80017e4 <HAL_ADC_ConfigChannel+0x238>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d109      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1cc>
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2b12      	cmp	r3, #18
 800176a:	d105      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <HAL_ADC_ConfigChannel+0x238>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d123      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b10      	cmp	r3, #16
 8001788:	d003      	beq.n	8001792 <HAL_ADC_ConfigChannel+0x1e6>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	2b11      	cmp	r3, #17
 8001790:	d11b      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2b10      	cmp	r3, #16
 80017a4:	d111      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_ADC_ConfigChannel+0x23c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a10      	ldr	r2, [pc, #64]	; (80017ec <HAL_ADC_ConfigChannel+0x240>)
 80017ac:	fba2 2303 	umull	r2, r3, r2, r3
 80017b0:	0c9a      	lsrs	r2, r3, #18
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017bc:	e002      	b.n	80017c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3b01      	subs	r3, #1
 80017c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f9      	bne.n	80017be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr
 80017e0:	40012300 	.word	0x40012300
 80017e4:	40012000 	.word	0x40012000
 80017e8:	2000004c 	.word	0x2000004c
 80017ec:	431bde83 	.word	0x431bde83

080017f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b085      	sub	sp, #20
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f8:	4b79      	ldr	r3, [pc, #484]	; (80019e0 <ADC_Init+0x1f0>)
 80017fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	431a      	orrs	r2, r3
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001824:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	691b      	ldr	r3, [r3, #16]
 8001830:	021a      	lsls	r2, r3, #8
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001848:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	430a      	orrs	r2, r1
 800185a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689a      	ldr	r2, [r3, #8]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800186a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6899      	ldr	r1, [r3, #8]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	4a58      	ldr	r2, [pc, #352]	; (80019e4 <ADC_Init+0x1f4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d022      	beq.n	80018ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	689a      	ldr	r2, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001896:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6899      	ldr	r1, [r3, #8]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	e00f      	b.n	80018ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f022 0202 	bic.w	r2, r2, #2
 80018fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	7e1b      	ldrb	r3, [r3, #24]
 8001908:	005a      	lsls	r2, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	430a      	orrs	r2, r1
 8001910:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d01b      	beq.n	8001954 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	685a      	ldr	r2, [r3, #4]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800192a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800193a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6859      	ldr	r1, [r3, #4]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001946:	3b01      	subs	r3, #1
 8001948:	035a      	lsls	r2, r3, #13
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	e007      	b.n	8001964 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	685a      	ldr	r2, [r3, #4]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001962:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	3b01      	subs	r3, #1
 8001980:	051a      	lsls	r2, r3, #20
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001998:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6899      	ldr	r1, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019a6:	025a      	lsls	r2, r3, #9
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	029a      	lsls	r2, r3, #10
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	430a      	orrs	r2, r1
 80019d2:	609a      	str	r2, [r3, #8]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40012300 	.word	0x40012300
 80019e4:	0f000001 	.word	0x0f000001

080019e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d13c      	bne.n	8001a7c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d12b      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d127      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a2a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d006      	beq.n	8001a40 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d119      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f022 0220 	bic.w	r2, r2, #32
 8001a4e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d105      	bne.n	8001a74 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f043 0201 	orr.w	r2, r3, #1
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f7ff fd71 	bl	800155c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001a7a:	e00e      	b.n	8001a9a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 0310 	and.w	r3, r3, #16
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d003      	beq.n	8001a90 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff fd85 	bl	8001598 <HAL_ADC_ErrorCallback>
}
 8001a8e:	e004      	b.n	8001a9a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	4798      	blx	r3
}
 8001a9a:	bf00      	nop
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b084      	sub	sp, #16
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f7ff fd5d 	bl	8001570 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ab6:	bf00      	nop
 8001ab8:	3710      	adds	r7, #16
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aca:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2240      	movs	r2, #64	; 0x40
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f043 0204 	orr.w	r2, r3, #4
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff fd5a 	bl	8001598 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001ae4:	bf00      	nop
 8001ae6:	3710      	adds	r7, #16
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <HAL_ADCEx_InjectedStart>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  ADC_Common_TypeDef *tmpADC_Common;
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d101      	bne.n	8001b0e <HAL_ADCEx_InjectedStart+0x22>
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	e09d      	b.n	8001c4a <HAL_ADCEx_InjectedStart+0x15e>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d018      	beq.n	8001b56 <HAL_ADCEx_InjectedStart+0x6a>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	689a      	ldr	r2, [r3, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <HAL_ADCEx_InjectedStart+0x16c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a48      	ldr	r2, [pc, #288]	; (8001c5c <HAL_ADCEx_InjectedStart+0x170>)
 8001b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3e:	0c9a      	lsrs	r2, r3, #18
 8001b40:	4613      	mov	r3, r2
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	4413      	add	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b48:	e002      	b.n	8001b50 <HAL_ADCEx_InjectedStart+0x64>
    {
      counter--;
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <HAL_ADCEx_InjectedStart+0x5e>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d171      	bne.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to injected group conversion results    */
    /* - Set state bitfield related to injected operation                     */
    ADC_STATE_CLR_SET(hadc->State,
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Check if a regular conversion is ongoing */
    /* Note: On this device, there is no ADC error code fields related to     */
    /*       conversions on group injected only. In case of conversion on     */
    /*       going on group regular, no error code is reset.                  */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d102      	bne.n	8001b8a <HAL_ADCEx_InjectedStart+0x9e>
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear injected group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0204 	mvn.w	r2, #4
 8001b9a:	601a      	str	r2, [r3, #0]

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b9c:	4b30      	ldr	r3, [pc, #192]	; (8001c60 <HAL_ADCEx_InjectedStart+0x174>)
 8001b9e:	60fb      	str	r3, [r7, #12]

    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 031f 	and.w	r3, r3, #31
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d124      	bne.n	8001bf6 <HAL_ADCEx_InjectedStart+0x10a>
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bf0c      	ite	eq
 8001bba:	2301      	moveq	r3, #1
 8001bbc:	2300      	movne	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bf0c      	ite	eq
 8001bd0:	2301      	moveq	r3, #1
 8001bd2:	2300      	movne	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	613b      	str	r3, [r7, #16]
      if(tmp1 && tmp2)
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d034      	beq.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d031      	beq.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001bf2:	609a      	str	r2, [r3, #8]
 8001bf4:	e028      	b.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
      }
    }
    else
    {
      tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	617b      	str	r3, [r7, #20]
      tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bf0c      	ite	eq
 8001c1a:	2301      	moveq	r3, #1
 8001c1c:	2300      	movne	r3, #0
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	613b      	str	r3, [r7, #16]
      if((hadc->Instance == ADC1) && tmp1 && tmp2)  
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a0f      	ldr	r2, [pc, #60]	; (8001c64 <HAL_ADCEx_InjectedStart+0x178>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d10d      	bne.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d00a      	beq.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_ADCEx_InjectedStart+0x15c>
      {
        /* Enable the selected ADC software conversion for injected group */
        hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c46:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	371c      	adds	r7, #28
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	2000004c 	.word	0x2000004c
 8001c5c:	431bde83 	.word	0x431bde83
 8001c60:	40012300 	.word	0x40012300
 8001c64:	40012000 	.word	0x40012000

08001c68 <HAL_ADCEx_InjectedGetValue>:
  *            @arg ADC_INJECTED_RANK_3: Injected Channel3 selected
  *            @arg ADC_INJECTED_RANK_4: Injected Channel4 selected
  * @retval None
  */
uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
  
  /* Clear injected group conversion flag to have similar behaviour as        */
  /* regular group: reading data register also clears end of conversion flag. */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f06f 0204 	mvn.w	r2, #4
 8001c7e:	601a      	str	r2, [r3, #0]
  
  /* Return the selected ADC converted value */ 
  switch(InjectedRank)
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d81f      	bhi.n	8001cc8 <HAL_ADCEx_InjectedGetValue+0x60>
 8001c88:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <HAL_ADCEx_InjectedGetValue+0x28>)
 8001c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c8e:	bf00      	nop
 8001c90:	08001cbf 	.word	0x08001cbf
 8001c94:	08001cb5 	.word	0x08001cb5
 8001c98:	08001cab 	.word	0x08001cab
 8001c9c:	08001ca1 	.word	0x08001ca1
  {  
    case ADC_INJECTED_RANK_4:
    {
      tmp =  hadc->Instance->JDR4;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ca6:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001ca8:	e00f      	b.n	8001cca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_3: 
    {  
      tmp =  hadc->Instance->JDR3;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb0:	60fb      	str	r3, [r7, #12]
    }  
    break;
 8001cb2:	e00a      	b.n	8001cca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_2: 
    {  
      tmp =  hadc->Instance->JDR2;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cbc:	e005      	b.n	8001cca <HAL_ADCEx_InjectedGetValue+0x62>
    case ADC_INJECTED_RANK_1:
    {
      tmp =  hadc->Instance->JDR1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cc4:	60fb      	str	r3, [r7, #12]
    }
    break;
 8001cc6:	e000      	b.n	8001cca <HAL_ADCEx_InjectedGetValue+0x62>
    default:
    break;  
 8001cc8:	bf00      	nop
  }
  return tmp;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d101      	bne.n	8001d04 <HAL_ADCEx_InjectedConfigChannel+0x18>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e17a      	b.n	8001ffa <HAL_ADCEx_InjectedConfigChannel+0x30e>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b09      	cmp	r3, #9
 8001d12:	d925      	bls.n	8001d60 <HAL_ADCEx_InjectedConfigChannel+0x74>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	68d9      	ldr	r1, [r3, #12]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	461a      	mov	r2, r3
 8001d22:	4613      	mov	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	3b1e      	subs	r3, #30
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	43da      	mvns	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	400a      	ands	r2, r1
 8001d38:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68d9      	ldr	r1, [r3, #12]
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	4403      	add	r3, r0
 8001d52:	3b1e      	subs	r3, #30
 8001d54:	409a      	lsls	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	e022      	b.n	8001da6 <HAL_ADCEx_InjectedConfigChannel+0xba>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	6919      	ldr	r1, [r3, #16]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4613      	mov	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4413      	add	r3, r2
 8001d74:	2207      	movs	r2, #7
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	400a      	ands	r2, r1
 8001d82:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6919      	ldr	r1, [r3, #16]
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	689a      	ldr	r2, [r3, #8]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	4618      	mov	r0, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	4403      	add	r3, r0
 8001d9c:	409a      	lsls	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	430a      	orrs	r2, r1
 8001da4:	611a      	str	r2, [r3, #16]
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001db4:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	051a      	lsls	r2, r3, #20
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	b2da      	uxtb	r2, r3
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	3303      	adds	r3, #3
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	221f      	movs	r2, #31
 8001df0:	fa02 f303 	lsl.w	r3, r2, r3
 8001df4:	43da      	mvns	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	400a      	ands	r2, r1
 8001dfc:	639a      	str	r2, [r3, #56]	; 0x38
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	3303      	adds	r3, #3
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	461a      	mov	r2, r3
 8001e22:	4613      	mov	r3, r2
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	4413      	add	r3, r2
 8001e28:	fa00 f203 	lsl.w	r2, r0, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	430a      	orrs	r2, r1
 8001e32:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a73      	ldr	r2, [pc, #460]	; (8002008 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d022      	beq.n	8001e84 <HAL_ADCEx_InjectedConfigChannel+0x198>
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e4c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6899      	ldr	r1, [r3, #8]
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	699a      	ldr	r2, [r3, #24]
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e6e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	6899      	ldr	r1, [r3, #8]
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	69da      	ldr	r2, [r3, #28]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	e00f      	b.n	8001ea4 <HAL_ADCEx_InjectedConfigChannel+0x1b8>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	689a      	ldr	r2, [r3, #8]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 8001e92:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689a      	ldr	r2, [r3, #8]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001ea2:	609a      	str	r2, [r3, #8]
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	7d5b      	ldrb	r3, [r3, #21]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_ADCEx_InjectedConfigChannel+0x1d2>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	685a      	ldr	r2, [r3, #4]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	e007      	b.n	8001ece <HAL_ADCEx_InjectedConfigChannel+0x1e2>
  }
  else
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ecc:	605a      	str	r2, [r3, #4]
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	7d1b      	ldrb	r3, [r3, #20]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d008      	beq.n	8001ee8 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	e007      	b.n	8001ef8 <HAL_ADCEx_InjectedConfigChannel+0x20c>
  }
  else
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ef6:	605a      	str	r2, [r3, #4]
  }
  
  switch(sConfigInjected->InjectedRank)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d017      	beq.n	8001f30 <HAL_ADCEx_InjectedConfigChannel+0x244>
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d029      	beq.n	8001f58 <HAL_ADCEx_InjectedConfigChannel+0x26c>
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d13b      	bne.n	8001f80 <HAL_ADCEx_InjectedConfigChannel+0x294>
  {
    case 1U:
      /* Set injected channel 1 offset */
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f16:	f023 030f 	bic.w	r3, r3, #15
 8001f1a:	6153      	str	r3, [r2, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6959      	ldr	r1, [r3, #20]
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	615a      	str	r2, [r3, #20]
      break;
 8001f2e:	e03b      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 2U:
      /* Set injected channel 2 offset */
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699b      	ldr	r3, [r3, #24]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	6812      	ldr	r2, [r2, #0]
 8001f3a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f3e:	f023 030f 	bic.w	r3, r3, #15
 8001f42:	6193      	str	r3, [r2, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6999      	ldr	r1, [r3, #24]
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	619a      	str	r2, [r3, #24]
      break;
 8001f56:	e027      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    case 3U:
      /* Set injected channel 3 offset */
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6812      	ldr	r2, [r2, #0]
 8001f62:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f66:	f023 030f 	bic.w	r3, r3, #15
 8001f6a:	61d3      	str	r3, [r2, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	69d9      	ldr	r1, [r3, #28]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	61da      	str	r2, [r3, #28]
      break;
 8001f7e:	e013      	b.n	8001fa8 <HAL_ADCEx_InjectedConfigChannel+0x2bc>
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a1b      	ldr	r3, [r3, #32]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6812      	ldr	r2, [r2, #0]
 8001f8a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001f8e:	f023 030f 	bic.w	r3, r3, #15
 8001f92:	6213      	str	r3, [r2, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a19      	ldr	r1, [r3, #32]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]
      break;
 8001fa6:	bf00      	nop
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fa8:	4b18      	ldr	r3, [pc, #96]	; (800200c <HAL_ADCEx_InjectedConfigChannel+0x320>)
 8001faa:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d109      	bne.n	8001fca <HAL_ADCEx_InjectedConfigChannel+0x2de>
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	2b12      	cmp	r3, #18
 8001fbc:	d105      	bne.n	8001fca <HAL_ADCEx_InjectedConfigChannel+0x2de>
  {
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a10      	ldr	r2, [pc, #64]	; (8002010 <HAL_ADCEx_InjectedConfigChannel+0x324>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d10d      	bne.n	8001ff0 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d003      	beq.n	8001fe4 <HAL_ADCEx_InjectedConfigChannel+0x2f8>
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	2b11      	cmp	r3, #17
 8001fe2:	d105      	bne.n	8001ff0 <HAL_ADCEx_InjectedConfigChannel+0x304>
  {
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3714      	adds	r7, #20
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	000f0001 	.word	0x000f0001
 800200c:	40012300 	.word	0x40012300
 8002010:	40012000 	.word	0x40012000

08002014 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_MODE(multimode->Mode));
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002024:	2b01      	cmp	r3, #1
 8002026:	d101      	bne.n	800202c <HAL_ADCEx_MultiModeConfigChannel+0x18>
 8002028:	2302      	movs	r3, #2
 800202a:	e031      	b.n	8002090 <HAL_ADCEx_MultiModeConfigChannel+0x7c>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002034:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_ADCEx_MultiModeConfigChannel+0x88>)
 8002036:	60fb      	str	r3, [r7, #12]

  /* Set ADC mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f023 021f 	bic.w	r2, r3, #31
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->Mode;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	431a      	orrs	r2, r3
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->DMAAccessMode;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	431a      	orrs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	605a      	str	r2, [r3, #4]
  
  /* Set delay between two sampling phases */
  tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	431a      	orrs	r2, r3
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	605a      	str	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	40012300 	.word	0x40012300

080020a0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e0ed      	b.n	800228e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d102      	bne.n	80020c4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f00a fb8e 	bl	800c7e0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0202 	bic.w	r2, r2, #2
 80020d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020d4:	f7fe ff9e 	bl	8001014 <HAL_GetTick>
 80020d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80020da:	e012      	b.n	8002102 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80020dc:	f7fe ff9a 	bl	8001014 <HAL_GetTick>
 80020e0:	4602      	mov	r2, r0
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	2b0a      	cmp	r3, #10
 80020e8:	d90b      	bls.n	8002102 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2205      	movs	r2, #5
 80020fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0c5      	b.n	800228e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	2b00      	cmp	r3, #0
 800210e:	d1e5      	bne.n	80020dc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f042 0201 	orr.w	r2, r2, #1
 800211e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002120:	f7fe ff78 	bl	8001014 <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002126:	e012      	b.n	800214e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002128:	f7fe ff74 	bl	8001014 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b0a      	cmp	r3, #10
 8002134:	d90b      	bls.n	800214e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2205      	movs	r2, #5
 8002146:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e09f      	b.n	800228e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0e5      	beq.n	8002128 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	7e1b      	ldrb	r3, [r3, #24]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d108      	bne.n	8002176 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e007      	b.n	8002186 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7e5b      	ldrb	r3, [r3, #25]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d108      	bne.n	80021a0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800219c:	601a      	str	r2, [r3, #0]
 800219e:	e007      	b.n	80021b0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80021ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	7e9b      	ldrb	r3, [r3, #26]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d108      	bne.n	80021ca <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f042 0220 	orr.w	r2, r2, #32
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	e007      	b.n	80021da <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f022 0220 	bic.w	r2, r2, #32
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	7edb      	ldrb	r3, [r3, #27]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d108      	bne.n	80021f4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0210 	bic.w	r2, r2, #16
 80021f0:	601a      	str	r2, [r3, #0]
 80021f2:	e007      	b.n	8002204 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f042 0210 	orr.w	r2, r2, #16
 8002202:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7f1b      	ldrb	r3, [r3, #28]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d108      	bne.n	800221e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f042 0208 	orr.w	r2, r2, #8
 800221a:	601a      	str	r2, [r3, #0]
 800221c:	e007      	b.n	800222e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	7f5b      	ldrb	r3, [r3, #29]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d108      	bne.n	8002248 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0204 	orr.w	r2, r2, #4
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	e007      	b.n	8002258 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f022 0204 	bic.w	r2, r2, #4
 8002256:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	431a      	orrs	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	695b      	ldr	r3, [r3, #20]
 800226c:	ea42 0103 	orr.w	r1, r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	1e5a      	subs	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002298:	b480      	push	{r7}
 800229a:	b087      	sub	sp, #28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022ae:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80022b0:	7cfb      	ldrb	r3, [r7, #19]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d003      	beq.n	80022be <HAL_CAN_ConfigFilter+0x26>
 80022b6:	7cfb      	ldrb	r3, [r7, #19]
 80022b8:	2b02      	cmp	r3, #2
 80022ba:	f040 80be 	bne.w	800243a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80022be:	4b65      	ldr	r3, [pc, #404]	; (8002454 <HAL_CAN_ConfigFilter+0x1bc>)
 80022c0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022d8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80022dc:	697b      	ldr	r3, [r7, #20]
 80022de:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ec:	021b      	lsls	r3, r3, #8
 80022ee:	431a      	orrs	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695b      	ldr	r3, [r3, #20]
 80022fa:	f003 031f 	and.w	r3, r3, #31
 80022fe:	2201      	movs	r2, #1
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43db      	mvns	r3, r3
 8002310:	401a      	ands	r2, r3
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d123      	bne.n	8002368 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	43db      	mvns	r3, r3
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002342:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3248      	adds	r2, #72	; 0x48
 8002348:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800235c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800235e:	6979      	ldr	r1, [r7, #20]
 8002360:	3348      	adds	r3, #72	; 0x48
 8002362:	00db      	lsls	r3, r3, #3
 8002364:	440b      	add	r3, r1
 8002366:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d122      	bne.n	80023b6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	431a      	orrs	r2, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002390:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	3248      	adds	r2, #72	; 0x48
 8002396:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023aa:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023ac:	6979      	ldr	r1, [r7, #20]
 80023ae:	3348      	adds	r3, #72	; 0x48
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	440b      	add	r3, r1
 80023b4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	43db      	mvns	r3, r3
 80023c8:	401a      	ands	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80023d0:	e007      	b.n	80023e2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	431a      	orrs	r2, r3
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d109      	bne.n	80023fe <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	401a      	ands	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80023fc:	e007      	b.n	800240e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	431a      	orrs	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d107      	bne.n	8002426 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	431a      	orrs	r2, r3
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800242c:	f023 0201 	bic.w	r2, r3, #1
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002436:	2300      	movs	r3, #0
 8002438:	e006      	b.n	8002448 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
  }
}
 8002448:	4618      	mov	r0, r3
 800244a:	371c      	adds	r7, #28
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	40006400 	.word	0x40006400

08002458 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b01      	cmp	r3, #1
 800246a:	d12e      	bne.n	80024ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f022 0201 	bic.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002484:	f7fe fdc6 	bl	8001014 <HAL_GetTick>
 8002488:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800248a:	e012      	b.n	80024b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800248c:	f7fe fdc2 	bl	8001014 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b0a      	cmp	r3, #10
 8002498:	d90b      	bls.n	80024b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2205      	movs	r2, #5
 80024aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e012      	b.n	80024d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1e5      	bne.n	800248c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80024c6:	2300      	movs	r3, #0
 80024c8:	e006      	b.n	80024d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
  }
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3710      	adds	r7, #16
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d002      	beq.n	80024fe <HAL_CAN_ActivateNotification+0x1e>
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d109      	bne.n	8002512 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6959      	ldr	r1, [r3, #20]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	683a      	ldr	r2, [r7, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800250e:	2300      	movs	r3, #0
 8002510:	e006      	b.n	8002520 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
  }
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	; 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002568:	6a3b      	ldr	r3, [r7, #32]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d07c      	beq.n	800266c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d023      	beq.n	80025c4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2201      	movs	r2, #1
 8002582:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f97d 	bl	800288e <HAL_CAN_TxMailbox0CompleteCallback>
 8002594:	e016      	b.n	80025c4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b00      	cmp	r3, #0
 800259e:	d004      	beq.n	80025aa <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80025a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
 80025a8:	e00c      	b.n	80025c4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f003 0308 	and.w	r3, r3, #8
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d004      	beq.n	80025be <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80025b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80025ba:	627b      	str	r3, [r7, #36]	; 0x24
 80025bc:	e002      	b.n	80025c4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f000 f983 	bl	80028ca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025d8:	69bb      	ldr	r3, [r7, #24]
 80025da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f95d 	bl	80028a2 <HAL_CAN_TxMailbox1CompleteCallback>
 80025e8:	e016      	b.n	8002618 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d004      	beq.n	80025fe <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025fa:	627b      	str	r3, [r7, #36]	; 0x24
 80025fc:	e00c      	b.n	8002618 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002604:	2b00      	cmp	r3, #0
 8002606:	d004      	beq.n	8002612 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	e002      	b.n	8002618 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 f963 	bl	80028de <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d024      	beq.n	800266c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800262a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f93d 	bl	80028b6 <HAL_CAN_TxMailbox2CompleteCallback>
 800263c:	e016      	b.n	800266c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d004      	beq.n	8002652 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264e:	627b      	str	r3, [r7, #36]	; 0x24
 8002650:	e00c      	b.n	800266c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002658:	2b00      	cmp	r3, #0
 800265a:	d004      	beq.n	8002666 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800265c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	627b      	str	r3, [r7, #36]	; 0x24
 8002664:	e002      	b.n	800266c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 f943 	bl	80028f2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800266c:	6a3b      	ldr	r3, [r7, #32]
 800266e:	f003 0308 	and.w	r3, r3, #8
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00c      	beq.n	8002690 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0310 	and.w	r3, r3, #16
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002682:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002686:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2210      	movs	r2, #16
 800268e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00b      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d006      	beq.n	80026b2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2208      	movs	r2, #8
 80026aa:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80026ac:	6878      	ldr	r0, [r7, #4]
 80026ae:	f000 f934 	bl	800291a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	f003 0302 	and.w	r3, r3, #2
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d009      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d002      	beq.n	80026d0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 f91b 	bl	8002906 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00c      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	f003 0310 	and.w	r3, r3, #16
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d007      	beq.n	80026f4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2210      	movs	r2, #16
 80026f2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	f003 0320 	and.w	r3, r3, #32
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00b      	beq.n	8002716 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d006      	beq.n	8002716 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2208      	movs	r2, #8
 800270e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f916 	bl	8002942 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	d009      	beq.n	8002734 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0303 	and.w	r3, r3, #3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d002      	beq.n	8002734 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f000 f8fd 	bl	800292e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	d006      	beq.n	8002756 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2210      	movs	r2, #16
 800274e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f000 f900 	bl	8002956 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d00b      	beq.n	8002778 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d006      	beq.n	8002778 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2208      	movs	r2, #8
 8002770:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f8f9 	bl	800296a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d075      	beq.n	800286e <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d06c      	beq.n	8002866 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800278c:	6a3b      	ldr	r3, [r7, #32]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d008      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027a8:	6a3b      	ldr	r3, [r7, #32]
 80027aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d008      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80027bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027be:	f043 0302 	orr.w	r3, r3, #2
 80027c2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027c4:	6a3b      	ldr	r3, [r7, #32]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d008      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d003      	beq.n	80027e0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	f043 0304 	orr.w	r3, r3, #4
 80027de:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d03d      	beq.n	8002866 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d038      	beq.n	8002866 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027fa:	2b30      	cmp	r3, #48	; 0x30
 80027fc:	d017      	beq.n	800282e <HAL_CAN_IRQHandler+0x302>
 80027fe:	2b30      	cmp	r3, #48	; 0x30
 8002800:	d804      	bhi.n	800280c <HAL_CAN_IRQHandler+0x2e0>
 8002802:	2b10      	cmp	r3, #16
 8002804:	d009      	beq.n	800281a <HAL_CAN_IRQHandler+0x2ee>
 8002806:	2b20      	cmp	r3, #32
 8002808:	d00c      	beq.n	8002824 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800280a:	e024      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 800280c:	2b50      	cmp	r3, #80	; 0x50
 800280e:	d018      	beq.n	8002842 <HAL_CAN_IRQHandler+0x316>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d01b      	beq.n	800284c <HAL_CAN_IRQHandler+0x320>
 8002814:	2b40      	cmp	r3, #64	; 0x40
 8002816:	d00f      	beq.n	8002838 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002818:	e01d      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	f043 0308 	orr.w	r3, r3, #8
 8002820:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002822:	e018      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002826:	f043 0310 	orr.w	r3, r3, #16
 800282a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800282c:	e013      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002830:	f043 0320 	orr.w	r3, r3, #32
 8002834:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002836:	e00e      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800283e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002840:	e009      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002848:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800284a:	e004      	b.n	8002856 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002852:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002854:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699a      	ldr	r2, [r3, #24]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002864:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2204      	movs	r2, #4
 800286c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	2b00      	cmp	r3, #0
 8002872:	d008      	beq.n	8002886 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	431a      	orrs	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 f87c 	bl	800297e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002886:	bf00      	nop
 8002888:	3728      	adds	r7, #40	; 0x28
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr

08002942 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002942:	b480      	push	{r7}
 8002944:	b083      	sub	sp, #12
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr

08002956 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
	...

08002994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	f003 0307 	and.w	r3, r3, #7
 80029a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029b0:	4013      	ands	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029c6:	4a04      	ldr	r2, [pc, #16]	; (80029d8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	60d3      	str	r3, [r2, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <__NVIC_GetPriorityGrouping+0x18>)
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	0a1b      	lsrs	r3, r3, #8
 80029e6:	f003 0307 	and.w	r3, r3, #7
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr
 80029f4:	e000ed00 	.word	0xe000ed00

080029f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	db0b      	blt.n	8002a22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0a:	79fb      	ldrb	r3, [r7, #7]
 8002a0c:	f003 021f 	and.w	r2, r3, #31
 8002a10:	4907      	ldr	r1, [pc, #28]	; (8002a30 <__NVIC_EnableIRQ+0x38>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	2001      	movs	r0, #1
 8002a1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e100 	.word	0xe000e100

08002a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	6039      	str	r1, [r7, #0]
 8002a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	db0a      	blt.n	8002a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	490c      	ldr	r1, [pc, #48]	; (8002a80 <__NVIC_SetPriority+0x4c>)
 8002a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a52:	0112      	lsls	r2, r2, #4
 8002a54:	b2d2      	uxtb	r2, r2
 8002a56:	440b      	add	r3, r1
 8002a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a5c:	e00a      	b.n	8002a74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	b2da      	uxtb	r2, r3
 8002a62:	4908      	ldr	r1, [pc, #32]	; (8002a84 <__NVIC_SetPriority+0x50>)
 8002a64:	79fb      	ldrb	r3, [r7, #7]
 8002a66:	f003 030f 	and.w	r3, r3, #15
 8002a6a:	3b04      	subs	r3, #4
 8002a6c:	0112      	lsls	r2, r2, #4
 8002a6e:	b2d2      	uxtb	r2, r2
 8002a70:	440b      	add	r3, r1
 8002a72:	761a      	strb	r2, [r3, #24]
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000e100 	.word	0xe000e100
 8002a84:	e000ed00 	.word	0xe000ed00

08002a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b089      	sub	sp, #36	; 0x24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f1c3 0307 	rsb	r3, r3, #7
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	bf28      	it	cs
 8002aa6:	2304      	movcs	r3, #4
 8002aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3304      	adds	r3, #4
 8002aae:	2b06      	cmp	r3, #6
 8002ab0:	d902      	bls.n	8002ab8 <NVIC_EncodePriority+0x30>
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	3b03      	subs	r3, #3
 8002ab6:	e000      	b.n	8002aba <NVIC_EncodePriority+0x32>
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	43da      	mvns	r2, r3
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	401a      	ands	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ada:	43d9      	mvns	r1, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae0:	4313      	orrs	r3, r2
         );
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3724      	adds	r7, #36	; 0x24
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
	...

08002af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3b01      	subs	r3, #1
 8002afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b00:	d301      	bcc.n	8002b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00f      	b.n	8002b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b06:	4a0a      	ldr	r2, [pc, #40]	; (8002b30 <SysTick_Config+0x40>)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b0e:	210f      	movs	r1, #15
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b14:	f7ff ff8e 	bl	8002a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b18:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <SysTick_Config+0x40>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b1e:	4b04      	ldr	r3, [pc, #16]	; (8002b30 <SysTick_Config+0x40>)
 8002b20:	2207      	movs	r2, #7
 8002b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3708      	adds	r7, #8
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	e000e010 	.word	0xe000e010

08002b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff ff29 	bl	8002994 <__NVIC_SetPriorityGrouping>
}
 8002b42:	bf00      	nop
 8002b44:	3708      	adds	r7, #8
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b086      	sub	sp, #24
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b5c:	f7ff ff3e 	bl	80029dc <__NVIC_GetPriorityGrouping>
 8002b60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	68b9      	ldr	r1, [r7, #8]
 8002b66:	6978      	ldr	r0, [r7, #20]
 8002b68:	f7ff ff8e 	bl	8002a88 <NVIC_EncodePriority>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b72:	4611      	mov	r1, r2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff ff5d 	bl	8002a34 <__NVIC_SetPriority>
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b082      	sub	sp, #8
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	4603      	mov	r3, r0
 8002b8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff31 	bl	80029f8 <__NVIC_EnableIRQ>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff ffa2 	bl	8002af0 <SysTick_Config>
 8002bac:	4603      	mov	r3, r0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
	...

08002bb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002bc4:	f7fe fa26 	bl	8001014 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d101      	bne.n	8002bd4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e099      	b.n	8002d08 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2202      	movs	r2, #2
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf4:	e00f      	b.n	8002c16 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf6:	f7fe fa0d 	bl	8001014 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b05      	cmp	r3, #5
 8002c02:	d908      	bls.n	8002c16 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2220      	movs	r2, #32
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2203      	movs	r2, #3
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	e078      	b.n	8002d08 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1e8      	bne.n	8002bf6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	4b38      	ldr	r3, [pc, #224]	; (8002d10 <HAL_DMA_Init+0x158>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c42:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c62:	697a      	ldr	r2, [r7, #20]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d107      	bne.n	8002c80 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	697a      	ldr	r2, [r7, #20]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	695b      	ldr	r3, [r3, #20]
 8002c8e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	f023 0307 	bic.w	r3, r3, #7
 8002c96:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d117      	bne.n	8002cda <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d00e      	beq.n	8002cda <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fae5 	bl	800328c <DMA_CheckFifoParam>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2240      	movs	r2, #64	; 0x40
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e016      	b.n	8002d08 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 fa9c 	bl	8003220 <DMA_CalcBaseAndBitshift>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf0:	223f      	movs	r2, #63	; 0x3f
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3718      	adds	r7, #24
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	f010803f 	.word	0xf010803f

08002d14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
 8002d20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d101      	bne.n	8002d3a <HAL_DMA_Start_IT+0x26>
 8002d36:	2302      	movs	r3, #2
 8002d38:	e040      	b.n	8002dbc <HAL_DMA_Start_IT+0xa8>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d12f      	bne.n	8002dae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2202      	movs	r2, #2
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f000 fa2e 	bl	80031c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d6c:	223f      	movs	r2, #63	; 0x3f
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0216 	orr.w	r2, r2, #22
 8002d82:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0208 	orr.w	r2, r2, #8
 8002d9a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f042 0201 	orr.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e005      	b.n	8002dba <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002db6:	2302      	movs	r3, #2
 8002db8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	3718      	adds	r7, #24
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d004      	beq.n	8002de2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2280      	movs	r2, #128	; 0x80
 8002ddc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00c      	b.n	8002dfc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2205      	movs	r2, #5
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f022 0201 	bic.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	370c      	adds	r7, #12
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e14:	4b92      	ldr	r3, [pc, #584]	; (8003060 <HAL_DMA_IRQHandler+0x258>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a92      	ldr	r2, [pc, #584]	; (8003064 <HAL_DMA_IRQHandler+0x25c>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	2208      	movs	r2, #8
 8002e34:	409a      	lsls	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	4013      	ands	r3, r2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d01a      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d013      	beq.n	8002e74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0204 	bic.w	r2, r2, #4
 8002e5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2208      	movs	r2, #8
 8002e62:	409a      	lsls	r2, r3
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6c:	f043 0201 	orr.w	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e78:	2201      	movs	r2, #1
 8002e7a:	409a      	lsls	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d012      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	695b      	ldr	r3, [r3, #20]
 8002e8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	2201      	movs	r2, #1
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea2:	f043 0202 	orr.w	r2, r3, #2
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eae:	2204      	movs	r2, #4
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d012      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d00b      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	2204      	movs	r2, #4
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed8:	f043 0204 	orr.w	r2, r3, #4
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	409a      	lsls	r2, r3
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	4013      	ands	r3, r2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d043      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d03c      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	2210      	movs	r2, #16
 8002f04:	409a      	lsls	r2, r3
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d018      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d108      	bne.n	8002f38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d024      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
 8002f36:	e01f      	b.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d01b      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	4798      	blx	r3
 8002f48:	e016      	b.n	8002f78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d107      	bne.n	8002f68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0208 	bic.w	r2, r2, #8
 8002f66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	f000 808e 	beq.w	80030a6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0310 	and.w	r3, r3, #16
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 8086 	beq.w	80030a6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	409a      	lsls	r2, r3
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d136      	bne.n	8003020 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0216 	bic.w	r2, r2, #22
 8002fc0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	695a      	ldr	r2, [r3, #20]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fd0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <HAL_DMA_IRQHandler+0x1da>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f022 0208 	bic.w	r2, r2, #8
 8002ff0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff6:	223f      	movs	r2, #63	; 0x3f
 8002ff8:	409a      	lsls	r2, r3
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2200      	movs	r2, #0
 8003002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003012:	2b00      	cmp	r3, #0
 8003014:	d07d      	beq.n	8003112 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	4798      	blx	r3
        }
        return;
 800301e:	e078      	b.n	8003112 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d01c      	beq.n	8003068 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003038:	2b00      	cmp	r3, #0
 800303a:	d108      	bne.n	800304e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003040:	2b00      	cmp	r3, #0
 8003042:	d030      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	4798      	blx	r3
 800304c:	e02b      	b.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d027      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
 800305e:	e022      	b.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
 8003060:	2000004c 	.word	0x2000004c
 8003064:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10f      	bne.n	8003096 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f022 0210 	bic.w	r2, r2, #16
 8003084:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2200      	movs	r2, #0
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d032      	beq.n	8003114 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d022      	beq.n	8003100 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2205      	movs	r2, #5
 80030be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 0201 	bic.w	r2, r2, #1
 80030d0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3301      	adds	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d307      	bcc.n	80030ee <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1f2      	bne.n	80030d2 <HAL_DMA_IRQHandler+0x2ca>
 80030ec:	e000      	b.n	80030f0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80030ee:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003104:	2b00      	cmp	r3, #0
 8003106:	d005      	beq.n	8003114 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	4798      	blx	r3
 8003110:	e000      	b.n	8003114 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003112:	bf00      	nop
    }
  }
}
 8003114:	3718      	adds	r7, #24
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop

0800311c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                      
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)(DMA_HandleTypeDef *_hdma))
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	460b      	mov	r3, r1
 8003126:	607a      	str	r2, [r7, #4]
 8003128:	72fb      	strb	r3, [r7, #11]

  HAL_StatusTypeDef status = HAL_OK;
 800312a:	2300      	movs	r3, #0
 800312c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003134:	2b01      	cmp	r3, #1
 8003136:	d101      	bne.n	800313c <HAL_DMA_RegisterCallback+0x20>
 8003138:	2302      	movs	r3, #2
 800313a:	e03c      	b.n	80031b6 <HAL_DMA_RegisterCallback+0x9a>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800314a:	b2db      	uxtb	r3, r3
 800314c:	2b01      	cmp	r3, #1
 800314e:	d129      	bne.n	80031a4 <HAL_DMA_RegisterCallback+0x88>
  {
    switch (CallbackID)
 8003150:	7afb      	ldrb	r3, [r7, #11]
 8003152:	2b05      	cmp	r3, #5
 8003154:	d829      	bhi.n	80031aa <HAL_DMA_RegisterCallback+0x8e>
 8003156:	a201      	add	r2, pc, #4	; (adr r2, 800315c <HAL_DMA_RegisterCallback+0x40>)
 8003158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315c:	08003175 	.word	0x08003175
 8003160:	0800317d 	.word	0x0800317d
 8003164:	08003185 	.word	0x08003185
 8003168:	0800318d 	.word	0x0800318d
 800316c:	08003195 	.word	0x08003195
 8003170:	0800319d 	.word	0x0800319d
    {
    case  HAL_DMA_XFER_CPLT_CB_ID:
      hdma->XferCpltCallback = pCallback;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	63da      	str	r2, [r3, #60]	; 0x3c
      break;
 800317a:	e017      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_HALFCPLT_CB_ID:
      hdma->XferHalfCpltCallback = pCallback;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003182:	e013      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1CPLT_CB_ID:
      hdma->XferM1CpltCallback = pCallback;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	645a      	str	r2, [r3, #68]	; 0x44
      break;
 800318a:	e00f      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
      hdma->XferM1HalfCpltCallback = pCallback;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	649a      	str	r2, [r3, #72]	; 0x48
      break;
 8003192:	e00b      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ERROR_CB_ID:
      hdma->XferErrorCallback = pCallback;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	64da      	str	r2, [r3, #76]	; 0x4c
      break;
 800319a:	e007      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>

    case  HAL_DMA_XFER_ABORT_CB_ID:
      hdma->XferAbortCallback = pCallback;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031a2:	e003      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>
    }
  }
  else
  {
    /* Return error status */
    status =  HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	75fb      	strb	r3, [r7, #23]
 80031a8:	e000      	b.n	80031ac <HAL_DMA_RegisterCallback+0x90>
      break;
 80031aa:	bf00      	nop
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return status;
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
 80031c2:	bf00      	nop

080031c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b085      	sub	sp, #20
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	2b40      	cmp	r3, #64	; 0x40
 80031f0:	d108      	bne.n	8003204 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003202:	e007      	b.n	8003214 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b2db      	uxtb	r3, r3
 800322e:	3b10      	subs	r3, #16
 8003230:	4a14      	ldr	r2, [pc, #80]	; (8003284 <DMA_CalcBaseAndBitshift+0x64>)
 8003232:	fba2 2303 	umull	r2, r3, r2, r3
 8003236:	091b      	lsrs	r3, r3, #4
 8003238:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800323a:	4a13      	ldr	r2, [pc, #76]	; (8003288 <DMA_CalcBaseAndBitshift+0x68>)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	461a      	mov	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2b03      	cmp	r3, #3
 800324c:	d909      	bls.n	8003262 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003256:	f023 0303 	bic.w	r3, r3, #3
 800325a:	1d1a      	adds	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	659a      	str	r2, [r3, #88]	; 0x58
 8003260:	e007      	b.n	8003272 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800326a:	f023 0303 	bic.w	r3, r3, #3
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003276:	4618      	mov	r0, r3
 8003278:	3714      	adds	r7, #20
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	aaaaaaab 	.word	0xaaaaaaab
 8003288:	0800f034 	.word	0x0800f034

0800328c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d11f      	bne.n	80032e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d855      	bhi.n	8003358 <DMA_CheckFifoParam+0xcc>
 80032ac:	a201      	add	r2, pc, #4	; (adr r2, 80032b4 <DMA_CheckFifoParam+0x28>)
 80032ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b2:	bf00      	nop
 80032b4:	080032c5 	.word	0x080032c5
 80032b8:	080032d7 	.word	0x080032d7
 80032bc:	080032c5 	.word	0x080032c5
 80032c0:	08003359 	.word	0x08003359
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d045      	beq.n	800335c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032d4:	e042      	b.n	800335c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032de:	d13f      	bne.n	8003360 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032e4:	e03c      	b.n	8003360 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032ee:	d121      	bne.n	8003334 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2b03      	cmp	r3, #3
 80032f4:	d836      	bhi.n	8003364 <DMA_CheckFifoParam+0xd8>
 80032f6:	a201      	add	r2, pc, #4	; (adr r2, 80032fc <DMA_CheckFifoParam+0x70>)
 80032f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032fc:	0800330d 	.word	0x0800330d
 8003300:	08003313 	.word	0x08003313
 8003304:	0800330d 	.word	0x0800330d
 8003308:	08003325 	.word	0x08003325
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	73fb      	strb	r3, [r7, #15]
      break;
 8003310:	e02f      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003316:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d024      	beq.n	8003368 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003322:	e021      	b.n	8003368 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800332c:	d11e      	bne.n	800336c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003332:	e01b      	b.n	800336c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2b02      	cmp	r3, #2
 8003338:	d902      	bls.n	8003340 <DMA_CheckFifoParam+0xb4>
 800333a:	2b03      	cmp	r3, #3
 800333c:	d003      	beq.n	8003346 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800333e:	e018      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	73fb      	strb	r3, [r7, #15]
      break;
 8003344:	e015      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	73fb      	strb	r3, [r7, #15]
      break;
 8003356:	e00b      	b.n	8003370 <DMA_CheckFifoParam+0xe4>
      break;
 8003358:	bf00      	nop
 800335a:	e00a      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 800335c:	bf00      	nop
 800335e:	e008      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003360:	bf00      	nop
 8003362:	e006      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003364:	bf00      	nop
 8003366:	e004      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;   
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <DMA_CheckFifoParam+0xe6>
      break;
 8003370:	bf00      	nop
    }
  } 
  
  return status; 
 8003372:	7bfb      	ldrb	r3, [r7, #15]
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003380:	b480      	push	{r7}
 8003382:	b089      	sub	sp, #36	; 0x24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003392:	2300      	movs	r3, #0
 8003394:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
 800339a:	e16b      	b.n	8003674 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800339c:	2201      	movs	r2, #1
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	4013      	ands	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	f040 815a 	bne.w	800366e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d00b      	beq.n	80033da <HAL_GPIO_Init+0x5a>
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d007      	beq.n	80033da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80033ce:	2b11      	cmp	r3, #17
 80033d0:	d003      	beq.n	80033da <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b12      	cmp	r3, #18
 80033d8:	d130      	bne.n	800343c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	2203      	movs	r2, #3
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fa02 f303 	lsl.w	r3, r2, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4313      	orrs	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003410:	2201      	movs	r2, #1
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	69ba      	ldr	r2, [r7, #24]
 800341c:	4013      	ands	r3, r2
 800341e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	f003 0201 	and.w	r2, r3, #1
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	4313      	orrs	r3, r2
 8003434:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	2b02      	cmp	r3, #2
 8003472:	d003      	beq.n	800347c <HAL_GPIO_Init+0xfc>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	2b12      	cmp	r3, #18
 800347a:	d123      	bne.n	80034c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	220f      	movs	r2, #15
 8003494:	fa02 f303 	lsl.w	r3, r2, r3
 8003498:	43db      	mvns	r3, r3
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	4013      	ands	r3, r2
 800349e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	691a      	ldr	r2, [r3, #16]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	fa02 f303 	lsl.w	r3, r2, r3
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	08da      	lsrs	r2, r3, #3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	69b9      	ldr	r1, [r7, #24]
 80034c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	2203      	movs	r2, #3
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43db      	mvns	r3, r3
 80034d6:	69ba      	ldr	r2, [r7, #24]
 80034d8:	4013      	ands	r3, r2
 80034da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0203 	and.w	r2, r3, #3
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80b4 	beq.w	800366e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60fb      	str	r3, [r7, #12]
 800350a:	4b5f      	ldr	r3, [pc, #380]	; (8003688 <HAL_GPIO_Init+0x308>)
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	4a5e      	ldr	r2, [pc, #376]	; (8003688 <HAL_GPIO_Init+0x308>)
 8003510:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003514:	6453      	str	r3, [r2, #68]	; 0x44
 8003516:	4b5c      	ldr	r3, [pc, #368]	; (8003688 <HAL_GPIO_Init+0x308>)
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003522:	4a5a      	ldr	r2, [pc, #360]	; (800368c <HAL_GPIO_Init+0x30c>)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	3302      	adds	r3, #2
 800352a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	f003 0303 	and.w	r3, r3, #3
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	220f      	movs	r2, #15
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	43db      	mvns	r3, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4013      	ands	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a51      	ldr	r2, [pc, #324]	; (8003690 <HAL_GPIO_Init+0x310>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d02b      	beq.n	80035a6 <HAL_GPIO_Init+0x226>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a50      	ldr	r2, [pc, #320]	; (8003694 <HAL_GPIO_Init+0x314>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d025      	beq.n	80035a2 <HAL_GPIO_Init+0x222>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a4f      	ldr	r2, [pc, #316]	; (8003698 <HAL_GPIO_Init+0x318>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01f      	beq.n	800359e <HAL_GPIO_Init+0x21e>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a4e      	ldr	r2, [pc, #312]	; (800369c <HAL_GPIO_Init+0x31c>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d019      	beq.n	800359a <HAL_GPIO_Init+0x21a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a4d      	ldr	r2, [pc, #308]	; (80036a0 <HAL_GPIO_Init+0x320>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d013      	beq.n	8003596 <HAL_GPIO_Init+0x216>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a4c      	ldr	r2, [pc, #304]	; (80036a4 <HAL_GPIO_Init+0x324>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d00d      	beq.n	8003592 <HAL_GPIO_Init+0x212>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a4b      	ldr	r2, [pc, #300]	; (80036a8 <HAL_GPIO_Init+0x328>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d007      	beq.n	800358e <HAL_GPIO_Init+0x20e>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a4a      	ldr	r2, [pc, #296]	; (80036ac <HAL_GPIO_Init+0x32c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d101      	bne.n	800358a <HAL_GPIO_Init+0x20a>
 8003586:	2307      	movs	r3, #7
 8003588:	e00e      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800358a:	2308      	movs	r3, #8
 800358c:	e00c      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800358e:	2306      	movs	r3, #6
 8003590:	e00a      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 8003592:	2305      	movs	r3, #5
 8003594:	e008      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 8003596:	2304      	movs	r3, #4
 8003598:	e006      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800359a:	2303      	movs	r3, #3
 800359c:	e004      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 800359e:	2302      	movs	r3, #2
 80035a0:	e002      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <HAL_GPIO_Init+0x228>
 80035a6:	2300      	movs	r3, #0
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	f002 0203 	and.w	r2, r2, #3
 80035ae:	0092      	lsls	r2, r2, #2
 80035b0:	4093      	lsls	r3, r2
 80035b2:	69ba      	ldr	r2, [r7, #24]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035b8:	4934      	ldr	r1, [pc, #208]	; (800368c <HAL_GPIO_Init+0x30c>)
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	089b      	lsrs	r3, r3, #2
 80035be:	3302      	adds	r3, #2
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c6:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035ea:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035f0:	4b2f      	ldr	r3, [pc, #188]	; (80036b0 <HAL_GPIO_Init+0x330>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	43db      	mvns	r3, r3
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	4013      	ands	r3, r2
 80035fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003614:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003616:	69bb      	ldr	r3, [r7, #24]
 8003618:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800361a:	4b25      	ldr	r3, [pc, #148]	; (80036b0 <HAL_GPIO_Init+0x330>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	43db      	mvns	r3, r3
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003636:	69ba      	ldr	r2, [r7, #24]
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800363e:	4a1c      	ldr	r2, [pc, #112]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <HAL_GPIO_Init+0x330>)
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	43db      	mvns	r3, r3
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4013      	ands	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d003      	beq.n	8003668 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003660:	69ba      	ldr	r2, [r7, #24]
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003668:	4a11      	ldr	r2, [pc, #68]	; (80036b0 <HAL_GPIO_Init+0x330>)
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800366e:	69fb      	ldr	r3, [r7, #28]
 8003670:	3301      	adds	r3, #1
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	2b0f      	cmp	r3, #15
 8003678:	f67f ae90 	bls.w	800339c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800367c:	bf00      	nop
 800367e:	3724      	adds	r7, #36	; 0x24
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40023800 	.word	0x40023800
 800368c:	40013800 	.word	0x40013800
 8003690:	40020000 	.word	0x40020000
 8003694:	40020400 	.word	0x40020400
 8003698:	40020800 	.word	0x40020800
 800369c:	40020c00 	.word	0x40020c00
 80036a0:	40021000 	.word	0x40021000
 80036a4:	40021400 	.word	0x40021400
 80036a8:	40021800 	.word	0x40021800
 80036ac:	40021c00 	.word	0x40021c00
 80036b0:	40013c00 	.word	0x40013c00

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036d0:	e003      	b.n	80036da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	887b      	ldrh	r3, [r7, #2]
 80036f8:	401a      	ands	r2, r3
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d104      	bne.n	800370a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003700:	887b      	ldrh	r3, [r7, #2]
 8003702:	041a      	lsls	r2, r3, #16
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003708:	e002      	b.n	8003710 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800370a:	887a      	ldrh	r2, [r7, #2]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	619a      	str	r2, [r3, #24]
}
 8003710:	bf00      	nop
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	4603      	mov	r3, r0
 8003724:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003726:	4b08      	ldr	r3, [pc, #32]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	88fb      	ldrh	r3, [r7, #6]
 800372c:	4013      	ands	r3, r2
 800372e:	2b00      	cmp	r3, #0
 8003730:	d006      	beq.n	8003740 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003734:	88fb      	ldrh	r3, [r7, #6]
 8003736:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003738:	88fb      	ldrh	r3, [r7, #6]
 800373a:	4618      	mov	r0, r3
 800373c:	f007 f8e4 	bl	800a908 <HAL_GPIO_EXTI_Callback>
  }
}
 8003740:	bf00      	nop
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40013c00 	.word	0x40013c00

0800374c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e11f      	b.n	800399e <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d106      	bne.n	8003778 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f009 f884 	bl	800c880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2224      	movs	r2, #36	; 0x24
 800377c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f022 0201 	bic.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800379e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b0:	f001 fcb6 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 80037b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	4a7b      	ldr	r2, [pc, #492]	; (80039a8 <HAL_I2C_Init+0x25c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d807      	bhi.n	80037d0 <HAL_I2C_Init+0x84>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a7a      	ldr	r2, [pc, #488]	; (80039ac <HAL_I2C_Init+0x260>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	bf94      	ite	ls
 80037c8:	2301      	movls	r3, #1
 80037ca:	2300      	movhi	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	e006      	b.n	80037de <HAL_I2C_Init+0x92>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	4a77      	ldr	r2, [pc, #476]	; (80039b0 <HAL_I2C_Init+0x264>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	bf94      	ite	ls
 80037d8:	2301      	movls	r3, #1
 80037da:	2300      	movhi	r3, #0
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e0db      	b.n	800399e <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	4a72      	ldr	r2, [pc, #456]	; (80039b4 <HAL_I2C_Init+0x268>)
 80037ea:	fba2 2303 	umull	r2, r3, r2, r3
 80037ee:	0c9b      	lsrs	r3, r3, #18
 80037f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4a64      	ldr	r2, [pc, #400]	; (80039a8 <HAL_I2C_Init+0x25c>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d802      	bhi.n	8003820 <HAL_I2C_Init+0xd4>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	3301      	adds	r3, #1
 800381e:	e009      	b.n	8003834 <HAL_I2C_Init+0xe8>
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003826:	fb02 f303 	mul.w	r3, r2, r3
 800382a:	4a63      	ldr	r2, [pc, #396]	; (80039b8 <HAL_I2C_Init+0x26c>)
 800382c:	fba2 2303 	umull	r2, r3, r2, r3
 8003830:	099b      	lsrs	r3, r3, #6
 8003832:	3301      	adds	r3, #1
 8003834:	687a      	ldr	r2, [r7, #4]
 8003836:	6812      	ldr	r2, [r2, #0]
 8003838:	430b      	orrs	r3, r1
 800383a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003846:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4956      	ldr	r1, [pc, #344]	; (80039a8 <HAL_I2C_Init+0x25c>)
 8003850:	428b      	cmp	r3, r1
 8003852:	d80d      	bhi.n	8003870 <HAL_I2C_Init+0x124>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	1e59      	subs	r1, r3, #1
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003862:	3301      	adds	r3, #1
 8003864:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003868:	2b04      	cmp	r3, #4
 800386a:	bf38      	it	cc
 800386c:	2304      	movcc	r3, #4
 800386e:	e04f      	b.n	8003910 <HAL_I2C_Init+0x1c4>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d111      	bne.n	800389c <HAL_I2C_Init+0x150>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	1e58      	subs	r0, r3, #1
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6859      	ldr	r1, [r3, #4]
 8003880:	460b      	mov	r3, r1
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	440b      	add	r3, r1
 8003886:	fbb0 f3f3 	udiv	r3, r0, r3
 800388a:	3301      	adds	r3, #1
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	2b00      	cmp	r3, #0
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e012      	b.n	80038c2 <HAL_I2C_Init+0x176>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	440b      	add	r3, r1
 80038aa:	0099      	lsls	r1, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b2:	3301      	adds	r3, #1
 80038b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	bf0c      	ite	eq
 80038bc:	2301      	moveq	r3, #1
 80038be:	2300      	movne	r3, #0
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Init+0x17e>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e022      	b.n	8003910 <HAL_I2C_Init+0x1c4>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10e      	bne.n	80038f0 <HAL_I2C_Init+0x1a4>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1e58      	subs	r0, r3, #1
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6859      	ldr	r1, [r3, #4]
 80038da:	460b      	mov	r3, r1
 80038dc:	005b      	lsls	r3, r3, #1
 80038de:	440b      	add	r3, r1
 80038e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ee:	e00f      	b.n	8003910 <HAL_I2C_Init+0x1c4>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	1e58      	subs	r0, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6859      	ldr	r1, [r3, #4]
 80038f8:	460b      	mov	r3, r1
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	0099      	lsls	r1, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	fbb0 f3f3 	udiv	r3, r0, r3
 8003906:	3301      	adds	r3, #1
 8003908:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003910:	6879      	ldr	r1, [r7, #4]
 8003912:	6809      	ldr	r1, [r1, #0]
 8003914:	4313      	orrs	r3, r2
 8003916:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	69da      	ldr	r2, [r3, #28]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a1b      	ldr	r3, [r3, #32]
 800392a:	431a      	orrs	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800393e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	6911      	ldr	r1, [r2, #16]
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	68d2      	ldr	r2, [r2, #12]
 800394a:	4311      	orrs	r1, r2
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	695a      	ldr	r2, [r3, #20]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	430a      	orrs	r2, r1
 800396e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f042 0201 	orr.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2200      	movs	r2, #0
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800399c:	2300      	movs	r3, #0
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3710      	adds	r7, #16
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	000186a0 	.word	0x000186a0
 80039ac:	001e847f 	.word	0x001e847f
 80039b0:	003d08ff 	.word	0x003d08ff
 80039b4:	431bde83 	.word	0x431bde83
 80039b8:	10624dd3 	.word	0x10624dd3

080039bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b088      	sub	sp, #32
 80039c0:	af02      	add	r7, sp, #8
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	461a      	mov	r2, r3
 80039c8:	460b      	mov	r3, r1
 80039ca:	817b      	strh	r3, [r7, #10]
 80039cc:	4613      	mov	r3, r2
 80039ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039d0:	f7fd fb20 	bl	8001014 <HAL_GetTick>
 80039d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b20      	cmp	r3, #32
 80039e0:	f040 80e0 	bne.w	8003ba4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	9300      	str	r3, [sp, #0]
 80039e8:	2319      	movs	r3, #25
 80039ea:	2201      	movs	r2, #1
 80039ec:	4970      	ldr	r1, [pc, #448]	; (8003bb0 <HAL_I2C_Master_Transmit+0x1f4>)
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fc56 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d001      	beq.n	80039fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0d3      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d101      	bne.n	8003a0c <HAL_I2C_Master_Transmit+0x50>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	e0cc      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d007      	beq.n	8003a32 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0201 	orr.w	r2, r2, #1
 8003a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a40:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2221      	movs	r2, #33	; 0x21
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	893a      	ldrh	r2, [r7, #8]
 8003a62:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a68:	b29a      	uxth	r2, r3
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	4a50      	ldr	r2, [pc, #320]	; (8003bb4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a74:	8979      	ldrh	r1, [r7, #10]
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fac2 	bl	8004004 <I2C_MasterRequestWrite>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e08d      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	613b      	str	r3, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	613b      	str	r3, [r7, #16]
 8003a9e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003aa0:	e066      	b.n	8003b70 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	6a39      	ldr	r1, [r7, #32]
 8003aa6:	68f8      	ldr	r0, [r7, #12]
 8003aa8:	f000 fcd0 	bl	800444c <I2C_WaitOnTXEFlagUntilTimeout>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00d      	beq.n	8003ace <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab6:	2b04      	cmp	r3, #4
 8003ab8:	d107      	bne.n	8003aca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e06b      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	781a      	ldrb	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	3b01      	subs	r3, #1
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	695b      	ldr	r3, [r3, #20]
 8003b04:	f003 0304 	and.w	r3, r3, #4
 8003b08:	2b04      	cmp	r3, #4
 8003b0a:	d11b      	bne.n	8003b44 <HAL_I2C_Master_Transmit+0x188>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d017      	beq.n	8003b44 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b44:	697a      	ldr	r2, [r7, #20]
 8003b46:	6a39      	ldr	r1, [r7, #32]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 fcc0 	bl	80044ce <I2C_WaitOnBTFFlagUntilTimeout>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d00d      	beq.n	8003b70 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	2b04      	cmp	r3, #4
 8003b5a:	d107      	bne.n	8003b6c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e01a      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d194      	bne.n	8003aa2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2220      	movs	r2, #32
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	e000      	b.n	8003ba6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ba4:	2302      	movs	r3, #2
  }
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3718      	adds	r7, #24
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	00100002 	.word	0x00100002
 8003bb4:	ffff0000 	.word	0xffff0000

08003bb8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b08c      	sub	sp, #48	; 0x30
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	607a      	str	r2, [r7, #4]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	460b      	mov	r3, r1
 8003bc6:	817b      	strh	r3, [r7, #10]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003bcc:	f7fd fa22 	bl	8001014 <HAL_GetTick>
 8003bd0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bd8:	b2db      	uxtb	r3, r3
 8003bda:	2b20      	cmp	r3, #32
 8003bdc:	f040 820b 	bne.w	8003ff6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2319      	movs	r3, #25
 8003be6:	2201      	movs	r2, #1
 8003be8:	497c      	ldr	r1, [pc, #496]	; (8003ddc <HAL_I2C_Master_Receive+0x224>)
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f000 fb58 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	e1fe      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2C_Master_Receive+0x50>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e1f7      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d007      	beq.n	8003c2e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f042 0201 	orr.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2222      	movs	r2, #34	; 0x22
 8003c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2210      	movs	r2, #16
 8003c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	893a      	ldrh	r2, [r7, #8]
 8003c5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	4a5c      	ldr	r2, [pc, #368]	; (8003de0 <HAL_I2C_Master_Receive+0x228>)
 8003c6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003c70:	8979      	ldrh	r1, [r7, #10]
 8003c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fa46 	bl	8004108 <I2C_MasterRequestRead>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e1b8      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d113      	bne.n	8003cb6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c8e:	2300      	movs	r3, #0
 8003c90:	623b      	str	r3, [r7, #32]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	623b      	str	r3, [r7, #32]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e18c      	b.n	8003fd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d11b      	bne.n	8003cf6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681a      	ldr	r2, [r3, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ccc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	61fb      	str	r3, [r7, #28]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	61fb      	str	r3, [r7, #28]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	61fb      	str	r3, [r7, #28]
 8003ce2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e16c      	b.n	8003fd0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfa:	2b02      	cmp	r3, #2
 8003cfc:	d11b      	bne.n	8003d36 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d0c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	695b      	ldr	r3, [r3, #20]
 8003d28:	61bb      	str	r3, [r7, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	699b      	ldr	r3, [r3, #24]
 8003d30:	61bb      	str	r3, [r7, #24]
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	e14c      	b.n	8003fd0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003d5c:	e138      	b.n	8003fd0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	f200 80f1 	bhi.w	8003f4a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d123      	bne.n	8003db8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 fbeb 	bl	8004550 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e139      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003da0:	3b01      	subs	r3, #1
 8003da2:	b29a      	uxth	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003db6:	e10b      	b.n	8003fd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d14e      	bne.n	8003e5e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	4906      	ldr	r1, [pc, #24]	; (8003de4 <HAL_I2C_Master_Receive+0x22c>)
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 fa68 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d008      	beq.n	8003de8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e10e      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
 8003dda:	bf00      	nop
 8003ddc:	00100002 	.word	0x00100002
 8003de0:	ffff0000 	.word	0xffff0000
 8003de4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681a      	ldr	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	691a      	ldr	r2, [r3, #16]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	b2d2      	uxtb	r2, r2
 8003e04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	1c5a      	adds	r2, r3, #1
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e14:	3b01      	subs	r3, #1
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e34:	b2d2      	uxtb	r2, r2
 8003e36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e5c:	e0b8      	b.n	8003fd0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e64:	2200      	movs	r2, #0
 8003e66:	4966      	ldr	r1, [pc, #408]	; (8004000 <HAL_I2C_Master_Receive+0x448>)
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 fa19 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e0bf      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	691a      	ldr	r2, [r3, #16]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	b2d2      	uxtb	r2, r2
 8003e94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	494f      	ldr	r1, [pc, #316]	; (8004000 <HAL_I2C_Master_Receive+0x448>)
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f9eb 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e091      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	b29a      	uxth	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	691a      	ldr	r2, [r3, #16]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f48:	e042      	b.n	8003fd0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 fafe 	bl	8004550 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e04c      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	691a      	ldr	r2, [r3, #16]
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	1c5a      	adds	r2, r3, #1
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f7a:	3b01      	subs	r3, #1
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d118      	bne.n	8003fd0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	691a      	ldr	r2, [r3, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	b29a      	uxth	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f47f aec2 	bne.w	8003d5e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2220      	movs	r2, #32
 8003fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	e000      	b.n	8003ff8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003ff6:	2302      	movs	r3, #2
  }
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3728      	adds	r7, #40	; 0x28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	00010004 	.word	0x00010004

08004004 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af02      	add	r7, sp, #8
 800400a:	60f8      	str	r0, [r7, #12]
 800400c:	607a      	str	r2, [r7, #4]
 800400e:	603b      	str	r3, [r7, #0]
 8004010:	460b      	mov	r3, r1
 8004012:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004018:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b08      	cmp	r3, #8
 800401e:	d006      	beq.n	800402e <I2C_MasterRequestWrite+0x2a>
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d003      	beq.n	800402e <I2C_MasterRequestWrite+0x2a>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800402c:	d108      	bne.n	8004040 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800403c:	601a      	str	r2, [r3, #0]
 800403e:	e00b      	b.n	8004058 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	2b12      	cmp	r3, #18
 8004046:	d107      	bne.n	8004058 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004056:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2200      	movs	r2, #0
 8004060:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f91b 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d00c      	beq.n	800408a <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004084:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e035      	b.n	80040f6 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004092:	d108      	bne.n	80040a6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004094:	897b      	ldrh	r3, [r7, #10]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040a2:	611a      	str	r2, [r3, #16]
 80040a4:	e01b      	b.n	80040de <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80040a6:	897b      	ldrh	r3, [r7, #10]
 80040a8:	11db      	asrs	r3, r3, #7
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	f003 0306 	and.w	r3, r3, #6
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f063 030f 	orn	r3, r3, #15
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	490f      	ldr	r1, [pc, #60]	; (8004100 <I2C_MasterRequestWrite+0xfc>)
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f000 f942 	bl	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e010      	b.n	80040f6 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040d4:	897b      	ldrh	r3, [r7, #10]
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	4908      	ldr	r1, [pc, #32]	; (8004104 <I2C_MasterRequestWrite+0x100>)
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 f932 	bl	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e000      	b.n	80040f6 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	00010008 	.word	0x00010008
 8004104:	00010002 	.word	0x00010002

08004108 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b088      	sub	sp, #32
 800410c:	af02      	add	r7, sp, #8
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	603b      	str	r3, [r7, #0]
 8004114:	460b      	mov	r3, r1
 8004116:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d006      	beq.n	8004142 <I2C_MasterRequestRead+0x3a>
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d003      	beq.n	8004142 <I2C_MasterRequestRead+0x3a>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004140:	d108      	bne.n	8004154 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e00b      	b.n	800416c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004158:	2b11      	cmp	r3, #17
 800415a:	d107      	bne.n	800416c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f891 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00c      	beq.n	800419e <I2C_MasterRequestRead+0x96>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <I2C_MasterRequestRead+0x92>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004198:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e078      	b.n	8004290 <I2C_MasterRequestRead+0x188>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041a6:	d108      	bne.n	80041ba <I2C_MasterRequestRead+0xb2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80041a8:	897b      	ldrh	r3, [r7, #10]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	f043 0301 	orr.w	r3, r3, #1
 80041b0:	b2da      	uxtb	r2, r3
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	611a      	str	r2, [r3, #16]
 80041b8:	e05e      	b.n	8004278 <I2C_MasterRequestRead+0x170>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041ba:	897b      	ldrh	r3, [r7, #10]
 80041bc:	11db      	asrs	r3, r3, #7
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	f003 0306 	and.w	r3, r3, #6
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	f063 030f 	orn	r3, r3, #15
 80041ca:	b2da      	uxtb	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	4930      	ldr	r1, [pc, #192]	; (8004298 <I2C_MasterRequestRead+0x190>)
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f8b8 	bl	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <I2C_MasterRequestRead+0xe0>
    {
      return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e053      	b.n	8004290 <I2C_MasterRequestRead+0x188>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041e8:	897b      	ldrh	r3, [r7, #10]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	687a      	ldr	r2, [r7, #4]
 80041f6:	4929      	ldr	r1, [pc, #164]	; (800429c <I2C_MasterRequestRead+0x194>)
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f8a8 	bl	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d001      	beq.n	8004208 <I2C_MasterRequestRead+0x100>
    {
      return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e043      	b.n	8004290 <I2C_MasterRequestRead+0x188>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004208:	2300      	movs	r3, #0
 800420a:	613b      	str	r3, [r7, #16]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	613b      	str	r3, [r7, #16]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	699b      	ldr	r3, [r3, #24]
 800421a:	613b      	str	r3, [r7, #16]
 800421c:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800422c:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800423a:	68f8      	ldr	r0, [r7, #12]
 800423c:	f000 f830 	bl	80042a0 <I2C_WaitOnFlagUntilTimeout>
 8004240:	4603      	mov	r3, r0
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00c      	beq.n	8004260 <I2C_MasterRequestRead+0x158>
    {
      if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d003      	beq.n	800425c <I2C_MasterRequestRead+0x154>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f44f 7200 	mov.w	r2, #512	; 0x200
 800425a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e017      	b.n	8004290 <I2C_MasterRequestRead+0x188>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004260:	897b      	ldrh	r3, [r7, #10]
 8004262:	11db      	asrs	r3, r3, #7
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 0306 	and.w	r3, r3, #6
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f063 030e 	orn	r3, r3, #14
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	4907      	ldr	r1, [pc, #28]	; (800429c <I2C_MasterRequestRead+0x194>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f865 	bl	800434e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_MasterRequestRead+0x186>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <I2C_MasterRequestRead+0x188>
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	00010008 	.word	0x00010008
 800429c:	00010002 	.word	0x00010002

080042a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b084      	sub	sp, #16
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	603b      	str	r3, [r7, #0]
 80042ac:	4613      	mov	r3, r2
 80042ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b0:	e025      	b.n	80042fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042b8:	d021      	beq.n	80042fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042ba:	f7fc feab 	bl	8001014 <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	429a      	cmp	r2, r3
 80042c8:	d302      	bcc.n	80042d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d116      	bne.n	80042fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2220      	movs	r2, #32
 80042da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e023      	b.n	8004346 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	0c1b      	lsrs	r3, r3, #16
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b01      	cmp	r3, #1
 8004306:	d10d      	bne.n	8004324 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	43da      	mvns	r2, r3
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	4013      	ands	r3, r2
 8004314:	b29b      	uxth	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	bf0c      	ite	eq
 800431a:	2301      	moveq	r3, #1
 800431c:	2300      	movne	r3, #0
 800431e:	b2db      	uxtb	r3, r3
 8004320:	461a      	mov	r2, r3
 8004322:	e00c      	b.n	800433e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	43da      	mvns	r2, r3
 800432c:	68bb      	ldr	r3, [r7, #8]
 800432e:	4013      	ands	r3, r2
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	bf0c      	ite	eq
 8004336:	2301      	moveq	r3, #1
 8004338:	2300      	movne	r3, #0
 800433a:	b2db      	uxtb	r3, r3
 800433c:	461a      	mov	r2, r3
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	429a      	cmp	r2, r3
 8004342:	d0b6      	beq.n	80042b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3710      	adds	r7, #16
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}

0800434e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800434e:	b580      	push	{r7, lr}
 8004350:	b084      	sub	sp, #16
 8004352:	af00      	add	r7, sp, #0
 8004354:	60f8      	str	r0, [r7, #12]
 8004356:	60b9      	str	r1, [r7, #8]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800435c:	e051      	b.n	8004402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004368:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436c:	d123      	bne.n	80043b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800437c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004386:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	f043 0204 	orr.w	r2, r3, #4
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e046      	b.n	8004444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043bc:	d021      	beq.n	8004402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043be:	f7fc fe29 	bl	8001014 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d116      	bne.n	8004402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f043 0220 	orr.w	r2, r3, #32
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e020      	b.n	8004444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	0c1b      	lsrs	r3, r3, #16
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b01      	cmp	r3, #1
 800440a:	d10c      	bne.n	8004426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	43da      	mvns	r2, r3
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	4013      	ands	r3, r2
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	e00b      	b.n	800443e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	43da      	mvns	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4013      	ands	r3, r2
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	bf14      	ite	ne
 8004438:	2301      	movne	r3, #1
 800443a:	2300      	moveq	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d18d      	bne.n	800435e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3710      	adds	r7, #16
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004458:	e02d      	b.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 f8ce 	bl	80045fc <I2C_IsAcknowledgeFailed>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d001      	beq.n	800446a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e02d      	b.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004470:	d021      	beq.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004472:	f7fc fdcf 	bl	8001014 <HAL_GetTick>
 8004476:	4602      	mov	r2, r0
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	1ad3      	subs	r3, r2, r3
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	d302      	bcc.n	8004488 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d116      	bne.n	80044b6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0220 	orr.w	r2, r3, #32
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e007      	b.n	80044c6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c0:	2b80      	cmp	r3, #128	; 0x80
 80044c2:	d1ca      	bne.n	800445a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c4:	2300      	movs	r3, #0
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3710      	adds	r7, #16
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}

080044ce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044ce:	b580      	push	{r7, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
 80044d4:	60f8      	str	r0, [r7, #12]
 80044d6:	60b9      	str	r1, [r7, #8]
 80044d8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044da:	e02d      	b.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f88d 	bl	80045fc <I2C_IsAcknowledgeFailed>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e02d      	b.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f2:	d021      	beq.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f4:	f7fc fd8e 	bl	8001014 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	d302      	bcc.n	800450a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d116      	bne.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2220      	movs	r2, #32
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2200      	movs	r2, #0
 800451c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0220 	orr.w	r2, r3, #32
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e007      	b.n	8004548 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b04      	cmp	r3, #4
 8004544:	d1ca      	bne.n	80044dc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3710      	adds	r7, #16
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800455c:	e042      	b.n	80045e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b10      	cmp	r3, #16
 800456a:	d119      	bne.n	80045a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f06f 0210 	mvn.w	r2, #16
 8004574:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2200      	movs	r2, #0
 800457a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800459c:	2301      	movs	r3, #1
 800459e:	e029      	b.n	80045f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a0:	f7fc fd38 	bl	8001014 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	68ba      	ldr	r2, [r7, #8]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d302      	bcc.n	80045b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d116      	bne.n	80045e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e007      	b.n	80045f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ee:	2b40      	cmp	r3, #64	; 0x40
 80045f0:	d1b5      	bne.n	800455e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3710      	adds	r7, #16
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004612:	d11b      	bne.n	800464c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800461c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004638:	f043 0204 	orr.w	r2, r3, #4
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e000      	b.n	800464e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800465a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800465c:	b08f      	sub	sp, #60	; 0x3c
 800465e:	af0a      	add	r7, sp, #40	; 0x28
 8004660:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e10f      	b.n	800488c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8004678:	b2db      	uxtb	r3, r3
 800467a:	2b00      	cmp	r3, #0
 800467c:	d106      	bne.n	800468c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f008 fbb6 	bl	800cdf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2203      	movs	r2, #3
 8004690:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469c:	2b00      	cmp	r3, #0
 800469e:	d102      	bne.n	80046a6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f003 fe27 	bl	80082fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	603b      	str	r3, [r7, #0]
 80046b6:	687e      	ldr	r6, [r7, #4]
 80046b8:	466d      	mov	r5, sp
 80046ba:	f106 0410 	add.w	r4, r6, #16
 80046be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046c6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046ca:	e885 0003 	stmia.w	r5, {r0, r1}
 80046ce:	1d33      	adds	r3, r6, #4
 80046d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046d2:	6838      	ldr	r0, [r7, #0]
 80046d4:	f003 fdb2 	bl	800823c <USB_CoreInit>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2202      	movs	r2, #2
 80046e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0d0      	b.n	800488c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2100      	movs	r1, #0
 80046f0:	4618      	mov	r0, r3
 80046f2:	f003 fe15 	bl	8008320 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f6:	2300      	movs	r3, #0
 80046f8:	73fb      	strb	r3, [r7, #15]
 80046fa:	e04a      	b.n	8004792 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046fc:	7bfa      	ldrb	r2, [r7, #15]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	1a9b      	subs	r3, r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	333d      	adds	r3, #61	; 0x3d
 800470c:	2201      	movs	r2, #1
 800470e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004710:	7bfa      	ldrb	r2, [r7, #15]
 8004712:	6879      	ldr	r1, [r7, #4]
 8004714:	4613      	mov	r3, r2
 8004716:	00db      	lsls	r3, r3, #3
 8004718:	1a9b      	subs	r3, r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	440b      	add	r3, r1
 800471e:	333c      	adds	r3, #60	; 0x3c
 8004720:	7bfa      	ldrb	r2, [r7, #15]
 8004722:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004724:	7bfa      	ldrb	r2, [r7, #15]
 8004726:	7bfb      	ldrb	r3, [r7, #15]
 8004728:	b298      	uxth	r0, r3
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	1a9b      	subs	r3, r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	3342      	adds	r3, #66	; 0x42
 8004738:	4602      	mov	r2, r0
 800473a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	6879      	ldr	r1, [r7, #4]
 8004740:	4613      	mov	r3, r2
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	1a9b      	subs	r3, r3, r2
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	440b      	add	r3, r1
 800474a:	333f      	adds	r3, #63	; 0x3f
 800474c:	2200      	movs	r2, #0
 800474e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004750:	7bfa      	ldrb	r2, [r7, #15]
 8004752:	6879      	ldr	r1, [r7, #4]
 8004754:	4613      	mov	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	1a9b      	subs	r3, r3, r2
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	3344      	adds	r3, #68	; 0x44
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004764:	7bfa      	ldrb	r2, [r7, #15]
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	4613      	mov	r3, r2
 800476a:	00db      	lsls	r3, r3, #3
 800476c:	1a9b      	subs	r3, r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3348      	adds	r3, #72	; 0x48
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004778:	7bfa      	ldrb	r2, [r7, #15]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	00db      	lsls	r3, r3, #3
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	3350      	adds	r3, #80	; 0x50
 8004788:	2200      	movs	r2, #0
 800478a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800478c:	7bfb      	ldrb	r3, [r7, #15]
 800478e:	3301      	adds	r3, #1
 8004790:	73fb      	strb	r3, [r7, #15]
 8004792:	7bfa      	ldrb	r2, [r7, #15]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	429a      	cmp	r2, r3
 800479a:	d3af      	bcc.n	80046fc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]
 80047a0:	e044      	b.n	800482c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047a2:	7bfa      	ldrb	r2, [r7, #15]
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	4613      	mov	r3, r2
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	1a9b      	subs	r3, r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	440b      	add	r3, r1
 80047b0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80047b4:	2200      	movs	r2, #0
 80047b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047b8:	7bfa      	ldrb	r2, [r7, #15]
 80047ba:	6879      	ldr	r1, [r7, #4]
 80047bc:	4613      	mov	r3, r2
 80047be:	00db      	lsls	r3, r3, #3
 80047c0:	1a9b      	subs	r3, r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	440b      	add	r3, r1
 80047c6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80047ca:	7bfa      	ldrb	r2, [r7, #15]
 80047cc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047ce:	7bfa      	ldrb	r2, [r7, #15]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	00db      	lsls	r3, r3, #3
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80047e0:	2200      	movs	r2, #0
 80047e2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047e4:	7bfa      	ldrb	r2, [r7, #15]
 80047e6:	6879      	ldr	r1, [r7, #4]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80047f6:	2200      	movs	r2, #0
 80047f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047fa:	7bfa      	ldrb	r2, [r7, #15]
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	00db      	lsls	r3, r3, #3
 8004802:	1a9b      	subs	r3, r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004810:	7bfa      	ldrb	r2, [r7, #15]
 8004812:	6879      	ldr	r1, [r7, #4]
 8004814:	4613      	mov	r3, r2
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	1a9b      	subs	r3, r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004826:	7bfb      	ldrb	r3, [r7, #15]
 8004828:	3301      	adds	r3, #1
 800482a:	73fb      	strb	r3, [r7, #15]
 800482c:	7bfa      	ldrb	r2, [r7, #15]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d3b5      	bcc.n	80047a2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	603b      	str	r3, [r7, #0]
 800483c:	687e      	ldr	r6, [r7, #4]
 800483e:	466d      	mov	r5, sp
 8004840:	f106 0410 	add.w	r4, r6, #16
 8004844:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004846:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004848:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800484a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800484c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004850:	e885 0003 	stmia.w	r5, {r0, r1}
 8004854:	1d33      	adds	r3, r6, #4
 8004856:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004858:	6838      	ldr	r0, [r7, #0]
 800485a:	f003 fd8b 	bl	8008374 <USB_DevInit>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d005      	beq.n	8004870 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2202      	movs	r2, #2
 8004868:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e00d      	b.n	800488c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4618      	mov	r0, r3
 8004886:	f003 ff48 	bl	800871a <USB_DevDisconnect>

  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3714      	adds	r7, #20
 8004890:	46bd      	mov	sp, r7
 8004892:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004894 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d101      	bne.n	80048a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e25b      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d075      	beq.n	800499e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b2:	4ba3      	ldr	r3, [pc, #652]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
 80048ba:	2b04      	cmp	r3, #4
 80048bc:	d00c      	beq.n	80048d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048be:	4ba0      	ldr	r3, [pc, #640]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048c6:	2b08      	cmp	r3, #8
 80048c8:	d112      	bne.n	80048f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ca:	4b9d      	ldr	r3, [pc, #628]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d6:	d10b      	bne.n	80048f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048d8:	4b99      	ldr	r3, [pc, #612]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d05b      	beq.n	800499c <HAL_RCC_OscConfig+0x108>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d157      	bne.n	800499c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e236      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f8:	d106      	bne.n	8004908 <HAL_RCC_OscConfig+0x74>
 80048fa:	4b91      	ldr	r3, [pc, #580]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a90      	ldr	r2, [pc, #576]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004904:	6013      	str	r3, [r2, #0]
 8004906:	e01d      	b.n	8004944 <HAL_RCC_OscConfig+0xb0>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004910:	d10c      	bne.n	800492c <HAL_RCC_OscConfig+0x98>
 8004912:	4b8b      	ldr	r3, [pc, #556]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a8a      	ldr	r2, [pc, #552]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	4b88      	ldr	r3, [pc, #544]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a87      	ldr	r2, [pc, #540]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004928:	6013      	str	r3, [r2, #0]
 800492a:	e00b      	b.n	8004944 <HAL_RCC_OscConfig+0xb0>
 800492c:	4b84      	ldr	r3, [pc, #528]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a83      	ldr	r2, [pc, #524]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004936:	6013      	str	r3, [r2, #0]
 8004938:	4b81      	ldr	r3, [pc, #516]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a80      	ldr	r2, [pc, #512]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 800493e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004942:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d013      	beq.n	8004974 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800494c:	f7fc fb62 	bl	8001014 <HAL_GetTick>
 8004950:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	e008      	b.n	8004966 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004954:	f7fc fb5e 	bl	8001014 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2b64      	cmp	r3, #100	; 0x64
 8004960:	d901      	bls.n	8004966 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e1fb      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004966:	4b76      	ldr	r3, [pc, #472]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496e:	2b00      	cmp	r3, #0
 8004970:	d0f0      	beq.n	8004954 <HAL_RCC_OscConfig+0xc0>
 8004972:	e014      	b.n	800499e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004974:	f7fc fb4e 	bl	8001014 <HAL_GetTick>
 8004978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800497a:	e008      	b.n	800498e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800497c:	f7fc fb4a 	bl	8001014 <HAL_GetTick>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	2b64      	cmp	r3, #100	; 0x64
 8004988:	d901      	bls.n	800498e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800498a:	2303      	movs	r3, #3
 800498c:	e1e7      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498e:	4b6c      	ldr	r3, [pc, #432]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f0      	bne.n	800497c <HAL_RCC_OscConfig+0xe8>
 800499a:	e000      	b.n	800499e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800499c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d063      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049aa:	4b65      	ldr	r3, [pc, #404]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	f003 030c 	and.w	r3, r3, #12
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00b      	beq.n	80049ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049b6:	4b62      	ldr	r3, [pc, #392]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d11c      	bne.n	80049fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049c2:	4b5f      	ldr	r3, [pc, #380]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d116      	bne.n	80049fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ce:	4b5c      	ldr	r3, [pc, #368]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0302 	and.w	r3, r3, #2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d005      	beq.n	80049e6 <HAL_RCC_OscConfig+0x152>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d001      	beq.n	80049e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	e1bb      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e6:	4b56      	ldr	r3, [pc, #344]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	00db      	lsls	r3, r3, #3
 80049f4:	4952      	ldr	r1, [pc, #328]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 80049f6:	4313      	orrs	r3, r2
 80049f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	e03a      	b.n	8004a72 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d020      	beq.n	8004a46 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a04:	4b4f      	ldr	r3, [pc, #316]	; (8004b44 <HAL_RCC_OscConfig+0x2b0>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0a:	f7fc fb03 	bl	8001014 <HAL_GetTick>
 8004a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a10:	e008      	b.n	8004a24 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a12:	f7fc faff 	bl	8001014 <HAL_GetTick>
 8004a16:	4602      	mov	r2, r0
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	1ad3      	subs	r3, r2, r3
 8004a1c:	2b02      	cmp	r3, #2
 8004a1e:	d901      	bls.n	8004a24 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a20:	2303      	movs	r3, #3
 8004a22:	e19c      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a24:	4b46      	ldr	r3, [pc, #280]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d0f0      	beq.n	8004a12 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a30:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	00db      	lsls	r3, r3, #3
 8004a3e:	4940      	ldr	r1, [pc, #256]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	600b      	str	r3, [r1, #0]
 8004a44:	e015      	b.n	8004a72 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCC_OscConfig+0x2b0>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4c:	f7fc fae2 	bl	8001014 <HAL_GetTick>
 8004a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a54:	f7fc fade 	bl	8001014 <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	693b      	ldr	r3, [r7, #16]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e17b      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a66:	4b36      	ldr	r3, [pc, #216]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1f0      	bne.n	8004a54 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d030      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a86:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <HAL_RCC_OscConfig+0x2b4>)
 8004a88:	2201      	movs	r2, #1
 8004a8a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8c:	f7fc fac2 	bl	8001014 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a94:	f7fc fabe 	bl	8001014 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b02      	cmp	r3, #2
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e15b      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa6:	4b26      	ldr	r3, [pc, #152]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d0f0      	beq.n	8004a94 <HAL_RCC_OscConfig+0x200>
 8004ab2:	e015      	b.n	8004ae0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ab4:	4b24      	ldr	r3, [pc, #144]	; (8004b48 <HAL_RCC_OscConfig+0x2b4>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aba:	f7fc faab 	bl	8001014 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ac2:	f7fc faa7 	bl	8001014 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e144      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad4:	4b1a      	ldr	r3, [pc, #104]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004ad6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d1f0      	bne.n	8004ac2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0304 	and.w	r3, r3, #4
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a0 	beq.w	8004c2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aee:	2300      	movs	r3, #0
 8004af0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004af2:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d10f      	bne.n	8004b1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	60bb      	str	r3, [r7, #8]
 8004b02:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b06:	4a0e      	ldr	r2, [pc, #56]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b16:	60bb      	str	r3, [r7, #8]
 8004b18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b1e:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_RCC_OscConfig+0x2b8>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d121      	bne.n	8004b6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b2a:	4b08      	ldr	r3, [pc, #32]	; (8004b4c <HAL_RCC_OscConfig+0x2b8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a07      	ldr	r2, [pc, #28]	; (8004b4c <HAL_RCC_OscConfig+0x2b8>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b36:	f7fc fa6d 	bl	8001014 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b3c:	e011      	b.n	8004b62 <HAL_RCC_OscConfig+0x2ce>
 8004b3e:	bf00      	nop
 8004b40:	40023800 	.word	0x40023800
 8004b44:	42470000 	.word	0x42470000
 8004b48:	42470e80 	.word	0x42470e80
 8004b4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b50:	f7fc fa60 	bl	8001014 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e0fd      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b62:	4b81      	ldr	r3, [pc, #516]	; (8004d68 <HAL_RCC_OscConfig+0x4d4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d106      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2f0>
 8004b76:	4b7d      	ldr	r3, [pc, #500]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b7a:	4a7c      	ldr	r2, [pc, #496]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	6713      	str	r3, [r2, #112]	; 0x70
 8004b82:	e01c      	b.n	8004bbe <HAL_RCC_OscConfig+0x32a>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b05      	cmp	r3, #5
 8004b8a:	d10c      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x312>
 8004b8c:	4b77      	ldr	r3, [pc, #476]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a76      	ldr	r2, [pc, #472]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004b92:	f043 0304 	orr.w	r3, r3, #4
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
 8004b98:	4b74      	ldr	r3, [pc, #464]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	4a73      	ldr	r2, [pc, #460]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004b9e:	f043 0301 	orr.w	r3, r3, #1
 8004ba2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba4:	e00b      	b.n	8004bbe <HAL_RCC_OscConfig+0x32a>
 8004ba6:	4b71      	ldr	r3, [pc, #452]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004baa:	4a70      	ldr	r2, [pc, #448]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004bac:	f023 0301 	bic.w	r3, r3, #1
 8004bb0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb2:	4b6e      	ldr	r3, [pc, #440]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb6:	4a6d      	ldr	r2, [pc, #436]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004bb8:	f023 0304 	bic.w	r3, r3, #4
 8004bbc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d015      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fc fa25 	bl	8001014 <HAL_GetTick>
 8004bca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fc fa21 	bl	8001014 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e0bc      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	4b61      	ldr	r3, [pc, #388]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCC_OscConfig+0x33a>
 8004bf0:	e014      	b.n	8004c1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf2:	f7fc fa0f 	bl	8001014 <HAL_GetTick>
 8004bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fc fa0b 	bl	8001014 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e0a6      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c10:	4b56      	ldr	r3, [pc, #344]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ee      	bne.n	8004bfa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d105      	bne.n	8004c2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c22:	4b52      	ldr	r3, [pc, #328]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	4a51      	ldr	r2, [pc, #324]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8092 	beq.w	8004d5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c38:	4b4c      	ldr	r3, [pc, #304]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b08      	cmp	r3, #8
 8004c42:	d05c      	beq.n	8004cfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d141      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c4c:	4b48      	ldr	r3, [pc, #288]	; (8004d70 <HAL_RCC_OscConfig+0x4dc>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c52:	f7fc f9df 	bl	8001014 <HAL_GetTick>
 8004c56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c58:	e008      	b.n	8004c6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c5a:	f7fc f9db 	bl	8001014 <HAL_GetTick>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d901      	bls.n	8004c6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e078      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6c:	4b3f      	ldr	r3, [pc, #252]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f0      	bne.n	8004c5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	69da      	ldr	r2, [r3, #28]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	431a      	orrs	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c86:	019b      	lsls	r3, r3, #6
 8004c88:	431a      	orrs	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	3b01      	subs	r3, #1
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9a:	061b      	lsls	r3, r3, #24
 8004c9c:	4933      	ldr	r1, [pc, #204]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ca2:	4b33      	ldr	r3, [pc, #204]	; (8004d70 <HAL_RCC_OscConfig+0x4dc>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca8:	f7fc f9b4 	bl	8001014 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fc f9b0 	bl	8001014 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e04d      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc2:	4b2a      	ldr	r3, [pc, #168]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x41c>
 8004cce:	e045      	b.n	8004d5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd0:	4b27      	ldr	r3, [pc, #156]	; (8004d70 <HAL_RCC_OscConfig+0x4dc>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7fc f99d 	bl	8001014 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cde:	f7fc f999 	bl	8001014 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e036      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf0:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1f0      	bne.n	8004cde <HAL_RCC_OscConfig+0x44a>
 8004cfc:	e02e      	b.n	8004d5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e029      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004d0a:	4b18      	ldr	r3, [pc, #96]	; (8004d6c <HAL_RCC_OscConfig+0x4d8>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d11c      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d115      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d32:	4013      	ands	r3, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d10d      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d106      	bne.n	8004d58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40007000 	.word	0x40007000
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	42470060 	.word	0x42470060

08004d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d101      	bne.n	8004d88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e0cc      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d88:	4b68      	ldr	r3, [pc, #416]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 030f 	and.w	r3, r3, #15
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d90c      	bls.n	8004db0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d96:	4b65      	ldr	r3, [pc, #404]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	b2d2      	uxtb	r2, r2
 8004d9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d9e:	4b63      	ldr	r3, [pc, #396]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	683a      	ldr	r2, [r7, #0]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d001      	beq.n	8004db0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	e0b8      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0302 	and.w	r3, r3, #2
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d020      	beq.n	8004dfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d005      	beq.n	8004dd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dc8:	4b59      	ldr	r3, [pc, #356]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dca:	689b      	ldr	r3, [r3, #8]
 8004dcc:	4a58      	ldr	r2, [pc, #352]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0308 	and.w	r3, r3, #8
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d005      	beq.n	8004dec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de0:	4b53      	ldr	r3, [pc, #332]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	4a52      	ldr	r2, [pc, #328]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004de6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004dec:	4b50      	ldr	r3, [pc, #320]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	494d      	ldr	r1, [pc, #308]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d044      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d107      	bne.n	8004e22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e12:	4b47      	ldr	r3, [pc, #284]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d119      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e07f      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d003      	beq.n	8004e32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d107      	bne.n	8004e42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e32:	4b3f      	ldr	r3, [pc, #252]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e06f      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e42:	4b3b      	ldr	r3, [pc, #236]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e067      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e52:	4b37      	ldr	r3, [pc, #220]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	f023 0203 	bic.w	r2, r3, #3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	4934      	ldr	r1, [pc, #208]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e64:	f7fc f8d6 	bl	8001014 <HAL_GetTick>
 8004e68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e6a:	e00a      	b.n	8004e82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e6c:	f7fc f8d2 	bl	8001014 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e04f      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e82:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	f003 020c 	and.w	r2, r3, #12
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d1eb      	bne.n	8004e6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e94:	4b25      	ldr	r3, [pc, #148]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 030f 	and.w	r3, r3, #15
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d20c      	bcs.n	8004ebc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b22      	ldr	r3, [pc, #136]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b20      	ldr	r3, [pc, #128]	; (8004f2c <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e032      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0304 	and.w	r3, r3, #4
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d008      	beq.n	8004eda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ec8:	4b19      	ldr	r3, [pc, #100]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4916      	ldr	r1, [pc, #88]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0308 	and.w	r3, r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d009      	beq.n	8004efa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	490e      	ldr	r1, [pc, #56]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004efa:	f000 f82d 	bl	8004f58 <HAL_RCC_GetSysClockFreq>
 8004efe:	4601      	mov	r1, r0
 8004f00:	4b0b      	ldr	r3, [pc, #44]	; (8004f30 <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	091b      	lsrs	r3, r3, #4
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	4a0a      	ldr	r2, [pc, #40]	; (8004f34 <HAL_RCC_ClockConfig+0x1c0>)
 8004f0c:	5cd3      	ldrb	r3, [r2, r3]
 8004f0e:	fa21 f303 	lsr.w	r3, r1, r3
 8004f12:	4a09      	ldr	r2, [pc, #36]	; (8004f38 <HAL_RCC_ClockConfig+0x1c4>)
 8004f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f16:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x1c8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f7fc f836 	bl	8000f8c <HAL_InitTick>

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3710      	adds	r7, #16
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40023c00 	.word	0x40023c00
 8004f30:	40023800 	.word	0x40023800
 8004f34:	0800f03c 	.word	0x0800f03c
 8004f38:	2000004c 	.word	0x2000004c
 8004f3c:	20000000 	.word	0x20000000

08004f40 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004f44:	4b03      	ldr	r3, [pc, #12]	; (8004f54 <HAL_RCC_EnableCSS+0x14>)
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	bf00      	nop
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	4247004c 	.word	0x4247004c

08004f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	2300      	movs	r3, #0
 8004f68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f6e:	4b63      	ldr	r3, [pc, #396]	; (80050fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f003 030c 	and.w	r3, r3, #12
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d007      	beq.n	8004f8a <HAL_RCC_GetSysClockFreq+0x32>
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d008      	beq.n	8004f90 <HAL_RCC_GetSysClockFreq+0x38>
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f040 80b4 	bne.w	80050ec <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f84:	4b5e      	ldr	r3, [pc, #376]	; (8005100 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004f86:	60bb      	str	r3, [r7, #8]
       break;
 8004f88:	e0b3      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f8a:	4b5e      	ldr	r3, [pc, #376]	; (8005104 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004f8c:	60bb      	str	r3, [r7, #8]
      break;
 8004f8e:	e0b0      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f90:	4b5a      	ldr	r3, [pc, #360]	; (80050fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f98:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f9a:	4b58      	ldr	r3, [pc, #352]	; (80050fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d04a      	beq.n	800503c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fa6:	4b55      	ldr	r3, [pc, #340]	; (80050fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	099b      	lsrs	r3, r3, #6
 8004fac:	f04f 0400 	mov.w	r4, #0
 8004fb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fb4:	f04f 0200 	mov.w	r2, #0
 8004fb8:	ea03 0501 	and.w	r5, r3, r1
 8004fbc:	ea04 0602 	and.w	r6, r4, r2
 8004fc0:	4629      	mov	r1, r5
 8004fc2:	4632      	mov	r2, r6
 8004fc4:	f04f 0300 	mov.w	r3, #0
 8004fc8:	f04f 0400 	mov.w	r4, #0
 8004fcc:	0154      	lsls	r4, r2, #5
 8004fce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fd2:	014b      	lsls	r3, r1, #5
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	4622      	mov	r2, r4
 8004fd8:	1b49      	subs	r1, r1, r5
 8004fda:	eb62 0206 	sbc.w	r2, r2, r6
 8004fde:	f04f 0300 	mov.w	r3, #0
 8004fe2:	f04f 0400 	mov.w	r4, #0
 8004fe6:	0194      	lsls	r4, r2, #6
 8004fe8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fec:	018b      	lsls	r3, r1, #6
 8004fee:	1a5b      	subs	r3, r3, r1
 8004ff0:	eb64 0402 	sbc.w	r4, r4, r2
 8004ff4:	f04f 0100 	mov.w	r1, #0
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	00e2      	lsls	r2, r4, #3
 8004ffe:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005002:	00d9      	lsls	r1, r3, #3
 8005004:	460b      	mov	r3, r1
 8005006:	4614      	mov	r4, r2
 8005008:	195b      	adds	r3, r3, r5
 800500a:	eb44 0406 	adc.w	r4, r4, r6
 800500e:	f04f 0100 	mov.w	r1, #0
 8005012:	f04f 0200 	mov.w	r2, #0
 8005016:	0262      	lsls	r2, r4, #9
 8005018:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800501c:	0259      	lsls	r1, r3, #9
 800501e:	460b      	mov	r3, r1
 8005020:	4614      	mov	r4, r2
 8005022:	4618      	mov	r0, r3
 8005024:	4621      	mov	r1, r4
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f04f 0400 	mov.w	r4, #0
 800502c:	461a      	mov	r2, r3
 800502e:	4623      	mov	r3, r4
 8005030:	f7fb fe0a 	bl	8000c48 <__aeabi_uldivmod>
 8005034:	4603      	mov	r3, r0
 8005036:	460c      	mov	r4, r1
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	e049      	b.n	80050d0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800503c:	4b2f      	ldr	r3, [pc, #188]	; (80050fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	099b      	lsrs	r3, r3, #6
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	f240 11ff 	movw	r1, #511	; 0x1ff
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	ea03 0501 	and.w	r5, r3, r1
 8005052:	ea04 0602 	and.w	r6, r4, r2
 8005056:	4629      	mov	r1, r5
 8005058:	4632      	mov	r2, r6
 800505a:	f04f 0300 	mov.w	r3, #0
 800505e:	f04f 0400 	mov.w	r4, #0
 8005062:	0154      	lsls	r4, r2, #5
 8005064:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005068:	014b      	lsls	r3, r1, #5
 800506a:	4619      	mov	r1, r3
 800506c:	4622      	mov	r2, r4
 800506e:	1b49      	subs	r1, r1, r5
 8005070:	eb62 0206 	sbc.w	r2, r2, r6
 8005074:	f04f 0300 	mov.w	r3, #0
 8005078:	f04f 0400 	mov.w	r4, #0
 800507c:	0194      	lsls	r4, r2, #6
 800507e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005082:	018b      	lsls	r3, r1, #6
 8005084:	1a5b      	subs	r3, r3, r1
 8005086:	eb64 0402 	sbc.w	r4, r4, r2
 800508a:	f04f 0100 	mov.w	r1, #0
 800508e:	f04f 0200 	mov.w	r2, #0
 8005092:	00e2      	lsls	r2, r4, #3
 8005094:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005098:	00d9      	lsls	r1, r3, #3
 800509a:	460b      	mov	r3, r1
 800509c:	4614      	mov	r4, r2
 800509e:	195b      	adds	r3, r3, r5
 80050a0:	eb44 0406 	adc.w	r4, r4, r6
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	f04f 0200 	mov.w	r2, #0
 80050ac:	02a2      	lsls	r2, r4, #10
 80050ae:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80050b2:	0299      	lsls	r1, r3, #10
 80050b4:	460b      	mov	r3, r1
 80050b6:	4614      	mov	r4, r2
 80050b8:	4618      	mov	r0, r3
 80050ba:	4621      	mov	r1, r4
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f04f 0400 	mov.w	r4, #0
 80050c2:	461a      	mov	r2, r3
 80050c4:	4623      	mov	r3, r4
 80050c6:	f7fb fdbf 	bl	8000c48 <__aeabi_uldivmod>
 80050ca:	4603      	mov	r3, r0
 80050cc:	460c      	mov	r4, r1
 80050ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050d0:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	0c1b      	lsrs	r3, r3, #16
 80050d6:	f003 0303 	and.w	r3, r3, #3
 80050da:	3301      	adds	r3, #1
 80050dc:	005b      	lsls	r3, r3, #1
 80050de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	60bb      	str	r3, [r7, #8]
      break;
 80050ea:	e002      	b.n	80050f2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050ec:	4b04      	ldr	r3, [pc, #16]	; (8005100 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80050ee:	60bb      	str	r3, [r7, #8]
      break;
 80050f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050f2:	68bb      	ldr	r3, [r7, #8]
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	3714      	adds	r7, #20
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fc:	40023800 	.word	0x40023800
 8005100:	00f42400 	.word	0x00f42400
 8005104:	007a1200 	.word	0x007a1200

08005108 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800510c:	4b03      	ldr	r3, [pc, #12]	; (800511c <HAL_RCC_GetHCLKFreq+0x14>)
 800510e:	681b      	ldr	r3, [r3, #0]
}
 8005110:	4618      	mov	r0, r3
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	2000004c 	.word	0x2000004c

08005120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005124:	f7ff fff0 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8005128:	4601      	mov	r1, r0
 800512a:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	0a9b      	lsrs	r3, r3, #10
 8005130:	f003 0307 	and.w	r3, r3, #7
 8005134:	4a03      	ldr	r2, [pc, #12]	; (8005144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005136:	5cd3      	ldrb	r3, [r2, r3]
 8005138:	fa21 f303 	lsr.w	r3, r1, r3
}
 800513c:	4618      	mov	r0, r3
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40023800 	.word	0x40023800
 8005144:	0800f04c 	.word	0x0800f04c

08005148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800514c:	f7ff ffdc 	bl	8005108 <HAL_RCC_GetHCLKFreq>
 8005150:	4601      	mov	r1, r0
 8005152:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	0b5b      	lsrs	r3, r3, #13
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	4a03      	ldr	r2, [pc, #12]	; (800516c <HAL_RCC_GetPCLK2Freq+0x24>)
 800515e:	5cd3      	ldrb	r3, [r2, r3]
 8005160:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005164:	4618      	mov	r0, r3
 8005166:	bd80      	pop	{r7, pc}
 8005168:	40023800 	.word	0x40023800
 800516c:	0800f04c 	.word	0x0800f04c

08005170 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800517c:	2300      	movs	r3, #0
 800517e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0301 	and.w	r3, r3, #1
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005194:	2b00      	cmp	r3, #0
 8005196:	d035      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005198:	4b62      	ldr	r3, [pc, #392]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800519e:	f7fb ff39 	bl	8001014 <HAL_GetTick>
 80051a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051a4:	e008      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051a6:	f7fb ff35 	bl	8001014 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d901      	bls.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e0b0      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80051b8:	4b5b      	ldr	r3, [pc, #364]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d1f0      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	019a      	lsls	r2, r3, #6
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	071b      	lsls	r3, r3, #28
 80051d0:	4955      	ldr	r1, [pc, #340]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051d8:	4b52      	ldr	r3, [pc, #328]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80051de:	f7fb ff19 	bl	8001014 <HAL_GetTick>
 80051e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051e4:	e008      	b.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80051e6:	f7fb ff15 	bl	8001014 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e090      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051f8:	4b4b      	ldr	r3, [pc, #300]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0302 	and.w	r3, r3, #2
 800520c:	2b00      	cmp	r3, #0
 800520e:	f000 8083 	beq.w	8005318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	4b44      	ldr	r3, [pc, #272]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	4a43      	ldr	r2, [pc, #268]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800521c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005220:	6413      	str	r3, [r2, #64]	; 0x40
 8005222:	4b41      	ldr	r3, [pc, #260]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800522a:	60fb      	str	r3, [r7, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800522e:	4b3f      	ldr	r3, [pc, #252]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a3e      	ldr	r2, [pc, #248]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005238:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800523a:	f7fb feeb 	bl	8001014 <HAL_GetTick>
 800523e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7fb fee7 	bl	8001014 <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e062      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005254:	4b35      	ldr	r3, [pc, #212]	; (800532c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005260:	4b31      	ldr	r3, [pc, #196]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005264:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005268:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d02f      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	429a      	cmp	r2, r3
 800527c:	d028      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800527e:	4b2a      	ldr	r3, [pc, #168]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005282:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005286:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005288:	4b29      	ldr	r3, [pc, #164]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800528a:	2201      	movs	r2, #1
 800528c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800528e:	4b28      	ldr	r3, [pc, #160]	; (8005330 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005294:	4a24      	ldr	r2, [pc, #144]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800529a:	4b23      	ldr	r3, [pc, #140]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800529e:	f003 0301 	and.w	r3, r3, #1
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d114      	bne.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80052a6:	f7fb feb5 	bl	8001014 <HAL_GetTick>
 80052aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ac:	e00a      	b.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80052ae:	f7fb feb1 	bl	8001014 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052bc:	4293      	cmp	r3, r2
 80052be:	d901      	bls.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80052c0:	2303      	movs	r3, #3
 80052c2:	e02a      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052c4:	4b18      	ldr	r3, [pc, #96]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052c8:	f003 0302 	and.w	r3, r3, #2
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ee      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052dc:	d10d      	bne.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80052de:	4b12      	ldr	r3, [pc, #72]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80052ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052f2:	490d      	ldr	r1, [pc, #52]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052f4:	4313      	orrs	r3, r2
 80052f6:	608b      	str	r3, [r1, #8]
 80052f8:	e005      	b.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80052fa:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	4a0a      	ldr	r2, [pc, #40]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005300:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005304:	6093      	str	r3, [r2, #8]
 8005306:	4b08      	ldr	r3, [pc, #32]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005308:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005312:	4905      	ldr	r1, [pc, #20]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005314:	4313      	orrs	r3, r2
 8005316:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	42470068 	.word	0x42470068
 8005328:	40023800 	.word	0x40023800
 800532c:	40007000 	.word	0x40007000
 8005330:	42470e40 	.word	0x42470e40

08005334 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e083      	b.n	800544e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	7f5b      	ldrb	r3, [r3, #29]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	2b00      	cmp	r3, #0
 800534e:	d105      	bne.n	800535c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f007 fb0e 	bl	800c978 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2202      	movs	r2, #2
 8005360:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	22ca      	movs	r2, #202	; 0xca
 8005368:	625a      	str	r2, [r3, #36]	; 0x24
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2253      	movs	r2, #83	; 0x53
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f897 	bl	80054a6 <RTC_EnterInitMode>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d008      	beq.n	8005390 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	22ff      	movs	r2, #255	; 0xff
 8005384:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2204      	movs	r2, #4
 800538a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e05e      	b.n	800544e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6812      	ldr	r2, [r2, #0]
 800539a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800539e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053a2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6899      	ldr	r1, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685a      	ldr	r2, [r3, #4]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	431a      	orrs	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	695b      	ldr	r3, [r3, #20]
 80053b8:	431a      	orrs	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	430a      	orrs	r2, r1
 80053c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68d2      	ldr	r2, [r2, #12]
 80053ca:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6919      	ldr	r1, [r3, #16]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	041a      	lsls	r2, r3, #16
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68da      	ldr	r2, [r3, #12]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053ee:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10e      	bne.n	800541c <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f829 	bl	8005456 <HAL_RTC_WaitForSynchro>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	22ff      	movs	r2, #255	; 0xff
 8005410:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2204      	movs	r2, #4
 8005416:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e018      	b.n	800544e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800542a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	22ff      	movs	r2, #255	; 0xff
 8005444:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800544c:	2300      	movs	r3, #0
  }
}
 800544e:	4618      	mov	r0, r3
 8005450:	3708      	adds	r7, #8
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}

08005456 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b084      	sub	sp, #16
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800545e:	2300      	movs	r3, #0
 8005460:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	68da      	ldr	r2, [r3, #12]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005470:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005472:	f7fb fdcf 	bl	8001014 <HAL_GetTick>
 8005476:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005478:	e009      	b.n	800548e <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800547a:	f7fb fdcb 	bl	8001014 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005488:	d901      	bls.n	800548e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800548a:	2303      	movs	r3, #3
 800548c:	e007      	b.n	800549e <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68db      	ldr	r3, [r3, #12]
 8005494:	f003 0320 	and.w	r3, r3, #32
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0ee      	beq.n	800547a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}

080054a6 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b084      	sub	sp, #16
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d119      	bne.n	80054f4 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054c8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80054ca:	f7fb fda3 	bl	8001014 <HAL_GetTick>
 80054ce:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054d0:	e009      	b.n	80054e6 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80054d2:	f7fb fd9f 	bl	8001014 <HAL_GetTick>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	1ad3      	subs	r3, r2, r3
 80054dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054e0:	d901      	bls.n	80054e6 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e007      	b.n	80054f6 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d0ee      	beq.n	80054d2 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80054f4:	2300      	movs	r3, #0
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	3710      	adds	r7, #16
 80054fa:	46bd      	mov	sp, r7
 80054fc:	bd80      	pop	{r7, pc}

080054fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80054fe:	b580      	push	{r7, lr}
 8005500:	b082      	sub	sp, #8
 8005502:	af00      	add	r7, sp, #0
 8005504:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d101      	bne.n	8005510 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e056      	b.n	80055be <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2200      	movs	r2, #0
 8005514:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f007 fa3a 	bl	800c9a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2202      	movs	r2, #2
 8005534:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005546:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685a      	ldr	r2, [r3, #4]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	431a      	orrs	r2, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	431a      	orrs	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	431a      	orrs	r2, r3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	699b      	ldr	r3, [r3, #24]
 8005568:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	69db      	ldr	r3, [r3, #28]
 8005572:	431a      	orrs	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6a1b      	ldr	r3, [r3, #32]
 8005578:	ea42 0103 	orr.w	r1, r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	699b      	ldr	r3, [r3, #24]
 800558c:	0c1b      	lsrs	r3, r3, #16
 800558e:	f003 0104 	and.w	r1, r3, #4
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	69da      	ldr	r2, [r3, #28]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80055bc:	2300      	movs	r3, #0
}
 80055be:	4618      	mov	r0, r3
 80055c0:	3708      	adds	r7, #8
 80055c2:	46bd      	mov	sp, r7
 80055c4:	bd80      	pop	{r7, pc}

080055c6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b088      	sub	sp, #32
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	60f8      	str	r0, [r7, #12]
 80055ce:	60b9      	str	r1, [r7, #8]
 80055d0:	603b      	str	r3, [r7, #0]
 80055d2:	4613      	mov	r3, r2
 80055d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_SPI_Transmit+0x22>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e11e      	b.n	8005826 <HAL_SPI_Transmit+0x260>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f0:	f7fb fd10 	bl	8001014 <HAL_GetTick>
 80055f4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055f6:	88fb      	ldrh	r3, [r7, #6]
 80055f8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b01      	cmp	r3, #1
 8005604:	d002      	beq.n	800560c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005606:	2302      	movs	r3, #2
 8005608:	77fb      	strb	r3, [r7, #31]
    goto error;
 800560a:	e103      	b.n	8005814 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d002      	beq.n	8005618 <HAL_SPI_Transmit+0x52>
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d102      	bne.n	800561e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005618:	2301      	movs	r3, #1
 800561a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800561c:	e0fa      	b.n	8005814 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2203      	movs	r2, #3
 8005622:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	88fa      	ldrh	r2, [r7, #6]
 8005636:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	88fa      	ldrh	r2, [r7, #6]
 800563c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2200      	movs	r2, #0
 8005648:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2200      	movs	r2, #0
 800564e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	689b      	ldr	r3, [r3, #8]
 8005660:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005664:	d107      	bne.n	8005676 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005674:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d007      	beq.n	8005694 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005692:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	68db      	ldr	r3, [r3, #12]
 8005698:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569c:	d14b      	bne.n	8005736 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d002      	beq.n	80056ac <HAL_SPI_Transmit+0xe6>
 80056a6:	8afb      	ldrh	r3, [r7, #22]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d13e      	bne.n	800572a <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056d0:	e02b      	b.n	800572a <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0302 	and.w	r3, r3, #2
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d112      	bne.n	8005706 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	881a      	ldrh	r2, [r3, #0]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	1c9a      	adds	r2, r3, #2
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	86da      	strh	r2, [r3, #54]	; 0x36
 8005704:	e011      	b.n	800572a <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005706:	f7fb fc85 	bl	8001014 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d803      	bhi.n	800571e <HAL_SPI_Transmit+0x158>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800571c:	d102      	bne.n	8005724 <HAL_SPI_Transmit+0x15e>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005728:	e074      	b.n	8005814 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1ce      	bne.n	80056d2 <HAL_SPI_Transmit+0x10c>
 8005734:	e04c      	b.n	80057d0 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d002      	beq.n	8005744 <HAL_SPI_Transmit+0x17e>
 800573e:	8afb      	ldrh	r3, [r7, #22]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d140      	bne.n	80057c6 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	330c      	adds	r3, #12
 800574e:	7812      	ldrb	r2, [r2, #0]
 8005750:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005756:	1c5a      	adds	r2, r3, #1
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005760:	b29b      	uxth	r3, r3
 8005762:	3b01      	subs	r3, #1
 8005764:	b29a      	uxth	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800576a:	e02c      	b.n	80057c6 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d113      	bne.n	80057a2 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	330c      	adds	r3, #12
 8005784:	7812      	ldrb	r2, [r2, #0]
 8005786:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800578c:	1c5a      	adds	r2, r3, #1
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	3b01      	subs	r3, #1
 800579a:	b29a      	uxth	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	86da      	strh	r2, [r3, #54]	; 0x36
 80057a0:	e011      	b.n	80057c6 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057a2:	f7fb fc37 	bl	8001014 <HAL_GetTick>
 80057a6:	4602      	mov	r2, r0
 80057a8:	69bb      	ldr	r3, [r7, #24]
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d803      	bhi.n	80057ba <HAL_SPI_Transmit+0x1f4>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057b8:	d102      	bne.n	80057c0 <HAL_SPI_Transmit+0x1fa>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d102      	bne.n	80057c6 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057c4:	e026      	b.n	8005814 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1cd      	bne.n	800576c <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	6839      	ldr	r1, [r7, #0]
 80057d4:	68f8      	ldr	r0, [r7, #12]
 80057d6:	f000 fcc3 	bl	8006160 <SPI_EndRxTxTransaction>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d002      	beq.n	80057e6 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10a      	bne.n	8005804 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ee:	2300      	movs	r3, #0
 80057f0:	613b      	str	r3, [r7, #16]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68db      	ldr	r3, [r3, #12]
 80057f8:	613b      	str	r3, [r7, #16]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	613b      	str	r3, [r7, #16]
 8005802:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	77fb      	strb	r3, [r7, #31]
 8005810:	e000      	b.n	8005814 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005812:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005824:	7ffb      	ldrb	r3, [r7, #31]
}
 8005826:	4618      	mov	r0, r3
 8005828:	3720      	adds	r7, #32
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}

0800582e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582e:	b580      	push	{r7, lr}
 8005830:	b088      	sub	sp, #32
 8005832:	af02      	add	r7, sp, #8
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	603b      	str	r3, [r7, #0]
 800583a:	4613      	mov	r3, r2
 800583c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800583e:	2300      	movs	r3, #0
 8005840:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800584a:	d112      	bne.n	8005872 <HAL_SPI_Receive+0x44>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10e      	bne.n	8005872 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2204      	movs	r2, #4
 8005858:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800585c:	88fa      	ldrh	r2, [r7, #6]
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	9300      	str	r3, [sp, #0]
 8005862:	4613      	mov	r3, r2
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	68b9      	ldr	r1, [r7, #8]
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f8e9 	bl	8005a40 <HAL_SPI_TransmitReceive>
 800586e:	4603      	mov	r3, r0
 8005870:	e0e2      	b.n	8005a38 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005878:	2b01      	cmp	r3, #1
 800587a:	d101      	bne.n	8005880 <HAL_SPI_Receive+0x52>
 800587c:	2302      	movs	r3, #2
 800587e:	e0db      	b.n	8005a38 <HAL_SPI_Receive+0x20a>
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2201      	movs	r2, #1
 8005884:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005888:	f7fb fbc4 	bl	8001014 <HAL_GetTick>
 800588c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b01      	cmp	r3, #1
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800589a:	2302      	movs	r3, #2
 800589c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800589e:	e0c2      	b.n	8005a26 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80058a0:	68bb      	ldr	r3, [r7, #8]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_SPI_Receive+0x7e>
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d102      	bne.n	80058b2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80058b0:	e0b9      	b.n	8005a26 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2204      	movs	r2, #4
 80058b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2200      	movs	r2, #0
 80058be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	68ba      	ldr	r2, [r7, #8]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	88fa      	ldrh	r2, [r7, #6]
 80058ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	88fa      	ldrh	r2, [r7, #6]
 80058d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058f8:	d107      	bne.n	800590a <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005908:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d007      	beq.n	8005928 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005926:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d162      	bne.n	80059f6 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005930:	e02e      	b.n	8005990 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b01      	cmp	r3, #1
 800593e:	d115      	bne.n	800596c <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f103 020c 	add.w	r2, r3, #12
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	7812      	ldrb	r2, [r2, #0]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005956:	1c5a      	adds	r2, r3, #1
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005960:	b29b      	uxth	r3, r3
 8005962:	3b01      	subs	r3, #1
 8005964:	b29a      	uxth	r2, r3
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	87da      	strh	r2, [r3, #62]	; 0x3e
 800596a:	e011      	b.n	8005990 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800596c:	f7fb fb52 	bl	8001014 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d803      	bhi.n	8005984 <HAL_SPI_Receive+0x156>
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005982:	d102      	bne.n	800598a <HAL_SPI_Receive+0x15c>
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d102      	bne.n	8005990 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800598a:	2303      	movs	r3, #3
 800598c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800598e:	e04a      	b.n	8005a26 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005994:	b29b      	uxth	r3, r3
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1cb      	bne.n	8005932 <HAL_SPI_Receive+0x104>
 800599a:	e031      	b.n	8005a00 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d113      	bne.n	80059d2 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	68da      	ldr	r2, [r3, #12]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b4:	b292      	uxth	r2, r2
 80059b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	1c9a      	adds	r2, r3, #2
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	3b01      	subs	r3, #1
 80059ca:	b29a      	uxth	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80059d0:	e011      	b.n	80059f6 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059d2:	f7fb fb1f 	bl	8001014 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	429a      	cmp	r2, r3
 80059e0:	d803      	bhi.n	80059ea <HAL_SPI_Receive+0x1bc>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80059e8:	d102      	bne.n	80059f0 <HAL_SPI_Receive+0x1c2>
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d102      	bne.n	80059f6 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80059f4:	e017      	b.n	8005a26 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1cd      	bne.n	800599c <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a00:	693a      	ldr	r2, [r7, #16]
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	68f8      	ldr	r0, [r7, #12]
 8005a06:	f000 fb45 	bl	8006094 <SPI_EndRxTransaction>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d002      	beq.n	8005a16 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	2220      	movs	r2, #32
 8005a14:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d002      	beq.n	8005a24 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
 8005a22:	e000      	b.n	8005a26 <HAL_SPI_Receive+0x1f8>
  }

error :
 8005a24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3718      	adds	r7, #24
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b08c      	sub	sp, #48	; 0x30
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
 8005a4c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_SPI_TransmitReceive+0x26>
 8005a62:	2302      	movs	r3, #2
 8005a64:	e18a      	b.n	8005d7c <HAL_SPI_TransmitReceive+0x33c>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2201      	movs	r2, #1
 8005a6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a6e:	f7fb fad1 	bl	8001014 <HAL_GetTick>
 8005a72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8005a84:	887b      	ldrh	r3, [r7, #2]
 8005a86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d00f      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x70>
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a96:	d107      	bne.n	8005aa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d103      	bne.n	8005aa8 <HAL_SPI_TransmitReceive+0x68>
 8005aa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d003      	beq.n	8005ab0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005aa8:	2302      	movs	r3, #2
 8005aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005aae:	e15b      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d005      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x82>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_SPI_TransmitReceive+0x82>
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005ac8:	e14e      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005ad0:	b2db      	uxtb	r3, r3
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d003      	beq.n	8005ade <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2205      	movs	r2, #5
 8005ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	687a      	ldr	r2, [r7, #4]
 8005ae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	887a      	ldrh	r2, [r7, #2]
 8005aee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	887a      	ldrh	r2, [r7, #2]
 8005af4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	887a      	ldrh	r2, [r7, #2]
 8005b00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	887a      	ldrh	r2, [r7, #2]
 8005b06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d007      	beq.n	8005b32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b3a:	d178      	bne.n	8005c2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d002      	beq.n	8005b4a <HAL_SPI_TransmitReceive+0x10a>
 8005b44:	8b7b      	ldrh	r3, [r7, #26]
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d166      	bne.n	8005c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	881a      	ldrh	r2, [r3, #0]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b5a:	1c9a      	adds	r2, r3, #2
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b64:	b29b      	uxth	r3, r3
 8005b66:	3b01      	subs	r3, #1
 8005b68:	b29a      	uxth	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b6e:	e053      	b.n	8005c18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d11b      	bne.n	8005bb6 <HAL_SPI_TransmitReceive+0x176>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d016      	beq.n	8005bb6 <HAL_SPI_TransmitReceive+0x176>
 8005b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d113      	bne.n	8005bb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	881a      	ldrh	r2, [r3, #0]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b9e:	1c9a      	adds	r2, r3, #2
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	3b01      	subs	r3, #1
 8005bac:	b29a      	uxth	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	d119      	bne.n	8005bf8 <HAL_SPI_TransmitReceive+0x1b8>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d014      	beq.n	8005bf8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	b292      	uxth	r2, r2
 8005bda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	1c9a      	adds	r2, r3, #2
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005bf8:	f7fb fa0c 	bl	8001014 <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d807      	bhi.n	8005c18 <HAL_SPI_TransmitReceive+0x1d8>
 8005c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c0e:	d003      	beq.n	8005c18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c16:	e0a7      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1a6      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x130>
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1a1      	bne.n	8005b70 <HAL_SPI_TransmitReceive+0x130>
 8005c2c:	e07c      	b.n	8005d28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <HAL_SPI_TransmitReceive+0x1fc>
 8005c36:	8b7b      	ldrh	r3, [r7, #26]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d16b      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	330c      	adds	r3, #12
 8005c46:	7812      	ldrb	r2, [r2, #0]
 8005c48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c62:	e057      	b.n	8005d14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 0302 	and.w	r3, r3, #2
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d11c      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x26c>
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d017      	beq.n	8005cac <HAL_SPI_TransmitReceive+0x26c>
 8005c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7e:	2b01      	cmp	r3, #1
 8005c80:	d114      	bne.n	8005cac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	330c      	adds	r3, #12
 8005c8c:	7812      	ldrb	r2, [r2, #0]
 8005c8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c94:	1c5a      	adds	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	b29a      	uxth	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d119      	bne.n	8005cee <HAL_SPI_TransmitReceive+0x2ae>
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d014      	beq.n	8005cee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	b2d2      	uxtb	r2, r2
 8005cd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd6:	1c5a      	adds	r2, r3, #1
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce0:	b29b      	uxth	r3, r3
 8005ce2:	3b01      	subs	r3, #1
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005cea:	2301      	movs	r3, #1
 8005cec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005cee:	f7fb f991 	bl	8001014 <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d803      	bhi.n	8005d06 <HAL_SPI_TransmitReceive+0x2c6>
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d04:	d102      	bne.n	8005d0c <HAL_SPI_TransmitReceive+0x2cc>
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d103      	bne.n	8005d14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005d0c:	2303      	movs	r3, #3
 8005d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005d12:	e029      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1a2      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x224>
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d19d      	bne.n	8005c64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 fa17 	bl	8006160 <SPI_EndRxTxTransaction>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d006      	beq.n	8005d46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2220      	movs	r2, #32
 8005d42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005d44:	e010      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d4e:	2300      	movs	r3, #0
 8005d50:	617b      	str	r3, [r7, #20]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	617b      	str	r3, [r7, #20]
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	e000      	b.n	8005d68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005d66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3730      	adds	r7, #48	; 0x30
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	099b      	lsrs	r3, r3, #6
 8005da0:	f003 0301 	and.w	r3, r3, #1
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10f      	bne.n	8005dc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	099b      	lsrs	r3, r3, #6
 8005db6:	f003 0301 	and.w	r3, r3, #1
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d004      	beq.n	8005dc8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	4798      	blx	r3
    return;
 8005dc6:	e0d8      	b.n	8005f7a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	085b      	lsrs	r3, r3, #1
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <HAL_SPI_IRQHandler+0x66>
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	09db      	lsrs	r3, r3, #7
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	4798      	blx	r3
    return;
 8005de8:	e0c7      	b.n	8005f7a <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	095b      	lsrs	r3, r3, #5
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d10c      	bne.n	8005e10 <HAL_SPI_IRQHandler+0x8c>
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	099b      	lsrs	r3, r3, #6
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	0a1b      	lsrs	r3, r3, #8
 8005e06:	f003 0301 	and.w	r3, r3, #1
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 80b5 	beq.w	8005f7a <HAL_SPI_IRQHandler+0x1f6>
 8005e10:	69fb      	ldr	r3, [r7, #28]
 8005e12:	095b      	lsrs	r3, r3, #5
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f000 80ae 	beq.w	8005f7a <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005e1e:	69bb      	ldr	r3, [r7, #24]
 8005e20:	099b      	lsrs	r3, r3, #6
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d023      	beq.n	8005e72 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d011      	beq.n	8005e5a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e42:	2300      	movs	r3, #0
 8005e44:	617b      	str	r3, [r7, #20]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	617b      	str	r3, [r7, #20]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	689b      	ldr	r3, [r3, #8]
 8005e54:	617b      	str	r3, [r7, #20]
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	e00b      	b.n	8005e72 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	613b      	str	r3, [r7, #16]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	613b      	str	r3, [r7, #16]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	613b      	str	r3, [r7, #16]
 8005e6e:	693b      	ldr	r3, [r7, #16]
        return;
 8005e70:	e083      	b.n	8005f7a <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	095b      	lsrs	r3, r3, #5
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d014      	beq.n	8005ea8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e82:	f043 0201 	orr.w	r2, r3, #1
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	0a1b      	lsrs	r3, r3, #8
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00c      	beq.n	8005ece <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb8:	f043 0208 	orr.w	r2, r3, #8
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	60bb      	str	r3, [r7, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	60bb      	str	r3, [r7, #8]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d050      	beq.n	8005f78 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	685a      	ldr	r2, [r3, #4]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ee4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	f003 0302 	and.w	r3, r3, #2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d104      	bne.n	8005f02 <HAL_SPI_IRQHandler+0x17e>
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	f003 0301 	and.w	r3, r3, #1
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d034      	beq.n	8005f6c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f022 0203 	bic.w	r2, r2, #3
 8005f10:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d011      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f1e:	4a18      	ldr	r2, [pc, #96]	; (8005f80 <HAL_SPI_IRQHandler+0x1fc>)
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f26:	4618      	mov	r0, r3
 8005f28:	f7fc ff4c 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d005      	beq.n	8005f3e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f4a:	4a0d      	ldr	r2, [pc, #52]	; (8005f80 <HAL_SPI_IRQHandler+0x1fc>)
 8005f4c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7fc ff36 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00a      	beq.n	8005f74 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8005f6a:	e003      	b.n	8005f74 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 f809 	bl	8005f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005f72:	e000      	b.n	8005f76 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8005f74:	bf00      	nop
    return;
 8005f76:	bf00      	nop
 8005f78:	bf00      	nop
  }
}
 8005f7a:	3720      	adds	r7, #32
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	08005f99 	.word	0x08005f99

08005f84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005fb2:	68f8      	ldr	r0, [r7, #12]
 8005fb4:	f7ff ffe6 	bl	8005f84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	603b      	str	r3, [r7, #0]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd0:	e04c      	b.n	800606c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fd8:	d048      	beq.n	800606c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005fda:	f7fb f81b 	bl	8001014 <HAL_GetTick>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	1ad3      	subs	r3, r2, r3
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d902      	bls.n	8005ff0 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d13d      	bne.n	800606c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ffe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006008:	d111      	bne.n	800602e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006012:	d004      	beq.n	800601e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800601c:	d107      	bne.n	800602e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006032:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006036:	d10f      	bne.n	8006058 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006046:	601a      	str	r2, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006056:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e00f      	b.n	800608c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4013      	ands	r3, r2
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	429a      	cmp	r2, r3
 800607a:	bf0c      	ite	eq
 800607c:	2301      	moveq	r3, #1
 800607e:	2300      	movne	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	429a      	cmp	r2, r3
 8006088:	d1a3      	bne.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af02      	add	r7, sp, #8
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060a8:	d111      	bne.n	80060ce <SPI_EndRxTransaction+0x3a>
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b2:	d004      	beq.n	80060be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060bc:	d107      	bne.n	80060ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681a      	ldr	r2, [r3, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060d6:	d12a      	bne.n	800612e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060e0:	d012      	beq.n	8006108 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	2180      	movs	r1, #128	; 0x80
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff ff67 	bl	8005fc0 <SPI_WaitFlagStateUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d02d      	beq.n	8006154 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fc:	f043 0220 	orr.w	r2, r3, #32
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8006104:	2303      	movs	r3, #3
 8006106:	e026      	b.n	8006156 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	2200      	movs	r2, #0
 8006110:	2101      	movs	r1, #1
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff ff54 	bl	8005fc0 <SPI_WaitFlagStateUntilTimeout>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d01a      	beq.n	8006154 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006122:	f043 0220 	orr.w	r2, r3, #32
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800612a:	2303      	movs	r3, #3
 800612c:	e013      	b.n	8006156 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	9300      	str	r3, [sp, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2200      	movs	r2, #0
 8006136:	2101      	movs	r1, #1
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7ff ff41 	bl	8005fc0 <SPI_WaitFlagStateUntilTimeout>
 800613e:	4603      	mov	r3, r0
 8006140:	2b00      	cmp	r3, #0
 8006142:	d007      	beq.n	8006154 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006148:	f043 0220 	orr.w	r2, r3, #32
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006150:	2303      	movs	r3, #3
 8006152:	e000      	b.n	8006156 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3710      	adds	r7, #16
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
	...

08006160 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b088      	sub	sp, #32
 8006164:	af02      	add	r7, sp, #8
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800616c:	4b1b      	ldr	r3, [pc, #108]	; (80061dc <SPI_EndRxTxTransaction+0x7c>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <SPI_EndRxTxTransaction+0x80>)
 8006172:	fba2 2303 	umull	r2, r3, r2, r3
 8006176:	0d5b      	lsrs	r3, r3, #21
 8006178:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800617c:	fb02 f303 	mul.w	r3, r2, r3
 8006180:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800618a:	d112      	bne.n	80061b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	9300      	str	r3, [sp, #0]
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	2200      	movs	r2, #0
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	68f8      	ldr	r0, [r7, #12]
 8006198:	f7ff ff12 	bl	8005fc0 <SPI_WaitFlagStateUntilTimeout>
 800619c:	4603      	mov	r3, r0
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d016      	beq.n	80061d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061a6:	f043 0220 	orr.w	r2, r3, #32
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80061ae:	2303      	movs	r3, #3
 80061b0:	e00f      	b.n	80061d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d00a      	beq.n	80061ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689b      	ldr	r3, [r3, #8]
 80061c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c8:	2b80      	cmp	r3, #128	; 0x80
 80061ca:	d0f2      	beq.n	80061b2 <SPI_EndRxTxTransaction+0x52>
 80061cc:	e000      	b.n	80061d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80061ce:	bf00      	nop
  }

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3718      	adds	r7, #24
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	2000004c 	.word	0x2000004c
 80061e0:	165e9f81 	.word	0x165e9f81

080061e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b082      	sub	sp, #8
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061f2:	2301      	movs	r3, #1
 80061f4:	e01d      	b.n	8006232 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d106      	bne.n	8006210 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f006 fc1a 	bl	800ca44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2202      	movs	r2, #2
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3304      	adds	r3, #4
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f000 fd6a 	bl	8006cfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b085      	sub	sp, #20
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2202      	movs	r2, #2
 8006246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b06      	cmp	r3, #6
 800625a:	d007      	beq.n	800626c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f042 0201 	orr.w	r2, r2, #1
 800626a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d101      	bne.n	8006294 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e01d      	b.n	80062d0 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b00      	cmp	r3, #0
 800629e:	d106      	bne.n	80062ae <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f815 	bl	80062d8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2202      	movs	r2, #2
 80062b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3304      	adds	r3, #4
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f000 fd1b 	bl	8006cfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2201      	movs	r2, #1
 80062ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80062d8:	b480      	push	{r7}
 80062da:	b083      	sub	sp, #12
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80062e0:	bf00      	nop
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_TIM_OC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2201      	movs	r2, #1
 80062fc:	6839      	ldr	r1, [r7, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f000 ffe6 	bl	80072d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a15      	ldr	r2, [pc, #84]	; (8006360 <HAL_TIM_OC_Start+0x74>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_OC_Start+0x2c>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a14      	ldr	r2, [pc, #80]	; (8006364 <HAL_TIM_OC_Start+0x78>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d101      	bne.n	800631c <HAL_TIM_OC_Start+0x30>
 8006318:	2301      	movs	r3, #1
 800631a:	e000      	b.n	800631e <HAL_TIM_OC_Start+0x32>
 800631c:	2300      	movs	r3, #0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d007      	beq.n	8006332 <HAL_TIM_OC_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006330:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	2b06      	cmp	r3, #6
 8006342:	d007      	beq.n	8006354 <HAL_TIM_OC_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3710      	adds	r7, #16
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	40010000 	.word	0x40010000
 8006364:	40010400 	.word	0x40010400

08006368 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d101      	bne.n	800637a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e01d      	b.n	80063b6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b00      	cmp	r3, #0
 8006384:	d106      	bne.n	8006394 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f815 	bl	80063be <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2202      	movs	r2, #2
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3304      	adds	r3, #4
 80063a4:	4619      	mov	r1, r3
 80063a6:	4610      	mov	r0, r2
 80063a8:	f000 fca8 	bl	8006cfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063be:	b480      	push	{r7}
 80063c0:	b083      	sub	sp, #12
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
	...

080063d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	2201      	movs	r2, #1
 80063e4:	6839      	ldr	r1, [r7, #0]
 80063e6:	4618      	mov	r0, r3
 80063e8:	f000 ff72 	bl	80072d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4a15      	ldr	r2, [pc, #84]	; (8006448 <HAL_TIM_PWM_Start+0x74>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d004      	beq.n	8006400 <HAL_TIM_PWM_Start+0x2c>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	4a14      	ldr	r2, [pc, #80]	; (800644c <HAL_TIM_PWM_Start+0x78>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d101      	bne.n	8006404 <HAL_TIM_PWM_Start+0x30>
 8006400:	2301      	movs	r3, #1
 8006402:	e000      	b.n	8006406 <HAL_TIM_PWM_Start+0x32>
 8006404:	2300      	movs	r3, #0
 8006406:	2b00      	cmp	r3, #0
 8006408:	d007      	beq.n	800641a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006418:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2b06      	cmp	r3, #6
 800642a:	d007      	beq.n	800643c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f042 0201 	orr.w	r2, r2, #1
 800643a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400

08006450 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	2b0c      	cmp	r3, #12
 800645e:	d841      	bhi.n	80064e4 <HAL_TIM_IC_Start_IT+0x94>
 8006460:	a201      	add	r2, pc, #4	; (adr r2, 8006468 <HAL_TIM_IC_Start_IT+0x18>)
 8006462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006466:	bf00      	nop
 8006468:	0800649d 	.word	0x0800649d
 800646c:	080064e5 	.word	0x080064e5
 8006470:	080064e5 	.word	0x080064e5
 8006474:	080064e5 	.word	0x080064e5
 8006478:	080064af 	.word	0x080064af
 800647c:	080064e5 	.word	0x080064e5
 8006480:	080064e5 	.word	0x080064e5
 8006484:	080064e5 	.word	0x080064e5
 8006488:	080064c1 	.word	0x080064c1
 800648c:	080064e5 	.word	0x080064e5
 8006490:	080064e5 	.word	0x080064e5
 8006494:	080064e5 	.word	0x080064e5
 8006498:	080064d3 	.word	0x080064d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68da      	ldr	r2, [r3, #12]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f042 0202 	orr.w	r2, r2, #2
 80064aa:	60da      	str	r2, [r3, #12]
      break;
 80064ac:	e01b      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68da      	ldr	r2, [r3, #12]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f042 0204 	orr.w	r2, r2, #4
 80064bc:	60da      	str	r2, [r3, #12]
      break;
 80064be:	e012      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68da      	ldr	r2, [r3, #12]
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f042 0208 	orr.w	r2, r2, #8
 80064ce:	60da      	str	r2, [r3, #12]
      break;
 80064d0:	e009      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68da      	ldr	r2, [r3, #12]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f042 0210 	orr.w	r2, r2, #16
 80064e0:	60da      	str	r2, [r3, #12]
      break;
 80064e2:	e000      	b.n	80064e6 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 80064e4:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2201      	movs	r2, #1
 80064ec:	6839      	ldr	r1, [r7, #0]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 feee 	bl	80072d0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f003 0307 	and.w	r3, r3, #7
 80064fe:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2b06      	cmp	r3, #6
 8006504:	d007      	beq.n	8006516 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0201 	orr.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d101      	bne.n	8006534 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e083      	b.n	800663c <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d106      	bne.n	800654e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f006 fb0b 	bl	800cb64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2202      	movs	r2, #2
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	689b      	ldr	r3, [r3, #8]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6812      	ldr	r2, [r2, #0]
 8006560:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006564:	f023 0307 	bic.w	r3, r3, #7
 8006568:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	4619      	mov	r1, r3
 8006574:	4610      	mov	r0, r2
 8006576:	f000 fbc1 	bl	8006cfc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	6a1b      	ldr	r3, [r3, #32]
 8006590:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006592:	683b      	ldr	r3, [r7, #0]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	699b      	ldr	r3, [r3, #24]
 80065b0:	021b      	lsls	r3, r3, #8
 80065b2:	4313      	orrs	r3, r2
 80065b4:	693a      	ldr	r2, [r7, #16]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80065c0:	f023 030c 	bic.w	r3, r3, #12
 80065c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	68da      	ldr	r2, [r3, #12]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	69db      	ldr	r3, [r3, #28]
 80065da:	021b      	lsls	r3, r3, #8
 80065dc:	4313      	orrs	r3, r2
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	4313      	orrs	r3, r2
 80065e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80065e4:	683b      	ldr	r3, [r7, #0]
 80065e6:	691b      	ldr	r3, [r3, #16]
 80065e8:	011a      	lsls	r2, r3, #4
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	6a1b      	ldr	r3, [r3, #32]
 80065ee:	031b      	lsls	r3, r3, #12
 80065f0:	4313      	orrs	r3, r2
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	4313      	orrs	r3, r2
 80065f6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80065fe:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006606:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	685a      	ldr	r2, [r3, #4]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	695b      	ldr	r3, [r3, #20]
 8006610:	011b      	lsls	r3, r3, #4
 8006612:	4313      	orrs	r3, r2
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	697a      	ldr	r2, [r7, #20]
 8006620:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	693a      	ldr	r2, [r7, #16]
 8006628:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2201      	movs	r2, #1
 8006636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	3718      	adds	r7, #24
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b082      	sub	sp, #8
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d002      	beq.n	800665a <HAL_TIM_Encoder_Start_IT+0x16>
 8006654:	2b04      	cmp	r3, #4
 8006656:	d010      	beq.n	800667a <HAL_TIM_Encoder_Start_IT+0x36>
 8006658:	e01f      	b.n	800669a <HAL_TIM_Encoder_Start_IT+0x56>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	2201      	movs	r2, #1
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f000 fe34 	bl	80072d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68da      	ldr	r2, [r3, #12]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f042 0202 	orr.w	r2, r2, #2
 8006676:	60da      	str	r2, [r3, #12]
      break;
 8006678:	e02e      	b.n	80066d8 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	2201      	movs	r2, #1
 8006680:	2104      	movs	r1, #4
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fe24 	bl	80072d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0204 	orr.w	r2, r2, #4
 8006696:	60da      	str	r2, [r3, #12]
      break;
 8006698:	e01e      	b.n	80066d8 <HAL_TIM_Encoder_Start_IT+0x94>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2201      	movs	r2, #1
 80066a0:	2100      	movs	r1, #0
 80066a2:	4618      	mov	r0, r3
 80066a4:	f000 fe14 	bl	80072d0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2201      	movs	r2, #1
 80066ae:	2104      	movs	r1, #4
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 fe0d 	bl	80072d0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	68da      	ldr	r2, [r3, #12]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0202 	orr.w	r2, r2, #2
 80066c4:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68da      	ldr	r2, [r3, #12]
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f042 0204 	orr.w	r2, r2, #4
 80066d4:	60da      	str	r2, [r3, #12]
      break;
 80066d6:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b082      	sub	sp, #8
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b02      	cmp	r3, #2
 8006706:	d122      	bne.n	800674e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	68db      	ldr	r3, [r3, #12]
 800670e:	f003 0302 	and.w	r3, r3, #2
 8006712:	2b02      	cmp	r3, #2
 8006714:	d11b      	bne.n	800674e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f06f 0202 	mvn.w	r2, #2
 800671e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2201      	movs	r2, #1
 8006724:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	f003 0303 	and.w	r3, r3, #3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d003      	beq.n	800673c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006734:	6878      	ldr	r0, [r7, #4]
 8006736:	f004 fd69 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800673a:	e005      	b.n	8006748 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f004 f945 	bl	800a9cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 fac5 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2200      	movs	r2, #0
 800674c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	f003 0304 	and.w	r3, r3, #4
 8006758:	2b04      	cmp	r3, #4
 800675a:	d122      	bne.n	80067a2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	f003 0304 	and.w	r3, r3, #4
 8006766:	2b04      	cmp	r3, #4
 8006768:	d11b      	bne.n	80067a2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f06f 0204 	mvn.w	r2, #4
 8006772:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2202      	movs	r2, #2
 8006778:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006784:	2b00      	cmp	r3, #0
 8006786:	d003      	beq.n	8006790 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f004 fd3f 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 800678e:	e005      	b.n	800679c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f004 f91b 	bl	800a9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 fa9b 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	691b      	ldr	r3, [r3, #16]
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d122      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	f003 0308 	and.w	r3, r3, #8
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d11b      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f06f 0208 	mvn.w	r2, #8
 80067c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2204      	movs	r2, #4
 80067cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	69db      	ldr	r3, [r3, #28]
 80067d4:	f003 0303 	and.w	r3, r3, #3
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d003      	beq.n	80067e4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f004 fd15 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 80067e2:	e005      	b.n	80067f0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f004 f8f1 	bl	800a9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa71 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2200      	movs	r2, #0
 80067f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b10      	cmp	r3, #16
 8006802:	d122      	bne.n	800684a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b10      	cmp	r3, #16
 8006810:	d11b      	bne.n	800684a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f06f 0210 	mvn.w	r2, #16
 800681a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2208      	movs	r2, #8
 8006820:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800682c:	2b00      	cmp	r3, #0
 800682e:	d003      	beq.n	8006838 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f004 fceb 	bl	800b20c <HAL_TIM_IC_CaptureCallback>
 8006836:	e005      	b.n	8006844 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f004 f8c7 	bl	800a9cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fa47 	bl	8006cd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	691b      	ldr	r3, [r3, #16]
 8006850:	f003 0301 	and.w	r3, r3, #1
 8006854:	2b01      	cmp	r3, #1
 8006856:	d10e      	bne.n	8006876 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	f003 0301 	and.w	r3, r3, #1
 8006862:	2b01      	cmp	r3, #1
 8006864:	d107      	bne.n	8006876 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f06f 0201 	mvn.w	r2, #1
 800686e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fa24 	bl	8006cbe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	691b      	ldr	r3, [r3, #16]
 800687c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006880:	2b80      	cmp	r3, #128	; 0x80
 8006882:	d10e      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	d107      	bne.n	80068a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800689a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800689c:	6878      	ldr	r0, [r7, #4]
 800689e:	f000 fe3f 	bl	8007520 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	691b      	ldr	r3, [r3, #16]
 80068a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ac:	2b40      	cmp	r3, #64	; 0x40
 80068ae:	d10e      	bne.n	80068ce <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b40      	cmp	r3, #64	; 0x40
 80068bc:	d107      	bne.n	80068ce <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80068c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 fa0c 	bl	8006ce6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f003 0320 	and.w	r3, r3, #32
 80068d8:	2b20      	cmp	r3, #32
 80068da:	d10e      	bne.n	80068fa <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f003 0320 	and.w	r3, r3, #32
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	d107      	bne.n	80068fa <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f06f 0220 	mvn.w	r2, #32
 80068f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f000 fe09 	bl	800750c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80068fa:	bf00      	nop
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
	...

08006904 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b084      	sub	sp, #16
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_TIM_OC_ConfigChannel+0x1a>
 800691a:	2302      	movs	r3, #2
 800691c:	e04e      	b.n	80069bc <HAL_TIM_OC_ConfigChannel+0xb8>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2202      	movs	r2, #2
 800692a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2b0c      	cmp	r3, #12
 8006932:	d839      	bhi.n	80069a8 <HAL_TIM_OC_ConfigChannel+0xa4>
 8006934:	a201      	add	r2, pc, #4	; (adr r2, 800693c <HAL_TIM_OC_ConfigChannel+0x38>)
 8006936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800693a:	bf00      	nop
 800693c:	08006971 	.word	0x08006971
 8006940:	080069a9 	.word	0x080069a9
 8006944:	080069a9 	.word	0x080069a9
 8006948:	080069a9 	.word	0x080069a9
 800694c:	0800697f 	.word	0x0800697f
 8006950:	080069a9 	.word	0x080069a9
 8006954:	080069a9 	.word	0x080069a9
 8006958:	080069a9 	.word	0x080069a9
 800695c:	0800698d 	.word	0x0800698d
 8006960:	080069a9 	.word	0x080069a9
 8006964:	080069a9 	.word	0x080069a9
 8006968:	080069a9 	.word	0x080069a9
 800696c:	0800699b 	.word	0x0800699b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68b9      	ldr	r1, [r7, #8]
 8006976:	4618      	mov	r0, r3
 8006978:	f000 fa60 	bl	8006e3c <TIM_OC1_SetConfig>
      break;
 800697c:	e015      	b.n	80069aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68b9      	ldr	r1, [r7, #8]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fac9 	bl	8006f1c <TIM_OC2_SetConfig>
      break;
 800698a:	e00e      	b.n	80069aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	68b9      	ldr	r1, [r7, #8]
 8006992:	4618      	mov	r0, r3
 8006994:	f000 fb38 	bl	8007008 <TIM_OC3_SetConfig>
      break;
 8006998:	e007      	b.n	80069aa <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	4618      	mov	r0, r3
 80069a2:	f000 fba5 	bl	80070f0 <TIM_OC4_SetConfig>
      break;
 80069a6:	e000      	b.n	80069aa <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80069a8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ba:	2300      	movs	r3, #0
}
 80069bc:	4618      	mov	r0, r3
 80069be:	3710      	adds	r7, #16
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}

080069c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d101      	bne.n	80069de <HAL_TIM_PWM_ConfigChannel+0x1a>
 80069da:	2302      	movs	r3, #2
 80069dc:	e0b4      	b.n	8006b48 <HAL_TIM_PWM_ConfigChannel+0x184>
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	2201      	movs	r2, #1
 80069e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2202      	movs	r2, #2
 80069ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b0c      	cmp	r3, #12
 80069f2:	f200 809f 	bhi.w	8006b34 <HAL_TIM_PWM_ConfigChannel+0x170>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a31 	.word	0x08006a31
 8006a00:	08006b35 	.word	0x08006b35
 8006a04:	08006b35 	.word	0x08006b35
 8006a08:	08006b35 	.word	0x08006b35
 8006a0c:	08006a71 	.word	0x08006a71
 8006a10:	08006b35 	.word	0x08006b35
 8006a14:	08006b35 	.word	0x08006b35
 8006a18:	08006b35 	.word	0x08006b35
 8006a1c:	08006ab3 	.word	0x08006ab3
 8006a20:	08006b35 	.word	0x08006b35
 8006a24:	08006b35 	.word	0x08006b35
 8006a28:	08006b35 	.word	0x08006b35
 8006a2c:	08006af3 	.word	0x08006af3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	68b9      	ldr	r1, [r7, #8]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fa00 	bl	8006e3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699a      	ldr	r2, [r3, #24]
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f042 0208 	orr.w	r2, r2, #8
 8006a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0204 	bic.w	r2, r2, #4
 8006a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6999      	ldr	r1, [r3, #24]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	691a      	ldr	r2, [r3, #16]
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	619a      	str	r2, [r3, #24]
      break;
 8006a6e:	e062      	b.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	68b9      	ldr	r1, [r7, #8]
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 fa50 	bl	8006f1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	699a      	ldr	r2, [r3, #24]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	699a      	ldr	r2, [r3, #24]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	6999      	ldr	r1, [r3, #24]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	021a      	lsls	r2, r3, #8
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	430a      	orrs	r2, r1
 8006aae:	619a      	str	r2, [r3, #24]
      break;
 8006ab0:	e041      	b.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68b9      	ldr	r1, [r7, #8]
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 faa5 	bl	8007008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	69da      	ldr	r2, [r3, #28]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f042 0208 	orr.w	r2, r2, #8
 8006acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	69da      	ldr	r2, [r3, #28]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f022 0204 	bic.w	r2, r2, #4
 8006adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	69d9      	ldr	r1, [r3, #28]
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	691a      	ldr	r2, [r3, #16]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	430a      	orrs	r2, r1
 8006aee:	61da      	str	r2, [r3, #28]
      break;
 8006af0:	e021      	b.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	68b9      	ldr	r1, [r7, #8]
 8006af8:	4618      	mov	r0, r3
 8006afa:	f000 faf9 	bl	80070f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	69da      	ldr	r2, [r3, #28]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	69d9      	ldr	r1, [r3, #28]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	021a      	lsls	r2, r3, #8
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	61da      	str	r2, [r3, #28]
      break;
 8006b32:	e000      	b.n	8006b36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006b34:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b46:	2300      	movs	r3, #0
}
 8006b48:	4618      	mov	r0, r3
 8006b4a:	3710      	adds	r7, #16
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	bd80      	pop	{r7, pc}

08006b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b084      	sub	sp, #16
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
 8006b58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b60:	2b01      	cmp	r3, #1
 8006b62:	d101      	bne.n	8006b68 <HAL_TIM_ConfigClockSource+0x18>
 8006b64:	2302      	movs	r3, #2
 8006b66:	e0a6      	b.n	8006cb6 <HAL_TIM_ConfigClockSource+0x166>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2202      	movs	r2, #2
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b86:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b8e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b40      	cmp	r3, #64	; 0x40
 8006b9e:	d067      	beq.n	8006c70 <HAL_TIM_ConfigClockSource+0x120>
 8006ba0:	2b40      	cmp	r3, #64	; 0x40
 8006ba2:	d80b      	bhi.n	8006bbc <HAL_TIM_ConfigClockSource+0x6c>
 8006ba4:	2b10      	cmp	r3, #16
 8006ba6:	d073      	beq.n	8006c90 <HAL_TIM_ConfigClockSource+0x140>
 8006ba8:	2b10      	cmp	r3, #16
 8006baa:	d802      	bhi.n	8006bb2 <HAL_TIM_ConfigClockSource+0x62>
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d06f      	beq.n	8006c90 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8006bb0:	e078      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bb2:	2b20      	cmp	r3, #32
 8006bb4:	d06c      	beq.n	8006c90 <HAL_TIM_ConfigClockSource+0x140>
 8006bb6:	2b30      	cmp	r3, #48	; 0x30
 8006bb8:	d06a      	beq.n	8006c90 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8006bba:	e073      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bbc:	2b70      	cmp	r3, #112	; 0x70
 8006bbe:	d00d      	beq.n	8006bdc <HAL_TIM_ConfigClockSource+0x8c>
 8006bc0:	2b70      	cmp	r3, #112	; 0x70
 8006bc2:	d804      	bhi.n	8006bce <HAL_TIM_ConfigClockSource+0x7e>
 8006bc4:	2b50      	cmp	r3, #80	; 0x50
 8006bc6:	d033      	beq.n	8006c30 <HAL_TIM_ConfigClockSource+0xe0>
 8006bc8:	2b60      	cmp	r3, #96	; 0x60
 8006bca:	d041      	beq.n	8006c50 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8006bcc:	e06a      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8006bce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bd2:	d066      	beq.n	8006ca2 <HAL_TIM_ConfigClockSource+0x152>
 8006bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd8:	d017      	beq.n	8006c0a <HAL_TIM_ConfigClockSource+0xba>
      break;
 8006bda:	e063      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6818      	ldr	r0, [r3, #0]
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	6899      	ldr	r1, [r3, #8]
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	685a      	ldr	r2, [r3, #4]
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	f000 fb50 	bl	8007290 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006bfe:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	609a      	str	r2, [r3, #8]
      break;
 8006c08:	e04c      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6818      	ldr	r0, [r3, #0]
 8006c0e:	683b      	ldr	r3, [r7, #0]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	685a      	ldr	r2, [r3, #4]
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	f000 fb39 	bl	8007290 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c2c:	609a      	str	r2, [r3, #8]
      break;
 8006c2e:	e039      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	6859      	ldr	r1, [r3, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f000 faad 	bl	800719c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2150      	movs	r1, #80	; 0x50
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f000 fb06 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006c4e:	e029      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	6859      	ldr	r1, [r3, #4]
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	68db      	ldr	r3, [r3, #12]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	f000 facc 	bl	80071fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2160      	movs	r1, #96	; 0x60
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f000 faf6 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006c6e:	e019      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6818      	ldr	r0, [r3, #0]
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	6859      	ldr	r1, [r3, #4]
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	f000 fa8d 	bl	800719c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2140      	movs	r1, #64	; 0x40
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f000 fae6 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006c8e:	e009      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f000 fadd 	bl	800725a <TIM_ITRx_SetConfig>
      break;
 8006ca0:	e000      	b.n	8006ca4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8006ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}

08006cbe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006cc6:	bf00      	nop
 8006cc8:	370c      	adds	r7, #12
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr

08006cd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006cd2:	b480      	push	{r7}
 8006cd4:	b083      	sub	sp, #12
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006cda:	bf00      	nop
 8006cdc:	370c      	adds	r7, #12
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b083      	sub	sp, #12
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006cee:	bf00      	nop
 8006cf0:	370c      	adds	r7, #12
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf8:	4770      	bx	lr
	...

08006cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a40      	ldr	r2, [pc, #256]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d013      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d1a:	d00f      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <TIM_Base_SetConfig+0x118>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d00b      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a3c      	ldr	r2, [pc, #240]	; (8006e18 <TIM_Base_SetConfig+0x11c>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d007      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a3b      	ldr	r2, [pc, #236]	; (8006e1c <TIM_Base_SetConfig+0x120>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a3a      	ldr	r2, [pc, #232]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d108      	bne.n	8006d4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a2f      	ldr	r2, [pc, #188]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d02b      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d5c:	d027      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a2c      	ldr	r2, [pc, #176]	; (8006e14 <TIM_Base_SetConfig+0x118>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d023      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a2b      	ldr	r2, [pc, #172]	; (8006e18 <TIM_Base_SetConfig+0x11c>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d01f      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a2a      	ldr	r2, [pc, #168]	; (8006e1c <TIM_Base_SetConfig+0x120>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01b      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a29      	ldr	r2, [pc, #164]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d017      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a28      	ldr	r2, [pc, #160]	; (8006e24 <TIM_Base_SetConfig+0x128>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d013      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a27      	ldr	r2, [pc, #156]	; (8006e28 <TIM_Base_SetConfig+0x12c>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d00f      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a26      	ldr	r2, [pc, #152]	; (8006e2c <TIM_Base_SetConfig+0x130>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00b      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a25      	ldr	r2, [pc, #148]	; (8006e30 <TIM_Base_SetConfig+0x134>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d007      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a24      	ldr	r2, [pc, #144]	; (8006e34 <TIM_Base_SetConfig+0x138>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d003      	beq.n	8006dae <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a23      	ldr	r2, [pc, #140]	; (8006e38 <TIM_Base_SetConfig+0x13c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d108      	bne.n	8006dc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	68db      	ldr	r3, [r3, #12]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	695b      	ldr	r3, [r3, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	689a      	ldr	r2, [r3, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <TIM_Base_SetConfig+0x114>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d003      	beq.n	8006df4 <TIM_Base_SetConfig+0xf8>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <TIM_Base_SetConfig+0x124>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d103      	bne.n	8006dfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	691a      	ldr	r2, [r3, #16]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	615a      	str	r2, [r3, #20]
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	40010000 	.word	0x40010000
 8006e14:	40000400 	.word	0x40000400
 8006e18:	40000800 	.word	0x40000800
 8006e1c:	40000c00 	.word	0x40000c00
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800
 8006e30:	40001800 	.word	0x40001800
 8006e34:	40001c00 	.word	0x40001c00
 8006e38:	40002000 	.word	0x40002000

08006e3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b087      	sub	sp, #28
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a1b      	ldr	r3, [r3, #32]
 8006e4a:	f023 0201 	bic.w	r2, r3, #1
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	685b      	ldr	r3, [r3, #4]
 8006e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f023 0303 	bic.w	r3, r3, #3
 8006e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	f023 0302 	bic.w	r3, r3, #2
 8006e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	697a      	ldr	r2, [r7, #20]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a20      	ldr	r2, [pc, #128]	; (8006f14 <TIM_OC1_SetConfig+0xd8>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d003      	beq.n	8006ea0 <TIM_OC1_SetConfig+0x64>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a1f      	ldr	r2, [pc, #124]	; (8006f18 <TIM_OC1_SetConfig+0xdc>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d10c      	bne.n	8006eba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f023 0308 	bic.w	r3, r3, #8
 8006ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f023 0304 	bic.w	r3, r3, #4
 8006eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a15      	ldr	r2, [pc, #84]	; (8006f14 <TIM_OC1_SetConfig+0xd8>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d003      	beq.n	8006eca <TIM_OC1_SetConfig+0x8e>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a14      	ldr	r2, [pc, #80]	; (8006f18 <TIM_OC1_SetConfig+0xdc>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d111      	bne.n	8006eee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	693a      	ldr	r2, [r7, #16]
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	4313      	orrs	r3, r2
 8006eec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	693a      	ldr	r2, [r7, #16]
 8006ef2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	68fa      	ldr	r2, [r7, #12]
 8006ef8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	621a      	str	r2, [r3, #32]
}
 8006f08:	bf00      	nop
 8006f0a:	371c      	adds	r7, #28
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40010000 	.word	0x40010000
 8006f18:	40010400 	.word	0x40010400

08006f1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6a1b      	ldr	r3, [r3, #32]
 8006f2a:	f023 0210 	bic.w	r2, r3, #16
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6a1b      	ldr	r3, [r3, #32]
 8006f36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	685b      	ldr	r3, [r3, #4]
 8006f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	021b      	lsls	r3, r3, #8
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f023 0320 	bic.w	r3, r3, #32
 8006f66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	011b      	lsls	r3, r3, #4
 8006f6e:	697a      	ldr	r2, [r7, #20]
 8006f70:	4313      	orrs	r3, r2
 8006f72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a22      	ldr	r2, [pc, #136]	; (8007000 <TIM_OC2_SetConfig+0xe4>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d003      	beq.n	8006f84 <TIM_OC2_SetConfig+0x68>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a21      	ldr	r2, [pc, #132]	; (8007004 <TIM_OC2_SetConfig+0xe8>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d10d      	bne.n	8006fa0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	011b      	lsls	r3, r3, #4
 8006f92:	697a      	ldr	r2, [r7, #20]
 8006f94:	4313      	orrs	r3, r2
 8006f96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	4a17      	ldr	r2, [pc, #92]	; (8007000 <TIM_OC2_SetConfig+0xe4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d003      	beq.n	8006fb0 <TIM_OC2_SetConfig+0x94>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	4a16      	ldr	r2, [pc, #88]	; (8007004 <TIM_OC2_SetConfig+0xe8>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d113      	bne.n	8006fd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fb8:	693b      	ldr	r3, [r7, #16]
 8006fba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	695b      	ldr	r3, [r3, #20]
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	4313      	orrs	r3, r2
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	685a      	ldr	r2, [r3, #4]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	697a      	ldr	r2, [r7, #20]
 8006ff0:	621a      	str	r2, [r3, #32]
}
 8006ff2:	bf00      	nop
 8006ff4:	371c      	adds	r7, #28
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40010400 	.word	0x40010400

08007008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007008:	b480      	push	{r7}
 800700a:	b087      	sub	sp, #28
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6a1b      	ldr	r3, [r3, #32]
 8007016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	69db      	ldr	r3, [r3, #28]
 800702e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f023 0303 	bic.w	r3, r3, #3
 800703e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	021b      	lsls	r3, r3, #8
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	4313      	orrs	r3, r2
 800705c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a21      	ldr	r2, [pc, #132]	; (80070e8 <TIM_OC3_SetConfig+0xe0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <TIM_OC3_SetConfig+0x66>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a20      	ldr	r2, [pc, #128]	; (80070ec <TIM_OC3_SetConfig+0xe4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d10d      	bne.n	800708a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007074:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a16      	ldr	r2, [pc, #88]	; (80070e8 <TIM_OC3_SetConfig+0xe0>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d003      	beq.n	800709a <TIM_OC3_SetConfig+0x92>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	4a15      	ldr	r2, [pc, #84]	; (80070ec <TIM_OC3_SetConfig+0xe4>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d113      	bne.n	80070c2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	011b      	lsls	r3, r3, #4
 80070b0:	693a      	ldr	r2, [r7, #16]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	011b      	lsls	r3, r3, #4
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	4313      	orrs	r3, r2
 80070c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685a      	ldr	r2, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	697a      	ldr	r2, [r7, #20]
 80070da:	621a      	str	r2, [r3, #32]
}
 80070dc:	bf00      	nop
 80070de:	371c      	adds	r7, #28
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr
 80070e8:	40010000 	.word	0x40010000
 80070ec:	40010400 	.word	0x40010400

080070f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b087      	sub	sp, #28
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a1b      	ldr	r3, [r3, #32]
 80070fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69db      	ldr	r3, [r3, #28]
 8007116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800711e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007126:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800713a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	689b      	ldr	r3, [r3, #8]
 8007140:	031b      	lsls	r3, r3, #12
 8007142:	693a      	ldr	r2, [r7, #16]
 8007144:	4313      	orrs	r3, r2
 8007146:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a12      	ldr	r2, [pc, #72]	; (8007194 <TIM_OC4_SetConfig+0xa4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d003      	beq.n	8007158 <TIM_OC4_SetConfig+0x68>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a11      	ldr	r2, [pc, #68]	; (8007198 <TIM_OC4_SetConfig+0xa8>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d109      	bne.n	800716c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007158:	697b      	ldr	r3, [r7, #20]
 800715a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800715e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	019b      	lsls	r3, r3, #6
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	4313      	orrs	r3, r2
 800716a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68fa      	ldr	r2, [r7, #12]
 8007176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685a      	ldr	r2, [r3, #4]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	693a      	ldr	r2, [r7, #16]
 8007184:	621a      	str	r2, [r3, #32]
}
 8007186:	bf00      	nop
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007190:	4770      	bx	lr
 8007192:	bf00      	nop
 8007194:	40010000 	.word	0x40010000
 8007198:	40010400 	.word	0x40010400

0800719c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800719c:	b480      	push	{r7}
 800719e:	b087      	sub	sp, #28
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	60f8      	str	r0, [r7, #12]
 80071a4:	60b9      	str	r1, [r7, #8]
 80071a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6a1b      	ldr	r3, [r3, #32]
 80071ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6a1b      	ldr	r3, [r3, #32]
 80071b2:	f023 0201 	bic.w	r2, r3, #1
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	011b      	lsls	r3, r3, #4
 80071cc:	693a      	ldr	r2, [r7, #16]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	f023 030a 	bic.w	r3, r3, #10
 80071d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	697a      	ldr	r2, [r7, #20]
 80071ec:	621a      	str	r2, [r3, #32]
}
 80071ee:	bf00      	nop
 80071f0:	371c      	adds	r7, #28
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071fa:	b480      	push	{r7}
 80071fc:	b087      	sub	sp, #28
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f023 0210 	bic.w	r2, r3, #16
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6a1b      	ldr	r3, [r3, #32]
 800721c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007224:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	031b      	lsls	r3, r3, #12
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	4313      	orrs	r3, r2
 800722e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007236:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	011b      	lsls	r3, r3, #4
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	4313      	orrs	r3, r2
 8007240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	693a      	ldr	r2, [r7, #16]
 800724c:	621a      	str	r2, [r3, #32]
}
 800724e:	bf00      	nop
 8007250:	371c      	adds	r7, #28
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr

0800725a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800725a:	b480      	push	{r7}
 800725c:	b085      	sub	sp, #20
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007270:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	4313      	orrs	r3, r2
 8007278:	f043 0307 	orr.w	r3, r3, #7
 800727c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	609a      	str	r2, [r3, #8]
}
 8007284:	bf00      	nop
 8007286:	3714      	adds	r7, #20
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	60f8      	str	r0, [r7, #12]
 8007298:	60b9      	str	r1, [r7, #8]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	689b      	ldr	r3, [r3, #8]
 80072a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	021a      	lsls	r2, r3, #8
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	431a      	orrs	r2, r3
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	697a      	ldr	r2, [r7, #20]
 80072ba:	4313      	orrs	r3, r2
 80072bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	609a      	str	r2, [r3, #8]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	f003 031f 	and.w	r3, r3, #31
 80072e2:	2201      	movs	r2, #1
 80072e4:	fa02 f303 	lsl.w	r3, r2, r3
 80072e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	43db      	mvns	r3, r3
 80072f2:	401a      	ands	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	f003 031f 	and.w	r3, r3, #31
 8007302:	6879      	ldr	r1, [r7, #4]
 8007304:	fa01 f303 	lsl.w	r3, r1, r3
 8007308:	431a      	orrs	r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr

0800731a <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800731a:	b580      	push	{r7, lr}
 800731c:	b084      	sub	sp, #16
 800731e:	af00      	add	r7, sp, #0
 8007320:	6078      	str	r0, [r7, #4]
 8007322:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	2204      	movs	r2, #4
 800732a:	6839      	ldr	r1, [r7, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	f000 f901 	bl	8007534 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007340:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	f003 0307 	and.w	r3, r3, #7
 800734c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2b06      	cmp	r3, #6
 8007352:	d007      	beq.n	8007364 <HAL_TIMEx_PWMN_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007380:	2b01      	cmp	r3, #1
 8007382:	d101      	bne.n	8007388 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007384:	2302      	movs	r3, #2
 8007386:	e05a      	b.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2202      	movs	r2, #2
 8007394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a21      	ldr	r2, [pc, #132]	; (800744c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d022      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d4:	d01d      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1d      	ldr	r2, [pc, #116]	; (8007450 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d018      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1b      	ldr	r2, [pc, #108]	; (8007454 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d013      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1a      	ldr	r2, [pc, #104]	; (8007458 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00e      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a18      	ldr	r2, [pc, #96]	; (800745c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d009      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	4a17      	ldr	r2, [pc, #92]	; (8007460 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d004      	beq.n	8007412 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a15      	ldr	r2, [pc, #84]	; (8007464 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d10c      	bne.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007418:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	4313      	orrs	r3, r2
 8007422:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68ba      	ldr	r2, [r7, #8]
 800742a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40010000 	.word	0x40010000
 8007450:	40000400 	.word	0x40000400
 8007454:	40000800 	.word	0x40000800
 8007458:	40000c00 	.word	0x40000c00
 800745c:	40010400 	.word	0x40010400
 8007460:	40014000 	.word	0x40014000
 8007464:	40001800 	.word	0x40001800

08007468 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007468:	b480      	push	{r7}
 800746a:	b085      	sub	sp, #20
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007480:	2302      	movs	r3, #2
 8007482:	e03d      	b.n	8007500 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	4313      	orrs	r3, r2
 8007498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	4313      	orrs	r3, r2
 80074b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	695b      	ldr	r3, [r3, #20]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	69db      	ldr	r3, [r3, #28]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	68fa      	ldr	r2, [r7, #12]
 80074f4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007514:	bf00      	nop
 8007516:	370c      	adds	r7, #12
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007520:	b480      	push	{r7}
 8007522:	b083      	sub	sp, #12
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	f003 031f 	and.w	r3, r3, #31
 8007546:	2204      	movs	r2, #4
 8007548:	fa02 f303 	lsl.w	r3, r2, r3
 800754c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6a1a      	ldr	r2, [r3, #32]
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	43db      	mvns	r3, r3
 8007556:	401a      	ands	r2, r3
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a1a      	ldr	r2, [r3, #32]
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	f003 031f 	and.w	r3, r3, #31
 8007566:	6879      	ldr	r1, [r7, #4]
 8007568:	fa01 f303 	lsl.w	r3, r1, r3
 800756c:	431a      	orrs	r2, r3
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	621a      	str	r2, [r3, #32]
}
 8007572:	bf00      	nop
 8007574:	371c      	adds	r7, #28
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr

0800757e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800757e:	b580      	push	{r7, lr}
 8007580:	b082      	sub	sp, #8
 8007582:	af00      	add	r7, sp, #0
 8007584:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d101      	bne.n	8007590 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800758c:	2301      	movs	r3, #1
 800758e:	e03f      	b.n	8007610 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b00      	cmp	r3, #0
 800759a:	d106      	bne.n	80075aa <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f005 fba5 	bl	800ccf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2224      	movs	r2, #36	; 0x24
 80075ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	68da      	ldr	r2, [r3, #12]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80075c0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fabe 	bl	8007b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695a      	ldr	r2, [r3, #20]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075e6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075f6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2220      	movs	r2, #32
 8007602:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2220      	movs	r2, #32
 800760a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800760e:	2300      	movs	r3, #0
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	4613      	mov	r3, r2
 8007624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800762c:	b2db      	uxtb	r3, r3
 800762e:	2b20      	cmp	r3, #32
 8007630:	d140      	bne.n	80076b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <HAL_UART_Receive_IT+0x26>
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e039      	b.n	80076b6 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_UART_Receive_IT+0x38>
 800764c:	2302      	movs	r3, #2
 800764e:	e032      	b.n	80076b6 <HAL_UART_Receive_IT+0x9e>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	68ba      	ldr	r2, [r7, #8]
 800765c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	88fa      	ldrh	r2, [r7, #6]
 8007662:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	88fa      	ldrh	r2, [r7, #6]
 8007668:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2200      	movs	r2, #0
 800766e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2222      	movs	r2, #34	; 0x22
 8007674:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800768e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	695a      	ldr	r2, [r3, #20]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f042 0201 	orr.w	r2, r2, #1
 800769e:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	68da      	ldr	r2, [r3, #12]
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f042 0220 	orr.w	r2, r2, #32
 80076ae:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80076b0:	2300      	movs	r3, #0
 80076b2:	e000      	b.n	80076b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80076b4:	2302      	movs	r3, #2
  }
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3714      	adds	r7, #20
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr
	...

080076c4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b088      	sub	sp, #32
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695b      	ldr	r3, [r3, #20]
 80076e2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80076e4:	2300      	movs	r3, #0
 80076e6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80076e8:	2300      	movs	r3, #0
 80076ea:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10d      	bne.n	8007716 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80076fa:	69fb      	ldr	r3, [r7, #28]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d008      	beq.n	8007716 <HAL_UART_IRQHandler+0x52>
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d003      	beq.n	8007716 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f996 	bl	8007a40 <UART_Receive_IT>
      return;
 8007714:	e0d1      	b.n	80078ba <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2b00      	cmp	r3, #0
 800771a:	f000 80b0 	beq.w	800787e <HAL_UART_IRQHandler+0x1ba>
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	f003 0301 	and.w	r3, r3, #1
 8007724:	2b00      	cmp	r3, #0
 8007726:	d105      	bne.n	8007734 <HAL_UART_IRQHandler+0x70>
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80a5 	beq.w	800787e <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b00      	cmp	r3, #0
 800773c:	d00a      	beq.n	8007754 <HAL_UART_IRQHandler+0x90>
 800773e:	69bb      	ldr	r3, [r7, #24]
 8007740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800774c:	f043 0201 	orr.w	r2, r3, #1
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007754:	69fb      	ldr	r3, [r7, #28]
 8007756:	f003 0304 	and.w	r3, r3, #4
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <HAL_UART_IRQHandler+0xb0>
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	f003 0301 	and.w	r3, r3, #1
 8007764:	2b00      	cmp	r3, #0
 8007766:	d005      	beq.n	8007774 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800776c:	f043 0202 	orr.w	r2, r3, #2
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	f003 0302 	and.w	r3, r3, #2
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00a      	beq.n	8007794 <HAL_UART_IRQHandler+0xd0>
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d005      	beq.n	8007794 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800778c:	f043 0204 	orr.w	r2, r3, #4
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	f003 0308 	and.w	r3, r3, #8
 800779a:	2b00      	cmp	r3, #0
 800779c:	d00f      	beq.n	80077be <HAL_UART_IRQHandler+0xfa>
 800779e:	69bb      	ldr	r3, [r7, #24]
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d104      	bne.n	80077b2 <HAL_UART_IRQHandler+0xee>
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f003 0301 	and.w	r3, r3, #1
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b6:	f043 0208 	orr.w	r2, r3, #8
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d078      	beq.n	80078b8 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	f003 0320 	and.w	r3, r3, #32
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d007      	beq.n	80077e0 <HAL_UART_IRQHandler+0x11c>
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	f003 0320 	and.w	r3, r3, #32
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d002      	beq.n	80077e0 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f930 	bl	8007a40 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	695b      	ldr	r3, [r3, #20]
 80077e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ea:	2b40      	cmp	r3, #64	; 0x40
 80077ec:	bf0c      	ite	eq
 80077ee:	2301      	moveq	r3, #1
 80077f0:	2300      	movne	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077fa:	f003 0308 	and.w	r3, r3, #8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d102      	bne.n	8007808 <HAL_UART_IRQHandler+0x144>
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d031      	beq.n	800786c <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f879 	bl	8007900 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007818:	2b40      	cmp	r3, #64	; 0x40
 800781a:	d123      	bne.n	8007864 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	695a      	ldr	r2, [r3, #20]
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800782a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007830:	2b00      	cmp	r3, #0
 8007832:	d013      	beq.n	800785c <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007838:	4a21      	ldr	r2, [pc, #132]	; (80078c0 <HAL_UART_IRQHandler+0x1fc>)
 800783a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	4618      	mov	r0, r3
 8007842:	f7fb fabf 	bl	8002dc4 <HAL_DMA_Abort_IT>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d016      	beq.n	800787a <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007856:	4610      	mov	r0, r2
 8007858:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800785a:	e00e      	b.n	800787a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f845 	bl	80078ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007862:	e00a      	b.n	800787a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007864:	6878      	ldr	r0, [r7, #4]
 8007866:	f000 f841 	bl	80078ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800786a:	e006      	b.n	800787a <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f83d 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8007878:	e01e      	b.n	80078b8 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800787a:	bf00      	nop
    return;
 800787c:	e01c      	b.n	80078b8 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800787e:	69fb      	ldr	r3, [r7, #28]
 8007880:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007884:	2b00      	cmp	r3, #0
 8007886:	d008      	beq.n	800789a <HAL_UART_IRQHandler+0x1d6>
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 f866 	bl	8007964 <UART_Transmit_IT>
    return;
 8007898:	e00f      	b.n	80078ba <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00a      	beq.n	80078ba <HAL_UART_IRQHandler+0x1f6>
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80078ae:	6878      	ldr	r0, [r7, #4]
 80078b0:	f000 f8ae 	bl	8007a10 <UART_EndTransmit_IT>
    return;
 80078b4:	bf00      	nop
 80078b6:	e000      	b.n	80078ba <HAL_UART_IRQHandler+0x1f6>
    return;
 80078b8:	bf00      	nop
  }
}
 80078ba:	3720      	adds	r7, #32
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	0800793d 	.word	0x0800793d

080078c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80078cc:	bf00      	nop
 80078ce:	370c      	adds	r7, #12
 80078d0:	46bd      	mov	sp, r7
 80078d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d6:	4770      	bx	lr

080078d8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	68da      	ldr	r2, [r3, #12]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007916:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695a      	ldr	r2, [r3, #20]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f022 0201 	bic.w	r2, r2, #1
 8007926:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8007930:	bf00      	nop
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b084      	sub	sp, #16
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007948:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff ffc8 	bl	80078ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800795c:	bf00      	nop
 800795e:	3710      	adds	r7, #16
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007964:	b480      	push	{r7}
 8007966:	b085      	sub	sp, #20
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8007972:	b2db      	uxtb	r3, r3
 8007974:	2b21      	cmp	r3, #33	; 0x21
 8007976:	d144      	bne.n	8007a02 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	689b      	ldr	r3, [r3, #8]
 800797c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007980:	d11a      	bne.n	80079b8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	881b      	ldrh	r3, [r3, #0]
 800798c:	461a      	mov	r2, r3
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007996:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d105      	bne.n	80079ac <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6a1b      	ldr	r3, [r3, #32]
 80079a4:	1c9a      	adds	r2, r3, #2
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	621a      	str	r2, [r3, #32]
 80079aa:	e00e      	b.n	80079ca <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6a1b      	ldr	r3, [r3, #32]
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	621a      	str	r2, [r3, #32]
 80079b6:	e008      	b.n	80079ca <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6a1b      	ldr	r3, [r3, #32]
 80079bc:	1c59      	adds	r1, r3, #1
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	6211      	str	r1, [r2, #32]
 80079c2:	781a      	ldrb	r2, [r3, #0]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	3b01      	subs	r3, #1
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	687a      	ldr	r2, [r7, #4]
 80079d6:	4619      	mov	r1, r3
 80079d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10f      	bne.n	80079fe <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68da      	ldr	r2, [r3, #12]
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	e000      	b.n	8007a04 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007a02:	2302      	movs	r3, #2
  }
}
 8007a04:	4618      	mov	r0, r3
 8007a06:	3714      	adds	r7, #20
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0e:	4770      	bx	lr

08007a10 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b082      	sub	sp, #8
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a26:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2220      	movs	r2, #32
 8007a2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff ff47 	bl	80078c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b22      	cmp	r3, #34	; 0x22
 8007a52:	d171      	bne.n	8007b38 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a5c:	d123      	bne.n	8007aa6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a62:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d10e      	bne.n	8007a8a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a78:	b29a      	uxth	r2, r3
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	1c9a      	adds	r2, r3, #2
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	629a      	str	r2, [r3, #40]	; 0x28
 8007a88:	e029      	b.n	8007ade <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a9e:	1c5a      	adds	r2, r3, #1
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	629a      	str	r2, [r3, #40]	; 0x28
 8007aa4:	e01b      	b.n	8007ade <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	6858      	ldr	r0, [r3, #4]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ab8:	1c59      	adds	r1, r3, #1
 8007aba:	687a      	ldr	r2, [r7, #4]
 8007abc:	6291      	str	r1, [r2, #40]	; 0x28
 8007abe:	b2c2      	uxtb	r2, r0
 8007ac0:	701a      	strb	r2, [r3, #0]
 8007ac2:	e00c      	b.n	8007ade <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	b2da      	uxtb	r2, r3
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad0:	1c58      	adds	r0, r3, #1
 8007ad2:	6879      	ldr	r1, [r7, #4]
 8007ad4:	6288      	str	r0, [r1, #40]	; 0x28
 8007ad6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007ada:	b2d2      	uxtb	r2, r2
 8007adc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4619      	mov	r1, r3
 8007aec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d120      	bne.n	8007b34 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	68da      	ldr	r2, [r3, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 0220 	bic.w	r2, r2, #32
 8007b00:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b10:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	695a      	ldr	r2, [r3, #20]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f022 0201 	bic.w	r2, r2, #1
 8007b20:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2220      	movs	r2, #32
 8007b26:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f7ff fed4 	bl	80078d8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8007b30:	2300      	movs	r3, #0
 8007b32:	e002      	b.n	8007b3a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8007b34:	2300      	movs	r3, #0
 8007b36:	e000      	b.n	8007b3a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8007b38:	2302      	movs	r3, #2
  }
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
	...

08007b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b48:	b085      	sub	sp, #20
 8007b4a:	af00      	add	r7, sp, #0
 8007b4c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	430a      	orrs	r2, r1
 8007b62:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	431a      	orrs	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	431a      	orrs	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68db      	ldr	r3, [r3, #12]
 8007b82:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007b86:	f023 030c 	bic.w	r3, r3, #12
 8007b8a:	687a      	ldr	r2, [r7, #4]
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	68f9      	ldr	r1, [r7, #12]
 8007b90:	430b      	orrs	r3, r1
 8007b92:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	699a      	ldr	r2, [r3, #24]
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	430a      	orrs	r2, r1
 8007ba8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	69db      	ldr	r3, [r3, #28]
 8007bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bb2:	f040 818b 	bne.w	8007ecc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4ac1      	ldr	r2, [pc, #772]	; (8007ec0 <UART_SetConfig+0x37c>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d005      	beq.n	8007bcc <UART_SetConfig+0x88>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4abf      	ldr	r2, [pc, #764]	; (8007ec4 <UART_SetConfig+0x380>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	f040 80bd 	bne.w	8007d46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bcc:	f7fd fabc 	bl	8005148 <HAL_RCC_GetPCLK2Freq>
 8007bd0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	461d      	mov	r5, r3
 8007bd6:	f04f 0600 	mov.w	r6, #0
 8007bda:	46a8      	mov	r8, r5
 8007bdc:	46b1      	mov	r9, r6
 8007bde:	eb18 0308 	adds.w	r3, r8, r8
 8007be2:	eb49 0409 	adc.w	r4, r9, r9
 8007be6:	4698      	mov	r8, r3
 8007be8:	46a1      	mov	r9, r4
 8007bea:	eb18 0805 	adds.w	r8, r8, r5
 8007bee:	eb49 0906 	adc.w	r9, r9, r6
 8007bf2:	f04f 0100 	mov.w	r1, #0
 8007bf6:	f04f 0200 	mov.w	r2, #0
 8007bfa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007bfe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c02:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c06:	4688      	mov	r8, r1
 8007c08:	4691      	mov	r9, r2
 8007c0a:	eb18 0005 	adds.w	r0, r8, r5
 8007c0e:	eb49 0106 	adc.w	r1, r9, r6
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	461d      	mov	r5, r3
 8007c18:	f04f 0600 	mov.w	r6, #0
 8007c1c:	196b      	adds	r3, r5, r5
 8007c1e:	eb46 0406 	adc.w	r4, r6, r6
 8007c22:	461a      	mov	r2, r3
 8007c24:	4623      	mov	r3, r4
 8007c26:	f7f9 f80f 	bl	8000c48 <__aeabi_uldivmod>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	460c      	mov	r4, r1
 8007c2e:	461a      	mov	r2, r3
 8007c30:	4ba5      	ldr	r3, [pc, #660]	; (8007ec8 <UART_SetConfig+0x384>)
 8007c32:	fba3 2302 	umull	r2, r3, r3, r2
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	461d      	mov	r5, r3
 8007c40:	f04f 0600 	mov.w	r6, #0
 8007c44:	46a9      	mov	r9, r5
 8007c46:	46b2      	mov	sl, r6
 8007c48:	eb19 0309 	adds.w	r3, r9, r9
 8007c4c:	eb4a 040a 	adc.w	r4, sl, sl
 8007c50:	4699      	mov	r9, r3
 8007c52:	46a2      	mov	sl, r4
 8007c54:	eb19 0905 	adds.w	r9, r9, r5
 8007c58:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c5c:	f04f 0100 	mov.w	r1, #0
 8007c60:	f04f 0200 	mov.w	r2, #0
 8007c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c70:	4689      	mov	r9, r1
 8007c72:	4692      	mov	sl, r2
 8007c74:	eb19 0005 	adds.w	r0, r9, r5
 8007c78:	eb4a 0106 	adc.w	r1, sl, r6
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	461d      	mov	r5, r3
 8007c82:	f04f 0600 	mov.w	r6, #0
 8007c86:	196b      	adds	r3, r5, r5
 8007c88:	eb46 0406 	adc.w	r4, r6, r6
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	4623      	mov	r3, r4
 8007c90:	f7f8 ffda 	bl	8000c48 <__aeabi_uldivmod>
 8007c94:	4603      	mov	r3, r0
 8007c96:	460c      	mov	r4, r1
 8007c98:	461a      	mov	r2, r3
 8007c9a:	4b8b      	ldr	r3, [pc, #556]	; (8007ec8 <UART_SetConfig+0x384>)
 8007c9c:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca0:	095b      	lsrs	r3, r3, #5
 8007ca2:	2164      	movs	r1, #100	; 0x64
 8007ca4:	fb01 f303 	mul.w	r3, r1, r3
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	3332      	adds	r3, #50	; 0x32
 8007cae:	4a86      	ldr	r2, [pc, #536]	; (8007ec8 <UART_SetConfig+0x384>)
 8007cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cbc:	4498      	add	r8, r3
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	461d      	mov	r5, r3
 8007cc2:	f04f 0600 	mov.w	r6, #0
 8007cc6:	46a9      	mov	r9, r5
 8007cc8:	46b2      	mov	sl, r6
 8007cca:	eb19 0309 	adds.w	r3, r9, r9
 8007cce:	eb4a 040a 	adc.w	r4, sl, sl
 8007cd2:	4699      	mov	r9, r3
 8007cd4:	46a2      	mov	sl, r4
 8007cd6:	eb19 0905 	adds.w	r9, r9, r5
 8007cda:	eb4a 0a06 	adc.w	sl, sl, r6
 8007cde:	f04f 0100 	mov.w	r1, #0
 8007ce2:	f04f 0200 	mov.w	r2, #0
 8007ce6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cf2:	4689      	mov	r9, r1
 8007cf4:	4692      	mov	sl, r2
 8007cf6:	eb19 0005 	adds.w	r0, r9, r5
 8007cfa:	eb4a 0106 	adc.w	r1, sl, r6
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	461d      	mov	r5, r3
 8007d04:	f04f 0600 	mov.w	r6, #0
 8007d08:	196b      	adds	r3, r5, r5
 8007d0a:	eb46 0406 	adc.w	r4, r6, r6
 8007d0e:	461a      	mov	r2, r3
 8007d10:	4623      	mov	r3, r4
 8007d12:	f7f8 ff99 	bl	8000c48 <__aeabi_uldivmod>
 8007d16:	4603      	mov	r3, r0
 8007d18:	460c      	mov	r4, r1
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4b6a      	ldr	r3, [pc, #424]	; (8007ec8 <UART_SetConfig+0x384>)
 8007d1e:	fba3 1302 	umull	r1, r3, r3, r2
 8007d22:	095b      	lsrs	r3, r3, #5
 8007d24:	2164      	movs	r1, #100	; 0x64
 8007d26:	fb01 f303 	mul.w	r3, r1, r3
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	3332      	adds	r3, #50	; 0x32
 8007d30:	4a65      	ldr	r2, [pc, #404]	; (8007ec8 <UART_SetConfig+0x384>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	095b      	lsrs	r3, r3, #5
 8007d38:	f003 0207 	and.w	r2, r3, #7
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4442      	add	r2, r8
 8007d42:	609a      	str	r2, [r3, #8]
 8007d44:	e26f      	b.n	8008226 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d46:	f7fd f9eb 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8007d4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	461d      	mov	r5, r3
 8007d50:	f04f 0600 	mov.w	r6, #0
 8007d54:	46a8      	mov	r8, r5
 8007d56:	46b1      	mov	r9, r6
 8007d58:	eb18 0308 	adds.w	r3, r8, r8
 8007d5c:	eb49 0409 	adc.w	r4, r9, r9
 8007d60:	4698      	mov	r8, r3
 8007d62:	46a1      	mov	r9, r4
 8007d64:	eb18 0805 	adds.w	r8, r8, r5
 8007d68:	eb49 0906 	adc.w	r9, r9, r6
 8007d6c:	f04f 0100 	mov.w	r1, #0
 8007d70:	f04f 0200 	mov.w	r2, #0
 8007d74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007d78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007d7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007d80:	4688      	mov	r8, r1
 8007d82:	4691      	mov	r9, r2
 8007d84:	eb18 0005 	adds.w	r0, r8, r5
 8007d88:	eb49 0106 	adc.w	r1, r9, r6
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	685b      	ldr	r3, [r3, #4]
 8007d90:	461d      	mov	r5, r3
 8007d92:	f04f 0600 	mov.w	r6, #0
 8007d96:	196b      	adds	r3, r5, r5
 8007d98:	eb46 0406 	adc.w	r4, r6, r6
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	4623      	mov	r3, r4
 8007da0:	f7f8 ff52 	bl	8000c48 <__aeabi_uldivmod>
 8007da4:	4603      	mov	r3, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	461a      	mov	r2, r3
 8007daa:	4b47      	ldr	r3, [pc, #284]	; (8007ec8 <UART_SetConfig+0x384>)
 8007dac:	fba3 2302 	umull	r2, r3, r3, r2
 8007db0:	095b      	lsrs	r3, r3, #5
 8007db2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	461d      	mov	r5, r3
 8007dba:	f04f 0600 	mov.w	r6, #0
 8007dbe:	46a9      	mov	r9, r5
 8007dc0:	46b2      	mov	sl, r6
 8007dc2:	eb19 0309 	adds.w	r3, r9, r9
 8007dc6:	eb4a 040a 	adc.w	r4, sl, sl
 8007dca:	4699      	mov	r9, r3
 8007dcc:	46a2      	mov	sl, r4
 8007dce:	eb19 0905 	adds.w	r9, r9, r5
 8007dd2:	eb4a 0a06 	adc.w	sl, sl, r6
 8007dd6:	f04f 0100 	mov.w	r1, #0
 8007dda:	f04f 0200 	mov.w	r2, #0
 8007dde:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007de2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007de6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007dea:	4689      	mov	r9, r1
 8007dec:	4692      	mov	sl, r2
 8007dee:	eb19 0005 	adds.w	r0, r9, r5
 8007df2:	eb4a 0106 	adc.w	r1, sl, r6
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	461d      	mov	r5, r3
 8007dfc:	f04f 0600 	mov.w	r6, #0
 8007e00:	196b      	adds	r3, r5, r5
 8007e02:	eb46 0406 	adc.w	r4, r6, r6
 8007e06:	461a      	mov	r2, r3
 8007e08:	4623      	mov	r3, r4
 8007e0a:	f7f8 ff1d 	bl	8000c48 <__aeabi_uldivmod>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	460c      	mov	r4, r1
 8007e12:	461a      	mov	r2, r3
 8007e14:	4b2c      	ldr	r3, [pc, #176]	; (8007ec8 <UART_SetConfig+0x384>)
 8007e16:	fba3 1302 	umull	r1, r3, r3, r2
 8007e1a:	095b      	lsrs	r3, r3, #5
 8007e1c:	2164      	movs	r1, #100	; 0x64
 8007e1e:	fb01 f303 	mul.w	r3, r1, r3
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	00db      	lsls	r3, r3, #3
 8007e26:	3332      	adds	r3, #50	; 0x32
 8007e28:	4a27      	ldr	r2, [pc, #156]	; (8007ec8 <UART_SetConfig+0x384>)
 8007e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e2e:	095b      	lsrs	r3, r3, #5
 8007e30:	005b      	lsls	r3, r3, #1
 8007e32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e36:	4498      	add	r8, r3
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	461d      	mov	r5, r3
 8007e3c:	f04f 0600 	mov.w	r6, #0
 8007e40:	46a9      	mov	r9, r5
 8007e42:	46b2      	mov	sl, r6
 8007e44:	eb19 0309 	adds.w	r3, r9, r9
 8007e48:	eb4a 040a 	adc.w	r4, sl, sl
 8007e4c:	4699      	mov	r9, r3
 8007e4e:	46a2      	mov	sl, r4
 8007e50:	eb19 0905 	adds.w	r9, r9, r5
 8007e54:	eb4a 0a06 	adc.w	sl, sl, r6
 8007e58:	f04f 0100 	mov.w	r1, #0
 8007e5c:	f04f 0200 	mov.w	r2, #0
 8007e60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e6c:	4689      	mov	r9, r1
 8007e6e:	4692      	mov	sl, r2
 8007e70:	eb19 0005 	adds.w	r0, r9, r5
 8007e74:	eb4a 0106 	adc.w	r1, sl, r6
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	461d      	mov	r5, r3
 8007e7e:	f04f 0600 	mov.w	r6, #0
 8007e82:	196b      	adds	r3, r5, r5
 8007e84:	eb46 0406 	adc.w	r4, r6, r6
 8007e88:	461a      	mov	r2, r3
 8007e8a:	4623      	mov	r3, r4
 8007e8c:	f7f8 fedc 	bl	8000c48 <__aeabi_uldivmod>
 8007e90:	4603      	mov	r3, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	461a      	mov	r2, r3
 8007e96:	4b0c      	ldr	r3, [pc, #48]	; (8007ec8 <UART_SetConfig+0x384>)
 8007e98:	fba3 1302 	umull	r1, r3, r3, r2
 8007e9c:	095b      	lsrs	r3, r3, #5
 8007e9e:	2164      	movs	r1, #100	; 0x64
 8007ea0:	fb01 f303 	mul.w	r3, r1, r3
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	00db      	lsls	r3, r3, #3
 8007ea8:	3332      	adds	r3, #50	; 0x32
 8007eaa:	4a07      	ldr	r2, [pc, #28]	; (8007ec8 <UART_SetConfig+0x384>)
 8007eac:	fba2 2303 	umull	r2, r3, r2, r3
 8007eb0:	095b      	lsrs	r3, r3, #5
 8007eb2:	f003 0207 	and.w	r2, r3, #7
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	4442      	add	r2, r8
 8007ebc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007ebe:	e1b2      	b.n	8008226 <UART_SetConfig+0x6e2>
 8007ec0:	40011000 	.word	0x40011000
 8007ec4:	40011400 	.word	0x40011400
 8007ec8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4ad7      	ldr	r2, [pc, #860]	; (8008230 <UART_SetConfig+0x6ec>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d005      	beq.n	8007ee2 <UART_SetConfig+0x39e>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4ad6      	ldr	r2, [pc, #856]	; (8008234 <UART_SetConfig+0x6f0>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	f040 80d1 	bne.w	8008084 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007ee2:	f7fd f931 	bl	8005148 <HAL_RCC_GetPCLK2Freq>
 8007ee6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	469a      	mov	sl, r3
 8007eec:	f04f 0b00 	mov.w	fp, #0
 8007ef0:	46d0      	mov	r8, sl
 8007ef2:	46d9      	mov	r9, fp
 8007ef4:	eb18 0308 	adds.w	r3, r8, r8
 8007ef8:	eb49 0409 	adc.w	r4, r9, r9
 8007efc:	4698      	mov	r8, r3
 8007efe:	46a1      	mov	r9, r4
 8007f00:	eb18 080a 	adds.w	r8, r8, sl
 8007f04:	eb49 090b 	adc.w	r9, r9, fp
 8007f08:	f04f 0100 	mov.w	r1, #0
 8007f0c:	f04f 0200 	mov.w	r2, #0
 8007f10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f1c:	4688      	mov	r8, r1
 8007f1e:	4691      	mov	r9, r2
 8007f20:	eb1a 0508 	adds.w	r5, sl, r8
 8007f24:	eb4b 0609 	adc.w	r6, fp, r9
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	f04f 0200 	mov.w	r2, #0
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	f04f 0400 	mov.w	r4, #0
 8007f3a:	0094      	lsls	r4, r2, #2
 8007f3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f40:	008b      	lsls	r3, r1, #2
 8007f42:	461a      	mov	r2, r3
 8007f44:	4623      	mov	r3, r4
 8007f46:	4628      	mov	r0, r5
 8007f48:	4631      	mov	r1, r6
 8007f4a:	f7f8 fe7d 	bl	8000c48 <__aeabi_uldivmod>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	460c      	mov	r4, r1
 8007f52:	461a      	mov	r2, r3
 8007f54:	4bb8      	ldr	r3, [pc, #736]	; (8008238 <UART_SetConfig+0x6f4>)
 8007f56:	fba3 2302 	umull	r2, r3, r3, r2
 8007f5a:	095b      	lsrs	r3, r3, #5
 8007f5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	469b      	mov	fp, r3
 8007f64:	f04f 0c00 	mov.w	ip, #0
 8007f68:	46d9      	mov	r9, fp
 8007f6a:	46e2      	mov	sl, ip
 8007f6c:	eb19 0309 	adds.w	r3, r9, r9
 8007f70:	eb4a 040a 	adc.w	r4, sl, sl
 8007f74:	4699      	mov	r9, r3
 8007f76:	46a2      	mov	sl, r4
 8007f78:	eb19 090b 	adds.w	r9, r9, fp
 8007f7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007f80:	f04f 0100 	mov.w	r1, #0
 8007f84:	f04f 0200 	mov.w	r2, #0
 8007f88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007f90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007f94:	4689      	mov	r9, r1
 8007f96:	4692      	mov	sl, r2
 8007f98:	eb1b 0509 	adds.w	r5, fp, r9
 8007f9c:	eb4c 060a 	adc.w	r6, ip, sl
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	f04f 0300 	mov.w	r3, #0
 8007fae:	f04f 0400 	mov.w	r4, #0
 8007fb2:	0094      	lsls	r4, r2, #2
 8007fb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fb8:	008b      	lsls	r3, r1, #2
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4623      	mov	r3, r4
 8007fbe:	4628      	mov	r0, r5
 8007fc0:	4631      	mov	r1, r6
 8007fc2:	f7f8 fe41 	bl	8000c48 <__aeabi_uldivmod>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	460c      	mov	r4, r1
 8007fca:	461a      	mov	r2, r3
 8007fcc:	4b9a      	ldr	r3, [pc, #616]	; (8008238 <UART_SetConfig+0x6f4>)
 8007fce:	fba3 1302 	umull	r1, r3, r3, r2
 8007fd2:	095b      	lsrs	r3, r3, #5
 8007fd4:	2164      	movs	r1, #100	; 0x64
 8007fd6:	fb01 f303 	mul.w	r3, r1, r3
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	3332      	adds	r3, #50	; 0x32
 8007fe0:	4a95      	ldr	r2, [pc, #596]	; (8008238 <UART_SetConfig+0x6f4>)
 8007fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe6:	095b      	lsrs	r3, r3, #5
 8007fe8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007fec:	4498      	add	r8, r3
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	469b      	mov	fp, r3
 8007ff2:	f04f 0c00 	mov.w	ip, #0
 8007ff6:	46d9      	mov	r9, fp
 8007ff8:	46e2      	mov	sl, ip
 8007ffa:	eb19 0309 	adds.w	r3, r9, r9
 8007ffe:	eb4a 040a 	adc.w	r4, sl, sl
 8008002:	4699      	mov	r9, r3
 8008004:	46a2      	mov	sl, r4
 8008006:	eb19 090b 	adds.w	r9, r9, fp
 800800a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800800e:	f04f 0100 	mov.w	r1, #0
 8008012:	f04f 0200 	mov.w	r2, #0
 8008016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800801a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800801e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008022:	4689      	mov	r9, r1
 8008024:	4692      	mov	sl, r2
 8008026:	eb1b 0509 	adds.w	r5, fp, r9
 800802a:	eb4c 060a 	adc.w	r6, ip, sl
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	685b      	ldr	r3, [r3, #4]
 8008032:	4619      	mov	r1, r3
 8008034:	f04f 0200 	mov.w	r2, #0
 8008038:	f04f 0300 	mov.w	r3, #0
 800803c:	f04f 0400 	mov.w	r4, #0
 8008040:	0094      	lsls	r4, r2, #2
 8008042:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008046:	008b      	lsls	r3, r1, #2
 8008048:	461a      	mov	r2, r3
 800804a:	4623      	mov	r3, r4
 800804c:	4628      	mov	r0, r5
 800804e:	4631      	mov	r1, r6
 8008050:	f7f8 fdfa 	bl	8000c48 <__aeabi_uldivmod>
 8008054:	4603      	mov	r3, r0
 8008056:	460c      	mov	r4, r1
 8008058:	461a      	mov	r2, r3
 800805a:	4b77      	ldr	r3, [pc, #476]	; (8008238 <UART_SetConfig+0x6f4>)
 800805c:	fba3 1302 	umull	r1, r3, r3, r2
 8008060:	095b      	lsrs	r3, r3, #5
 8008062:	2164      	movs	r1, #100	; 0x64
 8008064:	fb01 f303 	mul.w	r3, r1, r3
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	011b      	lsls	r3, r3, #4
 800806c:	3332      	adds	r3, #50	; 0x32
 800806e:	4a72      	ldr	r2, [pc, #456]	; (8008238 <UART_SetConfig+0x6f4>)
 8008070:	fba2 2303 	umull	r2, r3, r2, r3
 8008074:	095b      	lsrs	r3, r3, #5
 8008076:	f003 020f 	and.w	r2, r3, #15
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4442      	add	r2, r8
 8008080:	609a      	str	r2, [r3, #8]
 8008082:	e0d0      	b.n	8008226 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8008084:	f7fd f84c 	bl	8005120 <HAL_RCC_GetPCLK1Freq>
 8008088:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	469a      	mov	sl, r3
 800808e:	f04f 0b00 	mov.w	fp, #0
 8008092:	46d0      	mov	r8, sl
 8008094:	46d9      	mov	r9, fp
 8008096:	eb18 0308 	adds.w	r3, r8, r8
 800809a:	eb49 0409 	adc.w	r4, r9, r9
 800809e:	4698      	mov	r8, r3
 80080a0:	46a1      	mov	r9, r4
 80080a2:	eb18 080a 	adds.w	r8, r8, sl
 80080a6:	eb49 090b 	adc.w	r9, r9, fp
 80080aa:	f04f 0100 	mov.w	r1, #0
 80080ae:	f04f 0200 	mov.w	r2, #0
 80080b2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80080b6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80080ba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80080be:	4688      	mov	r8, r1
 80080c0:	4691      	mov	r9, r2
 80080c2:	eb1a 0508 	adds.w	r5, sl, r8
 80080c6:	eb4b 0609 	adc.w	r6, fp, r9
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	4619      	mov	r1, r3
 80080d0:	f04f 0200 	mov.w	r2, #0
 80080d4:	f04f 0300 	mov.w	r3, #0
 80080d8:	f04f 0400 	mov.w	r4, #0
 80080dc:	0094      	lsls	r4, r2, #2
 80080de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80080e2:	008b      	lsls	r3, r1, #2
 80080e4:	461a      	mov	r2, r3
 80080e6:	4623      	mov	r3, r4
 80080e8:	4628      	mov	r0, r5
 80080ea:	4631      	mov	r1, r6
 80080ec:	f7f8 fdac 	bl	8000c48 <__aeabi_uldivmod>
 80080f0:	4603      	mov	r3, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	461a      	mov	r2, r3
 80080f6:	4b50      	ldr	r3, [pc, #320]	; (8008238 <UART_SetConfig+0x6f4>)
 80080f8:	fba3 2302 	umull	r2, r3, r3, r2
 80080fc:	095b      	lsrs	r3, r3, #5
 80080fe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	469b      	mov	fp, r3
 8008106:	f04f 0c00 	mov.w	ip, #0
 800810a:	46d9      	mov	r9, fp
 800810c:	46e2      	mov	sl, ip
 800810e:	eb19 0309 	adds.w	r3, r9, r9
 8008112:	eb4a 040a 	adc.w	r4, sl, sl
 8008116:	4699      	mov	r9, r3
 8008118:	46a2      	mov	sl, r4
 800811a:	eb19 090b 	adds.w	r9, r9, fp
 800811e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8008122:	f04f 0100 	mov.w	r1, #0
 8008126:	f04f 0200 	mov.w	r2, #0
 800812a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800812e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8008132:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008136:	4689      	mov	r9, r1
 8008138:	4692      	mov	sl, r2
 800813a:	eb1b 0509 	adds.w	r5, fp, r9
 800813e:	eb4c 060a 	adc.w	r6, ip, sl
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	4619      	mov	r1, r3
 8008148:	f04f 0200 	mov.w	r2, #0
 800814c:	f04f 0300 	mov.w	r3, #0
 8008150:	f04f 0400 	mov.w	r4, #0
 8008154:	0094      	lsls	r4, r2, #2
 8008156:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800815a:	008b      	lsls	r3, r1, #2
 800815c:	461a      	mov	r2, r3
 800815e:	4623      	mov	r3, r4
 8008160:	4628      	mov	r0, r5
 8008162:	4631      	mov	r1, r6
 8008164:	f7f8 fd70 	bl	8000c48 <__aeabi_uldivmod>
 8008168:	4603      	mov	r3, r0
 800816a:	460c      	mov	r4, r1
 800816c:	461a      	mov	r2, r3
 800816e:	4b32      	ldr	r3, [pc, #200]	; (8008238 <UART_SetConfig+0x6f4>)
 8008170:	fba3 1302 	umull	r1, r3, r3, r2
 8008174:	095b      	lsrs	r3, r3, #5
 8008176:	2164      	movs	r1, #100	; 0x64
 8008178:	fb01 f303 	mul.w	r3, r1, r3
 800817c:	1ad3      	subs	r3, r2, r3
 800817e:	011b      	lsls	r3, r3, #4
 8008180:	3332      	adds	r3, #50	; 0x32
 8008182:	4a2d      	ldr	r2, [pc, #180]	; (8008238 <UART_SetConfig+0x6f4>)
 8008184:	fba2 2303 	umull	r2, r3, r2, r3
 8008188:	095b      	lsrs	r3, r3, #5
 800818a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800818e:	4498      	add	r8, r3
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	469b      	mov	fp, r3
 8008194:	f04f 0c00 	mov.w	ip, #0
 8008198:	46d9      	mov	r9, fp
 800819a:	46e2      	mov	sl, ip
 800819c:	eb19 0309 	adds.w	r3, r9, r9
 80081a0:	eb4a 040a 	adc.w	r4, sl, sl
 80081a4:	4699      	mov	r9, r3
 80081a6:	46a2      	mov	sl, r4
 80081a8:	eb19 090b 	adds.w	r9, r9, fp
 80081ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	f04f 0200 	mov.w	r2, #0
 80081b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80081bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80081c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80081c4:	4689      	mov	r9, r1
 80081c6:	4692      	mov	sl, r2
 80081c8:	eb1b 0509 	adds.w	r5, fp, r9
 80081cc:	eb4c 060a 	adc.w	r6, ip, sl
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	4619      	mov	r1, r3
 80081d6:	f04f 0200 	mov.w	r2, #0
 80081da:	f04f 0300 	mov.w	r3, #0
 80081de:	f04f 0400 	mov.w	r4, #0
 80081e2:	0094      	lsls	r4, r2, #2
 80081e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80081e8:	008b      	lsls	r3, r1, #2
 80081ea:	461a      	mov	r2, r3
 80081ec:	4623      	mov	r3, r4
 80081ee:	4628      	mov	r0, r5
 80081f0:	4631      	mov	r1, r6
 80081f2:	f7f8 fd29 	bl	8000c48 <__aeabi_uldivmod>
 80081f6:	4603      	mov	r3, r0
 80081f8:	460c      	mov	r4, r1
 80081fa:	461a      	mov	r2, r3
 80081fc:	4b0e      	ldr	r3, [pc, #56]	; (8008238 <UART_SetConfig+0x6f4>)
 80081fe:	fba3 1302 	umull	r1, r3, r3, r2
 8008202:	095b      	lsrs	r3, r3, #5
 8008204:	2164      	movs	r1, #100	; 0x64
 8008206:	fb01 f303 	mul.w	r3, r1, r3
 800820a:	1ad3      	subs	r3, r2, r3
 800820c:	011b      	lsls	r3, r3, #4
 800820e:	3332      	adds	r3, #50	; 0x32
 8008210:	4a09      	ldr	r2, [pc, #36]	; (8008238 <UART_SetConfig+0x6f4>)
 8008212:	fba2 2303 	umull	r2, r3, r2, r3
 8008216:	095b      	lsrs	r3, r3, #5
 8008218:	f003 020f 	and.w	r2, r3, #15
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4442      	add	r2, r8
 8008222:	609a      	str	r2, [r3, #8]
}
 8008224:	e7ff      	b.n	8008226 <UART_SetConfig+0x6e2>
 8008226:	bf00      	nop
 8008228:	3714      	adds	r7, #20
 800822a:	46bd      	mov	sp, r7
 800822c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008230:	40011000 	.word	0x40011000
 8008234:	40011400 	.word	0x40011400
 8008238:	51eb851f 	.word	0x51eb851f

0800823c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800823c:	b084      	sub	sp, #16
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
 8008246:	f107 001c 	add.w	r0, r7, #28
 800824a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800824e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008250:	2b01      	cmp	r3, #1
 8008252:	d122      	bne.n	800829a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008258:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008268:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800826c:	687a      	ldr	r2, [r7, #4]
 800826e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	68db      	ldr	r3, [r3, #12]
 8008274:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800827c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827e:	2b01      	cmp	r3, #1
 8008280:	d105      	bne.n	800828e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 fa5c 	bl	800874c <USB_CoreReset>
 8008294:	4603      	mov	r3, r0
 8008296:	73fb      	strb	r3, [r7, #15]
 8008298:	e01a      	b.n	80082d0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa50 	bl	800874c <USB_CoreReset>
 80082ac:	4603      	mov	r3, r0
 80082ae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d106      	bne.n	80082c4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	639a      	str	r2, [r3, #56]	; 0x38
 80082c2:	e005      	b.n	80082d0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80082d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d2:	2b01      	cmp	r3, #1
 80082d4:	d10b      	bne.n	80082ee <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f043 0206 	orr.w	r2, r3, #6
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f043 0220 	orr.w	r2, r3, #32
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80082ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082fa:	b004      	add	sp, #16
 80082fc:	4770      	bx	lr

080082fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082fe:	b480      	push	{r7}
 8008300:	b083      	sub	sp, #12
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	689b      	ldr	r3, [r3, #8]
 800830a:	f023 0201 	bic.w	r2, r3, #1
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008312:	2300      	movs	r3, #0
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	460b      	mov	r3, r1
 800832a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008338:	78fb      	ldrb	r3, [r7, #3]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d106      	bne.n	800834c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60da      	str	r2, [r3, #12]
 800834a:	e00b      	b.n	8008364 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800834c:	78fb      	ldrb	r3, [r7, #3]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60da      	str	r2, [r3, #12]
 800835e:	e001      	b.n	8008364 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	e003      	b.n	800836c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008364:	2032      	movs	r0, #50	; 0x32
 8008366:	f7f8 fe61 	bl	800102c <HAL_Delay>

  return HAL_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3708      	adds	r7, #8
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008374:	b084      	sub	sp, #16
 8008376:	b580      	push	{r7, lr}
 8008378:	b086      	sub	sp, #24
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
 800837e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008382:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008386:	2300      	movs	r3, #0
 8008388:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800838e:	2300      	movs	r3, #0
 8008390:	613b      	str	r3, [r7, #16]
 8008392:	e009      	b.n	80083a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	3340      	adds	r3, #64	; 0x40
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4413      	add	r3, r2
 800839e:	2200      	movs	r2, #0
 80083a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	3301      	adds	r3, #1
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	2b0e      	cmp	r3, #14
 80083ac:	d9f2      	bls.n	8008394 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d112      	bne.n	80083da <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	639a      	str	r2, [r3, #56]	; 0x38
 80083d8:	e00b      	b.n	80083f2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80083f8:	461a      	mov	r2, r3
 80083fa:	2300      	movs	r3, #0
 80083fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008404:	4619      	mov	r1, r3
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840c:	461a      	mov	r2, r3
 800840e:	680b      	ldr	r3, [r1, #0]
 8008410:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008414:	2b01      	cmp	r3, #1
 8008416:	d10c      	bne.n	8008432 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	2b00      	cmp	r3, #0
 800841c:	d104      	bne.n	8008428 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800841e:	2100      	movs	r1, #0
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f000 f961 	bl	80086e8 <USB_SetDevSpeed>
 8008426:	e008      	b.n	800843a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008428:	2101      	movs	r1, #1
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 f95c 	bl	80086e8 <USB_SetDevSpeed>
 8008430:	e003      	b.n	800843a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008432:	2103      	movs	r1, #3
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	f000 f957 	bl	80086e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800843a:	2110      	movs	r1, #16
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f90b 	bl	8008658 <USB_FlushTxFifo>
 8008442:	4603      	mov	r3, r0
 8008444:	2b00      	cmp	r3, #0
 8008446:	d001      	beq.n	800844c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 f929 	bl	80086a4 <USB_FlushRxFifo>
 8008452:	4603      	mov	r3, r0
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008462:	461a      	mov	r2, r3
 8008464:	2300      	movs	r3, #0
 8008466:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846e:	461a      	mov	r2, r3
 8008470:	2300      	movs	r3, #0
 8008472:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800847a:	461a      	mov	r2, r3
 800847c:	2300      	movs	r3, #0
 800847e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008480:	2300      	movs	r3, #0
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	e043      	b.n	800850e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	015a      	lsls	r2, r3, #5
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	4413      	add	r3, r2
 800848e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008498:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800849c:	d118      	bne.n	80084d0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	015a      	lsls	r2, r3, #5
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	4413      	add	r3, r2
 80084ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b0:	461a      	mov	r2, r3
 80084b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	e013      	b.n	80084e2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	015a      	lsls	r2, r3, #5
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	4413      	add	r3, r2
 80084c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084c6:	461a      	mov	r2, r3
 80084c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084cc:	6013      	str	r3, [r2, #0]
 80084ce:	e008      	b.n	80084e2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	015a      	lsls	r2, r3, #5
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084dc:	461a      	mov	r2, r3
 80084de:	2300      	movs	r3, #0
 80084e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	015a      	lsls	r2, r3, #5
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	4413      	add	r3, r2
 80084ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ee:	461a      	mov	r2, r3
 80084f0:	2300      	movs	r3, #0
 80084f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	461a      	mov	r2, r3
 8008502:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008506:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	3301      	adds	r3, #1
 800850c:	613b      	str	r3, [r7, #16]
 800850e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	429a      	cmp	r2, r3
 8008514:	d3b7      	bcc.n	8008486 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008516:	2300      	movs	r3, #0
 8008518:	613b      	str	r3, [r7, #16]
 800851a:	e043      	b.n	80085a4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	4413      	add	r3, r2
 8008524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800852e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008532:	d118      	bne.n	8008566 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d10a      	bne.n	8008550 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800853a:	693b      	ldr	r3, [r7, #16]
 800853c:	015a      	lsls	r2, r3, #5
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	4413      	add	r3, r2
 8008542:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008546:	461a      	mov	r2, r3
 8008548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800854c:	6013      	str	r3, [r2, #0]
 800854e:	e013      	b.n	8008578 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	015a      	lsls	r2, r3, #5
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	4413      	add	r3, r2
 8008558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800855c:	461a      	mov	r2, r3
 800855e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008562:	6013      	str	r3, [r2, #0]
 8008564:	e008      	b.n	8008578 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	015a      	lsls	r2, r3, #5
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	4413      	add	r3, r2
 800856e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008572:	461a      	mov	r2, r3
 8008574:	2300      	movs	r3, #0
 8008576:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	015a      	lsls	r2, r3, #5
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4413      	add	r3, r2
 8008580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008584:	461a      	mov	r2, r3
 8008586:	2300      	movs	r3, #0
 8008588:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	015a      	lsls	r2, r3, #5
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4413      	add	r3, r2
 8008592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008596:	461a      	mov	r2, r3
 8008598:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800859c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	3301      	adds	r3, #1
 80085a2:	613b      	str	r3, [r7, #16]
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	693a      	ldr	r2, [r7, #16]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d3b7      	bcc.n	800851c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085be:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80085c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c2:	2b01      	cmp	r3, #1
 80085c4:	d111      	bne.n	80085ea <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085cc:	461a      	mov	r2, r3
 80085ce:	4b20      	ldr	r3, [pc, #128]	; (8008650 <USB_DevInit+0x2dc>)
 80085d0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085da:	68fa      	ldr	r2, [r7, #12]
 80085dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085e4:	f043 0303 	orr.w	r3, r3, #3
 80085e8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2200      	movs	r2, #0
 80085ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085f6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d105      	bne.n	800860a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	699b      	ldr	r3, [r3, #24]
 8008602:	f043 0210 	orr.w	r2, r3, #16
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	4b11      	ldr	r3, [pc, #68]	; (8008654 <USB_DevInit+0x2e0>)
 8008610:	4313      	orrs	r3, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008618:	2b00      	cmp	r3, #0
 800861a:	d005      	beq.n	8008628 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	699b      	ldr	r3, [r3, #24]
 8008620:	f043 0208 	orr.w	r2, r3, #8
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862a:	2b01      	cmp	r3, #1
 800862c:	d107      	bne.n	800863e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008636:	f043 0304 	orr.w	r3, r3, #4
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800863e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008640:	4618      	mov	r0, r3
 8008642:	3718      	adds	r7, #24
 8008644:	46bd      	mov	sp, r7
 8008646:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800864a:	b004      	add	sp, #16
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	00800100 	.word	0x00800100
 8008654:	803c3800 	.word	0x803c3800

08008658 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	019b      	lsls	r3, r3, #6
 800866a:	f043 0220 	orr.w	r2, r3, #32
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	3301      	adds	r3, #1
 8008676:	60fb      	str	r3, [r7, #12]
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	4a09      	ldr	r2, [pc, #36]	; (80086a0 <USB_FlushTxFifo+0x48>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d901      	bls.n	8008684 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008680:	2303      	movs	r3, #3
 8008682:	e006      	b.n	8008692 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	f003 0320 	and.w	r3, r3, #32
 800868c:	2b20      	cmp	r3, #32
 800868e:	d0f0      	beq.n	8008672 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	3714      	adds	r7, #20
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr
 800869e:	bf00      	nop
 80086a0:	00030d40 	.word	0x00030d40

080086a4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80086ac:	2300      	movs	r3, #0
 80086ae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2210      	movs	r2, #16
 80086b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3301      	adds	r3, #1
 80086ba:	60fb      	str	r3, [r7, #12]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4a09      	ldr	r2, [pc, #36]	; (80086e4 <USB_FlushRxFifo+0x40>)
 80086c0:	4293      	cmp	r3, r2
 80086c2:	d901      	bls.n	80086c8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80086c4:	2303      	movs	r3, #3
 80086c6:	e006      	b.n	80086d6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	691b      	ldr	r3, [r3, #16]
 80086cc:	f003 0310 	and.w	r3, r3, #16
 80086d0:	2b10      	cmp	r3, #16
 80086d2:	d0f0      	beq.n	80086b6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80086d4:	2300      	movs	r3, #0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	00030d40 	.word	0x00030d40

080086e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	460b      	mov	r3, r1
 80086f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	68f9      	ldr	r1, [r7, #12]
 8008704:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008708:	4313      	orrs	r3, r2
 800870a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr

0800871a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800871a:	b580      	push	{r7, lr}
 800871c:	b084      	sub	sp, #16
 800871e:	af00      	add	r7, sp, #0
 8008720:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008734:	f043 0302 	orr.w	r3, r3, #2
 8008738:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800873a:	2003      	movs	r0, #3
 800873c:	f7f8 fc76 	bl	800102c <HAL_Delay>

  return HAL_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
	...

0800874c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800874c:	b480      	push	{r7}
 800874e:	b085      	sub	sp, #20
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	3301      	adds	r3, #1
 800875c:	60fb      	str	r3, [r7, #12]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	4a13      	ldr	r2, [pc, #76]	; (80087b0 <USB_CoreReset+0x64>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d901      	bls.n	800876a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008766:	2303      	movs	r3, #3
 8008768:	e01b      	b.n	80087a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	691b      	ldr	r3, [r3, #16]
 800876e:	2b00      	cmp	r3, #0
 8008770:	daf2      	bge.n	8008758 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	691b      	ldr	r3, [r3, #16]
 800877a:	f043 0201 	orr.w	r2, r3, #1
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	3301      	adds	r3, #1
 8008786:	60fb      	str	r3, [r7, #12]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	4a09      	ldr	r2, [pc, #36]	; (80087b0 <USB_CoreReset+0x64>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d901      	bls.n	8008794 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008790:	2303      	movs	r3, #3
 8008792:	e006      	b.n	80087a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b01      	cmp	r3, #1
 800879e:	d0f0      	beq.n	8008782 <USB_CoreReset+0x36>

  return HAL_OK;
 80087a0:	2300      	movs	r3, #0
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3714      	adds	r7, #20
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	00030d40 	.word	0x00030d40

080087b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80087b4:	b5b0      	push	{r4, r5, r7, lr}
 80087b6:	b08e      	sub	sp, #56	; 0x38
 80087b8:	af02      	add	r7, sp, #8
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80087ba:	f7f8 fbc5 	bl	8000f48 <HAL_Init>
	// todo transfer init part of code here

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80087be:	f000 fc55 	bl	800906c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80087c2:	f001 fb73 	bl	8009eac <MX_GPIO_Init>
  MX_DMA_Init();
 80087c6:	f001 fb2b 	bl	8009e20 <MX_DMA_Init>
  MX_TIM9_Init();
 80087ca:	f001 fa5f 	bl	8009c8c <MX_TIM9_Init>
  MX_SPI2_Init();
 80087ce:	f001 f83b 	bl	8009848 <MX_SPI2_Init>
  MX_ADC1_Init();
 80087d2:	f000 fccf 	bl	8009174 <MX_ADC1_Init>
  MX_ADC2_Init();
 80087d6:	f000 fdf7 	bl	80093c8 <MX_ADC2_Init>
  MX_CAN1_Init();
 80087da:	f000 ff7d 	bl	80096d8 <MX_CAN1_Init>
  MX_I2C1_Init();
 80087de:	f000 ffb1 	bl	8009744 <MX_I2C1_Init>
  MX_I2C2_Init();
 80087e2:	f000 ffdd 	bl	80097a0 <MX_I2C2_Init>
  MX_TIM1_Init();
 80087e6:	f001 f867 	bl	80098b8 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80087ea:	f001 fac1 	bl	8009d70 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 80087ee:	f001 f9f5 	bl	8009bdc <MX_TIM8_Init>
  MX_TIM2_Init();
 80087f2:	f001 f933 	bl	8009a5c <MX_TIM2_Init>
  MX_ADC3_Init();
 80087f6:	f000 feb1 	bl	800955c <MX_ADC3_Init>
  MX_USB_OTG_FS_PCD_Init();
 80087fa:	f001 fae3 	bl	8009dc4 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 80087fe:	f000 fffd 	bl	80097fc <MX_RTC_Init>
  MX_TIM5_Init();
 8008802:	f001 f99d 	bl	8009b40 <MX_TIM5_Init>
	 *    LOOKUPS
	 *                                                                           *
	 *****************************************************************************
	 */

	calc_lookup(lookup);
 8008806:	485c      	ldr	r0, [pc, #368]	; (8008978 <main+0x1c4>)
 8008808:	f001 ffa6 	bl	800a758 <calc_lookup>
	calc_sin_lookup(sin_lookup);
 800880c:	485b      	ldr	r0, [pc, #364]	; (800897c <main+0x1c8>)
 800880e:	f002 f803 	bl	800a818 <calc_sin_lookup>
	calc_cos_lookup(cos_lookup);
 8008812:	485b      	ldr	r0, [pc, #364]	; (8008980 <main+0x1cc>)
 8008814:	f002 f832 	bl	800a87c <calc_cos_lookup>
	 *                                                                           *
	 *    TIMERS
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_OC_Start(&htim2, TIM_CHANNEL_1);
 8008818:	2100      	movs	r1, #0
 800881a:	485a      	ldr	r0, [pc, #360]	; (8008984 <main+0x1d0>)
 800881c:	f7fd fd66 	bl	80062ec <HAL_TIM_OC_Start>
	HAL_TIM_Base_Start(&htim5);
 8008820:	4859      	ldr	r0, [pc, #356]	; (8008988 <main+0x1d4>)
 8008822:	f7fd fd0a 	bl	800623a <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8008826:	2100      	movs	r1, #0
 8008828:	4858      	ldr	r0, [pc, #352]	; (800898c <main+0x1d8>)
 800882a:	f7fd fdd3 	bl	80063d4 <HAL_TIM_PWM_Start>
	HAL_TIM_OC_Start(&htim9, TIM_CHANNEL_2); //seems to work just like pwm above
 800882e:	2104      	movs	r1, #4
 8008830:	4856      	ldr	r0, [pc, #344]	; (800898c <main+0x1d8>)
 8008832:	f7fd fd5b 	bl	80062ec <HAL_TIM_OC_Start>
	 *    LEDS
	 *                                                                           *
	 *****************************************************************************
	 */

	GPIOE->BSRR = GPIO_PIN_3; //switches LD1 on
 8008836:	4b56      	ldr	r3, [pc, #344]	; (8008990 <main+0x1dc>)
 8008838:	2208      	movs	r2, #8
 800883a:	619a      	str	r2, [r3, #24]
	GPIOE->BSRR = GPIO_PIN_3 << 16U; //switches LD1 off
 800883c:	4b54      	ldr	r3, [pc, #336]	; (8008990 <main+0x1dc>)
 800883e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008842:	619a      	str	r2, [r3, #24]

	GPIOE->BSRR = GPIO_PIN_4; //switches LD2 on
 8008844:	4b52      	ldr	r3, [pc, #328]	; (8008990 <main+0x1dc>)
 8008846:	2210      	movs	r2, #16
 8008848:	619a      	str	r2, [r3, #24]
	GPIOE->BSRR = GPIO_PIN_4 << 16U; //switches LD2 off
 800884a:	4b51      	ldr	r3, [pc, #324]	; (8008990 <main+0x1dc>)
 800884c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008850:	619a      	str	r2, [r3, #24]

	TIM9->CCR1 = 300; //switches LD3 to 30%
 8008852:	4b50      	ldr	r3, [pc, #320]	; (8008994 <main+0x1e0>)
 8008854:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008858:	635a      	str	r2, [r3, #52]	; 0x34
	TIM9->CCR2 = 600; //switches LD4 to 60%
 800885a:	4b4e      	ldr	r3, [pc, #312]	; (8008994 <main+0x1e0>)
 800885c:	f44f 7216 	mov.w	r2, #600	; 0x258
 8008860:	639a      	str	r2, [r3, #56]	; 0x38

	SCB->CPACR |= 0xf00000; //todo understand
 8008862:	4b4d      	ldr	r3, [pc, #308]	; (8008998 <main+0x1e4>)
 8008864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008868:	4a4b      	ldr	r2, [pc, #300]	; (8008998 <main+0x1e4>)
 800886a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800886e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	 *                                                                           *
	 *    DRV DRIVER
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8008872:	2100      	movs	r1, #0
 8008874:	4849      	ldr	r0, [pc, #292]	; (800899c <main+0x1e8>)
 8008876:	f7fd fdad 	bl	80063d4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_1);
 800887a:	2100      	movs	r1, #0
 800887c:	4847      	ldr	r0, [pc, #284]	; (800899c <main+0x1e8>)
 800887e:	f7fe fd4c 	bl	800731a <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8008882:	2104      	movs	r1, #4
 8008884:	4845      	ldr	r0, [pc, #276]	; (800899c <main+0x1e8>)
 8008886:	f7fd fda5 	bl	80063d4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_2);
 800888a:	2104      	movs	r1, #4
 800888c:	4843      	ldr	r0, [pc, #268]	; (800899c <main+0x1e8>)
 800888e:	f7fe fd44 	bl	800731a <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8008892:	2108      	movs	r1, #8
 8008894:	4841      	ldr	r0, [pc, #260]	; (800899c <main+0x1e8>)
 8008896:	f7fd fd9d 	bl	80063d4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1,TIM_CHANNEL_3);
 800889a:	2108      	movs	r1, #8
 800889c:	483f      	ldr	r0, [pc, #252]	; (800899c <main+0x1e8>)
 800889e:	f7fe fd3c 	bl	800731a <HAL_TIMEx_PWMN_Start>

	HAL_TIM_OC_Start(&htim1, TIM_CHANNEL_4);
 80088a2:	210c      	movs	r1, #12
 80088a4:	483d      	ldr	r0, [pc, #244]	; (800899c <main+0x1e8>)
 80088a6:	f7fd fd21 	bl	80062ec <HAL_TIM_OC_Start>

	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);//todo check OC versus IC
 80088aa:	210c      	movs	r1, #12
 80088ac:	483b      	ldr	r0, [pc, #236]	; (800899c <main+0x1e8>)
 80088ae:	f7fd fdcf 	bl	8006450 <HAL_TIM_IC_Start_IT>

	// --- ENABLE DRV
	HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, GPIO_PIN_SET);
 80088b2:	2201      	movs	r2, #1
 80088b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80088b8:	4835      	ldr	r0, [pc, #212]	; (8008990 <main+0x1dc>)
 80088ba:	f7fa fefb 	bl	80036b4 <HAL_GPIO_WritePin>
	uint8_t accel8l;
	uint8_t accel8h;

	char accel_char[20];

	dat_buf[0] = 0x6B; //power register
 80088be:	4b38      	ldr	r3, [pc, #224]	; (80089a0 <main+0x1ec>)
 80088c0:	226b      	movs	r2, #107	; 0x6b
 80088c2:	701a      	strb	r2, [r3, #0]
	dat_buf[1] = 0x00; //switch on
 80088c4:	4b36      	ldr	r3, [pc, #216]	; (80089a0 <main+0x1ec>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	705a      	strb	r2, [r3, #1]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, dat_buf, 2, HAL_MAX_DELAY);
 80088ca:	23d0      	movs	r3, #208	; 0xd0
 80088cc:	b299      	uxth	r1, r3
 80088ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80088d2:	9300      	str	r3, [sp, #0]
 80088d4:	2302      	movs	r3, #2
 80088d6:	4a32      	ldr	r2, [pc, #200]	; (80089a0 <main+0x1ec>)
 80088d8:	4832      	ldr	r0, [pc, #200]	; (80089a4 <main+0x1f0>)
 80088da:	f7fb f86f 	bl	80039bc <HAL_I2C_Master_Transmit>
 80088de:	4603      	mov	r3, r0
 80088e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK){
 80088e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d009      	beq.n	8008900 <main+0x14c>
		strcpy((char*)dat_buf, "Error IMU T\r\n");
 80088ec:	4a2c      	ldr	r2, [pc, #176]	; (80089a0 <main+0x1ec>)
 80088ee:	4b2e      	ldr	r3, [pc, #184]	; (80089a8 <main+0x1f4>)
 80088f0:	4614      	mov	r4, r2
 80088f2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80088f4:	6020      	str	r0, [r4, #0]
 80088f6:	6061      	str	r1, [r4, #4]
 80088f8:	60a2      	str	r2, [r4, #8]
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	81a3      	strh	r3, [r4, #12]
 80088fe:	e002      	b.n	8008906 <main+0x152>
	} else {
		dat_buf[0] = 0x00;
 8008900:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <main+0x1ec>)
 8008902:	2200      	movs	r2, #0
 8008904:	701a      	strb	r2, [r3, #0]
	}

	dat_buf[0] = 0x3B;
 8008906:	4b26      	ldr	r3, [pc, #152]	; (80089a0 <main+0x1ec>)
 8008908:	223b      	movs	r2, #59	; 0x3b
 800890a:	701a      	strb	r2, [r3, #0]
	ret = HAL_I2C_Master_Transmit(&hi2c2, IMU_ADDR, dat_buf, 1, HAL_MAX_DELAY);
 800890c:	23d0      	movs	r3, #208	; 0xd0
 800890e:	b299      	uxth	r1, r3
 8008910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008914:	9300      	str	r3, [sp, #0]
 8008916:	2301      	movs	r3, #1
 8008918:	4a21      	ldr	r2, [pc, #132]	; (80089a0 <main+0x1ec>)
 800891a:	4822      	ldr	r0, [pc, #136]	; (80089a4 <main+0x1f0>)
 800891c:	f7fb f84e 	bl	80039bc <HAL_I2C_Master_Transmit>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (ret != HAL_OK){
 8008926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800892a:	2b00      	cmp	r3, #0
 800892c:	d009      	beq.n	8008942 <main+0x18e>
		strcpy((char*)dat_buf, "Error IMU T\r\n");
 800892e:	4a1c      	ldr	r2, [pc, #112]	; (80089a0 <main+0x1ec>)
 8008930:	4b1d      	ldr	r3, [pc, #116]	; (80089a8 <main+0x1f4>)
 8008932:	4614      	mov	r4, r2
 8008934:	cb07      	ldmia	r3!, {r0, r1, r2}
 8008936:	6020      	str	r0, [r4, #0]
 8008938:	6061      	str	r1, [r4, #4]
 800893a:	60a2      	str	r2, [r4, #8]
 800893c:	881b      	ldrh	r3, [r3, #0]
 800893e:	81a3      	strh	r3, [r4, #12]
 8008940:	e042      	b.n	80089c8 <main+0x214>
	} else {
		ret = HAL_I2C_Master_Receive(&hi2c2, IMU_ADDR, dat_buf, 1, HAL_MAX_DELAY);
 8008942:	23d0      	movs	r3, #208	; 0xd0
 8008944:	b299      	uxth	r1, r3
 8008946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800894a:	9300      	str	r3, [sp, #0]
 800894c:	2301      	movs	r3, #1
 800894e:	4a14      	ldr	r2, [pc, #80]	; (80089a0 <main+0x1ec>)
 8008950:	4814      	ldr	r0, [pc, #80]	; (80089a4 <main+0x1f0>)
 8008952:	f7fb f931 	bl	8003bb8 <HAL_I2C_Master_Receive>
 8008956:	4603      	mov	r3, r0
 8008958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (ret != HAL_OK){
 800895c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008960:	2b00      	cmp	r3, #0
 8008962:	d025      	beq.n	80089b0 <main+0x1fc>
			strcpy((char*)dat_buf, "Error IMU R\r\n");
 8008964:	4a0e      	ldr	r2, [pc, #56]	; (80089a0 <main+0x1ec>)
 8008966:	4b11      	ldr	r3, [pc, #68]	; (80089ac <main+0x1f8>)
 8008968:	4614      	mov	r4, r2
 800896a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800896c:	6020      	str	r0, [r4, #0]
 800896e:	6061      	str	r1, [r4, #4]
 8008970:	60a2      	str	r2, [r4, #8]
 8008972:	881b      	ldrh	r3, [r3, #0]
 8008974:	81a3      	strh	r3, [r4, #12]
 8008976:	e027      	b.n	80089c8 <main+0x214>
 8008978:	20000214 	.word	0x20000214
 800897c:	20001b3c 	.word	0x20001b3c
 8008980:	20000e20 	.word	0x20000e20
 8008984:	20001a34 	.word	0x20001a34
 8008988:	20000ba0 	.word	0x20000ba0
 800898c:	200017f0 	.word	0x200017f0
 8008990:	40021000 	.word	0x40021000
 8008994:	40014000 	.word	0x40014000
 8008998:	e000ed00 	.word	0xe000ed00
 800899c:	20000dd8 	.word	0x20000dd8
 80089a0:	20001a74 	.word	0x20001a74
 80089a4:	20000a80 	.word	0x20000a80
 80089a8:	0800ed28 	.word	0x0800ed28
 80089ac:	0800ed38 	.word	0x0800ed38
		} else {
			accel8l = (int8_t)dat_buf[0];
 80089b0:	4ba8      	ldr	r3, [pc, #672]	; (8008c54 <main+0x4a0>)
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			sprintf((char*)accel_char, "%u m\r\n", (int)accel8l);
 80089b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80089bc:	f107 030c 	add.w	r3, r7, #12
 80089c0:	49a5      	ldr	r1, [pc, #660]	; (8008c58 <main+0x4a4>)
 80089c2:	4618      	mov	r0, r3
 80089c4:	f004 fc24 	bl	800d210 <siprintf>
	 *                                                                           *
	 *    ROTATION SENSOR
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL );
 80089c8:	213c      	movs	r1, #60	; 0x3c
 80089ca:	48a4      	ldr	r0, [pc, #656]	; (8008c5c <main+0x4a8>)
 80089cc:	f7fd fe3a 	bl	8006644 <HAL_TIM_Encoder_Start_IT>

	//todo UGLY BUG - Ugly FIX: now i just send the init below twice because somehow the communication of the first transaction does not seem to work-- i sse on the MISO signal the lines just pulls up to 0.5fV instead of 3V but it works fine for the next transmission so it gets initialized correctly if i sent it twice


	// --- set ABI and enable PWM
	spi_address_8[1]= 0x00;//
 80089d0:	2300      	movs	r3, #0
 80089d2:	727b      	strb	r3, [r7, #9]
	spi_address_8[0]= 0x18;//00000000 00011000
 80089d4:	2318      	movs	r3, #24
 80089d6:	723b      	strb	r3, [r7, #8]
	spi_value_8[1]= 0x80;
 80089d8:	2380      	movs	r3, #128	; 0x80
 80089da:	717b      	strb	r3, [r7, #5]
	spi_value_8[0]= 0x80;  //10000000 10000000
 80089dc:	2380      	movs	r3, #128	; 0x80
 80089de:	713b      	strb	r3, [r7, #4]
	delay_SPI();
 80089e0:	f001 fe6a 	bl	800a6b8 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 80089e4:	2200      	movs	r2, #0
 80089e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80089ea:	489d      	ldr	r0, [pc, #628]	; (8008c60 <main+0x4ac>)
 80089ec:	f7fa fe62 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 80089f0:	f107 0108 	add.w	r1, r7, #8
 80089f4:	2301      	movs	r3, #1
 80089f6:	2201      	movs	r2, #1
 80089f8:	489a      	ldr	r0, [pc, #616]	; (8008c64 <main+0x4b0>)
 80089fa:	f7fc fde4 	bl	80055c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 80089fe:	2201      	movs	r2, #1
 8008a00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a04:	4896      	ldr	r0, [pc, #600]	; (8008c60 <main+0x4ac>)
 8008a06:	f7fa fe55 	bl	80036b4 <HAL_GPIO_WritePin>
	delay_SPI();
 8008a0a:	f001 fe55 	bl	800a6b8 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a14:	4892      	ldr	r0, [pc, #584]	; (8008c60 <main+0x4ac>)
 8008a16:	f7fa fe4d 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008a1a:	1d39      	adds	r1, r7, #4
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	2201      	movs	r2, #1
 8008a20:	4890      	ldr	r0, [pc, #576]	; (8008c64 <main+0x4b0>)
 8008a22:	f7fc fdd0 	bl	80055c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008a26:	2201      	movs	r2, #1
 8008a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a2c:	488c      	ldr	r0, [pc, #560]	; (8008c60 <main+0x4ac>)
 8008a2e:	f7fa fe41 	bl	80036b4 <HAL_GPIO_WritePin>

	// --- set steps 2000steps 500 pulses //todo this sometimes seems not to work as I get 4000 steps
	spi_address_8[1]= 0x80;
 8008a32:	2380      	movs	r3, #128	; 0x80
 8008a34:	727b      	strb	r3, [r7, #9]
	spi_address_8[0]= 0x19; //00001000 00011001
 8008a36:	2319      	movs	r3, #25
 8008a38:	723b      	strb	r3, [r7, #8]
	//address = AS_ADDR_SETTINGS2 | AS_WRITE ; // 0x8019
	//value = 0x0020 | AS_ODD; // 0x8020
	//value = 0x00E0 | AS_ODD;
	spi_value_8[1]= 0x00;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	717b      	strb	r3, [r7, #5]
	spi_value_8[0]= 0x00;  //was 0x80 and 0x20 10000000 00100000 to get 2000 pulses --> changed to 4000
 8008a3e:	2300      	movs	r3, #0
 8008a40:	713b      	strb	r3, [r7, #4]
	delay_SPI();
 8008a42:	f001 fe39 	bl	800a6b8 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008a46:	2200      	movs	r2, #0
 8008a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a4c:	4884      	ldr	r0, [pc, #528]	; (8008c60 <main+0x4ac>)
 8008a4e:	f7fa fe31 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008a52:	f107 0108 	add.w	r1, r7, #8
 8008a56:	2301      	movs	r3, #1
 8008a58:	2201      	movs	r2, #1
 8008a5a:	4882      	ldr	r0, [pc, #520]	; (8008c64 <main+0x4b0>)
 8008a5c:	f7fc fdb3 	bl	80055c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008a60:	2201      	movs	r2, #1
 8008a62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a66:	487e      	ldr	r0, [pc, #504]	; (8008c60 <main+0x4ac>)
 8008a68:	f7fa fe24 	bl	80036b4 <HAL_GPIO_WritePin>
	delay_SPI();
 8008a6c:	f001 fe24 	bl	800a6b8 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008a70:	2200      	movs	r2, #0
 8008a72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a76:	487a      	ldr	r0, [pc, #488]	; (8008c60 <main+0x4ac>)
 8008a78:	f7fa fe1c 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_value_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008a7c:	1d39      	adds	r1, r7, #4
 8008a7e:	2301      	movs	r3, #1
 8008a80:	2201      	movs	r2, #1
 8008a82:	4878      	ldr	r0, [pc, #480]	; (8008c64 <main+0x4b0>)
 8008a84:	f7fc fd9f 	bl	80055c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008a88:	2201      	movs	r2, #1
 8008a8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008a8e:	4874      	ldr	r0, [pc, #464]	; (8008c60 <main+0x4ac>)
 8008a90:	f7fa fe10 	bl	80036b4 <HAL_GPIO_WritePin>

	// --- read angle
	HAL_Delay(1);
 8008a94:	2001      	movs	r0, #1
 8008a96:	f7f8 fac9 	bl	800102c <HAL_Delay>

	uint8_t angle8[2];
	uint16_t angle;

	//for (int i=0; i<4; i++)
	spi_address_8[1]= 0x7F;
 8008a9a:	237f      	movs	r3, #127	; 0x7f
 8008a9c:	727b      	strb	r3, [r7, #9]
	spi_address_8[0]= 0xFE;
 8008a9e:	23fe      	movs	r3, #254	; 0xfe
 8008aa0:	723b      	strb	r3, [r7, #8]
	delay_SPI();
 8008aa2:	f001 fe09 	bl	800a6b8 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008aac:	486c      	ldr	r0, [pc, #432]	; (8008c60 <main+0x4ac>)
 8008aae:	f7fa fe01 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t *)spi_address_8, 1, 1);// The HAL function here takes only 8bit only - still the "Size amount of data" is 1 because we set spi to 16 bit in Config
 8008ab2:	f107 0108 	add.w	r1, r7, #8
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	2201      	movs	r2, #1
 8008aba:	486a      	ldr	r0, [pc, #424]	; (8008c64 <main+0x4b0>)
 8008abc:	f7fc fd83 	bl	80055c6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ac6:	4866      	ldr	r0, [pc, #408]	; (8008c60 <main+0x4ac>)
 8008ac8:	f7fa fdf4 	bl	80036b4 <HAL_GPIO_WritePin>
	delay_SPI();
 8008acc:	f001 fdf4 	bl	800a6b8 <delay_SPI>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_RESET);
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008ad6:	4862      	ldr	r0, [pc, #392]	; (8008c60 <main+0x4ac>)
 8008ad8:	f7fa fdec 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi2, (uint8_t *)&angle8, 1, 1);
 8008adc:	4639      	mov	r1, r7
 8008ade:	2301      	movs	r3, #1
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	4860      	ldr	r0, [pc, #384]	; (8008c64 <main+0x4b0>)
 8008ae4:	f7fc fea3 	bl	800582e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ROT0_nCS_GPIO_Port, ROT0_nCS_Pin, GPIO_PIN_SET);
 8008ae8:	2201      	movs	r2, #1
 8008aea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008aee:	485c      	ldr	r0, [pc, #368]	; (8008c60 <main+0x4ac>)
 8008af0:	f7fa fde0 	bl	80036b4 <HAL_GPIO_WritePin>

	angle = (uint16_t) angle8[0] | (uint16_t) angle8[1] << 8U;
 8008af4:	783b      	ldrb	r3, [r7, #0]
 8008af6:	b21a      	sxth	r2, r3
 8008af8:	787b      	ldrb	r3, [r7, #1]
 8008afa:	021b      	lsls	r3, r3, #8
 8008afc:	b21b      	sxth	r3, r3
 8008afe:	4313      	orrs	r3, r2
 8008b00:	b21b      	sxth	r3, r3
 8008b02:	84bb      	strh	r3, [r7, #36]	; 0x24
	angle &= AS_DATA_MASK;
 8008b04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b06:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008b0a:	84bb      	strh	r3, [r7, #36]	; 0x24


	// --- ROTATION SENSOR 0 POINT SETTING ----------------------------------------------------
	//angle &= AS_DATA_MASK;
	init_EncVal = (uint16_t) ((float)angle /16384.0f * ENC_STEPS_F);
 8008b0c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008b0e:	ee07 3a90 	vmov	s15, r3
 8008b12:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008b16:	eddf 6a54 	vldr	s13, [pc, #336]	; 8008c68 <main+0x4b4>
 8008b1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008b1e:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8008c6c <main+0x4b8>
 8008b22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008b26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008b2a:	ee17 3a90 	vmov	r3, s15
 8008b2e:	b29b      	uxth	r3, r3
 8008b30:	461a      	mov	r2, r3
 8008b32:	4b4f      	ldr	r3, [pc, #316]	; (8008c70 <main+0x4bc>)
 8008b34:	601a      	str	r2, [r3, #0]
	last_EncVal_omegaEnc = init_EncVal;
 8008b36:	4b4e      	ldr	r3, [pc, #312]	; (8008c70 <main+0x4bc>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4a4e      	ldr	r2, [pc, #312]	; (8008c74 <main+0x4c0>)
 8008b3c:	6013      	str	r3, [r2, #0]
	last_EncVal_pwm = init_EncVal;
 8008b3e:	4b4c      	ldr	r3, [pc, #304]	; (8008c70 <main+0x4bc>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a4d      	ldr	r2, [pc, #308]	; (8008c78 <main+0x4c4>)
 8008b44:	6013      	str	r3, [r2, #0]
	TIM8->CNT = init_EncVal;
 8008b46:	4b4a      	ldr	r3, [pc, #296]	; (8008c70 <main+0x4bc>)
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b4c      	ldr	r3, [pc, #304]	; (8008c7c <main+0x4c8>)
 8008b4c:	625a      	str	r2, [r3, #36]	; 0x24
	 *                                                                           *
	 *    UART DMA
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_DMA_RegisterCallback(&hdma_usart3_tx, HAL_DMA_XFER_CPLT_CB_ID, &DMAUSARTTransferComplete);
 8008b4e:	4a4c      	ldr	r2, [pc, #304]	; (8008c80 <main+0x4cc>)
 8008b50:	2100      	movs	r1, #0
 8008b52:	484c      	ldr	r0, [pc, #304]	; (8008c84 <main+0x4d0>)
 8008b54:	f7fa fae2 	bl	800311c <HAL_DMA_RegisterCallback>
	 *                                                                           *
	 *    ADC DMA and INJECTED
	 *                                                                           *
	 *****************************************************************************
	 */
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc1_buf, ADC1_BUF_LEN); // the length must be multiple of channels otherwise I observed mess in order - even like 2 of one and lots of mess
 8008b58:	2208      	movs	r2, #8
 8008b5a:	494b      	ldr	r1, [pc, #300]	; (8008c88 <main+0x4d4>)
 8008b5c:	484b      	ldr	r0, [pc, #300]	; (8008c8c <main+0x4d8>)
 8008b5e:	f7f8 fc0b 	bl	8001378 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc2_buf, ADC2_BUF_LEN); // TODO enabling this only leads to no change all values stay zero
 8008b62:	2204      	movs	r2, #4
 8008b64:	494a      	ldr	r1, [pc, #296]	; (8008c90 <main+0x4dc>)
 8008b66:	484b      	ldr	r0, [pc, #300]	; (8008c94 <main+0x4e0>)
 8008b68:	f7f8 fc06 	bl	8001378 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc3_buf, ADC3_BUF_LEN); // TODO enabling this breaks transmission entirely
 8008b6c:	2204      	movs	r2, #4
 8008b6e:	494a      	ldr	r1, [pc, #296]	; (8008c98 <main+0x4e4>)
 8008b70:	484a      	ldr	r0, [pc, #296]	; (8008c9c <main+0x4e8>)
 8008b72:	f7f8 fc01 	bl	8001378 <HAL_ADC_Start_DMA>

	HAL_ADCEx_InjectedStart (&hadc1);
 8008b76:	4845      	ldr	r0, [pc, #276]	; (8008c8c <main+0x4d8>)
 8008b78:	f7f8 ffb8 	bl	8001aec <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc2);
 8008b7c:	4845      	ldr	r0, [pc, #276]	; (8008c94 <main+0x4e0>)
 8008b7e:	f7f8 ffb5 	bl	8001aec <HAL_ADCEx_InjectedStart>
	HAL_ADCEx_InjectedStart (&hadc3);
 8008b82:	4846      	ldr	r0, [pc, #280]	; (8008c9c <main+0x4e8>)
 8008b84:	f7f8 ffb2 	bl	8001aec <HAL_ADCEx_InjectedStart>
	 *                                                                           *
	 *    CAN COMMUNICATION
	 *                                                                           *
	 *****************************************************************************
	 */
	pHeader.DLC =6;
 8008b88:	4b45      	ldr	r3, [pc, #276]	; (8008ca0 <main+0x4ec>)
 8008b8a:	2206      	movs	r2, #6
 8008b8c:	611a      	str	r2, [r3, #16]
	pHeader.IDE = CAN_ID_STD;
 8008b8e:	4b44      	ldr	r3, [pc, #272]	; (8008ca0 <main+0x4ec>)
 8008b90:	2200      	movs	r2, #0
 8008b92:	609a      	str	r2, [r3, #8]
	pHeader.RTR = CAN_RTR_DATA;
 8008b94:	4b42      	ldr	r3, [pc, #264]	; (8008ca0 <main+0x4ec>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	60da      	str	r2, [r3, #12]
	pHeader.StdId = 0x001;
 8008b9a:	4b41      	ldr	r3, [pc, #260]	; (8008ca0 <main+0x4ec>)
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	601a      	str	r2, [r3, #0]

	sFilterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8008ba0:	4b40      	ldr	r3, [pc, #256]	; (8008ca4 <main+0x4f0>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = CAN_ID<<5;
 8008ba6:	4b3f      	ldr	r3, [pc, #252]	; (8008ca4 <main+0x4f0>)
 8008ba8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bac:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0;
 8008bae:	4b3d      	ldr	r3, [pc, #244]	; (8008ca4 <main+0x4f0>)
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 8008bb4:	4b3b      	ldr	r3, [pc, #236]	; (8008ca4 <main+0x4f0>)
 8008bb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bba:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0xFFFF;
 8008bbc:	4b39      	ldr	r3, [pc, #228]	; (8008ca4 <main+0x4f0>)
 8008bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008bc2:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8008bc4:	4b37      	ldr	r3, [pc, #220]	; (8008ca4 <main+0x4f0>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	61da      	str	r2, [r3, #28]
	sFilterConfig.FilterActivation = ENABLE;
 8008bca:	4b36      	ldr	r3, [pc, #216]	; (8008ca4 <main+0x4f0>)
 8008bcc:	2201      	movs	r2, #1
 8008bce:	621a      	str	r2, [r3, #32]

	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8008bd0:	4934      	ldr	r1, [pc, #208]	; (8008ca4 <main+0x4f0>)
 8008bd2:	4835      	ldr	r0, [pc, #212]	; (8008ca8 <main+0x4f4>)
 8008bd4:	f7f9 fb60 	bl	8002298 <HAL_CAN_ConfigFilter>
	HAL_CAN_Start(&hcan1);
 8008bd8:	4833      	ldr	r0, [pc, #204]	; (8008ca8 <main+0x4f4>)
 8008bda:	f7f9 fc3d 	bl	8002458 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8008bde:	2102      	movs	r1, #2
 8008be0:	4831      	ldr	r0, [pc, #196]	; (8008ca8 <main+0x4f4>)
 8008be2:	f7f9 fc7d 	bl	80024e0 <HAL_CAN_ActivateNotification>
	 *    SYSTEM CALIBRATION
	 *                                                                           *
	 *****************************************************************************
	 */

	sprintf(buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\nangle: %d init_EncVal %d \r\nangle: %u EncVal %u \r\n\r\n",
 8008be6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8008be8:	4b21      	ldr	r3, [pc, #132]	; (8008c70 <main+0x4bc>)
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008bee:	4a20      	ldr	r2, [pc, #128]	; (8008c70 <main+0x4bc>)
 8008bf0:	6812      	ldr	r2, [r2, #0]
 8008bf2:	9201      	str	r2, [sp, #4]
 8008bf4:	9300      	str	r3, [sp, #0]
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	492c      	ldr	r1, [pc, #176]	; (8008cac <main+0x4f8>)
 8008bfc:	482c      	ldr	r0, [pc, #176]	; (8008cb0 <main+0x4fc>)
 8008bfe:	f004 fb07 	bl	800d210 <siprintf>
			(int)angle, (int)init_EncVal ,
			(int)angle, (int)init_EncVal );
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8008c02:	4b2c      	ldr	r3, [pc, #176]	; (8008cb4 <main+0x500>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	695a      	ldr	r2, [r3, #20]
 8008c08:	4b2a      	ldr	r3, [pc, #168]	; (8008cb4 <main+0x500>)
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008c10:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8008c12:	4c27      	ldr	r4, [pc, #156]	; (8008cb0 <main+0x4fc>)
 8008c14:	4b27      	ldr	r3, [pc, #156]	; (8008cb4 <main+0x500>)
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	3304      	adds	r3, #4
 8008c1a:	461d      	mov	r5, r3
 8008c1c:	4824      	ldr	r0, [pc, #144]	; (8008cb0 <main+0x4fc>)
 8008c1e:	f7f7 fad7 	bl	80001d0 <strlen>
 8008c22:	4603      	mov	r3, r0
 8008c24:	462a      	mov	r2, r5
 8008c26:	4621      	mov	r1, r4
 8008c28:	4816      	ldr	r0, [pc, #88]	; (8008c84 <main+0x4d0>)
 8008c2a:	f7fa f873 	bl	8002d14 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 8008c2e:	200a      	movs	r0, #10
 8008c30:	f7f8 f9fc 	bl	800102c <HAL_Delay>

	// --- find current sense offsets
	//float acc_I_A = 0.0f;
#if I_CALIB_ENABLED
	A_mean = 0;
 8008c34:	4b20      	ldr	r3, [pc, #128]	; (8008cb8 <main+0x504>)
 8008c36:	f04f 0200 	mov.w	r2, #0
 8008c3a:	601a      	str	r2, [r3, #0]
	B_mean = 0;
 8008c3c:	4b1f      	ldr	r3, [pc, #124]	; (8008cbc <main+0x508>)
 8008c3e:	f04f 0200 	mov.w	r2, #0
 8008c42:	601a      	str	r2, [r3, #0]
	C_mean = 0;
 8008c44:	4b1e      	ldr	r3, [pc, #120]	; (8008cc0 <main+0x50c>)
 8008c46:	f04f 0200 	mov.w	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]
	for (int i=0; i<I_CALIB_N; i++){
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c50:	e06e      	b.n	8008d30 <main+0x57c>
 8008c52:	bf00      	nop
 8008c54:	20001a74 	.word	0x20001a74
 8008c58:	0800ed48 	.word	0x0800ed48
 8008c5c:	2000055c 	.word	0x2000055c
 8008c60:	40020c00 	.word	0x40020c00
 8008c64:	200001bc 	.word	0x200001bc
 8008c68:	46800000 	.word	0x46800000
 8008c6c:	457a0000 	.word	0x457a0000
 8008c70:	20002540 	.word	0x20002540
 8008c74:	20000be0 	.word	0x20000be0
 8008c78:	20000ad4 	.word	0x20000ad4
 8008c7c:	40010400 	.word	0x40010400
 8008c80:	0800a8e1 	.word	0x0800a8e1
 8008c84:	20000b40 	.word	0x20000b40
 8008c88:	20000be8 	.word	0x20000be8
 8008c8c:	20000cc8 	.word	0x20000cc8
 8008c90:	20001a2c 	.word	0x20001a2c
 8008c94:	200005dc 	.word	0x200005dc
 8008c98:	20000e18 	.word	0x20000e18
 8008c9c:	20000d10 	.word	0x20000d10
 8008ca0:	20001b24 	.word	0x20001b24
 8008ca4:	20000194 	.word	0x20000194
 8008ca8:	20001afc 	.word	0x20001afc
 8008cac:	0800ed50 	.word	0x0800ed50
 8008cb0:	20001898 	.word	0x20001898
 8008cb4:	2000059c 	.word	0x2000059c
 8008cb8:	2000003c 	.word	0x2000003c
 8008cbc:	20000040 	.word	0x20000040
 8008cc0:	20000044 	.word	0x20000044
		A_mean += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);
 8008cc4:	2104      	movs	r1, #4
 8008cc6:	48bb      	ldr	r0, [pc, #748]	; (8008fb4 <main+0x800>)
 8008cc8:	f7f8 ffce 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 8008ccc:	ee07 0a90 	vmov	s15, r0
 8008cd0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cd4:	4bb8      	ldr	r3, [pc, #736]	; (8008fb8 <main+0x804>)
 8008cd6:	edd3 7a00 	vldr	s15, [r3]
 8008cda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cde:	4bb6      	ldr	r3, [pc, #728]	; (8008fb8 <main+0x804>)
 8008ce0:	edc3 7a00 	vstr	s15, [r3]
		B_mean += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I);
 8008ce4:	2104      	movs	r1, #4
 8008ce6:	48b5      	ldr	r0, [pc, #724]	; (8008fbc <main+0x808>)
 8008ce8:	f7f8 ffbe 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 8008cec:	ee07 0a90 	vmov	s15, r0
 8008cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008cf4:	4bb2      	ldr	r3, [pc, #712]	; (8008fc0 <main+0x80c>)
 8008cf6:	edd3 7a00 	vldr	s15, [r3]
 8008cfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008cfe:	4bb0      	ldr	r3, [pc, #704]	; (8008fc0 <main+0x80c>)
 8008d00:	edc3 7a00 	vstr	s15, [r3]
		C_mean += HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I);
 8008d04:	2104      	movs	r1, #4
 8008d06:	48af      	ldr	r0, [pc, #700]	; (8008fc4 <main+0x810>)
 8008d08:	f7f8 ffae 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 8008d0c:	ee07 0a90 	vmov	s15, r0
 8008d10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008d14:	4bac      	ldr	r3, [pc, #688]	; (8008fc8 <main+0x814>)
 8008d16:	edd3 7a00 	vldr	s15, [r3]
 8008d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008d1e:	4baa      	ldr	r3, [pc, #680]	; (8008fc8 <main+0x814>)
 8008d20:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1);
 8008d24:	2001      	movs	r0, #1
 8008d26:	f7f8 f981 	bl	800102c <HAL_Delay>
	for (int i=0; i<I_CALIB_N; i++){
 8008d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d32:	2b7f      	cmp	r3, #127	; 0x7f
 8008d34:	ddc6      	ble.n	8008cc4 <main+0x510>
	}
	A_mean /= I_CALIB_N;
 8008d36:	4ba0      	ldr	r3, [pc, #640]	; (8008fb8 <main+0x804>)
 8008d38:	ed93 7a00 	vldr	s14, [r3]
 8008d3c:	eddf 6aa3 	vldr	s13, [pc, #652]	; 8008fcc <main+0x818>
 8008d40:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d44:	4b9c      	ldr	r3, [pc, #624]	; (8008fb8 <main+0x804>)
 8008d46:	edc3 7a00 	vstr	s15, [r3]
	B_mean /= I_CALIB_N;
 8008d4a:	4b9d      	ldr	r3, [pc, #628]	; (8008fc0 <main+0x80c>)
 8008d4c:	ed93 7a00 	vldr	s14, [r3]
 8008d50:	eddf 6a9e 	vldr	s13, [pc, #632]	; 8008fcc <main+0x818>
 8008d54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d58:	4b99      	ldr	r3, [pc, #612]	; (8008fc0 <main+0x80c>)
 8008d5a:	edc3 7a00 	vstr	s15, [r3]
	C_mean /= I_CALIB_N;
 8008d5e:	4b9a      	ldr	r3, [pc, #616]	; (8008fc8 <main+0x814>)
 8008d60:	ed93 7a00 	vldr	s14, [r3]
 8008d64:	eddf 6a99 	vldr	s13, [pc, #612]	; 8008fcc <main+0x818>
 8008d68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8008d6c:	4b96      	ldr	r3, [pc, #600]	; (8008fc8 <main+0x814>)
 8008d6e:	edc3 7a00 	vstr	s15, [r3]

	sprintf(buf, "I_mean: %5d %5d %5d \n", (int)A_mean, (int)B_mean, (int)C_mean );
 8008d72:	4b91      	ldr	r3, [pc, #580]	; (8008fb8 <main+0x804>)
 8008d74:	edd3 7a00 	vldr	s15, [r3]
 8008d78:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008d7c:	4b90      	ldr	r3, [pc, #576]	; (8008fc0 <main+0x80c>)
 8008d7e:	edd3 7a00 	vldr	s15, [r3]
 8008d82:	eefd 6ae7 	vcvt.s32.f32	s13, s15
 8008d86:	4b90      	ldr	r3, [pc, #576]	; (8008fc8 <main+0x814>)
 8008d88:	edd3 7a00 	vldr	s15, [r3]
 8008d8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d90:	ee17 3a90 	vmov	r3, s15
 8008d94:	9300      	str	r3, [sp, #0]
 8008d96:	ee16 3a90 	vmov	r3, s13
 8008d9a:	ee17 2a10 	vmov	r2, s14
 8008d9e:	498c      	ldr	r1, [pc, #560]	; (8008fd0 <main+0x81c>)
 8008da0:	488c      	ldr	r0, [pc, #560]	; (8008fd4 <main+0x820>)
 8008da2:	f004 fa35 	bl	800d210 <siprintf>
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8008da6:	4b8c      	ldr	r3, [pc, #560]	; (8008fd8 <main+0x824>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	695a      	ldr	r2, [r3, #20]
 8008dac:	4b8a      	ldr	r3, [pc, #552]	; (8008fd8 <main+0x824>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008db4:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8008db6:	4c87      	ldr	r4, [pc, #540]	; (8008fd4 <main+0x820>)
 8008db8:	4b87      	ldr	r3, [pc, #540]	; (8008fd8 <main+0x824>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3304      	adds	r3, #4
 8008dbe:	461d      	mov	r5, r3
 8008dc0:	4884      	ldr	r0, [pc, #528]	; (8008fd4 <main+0x820>)
 8008dc2:	f7f7 fa05 	bl	80001d0 <strlen>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	462a      	mov	r2, r5
 8008dca:	4621      	mov	r1, r4
 8008dcc:	4883      	ldr	r0, [pc, #524]	; (8008fdc <main+0x828>)
 8008dce:	f7f9 ffa1 	bl	8002d14 <HAL_DMA_Start_IT>
	HAL_Delay(10);
 8008dd2:	200a      	movs	r0, #10
 8008dd4:	f7f8 f92a 	bl	800102c <HAL_Delay>
	 *    SYSTEM CHECK
	 *                                                                           *
	 *****************************************************************************
	 */

	if (adc1_buf[RANK_CONT_Vbus-1]*CONVERT_VBUS_INT2V > VBUS_MAX){
 8008dd8:	4b81      	ldr	r3, [pc, #516]	; (8008fe0 <main+0x82c>)
 8008dda:	89db      	ldrh	r3, [r3, #14]
 8008ddc:	ee07 3a90 	vmov	s15, r3
 8008de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008de4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8008fe4 <main+0x830>
 8008de8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dec:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8008df0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008df8:	dd05      	ble.n	8008e06 <main+0x652>
		sys_err |= 1 << 0U;
 8008dfa:	4b7b      	ldr	r3, [pc, #492]	; (8008fe8 <main+0x834>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f043 0301 	orr.w	r3, r3, #1
 8008e02:	4a79      	ldr	r2, [pc, #484]	; (8008fe8 <main+0x834>)
 8008e04:	6013      	str	r3, [r2, #0]
	}
	if (adc1_buf[RANK_CONT_Vbus-1]*CONVERT_VBUS_INT2V < VBUS_MIN){
 8008e06:	4b76      	ldr	r3, [pc, #472]	; (8008fe0 <main+0x82c>)
 8008e08:	89db      	ldrh	r3, [r3, #14]
 8008e0a:	ee07 3a90 	vmov	s15, r3
 8008e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e12:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8008fe4 <main+0x830>
 8008e16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008e1a:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8008e1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e26:	d505      	bpl.n	8008e34 <main+0x680>
		sys_err |= 1 << 1U;
 8008e28:	4b6f      	ldr	r3, [pc, #444]	; (8008fe8 <main+0x834>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f043 0302 	orr.w	r3, r3, #2
 8008e30:	4a6d      	ldr	r2, [pc, #436]	; (8008fe8 <main+0x834>)
 8008e32:	6013      	str	r3, [r2, #0]
	}

	if (A_mean < 2030.0f || A_mean > 2060.0f ||
 8008e34:	4b60      	ldr	r3, [pc, #384]	; (8008fb8 <main+0x804>)
 8008e36:	edd3 7a00 	vldr	s15, [r3]
 8008e3a:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8008fec <main+0x838>
 8008e3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e46:	d431      	bmi.n	8008eac <main+0x6f8>
 8008e48:	4b5b      	ldr	r3, [pc, #364]	; (8008fb8 <main+0x804>)
 8008e4a:	edd3 7a00 	vldr	s15, [r3]
 8008e4e:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8008ff0 <main+0x83c>
 8008e52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e5a:	dc27      	bgt.n	8008eac <main+0x6f8>
			B_mean < 1990.0f || B_mean > 2020.0f ||
 8008e5c:	4b58      	ldr	r3, [pc, #352]	; (8008fc0 <main+0x80c>)
 8008e5e:	edd3 7a00 	vldr	s15, [r3]
	if (A_mean < 2030.0f || A_mean > 2060.0f ||
 8008e62:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8008ff4 <main+0x840>
 8008e66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e6e:	d41d      	bmi.n	8008eac <main+0x6f8>
			B_mean < 1990.0f || B_mean > 2020.0f ||
 8008e70:	4b53      	ldr	r3, [pc, #332]	; (8008fc0 <main+0x80c>)
 8008e72:	edd3 7a00 	vldr	s15, [r3]
 8008e76:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8008ff8 <main+0x844>
 8008e7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e82:	dc13      	bgt.n	8008eac <main+0x6f8>
			C_mean < 1990.0f || C_mean > 2020.0f ){
 8008e84:	4b50      	ldr	r3, [pc, #320]	; (8008fc8 <main+0x814>)
 8008e86:	edd3 7a00 	vldr	s15, [r3]
			B_mean < 1990.0f || B_mean > 2020.0f ||
 8008e8a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8008ff4 <main+0x840>
 8008e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e96:	d409      	bmi.n	8008eac <main+0x6f8>
			C_mean < 1990.0f || C_mean > 2020.0f ){
 8008e98:	4b4b      	ldr	r3, [pc, #300]	; (8008fc8 <main+0x814>)
 8008e9a:	edd3 7a00 	vldr	s15, [r3]
 8008e9e:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8008ff8 <main+0x844>
 8008ea2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eaa:	dd05      	ble.n	8008eb8 <main+0x704>
		sys_err |= 1 << 2U;
 8008eac:	4b4e      	ldr	r3, [pc, #312]	; (8008fe8 <main+0x834>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f043 0304 	orr.w	r3, r3, #4
 8008eb4:	4a4c      	ldr	r2, [pc, #304]	; (8008fe8 <main+0x834>)
 8008eb6:	6013      	str	r3, [r2, #0]
	}

	if (sys_err == 0){
 8008eb8:	4b4b      	ldr	r3, [pc, #300]	; (8008fe8 <main+0x834>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d102      	bne.n	8008ec6 <main+0x712>
		GPIOE->BSRR = GPIO_PIN_3; //switches LD1 on
 8008ec0:	4b4e      	ldr	r3, [pc, #312]	; (8008ffc <main+0x848>)
 8008ec2:	2208      	movs	r2, #8
 8008ec4:	619a      	str	r2, [r3, #24]
	 *    WELCOME
	 *                                                                           *
	 *****************************************************************************
	 */

	sprintf(buf, "\r\n\r\nWELCOME TO MUSCLEmaster \r\n\r\n angle: %d EncVal %d \r\n error %d \r\n",
 8008ec6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ec8:	4b4d      	ldr	r3, [pc, #308]	; (8009000 <main+0x84c>)
 8008eca:	6819      	ldr	r1, [r3, #0]
 8008ecc:	4b46      	ldr	r3, [pc, #280]	; (8008fe8 <main+0x834>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	9300      	str	r3, [sp, #0]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	494b      	ldr	r1, [pc, #300]	; (8009004 <main+0x850>)
 8008ed6:	483f      	ldr	r0, [pc, #252]	; (8008fd4 <main+0x820>)
 8008ed8:	f004 f99a 	bl	800d210 <siprintf>
			(int)angle, (int)init_EncVal ,
			(int)sys_err);
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 8008edc:	4b3e      	ldr	r3, [pc, #248]	; (8008fd8 <main+0x824>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	695a      	ldr	r2, [r3, #20]
 8008ee2:	4b3d      	ldr	r3, [pc, #244]	; (8008fd8 <main+0x824>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008eea:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 8008eec:	4c39      	ldr	r4, [pc, #228]	; (8008fd4 <main+0x820>)
 8008eee:	4b3a      	ldr	r3, [pc, #232]	; (8008fd8 <main+0x824>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	3304      	adds	r3, #4
 8008ef4:	461d      	mov	r5, r3
 8008ef6:	4837      	ldr	r0, [pc, #220]	; (8008fd4 <main+0x820>)
 8008ef8:	f7f7 f96a 	bl	80001d0 <strlen>
 8008efc:	4603      	mov	r3, r0
 8008efe:	462a      	mov	r2, r5
 8008f00:	4621      	mov	r1, r4
 8008f02:	4836      	ldr	r0, [pc, #216]	; (8008fdc <main+0x828>)
 8008f04:	f7f9 ff06 	bl	8002d14 <HAL_DMA_Start_IT>

	HAL_Delay(10); //some delay needed othwise the first print statement in while will overwrite
 8008f08:	200a      	movs	r0, #10
 8008f0a:	f7f8 f88f 	bl	800102c <HAL_Delay>
	 *                                                                           *
	 *    SYSTEM START
	 *                                                                           *
	 *****************************************************************************
	 */
	playSound( 3, 100, 20);
 8008f0e:	2214      	movs	r2, #20
 8008f10:	2164      	movs	r1, #100	; 0x64
 8008f12:	2003      	movs	r0, #3
 8008f14:	f001 fbe8 	bl	800a6e8 <playSound>
	playSound( 2, 100, 40);
 8008f18:	2228      	movs	r2, #40	; 0x28
 8008f1a:	2164      	movs	r1, #100	; 0x64
 8008f1c:	2002      	movs	r0, #2
 8008f1e:	f001 fbe3 	bl	800a6e8 <playSound>
	playSound( 1, 100, 80);
 8008f22:	2250      	movs	r2, #80	; 0x50
 8008f24:	2164      	movs	r1, #100	; 0x64
 8008f26:	2001      	movs	r0, #1
 8008f28:	f001 fbde 	bl	800a6e8 <playSound>
	HAL_Delay(100); // So the system stops vibrating
 8008f2c:	2064      	movs	r0, #100	; 0x64
 8008f2e:	f7f8 f87d 	bl	800102c <HAL_Delay>

	sw_enable_pwm = true;
 8008f32:	4b35      	ldr	r3, [pc, #212]	; (8009008 <main+0x854>)
 8008f34:	2201      	movs	r2, #1
 8008f36:	701a      	strb	r2, [r3, #0]
	amp = 0.01f;
 8008f38:	4b34      	ldr	r3, [pc, #208]	; (800900c <main+0x858>)
 8008f3a:	4a35      	ldr	r2, [pc, #212]	; (8009010 <main+0x85c>)
 8008f3c:	601a      	str	r2, [r3, #0]
		 *****************************************************************************
		 *****************************************************************************
		 */

		// --- calling fast control task
		if (analog_samples_counter >= ANALOG_SAMPLES_N){
 8008f3e:	4b35      	ldr	r3, [pc, #212]	; (8009014 <main+0x860>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b1f      	cmp	r3, #31
 8008f44:	d913      	bls.n	8008f6e <main+0x7ba>
			fast_control_task();
 8008f46:	f002 fa2f 	bl	800b3a8 <fast_control_task>
			print_prep_task(prep_counter);
 8008f4a:	4b33      	ldr	r3, [pc, #204]	; (8009018 <main+0x864>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f002 fed8 	bl	800bd04 <print_prep_task>

			analog_samples_counter = 0;
 8008f54:	4b2f      	ldr	r3, [pc, #188]	; (8009014 <main+0x860>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	601a      	str	r2, [r3, #0]
			fast_control_task_counter ++;
 8008f5a:	4b30      	ldr	r3, [pc, #192]	; (800901c <main+0x868>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	4a2e      	ldr	r2, [pc, #184]	; (800901c <main+0x868>)
 8008f62:	6013      	str	r3, [r2, #0]
			prep_counter ++;
 8008f64:	4b2c      	ldr	r3, [pc, #176]	; (8009018 <main+0x864>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3301      	adds	r3, #1
 8008f6a:	4a2b      	ldr	r2, [pc, #172]	; (8009018 <main+0x864>)
 8008f6c:	6013      	str	r3, [r2, #0]
		}

		// --- calling slow control task
		if(fast_control_task_counter >= FAST_PER_SLOW){
 8008f6e:	4b2b      	ldr	r3, [pc, #172]	; (800901c <main+0x868>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	2b07      	cmp	r3, #7
 8008f74:	d909      	bls.n	8008f8a <main+0x7d6>
			slow_control_task();
 8008f76:	f002 fc65 	bl	800b844 <slow_control_task>

			fast_control_task_counter = 0;
 8008f7a:	4b28      	ldr	r3, [pc, #160]	; (800901c <main+0x868>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	601a      	str	r2, [r3, #0]
			slow_control_task_counter ++;
 8008f80:	4b27      	ldr	r3, [pc, #156]	; (8009020 <main+0x86c>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3301      	adds	r3, #1
 8008f86:	4a26      	ldr	r2, [pc, #152]	; (8009020 <main+0x86c>)
 8008f88:	6013      	str	r3, [r2, #0]
		}

		// --- calling print task
		static uint32_t last_ui_task_cnt = 0;
		uint32_t t_since_last_ui_task = TIM5->CNT - last_ui_task_cnt; //TIM5 100kHz = 10mus
 8008f8a:	4b26      	ldr	r3, [pc, #152]	; (8009024 <main+0x870>)
 8008f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008f8e:	4b26      	ldr	r3, [pc, #152]	; (8009028 <main+0x874>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	1ad3      	subs	r3, r2, r3
 8008f94:	62bb      	str	r3, [r7, #40]	; 0x28
		if (t_since_last_ui_task > 2000000000){
 8008f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f98:	4a24      	ldr	r2, [pc, #144]	; (800902c <main+0x878>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d902      	bls.n	8008fa4 <main+0x7f0>
			t_since_last_ui_task -= 0xFFFFFFFF; // TODO needs to be checked
 8008f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa0:	3301      	adds	r3, #1
 8008fa2:	62bb      	str	r3, [r7, #40]	; 0x28
		}
		if(t_since_last_ui_task > 20000){ //5Hz
 8008fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa6:	f644 6220 	movw	r2, #20000	; 0x4e20
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d9c7      	bls.n	8008f3e <main+0x78a>
			last_ui_task_cnt = TIM5->CNT;
 8008fae:	4b1d      	ldr	r3, [pc, #116]	; (8009024 <main+0x870>)
 8008fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb2:	e03d      	b.n	8009030 <main+0x87c>
 8008fb4:	20000cc8 	.word	0x20000cc8
 8008fb8:	2000003c 	.word	0x2000003c
 8008fbc:	200005dc 	.word	0x200005dc
 8008fc0:	20000040 	.word	0x20000040
 8008fc4:	20000d10 	.word	0x20000d10
 8008fc8:	20000044 	.word	0x20000044
 8008fcc:	43000000 	.word	0x43000000
 8008fd0:	0800eda4 	.word	0x0800eda4
 8008fd4:	20001898 	.word	0x20001898
 8008fd8:	2000059c 	.word	0x2000059c
 8008fdc:	20000b40 	.word	0x20000b40
 8008fe0:	20000be8 	.word	0x20000be8
 8008fe4:	3c872b02 	.word	0x3c872b02
 8008fe8:	20000154 	.word	0x20000154
 8008fec:	44fdc000 	.word	0x44fdc000
 8008ff0:	4500c000 	.word	0x4500c000
 8008ff4:	44f8c000 	.word	0x44f8c000
 8008ff8:	44fc8000 	.word	0x44fc8000
 8008ffc:	40021000 	.word	0x40021000
 8009000:	20002540 	.word	0x20002540
 8009004:	0800edbc 	.word	0x0800edbc
 8009008:	200000e2 	.word	0x200000e2
 800900c:	200000e4 	.word	0x200000e4
 8009010:	3c23d70a 	.word	0x3c23d70a
 8009014:	20000144 	.word	0x20000144
 8009018:	20000150 	.word	0x20000150
 800901c:	20000148 	.word	0x20000148
 8009020:	2000014c 	.word	0x2000014c
 8009024:	40000c00 	.word	0x40000c00
 8009028:	20000158 	.word	0x20000158
 800902c:	77359400 	.word	0x77359400
 8009030:	4a09      	ldr	r2, [pc, #36]	; (8009058 <main+0x8a4>)
 8009032:	6013      	str	r3, [r2, #0]
			uint32_t time10mus = TIM5->CNT;
 8009034:	4b09      	ldr	r3, [pc, #36]	; (800905c <main+0x8a8>)
 8009036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009038:	623b      	str	r3, [r7, #32]

			keyboard_intake();
 800903a:	f002 fc27 	bl	800b88c <keyboard_intake>

			if (print2uart){
 800903e:	4b08      	ldr	r3, [pc, #32]	; (8009060 <main+0x8ac>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d001      	beq.n	800904a <main+0x896>
				print_task();
 8009046:	f003 f981 	bl	800c34c <print_task>
			}
			prep_counter = 0;
 800904a:	4b06      	ldr	r3, [pc, #24]	; (8009064 <main+0x8b0>)
 800904c:	2200      	movs	r2, #0
 800904e:	601a      	str	r2, [r3, #0]
			ch='.';
 8009050:	4b05      	ldr	r3, [pc, #20]	; (8009068 <main+0x8b4>)
 8009052:	222e      	movs	r2, #46	; 0x2e
 8009054:	701a      	strb	r2, [r3, #0]
	{
 8009056:	e772      	b.n	8008f3e <main+0x78a>
 8009058:	20000158 	.word	0x20000158
 800905c:	40000c00 	.word	0x40000c00
 8009060:	20000019 	.word	0x20000019
 8009064:	20000150 	.word	0x20000150
 8009068:	20000048 	.word	0x20000048

0800906c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b098      	sub	sp, #96	; 0x60
 8009070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009072:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009076:	2230      	movs	r2, #48	; 0x30
 8009078:	2100      	movs	r1, #0
 800907a:	4618      	mov	r0, r3
 800907c:	f004 f88c 	bl	800d198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009080:	f107 031c 	add.w	r3, r7, #28
 8009084:	2200      	movs	r2, #0
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	605a      	str	r2, [r3, #4]
 800908a:	609a      	str	r2, [r3, #8]
 800908c:	60da      	str	r2, [r3, #12]
 800908e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009090:	f107 030c 	add.w	r3, r7, #12
 8009094:	2200      	movs	r2, #0
 8009096:	601a      	str	r2, [r3, #0]
 8009098:	605a      	str	r2, [r3, #4]
 800909a:	609a      	str	r2, [r3, #8]
 800909c:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800909e:	2300      	movs	r3, #0
 80090a0:	60bb      	str	r3, [r7, #8]
 80090a2:	4b32      	ldr	r3, [pc, #200]	; (800916c <SystemClock_Config+0x100>)
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	4a31      	ldr	r2, [pc, #196]	; (800916c <SystemClock_Config+0x100>)
 80090a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80090ac:	6413      	str	r3, [r2, #64]	; 0x40
 80090ae:	4b2f      	ldr	r3, [pc, #188]	; (800916c <SystemClock_Config+0x100>)
 80090b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80090b6:	60bb      	str	r3, [r7, #8]
 80090b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80090ba:	2300      	movs	r3, #0
 80090bc:	607b      	str	r3, [r7, #4]
 80090be:	4b2c      	ldr	r3, [pc, #176]	; (8009170 <SystemClock_Config+0x104>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	4a2b      	ldr	r2, [pc, #172]	; (8009170 <SystemClock_Config+0x104>)
 80090c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80090c8:	6013      	str	r3, [r2, #0]
 80090ca:	4b29      	ldr	r3, [pc, #164]	; (8009170 <SystemClock_Config+0x104>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090d2:	607b      	str	r3, [r7, #4]
 80090d4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80090d6:	2309      	movs	r3, #9
 80090d8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80090da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80090de:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80090e0:	2301      	movs	r3, #1
 80090e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80090e4:	2302      	movs	r3, #2
 80090e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80090e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80090ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80090ee:	2304      	movs	r3, #4
 80090f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80090f2:	23a8      	movs	r3, #168	; 0xa8
 80090f4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80090f6:	2302      	movs	r3, #2
 80090f8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80090fa:	2307      	movs	r3, #7
 80090fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80090fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009102:	4618      	mov	r0, r3
 8009104:	f7fb fbc6 	bl	8004894 <HAL_RCC_OscConfig>
 8009108:	4603      	mov	r3, r0
 800910a:	2b00      	cmp	r3, #0
 800910c:	d001      	beq.n	8009112 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800910e:	f003 f94b 	bl	800c3a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009112:	230f      	movs	r3, #15
 8009114:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009116:	2302      	movs	r3, #2
 8009118:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800911a:	2300      	movs	r3, #0
 800911c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800911e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8009122:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8009124:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009128:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800912a:	f107 031c 	add.w	r3, r7, #28
 800912e:	2105      	movs	r1, #5
 8009130:	4618      	mov	r0, r3
 8009132:	f7fb fe1f 	bl	8004d74 <HAL_RCC_ClockConfig>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d001      	beq.n	8009140 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800913c:	f003 f934 	bl	800c3a8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8009140:	2302      	movs	r3, #2
 8009142:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8009144:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009148:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800914a:	f107 030c 	add.w	r3, r7, #12
 800914e:	4618      	mov	r0, r3
 8009150:	f7fc f80e 	bl	8005170 <HAL_RCCEx_PeriphCLKConfig>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800915a:	f003 f925 	bl	800c3a8 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 800915e:	f7fb feef 	bl	8004f40 <HAL_RCC_EnableCSS>
}
 8009162:	bf00      	nop
 8009164:	3760      	adds	r7, #96	; 0x60
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	40023800 	.word	0x40023800
 8009170:	40007000 	.word	0x40007000

08009174 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b090      	sub	sp, #64	; 0x40
 8009178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800917a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800917e:	2200      	movs	r2, #0
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	605a      	str	r2, [r3, #4]
 8009184:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8009186:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800918a:	2200      	movs	r2, #0
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	605a      	str	r2, [r3, #4]
 8009190:	609a      	str	r2, [r3, #8]
 8009192:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009194:	1d3b      	adds	r3, r7, #4
 8009196:	2220      	movs	r2, #32
 8009198:	2100      	movs	r1, #0
 800919a:	4618      	mov	r0, r3
 800919c:	f003 fffc 	bl	800d198 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80091a0:	4b86      	ldr	r3, [pc, #536]	; (80093bc <MX_ADC1_Init+0x248>)
 80091a2:	4a87      	ldr	r2, [pc, #540]	; (80093c0 <MX_ADC1_Init+0x24c>)
 80091a4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80091a6:	4b85      	ldr	r3, [pc, #532]	; (80093bc <MX_ADC1_Init+0x248>)
 80091a8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80091ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80091ae:	4b83      	ldr	r3, [pc, #524]	; (80093bc <MX_ADC1_Init+0x248>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80091b4:	4b81      	ldr	r3, [pc, #516]	; (80093bc <MX_ADC1_Init+0x248>)
 80091b6:	2201      	movs	r2, #1
 80091b8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80091ba:	4b80      	ldr	r3, [pc, #512]	; (80093bc <MX_ADC1_Init+0x248>)
 80091bc:	2201      	movs	r2, #1
 80091be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80091c0:	4b7e      	ldr	r3, [pc, #504]	; (80093bc <MX_ADC1_Init+0x248>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80091c8:	4b7c      	ldr	r3, [pc, #496]	; (80093bc <MX_ADC1_Init+0x248>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80091ce:	4b7b      	ldr	r3, [pc, #492]	; (80093bc <MX_ADC1_Init+0x248>)
 80091d0:	4a7c      	ldr	r2, [pc, #496]	; (80093c4 <MX_ADC1_Init+0x250>)
 80091d2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80091d4:	4b79      	ldr	r3, [pc, #484]	; (80093bc <MX_ADC1_Init+0x248>)
 80091d6:	2200      	movs	r2, #0
 80091d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80091da:	4b78      	ldr	r3, [pc, #480]	; (80093bc <MX_ADC1_Init+0x248>)
 80091dc:	2208      	movs	r2, #8
 80091de:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80091e0:	4b76      	ldr	r3, [pc, #472]	; (80093bc <MX_ADC1_Init+0x248>)
 80091e2:	2201      	movs	r2, #1
 80091e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80091e8:	4b74      	ldr	r3, [pc, #464]	; (80093bc <MX_ADC1_Init+0x248>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80091ee:	4873      	ldr	r0, [pc, #460]	; (80093bc <MX_ADC1_Init+0x248>)
 80091f0:	f7f7 ff3e 	bl	8001070 <HAL_ADC_Init>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80091fa:	f003 f8d5 	bl	800c3a8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_TRIPLEMODE_INJECSIMULT;
 80091fe:	2315      	movs	r3, #21
 8009200:	637b      	str	r3, [r7, #52]	; 0x34
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8009202:	2300      	movs	r3, #0
 8009204:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8009206:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800920a:	4619      	mov	r1, r3
 800920c:	486b      	ldr	r0, [pc, #428]	; (80093bc <MX_ADC1_Init+0x248>)
 800920e:	f7f8 ff01 	bl	8002014 <HAL_ADCEx_MultiModeConfigChannel>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8009218:	f003 f8c6 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 800921c:	230b      	movs	r3, #11
 800921e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 1;
 8009220:	2301      	movs	r3, #1
 8009222:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009224:	2300      	movs	r3, #0
 8009226:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009228:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800922c:	4619      	mov	r1, r3
 800922e:	4863      	ldr	r0, [pc, #396]	; (80093bc <MX_ADC1_Init+0x248>)
 8009230:	f7f8 f9bc 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 800923a:	f003 f8b5 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800923e:	2305      	movs	r3, #5
 8009240:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 2;
 8009242:	2302      	movs	r3, #2
 8009244:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800924a:	4619      	mov	r1, r3
 800924c:	485b      	ldr	r0, [pc, #364]	; (80093bc <MX_ADC1_Init+0x248>)
 800924e:	f7f8 f9ad 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d001      	beq.n	800925c <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8009258:	f003 f8a6 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800925c:	230e      	movs	r3, #14
 800925e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 3;
 8009260:	2303      	movs	r3, #3
 8009262:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009264:	2301      	movs	r3, #1
 8009266:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800926c:	4619      	mov	r1, r3
 800926e:	4853      	ldr	r0, [pc, #332]	; (80093bc <MX_ADC1_Init+0x248>)
 8009270:	f7f8 f99c 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009274:	4603      	mov	r3, r0
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <MX_ADC1_Init+0x10a>
  {
    Error_Handler();
 800927a:	f003 f895 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800927e:	2301      	movs	r3, #1
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 4;
 8009282:	2304      	movs	r3, #4
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009286:	2300      	movs	r3, #0
 8009288:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800928a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800928e:	4619      	mov	r1, r3
 8009290:	484a      	ldr	r0, [pc, #296]	; (80093bc <MX_ADC1_Init+0x248>)
 8009292:	f7f8 f98b 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009296:	4603      	mov	r3, r0
 8009298:	2b00      	cmp	r3, #0
 800929a:	d001      	beq.n	80092a0 <MX_ADC1_Init+0x12c>
  {
    Error_Handler();
 800929c:	f003 f884 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80092a0:	2310      	movs	r3, #16
 80092a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 5;
 80092a4:	2305      	movs	r3, #5
 80092a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80092a8:	2301      	movs	r3, #1
 80092aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80092ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092b0:	4619      	mov	r1, r3
 80092b2:	4842      	ldr	r0, [pc, #264]	; (80093bc <MX_ADC1_Init+0x248>)
 80092b4:	f7f8 f97a 	bl	80015ac <HAL_ADC_ConfigChannel>
 80092b8:	4603      	mov	r3, r0
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d001      	beq.n	80092c2 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 80092be:	f003 f873 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80092c2:	2311      	movs	r3, #17
 80092c4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 6;
 80092c6:	2306      	movs	r3, #6
 80092c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80092ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ce:	4619      	mov	r1, r3
 80092d0:	483a      	ldr	r0, [pc, #232]	; (80093bc <MX_ADC1_Init+0x248>)
 80092d2:	f7f8 f96b 	bl	80015ac <HAL_ADC_ConfigChannel>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d001      	beq.n	80092e0 <MX_ADC1_Init+0x16c>
  {
    Error_Handler();
 80092dc:	f003 f864 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_VBAT;
 80092e0:	2312      	movs	r3, #18
 80092e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 7;
 80092e4:	2307      	movs	r3, #7
 80092e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80092e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092ec:	4619      	mov	r1, r3
 80092ee:	4833      	ldr	r0, [pc, #204]	; (80093bc <MX_ADC1_Init+0x248>)
 80092f0:	f7f8 f95c 	bl	80015ac <HAL_ADC_ConfigChannel>
 80092f4:	4603      	mov	r3, r0
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d001      	beq.n	80092fe <MX_ADC1_Init+0x18a>
  {
    Error_Handler();
 80092fa:	f003 f855 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80092fe:	2308      	movs	r3, #8
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.Rank = 8;
 8009302:	2308      	movs	r3, #8
 8009304:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8009306:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800930a:	4619      	mov	r1, r3
 800930c:	482b      	ldr	r0, [pc, #172]	; (80093bc <MX_ADC1_Init+0x248>)
 800930e:	f7f8 f94d 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009312:	4603      	mov	r3, r0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d001      	beq.n	800931c <MX_ADC1_Init+0x1a8>
  {
    Error_Handler();
 8009318:	f003 f846 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 800931c:	230b      	movs	r3, #11
 800931e:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 1;
 8009320:	2301      	movs	r3, #1
 8009322:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedNbrOfConversion = 4;
 8009324:	2304      	movs	r3, #4
 8009326:	617b      	str	r3, [r7, #20]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009328:	2300      	movs	r3, #0
 800932a:	60fb      	str	r3, [r7, #12]
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONVEDGE_RISINGFALLING;
 800932c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8009330:	623b      	str	r3, [r7, #32]
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8009332:	2300      	movs	r3, #0
 8009334:	61fb      	str	r3, [r7, #28]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8009336:	2300      	movs	r3, #0
 8009338:	767b      	strb	r3, [r7, #25]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800933a:	2300      	movs	r3, #0
 800933c:	763b      	strb	r3, [r7, #24]
  sConfigInjected.InjectedOffset = 0;
 800933e:	2300      	movs	r3, #0
 8009340:	613b      	str	r3, [r7, #16]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8009342:	1d3b      	adds	r3, r7, #4
 8009344:	4619      	mov	r1, r3
 8009346:	481d      	ldr	r0, [pc, #116]	; (80093bc <MX_ADC1_Init+0x248>)
 8009348:	f7f8 fcd0 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d001      	beq.n	8009356 <MX_ADC1_Init+0x1e2>
  {
    Error_Handler();
 8009352:	f003 f829 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_5;
 8009356:	2305      	movs	r3, #5
 8009358:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 2;
 800935a:	2302      	movs	r3, #2
 800935c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800935e:	1d3b      	adds	r3, r7, #4
 8009360:	4619      	mov	r1, r3
 8009362:	4816      	ldr	r0, [pc, #88]	; (80093bc <MX_ADC1_Init+0x248>)
 8009364:	f7f8 fcc2 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009368:	4603      	mov	r3, r0
 800936a:	2b00      	cmp	r3, #0
 800936c:	d001      	beq.n	8009372 <MX_ADC1_Init+0x1fe>
  {
    Error_Handler();
 800936e:	f003 f81b 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_14;
 8009372:	230e      	movs	r3, #14
 8009374:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 3;
 8009376:	2303      	movs	r3, #3
 8009378:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 800937a:	2301      	movs	r3, #1
 800937c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800937e:	1d3b      	adds	r3, r7, #4
 8009380:	4619      	mov	r1, r3
 8009382:	480e      	ldr	r0, [pc, #56]	; (80093bc <MX_ADC1_Init+0x248>)
 8009384:	f7f8 fcb2 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009388:	4603      	mov	r3, r0
 800938a:	2b00      	cmp	r3, #0
 800938c:	d001      	beq.n	8009392 <MX_ADC1_Init+0x21e>
  {
    Error_Handler();
 800938e:	f003 f80b 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8009392:	2301      	movs	r3, #1
 8009394:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedRank = 4;
 8009396:	2304      	movs	r3, #4
 8009398:	60bb      	str	r3, [r7, #8]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800939e:	1d3b      	adds	r3, r7, #4
 80093a0:	4619      	mov	r1, r3
 80093a2:	4806      	ldr	r0, [pc, #24]	; (80093bc <MX_ADC1_Init+0x248>)
 80093a4:	f7f8 fca2 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 80093a8:	4603      	mov	r3, r0
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d001      	beq.n	80093b2 <MX_ADC1_Init+0x23e>
  {
    Error_Handler();
 80093ae:	f002 fffb 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80093b2:	bf00      	nop
 80093b4:	3740      	adds	r7, #64	; 0x40
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20000cc8 	.word	0x20000cc8
 80093c0:	40012000 	.word	0x40012000
 80093c4:	0f000001 	.word	0x0f000001

080093c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b08c      	sub	sp, #48	; 0x30
 80093cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80093ce:	f107 0320 	add.w	r3, r7, #32
 80093d2:	2200      	movs	r2, #0
 80093d4:	601a      	str	r2, [r3, #0]
 80093d6:	605a      	str	r2, [r3, #4]
 80093d8:	609a      	str	r2, [r3, #8]
 80093da:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80093dc:	463b      	mov	r3, r7
 80093de:	2220      	movs	r2, #32
 80093e0:	2100      	movs	r1, #0
 80093e2:	4618      	mov	r0, r3
 80093e4:	f003 fed8 	bl	800d198 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 80093e8:	4b5a      	ldr	r3, [pc, #360]	; (8009554 <MX_ADC2_Init+0x18c>)
 80093ea:	4a5b      	ldr	r2, [pc, #364]	; (8009558 <MX_ADC2_Init+0x190>)
 80093ec:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80093ee:	4b59      	ldr	r3, [pc, #356]	; (8009554 <MX_ADC2_Init+0x18c>)
 80093f0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80093f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80093f6:	4b57      	ldr	r3, [pc, #348]	; (8009554 <MX_ADC2_Init+0x18c>)
 80093f8:	2200      	movs	r2, #0
 80093fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ENABLE;
 80093fc:	4b55      	ldr	r3, [pc, #340]	; (8009554 <MX_ADC2_Init+0x18c>)
 80093fe:	2201      	movs	r2, #1
 8009400:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8009402:	4b54      	ldr	r3, [pc, #336]	; (8009554 <MX_ADC2_Init+0x18c>)
 8009404:	2201      	movs	r2, #1
 8009406:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8009408:	4b52      	ldr	r3, [pc, #328]	; (8009554 <MX_ADC2_Init+0x18c>)
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8009410:	4b50      	ldr	r3, [pc, #320]	; (8009554 <MX_ADC2_Init+0x18c>)
 8009412:	2200      	movs	r2, #0
 8009414:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 4;
 8009416:	4b4f      	ldr	r3, [pc, #316]	; (8009554 <MX_ADC2_Init+0x18c>)
 8009418:	2204      	movs	r2, #4
 800941a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800941c:	4b4d      	ldr	r3, [pc, #308]	; (8009554 <MX_ADC2_Init+0x18c>)
 800941e:	2201      	movs	r2, #1
 8009420:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8009424:	4b4b      	ldr	r3, [pc, #300]	; (8009554 <MX_ADC2_Init+0x18c>)
 8009426:	2200      	movs	r2, #0
 8009428:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800942a:	484a      	ldr	r0, [pc, #296]	; (8009554 <MX_ADC2_Init+0x18c>)
 800942c:	f7f7 fe20 	bl	8001070 <HAL_ADC_Init>
 8009430:	4603      	mov	r3, r0
 8009432:	2b00      	cmp	r3, #0
 8009434:	d001      	beq.n	800943a <MX_ADC2_Init+0x72>
  {
    Error_Handler();
 8009436:	f002 ffb7 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800943a:	230c      	movs	r3, #12
 800943c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 800943e:	2301      	movs	r3, #1
 8009440:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009442:	2300      	movs	r3, #0
 8009444:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009446:	f107 0320 	add.w	r3, r7, #32
 800944a:	4619      	mov	r1, r3
 800944c:	4841      	ldr	r0, [pc, #260]	; (8009554 <MX_ADC2_Init+0x18c>)
 800944e:	f7f8 f8ad 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <MX_ADC2_Init+0x94>
  {
    Error_Handler();
 8009458:	f002 ffa6 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800945c:	2304      	movs	r3, #4
 800945e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 2;
 8009460:	2302      	movs	r3, #2
 8009462:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009464:	f107 0320 	add.w	r3, r7, #32
 8009468:	4619      	mov	r1, r3
 800946a:	483a      	ldr	r0, [pc, #232]	; (8009554 <MX_ADC2_Init+0x18c>)
 800946c:	f7f8 f89e 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009470:	4603      	mov	r3, r0
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <MX_ADC2_Init+0xb2>
  {
    Error_Handler();
 8009476:	f002 ff97 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800947a:	230f      	movs	r3, #15
 800947c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800947e:	2303      	movs	r3, #3
 8009480:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009482:	2301      	movs	r3, #1
 8009484:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8009486:	f107 0320 	add.w	r3, r7, #32
 800948a:	4619      	mov	r1, r3
 800948c:	4831      	ldr	r0, [pc, #196]	; (8009554 <MX_ADC2_Init+0x18c>)
 800948e:	f7f8 f88d 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009492:	4603      	mov	r3, r0
 8009494:	2b00      	cmp	r3, #0
 8009496:	d001      	beq.n	800949c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8009498:	f002 ff86 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800949c:	2302      	movs	r3, #2
 800949e:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 4;
 80094a0:	2304      	movs	r3, #4
 80094a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80094a4:	2300      	movs	r3, #0
 80094a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80094a8:	f107 0320 	add.w	r3, r7, #32
 80094ac:	4619      	mov	r1, r3
 80094ae:	4829      	ldr	r0, [pc, #164]	; (8009554 <MX_ADC2_Init+0x18c>)
 80094b0:	f7f8 f87c 	bl	80015ac <HAL_ADC_ConfigChannel>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d001      	beq.n	80094be <MX_ADC2_Init+0xf6>
  {
    Error_Handler();
 80094ba:	f002 ff75 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_12;
 80094be:	230c      	movs	r3, #12
 80094c0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 80094c2:	2301      	movs	r3, #1
 80094c4:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 80094c6:	2304      	movs	r3, #4
 80094c8:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 80094ce:	2300      	movs	r3, #0
 80094d0:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80094d2:	2300      	movs	r3, #0
 80094d4:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 80094d6:	2300      	movs	r3, #0
 80094d8:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80094da:	463b      	mov	r3, r7
 80094dc:	4619      	mov	r1, r3
 80094de:	481d      	ldr	r0, [pc, #116]	; (8009554 <MX_ADC2_Init+0x18c>)
 80094e0:	f7f8 fc04 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <MX_ADC2_Init+0x126>
  {
    Error_Handler();
 80094ea:	f002 ff5d 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_4;
 80094ee:	2304      	movs	r3, #4
 80094f0:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 2;
 80094f2:	2302      	movs	r3, #2
 80094f4:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80094f6:	463b      	mov	r3, r7
 80094f8:	4619      	mov	r1, r3
 80094fa:	4816      	ldr	r0, [pc, #88]	; (8009554 <MX_ADC2_Init+0x18c>)
 80094fc:	f7f8 fbf6 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009500:	4603      	mov	r3, r0
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <MX_ADC2_Init+0x142>
  {
    Error_Handler();
 8009506:	f002 ff4f 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_15;
 800950a:	230f      	movs	r3, #15
 800950c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800950e:	2303      	movs	r3, #3
 8009510:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009512:	2301      	movs	r3, #1
 8009514:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8009516:	463b      	mov	r3, r7
 8009518:	4619      	mov	r1, r3
 800951a:	480e      	ldr	r0, [pc, #56]	; (8009554 <MX_ADC2_Init+0x18c>)
 800951c:	f7f8 fbe6 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009520:	4603      	mov	r3, r0
 8009522:	2b00      	cmp	r3, #0
 8009524:	d001      	beq.n	800952a <MX_ADC2_Init+0x162>
  {
    Error_Handler();
 8009526:	f002 ff3f 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_2;
 800952a:	2302      	movs	r3, #2
 800952c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 4;
 800952e:	2304      	movs	r3, #4
 8009530:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 8009532:	2300      	movs	r3, #0
 8009534:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8009536:	463b      	mov	r3, r7
 8009538:	4619      	mov	r1, r3
 800953a:	4806      	ldr	r0, [pc, #24]	; (8009554 <MX_ADC2_Init+0x18c>)
 800953c:	f7f8 fbd6 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <MX_ADC2_Init+0x182>
  {
    Error_Handler();
 8009546:	f002 ff2f 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800954a:	bf00      	nop
 800954c:	3730      	adds	r7, #48	; 0x30
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop
 8009554:	200005dc 	.word	0x200005dc
 8009558:	40012100 	.word	0x40012100

0800955c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b08c      	sub	sp, #48	; 0x30
 8009560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8009562:	f107 0320 	add.w	r3, r7, #32
 8009566:	2200      	movs	r2, #0
 8009568:	601a      	str	r2, [r3, #0]
 800956a:	605a      	str	r2, [r3, #4]
 800956c:	609a      	str	r2, [r3, #8]
 800956e:	60da      	str	r2, [r3, #12]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8009570:	463b      	mov	r3, r7
 8009572:	2220      	movs	r2, #32
 8009574:	2100      	movs	r1, #0
 8009576:	4618      	mov	r0, r3
 8009578:	f003 fe0e 	bl	800d198 <memset>
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 800957c:	4b54      	ldr	r3, [pc, #336]	; (80096d0 <MX_ADC3_Init+0x174>)
 800957e:	4a55      	ldr	r2, [pc, #340]	; (80096d4 <MX_ADC3_Init+0x178>)
 8009580:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8009582:	4b53      	ldr	r3, [pc, #332]	; (80096d0 <MX_ADC3_Init+0x174>)
 8009584:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8009588:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800958a:	4b51      	ldr	r3, [pc, #324]	; (80096d0 <MX_ADC3_Init+0x174>)
 800958c:	2200      	movs	r2, #0
 800958e:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8009590:	4b4f      	ldr	r3, [pc, #316]	; (80096d0 <MX_ADC3_Init+0x174>)
 8009592:	2201      	movs	r2, #1
 8009594:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8009596:	4b4e      	ldr	r3, [pc, #312]	; (80096d0 <MX_ADC3_Init+0x174>)
 8009598:	2201      	movs	r2, #1
 800959a:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800959c:	4b4c      	ldr	r3, [pc, #304]	; (80096d0 <MX_ADC3_Init+0x174>)
 800959e:	2200      	movs	r2, #0
 80095a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80095a4:	4b4a      	ldr	r3, [pc, #296]	; (80096d0 <MX_ADC3_Init+0x174>)
 80095a6:	2200      	movs	r2, #0
 80095a8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 4;
 80095aa:	4b49      	ldr	r3, [pc, #292]	; (80096d0 <MX_ADC3_Init+0x174>)
 80095ac:	2204      	movs	r2, #4
 80095ae:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80095b0:	4b47      	ldr	r3, [pc, #284]	; (80096d0 <MX_ADC3_Init+0x174>)
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80095b8:	4b45      	ldr	r3, [pc, #276]	; (80096d0 <MX_ADC3_Init+0x174>)
 80095ba:	2200      	movs	r2, #0
 80095bc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80095be:	4844      	ldr	r0, [pc, #272]	; (80096d0 <MX_ADC3_Init+0x174>)
 80095c0:	f7f7 fd56 	bl	8001070 <HAL_ADC_Init>
 80095c4:	4603      	mov	r3, r0
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d001      	beq.n	80095ce <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 80095ca:	f002 feed 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80095ce:	230d      	movs	r3, #13
 80095d0:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 1;
 80095d2:	2301      	movs	r3, #1
 80095d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80095d6:	2301      	movs	r3, #1
 80095d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80095da:	f107 0320 	add.w	r3, r7, #32
 80095de:	4619      	mov	r1, r3
 80095e0:	483b      	ldr	r0, [pc, #236]	; (80096d0 <MX_ADC3_Init+0x174>)
 80095e2:	f7f7 ffe3 	bl	80015ac <HAL_ADC_ConfigChannel>
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <MX_ADC3_Init+0x94>
  {
    Error_Handler();
 80095ec:	f002 fedc 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 2;
 80095f0:	2302      	movs	r3, #2
 80095f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80095f4:	f107 0320 	add.w	r3, r7, #32
 80095f8:	4619      	mov	r1, r3
 80095fa:	4835      	ldr	r0, [pc, #212]	; (80096d0 <MX_ADC3_Init+0x174>)
 80095fc:	f7f7 ffd6 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d001      	beq.n	800960a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8009606:	f002 fecf 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800960a:	2303      	movs	r3, #3
 800960c:	623b      	str	r3, [r7, #32]
  sConfig.Rank = 3;
 800960e:	2303      	movs	r3, #3
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8009612:	f107 0320 	add.w	r3, r7, #32
 8009616:	4619      	mov	r1, r3
 8009618:	482d      	ldr	r0, [pc, #180]	; (80096d0 <MX_ADC3_Init+0x174>)
 800961a:	f7f7 ffc7 	bl	80015ac <HAL_ADC_ConfigChannel>
 800961e:	4603      	mov	r3, r0
 8009620:	2b00      	cmp	r3, #0
 8009622:	d001      	beq.n	8009628 <MX_ADC3_Init+0xcc>
  {
    Error_Handler();
 8009624:	f002 fec0 	bl	800c3a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Rank = 4;
 8009628:	2304      	movs	r3, #4
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800962c:	f107 0320 	add.w	r3, r7, #32
 8009630:	4619      	mov	r1, r3
 8009632:	4827      	ldr	r0, [pc, #156]	; (80096d0 <MX_ADC3_Init+0x174>)
 8009634:	f7f7 ffba 	bl	80015ac <HAL_ADC_ConfigChannel>
 8009638:	4603      	mov	r3, r0
 800963a:	2b00      	cmp	r3, #0
 800963c:	d001      	beq.n	8009642 <MX_ADC3_Init+0xe6>
  {
    Error_Handler();
 800963e:	f002 feb3 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_13;
 8009642:	230d      	movs	r3, #13
 8009644:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 1;
 8009646:	2301      	movs	r3, #1
 8009648:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedNbrOfConversion = 4;
 800964a:	2304      	movs	r3, #4
 800964c:	613b      	str	r3, [r7, #16]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8009652:	2300      	movs	r3, #0
 8009654:	757b      	strb	r3, [r7, #21]
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8009656:	2300      	movs	r3, #0
 8009658:	753b      	strb	r3, [r7, #20]
  sConfigInjected.InjectedOffset = 0;
 800965a:	2300      	movs	r3, #0
 800965c:	60fb      	str	r3, [r7, #12]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 800965e:	463b      	mov	r3, r7
 8009660:	4619      	mov	r1, r3
 8009662:	481b      	ldr	r0, [pc, #108]	; (80096d0 <MX_ADC3_Init+0x174>)
 8009664:	f7f8 fb42 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009668:	4603      	mov	r3, r0
 800966a:	2b00      	cmp	r3, #0
 800966c:	d001      	beq.n	8009672 <MX_ADC3_Init+0x116>
  {
    Error_Handler();
 800966e:	f002 fe9b 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedRank = 2;
 8009672:	2302      	movs	r3, #2
 8009674:	607b      	str	r3, [r7, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009676:	463b      	mov	r3, r7
 8009678:	4619      	mov	r1, r3
 800967a:	4815      	ldr	r0, [pc, #84]	; (80096d0 <MX_ADC3_Init+0x174>)
 800967c:	f7f8 fb36 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 8009680:	4603      	mov	r3, r0
 8009682:	2b00      	cmp	r3, #0
 8009684:	d001      	beq.n	800968a <MX_ADC3_Init+0x12e>
  {
    Error_Handler();
 8009686:	f002 fe8f 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800968a:	2303      	movs	r3, #3
 800968c:	603b      	str	r3, [r7, #0]
  sConfigInjected.InjectedRank = 3;
 800968e:	2303      	movs	r3, #3
 8009690:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8009692:	2301      	movs	r3, #1
 8009694:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 8009696:	463b      	mov	r3, r7
 8009698:	4619      	mov	r1, r3
 800969a:	480d      	ldr	r0, [pc, #52]	; (80096d0 <MX_ADC3_Init+0x174>)
 800969c:	f7f8 fb26 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 80096a0:	4603      	mov	r3, r0
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d001      	beq.n	80096aa <MX_ADC3_Init+0x14e>
  {
    Error_Handler();
 80096a6:	f002 fe7f 	bl	800c3a8 <Error_Handler>
  }
  /** Configures for the selected ADC injected channel its corresponding rank in the sequencer and its sample time 
  */
  sConfigInjected.InjectedRank = 4;
 80096aa:	2304      	movs	r3, #4
 80096ac:	607b      	str	r3, [r7, #4]
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_3CYCLES;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc3, &sConfigInjected) != HAL_OK)
 80096b2:	463b      	mov	r3, r7
 80096b4:	4619      	mov	r1, r3
 80096b6:	4806      	ldr	r0, [pc, #24]	; (80096d0 <MX_ADC3_Init+0x174>)
 80096b8:	f7f8 fb18 	bl	8001cec <HAL_ADCEx_InjectedConfigChannel>
 80096bc:	4603      	mov	r3, r0
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d001      	beq.n	80096c6 <MX_ADC3_Init+0x16a>
  {
    Error_Handler();
 80096c2:	f002 fe71 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80096c6:	bf00      	nop
 80096c8:	3730      	adds	r7, #48	; 0x30
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
 80096ce:	bf00      	nop
 80096d0:	20000d10 	.word	0x20000d10
 80096d4:	40012200 	.word	0x40012200

080096d8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80096dc:	4b17      	ldr	r3, [pc, #92]	; (800973c <MX_CAN1_Init+0x64>)
 80096de:	4a18      	ldr	r2, [pc, #96]	; (8009740 <MX_CAN1_Init+0x68>)
 80096e0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 80096e2:	4b16      	ldr	r3, [pc, #88]	; (800973c <MX_CAN1_Init+0x64>)
 80096e4:	2203      	movs	r2, #3
 80096e6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80096e8:	4b14      	ldr	r3, [pc, #80]	; (800973c <MX_CAN1_Init+0x64>)
 80096ea:	2200      	movs	r2, #0
 80096ec:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80096ee:	4b13      	ldr	r3, [pc, #76]	; (800973c <MX_CAN1_Init+0x64>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 80096f4:	4b11      	ldr	r3, [pc, #68]	; (800973c <MX_CAN1_Init+0x64>)
 80096f6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80096fa:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80096fc:	4b0f      	ldr	r3, [pc, #60]	; (800973c <MX_CAN1_Init+0x64>)
 80096fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8009702:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8009704:	4b0d      	ldr	r3, [pc, #52]	; (800973c <MX_CAN1_Init+0x64>)
 8009706:	2200      	movs	r2, #0
 8009708:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800970a:	4b0c      	ldr	r3, [pc, #48]	; (800973c <MX_CAN1_Init+0x64>)
 800970c:	2200      	movs	r2, #0
 800970e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <MX_CAN1_Init+0x64>)
 8009712:	2200      	movs	r2, #0
 8009714:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8009716:	4b09      	ldr	r3, [pc, #36]	; (800973c <MX_CAN1_Init+0x64>)
 8009718:	2200      	movs	r2, #0
 800971a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800971c:	4b07      	ldr	r3, [pc, #28]	; (800973c <MX_CAN1_Init+0x64>)
 800971e:	2200      	movs	r2, #0
 8009720:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8009722:	4b06      	ldr	r3, [pc, #24]	; (800973c <MX_CAN1_Init+0x64>)
 8009724:	2200      	movs	r2, #0
 8009726:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8009728:	4804      	ldr	r0, [pc, #16]	; (800973c <MX_CAN1_Init+0x64>)
 800972a:	f7f8 fcb9 	bl	80020a0 <HAL_CAN_Init>
 800972e:	4603      	mov	r3, r0
 8009730:	2b00      	cmp	r3, #0
 8009732:	d001      	beq.n	8009738 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8009734:	f002 fe38 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8009738:	bf00      	nop
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20001afc 	.word	0x20001afc
 8009740:	40006400 	.word	0x40006400

08009744 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8009748:	4b12      	ldr	r3, [pc, #72]	; (8009794 <MX_I2C1_Init+0x50>)
 800974a:	4a13      	ldr	r2, [pc, #76]	; (8009798 <MX_I2C1_Init+0x54>)
 800974c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800974e:	4b11      	ldr	r3, [pc, #68]	; (8009794 <MX_I2C1_Init+0x50>)
 8009750:	4a12      	ldr	r2, [pc, #72]	; (800979c <MX_I2C1_Init+0x58>)
 8009752:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8009754:	4b0f      	ldr	r3, [pc, #60]	; (8009794 <MX_I2C1_Init+0x50>)
 8009756:	2200      	movs	r2, #0
 8009758:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800975a:	4b0e      	ldr	r3, [pc, #56]	; (8009794 <MX_I2C1_Init+0x50>)
 800975c:	2200      	movs	r2, #0
 800975e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009760:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <MX_I2C1_Init+0x50>)
 8009762:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009766:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009768:	4b0a      	ldr	r3, [pc, #40]	; (8009794 <MX_I2C1_Init+0x50>)
 800976a:	2200      	movs	r2, #0
 800976c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800976e:	4b09      	ldr	r3, [pc, #36]	; (8009794 <MX_I2C1_Init+0x50>)
 8009770:	2200      	movs	r2, #0
 8009772:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009774:	4b07      	ldr	r3, [pc, #28]	; (8009794 <MX_I2C1_Init+0x50>)
 8009776:	2200      	movs	r2, #0
 8009778:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800977a:	4b06      	ldr	r3, [pc, #24]	; (8009794 <MX_I2C1_Init+0x50>)
 800977c:	2200      	movs	r2, #0
 800977e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8009780:	4804      	ldr	r0, [pc, #16]	; (8009794 <MX_I2C1_Init+0x50>)
 8009782:	f7f9 ffe3 	bl	800374c <HAL_I2C_Init>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800978c:	f002 fe0c 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8009790:	bf00      	nop
 8009792:	bd80      	pop	{r7, pc}
 8009794:	20000624 	.word	0x20000624
 8009798:	40005400 	.word	0x40005400
 800979c:	000186a0 	.word	0x000186a0

080097a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80097a4:	4b12      	ldr	r3, [pc, #72]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097a6:	4a13      	ldr	r2, [pc, #76]	; (80097f4 <MX_I2C2_Init+0x54>)
 80097a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80097aa:	4b11      	ldr	r3, [pc, #68]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097ac:	4a12      	ldr	r2, [pc, #72]	; (80097f8 <MX_I2C2_Init+0x58>)
 80097ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80097b0:	4b0f      	ldr	r3, [pc, #60]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80097b6:	4b0e      	ldr	r3, [pc, #56]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097b8:	2200      	movs	r2, #0
 80097ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80097bc:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80097c2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80097c4:	4b0a      	ldr	r3, [pc, #40]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097c6:	2200      	movs	r2, #0
 80097c8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80097ca:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097cc:	2200      	movs	r2, #0
 80097ce:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80097d0:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097d2:	2200      	movs	r2, #0
 80097d4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80097d6:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097d8:	2200      	movs	r2, #0
 80097da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80097dc:	4804      	ldr	r0, [pc, #16]	; (80097f0 <MX_I2C2_Init+0x50>)
 80097de:	f7f9 ffb5 	bl	800374c <HAL_I2C_Init>
 80097e2:	4603      	mov	r3, r0
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d001      	beq.n	80097ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80097e8:	f002 fdde 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80097ec:	bf00      	nop
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	20000a80 	.word	0x20000a80
 80097f4:	40005800 	.word	0x40005800
 80097f8:	000186a0 	.word	0x000186a0

080097fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8009800:	4b0f      	ldr	r3, [pc, #60]	; (8009840 <MX_RTC_Init+0x44>)
 8009802:	4a10      	ldr	r2, [pc, #64]	; (8009844 <MX_RTC_Init+0x48>)
 8009804:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8009806:	4b0e      	ldr	r3, [pc, #56]	; (8009840 <MX_RTC_Init+0x44>)
 8009808:	2200      	movs	r2, #0
 800980a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800980c:	4b0c      	ldr	r3, [pc, #48]	; (8009840 <MX_RTC_Init+0x44>)
 800980e:	227f      	movs	r2, #127	; 0x7f
 8009810:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8009812:	4b0b      	ldr	r3, [pc, #44]	; (8009840 <MX_RTC_Init+0x44>)
 8009814:	22ff      	movs	r2, #255	; 0xff
 8009816:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8009818:	4b09      	ldr	r3, [pc, #36]	; (8009840 <MX_RTC_Init+0x44>)
 800981a:	2200      	movs	r2, #0
 800981c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800981e:	4b08      	ldr	r3, [pc, #32]	; (8009840 <MX_RTC_Init+0x44>)
 8009820:	2200      	movs	r2, #0
 8009822:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8009824:	4b06      	ldr	r3, [pc, #24]	; (8009840 <MX_RTC_Init+0x44>)
 8009826:	2200      	movs	r2, #0
 8009828:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800982a:	4805      	ldr	r0, [pc, #20]	; (8009840 <MX_RTC_Init+0x44>)
 800982c:	f7fb fd82 	bl	8005334 <HAL_RTC_Init>
 8009830:	4603      	mov	r3, r0
 8009832:	2b00      	cmp	r3, #0
 8009834:	d001      	beq.n	800983a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8009836:	f002 fdb7 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800983a:	bf00      	nop
 800983c:	bd80      	pop	{r7, pc}
 800983e:	bf00      	nop
 8009840:	20000db8 	.word	0x20000db8
 8009844:	40002800 	.word	0x40002800

08009848 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800984c:	4b18      	ldr	r3, [pc, #96]	; (80098b0 <MX_SPI2_Init+0x68>)
 800984e:	4a19      	ldr	r2, [pc, #100]	; (80098b4 <MX_SPI2_Init+0x6c>)
 8009850:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8009852:	4b17      	ldr	r3, [pc, #92]	; (80098b0 <MX_SPI2_Init+0x68>)
 8009854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009858:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800985a:	4b15      	ldr	r3, [pc, #84]	; (80098b0 <MX_SPI2_Init+0x68>)
 800985c:	2200      	movs	r2, #0
 800985e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8009860:	4b13      	ldr	r3, [pc, #76]	; (80098b0 <MX_SPI2_Init+0x68>)
 8009862:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009866:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8009868:	4b11      	ldr	r3, [pc, #68]	; (80098b0 <MX_SPI2_Init+0x68>)
 800986a:	2200      	movs	r2, #0
 800986c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800986e:	4b10      	ldr	r3, [pc, #64]	; (80098b0 <MX_SPI2_Init+0x68>)
 8009870:	2201      	movs	r2, #1
 8009872:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8009874:	4b0e      	ldr	r3, [pc, #56]	; (80098b0 <MX_SPI2_Init+0x68>)
 8009876:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800987a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800987c:	4b0c      	ldr	r3, [pc, #48]	; (80098b0 <MX_SPI2_Init+0x68>)
 800987e:	2220      	movs	r2, #32
 8009880:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009882:	4b0b      	ldr	r3, [pc, #44]	; (80098b0 <MX_SPI2_Init+0x68>)
 8009884:	2200      	movs	r2, #0
 8009886:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8009888:	4b09      	ldr	r3, [pc, #36]	; (80098b0 <MX_SPI2_Init+0x68>)
 800988a:	2200      	movs	r2, #0
 800988c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800988e:	4b08      	ldr	r3, [pc, #32]	; (80098b0 <MX_SPI2_Init+0x68>)
 8009890:	2200      	movs	r2, #0
 8009892:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8009894:	4b06      	ldr	r3, [pc, #24]	; (80098b0 <MX_SPI2_Init+0x68>)
 8009896:	220a      	movs	r2, #10
 8009898:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800989a:	4805      	ldr	r0, [pc, #20]	; (80098b0 <MX_SPI2_Init+0x68>)
 800989c:	f7fb fe2f 	bl	80054fe <HAL_SPI_Init>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 80098a6:	f002 fd7f 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80098aa:	bf00      	nop
 80098ac:	bd80      	pop	{r7, pc}
 80098ae:	bf00      	nop
 80098b0:	200001bc 	.word	0x200001bc
 80098b4:	40003800 	.word	0x40003800

080098b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b096      	sub	sp, #88	; 0x58
 80098bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80098be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80098c2:	2200      	movs	r2, #0
 80098c4:	601a      	str	r2, [r3, #0]
 80098c6:	605a      	str	r2, [r3, #4]
 80098c8:	609a      	str	r2, [r3, #8]
 80098ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80098cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80098d0:	2200      	movs	r2, #0
 80098d2:	601a      	str	r2, [r3, #0]
 80098d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80098d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098da:	2200      	movs	r2, #0
 80098dc:	601a      	str	r2, [r3, #0]
 80098de:	605a      	str	r2, [r3, #4]
 80098e0:	609a      	str	r2, [r3, #8]
 80098e2:	60da      	str	r2, [r3, #12]
 80098e4:	611a      	str	r2, [r3, #16]
 80098e6:	615a      	str	r2, [r3, #20]
 80098e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80098ea:	1d3b      	adds	r3, r7, #4
 80098ec:	2220      	movs	r2, #32
 80098ee:	2100      	movs	r1, #0
 80098f0:	4618      	mov	r0, r3
 80098f2:	f003 fc51 	bl	800d198 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80098f6:	4b57      	ldr	r3, [pc, #348]	; (8009a54 <MX_TIM1_Init+0x19c>)
 80098f8:	4a57      	ldr	r2, [pc, #348]	; (8009a58 <MX_TIM1_Init+0x1a0>)
 80098fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80098fc:	4b55      	ldr	r3, [pc, #340]	; (8009a54 <MX_TIM1_Init+0x19c>)
 80098fe:	2200      	movs	r2, #0
 8009900:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009902:	4b54      	ldr	r3, [pc, #336]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009904:	2200      	movs	r2, #0
 8009906:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8009908:	4b52      	ldr	r3, [pc, #328]	; (8009a54 <MX_TIM1_Init+0x19c>)
 800990a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800990e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009910:	4b50      	ldr	r3, [pc, #320]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009912:	2200      	movs	r2, #0
 8009914:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8009916:	4b4f      	ldr	r3, [pc, #316]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009918:	2200      	movs	r2, #0
 800991a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800991c:	4b4d      	ldr	r3, [pc, #308]	; (8009a54 <MX_TIM1_Init+0x19c>)
 800991e:	2200      	movs	r2, #0
 8009920:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8009922:	484c      	ldr	r0, [pc, #304]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009924:	f7fc fc5e 	bl	80061e4 <HAL_TIM_Base_Init>
 8009928:	4603      	mov	r3, r0
 800992a:	2b00      	cmp	r3, #0
 800992c:	d001      	beq.n	8009932 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800992e:	f002 fd3b 	bl	800c3a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009936:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8009938:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800993c:	4619      	mov	r1, r3
 800993e:	4845      	ldr	r0, [pc, #276]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009940:	f7fd f906 	bl	8006b50 <HAL_TIM_ConfigClockSource>
 8009944:	4603      	mov	r3, r0
 8009946:	2b00      	cmp	r3, #0
 8009948:	d001      	beq.n	800994e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800994a:	f002 fd2d 	bl	800c3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800994e:	4841      	ldr	r0, [pc, #260]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009950:	f7fc fd0a 	bl	8006368 <HAL_TIM_PWM_Init>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d001      	beq.n	800995e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800995a:	f002 fd25 	bl	800c3a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800995e:	483d      	ldr	r0, [pc, #244]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009960:	f7fc fc8f 	bl	8006282 <HAL_TIM_OC_Init>
 8009964:	4603      	mov	r3, r0
 8009966:	2b00      	cmp	r3, #0
 8009968:	d001      	beq.n	800996e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800996a:	f002 fd1d 	bl	800c3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800996e:	2300      	movs	r3, #0
 8009970:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009972:	2300      	movs	r3, #0
 8009974:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8009976:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800997a:	4619      	mov	r1, r3
 800997c:	4835      	ldr	r0, [pc, #212]	; (8009a54 <MX_TIM1_Init+0x19c>)
 800997e:	f7fd fcf7 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8009982:	4603      	mov	r3, r0
 8009984:	2b00      	cmp	r3, #0
 8009986:	d001      	beq.n	800998c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8009988:	f002 fd0e 	bl	800c3a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800998c:	2360      	movs	r3, #96	; 0x60
 800998e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8009990:	2300      	movs	r3, #0
 8009992:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009994:	2300      	movs	r3, #0
 8009996:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8009998:	2300      	movs	r3, #0
 800999a:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800999c:	2300      	movs	r3, #0
 800999e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80099a0:	2300      	movs	r3, #0
 80099a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80099a4:	2300      	movs	r3, #0
 80099a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80099a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099ac:	2200      	movs	r2, #0
 80099ae:	4619      	mov	r1, r3
 80099b0:	4828      	ldr	r0, [pc, #160]	; (8009a54 <MX_TIM1_Init+0x19c>)
 80099b2:	f7fd f807 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d001      	beq.n	80099c0 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80099bc:	f002 fcf4 	bl	800c3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80099c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099c4:	2204      	movs	r2, #4
 80099c6:	4619      	mov	r1, r3
 80099c8:	4822      	ldr	r0, [pc, #136]	; (8009a54 <MX_TIM1_Init+0x19c>)
 80099ca:	f7fc fffb 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 80099ce:	4603      	mov	r3, r0
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d001      	beq.n	80099d8 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 80099d4:	f002 fce8 	bl	800c3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80099d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099dc:	2208      	movs	r2, #8
 80099de:	4619      	mov	r1, r3
 80099e0:	481c      	ldr	r0, [pc, #112]	; (8009a54 <MX_TIM1_Init+0x19c>)
 80099e2:	f7fc ffef 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 80099e6:	4603      	mov	r3, r0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d001      	beq.n	80099f0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80099ec:	f002 fcdc 	bl	800c3a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80099f0:	2330      	movs	r3, #48	; 0x30
 80099f2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 4095-1120;
 80099f4:	f640 339f 	movw	r3, #2975	; 0xb9f
 80099f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80099fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80099fe:	220c      	movs	r2, #12
 8009a00:	4619      	mov	r1, r3
 8009a02:	4814      	ldr	r0, [pc, #80]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009a04:	f7fc ff7e 	bl	8006904 <HAL_TIM_OC_ConfigChannel>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8009a0e:	f002 fccb 	bl	800c3a8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8009a12:	2300      	movs	r3, #0
 8009a14:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8009a22:	2300      	movs	r3, #0
 8009a24:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8009a26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009a2a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8009a30:	1d3b      	adds	r3, r7, #4
 8009a32:	4619      	mov	r1, r3
 8009a34:	4807      	ldr	r0, [pc, #28]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009a36:	f7fd fd17 	bl	8007468 <HAL_TIMEx_ConfigBreakDeadTime>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d001      	beq.n	8009a44 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8009a40:	f002 fcb2 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8009a44:	4803      	ldr	r0, [pc, #12]	; (8009a54 <MX_TIM1_Init+0x19c>)
 8009a46:	f003 f8f5 	bl	800cc34 <HAL_TIM_MspPostInit>

}
 8009a4a:	bf00      	nop
 8009a4c:	3758      	adds	r7, #88	; 0x58
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	bd80      	pop	{r7, pc}
 8009a52:	bf00      	nop
 8009a54:	20000dd8 	.word	0x20000dd8
 8009a58:	40010000 	.word	0x40010000

08009a5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b08e      	sub	sp, #56	; 0x38
 8009a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009a66:	2200      	movs	r2, #0
 8009a68:	601a      	str	r2, [r3, #0]
 8009a6a:	605a      	str	r2, [r3, #4]
 8009a6c:	609a      	str	r2, [r3, #8]
 8009a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009a70:	f107 0320 	add.w	r3, r7, #32
 8009a74:	2200      	movs	r2, #0
 8009a76:	601a      	str	r2, [r3, #0]
 8009a78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009a7a:	1d3b      	adds	r3, r7, #4
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	605a      	str	r2, [r3, #4]
 8009a82:	609a      	str	r2, [r3, #8]
 8009a84:	60da      	str	r2, [r3, #12]
 8009a86:	611a      	str	r2, [r3, #16]
 8009a88:	615a      	str	r2, [r3, #20]
 8009a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009a8c:	4b2b      	ldr	r3, [pc, #172]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009a8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009a92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009a94:	4b29      	ldr	r3, [pc, #164]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009a96:	2200      	movs	r2, #0
 8009a98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009a9a:	4b28      	ldr	r3, [pc, #160]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFFFFFF;
 8009aa0:	4b26      	ldr	r3, [pc, #152]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009aa2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009aa6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009aa8:	4b24      	ldr	r3, [pc, #144]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009aae:	4b23      	ldr	r3, [pc, #140]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009ab4:	4821      	ldr	r0, [pc, #132]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009ab6:	f7fc fb95 	bl	80061e4 <HAL_TIM_Base_Init>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d001      	beq.n	8009ac4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8009ac0:	f002 fc72 	bl	800c3a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ac8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009aca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009ace:	4619      	mov	r1, r3
 8009ad0:	481a      	ldr	r0, [pc, #104]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009ad2:	f7fd f83d 	bl	8006b50 <HAL_TIM_ConfigClockSource>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d001      	beq.n	8009ae0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8009adc:	f002 fc64 	bl	800c3a8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8009ae0:	4816      	ldr	r0, [pc, #88]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009ae2:	f7fc fbce 	bl	8006282 <HAL_TIM_OC_Init>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d001      	beq.n	8009af0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8009aec:	f002 fc5c 	bl	800c3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009af0:	2300      	movs	r3, #0
 8009af2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009af4:	2300      	movs	r3, #0
 8009af6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009af8:	f107 0320 	add.w	r3, r7, #32
 8009afc:	4619      	mov	r1, r3
 8009afe:	480f      	ldr	r0, [pc, #60]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009b00:	f7fd fc36 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8009b04:	4603      	mov	r3, r0
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8009b0a:	f002 fc4d 	bl	800c3a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009b16:	2300      	movs	r3, #0
 8009b18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009b1e:	1d3b      	adds	r3, r7, #4
 8009b20:	2200      	movs	r2, #0
 8009b22:	4619      	mov	r1, r3
 8009b24:	4805      	ldr	r0, [pc, #20]	; (8009b3c <MX_TIM2_Init+0xe0>)
 8009b26:	f7fc feed 	bl	8006904 <HAL_TIM_OC_ConfigChannel>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8009b30:	f002 fc3a 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8009b34:	bf00      	nop
 8009b36:	3738      	adds	r7, #56	; 0x38
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20001a34 	.word	0x20001a34

08009b40 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b46:	f107 0308 	add.w	r3, r7, #8
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	601a      	str	r2, [r3, #0]
 8009b4e:	605a      	str	r2, [r3, #4]
 8009b50:	609a      	str	r2, [r3, #8]
 8009b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b54:	463b      	mov	r3, r7
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
 8009b5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8009b5c:	4b1d      	ldr	r3, [pc, #116]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009b5e:	4a1e      	ldr	r2, [pc, #120]	; (8009bd8 <MX_TIM5_Init+0x98>)
 8009b60:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 839;
 8009b62:	4b1c      	ldr	r3, [pc, #112]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009b64:	f240 3247 	movw	r2, #839	; 0x347
 8009b68:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009b6a:	4b1a      	ldr	r3, [pc, #104]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xFFFFFFFF;
 8009b70:	4b18      	ldr	r3, [pc, #96]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009b72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b76:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009b78:	4b16      	ldr	r3, [pc, #88]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009b7e:	4b15      	ldr	r3, [pc, #84]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009b80:	2200      	movs	r2, #0
 8009b82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8009b84:	4813      	ldr	r0, [pc, #76]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009b86:	f7fc fb2d 	bl	80061e4 <HAL_TIM_Base_Init>
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d001      	beq.n	8009b94 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8009b90:	f002 fc0a 	bl	800c3a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b98:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8009b9a:	f107 0308 	add.w	r3, r7, #8
 8009b9e:	4619      	mov	r1, r3
 8009ba0:	480c      	ldr	r0, [pc, #48]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009ba2:	f7fc ffd5 	bl	8006b50 <HAL_TIM_ConfigClockSource>
 8009ba6:	4603      	mov	r3, r0
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d001      	beq.n	8009bb0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8009bac:	f002 fbfc 	bl	800c3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009bb8:	463b      	mov	r3, r7
 8009bba:	4619      	mov	r1, r3
 8009bbc:	4805      	ldr	r0, [pc, #20]	; (8009bd4 <MX_TIM5_Init+0x94>)
 8009bbe:	f7fd fbd7 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d001      	beq.n	8009bcc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8009bc8:	f002 fbee 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009bcc:	bf00      	nop
 8009bce:	3718      	adds	r7, #24
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}
 8009bd4:	20000ba0 	.word	0x20000ba0
 8009bd8:	40000c00 	.word	0x40000c00

08009bdc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b08c      	sub	sp, #48	; 0x30
 8009be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8009be2:	f107 030c 	add.w	r3, r7, #12
 8009be6:	2224      	movs	r2, #36	; 0x24
 8009be8:	2100      	movs	r1, #0
 8009bea:	4618      	mov	r0, r3
 8009bec:	f003 fad4 	bl	800d198 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009bf0:	1d3b      	adds	r3, r7, #4
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	601a      	str	r2, [r3, #0]
 8009bf6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8009bf8:	4b22      	ldr	r3, [pc, #136]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009bfa:	4a23      	ldr	r2, [pc, #140]	; (8009c88 <MX_TIM8_Init+0xac>)
 8009bfc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8009bfe:	4b21      	ldr	r3, [pc, #132]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009c00:	2200      	movs	r2, #0
 8009c02:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009c04:	4b1f      	ldr	r3, [pc, #124]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009c06:	2200      	movs	r2, #0
 8009c08:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 3999;
 8009c0a:	4b1e      	ldr	r3, [pc, #120]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009c0c:	f640 729f 	movw	r2, #3999	; 0xf9f
 8009c10:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009c12:	4b1c      	ldr	r3, [pc, #112]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009c14:	2200      	movs	r2, #0
 8009c16:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8009c18:	4b1a      	ldr	r3, [pc, #104]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009c1e:	4b19      	ldr	r3, [pc, #100]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009c24:	2303      	movs	r3, #3
 8009c26:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009c30:	2300      	movs	r3, #0
 8009c32:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8009c38:	2300      	movs	r3, #0
 8009c3a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009c3c:	2301      	movs	r3, #1
 8009c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009c40:	2300      	movs	r3, #0
 8009c42:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009c44:	2300      	movs	r3, #0
 8009c46:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8009c48:	f107 030c 	add.w	r3, r7, #12
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	480d      	ldr	r0, [pc, #52]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009c50:	f7fc fc66 	bl	8006520 <HAL_TIM_Encoder_Init>
 8009c54:	4603      	mov	r3, r0
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d001      	beq.n	8009c5e <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8009c5a:	f002 fba5 	bl	800c3a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8009c5e:	2320      	movs	r3, #32
 8009c60:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009c62:	2300      	movs	r3, #0
 8009c64:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8009c66:	1d3b      	adds	r3, r7, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4806      	ldr	r0, [pc, #24]	; (8009c84 <MX_TIM8_Init+0xa8>)
 8009c6c:	f7fd fb80 	bl	8007370 <HAL_TIMEx_MasterConfigSynchronization>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8009c76:	f002 fb97 	bl	800c3a8 <Error_Handler>
	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn); // this didn't seem to be necessary


  /* USER CODE END TIM8_Init 2 */

}
 8009c7a:	bf00      	nop
 8009c7c:	3730      	adds	r7, #48	; 0x30
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	2000055c 	.word	0x2000055c
 8009c88:	40010400 	.word	0x40010400

08009c8c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b08c      	sub	sp, #48	; 0x30
 8009c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c92:	f107 0320 	add.w	r3, r7, #32
 8009c96:	2200      	movs	r2, #0
 8009c98:	601a      	str	r2, [r3, #0]
 8009c9a:	605a      	str	r2, [r3, #4]
 8009c9c:	609a      	str	r2, [r3, #8]
 8009c9e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009ca0:	1d3b      	adds	r3, r7, #4
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	601a      	str	r2, [r3, #0]
 8009ca6:	605a      	str	r2, [r3, #4]
 8009ca8:	609a      	str	r2, [r3, #8]
 8009caa:	60da      	str	r2, [r3, #12]
 8009cac:	611a      	str	r2, [r3, #16]
 8009cae:	615a      	str	r2, [r3, #20]
 8009cb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8009cb2:	4b2d      	ldr	r3, [pc, #180]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009cb4:	4a2d      	ldr	r2, [pc, #180]	; (8009d6c <MX_TIM9_Init+0xe0>)
 8009cb6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 41999;
 8009cb8:	4b2b      	ldr	r3, [pc, #172]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009cba:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8009cbe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cc0:	4b29      	ldr	r3, [pc, #164]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8009cc6:	4b28      	ldr	r3, [pc, #160]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009cc8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ccc:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009cce:	4b26      	ldr	r3, [pc, #152]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cd4:	4b24      	ldr	r3, [pc, #144]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009cda:	4823      	ldr	r0, [pc, #140]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009cdc:	f7fc fa82 	bl	80061e4 <HAL_TIM_Base_Init>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8009ce6:	f002 fb5f 	bl	800c3a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009cea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cee:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009cf0:	f107 0320 	add.w	r3, r7, #32
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	481c      	ldr	r0, [pc, #112]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009cf8:	f7fc ff2a 	bl	8006b50 <HAL_TIM_ConfigClockSource>
 8009cfc:	4603      	mov	r3, r0
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d001      	beq.n	8009d06 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8009d02:	f002 fb51 	bl	800c3a8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8009d06:	4818      	ldr	r0, [pc, #96]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009d08:	f7fc fb2e 	bl	8006368 <HAL_TIM_PWM_Init>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8009d12:	f002 fb49 	bl	800c3a8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009d16:	2360      	movs	r3, #96	; 0x60
 8009d18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 8009d1a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8009d1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009d28:	1d3b      	adds	r3, r7, #4
 8009d2a:	2200      	movs	r2, #0
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	480e      	ldr	r0, [pc, #56]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009d30:	f7fc fe48 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 8009d34:	4603      	mov	r3, r0
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <MX_TIM9_Init+0xb2>
  {
    Error_Handler();
 8009d3a:	f002 fb35 	bl	800c3a8 <Error_Handler>
  }
  sConfigOC.Pulse = 600;
 8009d3e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8009d42:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009d44:	1d3b      	adds	r3, r7, #4
 8009d46:	2204      	movs	r2, #4
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4807      	ldr	r0, [pc, #28]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009d4c:	f7fc fe3a 	bl	80069c4 <HAL_TIM_PWM_ConfigChannel>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d001      	beq.n	8009d5a <MX_TIM9_Init+0xce>
  {
    Error_Handler();
 8009d56:	f002 fb27 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8009d5a:	4803      	ldr	r0, [pc, #12]	; (8009d68 <MX_TIM9_Init+0xdc>)
 8009d5c:	f002 ff6a 	bl	800cc34 <HAL_TIM_MspPostInit>

}
 8009d60:	bf00      	nop
 8009d62:	3730      	adds	r7, #48	; 0x30
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	200017f0 	.word	0x200017f0
 8009d6c:	40014000 	.word	0x40014000

08009d70 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8009d74:	4b11      	ldr	r3, [pc, #68]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009d76:	4a12      	ldr	r2, [pc, #72]	; (8009dc0 <MX_USART3_UART_Init+0x50>)
 8009d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8009d7a:	4b10      	ldr	r3, [pc, #64]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8009d82:	4b0e      	ldr	r3, [pc, #56]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009d84:	2200      	movs	r2, #0
 8009d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8009d88:	4b0c      	ldr	r3, [pc, #48]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8009d8e:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009d90:	2200      	movs	r2, #0
 8009d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8009d94:	4b09      	ldr	r3, [pc, #36]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009d96:	220c      	movs	r2, #12
 8009d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009d9a:	4b08      	ldr	r3, [pc, #32]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8009da0:	4b06      	ldr	r3, [pc, #24]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009da2:	2200      	movs	r2, #0
 8009da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8009da6:	4805      	ldr	r0, [pc, #20]	; (8009dbc <MX_USART3_UART_Init+0x4c>)
 8009da8:	f7fd fbe9 	bl	800757e <HAL_UART_Init>
 8009dac:	4603      	mov	r3, r0
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d001      	beq.n	8009db6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8009db2:	f002 faf9 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8009db6:	bf00      	nop
 8009db8:	bd80      	pop	{r7, pc}
 8009dba:	bf00      	nop
 8009dbc:	2000059c 	.word	0x2000059c
 8009dc0:	40004800 	.word	0x40004800

08009dc4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009dc8:	4b14      	ldr	r3, [pc, #80]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009dca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009dce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009dd0:	4b12      	ldr	r3, [pc, #72]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009dd2:	2204      	movs	r2, #4
 8009dd4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009dd6:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009dd8:	2202      	movs	r2, #2
 8009dda:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009ddc:	4b0f      	ldr	r3, [pc, #60]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009dde:	2200      	movs	r2, #0
 8009de0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009de2:	4b0e      	ldr	r3, [pc, #56]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009de4:	2202      	movs	r2, #2
 8009de6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009de8:	4b0c      	ldr	r3, [pc, #48]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009dea:	2200      	movs	r2, #0
 8009dec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009dee:	4b0b      	ldr	r3, [pc, #44]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009df0:	2200      	movs	r2, #0
 8009df2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009df4:	4b09      	ldr	r3, [pc, #36]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009df6:	2200      	movs	r2, #0
 8009df8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009dfa:	4b08      	ldr	r3, [pc, #32]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009e00:	4b06      	ldr	r3, [pc, #24]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009e02:	2200      	movs	r2, #0
 8009e04:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009e06:	4805      	ldr	r0, [pc, #20]	; (8009e1c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8009e08:	f7fa fc27 	bl	800465a <HAL_PCD_Init>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d001      	beq.n	8009e16 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8009e12:	f002 fac9 	bl	800c3a8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009e16:	bf00      	nop
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20000678 	.word	0x20000678

08009e20 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b082      	sub	sp, #8
 8009e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009e26:	2300      	movs	r3, #0
 8009e28:	607b      	str	r3, [r7, #4]
 8009e2a:	4b1f      	ldr	r3, [pc, #124]	; (8009ea8 <MX_DMA_Init+0x88>)
 8009e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e2e:	4a1e      	ldr	r2, [pc, #120]	; (8009ea8 <MX_DMA_Init+0x88>)
 8009e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e34:	6313      	str	r3, [r2, #48]	; 0x30
 8009e36:	4b1c      	ldr	r3, [pc, #112]	; (8009ea8 <MX_DMA_Init+0x88>)
 8009e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e3e:	607b      	str	r3, [r7, #4]
 8009e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8009e42:	2300      	movs	r3, #0
 8009e44:	603b      	str	r3, [r7, #0]
 8009e46:	4b18      	ldr	r3, [pc, #96]	; (8009ea8 <MX_DMA_Init+0x88>)
 8009e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e4a:	4a17      	ldr	r2, [pc, #92]	; (8009ea8 <MX_DMA_Init+0x88>)
 8009e4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009e50:	6313      	str	r3, [r2, #48]	; 0x30
 8009e52:	4b15      	ldr	r3, [pc, #84]	; (8009ea8 <MX_DMA_Init+0x88>)
 8009e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e5a:	603b      	str	r3, [r7, #0]
 8009e5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8009e5e:	2200      	movs	r2, #0
 8009e60:	2100      	movs	r1, #0
 8009e62:	200e      	movs	r0, #14
 8009e64:	f7f8 fe71 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8009e68:	200e      	movs	r0, #14
 8009e6a:	f7f8 fe8a 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8009e6e:	2200      	movs	r2, #0
 8009e70:	2100      	movs	r1, #0
 8009e72:	2038      	movs	r0, #56	; 0x38
 8009e74:	f7f8 fe69 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8009e78:	2038      	movs	r0, #56	; 0x38
 8009e7a:	f7f8 fe82 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8009e7e:	2200      	movs	r2, #0
 8009e80:	2100      	movs	r1, #0
 8009e82:	2039      	movs	r0, #57	; 0x39
 8009e84:	f7f8 fe61 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8009e88:	2039      	movs	r0, #57	; 0x39
 8009e8a:	f7f8 fe7a 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2100      	movs	r1, #0
 8009e92:	203a      	movs	r0, #58	; 0x3a
 8009e94:	f7f8 fe59 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8009e98:	203a      	movs	r0, #58	; 0x3a
 8009e9a:	f7f8 fe72 	bl	8002b82 <HAL_NVIC_EnableIRQ>

}
 8009e9e:	bf00      	nop
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}
 8009ea6:	bf00      	nop
 8009ea8:	40023800 	.word	0x40023800

08009eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009eac:	b580      	push	{r7, lr}
 8009eae:	b08c      	sub	sp, #48	; 0x30
 8009eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009eb2:	f107 031c 	add.w	r3, r7, #28
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	601a      	str	r2, [r3, #0]
 8009eba:	605a      	str	r2, [r3, #4]
 8009ebc:	609a      	str	r2, [r3, #8]
 8009ebe:	60da      	str	r2, [r3, #12]
 8009ec0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	61bb      	str	r3, [r7, #24]
 8009ec6:	4b69      	ldr	r3, [pc, #420]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009eca:	4a68      	ldr	r2, [pc, #416]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009ecc:	f043 0310 	orr.w	r3, r3, #16
 8009ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ed2:	4b66      	ldr	r3, [pc, #408]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ed6:	f003 0310 	and.w	r3, r3, #16
 8009eda:	61bb      	str	r3, [r7, #24]
 8009edc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009ede:	2300      	movs	r3, #0
 8009ee0:	617b      	str	r3, [r7, #20]
 8009ee2:	4b62      	ldr	r3, [pc, #392]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ee6:	4a61      	ldr	r2, [pc, #388]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009ee8:	f043 0304 	orr.w	r3, r3, #4
 8009eec:	6313      	str	r3, [r2, #48]	; 0x30
 8009eee:	4b5f      	ldr	r3, [pc, #380]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef2:	f003 0304 	and.w	r3, r3, #4
 8009ef6:	617b      	str	r3, [r7, #20]
 8009ef8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009efa:	2300      	movs	r3, #0
 8009efc:	613b      	str	r3, [r7, #16]
 8009efe:	4b5b      	ldr	r3, [pc, #364]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f02:	4a5a      	ldr	r2, [pc, #360]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f08:	6313      	str	r3, [r2, #48]	; 0x30
 8009f0a:	4b58      	ldr	r3, [pc, #352]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f12:	613b      	str	r3, [r7, #16]
 8009f14:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f16:	2300      	movs	r3, #0
 8009f18:	60fb      	str	r3, [r7, #12]
 8009f1a:	4b54      	ldr	r3, [pc, #336]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f1e:	4a53      	ldr	r2, [pc, #332]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f20:	f043 0301 	orr.w	r3, r3, #1
 8009f24:	6313      	str	r3, [r2, #48]	; 0x30
 8009f26:	4b51      	ldr	r3, [pc, #324]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	60fb      	str	r3, [r7, #12]
 8009f30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009f32:	2300      	movs	r3, #0
 8009f34:	60bb      	str	r3, [r7, #8]
 8009f36:	4b4d      	ldr	r3, [pc, #308]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f3a:	4a4c      	ldr	r2, [pc, #304]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f3c:	f043 0302 	orr.w	r3, r3, #2
 8009f40:	6313      	str	r3, [r2, #48]	; 0x30
 8009f42:	4b4a      	ldr	r3, [pc, #296]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f46:	f003 0302 	and.w	r3, r3, #2
 8009f4a:	60bb      	str	r3, [r7, #8]
 8009f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f4e:	2300      	movs	r3, #0
 8009f50:	607b      	str	r3, [r7, #4]
 8009f52:	4b46      	ldr	r3, [pc, #280]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	4a45      	ldr	r2, [pc, #276]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f58:	f043 0308 	orr.w	r3, r3, #8
 8009f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8009f5e:	4b43      	ldr	r3, [pc, #268]	; (800a06c <MX_GPIO_Init+0x1c0>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	f003 0308 	and.w	r3, r3, #8
 8009f66:	607b      	str	r3, [r7, #4]
 8009f68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin, GPIO_PIN_RESET);
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	f24c 0118 	movw	r1, #49176	; 0xc018
 8009f70:	483f      	ldr	r0, [pc, #252]	; (800a070 <MX_GPIO_Init+0x1c4>)
 8009f72:	f7f9 fb9f 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8009f76:	2200      	movs	r2, #0
 8009f78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009f7c:	483d      	ldr	r0, [pc, #244]	; (800a074 <MX_GPIO_Init+0x1c8>)
 8009f7e:	f7f9 fb99 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 8009f82:	2200      	movs	r2, #0
 8009f84:	f64b 0180 	movw	r1, #47232	; 0xb880
 8009f88:	483b      	ldr	r0, [pc, #236]	; (800a078 <MX_GPIO_Init+0x1cc>)
 8009f8a:	f7f9 fb93 	bl	80036b4 <HAL_GPIO_WritePin>
                          |nSCS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LD_1_Pin LD_2_Pin EN_GATE_Pin M0_DC_CAL_Pin */
  GPIO_InitStruct.Pin = LD_1_Pin|LD_2_Pin|EN_GATE_Pin|M0_DC_CAL_Pin;
 8009f8e:	f24c 0318 	movw	r3, #49176	; 0xc018
 8009f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009f94:	2301      	movs	r3, #1
 8009f96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009fa0:	f107 031c 	add.w	r3, r7, #28
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	4832      	ldr	r0, [pc, #200]	; (800a070 <MX_GPIO_Init+0x1c4>)
 8009fa8:	f7f9 f9ea 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009fac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009fbe:	f107 031c 	add.w	r3, r7, #28
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	482b      	ldr	r0, [pc, #172]	; (800a074 <MX_GPIO_Init+0x1c8>)
 8009fc6:	f7f9 f9db 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009fca:	2340      	movs	r3, #64	; 0x40
 8009fcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fce:	2302      	movs	r3, #2
 8009fd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8009fda:	2309      	movs	r3, #9
 8009fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fde:	f107 031c 	add.w	r3, r7, #28
 8009fe2:	4619      	mov	r1, r3
 8009fe4:	4825      	ldr	r0, [pc, #148]	; (800a07c <MX_GPIO_Init+0x1d0>)
 8009fe6:	f7f9 f9cb 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 debug1_out_Pin debug2_out_Pin ROT0_nCS_Pin 
                           nSCS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_11|debug1_out_Pin|debug2_out_Pin|ROT0_nCS_Pin 
 8009fea:	f64b 0380 	movw	r3, #47232	; 0xb880
 8009fee:	61fb      	str	r3, [r7, #28]
                          |nSCS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009ff0:	2301      	movs	r3, #1
 8009ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009ffc:	f107 031c 	add.w	r3, r7, #28
 800a000:	4619      	mov	r1, r3
 800a002:	481d      	ldr	r0, [pc, #116]	; (800a078 <MX_GPIO_Init+0x1cc>)
 800a004:	f7f9 f9bc 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : debug1_in_Pin */
  GPIO_InitStruct.Pin = debug1_in_Pin;
 800a008:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a00c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a00e:	2300      	movs	r3, #0
 800a010:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a012:	2300      	movs	r3, #0
 800a014:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(debug1_in_GPIO_Port, &GPIO_InitStruct);
 800a016:	f107 031c 	add.w	r3, r7, #28
 800a01a:	4619      	mov	r1, r3
 800a01c:	4816      	ldr	r0, [pc, #88]	; (800a078 <MX_GPIO_Init+0x1cc>)
 800a01e:	f7f9 f9af 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pin : ROT0_I_W_Pin */
  GPIO_InitStruct.Pin = ROT0_I_W_Pin;
 800a022:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a028:	4b15      	ldr	r3, [pc, #84]	; (800a080 <MX_GPIO_Init+0x1d4>)
 800a02a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a02c:	2300      	movs	r3, #0
 800a02e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ROT0_I_W_GPIO_Port, &GPIO_InitStruct);
 800a030:	f107 031c 	add.w	r3, r7, #28
 800a034:	4619      	mov	r1, r3
 800a036:	480f      	ldr	r0, [pc, #60]	; (800a074 <MX_GPIO_Init+0x1c8>)
 800a038:	f7f9 f9a2 	bl	8003380 <HAL_GPIO_Init>

  /*Configure GPIO pins : PWRGD_Pin nOCTW_Pin nFAULT_Pin */
  GPIO_InitStruct.Pin = PWRGD_Pin|nOCTW_Pin|nFAULT_Pin;
 800a03c:	2370      	movs	r3, #112	; 0x70
 800a03e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a040:	2300      	movs	r3, #0
 800a042:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a044:	2301      	movs	r3, #1
 800a046:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a048:	f107 031c 	add.w	r3, r7, #28
 800a04c:	4619      	mov	r1, r3
 800a04e:	480a      	ldr	r0, [pc, #40]	; (800a078 <MX_GPIO_Init+0x1cc>)
 800a050:	f7f9 f996 	bl	8003380 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800a054:	2200      	movs	r2, #0
 800a056:	2100      	movs	r1, #0
 800a058:	2017      	movs	r0, #23
 800a05a:	f7f8 fd76 	bl	8002b4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800a05e:	2017      	movs	r0, #23
 800a060:	f7f8 fd8f 	bl	8002b82 <HAL_NVIC_EnableIRQ>

}
 800a064:	bf00      	nop
 800a066:	3730      	adds	r7, #48	; 0x30
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	40023800 	.word	0x40023800
 800a070:	40021000 	.word	0x40021000
 800a074:	40020800 	.word	0x40020800
 800a078:	40020c00 	.word	0x40020c00
 800a07c:	40020000 	.word	0x40020000
 800a080:	10110000 	.word	0x10110000

0800a084 <set_pwm_off>:

/* USER CODE BEGIN 4 */

void set_pwm_off(void){
 800a084:	b480      	push	{r7}
 800a086:	af00      	add	r7, sp, #0
	TIM1->CCR1 = 0;
 800a088:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <set_pwm_off+0x20>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2 = 0;
 800a08e:	4b05      	ldr	r3, [pc, #20]	; (800a0a4 <set_pwm_off+0x20>)
 800a090:	2200      	movs	r2, #0
 800a092:	639a      	str	r2, [r3, #56]	; 0x38
	TIM1->CCR3 = 0;
 800a094:	4b03      	ldr	r3, [pc, #12]	; (800a0a4 <set_pwm_off+0x20>)
 800a096:	2200      	movs	r2, #0
 800a098:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800a09a:	bf00      	nop
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	40010000 	.word	0x40010000

0800a0a8 <step_through_pole_angles>:


void step_through_pole_angles(void){
 800a0a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a0aa:	f5ad 7d27 	sub.w	sp, sp, #668	; 0x29c
 800a0ae:	af02      	add	r7, sp, #8
 800a0b0:	466b      	mov	r3, sp
 800a0b2:	461d      	mov	r5, r3

	normal_pwm_update = false;
 800a0b4:	4bbc      	ldr	r3, [pc, #752]	; (800a3a8 <step_through_pole_angles+0x300>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a0ba:	f7ff ffe3 	bl	800a084 <set_pwm_off>
	HAL_Delay(100);
 800a0be:	2064      	movs	r0, #100	; 0x64
 800a0c0:	f7f6 ffb4 	bl	800102c <HAL_Delay>

	const uint32_t poles_max = 25;
 800a0c4:	2319      	movs	r3, #25
 800a0c6:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
	uint32_t EncVal[poles_max];
 800a0ca:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800a0ce:	3b01      	subs	r3, #1
 800a0d0:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 800a0d4:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800a0d8:	4619      	mov	r1, r3
 800a0da:	f04f 0200 	mov.w	r2, #0
 800a0de:	f04f 0300 	mov.w	r3, #0
 800a0e2:	f04f 0400 	mov.w	r4, #0
 800a0e6:	0154      	lsls	r4, r2, #5
 800a0e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a0ec:	014b      	lsls	r3, r1, #5
 800a0ee:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	f04f 0200 	mov.w	r2, #0
 800a0f8:	f04f 0300 	mov.w	r3, #0
 800a0fc:	f04f 0400 	mov.w	r4, #0
 800a100:	0154      	lsls	r4, r2, #5
 800a102:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a106:	014b      	lsls	r3, r1, #5
 800a108:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800a10c:	009b      	lsls	r3, r3, #2
 800a10e:	3303      	adds	r3, #3
 800a110:	3307      	adds	r3, #7
 800a112:	08db      	lsrs	r3, r3, #3
 800a114:	00db      	lsls	r3, r3, #3
 800a116:	ebad 0d03 	sub.w	sp, sp, r3
 800a11a:	ab02      	add	r3, sp, #8
 800a11c:	3303      	adds	r3, #3
 800a11e:	089b      	lsrs	r3, r3, #2
 800a120:	009b      	lsls	r3, r3, #2
 800a122:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
	uint32_t step_through_amp = 5 * PWM_1PERCENT;
 800a126:	23cd      	movs	r3, #205	; 0xcd
 800a128:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
	uint8_t ABC = 0;
 800a12c:	2300      	movs	r3, #0
 800a12e:	f887 3282 	strb.w	r3, [r7, #642]	; 0x282


	// --- DETERMINE INVERT
	for (ABC = 0; ABC < N_PHASES ; ABC++){
 800a132:	2300      	movs	r3, #0
 800a134:	f887 3282 	strb.w	r3, [r7, #642]	; 0x282
 800a138:	e02b      	b.n	800a192 <step_through_pole_angles+0xea>
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800a13a:	2110      	movs	r1, #16
 800a13c:	489b      	ldr	r0, [pc, #620]	; (800a3ac <step_through_pole_angles+0x304>)
 800a13e:	f7f9 fad2 	bl	80036e6 <HAL_GPIO_TogglePin>
		set_pwm_off();
 800a142:	f7ff ff9f 	bl	800a084 <set_pwm_off>
		if (ABC==0){
 800a146:	f897 3282 	ldrb.w	r3, [r7, #642]	; 0x282
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <step_through_pole_angles+0xb0>
			TIM1->CCR1 = step_through_amp;
 800a14e:	4a98      	ldr	r2, [pc, #608]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a150:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a154:	6353      	str	r3, [r2, #52]	; 0x34
 800a156:	e00c      	b.n	800a172 <step_through_pole_angles+0xca>
		}
		else if (ABC==1){
 800a158:	f897 3282 	ldrb.w	r3, [r7, #642]	; 0x282
 800a15c:	2b01      	cmp	r3, #1
 800a15e:	d104      	bne.n	800a16a <step_through_pole_angles+0xc2>
			TIM1->CCR2 = step_through_amp;
 800a160:	4a93      	ldr	r2, [pc, #588]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a162:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a166:	6393      	str	r3, [r2, #56]	; 0x38
 800a168:	e003      	b.n	800a172 <step_through_pole_angles+0xca>
		}
		else {
			TIM1->CCR3 = step_through_amp;
 800a16a:	4a91      	ldr	r2, [pc, #580]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a16c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a170:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
		HAL_Delay(200);
 800a172:	20c8      	movs	r0, #200	; 0xc8
 800a174:	f7f6 ff5a 	bl	800102c <HAL_Delay>
		EncVal[ABC] = TIM8->CNT;
 800a178:	4b8e      	ldr	r3, [pc, #568]	; (800a3b4 <step_through_pole_angles+0x30c>)
 800a17a:	f897 2282 	ldrb.w	r2, [r7, #642]	; 0x282
 800a17e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a180:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (ABC = 0; ABC < N_PHASES ; ABC++){
 800a188:	f897 3282 	ldrb.w	r3, [r7, #642]	; 0x282
 800a18c:	3301      	adds	r3, #1
 800a18e:	f887 3282 	strb.w	r3, [r7, #642]	; 0x282
 800a192:	f897 3282 	ldrb.w	r3, [r7, #642]	; 0x282
 800a196:	2b02      	cmp	r3, #2
 800a198:	d9cf      	bls.n	800a13a <step_through_pole_angles+0x92>
	}
	int32_t delta_EncVal = EncVal[2] - EncVal[1];
 800a19a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a19e:	689a      	ldr	r2, [r3, #8]
 800a1a0:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
		delta_EncVal - ENC_STEPS;
	}
	else if (delta_EncVal < -ENC_STEPS_HALF){
		delta_EncVal + ENC_STEPS;
	}
	if (delta_EncVal < 0){
 800a1ac:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	da03      	bge.n	800a1bc <step_through_pole_angles+0x114>
		INVERT = 1; //SET MOTOR SPECIFIC VALUE
 800a1b4:	4b80      	ldr	r3, [pc, #512]	; (800a3b8 <step_through_pole_angles+0x310>)
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	601a      	str	r2, [r3, #0]
 800a1ba:	e002      	b.n	800a1c2 <step_through_pole_angles+0x11a>
	}
	else{
		INVERT = 0; //SET MOTOR SPECIFIC VALUE
 800a1bc:	4b7e      	ldr	r3, [pc, #504]	; (800a3b8 <step_through_pole_angles+0x310>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	601a      	str	r2, [r3, #0]
	}

	set_pwm_off();
 800a1c2:	f7ff ff5f 	bl	800a084 <set_pwm_off>
	TIM1->CCR1 = step_through_amp;
 800a1c6:	4a7a      	ldr	r2, [pc, #488]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a1c8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a1cc:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_Delay(200);
 800a1ce:	20c8      	movs	r0, #200	; 0xc8
 800a1d0:	f7f6 ff2c 	bl	800102c <HAL_Delay>

	// --- DETERMINE N_POLES
	uint8_t BCA = 0;
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
	int32_t counter = 0;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	bool done = false;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267

	for (int u = 0 ; u < poles_max; u++){
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 800a1ec:	e0c5      	b.n	800a37a <step_through_pole_angles+0x2d2>
	//while (!done){
		HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800a1ee:	2110      	movs	r1, #16
 800a1f0:	486e      	ldr	r0, [pc, #440]	; (800a3ac <step_through_pole_angles+0x304>)
 800a1f2:	f7f9 fa78 	bl	80036e6 <HAL_GPIO_TogglePin>
		for (BCA = 0; BCA < N_PHASES ; BCA++){
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
 800a1fc:	e035      	b.n	800a26a <step_through_pole_angles+0x1c2>
			set_pwm_off();
 800a1fe:	f7ff ff41 	bl	800a084 <set_pwm_off>
			HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_4);
 800a202:	2110      	movs	r1, #16
 800a204:	4869      	ldr	r0, [pc, #420]	; (800a3ac <step_through_pole_angles+0x304>)
 800a206:	f7f9 fa6e 	bl	80036e6 <HAL_GPIO_TogglePin>
			if (BCA==0){
 800a20a:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d10d      	bne.n	800a22e <step_through_pole_angles+0x186>
				if(INVERT){
 800a212:	4b69      	ldr	r3, [pc, #420]	; (800a3b8 <step_through_pole_angles+0x310>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d004      	beq.n	800a224 <step_through_pole_angles+0x17c>
					TIM1->CCR3 = step_through_amp;
 800a21a:	4a65      	ldr	r2, [pc, #404]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a21c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a220:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a222:	e01a      	b.n	800a25a <step_through_pole_angles+0x1b2>
				}
				else {
					TIM1->CCR2 = step_through_amp;
 800a224:	4a62      	ldr	r2, [pc, #392]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a226:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a22a:	6393      	str	r3, [r2, #56]	; 0x38
 800a22c:	e015      	b.n	800a25a <step_through_pole_angles+0x1b2>
				}
			}
			else if (BCA==1){
 800a22e:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 800a232:	2b01      	cmp	r3, #1
 800a234:	d10d      	bne.n	800a252 <step_through_pole_angles+0x1aa>
				if(INVERT){
 800a236:	4b60      	ldr	r3, [pc, #384]	; (800a3b8 <step_through_pole_angles+0x310>)
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d004      	beq.n	800a248 <step_through_pole_angles+0x1a0>
					TIM1->CCR2 = step_through_amp;
 800a23e:	4a5c      	ldr	r2, [pc, #368]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a240:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a244:	6393      	str	r3, [r2, #56]	; 0x38
 800a246:	e008      	b.n	800a25a <step_through_pole_angles+0x1b2>
				}
				else{
					TIM1->CCR3 = step_through_amp;
 800a248:	4a59      	ldr	r2, [pc, #356]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a24a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a24e:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a250:	e003      	b.n	800a25a <step_through_pole_angles+0x1b2>
				}
			}
			else {
				TIM1->CCR1 = step_through_amp;
 800a252:	4a57      	ldr	r2, [pc, #348]	; (800a3b0 <step_through_pole_angles+0x308>)
 800a254:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 800a258:	6353      	str	r3, [r2, #52]	; 0x34
			}
			HAL_Delay(200);
 800a25a:	20c8      	movs	r0, #200	; 0xc8
 800a25c:	f7f6 fee6 	bl	800102c <HAL_Delay>
		for (BCA = 0; BCA < N_PHASES ; BCA++){
 800a260:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 800a264:	3301      	adds	r3, #1
 800a266:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
 800a26a:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 800a26e:	2b02      	cmp	r3, #2
 800a270:	d9c5      	bls.n	800a1fe <step_through_pole_angles+0x156>
		}
		EncVal[counter] = TIM8->CNT;
 800a272:	4b50      	ldr	r3, [pc, #320]	; (800a3b4 <step_through_pole_angles+0x30c>)
 800a274:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a276:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a27a:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a27e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


		int32_t low_bracket = EncVal[counter] - 50; // note can be negative //todo still a problem when it's right around 0!
 800a282:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a286:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a28a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a28e:	3b32      	subs	r3, #50	; 0x32
 800a290:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
		int32_t high_bracket = EncVal[counter] + 50; // note can be >ENC_STEPS
 800a294:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a298:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a0:	3332      	adds	r3, #50	; 0x32
 800a2a2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c


		char local_buf[300];
		local_buf[0] = '\0';
 800a2a6:	463b      	mov	r3, r7
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	701a      	strb	r2, [r3, #0]
		sprintf(buf_msg, "[step_through_pole_angles] array: %d counter: %d Enc: %d \r\n", (int)EncVal[counter], (int)counter, (int)TIM8->CNT);
 800a2ac:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a2b0:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800a2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2b8:	461a      	mov	r2, r3
 800a2ba:	4b3e      	ldr	r3, [pc, #248]	; (800a3b4 <step_through_pole_angles+0x30c>)
 800a2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2be:	9300      	str	r3, [sp, #0]
 800a2c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800a2c4:	493d      	ldr	r1, [pc, #244]	; (800a3bc <step_through_pole_angles+0x314>)
 800a2c6:	483e      	ldr	r0, [pc, #248]	; (800a3c0 <step_through_pole_angles+0x318>)
 800a2c8:	f002 ffa2 	bl	800d210 <siprintf>
		if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a2cc:	483c      	ldr	r0, [pc, #240]	; (800a3c0 <step_through_pole_angles+0x318>)
 800a2ce:	f7f5 ff7f 	bl	80001d0 <strlen>
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	483b      	ldr	r0, [pc, #236]	; (800a3c4 <step_through_pole_angles+0x31c>)
 800a2d6:	f7f5 ff7b 	bl	80001d0 <strlen>
 800a2da:	4603      	mov	r3, r0
 800a2dc:	4423      	add	r3, r4
 800a2de:	2b63      	cmp	r3, #99	; 0x63
 800a2e0:	d804      	bhi.n	800a2ec <step_through_pole_angles+0x244>
			strcat(buf_msgs, buf_msg);
 800a2e2:	4937      	ldr	r1, [pc, #220]	; (800a3c0 <step_through_pole_angles+0x318>)
 800a2e4:	4837      	ldr	r0, [pc, #220]	; (800a3c4 <step_through_pole_angles+0x31c>)
 800a2e6:	f002 ffb3 	bl	800d250 <strcat>
 800a2ea:	e002      	b.n	800a2f2 <step_through_pole_angles+0x24a>
		}
		else {
			buf_msgs[0] = '#';
 800a2ec:	4b35      	ldr	r3, [pc, #212]	; (800a3c4 <step_through_pole_angles+0x31c>)
 800a2ee:	2223      	movs	r2, #35	; 0x23
 800a2f0:	701a      	strb	r2, [r3, #0]
		}
		if (buf_msgs[0] != '\0'){
 800a2f2:	4b34      	ldr	r3, [pc, #208]	; (800a3c4 <step_through_pole_angles+0x31c>)
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d007      	beq.n	800a30a <step_through_pole_angles+0x262>
			strcat(local_buf, buf_msgs);
 800a2fa:	463b      	mov	r3, r7
 800a2fc:	4931      	ldr	r1, [pc, #196]	; (800a3c4 <step_through_pole_angles+0x31c>)
 800a2fe:	4618      	mov	r0, r3
 800a300:	f002 ffa6 	bl	800d250 <strcat>
			buf_msgs[0] = '\0';
 800a304:	4b2f      	ldr	r3, [pc, #188]	; (800a3c4 <step_through_pole_angles+0x31c>)
 800a306:	2200      	movs	r2, #0
 800a308:	701a      	strb	r2, [r3, #0]
		}
		//HAL_UART_Transmit_IT(&huart3, local_buf, strlen((char*)local_buf)); //WORKS but replaced by DMA below
		huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800a30a:	4b2f      	ldr	r3, [pc, #188]	; (800a3c8 <step_through_pole_angles+0x320>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	695a      	ldr	r2, [r3, #20]
 800a310:	4b2d      	ldr	r3, [pc, #180]	; (800a3c8 <step_through_pole_angles+0x320>)
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a318:	615a      	str	r2, [r3, #20]
		HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)local_buf, (uint32_t)&huart3.Instance->DR, strlen(local_buf));
 800a31a:	463c      	mov	r4, r7
 800a31c:	4b2a      	ldr	r3, [pc, #168]	; (800a3c8 <step_through_pole_angles+0x320>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	3304      	adds	r3, #4
 800a322:	461e      	mov	r6, r3
 800a324:	463b      	mov	r3, r7
 800a326:	4618      	mov	r0, r3
 800a328:	f7f5 ff52 	bl	80001d0 <strlen>
 800a32c:	4603      	mov	r3, r0
 800a32e:	4632      	mov	r2, r6
 800a330:	4621      	mov	r1, r4
 800a332:	4826      	ldr	r0, [pc, #152]	; (800a3cc <step_through_pole_angles+0x324>)
 800a334:	f7f8 fcee 	bl	8002d14 <HAL_DMA_Start_IT>


		if (counter > 0 && high_bracket > EncVal[0] && low_bracket < EncVal[0]){
 800a338:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	dd12      	ble.n	800a366 <step_through_pole_angles+0x2be>
 800a340:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800a34a:	429a      	cmp	r2, r3
 800a34c:	d20b      	bcs.n	800a366 <step_through_pole_angles+0x2be>
 800a34e:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800a358:	429a      	cmp	r2, r3
 800a35a:	d904      	bls.n	800a366 <step_through_pole_angles+0x2be>
			N_POLES = counter ; //SET MOTOR SPECIFIC VALUE
 800a35c:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <step_through_pole_angles+0x328>)
 800a35e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800a362:	6013      	str	r3, [r2, #0]
 800a364:	e010      	b.n	800a388 <step_through_pole_angles+0x2e0>
			//done = true;
			break;
		}
		counter ++;
 800a366:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800a36a:	3301      	adds	r3, #1
 800a36c:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	for (int u = 0 ; u < poles_max; u++){
 800a370:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800a374:	3301      	adds	r3, #1
 800a376:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
 800a37a:	f8d7 3288 	ldr.w	r3, [r7, #648]	; 0x288
 800a37e:	f8d7 2278 	ldr.w	r2, [r7, #632]	; 0x278
 800a382:	429a      	cmp	r2, r3
 800a384:	f63f af33 	bhi.w	800a1ee <step_through_pole_angles+0x146>
	}
	set_pwm_off();
 800a388:	f7ff fe7c 	bl	800a084 <set_pwm_off>

	// --- DETERMINE phase0
	int32_t ENCpPOLE_1000 = ((int32_t)ENC_STEPS * 1000) / (int32_t)N_POLES;
 800a38c:	4b10      	ldr	r3, [pc, #64]	; (800a3d0 <step_through_pole_angles+0x328>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4a10      	ldr	r2, [pc, #64]	; (800a3d4 <step_through_pole_angles+0x32c>)
 800a392:	fb92 f3f3 	sdiv	r3, r2, r3
 800a396:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	int32_t acc_Enc0_1000 = 0;
 800a39a:	2300      	movs	r3, #0
 800a39c:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 	for (int i = 0; i < N_POLES ; i++){
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800a3a6:	e035      	b.n	800a414 <step_through_pole_angles+0x36c>
 800a3a8:	20000018 	.word	0x20000018
 800a3ac:	40021000 	.word	0x40021000
 800a3b0:	40010000 	.word	0x40010000
 800a3b4:	40010400 	.word	0x40010400
 800a3b8:	200000d4 	.word	0x200000d4
 800a3bc:	0800ee00 	.word	0x0800ee00
 800a3c0:	2000250c 	.word	0x2000250c
 800a3c4:	20001834 	.word	0x20001834
 800a3c8:	2000059c 	.word	0x2000059c
 800a3cc:	20000b40 	.word	0x20000b40
 800a3d0:	2000000c 	.word	0x2000000c
 800a3d4:	003d0900 	.word	0x003d0900
		acc_Enc0_1000 += ((int32_t)EncVal[i]*1000) % ENCpPOLE_1000;
 800a3d8:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 800a3dc:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800a3e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a3ea:	fb03 f302 	mul.w	r3, r3, r2
 800a3ee:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800a3f2:	fb93 f2f2 	sdiv	r2, r3, r2
 800a3f6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800a3fa:	fb01 f202 	mul.w	r2, r1, r2
 800a3fe:	1a9b      	subs	r3, r3, r2
 800a400:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 800a404:	4413      	add	r3, r2
 800a406:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 	for (int i = 0; i < N_POLES ; i++){
 800a40a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800a40e:	3301      	adds	r3, #1
 800a410:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800a414:	4b3d      	ldr	r3, [pc, #244]	; (800a50c <step_through_pole_angles+0x464>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 800a41c:	429a      	cmp	r2, r3
 800a41e:	dbdb      	blt.n	800a3d8 <step_through_pole_angles+0x330>
	}
	phase0 = (float) acc_Enc0_1000 / 1000.0f / (float)ENC_STEPS * PI2; //SET MOTOR SPECIFIC VALUE // * (float) N_POLES/ (float) N_POLES cancels out
 800a420:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800a424:	ee07 3a90 	vmov	s15, r3
 800a428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a42c:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a510 <step_through_pole_angles+0x468>
 800a430:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a434:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a514 <step_through_pole_angles+0x46c>
 800a438:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a43c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800a518 <step_through_pole_angles+0x470>
 800a440:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a444:	4b35      	ldr	r3, [pc, #212]	; (800a51c <step_through_pole_angles+0x474>)
 800a446:	edc3 7a00 	vstr	s15, [r3]
	//todo this calculation gets into trouble when phase shift is close to 0 because the mod operation may give vastly different results !!!

	char local_buf[300];
	local_buf[0] = '\0';
 800a44a:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800a44e:	2200      	movs	r2, #0
 800a450:	701a      	strb	r2, [r3, #0]
	sprintf(buf_msg, "MOTOR CHARACTERISTIC: INVERT: %d N_POLES: %d phase0: %d \r\n", (int)INVERT, (int)N_POLES, (int)(phase0*100.0f));
 800a452:	4b33      	ldr	r3, [pc, #204]	; (800a520 <step_through_pole_angles+0x478>)
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	4b2d      	ldr	r3, [pc, #180]	; (800a50c <step_through_pole_angles+0x464>)
 800a458:	6819      	ldr	r1, [r3, #0]
 800a45a:	4b30      	ldr	r3, [pc, #192]	; (800a51c <step_through_pole_angles+0x474>)
 800a45c:	edd3 7a00 	vldr	s15, [r3]
 800a460:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800a524 <step_through_pole_angles+0x47c>
 800a464:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a468:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a46c:	ee17 3a90 	vmov	r3, s15
 800a470:	9300      	str	r3, [sp, #0]
 800a472:	460b      	mov	r3, r1
 800a474:	492c      	ldr	r1, [pc, #176]	; (800a528 <step_through_pole_angles+0x480>)
 800a476:	482d      	ldr	r0, [pc, #180]	; (800a52c <step_through_pole_angles+0x484>)
 800a478:	f002 feca 	bl	800d210 <siprintf>
	if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a47c:	482b      	ldr	r0, [pc, #172]	; (800a52c <step_through_pole_angles+0x484>)
 800a47e:	f7f5 fea7 	bl	80001d0 <strlen>
 800a482:	4604      	mov	r4, r0
 800a484:	482a      	ldr	r0, [pc, #168]	; (800a530 <step_through_pole_angles+0x488>)
 800a486:	f7f5 fea3 	bl	80001d0 <strlen>
 800a48a:	4603      	mov	r3, r0
 800a48c:	4423      	add	r3, r4
 800a48e:	2b63      	cmp	r3, #99	; 0x63
 800a490:	d804      	bhi.n	800a49c <step_through_pole_angles+0x3f4>
		strcat(buf_msgs, buf_msg);
 800a492:	4926      	ldr	r1, [pc, #152]	; (800a52c <step_through_pole_angles+0x484>)
 800a494:	4826      	ldr	r0, [pc, #152]	; (800a530 <step_through_pole_angles+0x488>)
 800a496:	f002 fedb 	bl	800d250 <strcat>
 800a49a:	e002      	b.n	800a4a2 <step_through_pole_angles+0x3fa>
	}
	else {
		buf_msgs[0] = '#';
 800a49c:	4b24      	ldr	r3, [pc, #144]	; (800a530 <step_through_pole_angles+0x488>)
 800a49e:	2223      	movs	r2, #35	; 0x23
 800a4a0:	701a      	strb	r2, [r3, #0]
	}
	if (buf_msgs[0] != '\0'){
 800a4a2:	4b23      	ldr	r3, [pc, #140]	; (800a530 <step_through_pole_angles+0x488>)
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d008      	beq.n	800a4bc <step_through_pole_angles+0x414>
		strcat(local_buf, buf_msgs);
 800a4aa:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800a4ae:	4920      	ldr	r1, [pc, #128]	; (800a530 <step_through_pole_angles+0x488>)
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f002 fecd 	bl	800d250 <strcat>
		buf_msgs[0] = '\0';
 800a4b6:	4b1e      	ldr	r3, [pc, #120]	; (800a530 <step_through_pole_angles+0x488>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	701a      	strb	r2, [r3, #0]
	}
	//HAL_UART_Transmit_IT(&huart3, local_buf, strlen((char*)local_buf)); //WORKS but replaced by DMA below
	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800a4bc:	4b1d      	ldr	r3, [pc, #116]	; (800a534 <step_through_pole_angles+0x48c>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	695a      	ldr	r2, [r3, #20]
 800a4c2:	4b1c      	ldr	r3, [pc, #112]	; (800a534 <step_through_pole_angles+0x48c>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a4ca:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)local_buf, (uint32_t)&huart3.Instance->DR, strlen(local_buf));
 800a4cc:	f507 7496 	add.w	r4, r7, #300	; 0x12c
 800a4d0:	4b18      	ldr	r3, [pc, #96]	; (800a534 <step_through_pole_angles+0x48c>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	3304      	adds	r3, #4
 800a4d6:	461e      	mov	r6, r3
 800a4d8:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7f5 fe77 	bl	80001d0 <strlen>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	4632      	mov	r2, r6
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4813      	ldr	r0, [pc, #76]	; (800a538 <step_through_pole_angles+0x490>)
 800a4ea:	f7f8 fc13 	bl	8002d14 <HAL_DMA_Start_IT>
	HAL_Delay(200);
 800a4ee:	20c8      	movs	r0, #200	; 0xc8
 800a4f0:	f7f6 fd9c 	bl	800102c <HAL_Delay>


	set_pwm_off();
 800a4f4:	f7ff fdc6 	bl	800a084 <set_pwm_off>
	normal_pwm_update = true;
 800a4f8:	4b10      	ldr	r3, [pc, #64]	; (800a53c <step_through_pole_angles+0x494>)
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	701a      	strb	r2, [r3, #0]
 800a4fe:	46ad      	mov	sp, r5


}
 800a500:	bf00      	nop
 800a502:	f507 7725 	add.w	r7, r7, #660	; 0x294
 800a506:	46bd      	mov	sp, r7
 800a508:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50a:	bf00      	nop
 800a50c:	2000000c 	.word	0x2000000c
 800a510:	447a0000 	.word	0x447a0000
 800a514:	457a0000 	.word	0x457a0000
 800a518:	40c90fd0 	.word	0x40c90fd0
 800a51c:	20000008 	.word	0x20000008
 800a520:	200000d4 	.word	0x200000d4
 800a524:	42c80000 	.word	0x42c80000
 800a528:	0800ee3c 	.word	0x0800ee3c
 800a52c:	2000250c 	.word	0x2000250c
 800a530:	20001834 	.word	0x20001834
 800a534:	2000059c 	.word	0x2000059c
 800a538:	20000b40 	.word	0x20000b40
 800a53c:	20000018 	.word	0x20000018

0800a540 <step_through_pwm_percent>:

void step_through_pwm_percent(void){
 800a540:	b580      	push	{r7, lr}
 800a542:	b08c      	sub	sp, #48	; 0x30
 800a544:	af00      	add	r7, sp, #0
	uint16_t pole_angle_by_amp[20];
	normal_pwm_update = false;
 800a546:	4b1a      	ldr	r3, [pc, #104]	; (800a5b0 <step_through_pwm_percent+0x70>)
 800a548:	2200      	movs	r2, #0
 800a54a:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a54c:	f7ff fd9a 	bl	800a084 <set_pwm_off>
	HAL_Delay(100);
 800a550:	2064      	movs	r0, #100	; 0x64
 800a552:	f7f6 fd6b 	bl	800102c <HAL_Delay>
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800a556:	2300      	movs	r3, #0
 800a558:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a55c:	e01b      	b.n	800a596 <step_through_pwm_percent+0x56>
		TIM1->CCR1 = percent * PWM_1PERCENT;
 800a55e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800a562:	4613      	mov	r3, r2
 800a564:	009b      	lsls	r3, r3, #2
 800a566:	4413      	add	r3, r2
 800a568:	00db      	lsls	r3, r3, #3
 800a56a:	441a      	add	r2, r3
 800a56c:	4b11      	ldr	r3, [pc, #68]	; (800a5b4 <step_through_pwm_percent+0x74>)
 800a56e:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(200);
 800a570:	20c8      	movs	r0, #200	; 0xc8
 800a572:	f7f6 fd5b 	bl	800102c <HAL_Delay>
		pole_angle_by_amp[percent]=TIM8->CNT;
 800a576:	4b10      	ldr	r3, [pc, #64]	; (800a5b8 <step_through_pwm_percent+0x78>)
 800a578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a57a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a57e:	b292      	uxth	r2, r2
 800a580:	005b      	lsls	r3, r3, #1
 800a582:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800a586:	440b      	add	r3, r1
 800a588:	f823 2c2c 	strh.w	r2, [r3, #-44]
	for (uint8_t percent = 0; percent < 10 ; percent++){
 800a58c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a590:	3301      	adds	r3, #1
 800a592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800a596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a59a:	2b09      	cmp	r3, #9
 800a59c:	d9df      	bls.n	800a55e <step_through_pwm_percent+0x1e>
	}
	set_pwm_off();
 800a59e:	f7ff fd71 	bl	800a084 <set_pwm_off>
	normal_pwm_update = true;
 800a5a2:	4b03      	ldr	r3, [pc, #12]	; (800a5b0 <step_through_pwm_percent+0x70>)
 800a5a4:	2201      	movs	r2, #1
 800a5a6:	701a      	strb	r2, [r3, #0]
}
 800a5a8:	bf00      	nop
 800a5aa:	3730      	adds	r7, #48	; 0x30
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	bd80      	pop	{r7, pc}
 800a5b0:	20000018 	.word	0x20000018
 800a5b4:	40010000 	.word	0x40010000
 800a5b8:	40010400 	.word	0x40010400

0800a5bc <explore_limits>:

void explore_limits(void){
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
	amp = 0;
 800a5c2:	4b35      	ldr	r3, [pc, #212]	; (800a698 <explore_limits+0xdc>)
 800a5c4:	f04f 0200 	mov.w	r2, #0
 800a5c8:	601a      	str	r2, [r3, #0]
	HAL_Delay(100);
 800a5ca:	2064      	movs	r0, #100	; 0x64
 800a5cc:	f7f6 fd2e 	bl	800102c <HAL_Delay>
	for (int8_t dir=-1;dir<2; dir+=2){
 800a5d0:	23ff      	movs	r3, #255	; 0xff
 800a5d2:	73fb      	strb	r3, [r7, #15]
 800a5d4:	e055      	b.n	800a682 <explore_limits+0xc6>
		HAL_Delay(500);
 800a5d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800a5da:	f7f6 fd27 	bl	800102c <HAL_Delay>
		amp= dir * 0.1f;
 800a5de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5e2:	ee07 3a90 	vmov	s15, r3
 800a5e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a5ea:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800a69c <explore_limits+0xe0>
 800a5ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a5f2:	4b29      	ldr	r3, [pc, #164]	; (800a698 <explore_limits+0xdc>)
 800a5f4:	edc3 7a00 	vstr	s15, [r3]
		for (int32_t i = 0; i<50; i++){
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	60bb      	str	r3, [r7, #8]
 800a5fc:	e03a      	b.n	800a674 <explore_limits+0xb8>
			HAL_Delay(100);
 800a5fe:	2064      	movs	r0, #100	; 0x64
 800a600:	f7f6 fd14 	bl	800102c <HAL_Delay>
			uint32_t val_I = HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);
 800a604:	2104      	movs	r1, #4
 800a606:	4826      	ldr	r0, [pc, #152]	; (800a6a0 <explore_limits+0xe4>)
 800a608:	f7f7 fb2e 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800a60c:	6078      	str	r0, [r7, #4]
			if (val_I > 2100 || val_I < 1980){
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	f640 0234 	movw	r2, #2100	; 0x834
 800a614:	4293      	cmp	r3, r2
 800a616:	d804      	bhi.n	800a622 <explore_limits+0x66>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f240 72bb 	movw	r2, #1979	; 0x7bb
 800a61e:	4293      	cmp	r3, r2
 800a620:	d825      	bhi.n	800a66e <explore_limits+0xb2>
				amp=0;
 800a622:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <explore_limits+0xdc>)
 800a624:	f04f 0200 	mov.w	r2, #0
 800a628:	601a      	str	r2, [r3, #0]
				uint32_t EncVal_lim = TIM8->CNT;
 800a62a:	4b1e      	ldr	r3, [pc, #120]	; (800a6a4 <explore_limits+0xe8>)
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	603b      	str	r3, [r7, #0]
				if (dir==-1){
 800a630:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a638:	d10c      	bne.n	800a654 <explore_limits+0x98>
					Enc_Val_total_lim_m = EncVal_lim + rotation_counter * ENC_STEPS;
 800a63a:	4b1b      	ldr	r3, [pc, #108]	; (800a6a8 <explore_limits+0xec>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	461a      	mov	r2, r3
 800a648:	683b      	ldr	r3, [r7, #0]
 800a64a:	4413      	add	r3, r2
 800a64c:	461a      	mov	r2, r3
 800a64e:	4b17      	ldr	r3, [pc, #92]	; (800a6ac <explore_limits+0xf0>)
 800a650:	601a      	str	r2, [r3, #0]
				else{
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;

				}

				break;
 800a652:	e012      	b.n	800a67a <explore_limits+0xbe>
					Enc_Val_total_lim_p = EncVal_lim + rotation_counter * ENC_STEPS;
 800a654:	4b14      	ldr	r3, [pc, #80]	; (800a6a8 <explore_limits+0xec>)
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a65c:	fb02 f303 	mul.w	r3, r2, r3
 800a660:	461a      	mov	r2, r3
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	4413      	add	r3, r2
 800a666:	461a      	mov	r2, r3
 800a668:	4b11      	ldr	r3, [pc, #68]	; (800a6b0 <explore_limits+0xf4>)
 800a66a:	601a      	str	r2, [r3, #0]
				break;
 800a66c:	e005      	b.n	800a67a <explore_limits+0xbe>
		for (int32_t i = 0; i<50; i++){
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	3301      	adds	r3, #1
 800a672:	60bb      	str	r3, [r7, #8]
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2b31      	cmp	r3, #49	; 0x31
 800a678:	ddc1      	ble.n	800a5fe <explore_limits+0x42>
	for (int8_t dir=-1;dir<2; dir+=2){
 800a67a:	7bfb      	ldrb	r3, [r7, #15]
 800a67c:	3302      	adds	r3, #2
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	73fb      	strb	r3, [r7, #15]
 800a682:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a686:	2b01      	cmp	r3, #1
 800a688:	dda5      	ble.n	800a5d6 <explore_limits+0x1a>
			}
		}
	}

	amp = 0.01f;
 800a68a:	4b03      	ldr	r3, [pc, #12]	; (800a698 <explore_limits+0xdc>)
 800a68c:	4a09      	ldr	r2, [pc, #36]	; (800a6b4 <explore_limits+0xf8>)
 800a68e:	601a      	str	r2, [r3, #0]
}
 800a690:	bf00      	nop
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	200000e4 	.word	0x200000e4
 800a69c:	3dcccccd 	.word	0x3dcccccd
 800a6a0:	20000cc8 	.word	0x20000cc8
 800a6a4:	40010400 	.word	0x40010400
 800a6a8:	200000f0 	.word	0x200000f0
 800a6ac:	200000f4 	.word	0x200000f4
 800a6b0:	200000f8 	.word	0x200000f8
 800a6b4:	3c23d70a 	.word	0x3c23d70a

0800a6b8 <delay_SPI>:



void delay_SPI(void){
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
	int g =0;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	603b      	str	r3, [r7, #0]
 800a6c6:	e005      	b.n	800a6d4 <delay_SPI+0x1c>
		g++;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	607b      	str	r3, [r7, #4]
	for(int i=0; i<20; i++){
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	3301      	adds	r3, #1
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	2b13      	cmp	r3, #19
 800a6d8:	ddf6      	ble.n	800a6c8 <delay_SPI+0x10>
	}
}
 800a6da:	bf00      	nop
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	4770      	bx	lr
	...

0800a6e8 <playSound>:


void playSound(uint32_t periode, uint32_t volume, uint32_t cycles){
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b086      	sub	sp, #24
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	60f8      	str	r0, [r7, #12]
 800a6f0:	60b9      	str	r1, [r7, #8]
 800a6f2:	607a      	str	r2, [r7, #4]
	// TODO disable interrupt for the duration of sound
	//HAL_NVIC_DisableIRQ(TIM8_UP_TIM13_IRQn);
	//HAL_Delay(1000);
	normal_pwm_update = false;
 800a6f4:	4b16      	ldr	r3, [pc, #88]	; (800a750 <playSound+0x68>)
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	701a      	strb	r2, [r3, #0]
	set_pwm_off();
 800a6fa:	f7ff fcc3 	bl	800a084 <set_pwm_off>
	HAL_Delay(10);
 800a6fe:	200a      	movs	r0, #10
 800a700:	f7f6 fc94 	bl	800102c <HAL_Delay>

	for (uint32_t i=0; i<cycles; i++){
 800a704:	2300      	movs	r3, #0
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e014      	b.n	800a734 <playSound+0x4c>
		TIM1->CCR1 = 0; //takes<150ns
 800a70a:	4b12      	ldr	r3, [pc, #72]	; (800a754 <playSound+0x6c>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = volume; //takes<150ns
 800a710:	4a10      	ldr	r2, [pc, #64]	; (800a754 <playSound+0x6c>)
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	6393      	str	r3, [r2, #56]	; 0x38
		HAL_Delay(periode);
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	f7f6 fc88 	bl	800102c <HAL_Delay>
		TIM1->CCR1 = volume; //takes<150ns
 800a71c:	4a0d      	ldr	r2, [pc, #52]	; (800a754 <playSound+0x6c>)
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	6353      	str	r3, [r2, #52]	; 0x34
		TIM1->CCR2 = 0; //takes<150ns
 800a722:	4b0c      	ldr	r3, [pc, #48]	; (800a754 <playSound+0x6c>)
 800a724:	2200      	movs	r2, #0
 800a726:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_Delay(periode);
 800a728:	68f8      	ldr	r0, [r7, #12]
 800a72a:	f7f6 fc7f 	bl	800102c <HAL_Delay>
	for (uint32_t i=0; i<cycles; i++){
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	3301      	adds	r3, #1
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	697a      	ldr	r2, [r7, #20]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	429a      	cmp	r2, r3
 800a73a:	d3e6      	bcc.n	800a70a <playSound+0x22>
	}
	set_pwm_off();
 800a73c:	f7ff fca2 	bl	800a084 <set_pwm_off>
	normal_pwm_update = true;
 800a740:	4b03      	ldr	r3, [pc, #12]	; (800a750 <playSound+0x68>)
 800a742:	2201      	movs	r2, #1
 800a744:	701a      	strb	r2, [r3, #0]

	//HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
}
 800a746:	bf00      	nop
 800a748:	3718      	adds	r7, #24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20000018 	.word	0x20000018
 800a754:	40010000 	.word	0x40010000

0800a758 <calc_lookup>:


void calc_lookup(float *lookup){
 800a758:	b5b0      	push	{r4, r5, r7, lr}
 800a75a:	b084      	sub	sp, #16
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<210; i++){
 800a760:	2300      	movs	r3, #0
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	e049      	b.n	800a7fa <calc_lookup+0xa2>
		// --- vanilla
		lookup[i] = 0.5773f * (cos((float)i/100.0f) + cos((float)i/100.0f-1.047f));
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	ee07 3a90 	vmov	s15, r3
 800a76c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a770:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800a810 <calc_lookup+0xb8>
 800a774:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a778:	ee16 0a90 	vmov	r0, s13
 800a77c:	f7f5 fee4 	bl	8000548 <__aeabi_f2d>
 800a780:	4603      	mov	r3, r0
 800a782:	460c      	mov	r4, r1
 800a784:	ec44 3b10 	vmov	d0, r3, r4
 800a788:	f003 f95a 	bl	800da40 <cos>
 800a78c:	ec55 4b10 	vmov	r4, r5, d0
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	ee07 3a90 	vmov	s15, r3
 800a796:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a79a:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800a810 <calc_lookup+0xb8>
 800a79e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a7a2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800a814 <calc_lookup+0xbc>
 800a7a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a7aa:	ee17 0a90 	vmov	r0, s15
 800a7ae:	f7f5 fecb 	bl	8000548 <__aeabi_f2d>
 800a7b2:	4602      	mov	r2, r0
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	ec43 2b10 	vmov	d0, r2, r3
 800a7ba:	f003 f941 	bl	800da40 <cos>
 800a7be:	ec53 2b10 	vmov	r2, r3, d0
 800a7c2:	4620      	mov	r0, r4
 800a7c4:	4629      	mov	r1, r5
 800a7c6:	f7f5 fd61 	bl	800028c <__adddf3>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	460c      	mov	r4, r1
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	4621      	mov	r1, r4
 800a7d2:	a30d      	add	r3, pc, #52	; (adr r3, 800a808 <calc_lookup+0xb0>)
 800a7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7d8:	f7f5 ff0e 	bl	80005f8 <__aeabi_dmul>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	460c      	mov	r4, r1
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	4621      	mov	r1, r4
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	009b      	lsls	r3, r3, #2
 800a7e8:	687a      	ldr	r2, [r7, #4]
 800a7ea:	18d4      	adds	r4, r2, r3
 800a7ec:	f7f6 f9dc 	bl	8000ba8 <__aeabi_d2f>
 800a7f0:	4603      	mov	r3, r0
 800a7f2:	6023      	str	r3, [r4, #0]
	for (int i=0; i<210; i++){
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	3301      	adds	r3, #1
 800a7f8:	60fb      	str	r3, [r7, #12]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2bd1      	cmp	r3, #209	; 0xd1
 800a7fe:	ddb2      	ble.n	800a766 <calc_lookup+0xe>
		//lookup[i] = 0.5773f * (cos((float)i/100.0f)       + amp_harmonic * cos( (float)i/100.0f       * 3.0f)    +  cos((float)i/100.0f-1.047f) + amp_harmonic * cos(((float)i/100.0f-1.047f)* 3.0f)) ;// the harmonic tends to fully cancel out

		// --- power law
		//lookup[i] = 0.5773f * (pow( cos((float)i/100.0f) + cos((float)i/100.0f-1.047f),amp_harmonic)/ pow(amp_harmonic,0.5f)); //looks like 1.0 is already best in terms of overtones
	}
}
 800a800:	bf00      	nop
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bdb0      	pop	{r4, r5, r7, pc}
 800a808:	e0000000 	.word	0xe0000000
 800a80c:	3fe2793d 	.word	0x3fe2793d
 800a810:	42c80000 	.word	0x42c80000
 800a814:	3f860419 	.word	0x3f860419

0800a818 <calc_sin_lookup>:

void calc_sin_lookup(float *sin_lookup){
 800a818:	b590      	push	{r4, r7, lr}
 800a81a:	b085      	sub	sp, #20
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
	for (int i=0; i<628; i++){
 800a820:	2300      	movs	r3, #0
 800a822:	60fb      	str	r3, [r7, #12]
 800a824:	e01f      	b.n	800a866 <calc_sin_lookup+0x4e>
		sin_lookup[i] = sin((float)i/100.0f);
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	ee07 3a90 	vmov	s15, r3
 800a82c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a830:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a878 <calc_sin_lookup+0x60>
 800a834:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a838:	ee16 0a90 	vmov	r0, s13
 800a83c:	f7f5 fe84 	bl	8000548 <__aeabi_f2d>
 800a840:	4603      	mov	r3, r0
 800a842:	460c      	mov	r4, r1
 800a844:	ec44 3b10 	vmov	d0, r3, r4
 800a848:	f003 f93e 	bl	800dac8 <sin>
 800a84c:	ec51 0b10 	vmov	r0, r1, d0
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	18d4      	adds	r4, r2, r3
 800a858:	f7f6 f9a6 	bl	8000ba8 <__aeabi_d2f>
 800a85c:	4603      	mov	r3, r0
 800a85e:	6023      	str	r3, [r4, #0]
	for (int i=0; i<628; i++){
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	3301      	adds	r3, #1
 800a864:	60fb      	str	r3, [r7, #12]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 800a86c:	dbdb      	blt.n	800a826 <calc_sin_lookup+0xe>
	}
}
 800a86e:	bf00      	nop
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	bd90      	pop	{r4, r7, pc}
 800a876:	bf00      	nop
 800a878:	42c80000 	.word	0x42c80000

0800a87c <calc_cos_lookup>:

void calc_cos_lookup(float *cos_lookup){
 800a87c:	b590      	push	{r4, r7, lr}
 800a87e:	b085      	sub	sp, #20
 800a880:	af00      	add	r7, sp, #0
 800a882:	6078      	str	r0, [r7, #4]
	for (int i=0; i<628; i++){
 800a884:	2300      	movs	r3, #0
 800a886:	60fb      	str	r3, [r7, #12]
 800a888:	e01f      	b.n	800a8ca <calc_cos_lookup+0x4e>
		cos_lookup[i] = cos((float)i/100.0f);
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	ee07 3a90 	vmov	s15, r3
 800a890:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a894:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800a8dc <calc_cos_lookup+0x60>
 800a898:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800a89c:	ee16 0a90 	vmov	r0, s13
 800a8a0:	f7f5 fe52 	bl	8000548 <__aeabi_f2d>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	460c      	mov	r4, r1
 800a8a8:	ec44 3b10 	vmov	d0, r3, r4
 800a8ac:	f003 f8c8 	bl	800da40 <cos>
 800a8b0:	ec51 0b10 	vmov	r0, r1, d0
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	009b      	lsls	r3, r3, #2
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	18d4      	adds	r4, r2, r3
 800a8bc:	f7f6 f974 	bl	8000ba8 <__aeabi_d2f>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	6023      	str	r3, [r4, #0]
	for (int i=0; i<628; i++){
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3301      	adds	r3, #1
 800a8c8:	60fb      	str	r3, [r7, #12]
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f5b3 7f1d 	cmp.w	r3, #628	; 0x274
 800a8d0:	dbdb      	blt.n	800a88a <calc_cos_lookup+0xe>
	}
}
 800a8d2:	bf00      	nop
 800a8d4:	3714      	adds	r7, #20
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd90      	pop	{r4, r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	42c80000 	.word	0x42c80000

0800a8e0 <DMAUSARTTransferComplete>:

void DMAUSARTTransferComplete(DMA_HandleTypeDef *hdma){
 800a8e0:	b480      	push	{r7}
 800a8e2:	b083      	sub	sp, #12
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
	huart3.Instance->CR3 &= ~USART_CR3_DMAT;
 800a8e8:	4b06      	ldr	r3, [pc, #24]	; (800a904 <DMAUSARTTransferComplete+0x24>)
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	695a      	ldr	r2, [r3, #20]
 800a8ee:	4b05      	ldr	r3, [pc, #20]	; (800a904 <DMAUSARTTransferComplete+0x24>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a8f6:	615a      	str	r2, [r3, #20]
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	2000059c 	.word	0x2000059c

0800a908 <HAL_GPIO_EXTI_Callback>:




// --- Callback when Encoder fires the I at zero point
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800a908:	b590      	push	{r4, r7, lr}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT0_I_W_Pin){
 800a912:	88fb      	ldrh	r3, [r7, #6]
 800a914:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a918:	d147      	bne.n	800a9aa <HAL_GPIO_EXTI_Callback+0xa2>
		//HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_3);
		uint16_t encoder_belief = TIM8->CNT;
 800a91a:	4b26      	ldr	r3, [pc, #152]	; (800a9b4 <HAL_GPIO_EXTI_Callback+0xac>)
 800a91c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a91e:	81fb      	strh	r3, [r7, #14]

		if (counter0ing_at0crossing){
 800a920:	4b25      	ldr	r3, [pc, #148]	; (800a9b8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800a922:	781b      	ldrb	r3, [r3, #0]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d01e      	beq.n	800a966 <HAL_GPIO_EXTI_Callback+0x5e>
			TIM8->CNT = 0;     //TODO: this could lead to an offset of 1 since the CNT value may not be set yet and get incremented thereafter if this interrupt is executed before the CNT increment.
 800a928:	4b22      	ldr	r3, [pc, #136]	; (800a9b4 <HAL_GPIO_EXTI_Callback+0xac>)
 800a92a:	2200      	movs	r2, #0
 800a92c:	625a      	str	r2, [r3, #36]	; 0x24
			counter0ing_at0crossing = false;
 800a92e:	4b22      	ldr	r3, [pc, #136]	; (800a9b8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800a930:	2200      	movs	r2, #0
 800a932:	701a      	strb	r2, [r3, #0]
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at FIRST ZERO: %d \r\n", encoder_belief);
 800a934:	89fb      	ldrh	r3, [r7, #14]
 800a936:	461a      	mov	r2, r3
 800a938:	4920      	ldr	r1, [pc, #128]	; (800a9bc <HAL_GPIO_EXTI_Callback+0xb4>)
 800a93a:	4821      	ldr	r0, [pc, #132]	; (800a9c0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a93c:	f002 fc68 	bl	800d210 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a940:	481f      	ldr	r0, [pc, #124]	; (800a9c0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a942:	f7f5 fc45 	bl	80001d0 <strlen>
 800a946:	4604      	mov	r4, r0
 800a948:	481e      	ldr	r0, [pc, #120]	; (800a9c4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800a94a:	f7f5 fc41 	bl	80001d0 <strlen>
 800a94e:	4603      	mov	r3, r0
 800a950:	4423      	add	r3, r4
 800a952:	2b63      	cmp	r3, #99	; 0x63
 800a954:	d804      	bhi.n	800a960 <HAL_GPIO_EXTI_Callback+0x58>
				strcat(buf_msgs, buf_msg);
 800a956:	491a      	ldr	r1, [pc, #104]	; (800a9c0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a958:	481a      	ldr	r0, [pc, #104]	; (800a9c4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800a95a:	f002 fc79 	bl	800d250 <strcat>
 800a95e:	e002      	b.n	800a966 <HAL_GPIO_EXTI_Callback+0x5e>
			}
			else {
				buf_msgs[0] = '#';
 800a960:	4b18      	ldr	r3, [pc, #96]	; (800a9c4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800a962:	2223      	movs	r2, #35	; 0x23
 800a964:	701a      	strb	r2, [r3, #0]
			}
		}
		//val_SO1_buf_index = 0;

		if (encoder_belief > ENC_TOLERANCE && encoder_belief < ENC_STEPS - ENC_TOLERANCE){
 800a966:	89fb      	ldrh	r3, [r7, #14]
 800a968:	2b02      	cmp	r3, #2
 800a96a:	d91f      	bls.n	800a9ac <HAL_GPIO_EXTI_Callback+0xa4>
 800a96c:	89fb      	ldrh	r3, [r7, #14]
 800a96e:	f640 729d 	movw	r2, #3997	; 0xf9d
 800a972:	4293      	cmp	r3, r2
 800a974:	d81a      	bhi.n	800a9ac <HAL_GPIO_EXTI_Callback+0xa4>
			sprintf((char*)buf_msg, "[EXTI_Callback] EncVal at ZERO MISMATCH: %d \r\n", encoder_belief);
 800a976:	89fb      	ldrh	r3, [r7, #14]
 800a978:	461a      	mov	r2, r3
 800a97a:	4913      	ldr	r1, [pc, #76]	; (800a9c8 <HAL_GPIO_EXTI_Callback+0xc0>)
 800a97c:	4810      	ldr	r0, [pc, #64]	; (800a9c0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a97e:	f002 fc47 	bl	800d210 <siprintf>
			if (strlen(buf_msg) + strlen(buf_msgs) < 100){
 800a982:	480f      	ldr	r0, [pc, #60]	; (800a9c0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a984:	f7f5 fc24 	bl	80001d0 <strlen>
 800a988:	4604      	mov	r4, r0
 800a98a:	480e      	ldr	r0, [pc, #56]	; (800a9c4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800a98c:	f7f5 fc20 	bl	80001d0 <strlen>
 800a990:	4603      	mov	r3, r0
 800a992:	4423      	add	r3, r4
 800a994:	2b63      	cmp	r3, #99	; 0x63
 800a996:	d804      	bhi.n	800a9a2 <HAL_GPIO_EXTI_Callback+0x9a>
				strcat(buf_msgs, buf_msg);
 800a998:	4909      	ldr	r1, [pc, #36]	; (800a9c0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800a99a:	480a      	ldr	r0, [pc, #40]	; (800a9c4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800a99c:	f002 fc58 	bl	800d250 <strcat>
		}
	}
	else{
		__NOP();
	}
}
 800a9a0:	e004      	b.n	800a9ac <HAL_GPIO_EXTI_Callback+0xa4>
				buf_msgs[0] = '#';
 800a9a2:	4b08      	ldr	r3, [pc, #32]	; (800a9c4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800a9a4:	2223      	movs	r2, #35	; 0x23
 800a9a6:	701a      	strb	r2, [r3, #0]
}
 800a9a8:	e000      	b.n	800a9ac <HAL_GPIO_EXTI_Callback+0xa4>
		__NOP();
 800a9aa:	bf00      	nop
}
 800a9ac:	bf00      	nop
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd90      	pop	{r4, r7, pc}
 800a9b4:	40010400 	.word	0x40010400
 800a9b8:	2000001a 	.word	0x2000001a
 800a9bc:	0800ee78 	.word	0x0800ee78
 800a9c0:	2000250c 	.word	0x2000250c
 800a9c4:	20001834 	.word	0x20001834
 800a9c8:	0800eea4 	.word	0x0800eea4

0800a9cc <HAL_TIM_OC_DelayElapsedCallback>:

// -----------------------------------------------------------
// MAIN UPDATE STEP interrupt triggered by timer 1 channel 4 towards end of each pwm cycle
// -----------------------------------------------------------

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim){
 800a9cc:	b5b0      	push	{r4, r5, r7, lr}
 800a9ce:	ed2d 8b04 	vpush	{d8-d9}
 800a9d2:	b082      	sub	sp, #8
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
	if (htim != &htim1){
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4ac2      	ldr	r2, [pc, #776]	; (800ace4 <HAL_TIM_OC_DelayElapsedCallback+0x318>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	f040 817b 	bne.w	800acd8 <HAL_TIM_OC_DelayElapsedCallback+0x30c>
		return;
	}

#if DB_TIMING
	DB1H;
 800a9e2:	4bc1      	ldr	r3, [pc, #772]	; (800ace8 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 800a9e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9e8:	619a      	str	r2, [r3, #24]
#endif

	//timing_party();

	// --- get current encoder position
	register int32_t EncVal = TIM8->CNT;
 800a9ea:	4bc0      	ldr	r3, [pc, #768]	; (800acec <HAL_TIM_OC_DelayElapsedCallback+0x320>)
 800a9ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9ee:	461d      	mov	r5, r3
	register int32_t delta_EncVal = (int32_t)EncVal - (int32_t)last_EncVal_pwm;
 800a9f0:	4bbf      	ldr	r3, [pc, #764]	; (800acf0 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	1aec      	subs	r4, r5, r3
	last_EncVal_pwm = EncVal;
 800a9f6:	4bbe      	ldr	r3, [pc, #760]	; (800acf0 <HAL_TIM_OC_DelayElapsedCallback+0x324>)
 800a9f8:	601d      	str	r5, [r3, #0]




	// --- determine whether 0 crossing happened and adjust rotation_counter accordingly
	if (delta_EncVal > ENC_STEPS_HALF) {
 800a9fa:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
 800a9fe:	dd05      	ble.n	800aa0c <HAL_TIM_OC_DelayElapsedCallback+0x40>
		rotation_counter--;
 800aa00:	4bbc      	ldr	r3, [pc, #752]	; (800acf4 <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3b01      	subs	r3, #1
 800aa06:	4abb      	ldr	r2, [pc, #748]	; (800acf4 <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800aa08:	6013      	str	r3, [r2, #0]
 800aa0a:	e007      	b.n	800aa1c <HAL_TIM_OC_DelayElapsedCallback+0x50>
	}
	else if (delta_EncVal < -ENC_STEPS_HALF){
 800aa0c:	f514 6ffa 	cmn.w	r4, #2000	; 0x7d0
 800aa10:	da04      	bge.n	800aa1c <HAL_TIM_OC_DelayElapsedCallback+0x50>
		rotation_counter++;
 800aa12:	4bb8      	ldr	r3, [pc, #736]	; (800acf4 <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	3301      	adds	r3, #1
 800aa18:	4ab6      	ldr	r2, [pc, #728]	; (800acf4 <HAL_TIM_OC_DelayElapsedCallback+0x328>)
 800aa1a:	6013      	str	r3, [r2, #0]
	}// both statements 300ns



	// --- calculate the phase with respect to a pole cycle in 100x int
	pole_phase_int = (int)((PI2 * N_POLES / ENC_STEPS * (float) EncVal - phase0 + PI2) * 100.0f) % 628 ; //400ns when consolidated in one line
 800aa1c:	4bb6      	ldr	r3, [pc, #728]	; (800acf8 <HAL_TIM_OC_DelayElapsedCallback+0x32c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	ee07 3a90 	vmov	s15, r3
 800aa24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa28:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 800acfc <HAL_TIM_OC_DelayElapsedCallback+0x330>
 800aa2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa30:	eddf 6ab3 	vldr	s13, [pc, #716]	; 800ad00 <HAL_TIM_OC_DelayElapsedCallback+0x334>
 800aa34:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800aa38:	ee07 5a90 	vmov	s15, r5
 800aa3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aa40:	ee27 7a27 	vmul.f32	s14, s14, s15
 800aa44:	4baf      	ldr	r3, [pc, #700]	; (800ad04 <HAL_TIM_OC_DelayElapsedCallback+0x338>)
 800aa46:	edd3 7a00 	vldr	s15, [r3]
 800aa4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa4e:	ed9f 7aab 	vldr	s14, [pc, #684]	; 800acfc <HAL_TIM_OC_DelayElapsedCallback+0x330>
 800aa52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800aa56:	ed9f 7aac 	vldr	s14, [pc, #688]	; 800ad08 <HAL_TIM_OC_DelayElapsedCallback+0x33c>
 800aa5a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800aa5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800aa62:	ee17 2a90 	vmov	r2, s15
 800aa66:	4ba9      	ldr	r3, [pc, #676]	; (800ad0c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800aa68:	fb83 1302 	smull	r1, r3, r3, r2
 800aa6c:	11d9      	asrs	r1, r3, #7
 800aa6e:	17d3      	asrs	r3, r2, #31
 800aa70:	1acb      	subs	r3, r1, r3
 800aa72:	f44f 711d 	mov.w	r1, #628	; 0x274
 800aa76:	fb01 f303 	mul.w	r3, r1, r3
 800aa7a:	1ad3      	subs	r3, r2, r3
 800aa7c:	4aa4      	ldr	r2, [pc, #656]	; (800ad10 <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 800aa7e:	6013      	str	r3, [r2, #0]


	register int32_t A = HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I);//500ns
 800aa80:	2104      	movs	r1, #4
 800aa82:	48a4      	ldr	r0, [pc, #656]	; (800ad14 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 800aa84:	f7f7 f8f0 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800aa88:	4603      	mov	r3, r0
 800aa8a:	ee09 3a10 	vmov	s18, r3
	register int32_t B = HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I);//500ns
 800aa8e:	2104      	movs	r1, #4
 800aa90:	48a1      	ldr	r0, [pc, #644]	; (800ad18 <HAL_TIM_OC_DelayElapsedCallback+0x34c>)
 800aa92:	f7f7 f8e9 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800aa96:	4603      	mov	r3, r0
 800aa98:	ee08 3a90 	vmov	s17, r3
	register int32_t C = HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I);//500ns
 800aa9c:	2104      	movs	r1, #4
 800aa9e:	489f      	ldr	r0, [pc, #636]	; (800ad1c <HAL_TIM_OC_DelayElapsedCallback+0x350>)
 800aaa0:	f7f7 f8e2 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	ee08 3a10 	vmov	s16, r3

	register float I_A = ((float)A - A_mean) * 0.134f;
 800aaaa:	eeb8 7ac9 	vcvt.f32.s32	s14, s18
 800aaae:	4b9c      	ldr	r3, [pc, #624]	; (800ad20 <HAL_TIM_OC_DelayElapsedCallback+0x354>)
 800aab0:	edd3 7a00 	vldr	s15, [r3]
 800aab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aab8:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800ad24 <HAL_TIM_OC_DelayElapsedCallback+0x358>
 800aabc:	ee27 9a87 	vmul.f32	s18, s15, s14
	register float I_B = ((float)B - B_mean) * 0.189f; // 3.3[V]/4095[ticks] /20[gain]/0.0003[ohm] = 0.134 //TODO verify SPI setting in DRV8301 the factor sqrt(2) comes out of thin air
 800aac0:	eeb8 7ae8 	vcvt.f32.s32	s14, s17
 800aac4:	4b98      	ldr	r3, [pc, #608]	; (800ad28 <HAL_TIM_OC_DelayElapsedCallback+0x35c>)
 800aac6:	edd3 7a00 	vldr	s15, [r3]
 800aaca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aace:	ed9f 7a97 	vldr	s14, [pc, #604]	; 800ad2c <HAL_TIM_OC_DelayElapsedCallback+0x360>
 800aad2:	ee67 8a87 	vmul.f32	s17, s15, s14
	register float I_C = ((float)C - C_mean) * 0.189f;
 800aad6:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
 800aada:	4b95      	ldr	r3, [pc, #596]	; (800ad30 <HAL_TIM_OC_DelayElapsedCallback+0x364>)
 800aadc:	edd3 7a00 	vldr	s15, [r3]
 800aae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aae4:	ed9f 7a91 	vldr	s14, [pc, #580]	; 800ad2c <HAL_TIM_OC_DelayElapsedCallback+0x360>
 800aae8:	ee27 8a87 	vmul.f32	s16, s15, s14



	// --- accumulate analog readings till we have enough samples which is a flag for the heart beat (= all MCU internal control loops)
	if (analog_samples_counter < ANALOG_SAMPLES_N ){  // TODO: if n_samples >= 32
 800aaec:	4b91      	ldr	r3, [pc, #580]	; (800ad34 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b1f      	cmp	r3, #31
 800aaf2:	d82c      	bhi.n	800ab4e <HAL_TIM_OC_DelayElapsedCallback+0x182>
		acc_I_tot_squared += (I_A * I_A + I_B * I_B + I_C * I_C) / 1.5f; //todo check 1.5
 800aaf4:	ee29 7a09 	vmul.f32	s14, s18, s18
 800aaf8:	ee68 7aa8 	vmul.f32	s15, s17, s17
 800aafc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ab00:	ee68 7a08 	vmul.f32	s15, s16, s16
 800ab04:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab08:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 800ab0c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800ab10:	4b89      	ldr	r3, [pc, #548]	; (800ad38 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800ab12:	edd3 7a00 	vldr	s15, [r3]
 800ab16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab1a:	4b87      	ldr	r3, [pc, #540]	; (800ad38 <HAL_TIM_OC_DelayElapsedCallback+0x36c>)
 800ab1c:	edc3 7a00 	vstr	s15, [r3]
		acc_STRAIN0 += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_F);
 800ab20:	2103      	movs	r1, #3
 800ab22:	487c      	ldr	r0, [pc, #496]	; (800ad14 <HAL_TIM_OC_DelayElapsedCallback+0x348>)
 800ab24:	f7f7 f8a0 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	4b84      	ldr	r3, [pc, #528]	; (800ad3c <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	4413      	add	r3, r2
 800ab30:	4a82      	ldr	r2, [pc, #520]	; (800ad3c <HAL_TIM_OC_DelayElapsedCallback+0x370>)
 800ab32:	6013      	str	r3, [r2, #0]
		acc_Vbus += adc1_buf[RANK_CONT_Vbus-1];
 800ab34:	4b82      	ldr	r3, [pc, #520]	; (800ad40 <HAL_TIM_OC_DelayElapsedCallback+0x374>)
 800ab36:	89db      	ldrh	r3, [r3, #14]
 800ab38:	461a      	mov	r2, r3
 800ab3a:	4b82      	ldr	r3, [pc, #520]	; (800ad44 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4413      	add	r3, r2
 800ab40:	4a80      	ldr	r2, [pc, #512]	; (800ad44 <HAL_TIM_OC_DelayElapsedCallback+0x378>)
 800ab42:	6013      	str	r3, [r2, #0]
#if DIFF_FORCE
		acc_STRAIN1 += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_F);
#endif
		analog_samples_counter ++;
 800ab44:	4b7b      	ldr	r3, [pc, #492]	; (800ad34 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	4a7a      	ldr	r2, [pc, #488]	; (800ad34 <HAL_TIM_OC_DelayElapsedCallback+0x368>)
 800ab4c:	6013      	str	r3, [r2, #0]
	}//200ns when not entering presumably

	if (FOC_enabled){
 800ab4e:	4b7e      	ldr	r3, [pc, #504]	; (800ad48 <HAL_TIM_OC_DelayElapsedCallback+0x37c>)
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	f000 80b6 	beq.w	800acc4 <HAL_TIM_OC_DelayElapsedCallback+0x2f8>

		register float a;
		register float b;

		register float direct_component = 0.0f;
 800ab58:	eddf 9a7c 	vldr	s19, [pc, #496]	; 800ad4c <HAL_TIM_OC_DelayElapsedCallback+0x380>
		register float quadrature_component = 0.0f;
 800ab5c:	ed9f 9a7b 	vldr	s18, [pc, #492]	; 800ad4c <HAL_TIM_OC_DelayElapsedCallback+0x380>

		// --- Park transform
		//a = 0.7f * ((float)A-A_mean);
		//b = INV_SQRT_3 * (a + 2.0f * ((float)B-B_mean)); //200ns thanks to precalc of SQRT
		a = I_B; // a and b derived from B and C since they have same DAC (A is on external DAC which may behave differently -- adjust phaseshift accordingly!)
		b = INV_SQRT_3 * (a + 2.0f * I_C); //200ns thanks to precalc of SQRT
 800ab60:	ee78 7a08 	vadd.f32	s15, s16, s16
 800ab64:	ee78 7aa7 	vadd.f32	s15, s17, s15
 800ab68:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800ad50 <HAL_TIM_OC_DelayElapsedCallback+0x384>
 800ab6c:	ee27 8a87 	vmul.f32	s16, s15, s14

		// -- Clark transform
		register uint32_t poleB_phase_int = (pole_phase_int - 209 + 628) % 628; //
 800ab70:	4b67      	ldr	r3, [pc, #412]	; (800ad10 <HAL_TIM_OC_DelayElapsedCallback+0x344>)
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	f203 13a3 	addw	r3, r3, #419	; 0x1a3
 800ab78:	4a64      	ldr	r2, [pc, #400]	; (800ad0c <HAL_TIM_OC_DelayElapsedCallback+0x340>)
 800ab7a:	fb82 1203 	smull	r1, r2, r2, r3
 800ab7e:	11d1      	asrs	r1, r2, #7
 800ab80:	17da      	asrs	r2, r3, #31
 800ab82:	1a8a      	subs	r2, r1, r2
 800ab84:	f44f 711d 	mov.w	r1, #628	; 0x274
 800ab88:	fb01 f202 	mul.w	r2, r1, r2
 800ab8c:	1a9a      	subs	r2, r3, r2
 800ab8e:	4614      	mov	r4, r2
		direct_component = a * cos_lookup[poleB_phase_int] + b * sin_lookup[poleB_phase_int];
 800ab90:	4a70      	ldr	r2, [pc, #448]	; (800ad54 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800ab92:	00a3      	lsls	r3, r4, #2
 800ab94:	4413      	add	r3, r2
 800ab96:	edd3 7a00 	vldr	s15, [r3]
 800ab9a:	ee28 7aa7 	vmul.f32	s14, s17, s15
 800ab9e:	4a6e      	ldr	r2, [pc, #440]	; (800ad58 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800aba0:	00a3      	lsls	r3, r4, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	edd3 7a00 	vldr	s15, [r3]
 800aba8:	ee68 7a27 	vmul.f32	s15, s16, s15
 800abac:	ee77 9a27 	vadd.f32	s19, s14, s15
		quadrature_component = -a * sin_lookup[poleB_phase_int] + b * cos_lookup[poleB_phase_int]; //300ns
 800abb0:	eeb1 7a68 	vneg.f32	s14, s17
 800abb4:	4a68      	ldr	r2, [pc, #416]	; (800ad58 <HAL_TIM_OC_DelayElapsedCallback+0x38c>)
 800abb6:	00a3      	lsls	r3, r4, #2
 800abb8:	4413      	add	r3, r2
 800abba:	edd3 7a00 	vldr	s15, [r3]
 800abbe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abc2:	4a64      	ldr	r2, [pc, #400]	; (800ad54 <HAL_TIM_OC_DelayElapsedCallback+0x388>)
 800abc4:	00a3      	lsls	r3, r4, #2
 800abc6:	4413      	add	r3, r2
 800abc8:	edd3 7a00 	vldr	s15, [r3]
 800abcc:	ee68 7a27 	vmul.f32	s15, s16, s15
 800abd0:	ee37 9a27 	vadd.f32	s18, s14, s15

		// --- low pass filter
		register float lp = 0.001f;
 800abd4:	ed9f 8a61 	vldr	s16, [pc, #388]	; 800ad5c <HAL_TIM_OC_DelayElapsedCallback+0x390>
		direct_component_lp = (1-lp) * direct_component_lp + lp * direct_component;
 800abd8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800abdc:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800abe0:	4b5f      	ldr	r3, [pc, #380]	; (800ad60 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800abe2:	edd3 7a00 	vldr	s15, [r3]
 800abe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800abea:	ee68 7a29 	vmul.f32	s15, s16, s19
 800abee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abf2:	4b5b      	ldr	r3, [pc, #364]	; (800ad60 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800abf4:	edc3 7a00 	vstr	s15, [r3]
		quadrature_component_lp = (1-lp) * quadrature_component_lp + lp * quadrature_component;//with register 240 without register 380ns for the 3 lines
 800abf8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800abfc:	ee37 7ac8 	vsub.f32	s14, s15, s16
 800ac00:	4b58      	ldr	r3, [pc, #352]	; (800ad64 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800ac02:	edd3 7a00 	vldr	s15, [r3]
 800ac06:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ac0a:	ee68 7a09 	vmul.f32	s15, s16, s18
 800ac0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac12:	4b54      	ldr	r3, [pc, #336]	; (800ad64 <HAL_TIM_OC_DelayElapsedCallback+0x398>)
 800ac14:	edc3 7a00 	vstr	s15, [r3]


		static float direct_component_lp_integral = 0.0f;
		direct_component_lp_integral += direct_component_lp;//150ns for 2lines
 800ac18:	4b53      	ldr	r3, [pc, #332]	; (800ad68 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800ac1a:	ed93 7a00 	vldr	s14, [r3]
 800ac1e:	4b50      	ldr	r3, [pc, #320]	; (800ad60 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800ac20:	edd3 7a00 	vldr	s15, [r3]
 800ac24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac28:	4b4f      	ldr	r3, [pc, #316]	; (800ad68 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800ac2a:	edc3 7a00 	vstr	s15, [r3]

		register float direct_component_lp_integral_max = 0.4f / 0.00001f;
 800ac2e:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 800ad6c <HAL_TIM_OC_DelayElapsedCallback+0x3a0>
		if (direct_component_lp_integral > direct_component_lp_integral_max){
 800ac32:	4b4d      	ldr	r3, [pc, #308]	; (800ad68 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800ac34:	edd3 7a00 	vldr	s15, [r3]
 800ac38:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ac3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac40:	d502      	bpl.n	800ac48 <HAL_TIM_OC_DelayElapsedCallback+0x27c>
			direct_component_lp_integral = direct_component_lp_integral_max;
 800ac42:	4b49      	ldr	r3, [pc, #292]	; (800ad68 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800ac44:	ed83 8a00 	vstr	s16, [r3]
		}
		if (direct_component_lp_integral < -direct_component_lp_integral_max){
 800ac48:	eeb1 7a48 	vneg.f32	s14, s16
 800ac4c:	4b46      	ldr	r3, [pc, #280]	; (800ad68 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800ac4e:	edd3 7a00 	vldr	s15, [r3]
 800ac52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ac56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5a:	dd04      	ble.n	800ac66 <HAL_TIM_OC_DelayElapsedCallback+0x29a>
			direct_component_lp_integral = -direct_component_lp_integral_max;
 800ac5c:	eef1 7a48 	vneg.f32	s15, s16
 800ac60:	4b41      	ldr	r3, [pc, #260]	; (800ad68 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800ac62:	edc3 7a00 	vstr	s15, [r3]
		}


		// --- PI controller
		FOC_phase_shift = 0.005f * direct_component_lp + 0.00001f  * direct_component_lp_integral; //220ns//starts oscillating at I = 0.00008f and alternatively at P = 0.03f
 800ac66:	4b3e      	ldr	r3, [pc, #248]	; (800ad60 <HAL_TIM_OC_DelayElapsedCallback+0x394>)
 800ac68:	edd3 7a00 	vldr	s15, [r3]
 800ac6c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ad70 <HAL_TIM_OC_DelayElapsedCallback+0x3a4>
 800ac70:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ac74:	4b3c      	ldr	r3, [pc, #240]	; (800ad68 <HAL_TIM_OC_DelayElapsedCallback+0x39c>)
 800ac76:	edd3 7a00 	vldr	s15, [r3]
 800ac7a:	eddf 6a3e 	vldr	s13, [pc, #248]	; 800ad74 <HAL_TIM_OC_DelayElapsedCallback+0x3a8>
 800ac7e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800ac82:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac86:	4b3c      	ldr	r3, [pc, #240]	; (800ad78 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800ac88:	edc3 7a00 	vstr	s15, [r3]


		if (FOC_phase_shift > FOC_PHASE_LIM){
 800ac8c:	4b3a      	ldr	r3, [pc, #232]	; (800ad78 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800ac8e:	edd3 7a00 	vldr	s15, [r3]
 800ac92:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 800ad7c <HAL_TIM_OC_DelayElapsedCallback+0x3b0>
 800ac96:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac9e:	dd03      	ble.n	800aca8 <HAL_TIM_OC_DelayElapsedCallback+0x2dc>
			FOC_phase_shift = FOC_PHASE_LIM;
 800aca0:	4b35      	ldr	r3, [pc, #212]	; (800ad78 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800aca2:	4a37      	ldr	r2, [pc, #220]	; (800ad80 <HAL_TIM_OC_DelayElapsedCallback+0x3b4>)
 800aca4:	601a      	str	r2, [r3, #0]
 800aca6:	e010      	b.n	800acca <HAL_TIM_OC_DelayElapsedCallback+0x2fe>
		}
		else if (FOC_phase_shift < -FOC_PHASE_LIM){
 800aca8:	4b33      	ldr	r3, [pc, #204]	; (800ad78 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800acaa:	edd3 7a00 	vldr	s15, [r3]
 800acae:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800ad84 <HAL_TIM_OC_DelayElapsedCallback+0x3b8>
 800acb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acba:	d506      	bpl.n	800acca <HAL_TIM_OC_DelayElapsedCallback+0x2fe>
			FOC_phase_shift = -FOC_PHASE_LIM;
 800acbc:	4b2e      	ldr	r3, [pc, #184]	; (800ad78 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800acbe:	4a32      	ldr	r2, [pc, #200]	; (800ad88 <HAL_TIM_OC_DelayElapsedCallback+0x3bc>)
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	e002      	b.n	800acca <HAL_TIM_OC_DelayElapsedCallback+0x2fe>
		//		FOC_phase_shift = 0.0f;
		//		direct_component_lp_integral = 0.0f;
		//	}//220ns
	}
	else {
		FOC_phase_shift = 0.1f;//empirical good mean of correction
 800acc4:	4b2c      	ldr	r3, [pc, #176]	; (800ad78 <HAL_TIM_OC_DelayElapsedCallback+0x3ac>)
 800acc6:	4a31      	ldr	r2, [pc, #196]	; (800ad8c <HAL_TIM_OC_DelayElapsedCallback+0x3c0>)
 800acc8:	601a      	str	r2, [r3, #0]
	}


#if DB_TIMING
	DB1L;
 800acca:	4b07      	ldr	r3, [pc, #28]	; (800ace8 <HAL_TIM_OC_DelayElapsedCallback+0x31c>)
 800accc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acd0:	619a      	str	r2, [r3, #24]
#endif


	update_pwm();
 800acd2:	f000 f85d 	bl	800ad90 <update_pwm>
 800acd6:	e000      	b.n	800acda <HAL_TIM_OC_DelayElapsedCallback+0x30e>
		return;
 800acd8:	bf00      	nop

}
 800acda:	3708      	adds	r7, #8
 800acdc:	46bd      	mov	sp, r7
 800acde:	ecbd 8b04 	vpop	{d8-d9}
 800ace2:	bdb0      	pop	{r4, r5, r7, pc}
 800ace4:	20000dd8 	.word	0x20000dd8
 800ace8:	40020c00 	.word	0x40020c00
 800acec:	40010400 	.word	0x40010400
 800acf0:	20000ad4 	.word	0x20000ad4
 800acf4:	200000f0 	.word	0x200000f0
 800acf8:	2000000c 	.word	0x2000000c
 800acfc:	40c90fd0 	.word	0x40c90fd0
 800ad00:	457a0000 	.word	0x457a0000
 800ad04:	20000008 	.word	0x20000008
 800ad08:	42c80000 	.word	0x42c80000
 800ad0c:	342da7f3 	.word	0x342da7f3
 800ad10:	20000bf8 	.word	0x20000bf8
 800ad14:	20000cc8 	.word	0x20000cc8
 800ad18:	200005dc 	.word	0x200005dc
 800ad1c:	20000d10 	.word	0x20000d10
 800ad20:	2000003c 	.word	0x2000003c
 800ad24:	3e09374c 	.word	0x3e09374c
 800ad28:	20000040 	.word	0x20000040
 800ad2c:	3e418937 	.word	0x3e418937
 800ad30:	20000044 	.word	0x20000044
 800ad34:	20000144 	.word	0x20000144
 800ad38:	2000012c 	.word	0x2000012c
 800ad3c:	20000110 	.word	0x20000110
 800ad40:	20000be8 	.word	0x20000be8
 800ad44:	20000118 	.word	0x20000118
 800ad48:	200000e0 	.word	0x200000e0
 800ad4c:	00000000 	.word	0x00000000
 800ad50:	3f13cd36 	.word	0x3f13cd36
 800ad54:	20000e20 	.word	0x20000e20
 800ad58:	20001b3c 	.word	0x20001b3c
 800ad5c:	3a83126f 	.word	0x3a83126f
 800ad60:	2000015c 	.word	0x2000015c
 800ad64:	20000160 	.word	0x20000160
 800ad68:	20000164 	.word	0x20000164
 800ad6c:	471c4000 	.word	0x471c4000
 800ad70:	3ba3d70a 	.word	0x3ba3d70a
 800ad74:	3727c5ac 	.word	0x3727c5ac
 800ad78:	20000140 	.word	0x20000140
 800ad7c:	3e99999a 	.word	0x3e99999a
 800ad80:	3e99999a 	.word	0x3e99999a
 800ad84:	be99999a 	.word	0xbe99999a
 800ad88:	be99999a 	.word	0xbe99999a
 800ad8c:	3dcccccd 	.word	0x3dcccccd

0800ad90 <update_pwm>:


// -----------------------------------------------------------
// called from MAIN UPDATE STEP to calc and write pwm values to FETdriver
// -----------------------------------------------------------
void update_pwm(void){
 800ad90:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800ad94:	ed2d 8b04 	vpush	{d8-d9}
 800ad98:	af00      	add	r7, sp, #0

#if DB_TIMING
	DB1H;
 800ad9a:	4bc1      	ldr	r3, [pc, #772]	; (800b0a0 <update_pwm+0x310>)
 800ad9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ada0:	619a      	str	r2, [r3, #24]
#endif

	//register int32_t field_phase_int;
	register int32_t field_phase_int = 0;
 800ada2:	2400      	movs	r4, #0

	// --- stiffness motor
	register float u0 = amp + stiffness * omegaEnc / (float)fast_Vbus * 603.0f ;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
 800ada4:	4bbf      	ldr	r3, [pc, #764]	; (800b0a4 <update_pwm+0x314>)
 800ada6:	ed93 7a00 	vldr	s14, [r3]
 800adaa:	4bbf      	ldr	r3, [pc, #764]	; (800b0a8 <update_pwm+0x318>)
 800adac:	edd3 7a00 	vldr	s15, [r3]
 800adb0:	ee67 6a27 	vmul.f32	s13, s14, s15
 800adb4:	4bbd      	ldr	r3, [pc, #756]	; (800b0ac <update_pwm+0x31c>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	ee07 3a90 	vmov	s15, r3
 800adbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800adc4:	ed9f 7aba 	vldr	s14, [pc, #744]	; 800b0b0 <update_pwm+0x320>
 800adc8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800adcc:	4bb9      	ldr	r3, [pc, #740]	; (800b0b4 <update_pwm+0x324>)
 800adce:	edd3 7a00 	vldr	s15, [r3]
 800add2:	ee37 8a27 	vadd.f32	s16, s14, s15
	// -- invisible motor
	//register float modified_amp = amp + stiffness * lp_omegaEnc + lp_omegaEncDot * 0.00003f * 0.1f * generic_add;// * direction; // TODO the abs allows same stiffness to make it softer for both directions - without a signchange is needed BUT turnaround is super aggressive now :( SAME issue with direction - super forceful reverse but sign identical --- looks like v needs to direct also the phase !!!!
	//AMAZING invisible motor kind of works at generic_add = -8 BUT super unstable at <-9....with both in lp 0.1 it is stable all the way to -25

	// --- signed u0 becomes abs(u0) and direction is encoded in field_phase_int
	if (u0 > 0){
 800add6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800adda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adde:	dd13      	ble.n	800ae08 <update_pwm+0x78>
		field_phase_int = pole_phase_int - (int32_t)((phase_shift + FOC_phase_shift) * 100.0f);
 800ade0:	4bb5      	ldr	r3, [pc, #724]	; (800b0b8 <update_pwm+0x328>)
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	4ab5      	ldr	r2, [pc, #724]	; (800b0bc <update_pwm+0x32c>)
 800ade6:	ed92 7a00 	vldr	s14, [r2]
 800adea:	4ab5      	ldr	r2, [pc, #724]	; (800b0c0 <update_pwm+0x330>)
 800adec:	edd2 7a00 	vldr	s15, [r2]
 800adf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adf4:	ed9f 7ab3 	vldr	s14, [pc, #716]	; 800b0c4 <update_pwm+0x334>
 800adf8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800adfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae00:	ee17 2a90 	vmov	r2, s15
 800ae04:	1a9c      	subs	r4, r3, r2
 800ae06:	e014      	b.n	800ae32 <update_pwm+0xa2>
	}
	else {
		field_phase_int = pole_phase_int + (int32_t)((phase_shift + FOC_phase_shift) * 100.0f);
 800ae08:	4bac      	ldr	r3, [pc, #688]	; (800b0bc <update_pwm+0x32c>)
 800ae0a:	ed93 7a00 	vldr	s14, [r3]
 800ae0e:	4bac      	ldr	r3, [pc, #688]	; (800b0c0 <update_pwm+0x330>)
 800ae10:	edd3 7a00 	vldr	s15, [r3]
 800ae14:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae18:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 800b0c4 <update_pwm+0x334>
 800ae1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ae20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ae24:	ee17 2a90 	vmov	r2, s15
 800ae28:	4ba3      	ldr	r3, [pc, #652]	; (800b0b8 <update_pwm+0x328>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	18d4      	adds	r4, r2, r3
		u0 = -u0;
 800ae2e:	eeb1 8a48 	vneg.f32	s16, s16
	}

	// --- clamp u0
	if (u0 > AMP_LIMIT){
 800ae32:	eddf 7aa5 	vldr	s15, [pc, #660]	; 800b0c8 <update_pwm+0x338>
 800ae36:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800ae3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae3e:	dd01      	ble.n	800ae44 <update_pwm+0xb4>
		u0 = AMP_LIMIT;
 800ae40:	ed9f 8aa1 	vldr	s16, [pc, #644]	; 800b0c8 <update_pwm+0x338>
	}

	if (!sw_enable_pwm){
 800ae44:	4ba1      	ldr	r3, [pc, #644]	; (800b0cc <update_pwm+0x33c>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	f083 0301 	eor.w	r3, r3, #1
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d001      	beq.n	800ae56 <update_pwm+0xc6>
		u0 = 0;
 800ae52:	ed9f 8a9f 	vldr	s16, [pc, #636]	; 800b0d0 <update_pwm+0x340>
	}

	acc_u0 += u0;
 800ae56:	4b9f      	ldr	r3, [pc, #636]	; (800b0d4 <update_pwm+0x344>)
 800ae58:	edd3 7a00 	vldr	s15, [r3]
 800ae5c:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ae60:	4b9c      	ldr	r3, [pc, #624]	; (800b0d4 <update_pwm+0x344>)
 800ae62:	edc3 7a00 	vstr	s15, [r3]

	if (field_phase_int < 0) {
 800ae66:	2c00      	cmp	r4, #0
 800ae68:	da02      	bge.n	800ae70 <update_pwm+0xe0>
		field_phase_int += 628;
 800ae6a:	f504 741d 	add.w	r4, r4, #628	; 0x274
 800ae6e:	e004      	b.n	800ae7a <update_pwm+0xea>
	}
	else if (field_phase_int >= 628) {
 800ae70:	f5b4 7f1d 	cmp.w	r4, #628	; 0x274
 800ae74:	db01      	blt.n	800ae7a <update_pwm+0xea>
		field_phase_int -= 628;
 800ae76:	f5a4 741d 	sub.w	r4, r4, #628	; 0x274
	}//150ns

	register float uA = 0.0f;
 800ae7a:	eddf 8a95 	vldr	s17, [pc, #596]	; 800b0d0 <update_pwm+0x340>
	register float uB = 0.0f;
 800ae7e:	eddf 9a94 	vldr	s19, [pc, #592]	; 800b0d0 <update_pwm+0x340>
	register float uC = 0.0f;
 800ae82:	ed9f 9a93 	vldr	s18, [pc, #588]	; 800b0d0 <update_pwm+0x340>

	register uint16_t pwmA = 0;
 800ae86:	f04f 0800 	mov.w	r8, #0
	register uint16_t pwmB = 0;
 800ae8a:	2600      	movs	r6, #0
	register uint16_t pwmC = 0;
 800ae8c:	2500      	movs	r5, #0

	if (!normal_pwm_update){
 800ae8e:	4b92      	ldr	r3, [pc, #584]	; (800b0d8 <update_pwm+0x348>)
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	f083 0301 	eor.w	r3, r3, #1
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d004      	beq.n	800aea6 <update_pwm+0x116>
#if DB_TIMING
		DB1L;
 800ae9c:	4b80      	ldr	r3, [pc, #512]	; (800b0a0 <update_pwm+0x310>)
 800ae9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aea2:	619a      	str	r2, [r3, #24]
#endif
		return;
 800aea4:	e1a5      	b.n	800b1f2 <update_pwm+0x462>
	}

	if (current_mode != freerun ){
 800aea6:	4b8d      	ldr	r3, [pc, #564]	; (800b0dc <update_pwm+0x34c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	2b02      	cmp	r3, #2
 800aeac:	f000 80b8 	beq.w	800b020 <update_pwm+0x290>
		if (current_mode == sinusoidal ){
 800aeb0:	4b8a      	ldr	r3, [pc, #552]	; (800b0dc <update_pwm+0x34c>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d137      	bne.n	800af28 <update_pwm+0x198>

			if  (field_phase_int < 210)	{
 800aeb8:	2cd1      	cmp	r4, #209	; 0xd1
 800aeba:	dc0e      	bgt.n	800aeda <update_pwm+0x14a>
				uA = lookup[field_phase_int]; //took<32000ns - with lookup implement it's just 2000ns
 800aebc:	4a88      	ldr	r2, [pc, #544]	; (800b0e0 <update_pwm+0x350>)
 800aebe:	00a3      	lsls	r3, r4, #2
 800aec0:	4413      	add	r3, r2
 800aec2:	edd3 8a00 	vldr	s17, [r3]
				uB = lookup[210 - 1 - field_phase_int]; //
 800aec6:	f1c4 03d1 	rsb	r3, r4, #209	; 0xd1
 800aeca:	4a85      	ldr	r2, [pc, #532]	; (800b0e0 <update_pwm+0x350>)
 800aecc:	009b      	lsls	r3, r3, #2
 800aece:	4413      	add	r3, r2
 800aed0:	edd3 9a00 	vldr	s19, [r3]
				uC = 0;
 800aed4:	ed9f 9a7e 	vldr	s18, [pc, #504]	; 800b0d0 <update_pwm+0x340>
 800aed8:	e06b      	b.n	800afb2 <update_pwm+0x222>
			}
			else if  (field_phase_int < 420){	 //210...419
 800aeda:	f5b4 7fd2 	cmp.w	r4, #420	; 0x1a4
 800aede:	da11      	bge.n	800af04 <update_pwm+0x174>
				uA = 0;
 800aee0:	eddf 8a7b 	vldr	s17, [pc, #492]	; 800b0d0 <update_pwm+0x340>
				uB = lookup[field_phase_int - 210];
 800aee4:	f1a4 03d2 	sub.w	r3, r4, #210	; 0xd2
 800aee8:	4a7d      	ldr	r2, [pc, #500]	; (800b0e0 <update_pwm+0x350>)
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	edd3 9a00 	vldr	s19, [r3]
				uC = lookup[420 - 1 - field_phase_int];
 800aef2:	f5c4 73d1 	rsb	r3, r4, #418	; 0x1a2
 800aef6:	3301      	adds	r3, #1
 800aef8:	4a79      	ldr	r2, [pc, #484]	; (800b0e0 <update_pwm+0x350>)
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	ed93 9a00 	vldr	s18, [r3]
 800af02:	e056      	b.n	800afb2 <update_pwm+0x222>
			}
			else	{  //420...629
				uA = lookup[630 - 1 - field_phase_int];
 800af04:	f5c4 731d 	rsb	r3, r4, #628	; 0x274
 800af08:	3301      	adds	r3, #1
 800af0a:	4a75      	ldr	r2, [pc, #468]	; (800b0e0 <update_pwm+0x350>)
 800af0c:	009b      	lsls	r3, r3, #2
 800af0e:	4413      	add	r3, r2
 800af10:	edd3 8a00 	vldr	s17, [r3]
				uB = 0;
 800af14:	eddf 9a6e 	vldr	s19, [pc, #440]	; 800b0d0 <update_pwm+0x340>
				uC = lookup[field_phase_int - 420];
 800af18:	f5a4 73d2 	sub.w	r3, r4, #420	; 0x1a4
 800af1c:	4a70      	ldr	r2, [pc, #448]	; (800b0e0 <update_pwm+0x350>)
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	ed93 9a00 	vldr	s18, [r3]
 800af26:	e044      	b.n	800afb2 <update_pwm+0x222>
			}
		}//400ns

		else if (current_mode == trapezoidal){
 800af28:	4b6c      	ldr	r3, [pc, #432]	; (800b0dc <update_pwm+0x34c>)
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d140      	bne.n	800afb2 <update_pwm+0x222>
			if  (field_phase_int < 105-52)	{
 800af30:	2c34      	cmp	r4, #52	; 0x34
 800af32:	dc06      	bgt.n	800af42 <update_pwm+0x1b2>
				uA = 1;
 800af34:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800af38:	eddf 9a65 	vldr	s19, [pc, #404]	; 800b0d0 <update_pwm+0x340>
				uC = 0;
 800af3c:	ed9f 9a64 	vldr	s18, [pc, #400]	; 800b0d0 <update_pwm+0x340>
 800af40:	e037      	b.n	800afb2 <update_pwm+0x222>
			}
			else if  (field_phase_int < 210-52)	{
 800af42:	2c9d      	cmp	r4, #157	; 0x9d
 800af44:	dc06      	bgt.n	800af54 <update_pwm+0x1c4>
				uA = 1;
 800af46:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 1;
 800af4a:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 0;
 800af4e:	ed9f 9a60 	vldr	s18, [pc, #384]	; 800b0d0 <update_pwm+0x340>
 800af52:	e02e      	b.n	800afb2 <update_pwm+0x222>
			}
			else if  (field_phase_int < 315-52)	{
 800af54:	f5b4 7f83 	cmp.w	r4, #262	; 0x106
 800af58:	dc06      	bgt.n	800af68 <update_pwm+0x1d8>
				uA = 0;
 800af5a:	eddf 8a5d 	vldr	s17, [pc, #372]	; 800b0d0 <update_pwm+0x340>
				uB = 1;
 800af5e:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 0;
 800af62:	ed9f 9a5b 	vldr	s18, [pc, #364]	; 800b0d0 <update_pwm+0x340>
 800af66:	e024      	b.n	800afb2 <update_pwm+0x222>
			}
			else if  (field_phase_int < 420-52)	{
 800af68:	f5b4 7fb8 	cmp.w	r4, #368	; 0x170
 800af6c:	da06      	bge.n	800af7c <update_pwm+0x1ec>
				uA = 0;
 800af6e:	eddf 8a58 	vldr	s17, [pc, #352]	; 800b0d0 <update_pwm+0x340>
				uB = 1;
 800af72:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
				uC = 1;
 800af76:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800af7a:	e01a      	b.n	800afb2 <update_pwm+0x222>
			}
			else if  (field_phase_int < 525-52)	{
 800af7c:	f5b4 7fec 	cmp.w	r4, #472	; 0x1d8
 800af80:	dc06      	bgt.n	800af90 <update_pwm+0x200>
				uA = 0;
 800af82:	eddf 8a53 	vldr	s17, [pc, #332]	; 800b0d0 <update_pwm+0x340>
				uB = 0;
 800af86:	eddf 9a52 	vldr	s19, [pc, #328]	; 800b0d0 <update_pwm+0x340>
				uC = 1;
 800af8a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800af8e:	e010      	b.n	800afb2 <update_pwm+0x222>
			}
			else if  (field_phase_int < 630-52)	{
 800af90:	f240 2341 	movw	r3, #577	; 0x241
 800af94:	429c      	cmp	r4, r3
 800af96:	dc06      	bgt.n	800afa6 <update_pwm+0x216>
				uA = 1;
 800af98:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800af9c:	eddf 9a4c 	vldr	s19, [pc, #304]	; 800b0d0 <update_pwm+0x340>
				uC = 1;
 800afa0:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800afa4:	e005      	b.n	800afb2 <update_pwm+0x222>
			}
			else 	{ //same as first half phase
				uA = 1;
 800afa6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
				uB = 0;
 800afaa:	eddf 9a49 	vldr	s19, [pc, #292]	; 800b0d0 <update_pwm+0x340>
				uC = 0;
 800afae:	ed9f 9a48 	vldr	s18, [pc, #288]	; 800b0d0 <update_pwm+0x340>
			}
		}

		pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //180ns
 800afb2:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800b0ec <update_pwm+0x35c>
 800afb6:	ee68 7a27 	vmul.f32	s15, s16, s15
 800afba:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800afbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afc2:	ee17 3a90 	vmov	r3, s15
 800afc6:	fa1f f883 	uxth.w	r8, r3
		pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //180ns
 800afca:	eddf 7a48 	vldr	s15, [pc, #288]	; 800b0ec <update_pwm+0x35c>
 800afce:	ee68 7a27 	vmul.f32	s15, s16, s15
 800afd2:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800afd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800afda:	ee17 3a90 	vmov	r3, s15
 800afde:	b29e      	uxth	r6, r3
		pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //180ns
 800afe0:	eddf 7a42 	vldr	s15, [pc, #264]	; 800b0ec <update_pwm+0x35c>
 800afe4:	ee68 7a27 	vmul.f32	s15, s16, s15
 800afe8:	ee69 7a27 	vmul.f32	s15, s18, s15
 800afec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aff0:	ee17 3a90 	vmov	r3, s15
 800aff4:	b29d      	uxth	r5, r3

		// --- send out PWM pulses 0...2048

		TIM1->CCR1 = pwmA; //takes<150ns
 800aff6:	4b3b      	ldr	r3, [pc, #236]	; (800b0e4 <update_pwm+0x354>)
 800aff8:	4642      	mov	r2, r8
 800affa:	635a      	str	r2, [r3, #52]	; 0x34
		if (INVERT){
 800affc:	4b3a      	ldr	r3, [pc, #232]	; (800b0e8 <update_pwm+0x358>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d006      	beq.n	800b012 <update_pwm+0x282>
			TIM1->CCR3 = pwmB; //takes<150ns
 800b004:	4b37      	ldr	r3, [pc, #220]	; (800b0e4 <update_pwm+0x354>)
 800b006:	4632      	mov	r2, r6
 800b008:	63da      	str	r2, [r3, #60]	; 0x3c
			TIM1->CCR2 = pwmC; //takes<150ns
 800b00a:	4b36      	ldr	r3, [pc, #216]	; (800b0e4 <update_pwm+0x354>)
 800b00c:	462a      	mov	r2, r5
 800b00e:	639a      	str	r2, [r3, #56]	; 0x38
 800b010:	e0eb      	b.n	800b1ea <update_pwm+0x45a>
		}
		else {
			TIM1->CCR2 = pwmB; //takes<150ns
 800b012:	4b34      	ldr	r3, [pc, #208]	; (800b0e4 <update_pwm+0x354>)
 800b014:	4632      	mov	r2, r6
 800b016:	639a      	str	r2, [r3, #56]	; 0x38
			TIM1->CCR3 = pwmC; //takes<150ns
 800b018:	4b32      	ldr	r3, [pc, #200]	; (800b0e4 <update_pwm+0x354>)
 800b01a:	462a      	mov	r2, r5
 800b01c:	63da      	str	r2, [r3, #60]	; 0x3c
 800b01e:	e0e4      	b.n	800b1ea <update_pwm+0x45a>
		}//300ns for both
	}

	else{ // NOTE this mode is still experimental
		if  (field_phase_int < 105)	{
 800b020:	2c68      	cmp	r4, #104	; 0x68
 800b022:	dc1d      	bgt.n	800b060 <update_pwm+0x2d0>
			uA = 1;
 800b024:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //takes<2s00ns
 800b028:	eddf 7a30 	vldr	s15, [pc, #192]	; 800b0ec <update_pwm+0x35c>
 800b02c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b030:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800b034:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b038:	ee17 3a90 	vmov	r3, s15
 800b03c:	fa1f f883 	uxth.w	r8, r3
			TIM1->CCR1 = pwmA; //takes<150ns
 800b040:	4b28      	ldr	r3, [pc, #160]	; (800b0e4 <update_pwm+0x354>)
 800b042:	4642      	mov	r2, r8
 800b044:	635a      	str	r2, [r3, #52]	; 0x34
			//			SET_BIT(TIM1->CCMR1, TIM_CCMR1_OC2CE);
			//			CLEAR_BIT(TIM1->CCMR1, TIM_CCMR1_OC2CE);
			//			SET_BIT(TIM1->CCMR2, TIM_CCMR2_OC3CE);
			//			CLEAR_BIT(TIM1->CCMR2, TIM_CCMR2_OC3CE);

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800b046:	4b27      	ldr	r3, [pc, #156]	; (800b0e4 <update_pwm+0x354>)
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	4a26      	ldr	r2, [pc, #152]	; (800b0e4 <update_pwm+0x354>)
 800b04c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b050:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800b052:	4b24      	ldr	r3, [pc, #144]	; (800b0e4 <update_pwm+0x354>)
 800b054:	699b      	ldr	r3, [r3, #24]
 800b056:	4a23      	ldr	r2, [pc, #140]	; (800b0e4 <update_pwm+0x354>)
 800b058:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b05c:	6193      	str	r3, [r2, #24]
 800b05e:	e0c4      	b.n	800b1ea <update_pwm+0x45a>
		}
		else if  (field_phase_int < 210)	{
 800b060:	2cd1      	cmp	r4, #209	; 0xd1
 800b062:	dc45      	bgt.n	800b0f0 <update_pwm+0x360>
			uB = 1;
 800b064:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //takes<2s00ns
 800b068:	eddf 7a20 	vldr	s15, [pc, #128]	; 800b0ec <update_pwm+0x35c>
 800b06c:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b070:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800b074:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b078:	ee17 3a90 	vmov	r3, s15
 800b07c:	b29e      	uxth	r6, r3
			TIM1->CCR2 = pwmB; //takes<150ns
 800b07e:	4b19      	ldr	r3, [pc, #100]	; (800b0e4 <update_pwm+0x354>)
 800b080:	4632      	mov	r2, r6
 800b082:	639a      	str	r2, [r3, #56]	; 0x38

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800b084:	4b17      	ldr	r3, [pc, #92]	; (800b0e4 <update_pwm+0x354>)
 800b086:	699b      	ldr	r3, [r3, #24]
 800b088:	4a16      	ldr	r2, [pc, #88]	; (800b0e4 <update_pwm+0x354>)
 800b08a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b08e:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800b090:	4b14      	ldr	r3, [pc, #80]	; (800b0e4 <update_pwm+0x354>)
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	4a13      	ldr	r2, [pc, #76]	; (800b0e4 <update_pwm+0x354>)
 800b096:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b09a:	6193      	str	r3, [r2, #24]
 800b09c:	e0a5      	b.n	800b1ea <update_pwm+0x45a>
 800b09e:	bf00      	nop
 800b0a0:	40020c00 	.word	0x40020c00
 800b0a4:	20000020 	.word	0x20000020
 800b0a8:	20000100 	.word	0x20000100
 800b0ac:	20000038 	.word	0x20000038
 800b0b0:	4416c000 	.word	0x4416c000
 800b0b4:	200000e4 	.word	0x200000e4
 800b0b8:	20000bf8 	.word	0x20000bf8
 800b0bc:	2000001c 	.word	0x2000001c
 800b0c0:	20000140 	.word	0x20000140
 800b0c4:	42c80000 	.word	0x42c80000
 800b0c8:	3f733333 	.word	0x3f733333
 800b0cc:	200000e2 	.word	0x200000e2
 800b0d0:	00000000 	.word	0x00000000
 800b0d4:	20000134 	.word	0x20000134
 800b0d8:	20000018 	.word	0x20000018
 800b0dc:	200000d8 	.word	0x200000d8
 800b0e0:	20000214 	.word	0x20000214
 800b0e4:	40010000 	.word	0x40010000
 800b0e8:	200000d4 	.word	0x200000d4
 800b0ec:	45800000 	.word	0x45800000
		}
		else if  (field_phase_int < 315)	{
 800b0f0:	f5b4 7f9d 	cmp.w	r4, #314	; 0x13a
 800b0f4:	dc1c      	bgt.n	800b130 <update_pwm+0x3a0>
			uB = 1;
 800b0f6:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
			pwmB = (uint16_t) (PWM_STEPS_F * u0 * uB); //takes<2s00ns
 800b0fa:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 800b0ec <update_pwm+0x35c>
 800b0fe:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b102:	ee69 7aa7 	vmul.f32	s15, s19, s15
 800b106:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b10a:	ee17 3a90 	vmov	r3, s15
 800b10e:	b29e      	uxth	r6, r3
			TIM1->CCR2 = pwmB; //takes<150ns
 800b110:	4b3b      	ldr	r3, [pc, #236]	; (800b200 <update_pwm+0x470>)
 800b112:	4632      	mov	r2, r6
 800b114:	639a      	str	r2, [r3, #56]	; 0x38

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800b116:	4b3a      	ldr	r3, [pc, #232]	; (800b200 <update_pwm+0x470>)
 800b118:	699b      	ldr	r3, [r3, #24]
 800b11a:	4a39      	ldr	r2, [pc, #228]	; (800b200 <update_pwm+0x470>)
 800b11c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b120:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800b122:	4b37      	ldr	r3, [pc, #220]	; (800b200 <update_pwm+0x470>)
 800b124:	699b      	ldr	r3, [r3, #24]
 800b126:	4a36      	ldr	r2, [pc, #216]	; (800b200 <update_pwm+0x470>)
 800b128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b12c:	6193      	str	r3, [r2, #24]
 800b12e:	e05c      	b.n	800b1ea <update_pwm+0x45a>
		}
		else if  (field_phase_int < 420)	{
 800b130:	f5b4 7fd2 	cmp.w	r4, #420	; 0x1a4
 800b134:	da1c      	bge.n	800b170 <update_pwm+0x3e0>
			uC = 1;
 800b136:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //takes<2s00ns
 800b13a:	eddf 7a32 	vldr	s15, [pc, #200]	; 800b204 <update_pwm+0x474>
 800b13e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b142:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b146:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b14a:	ee17 3a90 	vmov	r3, s15
 800b14e:	b29d      	uxth	r5, r3
			TIM1->CCR3 = pwmC; //takes<150ns
 800b150:	4b2b      	ldr	r3, [pc, #172]	; (800b200 <update_pwm+0x470>)
 800b152:	462a      	mov	r2, r5
 800b154:	63da      	str	r2, [r3, #60]	; 0x3c

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800b156:	4b2a      	ldr	r3, [pc, #168]	; (800b200 <update_pwm+0x470>)
 800b158:	699b      	ldr	r3, [r3, #24]
 800b15a:	4a29      	ldr	r2, [pc, #164]	; (800b200 <update_pwm+0x470>)
 800b15c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b160:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800b162:	4b27      	ldr	r3, [pc, #156]	; (800b200 <update_pwm+0x470>)
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	4a26      	ldr	r2, [pc, #152]	; (800b200 <update_pwm+0x470>)
 800b168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b16c:	6193      	str	r3, [r2, #24]
 800b16e:	e03c      	b.n	800b1ea <update_pwm+0x45a>
		}
		else if  (field_phase_int < 525)	{
 800b170:	f5b4 7f03 	cmp.w	r4, #524	; 0x20c
 800b174:	dc1c      	bgt.n	800b1b0 <update_pwm+0x420>
			uC = 1;
 800b176:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
			pwmC = (uint16_t) (PWM_STEPS_F * u0 * uC); //takes<2s00ns
 800b17a:	eddf 7a22 	vldr	s15, [pc, #136]	; 800b204 <update_pwm+0x474>
 800b17e:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b182:	ee69 7a27 	vmul.f32	s15, s18, s15
 800b186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b18a:	ee17 3a90 	vmov	r3, s15
 800b18e:	b29d      	uxth	r5, r3
			TIM1->CCR3 = pwmC; //takes<150ns
 800b190:	4b1b      	ldr	r3, [pc, #108]	; (800b200 <update_pwm+0x470>)
 800b192:	462a      	mov	r2, r5
 800b194:	63da      	str	r2, [r3, #60]	; 0x3c

			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS1N);
 800b196:	4b1a      	ldr	r3, [pc, #104]	; (800b200 <update_pwm+0x470>)
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	4a19      	ldr	r2, [pc, #100]	; (800b200 <update_pwm+0x470>)
 800b19c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b1a0:	6193      	str	r3, [r2, #24]
			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800b1a2:	4b17      	ldr	r3, [pc, #92]	; (800b200 <update_pwm+0x470>)
 800b1a4:	699b      	ldr	r3, [r3, #24]
 800b1a6:	4a16      	ldr	r2, [pc, #88]	; (800b200 <update_pwm+0x470>)
 800b1a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1ac:	6193      	str	r3, [r2, #24]
 800b1ae:	e01c      	b.n	800b1ea <update_pwm+0x45a>
		}
		else 	{
			uA = 1;
 800b1b0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
			pwmA = (uint16_t) (PWM_STEPS_F * u0 * uA); //takes<2s00ns
 800b1b4:	eddf 7a13 	vldr	s15, [pc, #76]	; 800b204 <update_pwm+0x474>
 800b1b8:	ee68 7a27 	vmul.f32	s15, s16, s15
 800b1bc:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800b1c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b1c4:	ee17 3a90 	vmov	r3, s15
 800b1c8:	fa1f f883 	uxth.w	r8, r3
			TIM1->CCR1 = pwmA; //takes<150ns
 800b1cc:	4b0c      	ldr	r3, [pc, #48]	; (800b200 <update_pwm+0x470>)
 800b1ce:	4642      	mov	r2, r8
 800b1d0:	635a      	str	r2, [r3, #52]	; 0x34

			SET_BIT(TIM1->CCMR1, TIM_CR2_OIS2N);
 800b1d2:	4b0b      	ldr	r3, [pc, #44]	; (800b200 <update_pwm+0x470>)
 800b1d4:	699b      	ldr	r3, [r3, #24]
 800b1d6:	4a0a      	ldr	r2, [pc, #40]	; (800b200 <update_pwm+0x470>)
 800b1d8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b1dc:	6193      	str	r3, [r2, #24]
			CLEAR_BIT(TIM1->CCMR1, TIM_CR2_OIS3N);
 800b1de:	4b08      	ldr	r3, [pc, #32]	; (800b200 <update_pwm+0x470>)
 800b1e0:	699b      	ldr	r3, [r3, #24]
 800b1e2:	4a07      	ldr	r2, [pc, #28]	; (800b200 <update_pwm+0x470>)
 800b1e4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b1e8:	6193      	str	r3, [r2, #24]
		}

	}

#if DB_TIMING
	DB1L;
 800b1ea:	4b07      	ldr	r3, [pc, #28]	; (800b208 <update_pwm+0x478>)
 800b1ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1f0:	619a      	str	r2, [r3, #24]
#endif

}
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	ecbd 8b04 	vpop	{d8-d9}
 800b1f8:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800b1fc:	4770      	bx	lr
 800b1fe:	bf00      	nop
 800b200:	40010000 	.word	0x40010000
 800b204:	45800000 	.word	0x45800000
 800b208:	40020c00 	.word	0x40020c00

0800b20c <HAL_TIM_IC_CaptureCallback>:

////called every second step of the quadrature encoder was used for pwm update in past

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){ // see https://community.st.com/s/question/0D50X00009XkWUpSAN/encoder-mode-and-rotary-encoder
 800b20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]

	if(htim->Instance == TIM8){
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a3a      	ldr	r2, [pc, #232]	; (800b304 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d16b      	bne.n	800b2f8 <HAL_TIM_IC_CaptureCallback+0xec>
		omegaEnc_missing_update_counter = 0;
 800b220:	4b39      	ldr	r3, [pc, #228]	; (800b308 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800b222:	2200      	movs	r2, #0
 800b224:	601a      	str	r2, [r3, #0]

		static float omegaEnc_last = 0.0f;
		static uint32_t last_t = 0;
		register uint32_t t_now = TIM2->CNT;
 800b226:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b22a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
		register int32_t delta_t;
		if (t_now > last_t){
 800b22c:	4b37      	ldr	r3, [pc, #220]	; (800b30c <HAL_TIM_IC_CaptureCallback+0x100>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	429c      	cmp	r4, r3
 800b232:	d904      	bls.n	800b23e <HAL_TIM_IC_CaptureCallback+0x32>
			delta_t = t_now - last_t;
 800b234:	4b35      	ldr	r3, [pc, #212]	; (800b30c <HAL_TIM_IC_CaptureCallback+0x100>)
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	1ae3      	subs	r3, r4, r3
 800b23a:	4698      	mov	r8, r3
 800b23c:	e003      	b.n	800b246 <HAL_TIM_IC_CaptureCallback+0x3a>
		}
		else {
			delta_t = t_now - last_t; //todo correct statement
 800b23e:	4b33      	ldr	r3, [pc, #204]	; (800b30c <HAL_TIM_IC_CaptureCallback+0x100>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	1ae3      	subs	r3, r4, r3
 800b244:	4698      	mov	r8, r3
		}

		if (delta_t > 84000){
 800b246:	4b32      	ldr	r3, [pc, #200]	; (800b310 <HAL_TIM_IC_CaptureCallback+0x104>)
 800b248:	4598      	cmp	r8, r3
 800b24a:	dd55      	ble.n	800b2f8 <HAL_TIM_IC_CaptureCallback+0xec>
			register int32_t EncVal = TIM8->CNT;
 800b24c:	4b2d      	ldr	r3, [pc, #180]	; (800b304 <HAL_TIM_IC_CaptureCallback+0xf8>)
 800b24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b250:	461d      	mov	r5, r3
			register int32_t delta_EncVal = (int32_t)EncVal - (int32_t)last_EncVal_omegaEnc;
 800b252:	4b30      	ldr	r3, [pc, #192]	; (800b314 <HAL_TIM_IC_CaptureCallback+0x108>)
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	1aee      	subs	r6, r5, r3
			last_EncVal_omegaEnc = EncVal;
 800b258:	4b2e      	ldr	r3, [pc, #184]	; (800b314 <HAL_TIM_IC_CaptureCallback+0x108>)
 800b25a:	601d      	str	r5, [r3, #0]
			last_t = t_now;
 800b25c:	4b2b      	ldr	r3, [pc, #172]	; (800b30c <HAL_TIM_IC_CaptureCallback+0x100>)
 800b25e:	601c      	str	r4, [r3, #0]

			delta_EncVal = encoder_jump_comp(delta_EncVal);
 800b260:	4630      	mov	r0, r6
 800b262:	f000 f885 	bl	800b370 <encoder_jump_comp>
 800b266:	4606      	mov	r6, r0

			omegaEnc =  omega_division(delta_EncVal, delta_t);
 800b268:	4641      	mov	r1, r8
 800b26a:	4630      	mov	r0, r6
 800b26c:	f000 f860 	bl	800b330 <omega_division>
 800b270:	eef0 7a40 	vmov.f32	s15, s0
 800b274:	4b28      	ldr	r3, [pc, #160]	; (800b318 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b276:	edc3 7a00 	vstr	s15, [r3]

			lp_omegaEnc = (1.0f - LP_OMEGA_ENC_CONST) * lp_omegaEnc + LP_OMEGA_ENC_CONST * omegaEnc;
 800b27a:	4b28      	ldr	r3, [pc, #160]	; (800b31c <HAL_TIM_IC_CaptureCallback+0x110>)
 800b27c:	edd3 7a00 	vldr	s15, [r3]
 800b280:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b284:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b288:	4b23      	ldr	r3, [pc, #140]	; (800b318 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b28a:	edd3 7a00 	vldr	s15, [r3]
 800b28e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b292:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b29a:	4b20      	ldr	r3, [pc, #128]	; (800b31c <HAL_TIM_IC_CaptureCallback+0x110>)
 800b29c:	edc3 7a00 	vstr	s15, [r3]

			omegaEncDot = (omegaEnc - omegaEnc_last) / (float)delta_t * 84000000.0f;
 800b2a0:	4b1d      	ldr	r3, [pc, #116]	; (800b318 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b2a2:	ed93 7a00 	vldr	s14, [r3]
 800b2a6:	4b1e      	ldr	r3, [pc, #120]	; (800b320 <HAL_TIM_IC_CaptureCallback+0x114>)
 800b2a8:	edd3 7a00 	vldr	s15, [r3]
 800b2ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 800b2b0:	ee07 8a90 	vmov	s15, r8
 800b2b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b2b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2bc:	ed9f 7a19 	vldr	s14, [pc, #100]	; 800b324 <HAL_TIM_IC_CaptureCallback+0x118>
 800b2c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b2c4:	4b18      	ldr	r3, [pc, #96]	; (800b328 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800b2c6:	edc3 7a00 	vstr	s15, [r3]

			lp_omegaEncDot = (1.0f - LP_OMEGA_ENC_DOT_CONST) * lp_omegaEncDot + LP_OMEGA_ENC_DOT_CONST * omegaEncDot;
 800b2ca:	4b18      	ldr	r3, [pc, #96]	; (800b32c <HAL_TIM_IC_CaptureCallback+0x120>)
 800b2cc:	edd3 7a00 	vldr	s15, [r3]
 800b2d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b2d4:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b2d8:	4b13      	ldr	r3, [pc, #76]	; (800b328 <HAL_TIM_IC_CaptureCallback+0x11c>)
 800b2da:	edd3 7a00 	vldr	s15, [r3]
 800b2de:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b2e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b2e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b2ea:	4b10      	ldr	r3, [pc, #64]	; (800b32c <HAL_TIM_IC_CaptureCallback+0x120>)
 800b2ec:	edc3 7a00 	vstr	s15, [r3]
			//alternative todo calc from t directly to save compute

			omegaEnc_last = omegaEnc;
 800b2f0:	4b09      	ldr	r3, [pc, #36]	; (800b318 <HAL_TIM_IC_CaptureCallback+0x10c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a0a      	ldr	r2, [pc, #40]	; (800b320 <HAL_TIM_IC_CaptureCallback+0x114>)
 800b2f6:	6013      	str	r3, [r2, #0]
			// todo must be set to 0 if not updated for long otherwise it maintains value from last update forever
		}

	}
}
 800b2f8:	bf00      	nop
 800b2fa:	3708      	adds	r7, #8
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b302:	bf00      	nop
 800b304:	40010400 	.word	0x40010400
 800b308:	200000fc 	.word	0x200000fc
 800b30c:	20000168 	.word	0x20000168
 800b310:	00014820 	.word	0x00014820
 800b314:	20000be0 	.word	0x20000be0
 800b318:	20000100 	.word	0x20000100
 800b31c:	20000104 	.word	0x20000104
 800b320:	2000016c 	.word	0x2000016c
 800b324:	4ca037a0 	.word	0x4ca037a0
 800b328:	20000108 	.word	0x20000108
 800b32c:	2000010c 	.word	0x2000010c

0800b330 <omega_division>:


float omega_division(int32_t delta_EncVal, int32_t delta_t){
 800b330:	b480      	push	{r7}
 800b332:	b083      	sub	sp, #12
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	return PI2 * 84000000.0f / ENC_STEPS_F * (float)(delta_EncVal) / (float)delta_t;
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	ee07 3a90 	vmov	s15, r3
 800b340:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b344:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800b36c <omega_division+0x3c>
 800b348:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	ee07 3a90 	vmov	s15, r3
 800b352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b356:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b35a:	eef0 7a66 	vmov.f32	s15, s13
}
 800b35e:	eeb0 0a67 	vmov.f32	s0, s15
 800b362:	370c      	adds	r7, #12
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	4800dab2 	.word	0x4800dab2

0800b370 <encoder_jump_comp>:

int32_t encoder_jump_comp(int32_t delta_EncVal){
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
	if (delta_EncVal > ENC_STEPS_HALF){ // if jump is more than a half rotation it's most likely the 0 crossing
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b37e:	dd03      	ble.n	800b388 <encoder_jump_comp+0x18>
		return delta_EncVal - ENC_STEPS;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	f5a3 637a 	sub.w	r3, r3, #4000	; 0xfa0
 800b386:	e008      	b.n	800b39a <encoder_jump_comp+0x2a>
	}
	else if (delta_EncVal < -ENC_STEPS_HALF){
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 800b38e:	da03      	bge.n	800b398 <encoder_jump_comp+0x28>
		return delta_EncVal + ENC_STEPS;
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f503 637a 	add.w	r3, r3, #4000	; 0xfa0
 800b396:	e000      	b.n	800b39a <encoder_jump_comp+0x2a>
	}
	else {
		return delta_EncVal;
 800b398:	687b      	ldr	r3, [r7, #4]
	}
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr
	...

0800b3a8 <fast_control_task>:
 *
 *********************************************************************************************
 */


void fast_control_task(void){
 800b3a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800b3ac:	b08e      	sub	sp, #56	; 0x38
 800b3ae:	af08      	add	r7, sp, #32
#if DB_TIMING
	DB2H;
 800b3b0:	4b5f      	ldr	r3, [pc, #380]	; (800b530 <fast_control_task+0x188>)
 800b3b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b3b6:	619a      	str	r2, [r3, #24]
#endif

	// --- averaging the quantities read in pwm update
	fast_STRAIN0 = acc_STRAIN0 >> ANALOG_SAMPLES_BITSHIFT;
 800b3b8:	4b5e      	ldr	r3, [pc, #376]	; (800b534 <fast_control_task+0x18c>)
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	095b      	lsrs	r3, r3, #5
 800b3be:	4a5e      	ldr	r2, [pc, #376]	; (800b538 <fast_control_task+0x190>)
 800b3c0:	6013      	str	r3, [r2, #0]
	acc_STRAIN0 = 0;
 800b3c2:	4b5c      	ldr	r3, [pc, #368]	; (800b534 <fast_control_task+0x18c>)
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	601a      	str	r2, [r3, #0]
	fast_Vbus = acc_Vbus >> ANALOG_SAMPLES_BITSHIFT;
 800b3c8:	4b5c      	ldr	r3, [pc, #368]	; (800b53c <fast_control_task+0x194>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	095b      	lsrs	r3, r3, #5
 800b3ce:	4a5c      	ldr	r2, [pc, #368]	; (800b540 <fast_control_task+0x198>)
 800b3d0:	6013      	str	r3, [r2, #0]
	acc_Vbus = 0;
 800b3d2:	4b5a      	ldr	r3, [pc, #360]	; (800b53c <fast_control_task+0x194>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	601a      	str	r2, [r3, #0]
#if DIFF_FORCE
	fast_STRAIN1 = acc_STRAIN1 >> ANALOG_SAMPLES_BITSHIFT;
	acc_STRAIN1 = 0;
#endif

	fast_I_tot = sqrt(acc_I_tot_squared/(float)ANALOG_SAMPLES_N);
 800b3d8:	4b5a      	ldr	r3, [pc, #360]	; (800b544 <fast_control_task+0x19c>)
 800b3da:	edd3 7a00 	vldr	s15, [r3]
 800b3de:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800b548 <fast_control_task+0x1a0>
 800b3e2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b3e6:	ee16 0a90 	vmov	r0, s13
 800b3ea:	f7f5 f8ad 	bl	8000548 <__aeabi_f2d>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	460c      	mov	r4, r1
 800b3f2:	ec44 3b10 	vmov	d0, r3, r4
 800b3f6:	f002 fbaf 	bl	800db58 <sqrt>
 800b3fa:	ec54 3b10 	vmov	r3, r4, d0
 800b3fe:	4618      	mov	r0, r3
 800b400:	4621      	mov	r1, r4
 800b402:	f7f5 fbd1 	bl	8000ba8 <__aeabi_d2f>
 800b406:	4602      	mov	r2, r0
 800b408:	4b50      	ldr	r3, [pc, #320]	; (800b54c <fast_control_task+0x1a4>)
 800b40a:	601a      	str	r2, [r3, #0]
	acc_I_tot_squared = 0.0f;
 800b40c:	4b4d      	ldr	r3, [pc, #308]	; (800b544 <fast_control_task+0x19c>)
 800b40e:	f04f 0200 	mov.w	r2, #0
 800b412:	601a      	str	r2, [r3, #0]
	fast_u0 = acc_u0 / (float)ANALOG_SAMPLES_N;
 800b414:	4b4e      	ldr	r3, [pc, #312]	; (800b550 <fast_control_task+0x1a8>)
 800b416:	ed93 7a00 	vldr	s14, [r3]
 800b41a:	eddf 6a4b 	vldr	s13, [pc, #300]	; 800b548 <fast_control_task+0x1a0>
 800b41e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b422:	4b4c      	ldr	r3, [pc, #304]	; (800b554 <fast_control_task+0x1ac>)
 800b424:	edc3 7a00 	vstr	s15, [r3]
	acc_u0 = 0.0f;
 800b428:	4b49      	ldr	r3, [pc, #292]	; (800b550 <fast_control_task+0x1a8>)
 800b42a:	f04f 0200 	mov.w	r2, #0
 800b42e:	601a      	str	r2, [r3, #0]

	// --- deriving quantities
	fast_P_consumed = fast_I_tot * fast_u0 * (float)fast_Vbus * CONVERT_VBUS_INT2V  / WANKEL_ADVANTAGE;
 800b430:	4b46      	ldr	r3, [pc, #280]	; (800b54c <fast_control_task+0x1a4>)
 800b432:	ed93 7a00 	vldr	s14, [r3]
 800b436:	4b47      	ldr	r3, [pc, #284]	; (800b554 <fast_control_task+0x1ac>)
 800b438:	edd3 7a00 	vldr	s15, [r3]
 800b43c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b440:	4b3f      	ldr	r3, [pc, #252]	; (800b540 <fast_control_task+0x198>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	ee07 3a90 	vmov	s15, r3
 800b448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b450:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b558 <fast_control_task+0x1b0>
 800b454:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b458:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b55c <fast_control_task+0x1b4>
 800b45c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b460:	4b3f      	ldr	r3, [pc, #252]	; (800b560 <fast_control_task+0x1b8>)
 800b462:	edc3 7a00 	vstr	s15, [r3]

	// sw current limit switch off
	static uint32_t I_lim_exceeded_counter = 0;
	static uint32_t T_ESC_lim_exceeded_counter = 0;
	static uint32_t T_MOTOR_lim_exceeded_counter = 0;
	if (fast_I_tot > I_LIM){
 800b466:	4b39      	ldr	r3, [pc, #228]	; (800b54c <fast_control_task+0x1a4>)
 800b468:	edd3 7a00 	vldr	s15, [r3]
 800b46c:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800b564 <fast_control_task+0x1bc>
 800b470:	eef4 7ac7 	vcmpe.f32	s15, s14
 800b474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b478:	dd05      	ble.n	800b486 <fast_control_task+0xde>
		I_lim_exceeded_counter++;
 800b47a:	4b3b      	ldr	r3, [pc, #236]	; (800b568 <fast_control_task+0x1c0>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	3301      	adds	r3, #1
 800b480:	4a39      	ldr	r2, [pc, #228]	; (800b568 <fast_control_task+0x1c0>)
 800b482:	6013      	str	r3, [r2, #0]
 800b484:	e002      	b.n	800b48c <fast_control_task+0xe4>
	}
	else {
		I_lim_exceeded_counter = 0;
 800b486:	4b38      	ldr	r3, [pc, #224]	; (800b568 <fast_control_task+0x1c0>)
 800b488:	2200      	movs	r2, #0
 800b48a:	601a      	str	r2, [r3, #0]
	}
	if (I_lim_exceeded_counter > I_LIM_MAX_COUNT){
 800b48c:	4b36      	ldr	r3, [pc, #216]	; (800b568 <fast_control_task+0x1c0>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b64      	cmp	r3, #100	; 0x64
 800b492:	d902      	bls.n	800b49a <fast_control_task+0xf2>
		sw_enable_pwm = false;
 800b494:	4b35      	ldr	r3, [pc, #212]	; (800b56c <fast_control_task+0x1c4>)
 800b496:	2200      	movs	r2, #0
 800b498:	701a      	strb	r2, [r3, #0]
	}
	if (av_ESC_TEMP > T_ESC_LIM){
 800b49a:	4b35      	ldr	r3, [pc, #212]	; (800b570 <fast_control_task+0x1c8>)
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d905      	bls.n	800b4b2 <fast_control_task+0x10a>
		T_ESC_lim_exceeded_counter++;
 800b4a6:	4b33      	ldr	r3, [pc, #204]	; (800b574 <fast_control_task+0x1cc>)
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	3301      	adds	r3, #1
 800b4ac:	4a31      	ldr	r2, [pc, #196]	; (800b574 <fast_control_task+0x1cc>)
 800b4ae:	6013      	str	r3, [r2, #0]
 800b4b0:	e002      	b.n	800b4b8 <fast_control_task+0x110>
	}
	else {
		T_ESC_lim_exceeded_counter = 0;
 800b4b2:	4b30      	ldr	r3, [pc, #192]	; (800b574 <fast_control_task+0x1cc>)
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	601a      	str	r2, [r3, #0]
	}
	if (T_ESC_lim_exceeded_counter > T_LIM_MAX_COUNT){
 800b4b8:	4b2e      	ldr	r3, [pc, #184]	; (800b574 <fast_control_task+0x1cc>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	2b64      	cmp	r3, #100	; 0x64
 800b4be:	d902      	bls.n	800b4c6 <fast_control_task+0x11e>
		sw_enable_pwm = false;
 800b4c0:	4b2a      	ldr	r3, [pc, #168]	; (800b56c <fast_control_task+0x1c4>)
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	701a      	strb	r2, [r3, #0]
	}
	if (av_MOT_TEMP > T_MOTOR_LIM){
 800b4c6:	4b2c      	ldr	r3, [pc, #176]	; (800b578 <fast_control_task+0x1d0>)
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d905      	bls.n	800b4de <fast_control_task+0x136>
		T_MOTOR_lim_exceeded_counter++;
 800b4d2:	4b2a      	ldr	r3, [pc, #168]	; (800b57c <fast_control_task+0x1d4>)
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	3301      	adds	r3, #1
 800b4d8:	4a28      	ldr	r2, [pc, #160]	; (800b57c <fast_control_task+0x1d4>)
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	e002      	b.n	800b4e4 <fast_control_task+0x13c>
	}
	else {
		T_MOTOR_lim_exceeded_counter = 0;
 800b4de:	4b27      	ldr	r3, [pc, #156]	; (800b57c <fast_control_task+0x1d4>)
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	601a      	str	r2, [r3, #0]
	}
	if (T_MOTOR_lim_exceeded_counter > T_LIM_MAX_COUNT){
 800b4e4:	4b25      	ldr	r3, [pc, #148]	; (800b57c <fast_control_task+0x1d4>)
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b64      	cmp	r3, #100	; 0x64
 800b4ea:	d902      	bls.n	800b4f2 <fast_control_task+0x14a>
		sw_enable_pwm = false;
 800b4ec:	4b1f      	ldr	r3, [pc, #124]	; (800b56c <fast_control_task+0x1c4>)
 800b4ee:	2200      	movs	r2, #0
 800b4f0:	701a      	strb	r2, [r3, #0]

	//lp_ESC_TEMP = (1.0f - LP_TEMP) * lp_ESC_TEMP + LP_TEMP * (float)HAL_ADCEx_InjectedGetValue (&hadc1, RANK_T);
	//lp_MOT_TEMP = (1.0f - LP_TEMP) * lp_MOT_TEMP + LP_TEMP * (float)HAL_ADCEx_InjectedGetValue (&hadc2, RANK_T);

	static uint32_t analog_samples_av_counter = 0;
	if (analog_samples_av_counter < ANALOG_SAMPLES_AV_N){
 800b4f2:	4b23      	ldr	r3, [pc, #140]	; (800b580 <fast_control_task+0x1d8>)
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	2b3f      	cmp	r3, #63	; 0x3f
 800b4f8:	d84c      	bhi.n	800b594 <fast_control_task+0x1ec>
		acc_ESC_TEMP += HAL_ADCEx_InjectedGetValue (&hadc1, RANK_T);
 800b4fa:	2102      	movs	r1, #2
 800b4fc:	4821      	ldr	r0, [pc, #132]	; (800b584 <fast_control_task+0x1dc>)
 800b4fe:	f7f6 fbb3 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800b502:	4602      	mov	r2, r0
 800b504:	4b20      	ldr	r3, [pc, #128]	; (800b588 <fast_control_task+0x1e0>)
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4413      	add	r3, r2
 800b50a:	4a1f      	ldr	r2, [pc, #124]	; (800b588 <fast_control_task+0x1e0>)
 800b50c:	6013      	str	r3, [r2, #0]
		acc_MOT_TEMP += HAL_ADCEx_InjectedGetValue (&hadc2, RANK_T);
 800b50e:	2102      	movs	r1, #2
 800b510:	481e      	ldr	r0, [pc, #120]	; (800b58c <fast_control_task+0x1e4>)
 800b512:	f7f6 fba9 	bl	8001c68 <HAL_ADCEx_InjectedGetValue>
 800b516:	4602      	mov	r2, r0
 800b518:	4b1d      	ldr	r3, [pc, #116]	; (800b590 <fast_control_task+0x1e8>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	4413      	add	r3, r2
 800b51e:	4a1c      	ldr	r2, [pc, #112]	; (800b590 <fast_control_task+0x1e8>)
 800b520:	6013      	str	r3, [r2, #0]
		analog_samples_av_counter++;
 800b522:	4b17      	ldr	r3, [pc, #92]	; (800b580 <fast_control_task+0x1d8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	3301      	adds	r3, #1
 800b528:	4a15      	ldr	r2, [pc, #84]	; (800b580 <fast_control_task+0x1d8>)
 800b52a:	6013      	str	r3, [r2, #0]
 800b52c:	e045      	b.n	800b5ba <fast_control_task+0x212>
 800b52e:	bf00      	nop
 800b530:	40020c00 	.word	0x40020c00
 800b534:	20000110 	.word	0x20000110
 800b538:	20000114 	.word	0x20000114
 800b53c:	20000118 	.word	0x20000118
 800b540:	20000038 	.word	0x20000038
 800b544:	2000012c 	.word	0x2000012c
 800b548:	42000000 	.word	0x42000000
 800b54c:	20000130 	.word	0x20000130
 800b550:	20000134 	.word	0x20000134
 800b554:	20000138 	.word	0x20000138
 800b558:	3c872b02 	.word	0x3c872b02
 800b55c:	3f93cd36 	.word	0x3f93cd36
 800b560:	2000013c 	.word	0x2000013c
 800b564:	42c80000 	.word	0x42c80000
 800b568:	20000170 	.word	0x20000170
 800b56c:	200000e2 	.word	0x200000e2
 800b570:	20000120 	.word	0x20000120
 800b574:	20000174 	.word	0x20000174
 800b578:	20000128 	.word	0x20000128
 800b57c:	20000178 	.word	0x20000178
 800b580:	2000017c 	.word	0x2000017c
 800b584:	20000cc8 	.word	0x20000cc8
 800b588:	2000011c 	.word	0x2000011c
 800b58c:	200005dc 	.word	0x200005dc
 800b590:	20000124 	.word	0x20000124
	}
	else {
		av_ESC_TEMP = acc_ESC_TEMP >> ANALOG_SAMPLES_AV_BITSHIFT;
 800b594:	4b8f      	ldr	r3, [pc, #572]	; (800b7d4 <fast_control_task+0x42c>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	099b      	lsrs	r3, r3, #6
 800b59a:	4a8f      	ldr	r2, [pc, #572]	; (800b7d8 <fast_control_task+0x430>)
 800b59c:	6013      	str	r3, [r2, #0]
		acc_ESC_TEMP = 0;
 800b59e:	4b8d      	ldr	r3, [pc, #564]	; (800b7d4 <fast_control_task+0x42c>)
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	601a      	str	r2, [r3, #0]
		av_MOT_TEMP = acc_MOT_TEMP >> ANALOG_SAMPLES_AV_BITSHIFT;
 800b5a4:	4b8d      	ldr	r3, [pc, #564]	; (800b7dc <fast_control_task+0x434>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	099b      	lsrs	r3, r3, #6
 800b5aa:	4a8d      	ldr	r2, [pc, #564]	; (800b7e0 <fast_control_task+0x438>)
 800b5ac:	6013      	str	r3, [r2, #0]
		acc_MOT_TEMP = 0;
 800b5ae:	4b8b      	ldr	r3, [pc, #556]	; (800b7dc <fast_control_task+0x434>)
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	601a      	str	r2, [r3, #0]
		analog_samples_av_counter = 0;
 800b5b4:	4b8b      	ldr	r3, [pc, #556]	; (800b7e4 <fast_control_task+0x43c>)
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	601a      	str	r2, [r3, #0]
	}

	//calc_omega();

	// --- correct for missing update in omecaEnc for very small omega
	if (omegaEnc_missing_update_counter > OMEGAENC_MISSING_UPDATE_MAX){
 800b5ba:	4b8b      	ldr	r3, [pc, #556]	; (800b7e8 <fast_control_task+0x440>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	2b64      	cmp	r3, #100	; 0x64
 800b5c0:	dd07      	ble.n	800b5d2 <fast_control_task+0x22a>
		omegaEnc = 0.0f;
 800b5c2:	4b8a      	ldr	r3, [pc, #552]	; (800b7ec <fast_control_task+0x444>)
 800b5c4:	f04f 0200 	mov.w	r2, #0
 800b5c8:	601a      	str	r2, [r3, #0]
		omegaEncDot = 0.0f;
 800b5ca:	4b89      	ldr	r3, [pc, #548]	; (800b7f0 <fast_control_task+0x448>)
 800b5cc:	f04f 0200 	mov.w	r2, #0
 800b5d0:	601a      	str	r2, [r3, #0]
	}
	omegaEnc_missing_update_counter ++;
 800b5d2:	4b85      	ldr	r3, [pc, #532]	; (800b7e8 <fast_control_task+0x440>)
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	4a83      	ldr	r2, [pc, #524]	; (800b7e8 <fast_control_task+0x440>)
 800b5da:	6013      	str	r3, [r2, #0]

	static uint32_t last_tim5_cnt = 0 ;
	if (control_mode == position_control){
 800b5dc:	4b85      	ldr	r3, [pc, #532]	; (800b7f4 <fast_control_task+0x44c>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b01      	cmp	r3, #1
 800b5e2:	f040 80ea 	bne.w	800b7ba <fast_control_task+0x412>

		float t = (float)((TIM5->CNT - last_tim5_cnt) ) / 100000.0f;
 800b5e6:	4b84      	ldr	r3, [pc, #528]	; (800b7f8 <fast_control_task+0x450>)
 800b5e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5ea:	4b84      	ldr	r3, [pc, #528]	; (800b7fc <fast_control_task+0x454>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	1ad3      	subs	r3, r2, r3
 800b5f0:	ee07 3a90 	vmov	s15, r3
 800b5f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b5f8:	eddf 6a81 	vldr	s13, [pc, #516]	; 800b800 <fast_control_task+0x458>
 800b5fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b600:	edc7 7a04 	vstr	s15, [r7, #16]

		int32_t desired_EncVal = pos_offset + pos_amp * sin(6.28f * pos_freq * t);
 800b604:	4b7f      	ldr	r3, [pc, #508]	; (800b804 <fast_control_task+0x45c>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	4618      	mov	r0, r3
 800b60a:	f7f4 ff8b 	bl	8000524 <__aeabi_i2d>
 800b60e:	4604      	mov	r4, r0
 800b610:	460d      	mov	r5, r1
 800b612:	4b7d      	ldr	r3, [pc, #500]	; (800b808 <fast_control_task+0x460>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	4618      	mov	r0, r3
 800b618:	f7f4 ff96 	bl	8000548 <__aeabi_f2d>
 800b61c:	4680      	mov	r8, r0
 800b61e:	4689      	mov	r9, r1
 800b620:	4b7a      	ldr	r3, [pc, #488]	; (800b80c <fast_control_task+0x464>)
 800b622:	edd3 7a00 	vldr	s15, [r3]
 800b626:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800b810 <fast_control_task+0x468>
 800b62a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800b62e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b632:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b636:	ee17 0a90 	vmov	r0, s15
 800b63a:	f7f4 ff85 	bl	8000548 <__aeabi_f2d>
 800b63e:	4602      	mov	r2, r0
 800b640:	460b      	mov	r3, r1
 800b642:	ec43 2b10 	vmov	d0, r2, r3
 800b646:	f002 fa3f 	bl	800dac8 <sin>
 800b64a:	ec53 2b10 	vmov	r2, r3, d0
 800b64e:	4640      	mov	r0, r8
 800b650:	4649      	mov	r1, r9
 800b652:	f7f4 ffd1 	bl	80005f8 <__aeabi_dmul>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	4620      	mov	r0, r4
 800b65c:	4629      	mov	r1, r5
 800b65e:	f7f4 fe15 	bl	800028c <__adddf3>
 800b662:	4603      	mov	r3, r0
 800b664:	460c      	mov	r4, r1
 800b666:	4618      	mov	r0, r3
 800b668:	4621      	mov	r1, r4
 800b66a:	f7f5 fa75 	bl	8000b58 <__aeabi_d2iz>
 800b66e:	4603      	mov	r3, r0
 800b670:	60fb      	str	r3, [r7, #12]
		//		else{
		//			desired_EncVal = 0;
		//		}


		int32_t Enc_Val_total = (int32_t)TIM8->CNT + rotation_counter * ENC_STEPS;
 800b672:	4b68      	ldr	r3, [pc, #416]	; (800b814 <fast_control_task+0x46c>)
 800b674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b676:	4619      	mov	r1, r3
 800b678:	4b67      	ldr	r3, [pc, #412]	; (800b818 <fast_control_task+0x470>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800b680:	fb02 f303 	mul.w	r3, r2, r3
 800b684:	440b      	add	r3, r1
 800b686:	60bb      	str	r3, [r7, #8]
		float raw_amp = (float)(Enc_Val_total - desired_EncVal) * P_gain; //oscillates for P_gain > 0.005f
 800b688:	68ba      	ldr	r2, [r7, #8]
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	1ad3      	subs	r3, r2, r3
 800b68e:	ee07 3a90 	vmov	s15, r3
 800b692:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b696:	4b61      	ldr	r3, [pc, #388]	; (800b81c <fast_control_task+0x474>)
 800b698:	edd3 7a00 	vldr	s15, [r3]
 800b69c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6a0:	edc7 7a05 	vstr	s15, [r7, #20]
		float raw_amp_check = raw_amp;
 800b6a4:	697b      	ldr	r3, [r7, #20]
 800b6a6:	607b      	str	r3, [r7, #4]
		//			direction = -1;
		//		}
		//		else{
		//			direction = 1;
		//		}
		if (raw_amp > pos_amp_limit){
 800b6a8:	4b5d      	ldr	r3, [pc, #372]	; (800b820 <fast_control_task+0x478>)
 800b6aa:	edd3 7a00 	vldr	s15, [r3]
 800b6ae:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6ba:	dd02      	ble.n	800b6c2 <fast_control_task+0x31a>
			raw_amp = pos_amp_limit;
 800b6bc:	4b58      	ldr	r3, [pc, #352]	; (800b820 <fast_control_task+0x478>)
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	617b      	str	r3, [r7, #20]
		}
		if (raw_amp < - pos_amp_limit){
 800b6c2:	4b57      	ldr	r3, [pc, #348]	; (800b820 <fast_control_task+0x478>)
 800b6c4:	edd3 7a00 	vldr	s15, [r3]
 800b6c8:	eef1 7a67 	vneg.f32	s15, s15
 800b6cc:	ed97 7a05 	vldr	s14, [r7, #20]
 800b6d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800b6d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6d8:	d506      	bpl.n	800b6e8 <fast_control_task+0x340>
			raw_amp = - pos_amp_limit;
 800b6da:	4b51      	ldr	r3, [pc, #324]	; (800b820 <fast_control_task+0x478>)
 800b6dc:	edd3 7a00 	vldr	s15, [r3]
 800b6e0:	eef1 7a67 	vneg.f32	s15, s15
 800b6e4:	edc7 7a05 	vstr	s15, [r7, #20]
		}
		amp = raw_amp;
 800b6e8:	4a4e      	ldr	r2, [pc, #312]	; (800b824 <fast_control_task+0x47c>)
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	6013      	str	r3, [r2, #0]

		if (buf_msgs[0] == '\0'){
 800b6ee:	4b4e      	ldr	r3, [pc, #312]	; (800b828 <fast_control_task+0x480>)
 800b6f0:	781b      	ldrb	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d165      	bne.n	800b7c2 <fast_control_task+0x41a>
			sprintf(buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
					(int)((float)(Enc_Val_total - desired_EncVal) * 0.0005f*1000.0f),
 800b6f6:	68ba      	ldr	r2, [r7, #8]
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	1ad3      	subs	r3, r2, r3
 800b6fc:	ee07 3a90 	vmov	s15, r3
 800b700:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b704:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b82c <fast_control_task+0x484>
 800b708:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b70c:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800b830 <fast_control_task+0x488>
 800b710:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf(buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b714:	eefd 6ae7 	vcvt.s32.f32	s13, s15
					(int)(raw_amp*1000),
 800b718:	edd7 7a05 	vldr	s15, [r7, #20]
 800b71c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800b830 <fast_control_task+0x488>
 800b720:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf(buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b724:	eebd 6ae7 	vcvt.s32.f32	s12, s15
					(int)(raw_amp_check*1000),
 800b728:	edd7 7a01 	vldr	s15, [r7, #4]
 800b72c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800b830 <fast_control_task+0x488>
 800b730:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf(buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b734:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b738:	ee17 1a90 	vmov	r1, s15
 800b73c:	4b32      	ldr	r3, [pc, #200]	; (800b808 <fast_control_task+0x460>)
 800b73e:	edd3 7a00 	vldr	s15, [r3]
 800b742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b746:	ee17 0a90 	vmov	r0, s15
					(int)Enc_Val_total,
					(int)(pos_amp),
					(int)(pos_freq*1000),
 800b74a:	4b30      	ldr	r3, [pc, #192]	; (800b80c <fast_control_task+0x464>)
 800b74c:	edd3 7a00 	vldr	s15, [r3]
 800b750:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800b830 <fast_control_task+0x488>
 800b754:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf(buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b758:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b75c:	ee17 4a90 	vmov	r4, s15
					(int)(pos_amp_limit * 1000),
 800b760:	4b2f      	ldr	r3, [pc, #188]	; (800b820 <fast_control_task+0x478>)
 800b762:	edd3 7a00 	vldr	s15, [r3]
 800b766:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b830 <fast_control_task+0x488>
 800b76a:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf(buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b76e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b772:	ee17 5a90 	vmov	r5, s15
 800b776:	4b23      	ldr	r3, [pc, #140]	; (800b804 <fast_control_task+0x45c>)
 800b778:	681b      	ldr	r3, [r3, #0]
					(int)(pos_offset),
					(int)(P_gain*1000000));
 800b77a:	4a28      	ldr	r2, [pc, #160]	; (800b81c <fast_control_task+0x474>)
 800b77c:	edd2 7a00 	vldr	s15, [r2]
 800b780:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b834 <fast_control_task+0x48c>
 800b784:	ee67 7a87 	vmul.f32	s15, s15, s14
			sprintf(buf_msg, "[HEART] raw_a: %d %d %d Enc_tot: %d a: %d f: %d lim: %d off: %d g: %d\r\n",
 800b788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b78c:	ee17 2a90 	vmov	r2, s15
 800b790:	9206      	str	r2, [sp, #24]
 800b792:	9305      	str	r3, [sp, #20]
 800b794:	9504      	str	r5, [sp, #16]
 800b796:	9403      	str	r4, [sp, #12]
 800b798:	9002      	str	r0, [sp, #8]
 800b79a:	68bb      	ldr	r3, [r7, #8]
 800b79c:	9301      	str	r3, [sp, #4]
 800b79e:	9100      	str	r1, [sp, #0]
 800b7a0:	ee16 3a10 	vmov	r3, s12
 800b7a4:	ee16 2a90 	vmov	r2, s13
 800b7a8:	4923      	ldr	r1, [pc, #140]	; (800b838 <fast_control_task+0x490>)
 800b7aa:	4824      	ldr	r0, [pc, #144]	; (800b83c <fast_control_task+0x494>)
 800b7ac:	f001 fd30 	bl	800d210 <siprintf>
			strcat(buf_msgs, buf_msg);
 800b7b0:	4922      	ldr	r1, [pc, #136]	; (800b83c <fast_control_task+0x494>)
 800b7b2:	481d      	ldr	r0, [pc, #116]	; (800b828 <fast_control_task+0x480>)
 800b7b4:	f001 fd4c 	bl	800d250 <strcat>
 800b7b8:	e003      	b.n	800b7c2 <fast_control_task+0x41a>
		}
	}
	else{
		last_tim5_cnt = TIM5->CNT;
 800b7ba:	4b0f      	ldr	r3, [pc, #60]	; (800b7f8 <fast_control_task+0x450>)
 800b7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7be:	4a0f      	ldr	r2, [pc, #60]	; (800b7fc <fast_control_task+0x454>)
 800b7c0:	6013      	str	r3, [r2, #0]
	}
#if DB_TIMING
	DB2L;
 800b7c2:	4b1f      	ldr	r3, [pc, #124]	; (800b840 <fast_control_task+0x498>)
 800b7c4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800b7c8:	619a      	str	r2, [r3, #24]
#endif
}
 800b7ca:	bf00      	nop
 800b7cc:	3718      	adds	r7, #24
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800b7d4:	2000011c 	.word	0x2000011c
 800b7d8:	20000120 	.word	0x20000120
 800b7dc:	20000124 	.word	0x20000124
 800b7e0:	20000128 	.word	0x20000128
 800b7e4:	2000017c 	.word	0x2000017c
 800b7e8:	200000fc 	.word	0x200000fc
 800b7ec:	20000100 	.word	0x20000100
 800b7f0:	20000108 	.word	0x20000108
 800b7f4:	200000dc 	.word	0x200000dc
 800b7f8:	40000c00 	.word	0x40000c00
 800b7fc:	20000180 	.word	0x20000180
 800b800:	47c35000 	.word	0x47c35000
 800b804:	200000e8 	.word	0x200000e8
 800b808:	20000024 	.word	0x20000024
 800b80c:	20000028 	.word	0x20000028
 800b810:	40c8f5c3 	.word	0x40c8f5c3
 800b814:	40010400 	.word	0x40010400
 800b818:	200000f0 	.word	0x200000f0
 800b81c:	20000030 	.word	0x20000030
 800b820:	2000002c 	.word	0x2000002c
 800b824:	200000e4 	.word	0x200000e4
 800b828:	20001834 	.word	0x20001834
 800b82c:	3a03126f 	.word	0x3a03126f
 800b830:	447a0000 	.word	0x447a0000
 800b834:	49742400 	.word	0x49742400
 800b838:	0800eed4 	.word	0x0800eed4
 800b83c:	2000250c 	.word	0x2000250c
 800b840:	40020c00 	.word	0x40020c00

0800b844 <slow_control_task>:

void slow_control_task(void){
 800b844:	b480      	push	{r7}
 800b846:	af00      	add	r7, sp, #0
	//can communication update

}
 800b848:	bf00      	nop
 800b84a:	46bd      	mov	sp, r7
 800b84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b850:	4770      	bx	lr
	...

0800b854 <convert2SI_strain0>:

float convert2SI_strain0(uint32_t strain){
 800b854:	b480      	push	{r7}
 800b856:	b083      	sub	sp, #12
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
	return (float) ((int32_t)strain - STRAIN0_OFFSET) * STRAIN0_NperINT;
 800b85c:	687a      	ldr	r2, [r7, #4]
 800b85e:	4b09      	ldr	r3, [pc, #36]	; (800b884 <convert2SI_strain0+0x30>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	1ad3      	subs	r3, r2, r3
 800b864:	ee07 3a90 	vmov	s15, r3
 800b868:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b86c:	4b06      	ldr	r3, [pc, #24]	; (800b888 <convert2SI_strain0+0x34>)
 800b86e:	edd3 7a00 	vldr	s15, [r3]
 800b872:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 800b876:	eeb0 0a67 	vmov.f32	s0, s15
 800b87a:	370c      	adds	r7, #12
 800b87c:	46bd      	mov	sp, r7
 800b87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b882:	4770      	bx	lr
 800b884:	20000014 	.word	0x20000014
 800b888:	20000010 	.word	0x20000010

0800b88c <keyboard_intake>:

void keyboard_intake(void){
 800b88c:	b580      	push	{r7, lr}
 800b88e:	af00      	add	r7, sp, #0

	HAL_UART_Receive_IT(&huart3, (uint8_t *)&ch, 1);
 800b890:	2201      	movs	r2, #1
 800b892:	49c6      	ldr	r1, [pc, #792]	; (800bbac <keyboard_intake+0x320>)
 800b894:	48c6      	ldr	r0, [pc, #792]	; (800bbb0 <keyboard_intake+0x324>)
 800b896:	f7fb febf 	bl	8007618 <HAL_UART_Receive_IT>

	if (rx_character_buffered != '.'){
 800b89a:	4bc6      	ldr	r3, [pc, #792]	; (800bbb4 <keyboard_intake+0x328>)
 800b89c:	781b      	ldrb	r3, [r3, #0]
 800b89e:	2b2e      	cmp	r3, #46	; 0x2e
 800b8a0:	d006      	beq.n	800b8b0 <keyboard_intake+0x24>
		ch = rx_character_buffered;
 800b8a2:	4bc4      	ldr	r3, [pc, #784]	; (800bbb4 <keyboard_intake+0x328>)
 800b8a4:	781a      	ldrb	r2, [r3, #0]
 800b8a6:	4bc1      	ldr	r3, [pc, #772]	; (800bbac <keyboard_intake+0x320>)
 800b8a8:	701a      	strb	r2, [r3, #0]
		//rx_character_armed = 0;
		rx_character_buffered = '.';
 800b8aa:	4bc2      	ldr	r3, [pc, #776]	; (800bbb4 <keyboard_intake+0x328>)
 800b8ac:	222e      	movs	r2, #46	; 0x2e
 800b8ae:	701a      	strb	r2, [r3, #0]
	}//since beginning of slow 1000ns


	switch(ch){
 800b8b0:	4bbe      	ldr	r3, [pc, #760]	; (800bbac <keyboard_intake+0x320>)
 800b8b2:	781b      	ldrb	r3, [r3, #0]
 800b8b4:	3b41      	subs	r3, #65	; 0x41
 800b8b6:	2b39      	cmp	r3, #57	; 0x39
 800b8b8:	f200 820f 	bhi.w	800bcda <keyboard_intake+0x44e>
 800b8bc:	a201      	add	r2, pc, #4	; (adr r2, 800b8c4 <keyboard_intake+0x38>)
 800b8be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c2:	bf00      	nop
 800b8c4:	0800bb6d 	.word	0x0800bb6d
 800b8c8:	0800bc59 	.word	0x0800bc59
 800b8cc:	0800bb83 	.word	0x0800bb83
 800b8d0:	0800bb5b 	.word	0x0800bb5b
 800b8d4:	0800bc09 	.word	0x0800bc09
 800b8d8:	0800bbf5 	.word	0x0800bbf5
 800b8dc:	0800bc51 	.word	0x0800bc51
 800b8e0:	0800bcdb 	.word	0x0800bcdb
 800b8e4:	0800bcdb 	.word	0x0800bcdb
 800b8e8:	0800bcdb 	.word	0x0800bcdb
 800b8ec:	0800bcdb 	.word	0x0800bcdb
 800b8f0:	0800bc61 	.word	0x0800bc61
 800b8f4:	0800bc21 	.word	0x0800bc21
 800b8f8:	0800bc33 	.word	0x0800bc33
 800b8fc:	0800bcdb 	.word	0x0800bcdb
 800b900:	0800bb17 	.word	0x0800bb17
 800b904:	0800bc15 	.word	0x0800bc15
 800b908:	0800bb9b 	.word	0x0800bb9b
 800b90c:	0800bb45 	.word	0x0800bb45
 800b910:	0800bc49 	.word	0x0800bc49
 800b914:	0800bcdb 	.word	0x0800bcdb
 800b918:	0800bcdb 	.word	0x0800bcdb
 800b91c:	0800bb33 	.word	0x0800bb33
 800b920:	0800bb11 	.word	0x0800bb11
 800b924:	0800bcdb 	.word	0x0800bcdb
 800b928:	0800bcbb 	.word	0x0800bcbb
 800b92c:	0800bcdb 	.word	0x0800bcdb
 800b930:	0800bcdb 	.word	0x0800bcdb
 800b934:	0800bcdb 	.word	0x0800bcdb
 800b938:	0800bcdb 	.word	0x0800bcdb
 800b93c:	0800bcdb 	.word	0x0800bcdb
 800b940:	0800bcdb 	.word	0x0800bcdb
 800b944:	0800b9d5 	.word	0x0800b9d5
 800b948:	0800bca5 	.word	0x0800bca5
 800b94c:	0800bcdb 	.word	0x0800bcdb
 800b950:	0800b9eb 	.word	0x0800b9eb
 800b954:	0800ba17 	.word	0x0800ba17
 800b958:	0800ba61 	.word	0x0800ba61
 800b95c:	0800ba35 	.word	0x0800ba35
 800b960:	0800ba3d 	.word	0x0800ba3d
 800b964:	0800bb1d 	.word	0x0800bb1d
 800b968:	0800babb 	.word	0x0800babb
 800b96c:	0800bb25 	.word	0x0800bb25
 800b970:	0800bafb 	.word	0x0800bafb
 800b974:	0800bc67 	.word	0x0800bc67
 800b978:	0800bc79 	.word	0x0800bc79
 800b97c:	0800baf1 	.word	0x0800baf1
 800b980:	0800bad1 	.word	0x0800bad1
 800b984:	0800ba01 	.word	0x0800ba01
 800b988:	0800ba87 	.word	0x0800ba87
 800b98c:	0800b9bf 	.word	0x0800b9bf
 800b990:	0800ba2d 	.word	0x0800ba2d
 800b994:	0800baa5 	.word	0x0800baa5
 800b998:	0800bc8f 	.word	0x0800bc8f
 800b99c:	0800b9ad 	.word	0x0800b9ad
 800b9a0:	0800bcdb 	.word	0x0800bcdb
 800b9a4:	0800bcdb 	.word	0x0800bcdb
 800b9a8:	0800ba99 	.word	0x0800ba99
	case 'w':
		amp *= 2;
 800b9ac:	4b82      	ldr	r3, [pc, #520]	; (800bbb8 <keyboard_intake+0x32c>)
 800b9ae:	edd3 7a00 	vldr	s15, [r3]
 800b9b2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b9b6:	4b80      	ldr	r3, [pc, #512]	; (800bbb8 <keyboard_intake+0x32c>)
 800b9b8:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b9bc:	e190      	b.n	800bce0 <keyboard_intake+0x454>
	case 's':
		amp /= 2;
 800b9be:	4b7e      	ldr	r3, [pc, #504]	; (800bbb8 <keyboard_intake+0x32c>)
 800b9c0:	ed93 7a00 	vldr	s14, [r3]
 800b9c4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800b9c8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b9cc:	4b7a      	ldr	r3, [pc, #488]	; (800bbb8 <keyboard_intake+0x32c>)
 800b9ce:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b9d2:	e185      	b.n	800bce0 <keyboard_intake+0x454>
	case 'a':
		phase_shift -= 0.05f;
 800b9d4:	4b79      	ldr	r3, [pc, #484]	; (800bbbc <keyboard_intake+0x330>)
 800b9d6:	edd3 7a00 	vldr	s15, [r3]
 800b9da:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800bbc0 <keyboard_intake+0x334>
 800b9de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b9e2:	4b76      	ldr	r3, [pc, #472]	; (800bbbc <keyboard_intake+0x330>)
 800b9e4:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b9e8:	e17a      	b.n	800bce0 <keyboard_intake+0x454>
	case 'd':
		phase_shift += 0.05f;
 800b9ea:	4b74      	ldr	r3, [pc, #464]	; (800bbbc <keyboard_intake+0x330>)
 800b9ec:	edd3 7a00 	vldr	s15, [r3]
 800b9f0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800bbc0 <keyboard_intake+0x334>
 800b9f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b9f8:	4b70      	ldr	r3, [pc, #448]	; (800bbbc <keyboard_intake+0x330>)
 800b9fa:	edc3 7a00 	vstr	s15, [r3]
		break;
 800b9fe:	e16f      	b.n	800bce0 <keyboard_intake+0x454>
	case 'q':
		phase0 -= 0.05f;
 800ba00:	4b70      	ldr	r3, [pc, #448]	; (800bbc4 <keyboard_intake+0x338>)
 800ba02:	edd3 7a00 	vldr	s15, [r3]
 800ba06:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800bbc0 <keyboard_intake+0x334>
 800ba0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba0e:	4b6d      	ldr	r3, [pc, #436]	; (800bbc4 <keyboard_intake+0x338>)
 800ba10:	edc3 7a00 	vstr	s15, [r3]
		break;
 800ba14:	e164      	b.n	800bce0 <keyboard_intake+0x454>
	case 'e':
		phase0 += 0.05f;
 800ba16:	4b6b      	ldr	r3, [pc, #428]	; (800bbc4 <keyboard_intake+0x338>)
 800ba18:	edd3 7a00 	vldr	s15, [r3]
 800ba1c:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800bbc0 <keyboard_intake+0x334>
 800ba20:	ee77 7a87 	vadd.f32	s15, s15, s14
 800ba24:	4b67      	ldr	r3, [pc, #412]	; (800bbc4 <keyboard_intake+0x338>)
 800ba26:	edc3 7a00 	vstr	s15, [r3]
		break;
 800ba2a:	e159      	b.n	800bce0 <keyboard_intake+0x454>
	case 't':
		sw_enable_pwm = true;
 800ba2c:	4b66      	ldr	r3, [pc, #408]	; (800bbc8 <keyboard_intake+0x33c>)
 800ba2e:	2201      	movs	r2, #1
 800ba30:	701a      	strb	r2, [r3, #0]
		break;
 800ba32:	e155      	b.n	800bce0 <keyboard_intake+0x454>
	case 'g':
		sw_enable_pwm = false;
 800ba34:	4b64      	ldr	r3, [pc, #400]	; (800bbc8 <keyboard_intake+0x33c>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	701a      	strb	r2, [r3, #0]
		break;
 800ba3a:	e151      	b.n	800bce0 <keyboard_intake+0x454>
	case 'h':
		amp = abs(amp); //positive should be clockwise == EncVal increases positive :)
 800ba3c:	4b5e      	ldr	r3, [pc, #376]	; (800bbb8 <keyboard_intake+0x32c>)
 800ba3e:	edd3 7a00 	vldr	s15, [r3]
 800ba42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba46:	ee17 3a90 	vmov	r3, s15
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	bfb8      	it	lt
 800ba4e:	425b      	neglt	r3, r3
 800ba50:	ee07 3a90 	vmov	s15, r3
 800ba54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba58:	4b57      	ldr	r3, [pc, #348]	; (800bbb8 <keyboard_intake+0x32c>)
 800ba5a:	edc3 7a00 	vstr	s15, [r3]
		break;
 800ba5e:	e13f      	b.n	800bce0 <keyboard_intake+0x454>
	case 'f':
		amp = -abs(amp);
 800ba60:	4b55      	ldr	r3, [pc, #340]	; (800bbb8 <keyboard_intake+0x32c>)
 800ba62:	edd3 7a00 	vldr	s15, [r3]
 800ba66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba6a:	ee17 3a90 	vmov	r3, s15
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	bfb8      	it	lt
 800ba72:	425b      	neglt	r3, r3
 800ba74:	425b      	negs	r3, r3
 800ba76:	ee07 3a90 	vmov	s15, r3
 800ba7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba7e:	4b4e      	ldr	r3, [pc, #312]	; (800bbb8 <keyboard_intake+0x32c>)
 800ba80:	edc3 7a00 	vstr	s15, [r3]
		break;
 800ba84:	e12c      	b.n	800bce0 <keyboard_intake+0x454>
	case 'r':
		amp = -amp;
 800ba86:	4b4c      	ldr	r3, [pc, #304]	; (800bbb8 <keyboard_intake+0x32c>)
 800ba88:	edd3 7a00 	vldr	s15, [r3]
 800ba8c:	eef1 7a67 	vneg.f32	s15, s15
 800ba90:	4b49      	ldr	r3, [pc, #292]	; (800bbb8 <keyboard_intake+0x32c>)
 800ba92:	edc3 7a00 	vstr	s15, [r3]
		break;
 800ba96:	e123      	b.n	800bce0 <keyboard_intake+0x454>
	case 'z':
		playSound( 1, 20, 100);
 800ba98:	2264      	movs	r2, #100	; 0x64
 800ba9a:	2114      	movs	r1, #20
 800ba9c:	2001      	movs	r0, #1
 800ba9e:	f7fe fe23 	bl	800a6e8 <playSound>
		break;
 800baa2:	e11d      	b.n	800bce0 <keyboard_intake+0x454>
	case 'u':
		stiffness += 0.0001f;
 800baa4:	4b49      	ldr	r3, [pc, #292]	; (800bbcc <keyboard_intake+0x340>)
 800baa6:	edd3 7a00 	vldr	s15, [r3]
 800baaa:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800bbd0 <keyboard_intake+0x344>
 800baae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bab2:	4b46      	ldr	r3, [pc, #280]	; (800bbcc <keyboard_intake+0x340>)
 800bab4:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bab8:	e112      	b.n	800bce0 <keyboard_intake+0x454>
	case 'j':
		stiffness -= 0.0001f;
 800baba:	4b44      	ldr	r3, [pc, #272]	; (800bbcc <keyboard_intake+0x340>)
 800babc:	edd3 7a00 	vldr	s15, [r3]
 800bac0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800bbd0 <keyboard_intake+0x344>
 800bac4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bac8:	4b40      	ldr	r3, [pc, #256]	; (800bbcc <keyboard_intake+0x340>)
 800baca:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bace:	e107      	b.n	800bce0 <keyboard_intake+0x454>
	case 'p':
		//print2uart = false;
		print2uart = !print2uart;
 800bad0:	4b40      	ldr	r3, [pc, #256]	; (800bbd4 <keyboard_intake+0x348>)
 800bad2:	781b      	ldrb	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	bf14      	ite	ne
 800bad8:	2301      	movne	r3, #1
 800bada:	2300      	moveq	r3, #0
 800badc:	b2db      	uxtb	r3, r3
 800bade:	f083 0301 	eor.w	r3, r3, #1
 800bae2:	b2db      	uxtb	r3, r3
 800bae4:	f003 0301 	and.w	r3, r3, #1
 800bae8:	b2da      	uxtb	r2, r3
 800baea:	4b3a      	ldr	r3, [pc, #232]	; (800bbd4 <keyboard_intake+0x348>)
 800baec:	701a      	strb	r2, [r3, #0]
		break;
 800baee:	e0f7      	b.n	800bce0 <keyboard_intake+0x454>
	case 'o':
		//HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
		EN_GATE_GPIO_Port->BSRR = (uint32_t)EN_GATE_Pin << 16U;
 800baf0:	4b39      	ldr	r3, [pc, #228]	; (800bbd8 <keyboard_intake+0x34c>)
 800baf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800baf6:	619a      	str	r2, [r3, #24]
		break;
 800baf8:	e0f2      	b.n	800bce0 <keyboard_intake+0x454>
	case 'l':
		HAL_GPIO_WritePin(EN_GATE_GPIO_Port, EN_GATE_Pin, 1);
 800bafa:	2201      	movs	r2, #1
 800bafc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800bb00:	4835      	ldr	r0, [pc, #212]	; (800bbd8 <keyboard_intake+0x34c>)
 800bb02:	f7f7 fdd7 	bl	80036b4 <HAL_GPIO_WritePin>
		EN_GATE_GPIO_Port->BSRR = EN_GATE_Pin ;
 800bb06:	4b34      	ldr	r3, [pc, #208]	; (800bbd8 <keyboard_intake+0x34c>)
 800bb08:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bb0c:	619a      	str	r2, [r3, #24]
		break;
 800bb0e:	e0e7      	b.n	800bce0 <keyboard_intake+0x454>
	case 'X':
		step_through_pole_angles();
 800bb10:	f7fe faca 	bl	800a0a8 <step_through_pole_angles>
		break;
 800bb14:	e0e4      	b.n	800bce0 <keyboard_intake+0x454>
	case 'P':
		step_through_pwm_percent();
 800bb16:	f7fe fd13 	bl	800a540 <step_through_pwm_percent>
		break;
 800bb1a:	e0e1      	b.n	800bce0 <keyboard_intake+0x454>
	case 'i':
		control_mode = position_control;
 800bb1c:	4b2f      	ldr	r3, [pc, #188]	; (800bbdc <keyboard_intake+0x350>)
 800bb1e:	2201      	movs	r2, #1
 800bb20:	601a      	str	r2, [r3, #0]
		break;
 800bb22:	e0dd      	b.n	800bce0 <keyboard_intake+0x454>
	case 'k':
		control_mode = voltage_control;
 800bb24:	4b2d      	ldr	r3, [pc, #180]	; (800bbdc <keyboard_intake+0x350>)
 800bb26:	2200      	movs	r2, #0
 800bb28:	601a      	str	r2, [r3, #0]
		amp = 0.05f;
 800bb2a:	4b23      	ldr	r3, [pc, #140]	; (800bbb8 <keyboard_intake+0x32c>)
 800bb2c:	4a2c      	ldr	r2, [pc, #176]	; (800bbe0 <keyboard_intake+0x354>)
 800bb2e:	601a      	str	r2, [r3, #0]
		break;
 800bb30:	e0d6      	b.n	800bce0 <keyboard_intake+0x454>

		// pos control
	case 'W':
		pos_amp *= 2;
 800bb32:	4b2c      	ldr	r3, [pc, #176]	; (800bbe4 <keyboard_intake+0x358>)
 800bb34:	edd3 7a00 	vldr	s15, [r3]
 800bb38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb3c:	4b29      	ldr	r3, [pc, #164]	; (800bbe4 <keyboard_intake+0x358>)
 800bb3e:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bb42:	e0cd      	b.n	800bce0 <keyboard_intake+0x454>
	case 'S':
		pos_amp *= 0.5f;
 800bb44:	4b27      	ldr	r3, [pc, #156]	; (800bbe4 <keyboard_intake+0x358>)
 800bb46:	edd3 7a00 	vldr	s15, [r3]
 800bb4a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bb4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb52:	4b24      	ldr	r3, [pc, #144]	; (800bbe4 <keyboard_intake+0x358>)
 800bb54:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bb58:	e0c2      	b.n	800bce0 <keyboard_intake+0x454>
	case 'D':
		pos_freq *= 2;
 800bb5a:	4b23      	ldr	r3, [pc, #140]	; (800bbe8 <keyboard_intake+0x35c>)
 800bb5c:	edd3 7a00 	vldr	s15, [r3]
 800bb60:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bb64:	4b20      	ldr	r3, [pc, #128]	; (800bbe8 <keyboard_intake+0x35c>)
 800bb66:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bb6a:	e0b9      	b.n	800bce0 <keyboard_intake+0x454>
	case 'A':
		pos_freq *= 0.5f;
 800bb6c:	4b1e      	ldr	r3, [pc, #120]	; (800bbe8 <keyboard_intake+0x35c>)
 800bb6e:	edd3 7a00 	vldr	s15, [r3]
 800bb72:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bb76:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bb7a:	4b1b      	ldr	r3, [pc, #108]	; (800bbe8 <keyboard_intake+0x35c>)
 800bb7c:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bb80:	e0ae      	b.n	800bce0 <keyboard_intake+0x454>
	case 'C':
		if (convert2SI){
 800bb82:	4b1a      	ldr	r3, [pc, #104]	; (800bbec <keyboard_intake+0x360>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <keyboard_intake+0x306>
			convert2SI = false;
 800bb8a:	4b18      	ldr	r3, [pc, #96]	; (800bbec <keyboard_intake+0x360>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	701a      	strb	r2, [r3, #0]
		}
		else {
			convert2SI = true;
		}
		break;
 800bb90:	e0a6      	b.n	800bce0 <keyboard_intake+0x454>
			convert2SI = true;
 800bb92:	4b16      	ldr	r3, [pc, #88]	; (800bbec <keyboard_intake+0x360>)
 800bb94:	2201      	movs	r2, #1
 800bb96:	701a      	strb	r2, [r3, #0]
		break;
 800bb98:	e0a2      	b.n	800bce0 <keyboard_intake+0x454>
	case 'R':
		pos_amp_limit *= 2;
 800bb9a:	4b15      	ldr	r3, [pc, #84]	; (800bbf0 <keyboard_intake+0x364>)
 800bb9c:	edd3 7a00 	vldr	s15, [r3]
 800bba0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bba4:	4b12      	ldr	r3, [pc, #72]	; (800bbf0 <keyboard_intake+0x364>)
 800bba6:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bbaa:	e099      	b.n	800bce0 <keyboard_intake+0x454>
 800bbac:	20000048 	.word	0x20000048
 800bbb0:	2000059c 	.word	0x2000059c
 800bbb4:	20000005 	.word	0x20000005
 800bbb8:	200000e4 	.word	0x200000e4
 800bbbc:	2000001c 	.word	0x2000001c
 800bbc0:	3d4ccccd 	.word	0x3d4ccccd
 800bbc4:	20000008 	.word	0x20000008
 800bbc8:	200000e2 	.word	0x200000e2
 800bbcc:	20000020 	.word	0x20000020
 800bbd0:	38d1b717 	.word	0x38d1b717
 800bbd4:	20000019 	.word	0x20000019
 800bbd8:	40021000 	.word	0x40021000
 800bbdc:	200000dc 	.word	0x200000dc
 800bbe0:	3d4ccccd 	.word	0x3d4ccccd
 800bbe4:	20000024 	.word	0x20000024
 800bbe8:	20000028 	.word	0x20000028
 800bbec:	200000e1 	.word	0x200000e1
 800bbf0:	2000002c 	.word	0x2000002c
	case 'F':
		pos_amp_limit *= 0.5f;
 800bbf4:	4b3b      	ldr	r3, [pc, #236]	; (800bce4 <keyboard_intake+0x458>)
 800bbf6:	edd3 7a00 	vldr	s15, [r3]
 800bbfa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bbfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc02:	4b38      	ldr	r3, [pc, #224]	; (800bce4 <keyboard_intake+0x458>)
 800bc04:	edc3 7a00 	vstr	s15, [r3]
	case 'E':
		pos_offset += 200;
 800bc08:	4b37      	ldr	r3, [pc, #220]	; (800bce8 <keyboard_intake+0x45c>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	33c8      	adds	r3, #200	; 0xc8
 800bc0e:	4a36      	ldr	r2, [pc, #216]	; (800bce8 <keyboard_intake+0x45c>)
 800bc10:	6013      	str	r3, [r2, #0]
		break;
 800bc12:	e065      	b.n	800bce0 <keyboard_intake+0x454>
	case 'Q':
		pos_offset -= 200;
 800bc14:	4b34      	ldr	r3, [pc, #208]	; (800bce8 <keyboard_intake+0x45c>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	3bc8      	subs	r3, #200	; 0xc8
 800bc1a:	4a33      	ldr	r2, [pc, #204]	; (800bce8 <keyboard_intake+0x45c>)
 800bc1c:	6013      	str	r3, [r2, #0]
		break;
 800bc1e:	e05f      	b.n	800bce0 <keyboard_intake+0x454>
	case 'M':
		P_gain *= 2;
 800bc20:	4b32      	ldr	r3, [pc, #200]	; (800bcec <keyboard_intake+0x460>)
 800bc22:	edd3 7a00 	vldr	s15, [r3]
 800bc26:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bc2a:	4b30      	ldr	r3, [pc, #192]	; (800bcec <keyboard_intake+0x460>)
 800bc2c:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bc30:	e056      	b.n	800bce0 <keyboard_intake+0x454>
	case 'N':
		P_gain *= 0.5f;
 800bc32:	4b2e      	ldr	r3, [pc, #184]	; (800bcec <keyboard_intake+0x460>)
 800bc34:	edd3 7a00 	vldr	s15, [r3]
 800bc38:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bc3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc40:	4b2a      	ldr	r3, [pc, #168]	; (800bcec <keyboard_intake+0x460>)
 800bc42:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bc46:	e04b      	b.n	800bce0 <keyboard_intake+0x454>
	case 'T':
		current_mode = sinusoidal;
 800bc48:	4b29      	ldr	r3, [pc, #164]	; (800bcf0 <keyboard_intake+0x464>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	601a      	str	r2, [r3, #0]
		break;
 800bc4e:	e047      	b.n	800bce0 <keyboard_intake+0x454>
	case 'G':
		current_mode = trapezoidal;
 800bc50:	4b27      	ldr	r3, [pc, #156]	; (800bcf0 <keyboard_intake+0x464>)
 800bc52:	2201      	movs	r2, #1
 800bc54:	601a      	str	r2, [r3, #0]
		break;
 800bc56:	e043      	b.n	800bce0 <keyboard_intake+0x454>
	case 'B':
		current_mode = freerun;
 800bc58:	4b25      	ldr	r3, [pc, #148]	; (800bcf0 <keyboard_intake+0x464>)
 800bc5a:	2202      	movs	r2, #2
 800bc5c:	601a      	str	r2, [r3, #0]
		break;
 800bc5e:	e03f      	b.n	800bce0 <keyboard_intake+0x454>
	case 'L':
		explore_limits();
 800bc60:	f7fe fcac 	bl	800a5bc <explore_limits>
		break;
 800bc64:	e03c      	b.n	800bce0 <keyboard_intake+0x454>

	case 'm':
		generic_fac *= 2.0f;
 800bc66:	4b23      	ldr	r3, [pc, #140]	; (800bcf4 <keyboard_intake+0x468>)
 800bc68:	edd3 7a00 	vldr	s15, [r3]
 800bc6c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800bc70:	4b20      	ldr	r3, [pc, #128]	; (800bcf4 <keyboard_intake+0x468>)
 800bc72:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bc76:	e033      	b.n	800bce0 <keyboard_intake+0x454>
	case 'n':
		generic_fac *= 0.5f;
 800bc78:	4b1e      	ldr	r3, [pc, #120]	; (800bcf4 <keyboard_intake+0x468>)
 800bc7a:	edd3 7a00 	vldr	s15, [r3]
 800bc7e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800bc82:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bc86:	4b1b      	ldr	r3, [pc, #108]	; (800bcf4 <keyboard_intake+0x468>)
 800bc88:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bc8c:	e028      	b.n	800bce0 <keyboard_intake+0x454>
	case 'v':
		generic_add += 1.0f;
 800bc8e:	4b1a      	ldr	r3, [pc, #104]	; (800bcf8 <keyboard_intake+0x46c>)
 800bc90:	edd3 7a00 	vldr	s15, [r3]
 800bc94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc98:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bc9c:	4b16      	ldr	r3, [pc, #88]	; (800bcf8 <keyboard_intake+0x46c>)
 800bc9e:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bca2:	e01d      	b.n	800bce0 <keyboard_intake+0x454>
	case 'b':
		generic_add -= 1.0f;
 800bca4:	4b14      	ldr	r3, [pc, #80]	; (800bcf8 <keyboard_intake+0x46c>)
 800bca6:	edd3 7a00 	vldr	s15, [r3]
 800bcaa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bcae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcb2:	4b11      	ldr	r3, [pc, #68]	; (800bcf8 <keyboard_intake+0x46c>)
 800bcb4:	edc3 7a00 	vstr	s15, [r3]
		break;
 800bcb8:	e012      	b.n	800bce0 <keyboard_intake+0x454>
	case 'Z':
		FOC_enabled = !FOC_enabled;
 800bcba:	4b10      	ldr	r3, [pc, #64]	; (800bcfc <keyboard_intake+0x470>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	bf14      	ite	ne
 800bcc2:	2301      	movne	r3, #1
 800bcc4:	2300      	moveq	r3, #0
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	f083 0301 	eor.w	r3, r3, #1
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	4b09      	ldr	r3, [pc, #36]	; (800bcfc <keyboard_intake+0x470>)
 800bcd6:	701a      	strb	r2, [r3, #0]
		break;
 800bcd8:	e002      	b.n	800bce0 <keyboard_intake+0x454>


	default:
		ch='.';
 800bcda:	4b09      	ldr	r3, [pc, #36]	; (800bd00 <keyboard_intake+0x474>)
 800bcdc:	222e      	movs	r2, #46	; 0x2e
 800bcde:	701a      	strb	r2, [r3, #0]
	}//for case 200ns

}
 800bce0:	bf00      	nop
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	2000002c 	.word	0x2000002c
 800bce8:	200000e8 	.word	0x200000e8
 800bcec:	20000030 	.word	0x20000030
 800bcf0:	200000d8 	.word	0x200000d8
 800bcf4:	20000034 	.word	0x20000034
 800bcf8:	200000ec 	.word	0x200000ec
 800bcfc:	200000e0 	.word	0x200000e0
 800bd00:	20000048 	.word	0x20000048

0800bd04 <print_prep_task>:

void print_prep_task(int fast_control_task_counter){
 800bd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bd06:	b08b      	sub	sp, #44	; 0x2c
 800bd08:	af04      	add	r7, sp, #16
 800bd0a:	6078      	str	r0, [r7, #4]
#if DB_TIMING
	DB2H;
 800bd0c:	4ba4      	ldr	r3, [pc, #656]	; (800bfa0 <print_prep_task+0x29c>)
 800bd0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bd12:	619a      	str	r2, [r3, #24]
	DB2L;
 800bd14:	4ba2      	ldr	r3, [pc, #648]	; (800bfa0 <print_prep_task+0x29c>)
 800bd16:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800bd1a:	619a      	str	r2, [r3, #24]
	DB2H;
 800bd1c:	4ba0      	ldr	r3, [pc, #640]	; (800bfa0 <print_prep_task+0x29c>)
 800bd1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bd22:	619a      	str	r2, [r3, #24]
#endif

	int pos = strlen(buf);
 800bd24:	489f      	ldr	r0, [pc, #636]	; (800bfa4 <print_prep_task+0x2a0>)
 800bd26:	f7f4 fa53 	bl	80001d0 <strlen>
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	617b      	str	r3, [r7, #20]
	int left  = BUF_LEN - pos;
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f5c3 73c8 	rsb	r3, r3, #400	; 0x190
 800bd34:	613b      	str	r3, [r7, #16]
		nn = snprintf(buf+pos, left, fmt, val);  \
		pos += nn;                               \
		left -= nn;


	switch (fast_control_task_counter){
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2b14      	cmp	r3, #20
 800bd3a:	f200 82ee 	bhi.w	800c31a <print_prep_task+0x616>
 800bd3e:	a201      	add	r2, pc, #4	; (adr r2, 800bd44 <print_prep_task+0x40>)
 800bd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd44:	0800bd99 	.word	0x0800bd99
 800bd48:	0800c31b 	.word	0x0800c31b
 800bd4c:	0800bdc9 	.word	0x0800bdc9
 800bd50:	0800be13 	.word	0x0800be13
 800bd54:	0800be93 	.word	0x0800be93
 800bd58:	0800bef9 	.word	0x0800bef9
 800bd5c:	0800c31b 	.word	0x0800c31b
 800bd60:	0800bf31 	.word	0x0800bf31
 800bd64:	0800c015 	.word	0x0800c015
 800bd68:	0800c04d 	.word	0x0800c04d
 800bd6c:	0800c085 	.word	0x0800c085
 800bd70:	0800c0b5 	.word	0x0800c0b5
 800bd74:	0800c0ed 	.word	0x0800c0ed
 800bd78:	0800c113 	.word	0x0800c113
 800bd7c:	0800c139 	.word	0x0800c139
 800bd80:	0800c171 	.word	0x0800c171
 800bd84:	0800c1ad 	.word	0x0800c1ad
 800bd88:	0800c31b 	.word	0x0800c31b
 800bd8c:	0800c31b 	.word	0x0800c31b
 800bd90:	0800c1e5 	.word	0x0800c1e5
 800bd94:	0800c309 	.word	0x0800c309
	case 0:
		sprintf(buf, "tx: %c %4d %4d %4d %4d ", ch, tx_msg[0],rx_msg[1],rx_msg[2],rx_msg[3]);//70000ns
 800bd98:	4b83      	ldr	r3, [pc, #524]	; (800bfa8 <print_prep_task+0x2a4>)
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	4b83      	ldr	r3, [pc, #524]	; (800bfac <print_prep_task+0x2a8>)
 800bda0:	781b      	ldrb	r3, [r3, #0]
 800bda2:	461c      	mov	r4, r3
 800bda4:	4b82      	ldr	r3, [pc, #520]	; (800bfb0 <print_prep_task+0x2ac>)
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	461a      	mov	r2, r3
 800bdaa:	4b81      	ldr	r3, [pc, #516]	; (800bfb0 <print_prep_task+0x2ac>)
 800bdac:	789b      	ldrb	r3, [r3, #2]
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4b7f      	ldr	r3, [pc, #508]	; (800bfb0 <print_prep_task+0x2ac>)
 800bdb2:	78db      	ldrb	r3, [r3, #3]
 800bdb4:	9302      	str	r3, [sp, #8]
 800bdb6:	9101      	str	r1, [sp, #4]
 800bdb8:	9200      	str	r2, [sp, #0]
 800bdba:	4623      	mov	r3, r4
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	497d      	ldr	r1, [pc, #500]	; (800bfb4 <print_prep_task+0x2b0>)
 800bdc0:	4878      	ldr	r0, [pc, #480]	; (800bfa4 <print_prep_task+0x2a0>)
 800bdc2:	f001 fa25 	bl	800d210 <siprintf>
		break;
 800bdc6:	e2a8      	b.n	800c31a <print_prep_task+0x616>
		//ADD_VAL(" p0:%4.2f", phase0);
		//ADD_VAL(" ps:%4.2f", phase_shift);
		break;
	case 2:
		//ADD_VAL(" TM:%4d", (int) av_MOT_TEMP);
		ADD_VAL(" ENC:%4d", (int) TIM8->CNT);
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	4a76      	ldr	r2, [pc, #472]	; (800bfa4 <print_prep_task+0x2a0>)
 800bdcc:	1898      	adds	r0, r3, r2
 800bdce:	6939      	ldr	r1, [r7, #16]
 800bdd0:	4b79      	ldr	r3, [pc, #484]	; (800bfb8 <print_prep_task+0x2b4>)
 800bdd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdd4:	4a79      	ldr	r2, [pc, #484]	; (800bfbc <print_prep_task+0x2b8>)
 800bdd6:	f001 f9e7 	bl	800d1a8 <sniprintf>
 800bdda:	60f8      	str	r0, [r7, #12]
 800bddc:	697a      	ldr	r2, [r7, #20]
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	4413      	add	r3, r2
 800bde2:	617b      	str	r3, [r7, #20]
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	1ad3      	subs	r3, r2, r3
 800bdea:	613b      	str	r3, [r7, #16]
		ADD_VAL(" pi:%4d", pole_phase_int);
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	4a6d      	ldr	r2, [pc, #436]	; (800bfa4 <print_prep_task+0x2a0>)
 800bdf0:	1898      	adds	r0, r3, r2
 800bdf2:	6939      	ldr	r1, [r7, #16]
 800bdf4:	4b72      	ldr	r3, [pc, #456]	; (800bfc0 <print_prep_task+0x2bc>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	4a72      	ldr	r2, [pc, #456]	; (800bfc4 <print_prep_task+0x2c0>)
 800bdfa:	f001 f9d5 	bl	800d1a8 <sniprintf>
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	697a      	ldr	r2, [r7, #20]
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	4413      	add	r3, r2
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	693a      	ldr	r2, [r7, #16]
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	1ad3      	subs	r3, r2, r3
 800be0e:	613b      	str	r3, [r7, #16]
		break;
 800be10:	e283      	b.n	800c31a <print_prep_task+0x616>
		//ADD_VAL(" a:%4.2f", amp);
		//ADD_VAL(" a:%5d", (int)(amp*100.0f));
		//ADD_VAL(" A:%5d", (int)HAL_ADCEx_InjectedGetValue (&hadc1, RANK_I)- (int)A_mean);
		//ADD_VAL(" B:%5d", (int)HAL_ADCEx_InjectedGetValue (&hadc2, RANK_I)- (int)B_mean);
		//ADD_VAL(" C:%5d", (int)HAL_ADCEx_InjectedGetValue (&hadc3, RANK_I)- (int)C_mean);
		ADD_VAL(" P:%4d", (int)N_POLES);
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	4a63      	ldr	r2, [pc, #396]	; (800bfa4 <print_prep_task+0x2a0>)
 800be16:	1898      	adds	r0, r3, r2
 800be18:	6939      	ldr	r1, [r7, #16]
 800be1a:	4b6b      	ldr	r3, [pc, #428]	; (800bfc8 <print_prep_task+0x2c4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a6b      	ldr	r2, [pc, #428]	; (800bfcc <print_prep_task+0x2c8>)
 800be20:	f001 f9c2 	bl	800d1a8 <sniprintf>
 800be24:	60f8      	str	r0, [r7, #12]
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	4413      	add	r3, r2
 800be2c:	617b      	str	r3, [r7, #20]
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	1ad3      	subs	r3, r2, r3
 800be34:	613b      	str	r3, [r7, #16]
		ADD_VAL(" I:%4d", (int)INVERT);
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	4a5a      	ldr	r2, [pc, #360]	; (800bfa4 <print_prep_task+0x2a0>)
 800be3a:	1898      	adds	r0, r3, r2
 800be3c:	6939      	ldr	r1, [r7, #16]
 800be3e:	4b64      	ldr	r3, [pc, #400]	; (800bfd0 <print_prep_task+0x2cc>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	4a64      	ldr	r2, [pc, #400]	; (800bfd4 <print_prep_task+0x2d0>)
 800be44:	f001 f9b0 	bl	800d1a8 <sniprintf>
 800be48:	60f8      	str	r0, [r7, #12]
 800be4a:	697a      	ldr	r2, [r7, #20]
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4413      	add	r3, r2
 800be50:	617b      	str	r3, [r7, #20]
 800be52:	693a      	ldr	r2, [r7, #16]
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	1ad3      	subs	r3, r2, r3
 800be58:	613b      	str	r3, [r7, #16]
		ADD_VAL(" p0:%4d", (int)(phase0*100.0f));
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	4a51      	ldr	r2, [pc, #324]	; (800bfa4 <print_prep_task+0x2a0>)
 800be5e:	1898      	adds	r0, r3, r2
 800be60:	6939      	ldr	r1, [r7, #16]
 800be62:	4b5d      	ldr	r3, [pc, #372]	; (800bfd8 <print_prep_task+0x2d4>)
 800be64:	edd3 7a00 	vldr	s15, [r3]
 800be68:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800bfdc <print_prep_task+0x2d8>
 800be6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800be70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800be74:	ee17 3a90 	vmov	r3, s15
 800be78:	4a59      	ldr	r2, [pc, #356]	; (800bfe0 <print_prep_task+0x2dc>)
 800be7a:	f001 f995 	bl	800d1a8 <sniprintf>
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	4413      	add	r3, r2
 800be86:	617b      	str	r3, [r7, #20]
 800be88:	693a      	ldr	r2, [r7, #16]
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	613b      	str	r3, [r7, #16]
		break;
 800be90:	e243      	b.n	800c31a <print_prep_task+0x616>
	case 4:
		//ADD_VAL(" v:%6.2f", omega);
		ADD_VAL(" oE:%5d", (int)(omegaEnc*100.0f));
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	4a43      	ldr	r2, [pc, #268]	; (800bfa4 <print_prep_task+0x2a0>)
 800be96:	1898      	adds	r0, r3, r2
 800be98:	6939      	ldr	r1, [r7, #16]
 800be9a:	4b52      	ldr	r3, [pc, #328]	; (800bfe4 <print_prep_task+0x2e0>)
 800be9c:	edd3 7a00 	vldr	s15, [r3]
 800bea0:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 800bfdc <print_prep_task+0x2d8>
 800bea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bea8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800beac:	ee17 3a90 	vmov	r3, s15
 800beb0:	4a4d      	ldr	r2, [pc, #308]	; (800bfe8 <print_prep_task+0x2e4>)
 800beb2:	f001 f979 	bl	800d1a8 <sniprintf>
 800beb6:	60f8      	str	r0, [r7, #12]
 800beb8:	697a      	ldr	r2, [r7, #20]
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	4413      	add	r3, r2
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	693a      	ldr	r2, [r7, #16]
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	1ad3      	subs	r3, r2, r3
 800bec6:	613b      	str	r3, [r7, #16]
		ADD_VAL(" od:%5d", (int)(omegaEncDot*1.0f));
 800bec8:	697b      	ldr	r3, [r7, #20]
 800beca:	4a36      	ldr	r2, [pc, #216]	; (800bfa4 <print_prep_task+0x2a0>)
 800becc:	1898      	adds	r0, r3, r2
 800bece:	6939      	ldr	r1, [r7, #16]
 800bed0:	4b46      	ldr	r3, [pc, #280]	; (800bfec <print_prep_task+0x2e8>)
 800bed2:	edd3 7a00 	vldr	s15, [r3]
 800bed6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800beda:	ee17 3a90 	vmov	r3, s15
 800bede:	4a44      	ldr	r2, [pc, #272]	; (800bff0 <print_prep_task+0x2ec>)
 800bee0:	f001 f962 	bl	800d1a8 <sniprintf>
 800bee4:	60f8      	str	r0, [r7, #12]
 800bee6:	697a      	ldr	r2, [r7, #20]
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	4413      	add	r3, r2
 800beec:	617b      	str	r3, [r7, #20]
 800beee:	693a      	ldr	r2, [r7, #16]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	1ad3      	subs	r3, r2, r3
 800bef4:	613b      	str	r3, [r7, #16]

		//sprintf(buf_add, " E:%5d", (int)TIM8->CNT); strcat(buf, buf_add);
		break;
 800bef6:	e210      	b.n	800c31a <print_prep_task+0x616>
	case 5:
		//ADD_VAL(" c:%5d", (int)rotation_counter);
		ADD_VAL(" s:%5d", (int)(stiffness*10000.0f));
 800bef8:	697b      	ldr	r3, [r7, #20]
 800befa:	4a2a      	ldr	r2, [pc, #168]	; (800bfa4 <print_prep_task+0x2a0>)
 800befc:	1898      	adds	r0, r3, r2
 800befe:	6939      	ldr	r1, [r7, #16]
 800bf00:	4b3c      	ldr	r3, [pc, #240]	; (800bff4 <print_prep_task+0x2f0>)
 800bf02:	edd3 7a00 	vldr	s15, [r3]
 800bf06:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 800bff8 <print_prep_task+0x2f4>
 800bf0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bf0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf12:	ee17 3a90 	vmov	r3, s15
 800bf16:	4a39      	ldr	r2, [pc, #228]	; (800bffc <print_prep_task+0x2f8>)
 800bf18:	f001 f946 	bl	800d1a8 <sniprintf>
 800bf1c:	60f8      	str	r0, [r7, #12]
 800bf1e:	697a      	ldr	r2, [r7, #20]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	4413      	add	r3, r2
 800bf24:	617b      	str	r3, [r7, #20]
 800bf26:	693a      	ldr	r2, [r7, #16]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	1ad3      	subs	r3, r2, r3
 800bf2c:	613b      	str	r3, [r7, #16]
		break;
 800bf2e:	e1f4      	b.n	800c31a <print_prep_task+0x616>
	case 6:
		break;
	case 7:
		//ADD_VAL(" ADC:%5d", HAL_ADC_GetValue(&hadc1));
		ADD_VAL(" T_MCU:%5d", adc1_buf[RANK_CONT_TMCU-1]);
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	4a1c      	ldr	r2, [pc, #112]	; (800bfa4 <print_prep_task+0x2a0>)
 800bf34:	1898      	adds	r0, r3, r2
 800bf36:	6939      	ldr	r1, [r7, #16]
 800bf38:	4b31      	ldr	r3, [pc, #196]	; (800c000 <print_prep_task+0x2fc>)
 800bf3a:	891b      	ldrh	r3, [r3, #8]
 800bf3c:	4a31      	ldr	r2, [pc, #196]	; (800c004 <print_prep_task+0x300>)
 800bf3e:	f001 f933 	bl	800d1a8 <sniprintf>
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	697a      	ldr	r2, [r7, #20]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	4413      	add	r3, r2
 800bf4a:	617b      	str	r3, [r7, #20]
 800bf4c:	693a      	ldr	r2, [r7, #16]
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	1ad3      	subs	r3, r2, r3
 800bf52:	613b      	str	r3, [r7, #16]
		//ADD_VAL(" Vref:%5d", adc1_buf[RANK_CONT_Vref-1]);
		//ADD_VAL(" Vbat:%5d", adc1_buf[RANK_CONT_Vbat-1]);
		ADD_VAL(" Vbus:%5d", adc1_buf[RANK_CONT_Vbus-1]);
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	4a13      	ldr	r2, [pc, #76]	; (800bfa4 <print_prep_task+0x2a0>)
 800bf58:	1898      	adds	r0, r3, r2
 800bf5a:	6939      	ldr	r1, [r7, #16]
 800bf5c:	4b28      	ldr	r3, [pc, #160]	; (800c000 <print_prep_task+0x2fc>)
 800bf5e:	89db      	ldrh	r3, [r3, #14]
 800bf60:	4a29      	ldr	r2, [pc, #164]	; (800c008 <print_prep_task+0x304>)
 800bf62:	f001 f921 	bl	800d1a8 <sniprintf>
 800bf66:	60f8      	str	r0, [r7, #12]
 800bf68:	697a      	ldr	r2, [r7, #20]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	617b      	str	r3, [r7, #20]
 800bf70:	693a      	ldr	r2, [r7, #16]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	1ad3      	subs	r3, r2, r3
 800bf76:	613b      	str	r3, [r7, #16]
		ADD_VAL(" fVbus:%5d",  (int)fast_Vbus);
 800bf78:	697b      	ldr	r3, [r7, #20]
 800bf7a:	4a0a      	ldr	r2, [pc, #40]	; (800bfa4 <print_prep_task+0x2a0>)
 800bf7c:	1898      	adds	r0, r3, r2
 800bf7e:	6939      	ldr	r1, [r7, #16]
 800bf80:	4b22      	ldr	r3, [pc, #136]	; (800c00c <print_prep_task+0x308>)
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a22      	ldr	r2, [pc, #136]	; (800c010 <print_prep_task+0x30c>)
 800bf86:	f001 f90f 	bl	800d1a8 <sniprintf>
 800bf8a:	60f8      	str	r0, [r7, #12]
 800bf8c:	697a      	ldr	r2, [r7, #20]
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	4413      	add	r3, r2
 800bf92:	617b      	str	r3, [r7, #20]
 800bf94:	693a      	ldr	r2, [r7, #16]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	1ad3      	subs	r3, r2, r3
 800bf9a:	613b      	str	r3, [r7, #16]



		break;
 800bf9c:	e1bd      	b.n	800c31a <print_prep_task+0x616>
 800bf9e:	bf00      	nop
 800bfa0:	40020c00 	.word	0x40020c00
 800bfa4:	20001898 	.word	0x20001898
 800bfa8:	20000048 	.word	0x20000048
 800bfac:	20000ad8 	.word	0x20000ad8
 800bfb0:	20000be4 	.word	0x20000be4
 800bfb4:	0800ef1c 	.word	0x0800ef1c
 800bfb8:	40010400 	.word	0x40010400
 800bfbc:	0800ef34 	.word	0x0800ef34
 800bfc0:	20000bf8 	.word	0x20000bf8
 800bfc4:	0800ef40 	.word	0x0800ef40
 800bfc8:	2000000c 	.word	0x2000000c
 800bfcc:	0800ef48 	.word	0x0800ef48
 800bfd0:	200000d4 	.word	0x200000d4
 800bfd4:	0800ef50 	.word	0x0800ef50
 800bfd8:	20000008 	.word	0x20000008
 800bfdc:	42c80000 	.word	0x42c80000
 800bfe0:	0800ef58 	.word	0x0800ef58
 800bfe4:	20000100 	.word	0x20000100
 800bfe8:	0800ef60 	.word	0x0800ef60
 800bfec:	20000108 	.word	0x20000108
 800bff0:	0800ef68 	.word	0x0800ef68
 800bff4:	20000020 	.word	0x20000020
 800bff8:	461c4000 	.word	0x461c4000
 800bffc:	0800ef70 	.word	0x0800ef70
 800c000:	20000be8 	.word	0x20000be8
 800c004:	0800ef78 	.word	0x0800ef78
 800c008:	0800ef84 	.word	0x0800ef84
 800c00c:	20000038 	.word	0x20000038
 800c010:	0800ef90 	.word	0x0800ef90
	case 8:
		//ADD_VAL(" dc:%4d", (int)(direct_component*100.0f));
		//ADD_VAL(" qc:%4d", (int)(quadrature_component*100.0f));
		ADD_VAL(" FOC:%4d", (int)(FOC_phase_shift*100.0f));
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	4aa2      	ldr	r2, [pc, #648]	; (800c2a0 <print_prep_task+0x59c>)
 800c018:	1898      	adds	r0, r3, r2
 800c01a:	6939      	ldr	r1, [r7, #16]
 800c01c:	4ba1      	ldr	r3, [pc, #644]	; (800c2a4 <print_prep_task+0x5a0>)
 800c01e:	edd3 7a00 	vldr	s15, [r3]
 800c022:	ed9f 7aa1 	vldr	s14, [pc, #644]	; 800c2a8 <print_prep_task+0x5a4>
 800c026:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c02a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c02e:	ee17 3a90 	vmov	r3, s15
 800c032:	4a9e      	ldr	r2, [pc, #632]	; (800c2ac <print_prep_task+0x5a8>)
 800c034:	f001 f8b8 	bl	800d1a8 <sniprintf>
 800c038:	60f8      	str	r0, [r7, #12]
 800c03a:	697a      	ldr	r2, [r7, #20]
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	4413      	add	r3, r2
 800c040:	617b      	str	r3, [r7, #20]
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	1ad3      	subs	r3, r2, r3
 800c048:	613b      	str	r3, [r7, #16]
		break;
 800c04a:	e166      	b.n	800c31a <print_prep_task+0x616>
	case 9:
		ADD_VAL(" gf:%4d", (int)(generic_fac*100.0f));
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	4a94      	ldr	r2, [pc, #592]	; (800c2a0 <print_prep_task+0x59c>)
 800c050:	1898      	adds	r0, r3, r2
 800c052:	6939      	ldr	r1, [r7, #16]
 800c054:	4b96      	ldr	r3, [pc, #600]	; (800c2b0 <print_prep_task+0x5ac>)
 800c056:	edd3 7a00 	vldr	s15, [r3]
 800c05a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800c2a8 <print_prep_task+0x5a4>
 800c05e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c062:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c066:	ee17 3a90 	vmov	r3, s15
 800c06a:	4a92      	ldr	r2, [pc, #584]	; (800c2b4 <print_prep_task+0x5b0>)
 800c06c:	f001 f89c 	bl	800d1a8 <sniprintf>
 800c070:	60f8      	str	r0, [r7, #12]
 800c072:	697a      	ldr	r2, [r7, #20]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	4413      	add	r3, r2
 800c078:	617b      	str	r3, [r7, #20]
 800c07a:	693a      	ldr	r2, [r7, #16]
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	613b      	str	r3, [r7, #16]
		break;
 800c082:	e14a      	b.n	800c31a <print_prep_task+0x616>
	case 10:
		ADD_VAL(" ga:%4d", (int) generic_add);
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	4a86      	ldr	r2, [pc, #536]	; (800c2a0 <print_prep_task+0x59c>)
 800c088:	1898      	adds	r0, r3, r2
 800c08a:	6939      	ldr	r1, [r7, #16]
 800c08c:	4b8a      	ldr	r3, [pc, #552]	; (800c2b8 <print_prep_task+0x5b4>)
 800c08e:	edd3 7a00 	vldr	s15, [r3]
 800c092:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c096:	ee17 3a90 	vmov	r3, s15
 800c09a:	4a88      	ldr	r2, [pc, #544]	; (800c2bc <print_prep_task+0x5b8>)
 800c09c:	f001 f884 	bl	800d1a8 <sniprintf>
 800c0a0:	60f8      	str	r0, [r7, #12]
 800c0a2:	697a      	ldr	r2, [r7, #20]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	4413      	add	r3, r2
 800c0a8:	617b      	str	r3, [r7, #20]
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	1ad3      	subs	r3, r2, r3
 800c0b0:	613b      	str	r3, [r7, #16]
		break;
 800c0b2:	e132      	b.n	800c31a <print_prep_task+0x616>
	case 11:
		ADD_VAL(" P:%5d", (int) (fast_P_consumed*100.0f));
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	4a7a      	ldr	r2, [pc, #488]	; (800c2a0 <print_prep_task+0x59c>)
 800c0b8:	1898      	adds	r0, r3, r2
 800c0ba:	6939      	ldr	r1, [r7, #16]
 800c0bc:	4b80      	ldr	r3, [pc, #512]	; (800c2c0 <print_prep_task+0x5bc>)
 800c0be:	edd3 7a00 	vldr	s15, [r3]
 800c0c2:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800c2a8 <print_prep_task+0x5a4>
 800c0c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c0ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0ce:	ee17 3a90 	vmov	r3, s15
 800c0d2:	4a7c      	ldr	r2, [pc, #496]	; (800c2c4 <print_prep_task+0x5c0>)
 800c0d4:	f001 f868 	bl	800d1a8 <sniprintf>
 800c0d8:	60f8      	str	r0, [r7, #12]
 800c0da:	697a      	ldr	r2, [r7, #20]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	4413      	add	r3, r2
 800c0e0:	617b      	str	r3, [r7, #20]
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	1ad3      	subs	r3, r2, r3
 800c0e8:	613b      	str	r3, [r7, #16]
			//sprintf(buf_add, " It:%5.2fA", I_tot); strcat(buf, buf_add);
		}
		else{
			//sprintf(buf_add, " I:%4d SO1:%4d SO2:%4d", val_I, val_SO1, val_SO2); strcat(buf, buf_add);
		}
		break;
 800c0ea:	e116      	b.n	800c31a <print_prep_task+0x616>
	case 12:
		ADD_VAL(" TM:%4d", (int) av_MOT_TEMP);
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	4a6c      	ldr	r2, [pc, #432]	; (800c2a0 <print_prep_task+0x59c>)
 800c0f0:	1898      	adds	r0, r3, r2
 800c0f2:	6939      	ldr	r1, [r7, #16]
 800c0f4:	4b74      	ldr	r3, [pc, #464]	; (800c2c8 <print_prep_task+0x5c4>)
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	4a74      	ldr	r2, [pc, #464]	; (800c2cc <print_prep_task+0x5c8>)
 800c0fa:	f001 f855 	bl	800d1a8 <sniprintf>
 800c0fe:	60f8      	str	r0, [r7, #12]
 800c100:	697a      	ldr	r2, [r7, #20]
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	4413      	add	r3, r2
 800c106:	617b      	str	r3, [r7, #20]
 800c108:	693a      	ldr	r2, [r7, #16]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	1ad3      	subs	r3, r2, r3
 800c10e:	613b      	str	r3, [r7, #16]
		break;
 800c110:	e103      	b.n	800c31a <print_prep_task+0x616>
	case 13:
		ADD_VAL(" TE:%4d", (int) av_ESC_TEMP);
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	4a62      	ldr	r2, [pc, #392]	; (800c2a0 <print_prep_task+0x59c>)
 800c116:	1898      	adds	r0, r3, r2
 800c118:	6939      	ldr	r1, [r7, #16]
 800c11a:	4b6d      	ldr	r3, [pc, #436]	; (800c2d0 <print_prep_task+0x5cc>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4a6d      	ldr	r2, [pc, #436]	; (800c2d4 <print_prep_task+0x5d0>)
 800c120:	f001 f842 	bl	800d1a8 <sniprintf>
 800c124:	60f8      	str	r0, [r7, #12]
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	4413      	add	r3, r2
 800c12c:	617b      	str	r3, [r7, #20]
 800c12e:	693a      	ldr	r2, [r7, #16]
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	613b      	str	r3, [r7, #16]
		break;
 800c136:	e0f0      	b.n	800c31a <print_prep_task+0x616>
	case 14:
		ADD_VAL(" It:%4d", (int) (fast_I_tot*100.0f));
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	4a59      	ldr	r2, [pc, #356]	; (800c2a0 <print_prep_task+0x59c>)
 800c13c:	1898      	adds	r0, r3, r2
 800c13e:	6939      	ldr	r1, [r7, #16]
 800c140:	4b65      	ldr	r3, [pc, #404]	; (800c2d8 <print_prep_task+0x5d4>)
 800c142:	edd3 7a00 	vldr	s15, [r3]
 800c146:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800c2a8 <print_prep_task+0x5a4>
 800c14a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c14e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c152:	ee17 3a90 	vmov	r3, s15
 800c156:	4a61      	ldr	r2, [pc, #388]	; (800c2dc <print_prep_task+0x5d8>)
 800c158:	f001 f826 	bl	800d1a8 <sniprintf>
 800c15c:	60f8      	str	r0, [r7, #12]
 800c15e:	697a      	ldr	r2, [r7, #20]
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	4413      	add	r3, r2
 800c164:	617b      	str	r3, [r7, #20]
 800c166:	693a      	ldr	r2, [r7, #16]
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	1ad3      	subs	r3, r2, r3
 800c16c:	613b      	str	r3, [r7, #16]
		break;
 800c16e:	e0d4      	b.n	800c31a <print_prep_task+0x616>
	case 15:
		ADD_VAL(" F0:%4dN", (int) (convert2SI_strain0(fast_STRAIN0)));
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	4a4b      	ldr	r2, [pc, #300]	; (800c2a0 <print_prep_task+0x59c>)
 800c174:	189c      	adds	r4, r3, r2
 800c176:	693d      	ldr	r5, [r7, #16]
 800c178:	4b59      	ldr	r3, [pc, #356]	; (800c2e0 <print_prep_task+0x5dc>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7ff fb69 	bl	800b854 <convert2SI_strain0>
 800c182:	eef0 7a40 	vmov.f32	s15, s0
 800c186:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c18a:	ee17 3a90 	vmov	r3, s15
 800c18e:	4a55      	ldr	r2, [pc, #340]	; (800c2e4 <print_prep_task+0x5e0>)
 800c190:	4629      	mov	r1, r5
 800c192:	4620      	mov	r0, r4
 800c194:	f001 f808 	bl	800d1a8 <sniprintf>
 800c198:	60f8      	str	r0, [r7, #12]
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	4413      	add	r3, r2
 800c1a0:	617b      	str	r3, [r7, #20]
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	613b      	str	r3, [r7, #16]
		break;
 800c1aa:	e0b6      	b.n	800c31a <print_prep_task+0x616>
	case 16:
		ADD_VAL(" ps:%4.2f", phase_shift);
 800c1ac:	697b      	ldr	r3, [r7, #20]
 800c1ae:	4a3c      	ldr	r2, [pc, #240]	; (800c2a0 <print_prep_task+0x59c>)
 800c1b0:	189d      	adds	r5, r3, r2
 800c1b2:	693e      	ldr	r6, [r7, #16]
 800c1b4:	4b4c      	ldr	r3, [pc, #304]	; (800c2e8 <print_prep_task+0x5e4>)
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7f4 f9c5 	bl	8000548 <__aeabi_f2d>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	460c      	mov	r4, r1
 800c1c2:	e9cd 3400 	strd	r3, r4, [sp]
 800c1c6:	4a49      	ldr	r2, [pc, #292]	; (800c2ec <print_prep_task+0x5e8>)
 800c1c8:	4631      	mov	r1, r6
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f000 ffec 	bl	800d1a8 <sniprintf>
 800c1d0:	60f8      	str	r0, [r7, #12]
 800c1d2:	697a      	ldr	r2, [r7, #20]
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	4413      	add	r3, r2
 800c1d8:	617b      	str	r3, [r7, #20]
 800c1da:	693a      	ldr	r2, [r7, #16]
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	1ad3      	subs	r3, r2, r3
 800c1e0:	613b      	str	r3, [r7, #16]
		break;
 800c1e2:	e09a      	b.n	800c31a <print_prep_task+0x616>




	case 19:
		if (av_ESC_TEMP > 1900){
 800c1e4:	4b3a      	ldr	r3, [pc, #232]	; (800c2d0 <print_prep_task+0x5cc>)
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	f240 726c 	movw	r2, #1900	; 0x76c
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d90c      	bls.n	800c20a <print_prep_task+0x506>
			sprintf(buf_add, "* >50C on ESC"); strcat(buf, buf_add);
 800c1f0:	4a3f      	ldr	r2, [pc, #252]	; (800c2f0 <print_prep_task+0x5ec>)
 800c1f2:	4b40      	ldr	r3, [pc, #256]	; (800c2f4 <print_prep_task+0x5f0>)
 800c1f4:	4614      	mov	r4, r2
 800c1f6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c1f8:	6020      	str	r0, [r4, #0]
 800c1fa:	6061      	str	r1, [r4, #4]
 800c1fc:	60a2      	str	r2, [r4, #8]
 800c1fe:	881b      	ldrh	r3, [r3, #0]
 800c200:	81a3      	strh	r3, [r4, #12]
 800c202:	493b      	ldr	r1, [pc, #236]	; (800c2f0 <print_prep_task+0x5ec>)
 800c204:	4826      	ldr	r0, [pc, #152]	; (800c2a0 <print_prep_task+0x59c>)
 800c206:	f001 f823 	bl	800d250 <strcat>
		}

		if (av_MOT_TEMP > 1900){
 800c20a:	4b2f      	ldr	r3, [pc, #188]	; (800c2c8 <print_prep_task+0x5c4>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f240 726c 	movw	r2, #1900	; 0x76c
 800c212:	4293      	cmp	r3, r2
 800c214:	d90c      	bls.n	800c230 <print_prep_task+0x52c>
			sprintf(buf_add, "* >50C on MOTOR"); strcat(buf, buf_add);
 800c216:	4a36      	ldr	r2, [pc, #216]	; (800c2f0 <print_prep_task+0x5ec>)
 800c218:	4b37      	ldr	r3, [pc, #220]	; (800c2f8 <print_prep_task+0x5f4>)
 800c21a:	4614      	mov	r4, r2
 800c21c:	461d      	mov	r5, r3
 800c21e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c220:	6020      	str	r0, [r4, #0]
 800c222:	6061      	str	r1, [r4, #4]
 800c224:	60a2      	str	r2, [r4, #8]
 800c226:	60e3      	str	r3, [r4, #12]
 800c228:	4931      	ldr	r1, [pc, #196]	; (800c2f0 <print_prep_task+0x5ec>)
 800c22a:	481d      	ldr	r0, [pc, #116]	; (800c2a0 <print_prep_task+0x59c>)
 800c22c:	f001 f810 	bl	800d250 <strcat>
		}

		if (convert2SI_strain0(fast_STRAIN0) < -100){
 800c230:	4b2b      	ldr	r3, [pc, #172]	; (800c2e0 <print_prep_task+0x5dc>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff fb0d 	bl	800b854 <convert2SI_strain0>
 800c23a:	eeb0 7a40 	vmov.f32	s14, s0
 800c23e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 800c2fc <print_prep_task+0x5f8>
 800c242:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c24a:	d50c      	bpl.n	800c266 <print_prep_task+0x562>
			sprintf(buf_add, "* -100N force"); strcat(buf, buf_add);
 800c24c:	4a28      	ldr	r2, [pc, #160]	; (800c2f0 <print_prep_task+0x5ec>)
 800c24e:	4b2c      	ldr	r3, [pc, #176]	; (800c300 <print_prep_task+0x5fc>)
 800c250:	4614      	mov	r4, r2
 800c252:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c254:	6020      	str	r0, [r4, #0]
 800c256:	6061      	str	r1, [r4, #4]
 800c258:	60a2      	str	r2, [r4, #8]
 800c25a:	881b      	ldrh	r3, [r3, #0]
 800c25c:	81a3      	strh	r3, [r4, #12]
 800c25e:	4924      	ldr	r1, [pc, #144]	; (800c2f0 <print_prep_task+0x5ec>)
 800c260:	480f      	ldr	r0, [pc, #60]	; (800c2a0 <print_prep_task+0x59c>)
 800c262:	f000 fff5 	bl	800d250 <strcat>
		}
		if (convert2SI_strain0(fast_STRAIN0) > 100){
 800c266:	4b1e      	ldr	r3, [pc, #120]	; (800c2e0 <print_prep_task+0x5dc>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff faf2 	bl	800b854 <convert2SI_strain0>
 800c270:	eeb0 7a40 	vmov.f32	s14, s0
 800c274:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800c2a8 <print_prep_task+0x5a4>
 800c278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c27c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c280:	dc00      	bgt.n	800c284 <print_prep_task+0x580>
			sprintf(buf_add, "* 100N force"); strcat(buf, buf_add);
		}
		break;
 800c282:	e04a      	b.n	800c31a <print_prep_task+0x616>
			sprintf(buf_add, "* 100N force"); strcat(buf, buf_add);
 800c284:	4a1a      	ldr	r2, [pc, #104]	; (800c2f0 <print_prep_task+0x5ec>)
 800c286:	4b1f      	ldr	r3, [pc, #124]	; (800c304 <print_prep_task+0x600>)
 800c288:	4614      	mov	r4, r2
 800c28a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c28c:	6020      	str	r0, [r4, #0]
 800c28e:	6061      	str	r1, [r4, #4]
 800c290:	60a2      	str	r2, [r4, #8]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	7323      	strb	r3, [r4, #12]
 800c296:	4916      	ldr	r1, [pc, #88]	; (800c2f0 <print_prep_task+0x5ec>)
 800c298:	4801      	ldr	r0, [pc, #4]	; (800c2a0 <print_prep_task+0x59c>)
 800c29a:	f000 ffd9 	bl	800d250 <strcat>
		break;
 800c29e:	e03c      	b.n	800c31a <print_prep_task+0x616>
 800c2a0:	20001898 	.word	0x20001898
 800c2a4:	20000140 	.word	0x20000140
 800c2a8:	42c80000 	.word	0x42c80000
 800c2ac:	0800ef9c 	.word	0x0800ef9c
 800c2b0:	20000034 	.word	0x20000034
 800c2b4:	0800efa8 	.word	0x0800efa8
 800c2b8:	200000ec 	.word	0x200000ec
 800c2bc:	0800efb0 	.word	0x0800efb0
 800c2c0:	2000013c 	.word	0x2000013c
 800c2c4:	0800efb8 	.word	0x0800efb8
 800c2c8:	20000128 	.word	0x20000128
 800c2cc:	0800efc0 	.word	0x0800efc0
 800c2d0:	20000120 	.word	0x20000120
 800c2d4:	0800efc8 	.word	0x0800efc8
 800c2d8:	20000130 	.word	0x20000130
 800c2dc:	0800efd0 	.word	0x0800efd0
 800c2e0:	20000114 	.word	0x20000114
 800c2e4:	0800efd8 	.word	0x0800efd8
 800c2e8:	2000001c 	.word	0x2000001c
 800c2ec:	0800efe4 	.word	0x0800efe4
 800c2f0:	20000bfc 	.word	0x20000bfc
 800c2f4:	0800eff0 	.word	0x0800eff0
 800c2f8:	0800f000 	.word	0x0800f000
 800c2fc:	c2c80000 	.word	0xc2c80000
 800c300:	0800f010 	.word	0x0800f010
 800c304:	0800f020 	.word	0x0800f020

	case 20:
		sprintf(buf_add, " \r\n"); strcat(buf, buf_add);
 800c308:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <print_prep_task+0x638>)
 800c30a:	4a0d      	ldr	r2, [pc, #52]	; (800c340 <print_prep_task+0x63c>)
 800c30c:	6810      	ldr	r0, [r2, #0]
 800c30e:	6018      	str	r0, [r3, #0]
 800c310:	490a      	ldr	r1, [pc, #40]	; (800c33c <print_prep_task+0x638>)
 800c312:	480c      	ldr	r0, [pc, #48]	; (800c344 <print_prep_task+0x640>)
 800c314:	f000 ff9c 	bl	800d250 <strcat>
		break;
 800c318:	bf00      	nop

	//2L //1ms = 1000000ns
#endif

#if DB_TIMING
	DB2L;
 800c31a:	4b0b      	ldr	r3, [pc, #44]	; (800c348 <print_prep_task+0x644>)
 800c31c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c320:	619a      	str	r2, [r3, #24]
	DB2H;
 800c322:	4b09      	ldr	r3, [pc, #36]	; (800c348 <print_prep_task+0x644>)
 800c324:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c328:	619a      	str	r2, [r3, #24]
	DB2L;
 800c32a:	4b07      	ldr	r3, [pc, #28]	; (800c348 <print_prep_task+0x644>)
 800c32c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800c330:	619a      	str	r2, [r3, #24]
#endif

}
 800c332:	bf00      	nop
 800c334:	371c      	adds	r7, #28
 800c336:	46bd      	mov	sp, r7
 800c338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c33a:	bf00      	nop
 800c33c:	20000bfc 	.word	0x20000bfc
 800c340:	0800f030 	.word	0x0800f030
 800c344:	20001898 	.word	0x20001898
 800c348:	40020c00 	.word	0x40020c00

0800c34c <print_task>:

void print_task(void){
 800c34c:	b5b0      	push	{r4, r5, r7, lr}
 800c34e:	af00      	add	r7, sp, #0


	if (buf_msgs[0] != '\0'){
 800c350:	4b11      	ldr	r3, [pc, #68]	; (800c398 <print_task+0x4c>)
 800c352:	781b      	ldrb	r3, [r3, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d006      	beq.n	800c366 <print_task+0x1a>
		strcat(buf, buf_msgs);
 800c358:	490f      	ldr	r1, [pc, #60]	; (800c398 <print_task+0x4c>)
 800c35a:	4810      	ldr	r0, [pc, #64]	; (800c39c <print_task+0x50>)
 800c35c:	f000 ff78 	bl	800d250 <strcat>
		buf_msgs[0] = '\0';
 800c360:	4b0d      	ldr	r3, [pc, #52]	; (800c398 <print_task+0x4c>)
 800c362:	2200      	movs	r2, #0
 800c364:	701a      	strb	r2, [r3, #0]

	//                   0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5---------6---------7---------8---------9---------0---------1---------2---------3---------4---------5



	huart3.Instance->CR3 |= USART_CR3_DMAT; //enabel dma as we disable in callback so uart can be used for something else
 800c366:	4b0e      	ldr	r3, [pc, #56]	; (800c3a0 <print_task+0x54>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	695a      	ldr	r2, [r3, #20]
 800c36c:	4b0c      	ldr	r3, [pc, #48]	; (800c3a0 <print_task+0x54>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c374:	615a      	str	r2, [r3, #20]
	HAL_DMA_Start_IT(&hdma_usart3_tx, (uint32_t)buf, (uint32_t)&huart3.Instance->DR, strlen(buf));
 800c376:	4c09      	ldr	r4, [pc, #36]	; (800c39c <print_task+0x50>)
 800c378:	4b09      	ldr	r3, [pc, #36]	; (800c3a0 <print_task+0x54>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	3304      	adds	r3, #4
 800c37e:	461d      	mov	r5, r3
 800c380:	4806      	ldr	r0, [pc, #24]	; (800c39c <print_task+0x50>)
 800c382:	f7f3 ff25 	bl	80001d0 <strlen>
 800c386:	4603      	mov	r3, r0
 800c388:	462a      	mov	r2, r5
 800c38a:	4621      	mov	r1, r4
 800c38c:	4805      	ldr	r0, [pc, #20]	; (800c3a4 <print_task+0x58>)
 800c38e:	f7f6 fcc1 	bl	8002d14 <HAL_DMA_Start_IT>


}
 800c392:	bf00      	nop
 800c394:	bdb0      	pop	{r4, r5, r7, pc}
 800c396:	bf00      	nop
 800c398:	20001834 	.word	0x20001834
 800c39c:	20001898 	.word	0x20001898
 800c3a0:	2000059c 	.word	0x2000059c
 800c3a4:	20000b40 	.word	0x20000b40

0800c3a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800c3ac:	bf00      	nop
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b4:	4770      	bx	lr
	...

0800c3b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b083      	sub	sp, #12
 800c3bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c3be:	2300      	movs	r3, #0
 800c3c0:	607b      	str	r3, [r7, #4]
 800c3c2:	4b10      	ldr	r3, [pc, #64]	; (800c404 <HAL_MspInit+0x4c>)
 800c3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3c6:	4a0f      	ldr	r2, [pc, #60]	; (800c404 <HAL_MspInit+0x4c>)
 800c3c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3cc:	6453      	str	r3, [r2, #68]	; 0x44
 800c3ce:	4b0d      	ldr	r3, [pc, #52]	; (800c404 <HAL_MspInit+0x4c>)
 800c3d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3d6:	607b      	str	r3, [r7, #4]
 800c3d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800c3da:	2300      	movs	r3, #0
 800c3dc:	603b      	str	r3, [r7, #0]
 800c3de:	4b09      	ldr	r3, [pc, #36]	; (800c404 <HAL_MspInit+0x4c>)
 800c3e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3e2:	4a08      	ldr	r2, [pc, #32]	; (800c404 <HAL_MspInit+0x4c>)
 800c3e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3e8:	6413      	str	r3, [r2, #64]	; 0x40
 800c3ea:	4b06      	ldr	r3, [pc, #24]	; (800c404 <HAL_MspInit+0x4c>)
 800c3ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c3f2:	603b      	str	r3, [r7, #0]
 800c3f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800c3f6:	bf00      	nop
 800c3f8:	370c      	adds	r7, #12
 800c3fa:	46bd      	mov	sp, r7
 800c3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c400:	4770      	bx	lr
 800c402:	bf00      	nop
 800c404:	40023800 	.word	0x40023800

0800c408 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800c408:	b580      	push	{r7, lr}
 800c40a:	b092      	sub	sp, #72	; 0x48
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c410:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c414:	2200      	movs	r2, #0
 800c416:	601a      	str	r2, [r3, #0]
 800c418:	605a      	str	r2, [r3, #4]
 800c41a:	609a      	str	r2, [r3, #8]
 800c41c:	60da      	str	r2, [r3, #12]
 800c41e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	4a9b      	ldr	r2, [pc, #620]	; (800c694 <HAL_ADC_MspInit+0x28c>)
 800c426:	4293      	cmp	r3, r2
 800c428:	f040 8096 	bne.w	800c558 <HAL_ADC_MspInit+0x150>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800c42c:	2300      	movs	r3, #0
 800c42e:	633b      	str	r3, [r7, #48]	; 0x30
 800c430:	4b99      	ldr	r3, [pc, #612]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c434:	4a98      	ldr	r2, [pc, #608]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c43a:	6453      	str	r3, [r2, #68]	; 0x44
 800c43c:	4b96      	ldr	r3, [pc, #600]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c43e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c444:	633b      	str	r3, [r7, #48]	; 0x30
 800c446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c448:	2300      	movs	r3, #0
 800c44a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c44c:	4b92      	ldr	r3, [pc, #584]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c44e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c450:	4a91      	ldr	r2, [pc, #580]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c452:	f043 0304 	orr.w	r3, r3, #4
 800c456:	6313      	str	r3, [r2, #48]	; 0x30
 800c458:	4b8f      	ldr	r3, [pc, #572]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c45c:	f003 0304 	and.w	r3, r3, #4
 800c460:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c464:	2300      	movs	r3, #0
 800c466:	62bb      	str	r3, [r7, #40]	; 0x28
 800c468:	4b8b      	ldr	r3, [pc, #556]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c46c:	4a8a      	ldr	r2, [pc, #552]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c46e:	f043 0301 	orr.w	r3, r3, #1
 800c472:	6313      	str	r3, [r2, #48]	; 0x30
 800c474:	4b88      	ldr	r3, [pc, #544]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c478:	f003 0301 	and.w	r3, r3, #1
 800c47c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c480:	2300      	movs	r3, #0
 800c482:	627b      	str	r3, [r7, #36]	; 0x24
 800c484:	4b84      	ldr	r3, [pc, #528]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c488:	4a83      	ldr	r2, [pc, #524]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c48a:	f043 0302 	orr.w	r3, r3, #2
 800c48e:	6313      	str	r3, [r2, #48]	; 0x30
 800c490:	4b81      	ldr	r3, [pc, #516]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c494:	f003 0302 	and.w	r3, r3, #2
 800c498:	627b      	str	r3, [r7, #36]	; 0x24
 800c49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    PA5     ------> ADC1_IN5
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c49c:	233e      	movs	r3, #62	; 0x3e
 800c49e:	637b      	str	r3, [r7, #52]	; 0x34
                          |GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4a0:	2303      	movs	r3, #3
 800c4a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c4a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	487b      	ldr	r0, [pc, #492]	; (800c69c <HAL_ADC_MspInit+0x294>)
 800c4b0:	f7f6 ff66 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c4b4:	233e      	movs	r3, #62	; 0x3e
 800c4b6:	637b      	str	r3, [r7, #52]	; 0x34
                          |M0_TEMP_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	4876      	ldr	r0, [pc, #472]	; (800c6a0 <HAL_ADC_MspInit+0x298>)
 800c4c8:	f7f6 ff5a 	bl	8003380 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c4d0:	2303      	movs	r3, #3
 800c4d2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c4d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c4dc:	4619      	mov	r1, r3
 800c4de:	4871      	ldr	r0, [pc, #452]	; (800c6a4 <HAL_ADC_MspInit+0x29c>)
 800c4e0:	f7f6 ff4e 	bl	8003380 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800c4e4:	4b70      	ldr	r3, [pc, #448]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c4e6:	4a71      	ldr	r2, [pc, #452]	; (800c6ac <HAL_ADC_MspInit+0x2a4>)
 800c4e8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800c4ea:	4b6f      	ldr	r3, [pc, #444]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c4f0:	4b6d      	ldr	r3, [pc, #436]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800c4f6:	4b6c      	ldr	r3, [pc, #432]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800c4fc:	4b6a      	ldr	r3, [pc, #424]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c4fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c502:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c504:	4b68      	ldr	r3, [pc, #416]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c506:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c50a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c50c:	4b66      	ldr	r3, [pc, #408]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c50e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c512:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800c514:	4b64      	ldr	r3, [pc, #400]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c516:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c51a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800c51c:	4b62      	ldr	r3, [pc, #392]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c51e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c522:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c524:	4b60      	ldr	r3, [pc, #384]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c526:	2200      	movs	r2, #0
 800c528:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800c52a:	485f      	ldr	r0, [pc, #380]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c52c:	f7f6 fb44 	bl	8002bb8 <HAL_DMA_Init>
 800c530:	4603      	mov	r3, r0
 800c532:	2b00      	cmp	r3, #0
 800c534:	d001      	beq.n	800c53a <HAL_ADC_MspInit+0x132>
    {
      Error_Handler();
 800c536:	f7ff ff37 	bl	800c3a8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	4a5a      	ldr	r2, [pc, #360]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c53e:	639a      	str	r2, [r3, #56]	; 0x38
 800c540:	4a59      	ldr	r2, [pc, #356]	; (800c6a8 <HAL_ADC_MspInit+0x2a0>)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c546:	2200      	movs	r2, #0
 800c548:	2100      	movs	r1, #0
 800c54a:	2012      	movs	r0, #18
 800c54c:	f7f6 fafd 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c550:	2012      	movs	r0, #18
 800c552:	f7f6 fb16 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800c556:	e132      	b.n	800c7be <HAL_ADC_MspInit+0x3b6>
  else if(hadc->Instance==ADC2)
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a54      	ldr	r2, [pc, #336]	; (800c6b0 <HAL_ADC_MspInit+0x2a8>)
 800c55e:	4293      	cmp	r3, r2
 800c560:	f040 80ac 	bne.w	800c6bc <HAL_ADC_MspInit+0x2b4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800c564:	2300      	movs	r3, #0
 800c566:	623b      	str	r3, [r7, #32]
 800c568:	4b4b      	ldr	r3, [pc, #300]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c56a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c56c:	4a4a      	ldr	r2, [pc, #296]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c56e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c572:	6453      	str	r3, [r2, #68]	; 0x44
 800c574:	4b48      	ldr	r3, [pc, #288]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c57c:	623b      	str	r3, [r7, #32]
 800c57e:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c580:	2300      	movs	r3, #0
 800c582:	61fb      	str	r3, [r7, #28]
 800c584:	4b44      	ldr	r3, [pc, #272]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c588:	4a43      	ldr	r2, [pc, #268]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c58a:	f043 0304 	orr.w	r3, r3, #4
 800c58e:	6313      	str	r3, [r2, #48]	; 0x30
 800c590:	4b41      	ldr	r3, [pc, #260]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	61fb      	str	r3, [r7, #28]
 800c59a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c59c:	2300      	movs	r3, #0
 800c59e:	61bb      	str	r3, [r7, #24]
 800c5a0:	4b3d      	ldr	r3, [pc, #244]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5a4:	4a3c      	ldr	r2, [pc, #240]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c5a6:	f043 0301 	orr.w	r3, r3, #1
 800c5aa:	6313      	str	r3, [r2, #48]	; 0x30
 800c5ac:	4b3a      	ldr	r3, [pc, #232]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b0:	f003 0301 	and.w	r3, r3, #1
 800c5b4:	61bb      	str	r3, [r7, #24]
 800c5b6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	617b      	str	r3, [r7, #20]
 800c5bc:	4b36      	ldr	r3, [pc, #216]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c5be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5c0:	4a35      	ldr	r2, [pc, #212]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c5c2:	f043 0302 	orr.w	r3, r3, #2
 800c5c6:	6313      	str	r3, [r2, #48]	; 0x30
 800c5c8:	4b33      	ldr	r3, [pc, #204]	; (800c698 <HAL_ADC_MspInit+0x290>)
 800c5ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5cc:	f003 0302 	and.w	r3, r3, #2
 800c5d0:	617b      	str	r3, [r7, #20]
 800c5d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4 
 800c5d4:	233e      	movs	r3, #62	; 0x3e
 800c5d6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c5e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	482d      	ldr	r0, [pc, #180]	; (800c69c <HAL_ADC_MspInit+0x294>)
 800c5e8:	f7f6 feca 	bl	8003380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 800c5ec:	2316      	movs	r3, #22
 800c5ee:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c5f0:	2303      	movs	r3, #3
 800c5f2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c5f8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4828      	ldr	r0, [pc, #160]	; (800c6a0 <HAL_ADC_MspInit+0x298>)
 800c600:	f7f6 febe 	bl	8003380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800c604:	2301      	movs	r3, #1
 800c606:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c608:	2303      	movs	r3, #3
 800c60a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c60c:	2300      	movs	r3, #0
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c610:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c614:	4619      	mov	r1, r3
 800c616:	4823      	ldr	r0, [pc, #140]	; (800c6a4 <HAL_ADC_MspInit+0x29c>)
 800c618:	f7f6 feb2 	bl	8003380 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 800c61c:	4b25      	ldr	r3, [pc, #148]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c61e:	4a26      	ldr	r2, [pc, #152]	; (800c6b8 <HAL_ADC_MspInit+0x2b0>)
 800c620:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 800c622:	4b24      	ldr	r3, [pc, #144]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c624:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800c628:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c62a:	4b22      	ldr	r3, [pc, #136]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800c630:	4b20      	ldr	r3, [pc, #128]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c632:	2200      	movs	r2, #0
 800c634:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800c636:	4b1f      	ldr	r3, [pc, #124]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c638:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c63c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c63e:	4b1d      	ldr	r3, [pc, #116]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c644:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c646:	4b1b      	ldr	r3, [pc, #108]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c648:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c64c:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800c64e:	4b19      	ldr	r3, [pc, #100]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c650:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c654:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_HIGH;
 800c656:	4b17      	ldr	r3, [pc, #92]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c658:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c65c:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c65e:	4b15      	ldr	r3, [pc, #84]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c660:	2200      	movs	r2, #0
 800c662:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800c664:	4813      	ldr	r0, [pc, #76]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c666:	f7f6 faa7 	bl	8002bb8 <HAL_DMA_Init>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d001      	beq.n	800c674 <HAL_ADC_MspInit+0x26c>
      Error_Handler();
 800c670:	f7ff fe9a 	bl	800c3a8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	4a0f      	ldr	r2, [pc, #60]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c678:	639a      	str	r2, [r3, #56]	; 0x38
 800c67a:	4a0e      	ldr	r2, [pc, #56]	; (800c6b4 <HAL_ADC_MspInit+0x2ac>)
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c680:	2200      	movs	r2, #0
 800c682:	2100      	movs	r1, #0
 800c684:	2012      	movs	r0, #18
 800c686:	f7f6 fa60 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c68a:	2012      	movs	r0, #18
 800c68c:	f7f6 fa79 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800c690:	e095      	b.n	800c7be <HAL_ADC_MspInit+0x3b6>
 800c692:	bf00      	nop
 800c694:	40012000 	.word	0x40012000
 800c698:	40023800 	.word	0x40023800
 800c69c:	40020800 	.word	0x40020800
 800c6a0:	40020000 	.word	0x40020000
 800c6a4:	40020400 	.word	0x40020400
 800c6a8:	20000d58 	.word	0x20000d58
 800c6ac:	40026410 	.word	0x40026410
 800c6b0:	40012100 	.word	0x40012100
 800c6b4:	20001a9c 	.word	0x20001a9c
 800c6b8:	40026440 	.word	0x40026440
  else if(hadc->Instance==ADC3)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a41      	ldr	r2, [pc, #260]	; (800c7c8 <HAL_ADC_MspInit+0x3c0>)
 800c6c2:	4293      	cmp	r3, r2
 800c6c4:	d17b      	bne.n	800c7be <HAL_ADC_MspInit+0x3b6>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	613b      	str	r3, [r7, #16]
 800c6ca:	4b40      	ldr	r3, [pc, #256]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c6cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6ce:	4a3f      	ldr	r2, [pc, #252]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c6d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c6d4:	6453      	str	r3, [r2, #68]	; 0x44
 800c6d6:	4b3d      	ldr	r3, [pc, #244]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c6da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c6de:	613b      	str	r3, [r7, #16]
 800c6e0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	60fb      	str	r3, [r7, #12]
 800c6e6:	4b39      	ldr	r3, [pc, #228]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c6e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ea:	4a38      	ldr	r2, [pc, #224]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c6ec:	f043 0304 	orr.w	r3, r3, #4
 800c6f0:	6313      	str	r3, [r2, #48]	; 0x30
 800c6f2:	4b36      	ldr	r3, [pc, #216]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f6:	f003 0304 	and.w	r3, r3, #4
 800c6fa:	60fb      	str	r3, [r7, #12]
 800c6fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c6fe:	2300      	movs	r3, #0
 800c700:	60bb      	str	r3, [r7, #8]
 800c702:	4b32      	ldr	r3, [pc, #200]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c706:	4a31      	ldr	r2, [pc, #196]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c708:	f043 0301 	orr.w	r3, r3, #1
 800c70c:	6313      	str	r3, [r2, #48]	; 0x30
 800c70e:	4b2f      	ldr	r3, [pc, #188]	; (800c7cc <HAL_ADC_MspInit+0x3c4>)
 800c710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	60bb      	str	r3, [r7, #8]
 800c718:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c71a:	2308      	movs	r3, #8
 800c71c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c71e:	2303      	movs	r3, #3
 800c720:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c722:	2300      	movs	r3, #0
 800c724:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800c726:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c72a:	4619      	mov	r1, r3
 800c72c:	4828      	ldr	r0, [pc, #160]	; (800c7d0 <HAL_ADC_MspInit+0x3c8>)
 800c72e:	f7f6 fe27 	bl	8003380 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800c732:	2308      	movs	r3, #8
 800c734:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800c736:	2303      	movs	r3, #3
 800c738:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c73a:	2300      	movs	r3, #0
 800c73c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c73e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800c742:	4619      	mov	r1, r3
 800c744:	4823      	ldr	r0, [pc, #140]	; (800c7d4 <HAL_ADC_MspInit+0x3cc>)
 800c746:	f7f6 fe1b 	bl	8003380 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800c74a:	4b23      	ldr	r3, [pc, #140]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c74c:	4a23      	ldr	r2, [pc, #140]	; (800c7dc <HAL_ADC_MspInit+0x3d4>)
 800c74e:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 800c750:	4b21      	ldr	r3, [pc, #132]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c752:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800c756:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800c758:	4b1f      	ldr	r3, [pc, #124]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c75a:	2200      	movs	r2, #0
 800c75c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800c75e:	4b1e      	ldr	r3, [pc, #120]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c760:	2200      	movs	r2, #0
 800c762:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800c764:	4b1c      	ldr	r3, [pc, #112]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c766:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c76a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800c76c:	4b1a      	ldr	r3, [pc, #104]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c76e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c772:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800c774:	4b18      	ldr	r3, [pc, #96]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800c77a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800c77c:	4b16      	ldr	r3, [pc, #88]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c77e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c782:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_HIGH;
 800c784:	4b14      	ldr	r3, [pc, #80]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c786:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800c78a:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800c78c:	4b12      	ldr	r3, [pc, #72]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c78e:	2200      	movs	r2, #0
 800c790:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800c792:	4811      	ldr	r0, [pc, #68]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c794:	f7f6 fa10 	bl	8002bb8 <HAL_DMA_Init>
 800c798:	4603      	mov	r3, r0
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d001      	beq.n	800c7a2 <HAL_ADC_MspInit+0x39a>
      Error_Handler();
 800c79e:	f7ff fe03 	bl	800c3a8 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	4a0c      	ldr	r2, [pc, #48]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c7a6:	639a      	str	r2, [r3, #56]	; 0x38
 800c7a8:	4a0b      	ldr	r2, [pc, #44]	; (800c7d8 <HAL_ADC_MspInit+0x3d0>)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	2012      	movs	r0, #18
 800c7b4:	f7f6 f9c9 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800c7b8:	2012      	movs	r0, #18
 800c7ba:	f7f6 f9e2 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800c7be:	bf00      	nop
 800c7c0:	3748      	adds	r7, #72	; 0x48
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	bd80      	pop	{r7, pc}
 800c7c6:	bf00      	nop
 800c7c8:	40012200 	.word	0x40012200
 800c7cc:	40023800 	.word	0x40023800
 800c7d0:	40020800 	.word	0x40020800
 800c7d4:	40020000 	.word	0x40020000
 800c7d8:	20000ae0 	.word	0x20000ae0
 800c7dc:	40026428 	.word	0x40026428

0800c7e0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800c7e0:	b580      	push	{r7, lr}
 800c7e2:	b08a      	sub	sp, #40	; 0x28
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c7e8:	f107 0314 	add.w	r3, r7, #20
 800c7ec:	2200      	movs	r2, #0
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	605a      	str	r2, [r3, #4]
 800c7f2:	609a      	str	r2, [r3, #8]
 800c7f4:	60da      	str	r2, [r3, #12]
 800c7f6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	4a1d      	ldr	r2, [pc, #116]	; (800c874 <HAL_CAN_MspInit+0x94>)
 800c7fe:	4293      	cmp	r3, r2
 800c800:	d133      	bne.n	800c86a <HAL_CAN_MspInit+0x8a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800c802:	2300      	movs	r3, #0
 800c804:	613b      	str	r3, [r7, #16]
 800c806:	4b1c      	ldr	r3, [pc, #112]	; (800c878 <HAL_CAN_MspInit+0x98>)
 800c808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c80a:	4a1b      	ldr	r2, [pc, #108]	; (800c878 <HAL_CAN_MspInit+0x98>)
 800c80c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c810:	6413      	str	r3, [r2, #64]	; 0x40
 800c812:	4b19      	ldr	r3, [pc, #100]	; (800c878 <HAL_CAN_MspInit+0x98>)
 800c814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c81a:	613b      	str	r3, [r7, #16]
 800c81c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800c81e:	2300      	movs	r3, #0
 800c820:	60fb      	str	r3, [r7, #12]
 800c822:	4b15      	ldr	r3, [pc, #84]	; (800c878 <HAL_CAN_MspInit+0x98>)
 800c824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c826:	4a14      	ldr	r2, [pc, #80]	; (800c878 <HAL_CAN_MspInit+0x98>)
 800c828:	f043 0308 	orr.w	r3, r3, #8
 800c82c:	6313      	str	r3, [r2, #48]	; 0x30
 800c82e:	4b12      	ldr	r3, [pc, #72]	; (800c878 <HAL_CAN_MspInit+0x98>)
 800c830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c832:	f003 0308 	and.w	r3, r3, #8
 800c836:	60fb      	str	r3, [r7, #12]
 800c838:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800c83a:	2303      	movs	r3, #3
 800c83c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c83e:	2302      	movs	r3, #2
 800c840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c842:	2300      	movs	r3, #0
 800c844:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c846:	2303      	movs	r3, #3
 800c848:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800c84a:	2309      	movs	r3, #9
 800c84c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800c84e:	f107 0314 	add.w	r3, r7, #20
 800c852:	4619      	mov	r1, r3
 800c854:	4809      	ldr	r0, [pc, #36]	; (800c87c <HAL_CAN_MspInit+0x9c>)
 800c856:	f7f6 fd93 	bl	8003380 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800c85a:	2200      	movs	r2, #0
 800c85c:	2100      	movs	r1, #0
 800c85e:	2014      	movs	r0, #20
 800c860:	f7f6 f973 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800c864:	2014      	movs	r0, #20
 800c866:	f7f6 f98c 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800c86a:	bf00      	nop
 800c86c:	3728      	adds	r7, #40	; 0x28
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
 800c872:	bf00      	nop
 800c874:	40006400 	.word	0x40006400
 800c878:	40023800 	.word	0x40023800
 800c87c:	40020c00 	.word	0x40020c00

0800c880 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b08c      	sub	sp, #48	; 0x30
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c888:	f107 031c 	add.w	r3, r7, #28
 800c88c:	2200      	movs	r2, #0
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	605a      	str	r2, [r3, #4]
 800c892:	609a      	str	r2, [r3, #8]
 800c894:	60da      	str	r2, [r3, #12]
 800c896:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	4a32      	ldr	r2, [pc, #200]	; (800c968 <HAL_I2C_MspInit+0xe8>)
 800c89e:	4293      	cmp	r3, r2
 800c8a0:	d12c      	bne.n	800c8fc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	61bb      	str	r3, [r7, #24]
 800c8a6:	4b31      	ldr	r3, [pc, #196]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c8a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8aa:	4a30      	ldr	r2, [pc, #192]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c8ac:	f043 0302 	orr.w	r3, r3, #2
 800c8b0:	6313      	str	r3, [r2, #48]	; 0x30
 800c8b2:	4b2e      	ldr	r3, [pc, #184]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b6:	f003 0302 	and.w	r3, r3, #2
 800c8ba:	61bb      	str	r3, [r7, #24]
 800c8bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c8be:	23c0      	movs	r3, #192	; 0xc0
 800c8c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c8c2:	2312      	movs	r3, #18
 800c8c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c8ca:	2303      	movs	r3, #3
 800c8cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800c8ce:	2304      	movs	r3, #4
 800c8d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c8d2:	f107 031c 	add.w	r3, r7, #28
 800c8d6:	4619      	mov	r1, r3
 800c8d8:	4825      	ldr	r0, [pc, #148]	; (800c970 <HAL_I2C_MspInit+0xf0>)
 800c8da:	f7f6 fd51 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800c8de:	2300      	movs	r3, #0
 800c8e0:	617b      	str	r3, [r7, #20]
 800c8e2:	4b22      	ldr	r3, [pc, #136]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c8e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8e6:	4a21      	ldr	r2, [pc, #132]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c8e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c8ec:	6413      	str	r3, [r2, #64]	; 0x40
 800c8ee:	4b1f      	ldr	r3, [pc, #124]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c8f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8f6:	617b      	str	r3, [r7, #20]
 800c8f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800c8fa:	e031      	b.n	800c960 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a1c      	ldr	r2, [pc, #112]	; (800c974 <HAL_I2C_MspInit+0xf4>)
 800c902:	4293      	cmp	r3, r2
 800c904:	d12c      	bne.n	800c960 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c906:	2300      	movs	r3, #0
 800c908:	613b      	str	r3, [r7, #16]
 800c90a:	4b18      	ldr	r3, [pc, #96]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c90c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c90e:	4a17      	ldr	r2, [pc, #92]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c910:	f043 0302 	orr.w	r3, r3, #2
 800c914:	6313      	str	r3, [r2, #48]	; 0x30
 800c916:	4b15      	ldr	r3, [pc, #84]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91a:	f003 0302 	and.w	r3, r3, #2
 800c91e:	613b      	str	r3, [r7, #16]
 800c920:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800c922:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800c926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800c928:	2312      	movs	r3, #18
 800c92a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800c92c:	2301      	movs	r3, #1
 800c92e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c930:	2303      	movs	r3, #3
 800c932:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800c934:	2304      	movs	r3, #4
 800c936:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c938:	f107 031c 	add.w	r3, r7, #28
 800c93c:	4619      	mov	r1, r3
 800c93e:	480c      	ldr	r0, [pc, #48]	; (800c970 <HAL_I2C_MspInit+0xf0>)
 800c940:	f7f6 fd1e 	bl	8003380 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800c944:	2300      	movs	r3, #0
 800c946:	60fb      	str	r3, [r7, #12]
 800c948:	4b08      	ldr	r3, [pc, #32]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c94c:	4a07      	ldr	r2, [pc, #28]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c94e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c952:	6413      	str	r3, [r2, #64]	; 0x40
 800c954:	4b05      	ldr	r3, [pc, #20]	; (800c96c <HAL_I2C_MspInit+0xec>)
 800c956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c958:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c95c:	60fb      	str	r3, [r7, #12]
 800c95e:	68fb      	ldr	r3, [r7, #12]
}
 800c960:	bf00      	nop
 800c962:	3730      	adds	r7, #48	; 0x30
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	40005400 	.word	0x40005400
 800c96c:	40023800 	.word	0x40023800
 800c970:	40020400 	.word	0x40020400
 800c974:	40005800 	.word	0x40005800

0800c978 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800c978:	b480      	push	{r7}
 800c97a:	b083      	sub	sp, #12
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4a05      	ldr	r2, [pc, #20]	; (800c99c <HAL_RTC_MspInit+0x24>)
 800c986:	4293      	cmp	r3, r2
 800c988:	d102      	bne.n	800c990 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800c98a:	4b05      	ldr	r3, [pc, #20]	; (800c9a0 <HAL_RTC_MspInit+0x28>)
 800c98c:	2201      	movs	r2, #1
 800c98e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800c990:	bf00      	nop
 800c992:	370c      	adds	r7, #12
 800c994:	46bd      	mov	sp, r7
 800c996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99a:	4770      	bx	lr
 800c99c:	40002800 	.word	0x40002800
 800c9a0:	42470e3c 	.word	0x42470e3c

0800c9a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b08a      	sub	sp, #40	; 0x28
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c9ac:	f107 0314 	add.w	r3, r7, #20
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	601a      	str	r2, [r3, #0]
 800c9b4:	605a      	str	r2, [r3, #4]
 800c9b6:	609a      	str	r2, [r3, #8]
 800c9b8:	60da      	str	r2, [r3, #12]
 800c9ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4a1d      	ldr	r2, [pc, #116]	; (800ca38 <HAL_SPI_MspInit+0x94>)
 800c9c2:	4293      	cmp	r3, r2
 800c9c4:	d134      	bne.n	800ca30 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	613b      	str	r3, [r7, #16]
 800c9ca:	4b1c      	ldr	r3, [pc, #112]	; (800ca3c <HAL_SPI_MspInit+0x98>)
 800c9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ce:	4a1b      	ldr	r2, [pc, #108]	; (800ca3c <HAL_SPI_MspInit+0x98>)
 800c9d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c9d4:	6413      	str	r3, [r2, #64]	; 0x40
 800c9d6:	4b19      	ldr	r3, [pc, #100]	; (800ca3c <HAL_SPI_MspInit+0x98>)
 800c9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c9de:	613b      	str	r3, [r7, #16]
 800c9e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60fb      	str	r3, [r7, #12]
 800c9e6:	4b15      	ldr	r3, [pc, #84]	; (800ca3c <HAL_SPI_MspInit+0x98>)
 800c9e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9ea:	4a14      	ldr	r2, [pc, #80]	; (800ca3c <HAL_SPI_MspInit+0x98>)
 800c9ec:	f043 0302 	orr.w	r3, r3, #2
 800c9f0:	6313      	str	r3, [r2, #48]	; 0x30
 800c9f2:	4b12      	ldr	r3, [pc, #72]	; (800ca3c <HAL_SPI_MspInit+0x98>)
 800c9f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9f6:	f003 0302 	and.w	r3, r3, #2
 800c9fa:	60fb      	str	r3, [r7, #12]
 800c9fc:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800c9fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800ca02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ca04:	2302      	movs	r3, #2
 800ca06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ca0c:	2303      	movs	r3, #3
 800ca0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ca10:	2305      	movs	r3, #5
 800ca12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ca14:	f107 0314 	add.w	r3, r7, #20
 800ca18:	4619      	mov	r1, r3
 800ca1a:	4809      	ldr	r0, [pc, #36]	; (800ca40 <HAL_SPI_MspInit+0x9c>)
 800ca1c:	f7f6 fcb0 	bl	8003380 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800ca20:	2200      	movs	r2, #0
 800ca22:	2100      	movs	r1, #0
 800ca24:	2024      	movs	r0, #36	; 0x24
 800ca26:	f7f6 f890 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800ca2a:	2024      	movs	r0, #36	; 0x24
 800ca2c:	f7f6 f8a9 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800ca30:	bf00      	nop
 800ca32:	3728      	adds	r7, #40	; 0x28
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	40003800 	.word	0x40003800
 800ca3c:	40023800 	.word	0x40023800
 800ca40:	40020400 	.word	0x40020400

0800ca44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b086      	sub	sp, #24
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a40      	ldr	r2, [pc, #256]	; (800cb54 <HAL_TIM_Base_MspInit+0x110>)
 800ca52:	4293      	cmp	r3, r2
 800ca54:	d12e      	bne.n	800cab4 <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800ca56:	2300      	movs	r3, #0
 800ca58:	617b      	str	r3, [r7, #20]
 800ca5a:	4b3f      	ldr	r3, [pc, #252]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800ca5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca5e:	4a3e      	ldr	r2, [pc, #248]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800ca60:	f043 0301 	orr.w	r3, r3, #1
 800ca64:	6453      	str	r3, [r2, #68]	; 0x44
 800ca66:	4b3c      	ldr	r3, [pc, #240]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800ca68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ca6a:	f003 0301 	and.w	r3, r3, #1
 800ca6e:	617b      	str	r3, [r7, #20]
 800ca70:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800ca72:	2200      	movs	r2, #0
 800ca74:	2100      	movs	r1, #0
 800ca76:	2018      	movs	r0, #24
 800ca78:	f7f6 f867 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800ca7c:	2018      	movs	r0, #24
 800ca7e:	f7f6 f880 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800ca82:	2200      	movs	r2, #0
 800ca84:	2100      	movs	r1, #0
 800ca86:	2019      	movs	r0, #25
 800ca88:	f7f6 f85f 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800ca8c:	2019      	movs	r0, #25
 800ca8e:	f7f6 f878 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800ca92:	2200      	movs	r2, #0
 800ca94:	2100      	movs	r1, #0
 800ca96:	201a      	movs	r0, #26
 800ca98:	f7f6 f857 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800ca9c:	201a      	movs	r0, #26
 800ca9e:	f7f6 f870 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800caa2:	2200      	movs	r2, #0
 800caa4:	2100      	movs	r1, #0
 800caa6:	201b      	movs	r0, #27
 800caa8:	f7f6 f84f 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800caac:	201b      	movs	r0, #27
 800caae:	f7f6 f868 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800cab2:	e04a      	b.n	800cb4a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cabc:	d10e      	bne.n	800cadc <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800cabe:	2300      	movs	r3, #0
 800cac0:	613b      	str	r3, [r7, #16]
 800cac2:	4b25      	ldr	r3, [pc, #148]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800cac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac6:	4a24      	ldr	r2, [pc, #144]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800cac8:	f043 0301 	orr.w	r3, r3, #1
 800cacc:	6413      	str	r3, [r2, #64]	; 0x40
 800cace:	4b22      	ldr	r3, [pc, #136]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800cad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cad2:	f003 0301 	and.w	r3, r3, #1
 800cad6:	613b      	str	r3, [r7, #16]
 800cad8:	693b      	ldr	r3, [r7, #16]
}
 800cada:	e036      	b.n	800cb4a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM5)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a1e      	ldr	r2, [pc, #120]	; (800cb5c <HAL_TIM_Base_MspInit+0x118>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d116      	bne.n	800cb14 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800cae6:	2300      	movs	r3, #0
 800cae8:	60fb      	str	r3, [r7, #12]
 800caea:	4b1b      	ldr	r3, [pc, #108]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800caec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caee:	4a1a      	ldr	r2, [pc, #104]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800caf0:	f043 0308 	orr.w	r3, r3, #8
 800caf4:	6413      	str	r3, [r2, #64]	; 0x40
 800caf6:	4b18      	ldr	r3, [pc, #96]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800caf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cafa:	f003 0308 	and.w	r3, r3, #8
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800cb02:	2200      	movs	r2, #0
 800cb04:	2100      	movs	r1, #0
 800cb06:	2032      	movs	r0, #50	; 0x32
 800cb08:	f7f6 f81f 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800cb0c:	2032      	movs	r0, #50	; 0x32
 800cb0e:	f7f6 f838 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800cb12:	e01a      	b.n	800cb4a <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM9)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	681b      	ldr	r3, [r3, #0]
 800cb18:	4a11      	ldr	r2, [pc, #68]	; (800cb60 <HAL_TIM_Base_MspInit+0x11c>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	d115      	bne.n	800cb4a <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800cb1e:	2300      	movs	r3, #0
 800cb20:	60bb      	str	r3, [r7, #8]
 800cb22:	4b0d      	ldr	r3, [pc, #52]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800cb24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb26:	4a0c      	ldr	r2, [pc, #48]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800cb28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cb2c:	6453      	str	r3, [r2, #68]	; 0x44
 800cb2e:	4b0a      	ldr	r3, [pc, #40]	; (800cb58 <HAL_TIM_Base_MspInit+0x114>)
 800cb30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cb36:	60bb      	str	r3, [r7, #8]
 800cb38:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	2100      	movs	r1, #0
 800cb3e:	2018      	movs	r0, #24
 800cb40:	f7f6 f803 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800cb44:	2018      	movs	r0, #24
 800cb46:	f7f6 f81c 	bl	8002b82 <HAL_NVIC_EnableIRQ>
}
 800cb4a:	bf00      	nop
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}
 800cb52:	bf00      	nop
 800cb54:	40010000 	.word	0x40010000
 800cb58:	40023800 	.word	0x40023800
 800cb5c:	40000c00 	.word	0x40000c00
 800cb60:	40014000 	.word	0x40014000

0800cb64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800cb64:	b580      	push	{r7, lr}
 800cb66:	b08a      	sub	sp, #40	; 0x28
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb6c:	f107 0314 	add.w	r3, r7, #20
 800cb70:	2200      	movs	r2, #0
 800cb72:	601a      	str	r2, [r3, #0]
 800cb74:	605a      	str	r2, [r3, #4]
 800cb76:	609a      	str	r2, [r3, #8]
 800cb78:	60da      	str	r2, [r3, #12]
 800cb7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM8)
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	4a29      	ldr	r2, [pc, #164]	; (800cc28 <HAL_TIM_Encoder_MspInit+0xc4>)
 800cb82:	4293      	cmp	r3, r2
 800cb84:	d14b      	bne.n	800cc1e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 800cb86:	2300      	movs	r3, #0
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	4b28      	ldr	r3, [pc, #160]	; (800cc2c <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb8e:	4a27      	ldr	r2, [pc, #156]	; (800cc2c <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb90:	f043 0302 	orr.w	r3, r3, #2
 800cb94:	6453      	str	r3, [r2, #68]	; 0x44
 800cb96:	4b25      	ldr	r3, [pc, #148]	; (800cc2c <HAL_TIM_Encoder_MspInit+0xc8>)
 800cb98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb9a:	f003 0302 	and.w	r3, r3, #2
 800cb9e:	613b      	str	r3, [r7, #16]
 800cba0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800cba2:	2300      	movs	r3, #0
 800cba4:	60fb      	str	r3, [r7, #12]
 800cba6:	4b21      	ldr	r3, [pc, #132]	; (800cc2c <HAL_TIM_Encoder_MspInit+0xc8>)
 800cba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbaa:	4a20      	ldr	r2, [pc, #128]	; (800cc2c <HAL_TIM_Encoder_MspInit+0xc8>)
 800cbac:	f043 0304 	orr.w	r3, r3, #4
 800cbb0:	6313      	str	r3, [r2, #48]	; 0x30
 800cbb2:	4b1e      	ldr	r3, [pc, #120]	; (800cc2c <HAL_TIM_Encoder_MspInit+0xc8>)
 800cbb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbb6:	f003 0304 	and.w	r3, r3, #4
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	68fb      	ldr	r3, [r7, #12]
    /**TIM8 GPIO Configuration    
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800cbbe:	23c0      	movs	r3, #192	; 0xc0
 800cbc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cbc2:	2302      	movs	r3, #2
 800cbc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800cbd2:	f107 0314 	add.w	r3, r7, #20
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	4815      	ldr	r0, [pc, #84]	; (800cc30 <HAL_TIM_Encoder_MspInit+0xcc>)
 800cbda:	f7f6 fbd1 	bl	8003380 <HAL_GPIO_Init>

    /* TIM8 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800cbde:	2200      	movs	r2, #0
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	202b      	movs	r0, #43	; 0x2b
 800cbe4:	f7f5 ffb1 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 800cbe8:	202b      	movs	r0, #43	; 0x2b
 800cbea:	f7f5 ffca 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800cbee:	2200      	movs	r2, #0
 800cbf0:	2100      	movs	r1, #0
 800cbf2:	202c      	movs	r0, #44	; 0x2c
 800cbf4:	f7f5 ffa9 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800cbf8:	202c      	movs	r0, #44	; 0x2c
 800cbfa:	f7f5 ffc2 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800cbfe:	2200      	movs	r2, #0
 800cc00:	2100      	movs	r1, #0
 800cc02:	202d      	movs	r0, #45	; 0x2d
 800cc04:	f7f5 ffa1 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800cc08:	202d      	movs	r0, #45	; 0x2d
 800cc0a:	f7f5 ffba 	bl	8002b82 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 800cc0e:	2200      	movs	r2, #0
 800cc10:	2100      	movs	r1, #0
 800cc12:	202e      	movs	r0, #46	; 0x2e
 800cc14:	f7f5 ff99 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 800cc18:	202e      	movs	r0, #46	; 0x2e
 800cc1a:	f7f5 ffb2 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800cc1e:	bf00      	nop
 800cc20:	3728      	adds	r7, #40	; 0x28
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}
 800cc26:	bf00      	nop
 800cc28:	40010400 	.word	0x40010400
 800cc2c:	40023800 	.word	0x40023800
 800cc30:	40020800 	.word	0x40020800

0800cc34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800cc34:	b580      	push	{r7, lr}
 800cc36:	b08a      	sub	sp, #40	; 0x28
 800cc38:	af00      	add	r7, sp, #0
 800cc3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cc3c:	f107 0314 	add.w	r3, r7, #20
 800cc40:	2200      	movs	r2, #0
 800cc42:	601a      	str	r2, [r3, #0]
 800cc44:	605a      	str	r2, [r3, #4]
 800cc46:	609a      	str	r2, [r3, #8]
 800cc48:	60da      	str	r2, [r3, #12]
 800cc4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	4a24      	ldr	r2, [pc, #144]	; (800cce4 <HAL_TIM_MspPostInit+0xb0>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d11f      	bne.n	800cc96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cc56:	2300      	movs	r3, #0
 800cc58:	613b      	str	r3, [r7, #16]
 800cc5a:	4b23      	ldr	r3, [pc, #140]	; (800cce8 <HAL_TIM_MspPostInit+0xb4>)
 800cc5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc5e:	4a22      	ldr	r2, [pc, #136]	; (800cce8 <HAL_TIM_MspPostInit+0xb4>)
 800cc60:	f043 0310 	orr.w	r3, r3, #16
 800cc64:	6313      	str	r3, [r2, #48]	; 0x30
 800cc66:	4b20      	ldr	r3, [pc, #128]	; (800cce8 <HAL_TIM_MspPostInit+0xb4>)
 800cc68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc6a:	f003 0310 	and.w	r3, r3, #16
 800cc6e:	613b      	str	r3, [r7, #16]
 800cc70:	693b      	ldr	r3, [r7, #16]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800cc72:	f44f 537c 	mov.w	r3, #16128	; 0x3f00
 800cc76:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cc78:	2302      	movs	r3, #2
 800cc7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cc80:	2300      	movs	r3, #0
 800cc82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800cc84:	2301      	movs	r3, #1
 800cc86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800cc88:	f107 0314 	add.w	r3, r7, #20
 800cc8c:	4619      	mov	r1, r3
 800cc8e:	4817      	ldr	r0, [pc, #92]	; (800ccec <HAL_TIM_MspPostInit+0xb8>)
 800cc90:	f7f6 fb76 	bl	8003380 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800cc94:	e022      	b.n	800ccdc <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	4a15      	ldr	r2, [pc, #84]	; (800ccf0 <HAL_TIM_MspPostInit+0xbc>)
 800cc9c:	4293      	cmp	r3, r2
 800cc9e:	d11d      	bne.n	800ccdc <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800cca0:	2300      	movs	r3, #0
 800cca2:	60fb      	str	r3, [r7, #12]
 800cca4:	4b10      	ldr	r3, [pc, #64]	; (800cce8 <HAL_TIM_MspPostInit+0xb4>)
 800cca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cca8:	4a0f      	ldr	r2, [pc, #60]	; (800cce8 <HAL_TIM_MspPostInit+0xb4>)
 800ccaa:	f043 0310 	orr.w	r3, r3, #16
 800ccae:	6313      	str	r3, [r2, #48]	; 0x30
 800ccb0:	4b0d      	ldr	r3, [pc, #52]	; (800cce8 <HAL_TIM_MspPostInit+0xb4>)
 800ccb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ccb4:	f003 0310 	and.w	r3, r3, #16
 800ccb8:	60fb      	str	r3, [r7, #12]
 800ccba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800ccbc:	2360      	movs	r3, #96	; 0x60
 800ccbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ccc0:	2302      	movs	r3, #2
 800ccc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800cccc:	2303      	movs	r3, #3
 800ccce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ccd0:	f107 0314 	add.w	r3, r7, #20
 800ccd4:	4619      	mov	r1, r3
 800ccd6:	4805      	ldr	r0, [pc, #20]	; (800ccec <HAL_TIM_MspPostInit+0xb8>)
 800ccd8:	f7f6 fb52 	bl	8003380 <HAL_GPIO_Init>
}
 800ccdc:	bf00      	nop
 800ccde:	3728      	adds	r7, #40	; 0x28
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	40010000 	.word	0x40010000
 800cce8:	40023800 	.word	0x40023800
 800ccec:	40021000 	.word	0x40021000
 800ccf0:	40014000 	.word	0x40014000

0800ccf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	b08a      	sub	sp, #40	; 0x28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ccfc:	f107 0314 	add.w	r3, r7, #20
 800cd00:	2200      	movs	r2, #0
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	605a      	str	r2, [r3, #4]
 800cd06:	609a      	str	r2, [r3, #8]
 800cd08:	60da      	str	r2, [r3, #12]
 800cd0a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	4a34      	ldr	r2, [pc, #208]	; (800cde4 <HAL_UART_MspInit+0xf0>)
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d162      	bne.n	800cddc <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800cd16:	2300      	movs	r3, #0
 800cd18:	613b      	str	r3, [r7, #16]
 800cd1a:	4b33      	ldr	r3, [pc, #204]	; (800cde8 <HAL_UART_MspInit+0xf4>)
 800cd1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd1e:	4a32      	ldr	r2, [pc, #200]	; (800cde8 <HAL_UART_MspInit+0xf4>)
 800cd20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800cd24:	6413      	str	r3, [r2, #64]	; 0x40
 800cd26:	4b30      	ldr	r3, [pc, #192]	; (800cde8 <HAL_UART_MspInit+0xf4>)
 800cd28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cd2e:	613b      	str	r3, [r7, #16]
 800cd30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800cd32:	2300      	movs	r3, #0
 800cd34:	60fb      	str	r3, [r7, #12]
 800cd36:	4b2c      	ldr	r3, [pc, #176]	; (800cde8 <HAL_UART_MspInit+0xf4>)
 800cd38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd3a:	4a2b      	ldr	r2, [pc, #172]	; (800cde8 <HAL_UART_MspInit+0xf4>)
 800cd3c:	f043 0308 	orr.w	r3, r3, #8
 800cd40:	6313      	str	r3, [r2, #48]	; 0x30
 800cd42:	4b29      	ldr	r3, [pc, #164]	; (800cde8 <HAL_UART_MspInit+0xf4>)
 800cd44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd46:	f003 0308 	and.w	r3, r3, #8
 800cd4a:	60fb      	str	r3, [r7, #12]
 800cd4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800cd4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 800cd52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cd54:	2302      	movs	r3, #2
 800cd56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cd5c:	2303      	movs	r3, #3
 800cd5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800cd60:	2307      	movs	r3, #7
 800cd62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800cd64:	f107 0314 	add.w	r3, r7, #20
 800cd68:	4619      	mov	r1, r3
 800cd6a:	4820      	ldr	r0, [pc, #128]	; (800cdec <HAL_UART_MspInit+0xf8>)
 800cd6c:	f7f6 fb08 	bl	8003380 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800cd70:	4b1f      	ldr	r3, [pc, #124]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cd72:	4a20      	ldr	r2, [pc, #128]	; (800cdf4 <HAL_UART_MspInit+0x100>)
 800cd74:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800cd76:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cd78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800cd7c:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800cd7e:	4b1c      	ldr	r3, [pc, #112]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cd80:	2240      	movs	r2, #64	; 0x40
 800cd82:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800cd84:	4b1a      	ldr	r3, [pc, #104]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cd86:	2200      	movs	r2, #0
 800cd88:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800cd8a:	4b19      	ldr	r3, [pc, #100]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cd8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cd90:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800cd92:	4b17      	ldr	r3, [pc, #92]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cd94:	2200      	movs	r2, #0
 800cd96:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800cd98:	4b15      	ldr	r3, [pc, #84]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800cd9e:	4b14      	ldr	r3, [pc, #80]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cda0:	2200      	movs	r2, #0
 800cda2:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800cda4:	4b12      	ldr	r3, [pc, #72]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800cdaa:	4b11      	ldr	r3, [pc, #68]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cdac:	2200      	movs	r2, #0
 800cdae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800cdb0:	480f      	ldr	r0, [pc, #60]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cdb2:	f7f5 ff01 	bl	8002bb8 <HAL_DMA_Init>
 800cdb6:	4603      	mov	r3, r0
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d001      	beq.n	800cdc0 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 800cdbc:	f7ff faf4 	bl	800c3a8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	4a0b      	ldr	r2, [pc, #44]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cdc4:	631a      	str	r2, [r3, #48]	; 0x30
 800cdc6:	4a0a      	ldr	r2, [pc, #40]	; (800cdf0 <HAL_UART_MspInit+0xfc>)
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800cdcc:	2200      	movs	r2, #0
 800cdce:	2100      	movs	r1, #0
 800cdd0:	2027      	movs	r0, #39	; 0x27
 800cdd2:	f7f5 feba 	bl	8002b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800cdd6:	2027      	movs	r0, #39	; 0x27
 800cdd8:	f7f5 fed3 	bl	8002b82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800cddc:	bf00      	nop
 800cdde:	3728      	adds	r7, #40	; 0x28
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}
 800cde4:	40004800 	.word	0x40004800
 800cde8:	40023800 	.word	0x40023800
 800cdec:	40020c00 	.word	0x40020c00
 800cdf0:	20000b40 	.word	0x20000b40
 800cdf4:	40026058 	.word	0x40026058

0800cdf8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800cdf8:	b580      	push	{r7, lr}
 800cdfa:	b08a      	sub	sp, #40	; 0x28
 800cdfc:	af00      	add	r7, sp, #0
 800cdfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce00:	f107 0314 	add.w	r3, r7, #20
 800ce04:	2200      	movs	r2, #0
 800ce06:	601a      	str	r2, [r3, #0]
 800ce08:	605a      	str	r2, [r3, #4]
 800ce0a:	609a      	str	r2, [r3, #8]
 800ce0c:	60da      	str	r2, [r3, #12]
 800ce0e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ce18:	d132      	bne.n	800ce80 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	613b      	str	r3, [r7, #16]
 800ce1e:	4b1a      	ldr	r3, [pc, #104]	; (800ce88 <HAL_PCD_MspInit+0x90>)
 800ce20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce22:	4a19      	ldr	r2, [pc, #100]	; (800ce88 <HAL_PCD_MspInit+0x90>)
 800ce24:	f043 0301 	orr.w	r3, r3, #1
 800ce28:	6313      	str	r3, [r2, #48]	; 0x30
 800ce2a:	4b17      	ldr	r3, [pc, #92]	; (800ce88 <HAL_PCD_MspInit+0x90>)
 800ce2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ce2e:	f003 0301 	and.w	r3, r3, #1
 800ce32:	613b      	str	r3, [r7, #16]
 800ce34:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ce36:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ce3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ce40:	2300      	movs	r3, #0
 800ce42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ce44:	2303      	movs	r3, #3
 800ce46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ce48:	230a      	movs	r3, #10
 800ce4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ce4c:	f107 0314 	add.w	r3, r7, #20
 800ce50:	4619      	mov	r1, r3
 800ce52:	480e      	ldr	r0, [pc, #56]	; (800ce8c <HAL_PCD_MspInit+0x94>)
 800ce54:	f7f6 fa94 	bl	8003380 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ce58:	4b0b      	ldr	r3, [pc, #44]	; (800ce88 <HAL_PCD_MspInit+0x90>)
 800ce5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce5c:	4a0a      	ldr	r2, [pc, #40]	; (800ce88 <HAL_PCD_MspInit+0x90>)
 800ce5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce62:	6353      	str	r3, [r2, #52]	; 0x34
 800ce64:	2300      	movs	r3, #0
 800ce66:	60fb      	str	r3, [r7, #12]
 800ce68:	4b07      	ldr	r3, [pc, #28]	; (800ce88 <HAL_PCD_MspInit+0x90>)
 800ce6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce6c:	4a06      	ldr	r2, [pc, #24]	; (800ce88 <HAL_PCD_MspInit+0x90>)
 800ce6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ce72:	6453      	str	r3, [r2, #68]	; 0x44
 800ce74:	4b04      	ldr	r3, [pc, #16]	; (800ce88 <HAL_PCD_MspInit+0x90>)
 800ce76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ce78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ce7c:	60fb      	str	r3, [r7, #12]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800ce80:	bf00      	nop
 800ce82:	3728      	adds	r7, #40	; 0x28
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd80      	pop	{r7, pc}
 800ce88:	40023800 	.word	0x40023800
 800ce8c:	40020000 	.word	0x40020000

0800ce90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ce90:	b480      	push	{r7}
 800ce92:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ce94:	bf00      	nop
 800ce96:	46bd      	mov	sp, r7
 800ce98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce9c:	4770      	bx	lr

0800ce9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ce9e:	b480      	push	{r7}
 800cea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800cea2:	e7fe      	b.n	800cea2 <HardFault_Handler+0x4>

0800cea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800cea4:	b480      	push	{r7}
 800cea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800cea8:	e7fe      	b.n	800cea8 <MemManage_Handler+0x4>

0800ceaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ceae:	e7fe      	b.n	800ceae <BusFault_Handler+0x4>

0800ceb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ceb0:	b480      	push	{r7}
 800ceb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ceb4:	e7fe      	b.n	800ceb4 <UsageFault_Handler+0x4>

0800ceb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ceb6:	b480      	push	{r7}
 800ceb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800ceba:	bf00      	nop
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800cec4:	b480      	push	{r7}
 800cec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800cec8:	bf00      	nop
 800ceca:	46bd      	mov	sp, r7
 800cecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced0:	4770      	bx	lr

0800ced2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800ced2:	b480      	push	{r7}
 800ced4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800ced6:	bf00      	nop
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800cee4:	f7f4 f882 	bl	8000fec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800cee8:	bf00      	nop
 800ceea:	bd80      	pop	{r7, pc}

0800ceec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800ceec:	b580      	push	{r7, lr}
 800ceee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800cef0:	4802      	ldr	r0, [pc, #8]	; (800cefc <DMA1_Stream3_IRQHandler+0x10>)
 800cef2:	f7f5 ff89 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800cef6:	bf00      	nop
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	20000b40 	.word	0x20000b40

0800cf00 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800cf04:	4805      	ldr	r0, [pc, #20]	; (800cf1c <ADC_IRQHandler+0x1c>)
 800cf06:	f7f4 f8f6 	bl	80010f6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800cf0a:	4805      	ldr	r0, [pc, #20]	; (800cf20 <ADC_IRQHandler+0x20>)
 800cf0c:	f7f4 f8f3 	bl	80010f6 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800cf10:	4804      	ldr	r0, [pc, #16]	; (800cf24 <ADC_IRQHandler+0x24>)
 800cf12:	f7f4 f8f0 	bl	80010f6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800cf16:	bf00      	nop
 800cf18:	bd80      	pop	{r7, pc}
 800cf1a:	bf00      	nop
 800cf1c:	20000cc8 	.word	0x20000cc8
 800cf20:	200005dc 	.word	0x200005dc
 800cf24:	20000d10 	.word	0x20000d10

0800cf28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800cf2c:	4802      	ldr	r0, [pc, #8]	; (800cf38 <CAN1_RX0_IRQHandler+0x10>)
 800cf2e:	f7f5 fafd 	bl	800252c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800cf32:	bf00      	nop
 800cf34:	bd80      	pop	{r7, pc}
 800cf36:	bf00      	nop
 800cf38:	20001afc 	.word	0x20001afc

0800cf3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800cf40:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cf44:	f7f6 fbea 	bl	800371c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800cf48:	bf00      	nop
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cf50:	4803      	ldr	r0, [pc, #12]	; (800cf60 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800cf52:	f7f9 fbce 	bl	80066f2 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 800cf56:	4803      	ldr	r0, [pc, #12]	; (800cf64 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 800cf58:	f7f9 fbcb 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800cf5c:	bf00      	nop
 800cf5e:	bd80      	pop	{r7, pc}
 800cf60:	20000dd8 	.word	0x20000dd8
 800cf64:	200017f0 	.word	0x200017f0

0800cf68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800cf68:	b580      	push	{r7, lr}
 800cf6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cf6c:	4802      	ldr	r0, [pc, #8]	; (800cf78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800cf6e:	f7f9 fbc0 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800cf72:	bf00      	nop
 800cf74:	bd80      	pop	{r7, pc}
 800cf76:	bf00      	nop
 800cf78:	20000dd8 	.word	0x20000dd8

0800cf7c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cf80:	4802      	ldr	r0, [pc, #8]	; (800cf8c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800cf82:	f7f9 fbb6 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800cf86:	bf00      	nop
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	20000dd8 	.word	0x20000dd8

0800cf90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
	//debug1_out_GPIO_Port->BSRR = debug1_out_Pin; //takes 60ns == 5 clock cycles
	//debug1_out_GPIO_Port->BSRR = debug1_out_Pin << 16U; //takes 60ns == 5 clock cycles

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800cf94:	4802      	ldr	r0, [pc, #8]	; (800cfa0 <TIM1_CC_IRQHandler+0x10>)
 800cf96:	f7f9 fbac 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800cf9a:	bf00      	nop
 800cf9c:	bd80      	pop	{r7, pc}
 800cf9e:	bf00      	nop
 800cfa0:	20000dd8 	.word	0x20000dd8

0800cfa4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 800cfa4:	b580      	push	{r7, lr}
 800cfa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800cfa8:	4802      	ldr	r0, [pc, #8]	; (800cfb4 <SPI2_IRQHandler+0x10>)
 800cfaa:	f7f8 feeb 	bl	8005d84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800cfae:	bf00      	nop
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	200001bc 	.word	0x200001bc

0800cfb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800cfbc:	4802      	ldr	r0, [pc, #8]	; (800cfc8 <USART3_IRQHandler+0x10>)
 800cfbe:	f7fa fb81 	bl	80076c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800cfc2:	bf00      	nop
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	2000059c 	.word	0x2000059c

0800cfcc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cfd0:	4802      	ldr	r0, [pc, #8]	; (800cfdc <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800cfd2:	f7f9 fb8e 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800cfd6:	bf00      	nop
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	2000055c 	.word	0x2000055c

0800cfe0 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800cfe0:	b580      	push	{r7, lr}
 800cfe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cfe4:	4802      	ldr	r0, [pc, #8]	; (800cff0 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800cfe6:	f7f9 fb84 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800cfea:	bf00      	nop
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	2000055c 	.word	0x2000055c

0800cff4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800cff8:	4802      	ldr	r0, [pc, #8]	; (800d004 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800cffa:	f7f9 fb7a 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800cffe:	bf00      	nop
 800d000:	bd80      	pop	{r7, pc}
 800d002:	bf00      	nop
 800d004:	2000055c 	.word	0x2000055c

0800d008 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800d00c:	4802      	ldr	r0, [pc, #8]	; (800d018 <TIM8_CC_IRQHandler+0x10>)
 800d00e:	f7f9 fb70 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 800d012:	bf00      	nop
 800d014:	bd80      	pop	{r7, pc}
 800d016:	bf00      	nop
 800d018:	2000055c 	.word	0x2000055c

0800d01c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800d020:	4802      	ldr	r0, [pc, #8]	; (800d02c <TIM5_IRQHandler+0x10>)
 800d022:	f7f9 fb66 	bl	80066f2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800d026:	bf00      	nop
 800d028:	bd80      	pop	{r7, pc}
 800d02a:	bf00      	nop
 800d02c:	20000ba0 	.word	0x20000ba0

0800d030 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800d034:	4802      	ldr	r0, [pc, #8]	; (800d040 <DMA2_Stream0_IRQHandler+0x10>)
 800d036:	f7f5 fee7 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800d03a:	bf00      	nop
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20000d58 	.word	0x20000d58

0800d044 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800d048:	4802      	ldr	r0, [pc, #8]	; (800d054 <DMA2_Stream1_IRQHandler+0x10>)
 800d04a:	f7f5 fedd 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800d04e:	bf00      	nop
 800d050:	bd80      	pop	{r7, pc}
 800d052:	bf00      	nop
 800d054:	20000ae0 	.word	0x20000ae0

0800d058 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800d058:	b580      	push	{r7, lr}
 800d05a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800d05c:	4802      	ldr	r0, [pc, #8]	; (800d068 <DMA2_Stream2_IRQHandler+0x10>)
 800d05e:	f7f5 fed3 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800d062:	bf00      	nop
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	20001a9c 	.word	0x20001a9c

0800d06c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b084      	sub	sp, #16
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800d074:	4b11      	ldr	r3, [pc, #68]	; (800d0bc <_sbrk+0x50>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d102      	bne.n	800d082 <_sbrk+0x16>
		heap_end = &end;
 800d07c:	4b0f      	ldr	r3, [pc, #60]	; (800d0bc <_sbrk+0x50>)
 800d07e:	4a10      	ldr	r2, [pc, #64]	; (800d0c0 <_sbrk+0x54>)
 800d080:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800d082:	4b0e      	ldr	r3, [pc, #56]	; (800d0bc <_sbrk+0x50>)
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800d088:	4b0c      	ldr	r3, [pc, #48]	; (800d0bc <_sbrk+0x50>)
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4413      	add	r3, r2
 800d090:	466a      	mov	r2, sp
 800d092:	4293      	cmp	r3, r2
 800d094:	d907      	bls.n	800d0a6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800d096:	f000 f855 	bl	800d144 <__errno>
 800d09a:	4602      	mov	r2, r0
 800d09c:	230c      	movs	r3, #12
 800d09e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800d0a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d0a4:	e006      	b.n	800d0b4 <_sbrk+0x48>
	}

	heap_end += incr;
 800d0a6:	4b05      	ldr	r3, [pc, #20]	; (800d0bc <_sbrk+0x50>)
 800d0a8:	681a      	ldr	r2, [r3, #0]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4413      	add	r3, r2
 800d0ae:	4a03      	ldr	r2, [pc, #12]	; (800d0bc <_sbrk+0x50>)
 800d0b0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	20000184 	.word	0x20000184
 800d0c0:	20002548 	.word	0x20002548

0800d0c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800d0c4:	b480      	push	{r7}
 800d0c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800d0c8:	4b08      	ldr	r3, [pc, #32]	; (800d0ec <SystemInit+0x28>)
 800d0ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0ce:	4a07      	ldr	r2, [pc, #28]	; (800d0ec <SystemInit+0x28>)
 800d0d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d0d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800d0d8:	4b04      	ldr	r3, [pc, #16]	; (800d0ec <SystemInit+0x28>)
 800d0da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800d0de:	609a      	str	r2, [r3, #8]
#endif
}
 800d0e0:	bf00      	nop
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e8:	4770      	bx	lr
 800d0ea:	bf00      	nop
 800d0ec:	e000ed00 	.word	0xe000ed00

0800d0f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800d0f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800d128 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800d0f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800d0f6:	e003      	b.n	800d100 <LoopCopyDataInit>

0800d0f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800d0f8:	4b0c      	ldr	r3, [pc, #48]	; (800d12c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800d0fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800d0fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800d0fe:	3104      	adds	r1, #4

0800d100 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800d100:	480b      	ldr	r0, [pc, #44]	; (800d130 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800d102:	4b0c      	ldr	r3, [pc, #48]	; (800d134 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800d104:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800d106:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800d108:	d3f6      	bcc.n	800d0f8 <CopyDataInit>
  ldr  r2, =_sbss
 800d10a:	4a0b      	ldr	r2, [pc, #44]	; (800d138 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800d10c:	e002      	b.n	800d114 <LoopFillZerobss>

0800d10e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800d10e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800d110:	f842 3b04 	str.w	r3, [r2], #4

0800d114 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800d114:	4b09      	ldr	r3, [pc, #36]	; (800d13c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800d116:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800d118:	d3f9      	bcc.n	800d10e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800d11a:	f7ff ffd3 	bl	800d0c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800d11e:	f000 f817 	bl	800d150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800d122:	f7fb fb47 	bl	80087b4 <main>
  bx  lr    
 800d126:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800d128:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800d12c:	0800f278 	.word	0x0800f278
  ldr  r0, =_sdata
 800d130:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800d134:	200000b8 	.word	0x200000b8
  ldr  r2, =_sbss
 800d138:	200000b8 	.word	0x200000b8
  ldr  r3, = _ebss
 800d13c:	20002548 	.word	0x20002548

0800d140 <CAN1_RX1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800d140:	e7fe      	b.n	800d140 <CAN1_RX1_IRQHandler>
	...

0800d144 <__errno>:
 800d144:	4b01      	ldr	r3, [pc, #4]	; (800d14c <__errno+0x8>)
 800d146:	6818      	ldr	r0, [r3, #0]
 800d148:	4770      	bx	lr
 800d14a:	bf00      	nop
 800d14c:	20000050 	.word	0x20000050

0800d150 <__libc_init_array>:
 800d150:	b570      	push	{r4, r5, r6, lr}
 800d152:	4e0d      	ldr	r6, [pc, #52]	; (800d188 <__libc_init_array+0x38>)
 800d154:	4c0d      	ldr	r4, [pc, #52]	; (800d18c <__libc_init_array+0x3c>)
 800d156:	1ba4      	subs	r4, r4, r6
 800d158:	10a4      	asrs	r4, r4, #2
 800d15a:	2500      	movs	r5, #0
 800d15c:	42a5      	cmp	r5, r4
 800d15e:	d109      	bne.n	800d174 <__libc_init_array+0x24>
 800d160:	4e0b      	ldr	r6, [pc, #44]	; (800d190 <__libc_init_array+0x40>)
 800d162:	4c0c      	ldr	r4, [pc, #48]	; (800d194 <__libc_init_array+0x44>)
 800d164:	f001 fdd2 	bl	800ed0c <_init>
 800d168:	1ba4      	subs	r4, r4, r6
 800d16a:	10a4      	asrs	r4, r4, #2
 800d16c:	2500      	movs	r5, #0
 800d16e:	42a5      	cmp	r5, r4
 800d170:	d105      	bne.n	800d17e <__libc_init_array+0x2e>
 800d172:	bd70      	pop	{r4, r5, r6, pc}
 800d174:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d178:	4798      	blx	r3
 800d17a:	3501      	adds	r5, #1
 800d17c:	e7ee      	b.n	800d15c <__libc_init_array+0xc>
 800d17e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800d182:	4798      	blx	r3
 800d184:	3501      	adds	r5, #1
 800d186:	e7f2      	b.n	800d16e <__libc_init_array+0x1e>
 800d188:	0800f270 	.word	0x0800f270
 800d18c:	0800f270 	.word	0x0800f270
 800d190:	0800f270 	.word	0x0800f270
 800d194:	0800f274 	.word	0x0800f274

0800d198 <memset>:
 800d198:	4402      	add	r2, r0
 800d19a:	4603      	mov	r3, r0
 800d19c:	4293      	cmp	r3, r2
 800d19e:	d100      	bne.n	800d1a2 <memset+0xa>
 800d1a0:	4770      	bx	lr
 800d1a2:	f803 1b01 	strb.w	r1, [r3], #1
 800d1a6:	e7f9      	b.n	800d19c <memset+0x4>

0800d1a8 <sniprintf>:
 800d1a8:	b40c      	push	{r2, r3}
 800d1aa:	b530      	push	{r4, r5, lr}
 800d1ac:	4b17      	ldr	r3, [pc, #92]	; (800d20c <sniprintf+0x64>)
 800d1ae:	1e0c      	subs	r4, r1, #0
 800d1b0:	b09d      	sub	sp, #116	; 0x74
 800d1b2:	681d      	ldr	r5, [r3, #0]
 800d1b4:	da08      	bge.n	800d1c8 <sniprintf+0x20>
 800d1b6:	238b      	movs	r3, #139	; 0x8b
 800d1b8:	602b      	str	r3, [r5, #0]
 800d1ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d1be:	b01d      	add	sp, #116	; 0x74
 800d1c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d1c4:	b002      	add	sp, #8
 800d1c6:	4770      	bx	lr
 800d1c8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d1cc:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d1d0:	bf14      	ite	ne
 800d1d2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800d1d6:	4623      	moveq	r3, r4
 800d1d8:	9304      	str	r3, [sp, #16]
 800d1da:	9307      	str	r3, [sp, #28]
 800d1dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d1e0:	9002      	str	r0, [sp, #8]
 800d1e2:	9006      	str	r0, [sp, #24]
 800d1e4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d1e8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d1ea:	ab21      	add	r3, sp, #132	; 0x84
 800d1ec:	a902      	add	r1, sp, #8
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	9301      	str	r3, [sp, #4]
 800d1f2:	f000 f897 	bl	800d324 <_svfiprintf_r>
 800d1f6:	1c43      	adds	r3, r0, #1
 800d1f8:	bfbc      	itt	lt
 800d1fa:	238b      	movlt	r3, #139	; 0x8b
 800d1fc:	602b      	strlt	r3, [r5, #0]
 800d1fe:	2c00      	cmp	r4, #0
 800d200:	d0dd      	beq.n	800d1be <sniprintf+0x16>
 800d202:	9b02      	ldr	r3, [sp, #8]
 800d204:	2200      	movs	r2, #0
 800d206:	701a      	strb	r2, [r3, #0]
 800d208:	e7d9      	b.n	800d1be <sniprintf+0x16>
 800d20a:	bf00      	nop
 800d20c:	20000050 	.word	0x20000050

0800d210 <siprintf>:
 800d210:	b40e      	push	{r1, r2, r3}
 800d212:	b500      	push	{lr}
 800d214:	b09c      	sub	sp, #112	; 0x70
 800d216:	ab1d      	add	r3, sp, #116	; 0x74
 800d218:	9002      	str	r0, [sp, #8]
 800d21a:	9006      	str	r0, [sp, #24]
 800d21c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d220:	4809      	ldr	r0, [pc, #36]	; (800d248 <siprintf+0x38>)
 800d222:	9107      	str	r1, [sp, #28]
 800d224:	9104      	str	r1, [sp, #16]
 800d226:	4909      	ldr	r1, [pc, #36]	; (800d24c <siprintf+0x3c>)
 800d228:	f853 2b04 	ldr.w	r2, [r3], #4
 800d22c:	9105      	str	r1, [sp, #20]
 800d22e:	6800      	ldr	r0, [r0, #0]
 800d230:	9301      	str	r3, [sp, #4]
 800d232:	a902      	add	r1, sp, #8
 800d234:	f000 f876 	bl	800d324 <_svfiprintf_r>
 800d238:	9b02      	ldr	r3, [sp, #8]
 800d23a:	2200      	movs	r2, #0
 800d23c:	701a      	strb	r2, [r3, #0]
 800d23e:	b01c      	add	sp, #112	; 0x70
 800d240:	f85d eb04 	ldr.w	lr, [sp], #4
 800d244:	b003      	add	sp, #12
 800d246:	4770      	bx	lr
 800d248:	20000050 	.word	0x20000050
 800d24c:	ffff0208 	.word	0xffff0208

0800d250 <strcat>:
 800d250:	b510      	push	{r4, lr}
 800d252:	4603      	mov	r3, r0
 800d254:	781a      	ldrb	r2, [r3, #0]
 800d256:	1c5c      	adds	r4, r3, #1
 800d258:	b93a      	cbnz	r2, 800d26a <strcat+0x1a>
 800d25a:	3b01      	subs	r3, #1
 800d25c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d260:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d264:	2a00      	cmp	r2, #0
 800d266:	d1f9      	bne.n	800d25c <strcat+0xc>
 800d268:	bd10      	pop	{r4, pc}
 800d26a:	4623      	mov	r3, r4
 800d26c:	e7f2      	b.n	800d254 <strcat+0x4>

0800d26e <__ssputs_r>:
 800d26e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d272:	688e      	ldr	r6, [r1, #8]
 800d274:	429e      	cmp	r6, r3
 800d276:	4682      	mov	sl, r0
 800d278:	460c      	mov	r4, r1
 800d27a:	4690      	mov	r8, r2
 800d27c:	4699      	mov	r9, r3
 800d27e:	d837      	bhi.n	800d2f0 <__ssputs_r+0x82>
 800d280:	898a      	ldrh	r2, [r1, #12]
 800d282:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d286:	d031      	beq.n	800d2ec <__ssputs_r+0x7e>
 800d288:	6825      	ldr	r5, [r4, #0]
 800d28a:	6909      	ldr	r1, [r1, #16]
 800d28c:	1a6f      	subs	r7, r5, r1
 800d28e:	6965      	ldr	r5, [r4, #20]
 800d290:	2302      	movs	r3, #2
 800d292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d296:	fb95 f5f3 	sdiv	r5, r5, r3
 800d29a:	f109 0301 	add.w	r3, r9, #1
 800d29e:	443b      	add	r3, r7
 800d2a0:	429d      	cmp	r5, r3
 800d2a2:	bf38      	it	cc
 800d2a4:	461d      	movcc	r5, r3
 800d2a6:	0553      	lsls	r3, r2, #21
 800d2a8:	d530      	bpl.n	800d30c <__ssputs_r+0x9e>
 800d2aa:	4629      	mov	r1, r5
 800d2ac:	f000 fb2c 	bl	800d908 <_malloc_r>
 800d2b0:	4606      	mov	r6, r0
 800d2b2:	b950      	cbnz	r0, 800d2ca <__ssputs_r+0x5c>
 800d2b4:	230c      	movs	r3, #12
 800d2b6:	f8ca 3000 	str.w	r3, [sl]
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d2c0:	81a3      	strh	r3, [r4, #12]
 800d2c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d2c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ca:	463a      	mov	r2, r7
 800d2cc:	6921      	ldr	r1, [r4, #16]
 800d2ce:	f000 faa9 	bl	800d824 <memcpy>
 800d2d2:	89a3      	ldrh	r3, [r4, #12]
 800d2d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d2d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d2dc:	81a3      	strh	r3, [r4, #12]
 800d2de:	6126      	str	r6, [r4, #16]
 800d2e0:	6165      	str	r5, [r4, #20]
 800d2e2:	443e      	add	r6, r7
 800d2e4:	1bed      	subs	r5, r5, r7
 800d2e6:	6026      	str	r6, [r4, #0]
 800d2e8:	60a5      	str	r5, [r4, #8]
 800d2ea:	464e      	mov	r6, r9
 800d2ec:	454e      	cmp	r6, r9
 800d2ee:	d900      	bls.n	800d2f2 <__ssputs_r+0x84>
 800d2f0:	464e      	mov	r6, r9
 800d2f2:	4632      	mov	r2, r6
 800d2f4:	4641      	mov	r1, r8
 800d2f6:	6820      	ldr	r0, [r4, #0]
 800d2f8:	f000 fa9f 	bl	800d83a <memmove>
 800d2fc:	68a3      	ldr	r3, [r4, #8]
 800d2fe:	1b9b      	subs	r3, r3, r6
 800d300:	60a3      	str	r3, [r4, #8]
 800d302:	6823      	ldr	r3, [r4, #0]
 800d304:	441e      	add	r6, r3
 800d306:	6026      	str	r6, [r4, #0]
 800d308:	2000      	movs	r0, #0
 800d30a:	e7dc      	b.n	800d2c6 <__ssputs_r+0x58>
 800d30c:	462a      	mov	r2, r5
 800d30e:	f000 fb55 	bl	800d9bc <_realloc_r>
 800d312:	4606      	mov	r6, r0
 800d314:	2800      	cmp	r0, #0
 800d316:	d1e2      	bne.n	800d2de <__ssputs_r+0x70>
 800d318:	6921      	ldr	r1, [r4, #16]
 800d31a:	4650      	mov	r0, sl
 800d31c:	f000 faa6 	bl	800d86c <_free_r>
 800d320:	e7c8      	b.n	800d2b4 <__ssputs_r+0x46>
	...

0800d324 <_svfiprintf_r>:
 800d324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d328:	461d      	mov	r5, r3
 800d32a:	898b      	ldrh	r3, [r1, #12]
 800d32c:	061f      	lsls	r7, r3, #24
 800d32e:	b09d      	sub	sp, #116	; 0x74
 800d330:	4680      	mov	r8, r0
 800d332:	460c      	mov	r4, r1
 800d334:	4616      	mov	r6, r2
 800d336:	d50f      	bpl.n	800d358 <_svfiprintf_r+0x34>
 800d338:	690b      	ldr	r3, [r1, #16]
 800d33a:	b96b      	cbnz	r3, 800d358 <_svfiprintf_r+0x34>
 800d33c:	2140      	movs	r1, #64	; 0x40
 800d33e:	f000 fae3 	bl	800d908 <_malloc_r>
 800d342:	6020      	str	r0, [r4, #0]
 800d344:	6120      	str	r0, [r4, #16]
 800d346:	b928      	cbnz	r0, 800d354 <_svfiprintf_r+0x30>
 800d348:	230c      	movs	r3, #12
 800d34a:	f8c8 3000 	str.w	r3, [r8]
 800d34e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d352:	e0c8      	b.n	800d4e6 <_svfiprintf_r+0x1c2>
 800d354:	2340      	movs	r3, #64	; 0x40
 800d356:	6163      	str	r3, [r4, #20]
 800d358:	2300      	movs	r3, #0
 800d35a:	9309      	str	r3, [sp, #36]	; 0x24
 800d35c:	2320      	movs	r3, #32
 800d35e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d362:	2330      	movs	r3, #48	; 0x30
 800d364:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d368:	9503      	str	r5, [sp, #12]
 800d36a:	f04f 0b01 	mov.w	fp, #1
 800d36e:	4637      	mov	r7, r6
 800d370:	463d      	mov	r5, r7
 800d372:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d376:	b10b      	cbz	r3, 800d37c <_svfiprintf_r+0x58>
 800d378:	2b25      	cmp	r3, #37	; 0x25
 800d37a:	d13e      	bne.n	800d3fa <_svfiprintf_r+0xd6>
 800d37c:	ebb7 0a06 	subs.w	sl, r7, r6
 800d380:	d00b      	beq.n	800d39a <_svfiprintf_r+0x76>
 800d382:	4653      	mov	r3, sl
 800d384:	4632      	mov	r2, r6
 800d386:	4621      	mov	r1, r4
 800d388:	4640      	mov	r0, r8
 800d38a:	f7ff ff70 	bl	800d26e <__ssputs_r>
 800d38e:	3001      	adds	r0, #1
 800d390:	f000 80a4 	beq.w	800d4dc <_svfiprintf_r+0x1b8>
 800d394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d396:	4453      	add	r3, sl
 800d398:	9309      	str	r3, [sp, #36]	; 0x24
 800d39a:	783b      	ldrb	r3, [r7, #0]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	f000 809d 	beq.w	800d4dc <_svfiprintf_r+0x1b8>
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3ac:	9304      	str	r3, [sp, #16]
 800d3ae:	9307      	str	r3, [sp, #28]
 800d3b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d3b4:	931a      	str	r3, [sp, #104]	; 0x68
 800d3b6:	462f      	mov	r7, r5
 800d3b8:	2205      	movs	r2, #5
 800d3ba:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d3be:	4850      	ldr	r0, [pc, #320]	; (800d500 <_svfiprintf_r+0x1dc>)
 800d3c0:	f7f2 ff0e 	bl	80001e0 <memchr>
 800d3c4:	9b04      	ldr	r3, [sp, #16]
 800d3c6:	b9d0      	cbnz	r0, 800d3fe <_svfiprintf_r+0xda>
 800d3c8:	06d9      	lsls	r1, r3, #27
 800d3ca:	bf44      	itt	mi
 800d3cc:	2220      	movmi	r2, #32
 800d3ce:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3d2:	071a      	lsls	r2, r3, #28
 800d3d4:	bf44      	itt	mi
 800d3d6:	222b      	movmi	r2, #43	; 0x2b
 800d3d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d3dc:	782a      	ldrb	r2, [r5, #0]
 800d3de:	2a2a      	cmp	r2, #42	; 0x2a
 800d3e0:	d015      	beq.n	800d40e <_svfiprintf_r+0xea>
 800d3e2:	9a07      	ldr	r2, [sp, #28]
 800d3e4:	462f      	mov	r7, r5
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	250a      	movs	r5, #10
 800d3ea:	4639      	mov	r1, r7
 800d3ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3f0:	3b30      	subs	r3, #48	; 0x30
 800d3f2:	2b09      	cmp	r3, #9
 800d3f4:	d94d      	bls.n	800d492 <_svfiprintf_r+0x16e>
 800d3f6:	b1b8      	cbz	r0, 800d428 <_svfiprintf_r+0x104>
 800d3f8:	e00f      	b.n	800d41a <_svfiprintf_r+0xf6>
 800d3fa:	462f      	mov	r7, r5
 800d3fc:	e7b8      	b.n	800d370 <_svfiprintf_r+0x4c>
 800d3fe:	4a40      	ldr	r2, [pc, #256]	; (800d500 <_svfiprintf_r+0x1dc>)
 800d400:	1a80      	subs	r0, r0, r2
 800d402:	fa0b f000 	lsl.w	r0, fp, r0
 800d406:	4318      	orrs	r0, r3
 800d408:	9004      	str	r0, [sp, #16]
 800d40a:	463d      	mov	r5, r7
 800d40c:	e7d3      	b.n	800d3b6 <_svfiprintf_r+0x92>
 800d40e:	9a03      	ldr	r2, [sp, #12]
 800d410:	1d11      	adds	r1, r2, #4
 800d412:	6812      	ldr	r2, [r2, #0]
 800d414:	9103      	str	r1, [sp, #12]
 800d416:	2a00      	cmp	r2, #0
 800d418:	db01      	blt.n	800d41e <_svfiprintf_r+0xfa>
 800d41a:	9207      	str	r2, [sp, #28]
 800d41c:	e004      	b.n	800d428 <_svfiprintf_r+0x104>
 800d41e:	4252      	negs	r2, r2
 800d420:	f043 0302 	orr.w	r3, r3, #2
 800d424:	9207      	str	r2, [sp, #28]
 800d426:	9304      	str	r3, [sp, #16]
 800d428:	783b      	ldrb	r3, [r7, #0]
 800d42a:	2b2e      	cmp	r3, #46	; 0x2e
 800d42c:	d10c      	bne.n	800d448 <_svfiprintf_r+0x124>
 800d42e:	787b      	ldrb	r3, [r7, #1]
 800d430:	2b2a      	cmp	r3, #42	; 0x2a
 800d432:	d133      	bne.n	800d49c <_svfiprintf_r+0x178>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	1d1a      	adds	r2, r3, #4
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	9203      	str	r2, [sp, #12]
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	bfb8      	it	lt
 800d440:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d444:	3702      	adds	r7, #2
 800d446:	9305      	str	r3, [sp, #20]
 800d448:	4d2e      	ldr	r5, [pc, #184]	; (800d504 <_svfiprintf_r+0x1e0>)
 800d44a:	7839      	ldrb	r1, [r7, #0]
 800d44c:	2203      	movs	r2, #3
 800d44e:	4628      	mov	r0, r5
 800d450:	f7f2 fec6 	bl	80001e0 <memchr>
 800d454:	b138      	cbz	r0, 800d466 <_svfiprintf_r+0x142>
 800d456:	2340      	movs	r3, #64	; 0x40
 800d458:	1b40      	subs	r0, r0, r5
 800d45a:	fa03 f000 	lsl.w	r0, r3, r0
 800d45e:	9b04      	ldr	r3, [sp, #16]
 800d460:	4303      	orrs	r3, r0
 800d462:	3701      	adds	r7, #1
 800d464:	9304      	str	r3, [sp, #16]
 800d466:	7839      	ldrb	r1, [r7, #0]
 800d468:	4827      	ldr	r0, [pc, #156]	; (800d508 <_svfiprintf_r+0x1e4>)
 800d46a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d46e:	2206      	movs	r2, #6
 800d470:	1c7e      	adds	r6, r7, #1
 800d472:	f7f2 feb5 	bl	80001e0 <memchr>
 800d476:	2800      	cmp	r0, #0
 800d478:	d038      	beq.n	800d4ec <_svfiprintf_r+0x1c8>
 800d47a:	4b24      	ldr	r3, [pc, #144]	; (800d50c <_svfiprintf_r+0x1e8>)
 800d47c:	bb13      	cbnz	r3, 800d4c4 <_svfiprintf_r+0x1a0>
 800d47e:	9b03      	ldr	r3, [sp, #12]
 800d480:	3307      	adds	r3, #7
 800d482:	f023 0307 	bic.w	r3, r3, #7
 800d486:	3308      	adds	r3, #8
 800d488:	9303      	str	r3, [sp, #12]
 800d48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d48c:	444b      	add	r3, r9
 800d48e:	9309      	str	r3, [sp, #36]	; 0x24
 800d490:	e76d      	b.n	800d36e <_svfiprintf_r+0x4a>
 800d492:	fb05 3202 	mla	r2, r5, r2, r3
 800d496:	2001      	movs	r0, #1
 800d498:	460f      	mov	r7, r1
 800d49a:	e7a6      	b.n	800d3ea <_svfiprintf_r+0xc6>
 800d49c:	2300      	movs	r3, #0
 800d49e:	3701      	adds	r7, #1
 800d4a0:	9305      	str	r3, [sp, #20]
 800d4a2:	4619      	mov	r1, r3
 800d4a4:	250a      	movs	r5, #10
 800d4a6:	4638      	mov	r0, r7
 800d4a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ac:	3a30      	subs	r2, #48	; 0x30
 800d4ae:	2a09      	cmp	r2, #9
 800d4b0:	d903      	bls.n	800d4ba <_svfiprintf_r+0x196>
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0c8      	beq.n	800d448 <_svfiprintf_r+0x124>
 800d4b6:	9105      	str	r1, [sp, #20]
 800d4b8:	e7c6      	b.n	800d448 <_svfiprintf_r+0x124>
 800d4ba:	fb05 2101 	mla	r1, r5, r1, r2
 800d4be:	2301      	movs	r3, #1
 800d4c0:	4607      	mov	r7, r0
 800d4c2:	e7f0      	b.n	800d4a6 <_svfiprintf_r+0x182>
 800d4c4:	ab03      	add	r3, sp, #12
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	4622      	mov	r2, r4
 800d4ca:	4b11      	ldr	r3, [pc, #68]	; (800d510 <_svfiprintf_r+0x1ec>)
 800d4cc:	a904      	add	r1, sp, #16
 800d4ce:	4640      	mov	r0, r8
 800d4d0:	f3af 8000 	nop.w
 800d4d4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800d4d8:	4681      	mov	r9, r0
 800d4da:	d1d6      	bne.n	800d48a <_svfiprintf_r+0x166>
 800d4dc:	89a3      	ldrh	r3, [r4, #12]
 800d4de:	065b      	lsls	r3, r3, #25
 800d4e0:	f53f af35 	bmi.w	800d34e <_svfiprintf_r+0x2a>
 800d4e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d4e6:	b01d      	add	sp, #116	; 0x74
 800d4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4ec:	ab03      	add	r3, sp, #12
 800d4ee:	9300      	str	r3, [sp, #0]
 800d4f0:	4622      	mov	r2, r4
 800d4f2:	4b07      	ldr	r3, [pc, #28]	; (800d510 <_svfiprintf_r+0x1ec>)
 800d4f4:	a904      	add	r1, sp, #16
 800d4f6:	4640      	mov	r0, r8
 800d4f8:	f000 f882 	bl	800d600 <_printf_i>
 800d4fc:	e7ea      	b.n	800d4d4 <_svfiprintf_r+0x1b0>
 800d4fe:	bf00      	nop
 800d500:	0800f054 	.word	0x0800f054
 800d504:	0800f05a 	.word	0x0800f05a
 800d508:	0800f05e 	.word	0x0800f05e
 800d50c:	00000000 	.word	0x00000000
 800d510:	0800d26f 	.word	0x0800d26f

0800d514 <_printf_common>:
 800d514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d518:	4691      	mov	r9, r2
 800d51a:	461f      	mov	r7, r3
 800d51c:	688a      	ldr	r2, [r1, #8]
 800d51e:	690b      	ldr	r3, [r1, #16]
 800d520:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d524:	4293      	cmp	r3, r2
 800d526:	bfb8      	it	lt
 800d528:	4613      	movlt	r3, r2
 800d52a:	f8c9 3000 	str.w	r3, [r9]
 800d52e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d532:	4606      	mov	r6, r0
 800d534:	460c      	mov	r4, r1
 800d536:	b112      	cbz	r2, 800d53e <_printf_common+0x2a>
 800d538:	3301      	adds	r3, #1
 800d53a:	f8c9 3000 	str.w	r3, [r9]
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	0699      	lsls	r1, r3, #26
 800d542:	bf42      	ittt	mi
 800d544:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d548:	3302      	addmi	r3, #2
 800d54a:	f8c9 3000 	strmi.w	r3, [r9]
 800d54e:	6825      	ldr	r5, [r4, #0]
 800d550:	f015 0506 	ands.w	r5, r5, #6
 800d554:	d107      	bne.n	800d566 <_printf_common+0x52>
 800d556:	f104 0a19 	add.w	sl, r4, #25
 800d55a:	68e3      	ldr	r3, [r4, #12]
 800d55c:	f8d9 2000 	ldr.w	r2, [r9]
 800d560:	1a9b      	subs	r3, r3, r2
 800d562:	42ab      	cmp	r3, r5
 800d564:	dc28      	bgt.n	800d5b8 <_printf_common+0xa4>
 800d566:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d56a:	6822      	ldr	r2, [r4, #0]
 800d56c:	3300      	adds	r3, #0
 800d56e:	bf18      	it	ne
 800d570:	2301      	movne	r3, #1
 800d572:	0692      	lsls	r2, r2, #26
 800d574:	d42d      	bmi.n	800d5d2 <_printf_common+0xbe>
 800d576:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d57a:	4639      	mov	r1, r7
 800d57c:	4630      	mov	r0, r6
 800d57e:	47c0      	blx	r8
 800d580:	3001      	adds	r0, #1
 800d582:	d020      	beq.n	800d5c6 <_printf_common+0xb2>
 800d584:	6823      	ldr	r3, [r4, #0]
 800d586:	68e5      	ldr	r5, [r4, #12]
 800d588:	f8d9 2000 	ldr.w	r2, [r9]
 800d58c:	f003 0306 	and.w	r3, r3, #6
 800d590:	2b04      	cmp	r3, #4
 800d592:	bf08      	it	eq
 800d594:	1aad      	subeq	r5, r5, r2
 800d596:	68a3      	ldr	r3, [r4, #8]
 800d598:	6922      	ldr	r2, [r4, #16]
 800d59a:	bf0c      	ite	eq
 800d59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d5a0:	2500      	movne	r5, #0
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	bfc4      	itt	gt
 800d5a6:	1a9b      	subgt	r3, r3, r2
 800d5a8:	18ed      	addgt	r5, r5, r3
 800d5aa:	f04f 0900 	mov.w	r9, #0
 800d5ae:	341a      	adds	r4, #26
 800d5b0:	454d      	cmp	r5, r9
 800d5b2:	d11a      	bne.n	800d5ea <_printf_common+0xd6>
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	e008      	b.n	800d5ca <_printf_common+0xb6>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	4652      	mov	r2, sl
 800d5bc:	4639      	mov	r1, r7
 800d5be:	4630      	mov	r0, r6
 800d5c0:	47c0      	blx	r8
 800d5c2:	3001      	adds	r0, #1
 800d5c4:	d103      	bne.n	800d5ce <_printf_common+0xba>
 800d5c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d5ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ce:	3501      	adds	r5, #1
 800d5d0:	e7c3      	b.n	800d55a <_printf_common+0x46>
 800d5d2:	18e1      	adds	r1, r4, r3
 800d5d4:	1c5a      	adds	r2, r3, #1
 800d5d6:	2030      	movs	r0, #48	; 0x30
 800d5d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d5dc:	4422      	add	r2, r4
 800d5de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d5e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d5e6:	3302      	adds	r3, #2
 800d5e8:	e7c5      	b.n	800d576 <_printf_common+0x62>
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	4622      	mov	r2, r4
 800d5ee:	4639      	mov	r1, r7
 800d5f0:	4630      	mov	r0, r6
 800d5f2:	47c0      	blx	r8
 800d5f4:	3001      	adds	r0, #1
 800d5f6:	d0e6      	beq.n	800d5c6 <_printf_common+0xb2>
 800d5f8:	f109 0901 	add.w	r9, r9, #1
 800d5fc:	e7d8      	b.n	800d5b0 <_printf_common+0x9c>
	...

0800d600 <_printf_i>:
 800d600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d604:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d608:	460c      	mov	r4, r1
 800d60a:	7e09      	ldrb	r1, [r1, #24]
 800d60c:	b085      	sub	sp, #20
 800d60e:	296e      	cmp	r1, #110	; 0x6e
 800d610:	4617      	mov	r7, r2
 800d612:	4606      	mov	r6, r0
 800d614:	4698      	mov	r8, r3
 800d616:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d618:	f000 80b3 	beq.w	800d782 <_printf_i+0x182>
 800d61c:	d822      	bhi.n	800d664 <_printf_i+0x64>
 800d61e:	2963      	cmp	r1, #99	; 0x63
 800d620:	d036      	beq.n	800d690 <_printf_i+0x90>
 800d622:	d80a      	bhi.n	800d63a <_printf_i+0x3a>
 800d624:	2900      	cmp	r1, #0
 800d626:	f000 80b9 	beq.w	800d79c <_printf_i+0x19c>
 800d62a:	2958      	cmp	r1, #88	; 0x58
 800d62c:	f000 8083 	beq.w	800d736 <_printf_i+0x136>
 800d630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d634:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d638:	e032      	b.n	800d6a0 <_printf_i+0xa0>
 800d63a:	2964      	cmp	r1, #100	; 0x64
 800d63c:	d001      	beq.n	800d642 <_printf_i+0x42>
 800d63e:	2969      	cmp	r1, #105	; 0x69
 800d640:	d1f6      	bne.n	800d630 <_printf_i+0x30>
 800d642:	6820      	ldr	r0, [r4, #0]
 800d644:	6813      	ldr	r3, [r2, #0]
 800d646:	0605      	lsls	r5, r0, #24
 800d648:	f103 0104 	add.w	r1, r3, #4
 800d64c:	d52a      	bpl.n	800d6a4 <_printf_i+0xa4>
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	6011      	str	r1, [r2, #0]
 800d652:	2b00      	cmp	r3, #0
 800d654:	da03      	bge.n	800d65e <_printf_i+0x5e>
 800d656:	222d      	movs	r2, #45	; 0x2d
 800d658:	425b      	negs	r3, r3
 800d65a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d65e:	486f      	ldr	r0, [pc, #444]	; (800d81c <_printf_i+0x21c>)
 800d660:	220a      	movs	r2, #10
 800d662:	e039      	b.n	800d6d8 <_printf_i+0xd8>
 800d664:	2973      	cmp	r1, #115	; 0x73
 800d666:	f000 809d 	beq.w	800d7a4 <_printf_i+0x1a4>
 800d66a:	d808      	bhi.n	800d67e <_printf_i+0x7e>
 800d66c:	296f      	cmp	r1, #111	; 0x6f
 800d66e:	d020      	beq.n	800d6b2 <_printf_i+0xb2>
 800d670:	2970      	cmp	r1, #112	; 0x70
 800d672:	d1dd      	bne.n	800d630 <_printf_i+0x30>
 800d674:	6823      	ldr	r3, [r4, #0]
 800d676:	f043 0320 	orr.w	r3, r3, #32
 800d67a:	6023      	str	r3, [r4, #0]
 800d67c:	e003      	b.n	800d686 <_printf_i+0x86>
 800d67e:	2975      	cmp	r1, #117	; 0x75
 800d680:	d017      	beq.n	800d6b2 <_printf_i+0xb2>
 800d682:	2978      	cmp	r1, #120	; 0x78
 800d684:	d1d4      	bne.n	800d630 <_printf_i+0x30>
 800d686:	2378      	movs	r3, #120	; 0x78
 800d688:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d68c:	4864      	ldr	r0, [pc, #400]	; (800d820 <_printf_i+0x220>)
 800d68e:	e055      	b.n	800d73c <_printf_i+0x13c>
 800d690:	6813      	ldr	r3, [r2, #0]
 800d692:	1d19      	adds	r1, r3, #4
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	6011      	str	r1, [r2, #0]
 800d698:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d69c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d6a0:	2301      	movs	r3, #1
 800d6a2:	e08c      	b.n	800d7be <_printf_i+0x1be>
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	6011      	str	r1, [r2, #0]
 800d6a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d6ac:	bf18      	it	ne
 800d6ae:	b21b      	sxthne	r3, r3
 800d6b0:	e7cf      	b.n	800d652 <_printf_i+0x52>
 800d6b2:	6813      	ldr	r3, [r2, #0]
 800d6b4:	6825      	ldr	r5, [r4, #0]
 800d6b6:	1d18      	adds	r0, r3, #4
 800d6b8:	6010      	str	r0, [r2, #0]
 800d6ba:	0628      	lsls	r0, r5, #24
 800d6bc:	d501      	bpl.n	800d6c2 <_printf_i+0xc2>
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	e002      	b.n	800d6c8 <_printf_i+0xc8>
 800d6c2:	0668      	lsls	r0, r5, #25
 800d6c4:	d5fb      	bpl.n	800d6be <_printf_i+0xbe>
 800d6c6:	881b      	ldrh	r3, [r3, #0]
 800d6c8:	4854      	ldr	r0, [pc, #336]	; (800d81c <_printf_i+0x21c>)
 800d6ca:	296f      	cmp	r1, #111	; 0x6f
 800d6cc:	bf14      	ite	ne
 800d6ce:	220a      	movne	r2, #10
 800d6d0:	2208      	moveq	r2, #8
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d6d8:	6865      	ldr	r5, [r4, #4]
 800d6da:	60a5      	str	r5, [r4, #8]
 800d6dc:	2d00      	cmp	r5, #0
 800d6de:	f2c0 8095 	blt.w	800d80c <_printf_i+0x20c>
 800d6e2:	6821      	ldr	r1, [r4, #0]
 800d6e4:	f021 0104 	bic.w	r1, r1, #4
 800d6e8:	6021      	str	r1, [r4, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d13d      	bne.n	800d76a <_printf_i+0x16a>
 800d6ee:	2d00      	cmp	r5, #0
 800d6f0:	f040 808e 	bne.w	800d810 <_printf_i+0x210>
 800d6f4:	4665      	mov	r5, ip
 800d6f6:	2a08      	cmp	r2, #8
 800d6f8:	d10b      	bne.n	800d712 <_printf_i+0x112>
 800d6fa:	6823      	ldr	r3, [r4, #0]
 800d6fc:	07db      	lsls	r3, r3, #31
 800d6fe:	d508      	bpl.n	800d712 <_printf_i+0x112>
 800d700:	6923      	ldr	r3, [r4, #16]
 800d702:	6862      	ldr	r2, [r4, #4]
 800d704:	429a      	cmp	r2, r3
 800d706:	bfde      	ittt	le
 800d708:	2330      	movle	r3, #48	; 0x30
 800d70a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d70e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800d712:	ebac 0305 	sub.w	r3, ip, r5
 800d716:	6123      	str	r3, [r4, #16]
 800d718:	f8cd 8000 	str.w	r8, [sp]
 800d71c:	463b      	mov	r3, r7
 800d71e:	aa03      	add	r2, sp, #12
 800d720:	4621      	mov	r1, r4
 800d722:	4630      	mov	r0, r6
 800d724:	f7ff fef6 	bl	800d514 <_printf_common>
 800d728:	3001      	adds	r0, #1
 800d72a:	d14d      	bne.n	800d7c8 <_printf_i+0x1c8>
 800d72c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d730:	b005      	add	sp, #20
 800d732:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d736:	4839      	ldr	r0, [pc, #228]	; (800d81c <_printf_i+0x21c>)
 800d738:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d73c:	6813      	ldr	r3, [r2, #0]
 800d73e:	6821      	ldr	r1, [r4, #0]
 800d740:	1d1d      	adds	r5, r3, #4
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	6015      	str	r5, [r2, #0]
 800d746:	060a      	lsls	r2, r1, #24
 800d748:	d50b      	bpl.n	800d762 <_printf_i+0x162>
 800d74a:	07ca      	lsls	r2, r1, #31
 800d74c:	bf44      	itt	mi
 800d74e:	f041 0120 	orrmi.w	r1, r1, #32
 800d752:	6021      	strmi	r1, [r4, #0]
 800d754:	b91b      	cbnz	r3, 800d75e <_printf_i+0x15e>
 800d756:	6822      	ldr	r2, [r4, #0]
 800d758:	f022 0220 	bic.w	r2, r2, #32
 800d75c:	6022      	str	r2, [r4, #0]
 800d75e:	2210      	movs	r2, #16
 800d760:	e7b7      	b.n	800d6d2 <_printf_i+0xd2>
 800d762:	064d      	lsls	r5, r1, #25
 800d764:	bf48      	it	mi
 800d766:	b29b      	uxthmi	r3, r3
 800d768:	e7ef      	b.n	800d74a <_printf_i+0x14a>
 800d76a:	4665      	mov	r5, ip
 800d76c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d770:	fb02 3311 	mls	r3, r2, r1, r3
 800d774:	5cc3      	ldrb	r3, [r0, r3]
 800d776:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d77a:	460b      	mov	r3, r1
 800d77c:	2900      	cmp	r1, #0
 800d77e:	d1f5      	bne.n	800d76c <_printf_i+0x16c>
 800d780:	e7b9      	b.n	800d6f6 <_printf_i+0xf6>
 800d782:	6813      	ldr	r3, [r2, #0]
 800d784:	6825      	ldr	r5, [r4, #0]
 800d786:	6961      	ldr	r1, [r4, #20]
 800d788:	1d18      	adds	r0, r3, #4
 800d78a:	6010      	str	r0, [r2, #0]
 800d78c:	0628      	lsls	r0, r5, #24
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	d501      	bpl.n	800d796 <_printf_i+0x196>
 800d792:	6019      	str	r1, [r3, #0]
 800d794:	e002      	b.n	800d79c <_printf_i+0x19c>
 800d796:	066a      	lsls	r2, r5, #25
 800d798:	d5fb      	bpl.n	800d792 <_printf_i+0x192>
 800d79a:	8019      	strh	r1, [r3, #0]
 800d79c:	2300      	movs	r3, #0
 800d79e:	6123      	str	r3, [r4, #16]
 800d7a0:	4665      	mov	r5, ip
 800d7a2:	e7b9      	b.n	800d718 <_printf_i+0x118>
 800d7a4:	6813      	ldr	r3, [r2, #0]
 800d7a6:	1d19      	adds	r1, r3, #4
 800d7a8:	6011      	str	r1, [r2, #0]
 800d7aa:	681d      	ldr	r5, [r3, #0]
 800d7ac:	6862      	ldr	r2, [r4, #4]
 800d7ae:	2100      	movs	r1, #0
 800d7b0:	4628      	mov	r0, r5
 800d7b2:	f7f2 fd15 	bl	80001e0 <memchr>
 800d7b6:	b108      	cbz	r0, 800d7bc <_printf_i+0x1bc>
 800d7b8:	1b40      	subs	r0, r0, r5
 800d7ba:	6060      	str	r0, [r4, #4]
 800d7bc:	6863      	ldr	r3, [r4, #4]
 800d7be:	6123      	str	r3, [r4, #16]
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d7c6:	e7a7      	b.n	800d718 <_printf_i+0x118>
 800d7c8:	6923      	ldr	r3, [r4, #16]
 800d7ca:	462a      	mov	r2, r5
 800d7cc:	4639      	mov	r1, r7
 800d7ce:	4630      	mov	r0, r6
 800d7d0:	47c0      	blx	r8
 800d7d2:	3001      	adds	r0, #1
 800d7d4:	d0aa      	beq.n	800d72c <_printf_i+0x12c>
 800d7d6:	6823      	ldr	r3, [r4, #0]
 800d7d8:	079b      	lsls	r3, r3, #30
 800d7da:	d413      	bmi.n	800d804 <_printf_i+0x204>
 800d7dc:	68e0      	ldr	r0, [r4, #12]
 800d7de:	9b03      	ldr	r3, [sp, #12]
 800d7e0:	4298      	cmp	r0, r3
 800d7e2:	bfb8      	it	lt
 800d7e4:	4618      	movlt	r0, r3
 800d7e6:	e7a3      	b.n	800d730 <_printf_i+0x130>
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	464a      	mov	r2, r9
 800d7ec:	4639      	mov	r1, r7
 800d7ee:	4630      	mov	r0, r6
 800d7f0:	47c0      	blx	r8
 800d7f2:	3001      	adds	r0, #1
 800d7f4:	d09a      	beq.n	800d72c <_printf_i+0x12c>
 800d7f6:	3501      	adds	r5, #1
 800d7f8:	68e3      	ldr	r3, [r4, #12]
 800d7fa:	9a03      	ldr	r2, [sp, #12]
 800d7fc:	1a9b      	subs	r3, r3, r2
 800d7fe:	42ab      	cmp	r3, r5
 800d800:	dcf2      	bgt.n	800d7e8 <_printf_i+0x1e8>
 800d802:	e7eb      	b.n	800d7dc <_printf_i+0x1dc>
 800d804:	2500      	movs	r5, #0
 800d806:	f104 0919 	add.w	r9, r4, #25
 800d80a:	e7f5      	b.n	800d7f8 <_printf_i+0x1f8>
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1ac      	bne.n	800d76a <_printf_i+0x16a>
 800d810:	7803      	ldrb	r3, [r0, #0]
 800d812:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d816:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d81a:	e76c      	b.n	800d6f6 <_printf_i+0xf6>
 800d81c:	0800f065 	.word	0x0800f065
 800d820:	0800f076 	.word	0x0800f076

0800d824 <memcpy>:
 800d824:	b510      	push	{r4, lr}
 800d826:	1e43      	subs	r3, r0, #1
 800d828:	440a      	add	r2, r1
 800d82a:	4291      	cmp	r1, r2
 800d82c:	d100      	bne.n	800d830 <memcpy+0xc>
 800d82e:	bd10      	pop	{r4, pc}
 800d830:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d834:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d838:	e7f7      	b.n	800d82a <memcpy+0x6>

0800d83a <memmove>:
 800d83a:	4288      	cmp	r0, r1
 800d83c:	b510      	push	{r4, lr}
 800d83e:	eb01 0302 	add.w	r3, r1, r2
 800d842:	d807      	bhi.n	800d854 <memmove+0x1a>
 800d844:	1e42      	subs	r2, r0, #1
 800d846:	4299      	cmp	r1, r3
 800d848:	d00a      	beq.n	800d860 <memmove+0x26>
 800d84a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d84e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d852:	e7f8      	b.n	800d846 <memmove+0xc>
 800d854:	4283      	cmp	r3, r0
 800d856:	d9f5      	bls.n	800d844 <memmove+0xa>
 800d858:	1881      	adds	r1, r0, r2
 800d85a:	1ad2      	subs	r2, r2, r3
 800d85c:	42d3      	cmn	r3, r2
 800d85e:	d100      	bne.n	800d862 <memmove+0x28>
 800d860:	bd10      	pop	{r4, pc}
 800d862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d866:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d86a:	e7f7      	b.n	800d85c <memmove+0x22>

0800d86c <_free_r>:
 800d86c:	b538      	push	{r3, r4, r5, lr}
 800d86e:	4605      	mov	r5, r0
 800d870:	2900      	cmp	r1, #0
 800d872:	d045      	beq.n	800d900 <_free_r+0x94>
 800d874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d878:	1f0c      	subs	r4, r1, #4
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	bfb8      	it	lt
 800d87e:	18e4      	addlt	r4, r4, r3
 800d880:	f000 f8d2 	bl	800da28 <__malloc_lock>
 800d884:	4a1f      	ldr	r2, [pc, #124]	; (800d904 <_free_r+0x98>)
 800d886:	6813      	ldr	r3, [r2, #0]
 800d888:	4610      	mov	r0, r2
 800d88a:	b933      	cbnz	r3, 800d89a <_free_r+0x2e>
 800d88c:	6063      	str	r3, [r4, #4]
 800d88e:	6014      	str	r4, [r2, #0]
 800d890:	4628      	mov	r0, r5
 800d892:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d896:	f000 b8c8 	b.w	800da2a <__malloc_unlock>
 800d89a:	42a3      	cmp	r3, r4
 800d89c:	d90c      	bls.n	800d8b8 <_free_r+0x4c>
 800d89e:	6821      	ldr	r1, [r4, #0]
 800d8a0:	1862      	adds	r2, r4, r1
 800d8a2:	4293      	cmp	r3, r2
 800d8a4:	bf04      	itt	eq
 800d8a6:	681a      	ldreq	r2, [r3, #0]
 800d8a8:	685b      	ldreq	r3, [r3, #4]
 800d8aa:	6063      	str	r3, [r4, #4]
 800d8ac:	bf04      	itt	eq
 800d8ae:	1852      	addeq	r2, r2, r1
 800d8b0:	6022      	streq	r2, [r4, #0]
 800d8b2:	6004      	str	r4, [r0, #0]
 800d8b4:	e7ec      	b.n	800d890 <_free_r+0x24>
 800d8b6:	4613      	mov	r3, r2
 800d8b8:	685a      	ldr	r2, [r3, #4]
 800d8ba:	b10a      	cbz	r2, 800d8c0 <_free_r+0x54>
 800d8bc:	42a2      	cmp	r2, r4
 800d8be:	d9fa      	bls.n	800d8b6 <_free_r+0x4a>
 800d8c0:	6819      	ldr	r1, [r3, #0]
 800d8c2:	1858      	adds	r0, r3, r1
 800d8c4:	42a0      	cmp	r0, r4
 800d8c6:	d10b      	bne.n	800d8e0 <_free_r+0x74>
 800d8c8:	6820      	ldr	r0, [r4, #0]
 800d8ca:	4401      	add	r1, r0
 800d8cc:	1858      	adds	r0, r3, r1
 800d8ce:	4282      	cmp	r2, r0
 800d8d0:	6019      	str	r1, [r3, #0]
 800d8d2:	d1dd      	bne.n	800d890 <_free_r+0x24>
 800d8d4:	6810      	ldr	r0, [r2, #0]
 800d8d6:	6852      	ldr	r2, [r2, #4]
 800d8d8:	605a      	str	r2, [r3, #4]
 800d8da:	4401      	add	r1, r0
 800d8dc:	6019      	str	r1, [r3, #0]
 800d8de:	e7d7      	b.n	800d890 <_free_r+0x24>
 800d8e0:	d902      	bls.n	800d8e8 <_free_r+0x7c>
 800d8e2:	230c      	movs	r3, #12
 800d8e4:	602b      	str	r3, [r5, #0]
 800d8e6:	e7d3      	b.n	800d890 <_free_r+0x24>
 800d8e8:	6820      	ldr	r0, [r4, #0]
 800d8ea:	1821      	adds	r1, r4, r0
 800d8ec:	428a      	cmp	r2, r1
 800d8ee:	bf04      	itt	eq
 800d8f0:	6811      	ldreq	r1, [r2, #0]
 800d8f2:	6852      	ldreq	r2, [r2, #4]
 800d8f4:	6062      	str	r2, [r4, #4]
 800d8f6:	bf04      	itt	eq
 800d8f8:	1809      	addeq	r1, r1, r0
 800d8fa:	6021      	streq	r1, [r4, #0]
 800d8fc:	605c      	str	r4, [r3, #4]
 800d8fe:	e7c7      	b.n	800d890 <_free_r+0x24>
 800d900:	bd38      	pop	{r3, r4, r5, pc}
 800d902:	bf00      	nop
 800d904:	20000188 	.word	0x20000188

0800d908 <_malloc_r>:
 800d908:	b570      	push	{r4, r5, r6, lr}
 800d90a:	1ccd      	adds	r5, r1, #3
 800d90c:	f025 0503 	bic.w	r5, r5, #3
 800d910:	3508      	adds	r5, #8
 800d912:	2d0c      	cmp	r5, #12
 800d914:	bf38      	it	cc
 800d916:	250c      	movcc	r5, #12
 800d918:	2d00      	cmp	r5, #0
 800d91a:	4606      	mov	r6, r0
 800d91c:	db01      	blt.n	800d922 <_malloc_r+0x1a>
 800d91e:	42a9      	cmp	r1, r5
 800d920:	d903      	bls.n	800d92a <_malloc_r+0x22>
 800d922:	230c      	movs	r3, #12
 800d924:	6033      	str	r3, [r6, #0]
 800d926:	2000      	movs	r0, #0
 800d928:	bd70      	pop	{r4, r5, r6, pc}
 800d92a:	f000 f87d 	bl	800da28 <__malloc_lock>
 800d92e:	4a21      	ldr	r2, [pc, #132]	; (800d9b4 <_malloc_r+0xac>)
 800d930:	6814      	ldr	r4, [r2, #0]
 800d932:	4621      	mov	r1, r4
 800d934:	b991      	cbnz	r1, 800d95c <_malloc_r+0x54>
 800d936:	4c20      	ldr	r4, [pc, #128]	; (800d9b8 <_malloc_r+0xb0>)
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	b91b      	cbnz	r3, 800d944 <_malloc_r+0x3c>
 800d93c:	4630      	mov	r0, r6
 800d93e:	f000 f863 	bl	800da08 <_sbrk_r>
 800d942:	6020      	str	r0, [r4, #0]
 800d944:	4629      	mov	r1, r5
 800d946:	4630      	mov	r0, r6
 800d948:	f000 f85e 	bl	800da08 <_sbrk_r>
 800d94c:	1c43      	adds	r3, r0, #1
 800d94e:	d124      	bne.n	800d99a <_malloc_r+0x92>
 800d950:	230c      	movs	r3, #12
 800d952:	6033      	str	r3, [r6, #0]
 800d954:	4630      	mov	r0, r6
 800d956:	f000 f868 	bl	800da2a <__malloc_unlock>
 800d95a:	e7e4      	b.n	800d926 <_malloc_r+0x1e>
 800d95c:	680b      	ldr	r3, [r1, #0]
 800d95e:	1b5b      	subs	r3, r3, r5
 800d960:	d418      	bmi.n	800d994 <_malloc_r+0x8c>
 800d962:	2b0b      	cmp	r3, #11
 800d964:	d90f      	bls.n	800d986 <_malloc_r+0x7e>
 800d966:	600b      	str	r3, [r1, #0]
 800d968:	50cd      	str	r5, [r1, r3]
 800d96a:	18cc      	adds	r4, r1, r3
 800d96c:	4630      	mov	r0, r6
 800d96e:	f000 f85c 	bl	800da2a <__malloc_unlock>
 800d972:	f104 000b 	add.w	r0, r4, #11
 800d976:	1d23      	adds	r3, r4, #4
 800d978:	f020 0007 	bic.w	r0, r0, #7
 800d97c:	1ac3      	subs	r3, r0, r3
 800d97e:	d0d3      	beq.n	800d928 <_malloc_r+0x20>
 800d980:	425a      	negs	r2, r3
 800d982:	50e2      	str	r2, [r4, r3]
 800d984:	e7d0      	b.n	800d928 <_malloc_r+0x20>
 800d986:	428c      	cmp	r4, r1
 800d988:	684b      	ldr	r3, [r1, #4]
 800d98a:	bf16      	itet	ne
 800d98c:	6063      	strne	r3, [r4, #4]
 800d98e:	6013      	streq	r3, [r2, #0]
 800d990:	460c      	movne	r4, r1
 800d992:	e7eb      	b.n	800d96c <_malloc_r+0x64>
 800d994:	460c      	mov	r4, r1
 800d996:	6849      	ldr	r1, [r1, #4]
 800d998:	e7cc      	b.n	800d934 <_malloc_r+0x2c>
 800d99a:	1cc4      	adds	r4, r0, #3
 800d99c:	f024 0403 	bic.w	r4, r4, #3
 800d9a0:	42a0      	cmp	r0, r4
 800d9a2:	d005      	beq.n	800d9b0 <_malloc_r+0xa8>
 800d9a4:	1a21      	subs	r1, r4, r0
 800d9a6:	4630      	mov	r0, r6
 800d9a8:	f000 f82e 	bl	800da08 <_sbrk_r>
 800d9ac:	3001      	adds	r0, #1
 800d9ae:	d0cf      	beq.n	800d950 <_malloc_r+0x48>
 800d9b0:	6025      	str	r5, [r4, #0]
 800d9b2:	e7db      	b.n	800d96c <_malloc_r+0x64>
 800d9b4:	20000188 	.word	0x20000188
 800d9b8:	2000018c 	.word	0x2000018c

0800d9bc <_realloc_r>:
 800d9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9be:	4607      	mov	r7, r0
 800d9c0:	4614      	mov	r4, r2
 800d9c2:	460e      	mov	r6, r1
 800d9c4:	b921      	cbnz	r1, 800d9d0 <_realloc_r+0x14>
 800d9c6:	4611      	mov	r1, r2
 800d9c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d9cc:	f7ff bf9c 	b.w	800d908 <_malloc_r>
 800d9d0:	b922      	cbnz	r2, 800d9dc <_realloc_r+0x20>
 800d9d2:	f7ff ff4b 	bl	800d86c <_free_r>
 800d9d6:	4625      	mov	r5, r4
 800d9d8:	4628      	mov	r0, r5
 800d9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d9dc:	f000 f826 	bl	800da2c <_malloc_usable_size_r>
 800d9e0:	42a0      	cmp	r0, r4
 800d9e2:	d20f      	bcs.n	800da04 <_realloc_r+0x48>
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	4638      	mov	r0, r7
 800d9e8:	f7ff ff8e 	bl	800d908 <_malloc_r>
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d0f2      	beq.n	800d9d8 <_realloc_r+0x1c>
 800d9f2:	4631      	mov	r1, r6
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	f7ff ff15 	bl	800d824 <memcpy>
 800d9fa:	4631      	mov	r1, r6
 800d9fc:	4638      	mov	r0, r7
 800d9fe:	f7ff ff35 	bl	800d86c <_free_r>
 800da02:	e7e9      	b.n	800d9d8 <_realloc_r+0x1c>
 800da04:	4635      	mov	r5, r6
 800da06:	e7e7      	b.n	800d9d8 <_realloc_r+0x1c>

0800da08 <_sbrk_r>:
 800da08:	b538      	push	{r3, r4, r5, lr}
 800da0a:	4c06      	ldr	r4, [pc, #24]	; (800da24 <_sbrk_r+0x1c>)
 800da0c:	2300      	movs	r3, #0
 800da0e:	4605      	mov	r5, r0
 800da10:	4608      	mov	r0, r1
 800da12:	6023      	str	r3, [r4, #0]
 800da14:	f7ff fb2a 	bl	800d06c <_sbrk>
 800da18:	1c43      	adds	r3, r0, #1
 800da1a:	d102      	bne.n	800da22 <_sbrk_r+0x1a>
 800da1c:	6823      	ldr	r3, [r4, #0]
 800da1e:	b103      	cbz	r3, 800da22 <_sbrk_r+0x1a>
 800da20:	602b      	str	r3, [r5, #0]
 800da22:	bd38      	pop	{r3, r4, r5, pc}
 800da24:	20002544 	.word	0x20002544

0800da28 <__malloc_lock>:
 800da28:	4770      	bx	lr

0800da2a <__malloc_unlock>:
 800da2a:	4770      	bx	lr

0800da2c <_malloc_usable_size_r>:
 800da2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da30:	1f18      	subs	r0, r3, #4
 800da32:	2b00      	cmp	r3, #0
 800da34:	bfbc      	itt	lt
 800da36:	580b      	ldrlt	r3, [r1, r0]
 800da38:	18c0      	addlt	r0, r0, r3
 800da3a:	4770      	bx	lr
 800da3c:	0000      	movs	r0, r0
	...

0800da40 <cos>:
 800da40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800da42:	ec51 0b10 	vmov	r0, r1, d0
 800da46:	4a1e      	ldr	r2, [pc, #120]	; (800dac0 <cos+0x80>)
 800da48:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800da4c:	4293      	cmp	r3, r2
 800da4e:	dc06      	bgt.n	800da5e <cos+0x1e>
 800da50:	ed9f 1b19 	vldr	d1, [pc, #100]	; 800dab8 <cos+0x78>
 800da54:	f000 fb80 	bl	800e158 <__kernel_cos>
 800da58:	ec51 0b10 	vmov	r0, r1, d0
 800da5c:	e007      	b.n	800da6e <cos+0x2e>
 800da5e:	4a19      	ldr	r2, [pc, #100]	; (800dac4 <cos+0x84>)
 800da60:	4293      	cmp	r3, r2
 800da62:	dd09      	ble.n	800da78 <cos+0x38>
 800da64:	ee10 2a10 	vmov	r2, s0
 800da68:	460b      	mov	r3, r1
 800da6a:	f7f2 fc0d 	bl	8000288 <__aeabi_dsub>
 800da6e:	ec41 0b10 	vmov	d0, r0, r1
 800da72:	b005      	add	sp, #20
 800da74:	f85d fb04 	ldr.w	pc, [sp], #4
 800da78:	4668      	mov	r0, sp
 800da7a:	f000 f8c9 	bl	800dc10 <__ieee754_rem_pio2>
 800da7e:	f000 0003 	and.w	r0, r0, #3
 800da82:	2801      	cmp	r0, #1
 800da84:	ed9d 1b02 	vldr	d1, [sp, #8]
 800da88:	ed9d 0b00 	vldr	d0, [sp]
 800da8c:	d007      	beq.n	800da9e <cos+0x5e>
 800da8e:	2802      	cmp	r0, #2
 800da90:	d00e      	beq.n	800dab0 <cos+0x70>
 800da92:	2800      	cmp	r0, #0
 800da94:	d0de      	beq.n	800da54 <cos+0x14>
 800da96:	2001      	movs	r0, #1
 800da98:	f000 ff66 	bl	800e968 <__kernel_sin>
 800da9c:	e7dc      	b.n	800da58 <cos+0x18>
 800da9e:	f000 ff63 	bl	800e968 <__kernel_sin>
 800daa2:	ec53 2b10 	vmov	r2, r3, d0
 800daa6:	ee10 0a10 	vmov	r0, s0
 800daaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800daae:	e7de      	b.n	800da6e <cos+0x2e>
 800dab0:	f000 fb52 	bl	800e158 <__kernel_cos>
 800dab4:	e7f5      	b.n	800daa2 <cos+0x62>
 800dab6:	bf00      	nop
	...
 800dac0:	3fe921fb 	.word	0x3fe921fb
 800dac4:	7fefffff 	.word	0x7fefffff

0800dac8 <sin>:
 800dac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800daca:	ec51 0b10 	vmov	r0, r1, d0
 800dace:	4a20      	ldr	r2, [pc, #128]	; (800db50 <sin+0x88>)
 800dad0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dad4:	4293      	cmp	r3, r2
 800dad6:	dc07      	bgt.n	800dae8 <sin+0x20>
 800dad8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800db48 <sin+0x80>
 800dadc:	2000      	movs	r0, #0
 800dade:	f000 ff43 	bl	800e968 <__kernel_sin>
 800dae2:	ec51 0b10 	vmov	r0, r1, d0
 800dae6:	e007      	b.n	800daf8 <sin+0x30>
 800dae8:	4a1a      	ldr	r2, [pc, #104]	; (800db54 <sin+0x8c>)
 800daea:	4293      	cmp	r3, r2
 800daec:	dd09      	ble.n	800db02 <sin+0x3a>
 800daee:	ee10 2a10 	vmov	r2, s0
 800daf2:	460b      	mov	r3, r1
 800daf4:	f7f2 fbc8 	bl	8000288 <__aeabi_dsub>
 800daf8:	ec41 0b10 	vmov	d0, r0, r1
 800dafc:	b005      	add	sp, #20
 800dafe:	f85d fb04 	ldr.w	pc, [sp], #4
 800db02:	4668      	mov	r0, sp
 800db04:	f000 f884 	bl	800dc10 <__ieee754_rem_pio2>
 800db08:	f000 0003 	and.w	r0, r0, #3
 800db0c:	2801      	cmp	r0, #1
 800db0e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800db12:	ed9d 0b00 	vldr	d0, [sp]
 800db16:	d004      	beq.n	800db22 <sin+0x5a>
 800db18:	2802      	cmp	r0, #2
 800db1a:	d005      	beq.n	800db28 <sin+0x60>
 800db1c:	b970      	cbnz	r0, 800db3c <sin+0x74>
 800db1e:	2001      	movs	r0, #1
 800db20:	e7dd      	b.n	800dade <sin+0x16>
 800db22:	f000 fb19 	bl	800e158 <__kernel_cos>
 800db26:	e7dc      	b.n	800dae2 <sin+0x1a>
 800db28:	2001      	movs	r0, #1
 800db2a:	f000 ff1d 	bl	800e968 <__kernel_sin>
 800db2e:	ec53 2b10 	vmov	r2, r3, d0
 800db32:	ee10 0a10 	vmov	r0, s0
 800db36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800db3a:	e7dd      	b.n	800daf8 <sin+0x30>
 800db3c:	f000 fb0c 	bl	800e158 <__kernel_cos>
 800db40:	e7f5      	b.n	800db2e <sin+0x66>
 800db42:	bf00      	nop
 800db44:	f3af 8000 	nop.w
	...
 800db50:	3fe921fb 	.word	0x3fe921fb
 800db54:	7fefffff 	.word	0x7fefffff

0800db58 <sqrt>:
 800db58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800db5c:	ed2d 8b02 	vpush	{d8}
 800db60:	b08b      	sub	sp, #44	; 0x2c
 800db62:	ec55 4b10 	vmov	r4, r5, d0
 800db66:	f000 fa45 	bl	800dff4 <__ieee754_sqrt>
 800db6a:	4b26      	ldr	r3, [pc, #152]	; (800dc04 <sqrt+0xac>)
 800db6c:	eeb0 8a40 	vmov.f32	s16, s0
 800db70:	eef0 8a60 	vmov.f32	s17, s1
 800db74:	f993 6000 	ldrsb.w	r6, [r3]
 800db78:	1c73      	adds	r3, r6, #1
 800db7a:	d02a      	beq.n	800dbd2 <sqrt+0x7a>
 800db7c:	4622      	mov	r2, r4
 800db7e:	462b      	mov	r3, r5
 800db80:	4620      	mov	r0, r4
 800db82:	4629      	mov	r1, r5
 800db84:	f7f2 ffd2 	bl	8000b2c <__aeabi_dcmpun>
 800db88:	4607      	mov	r7, r0
 800db8a:	bb10      	cbnz	r0, 800dbd2 <sqrt+0x7a>
 800db8c:	f04f 0800 	mov.w	r8, #0
 800db90:	f04f 0900 	mov.w	r9, #0
 800db94:	4642      	mov	r2, r8
 800db96:	464b      	mov	r3, r9
 800db98:	4620      	mov	r0, r4
 800db9a:	4629      	mov	r1, r5
 800db9c:	f7f2 ff9e 	bl	8000adc <__aeabi_dcmplt>
 800dba0:	b1b8      	cbz	r0, 800dbd2 <sqrt+0x7a>
 800dba2:	2301      	movs	r3, #1
 800dba4:	9300      	str	r3, [sp, #0]
 800dba6:	4b18      	ldr	r3, [pc, #96]	; (800dc08 <sqrt+0xb0>)
 800dba8:	9301      	str	r3, [sp, #4]
 800dbaa:	9708      	str	r7, [sp, #32]
 800dbac:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800dbb0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800dbb4:	b9b6      	cbnz	r6, 800dbe4 <sqrt+0x8c>
 800dbb6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800dbba:	4668      	mov	r0, sp
 800dbbc:	f001 f81c 	bl	800ebf8 <matherr>
 800dbc0:	b1d0      	cbz	r0, 800dbf8 <sqrt+0xa0>
 800dbc2:	9b08      	ldr	r3, [sp, #32]
 800dbc4:	b11b      	cbz	r3, 800dbce <sqrt+0x76>
 800dbc6:	f7ff fabd 	bl	800d144 <__errno>
 800dbca:	9b08      	ldr	r3, [sp, #32]
 800dbcc:	6003      	str	r3, [r0, #0]
 800dbce:	ed9d 8b06 	vldr	d8, [sp, #24]
 800dbd2:	eeb0 0a48 	vmov.f32	s0, s16
 800dbd6:	eef0 0a68 	vmov.f32	s1, s17
 800dbda:	b00b      	add	sp, #44	; 0x2c
 800dbdc:	ecbd 8b02 	vpop	{d8}
 800dbe0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dbe4:	4642      	mov	r2, r8
 800dbe6:	464b      	mov	r3, r9
 800dbe8:	4640      	mov	r0, r8
 800dbea:	4649      	mov	r1, r9
 800dbec:	f7f2 fe2e 	bl	800084c <__aeabi_ddiv>
 800dbf0:	2e02      	cmp	r6, #2
 800dbf2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dbf6:	d1e0      	bne.n	800dbba <sqrt+0x62>
 800dbf8:	f7ff faa4 	bl	800d144 <__errno>
 800dbfc:	2321      	movs	r3, #33	; 0x21
 800dbfe:	6003      	str	r3, [r0, #0]
 800dc00:	e7df      	b.n	800dbc2 <sqrt+0x6a>
 800dc02:	bf00      	nop
 800dc04:	200000b4 	.word	0x200000b4
 800dc08:	0800f087 	.word	0x0800f087
 800dc0c:	00000000 	.word	0x00000000

0800dc10 <__ieee754_rem_pio2>:
 800dc10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc14:	ec57 6b10 	vmov	r6, r7, d0
 800dc18:	4bc3      	ldr	r3, [pc, #780]	; (800df28 <__ieee754_rem_pio2+0x318>)
 800dc1a:	b08d      	sub	sp, #52	; 0x34
 800dc1c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800dc20:	4598      	cmp	r8, r3
 800dc22:	4604      	mov	r4, r0
 800dc24:	9704      	str	r7, [sp, #16]
 800dc26:	dc07      	bgt.n	800dc38 <__ieee754_rem_pio2+0x28>
 800dc28:	2200      	movs	r2, #0
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	ed84 0b00 	vstr	d0, [r4]
 800dc30:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800dc34:	2500      	movs	r5, #0
 800dc36:	e027      	b.n	800dc88 <__ieee754_rem_pio2+0x78>
 800dc38:	4bbc      	ldr	r3, [pc, #752]	; (800df2c <__ieee754_rem_pio2+0x31c>)
 800dc3a:	4598      	cmp	r8, r3
 800dc3c:	dc75      	bgt.n	800dd2a <__ieee754_rem_pio2+0x11a>
 800dc3e:	9b04      	ldr	r3, [sp, #16]
 800dc40:	4dbb      	ldr	r5, [pc, #748]	; (800df30 <__ieee754_rem_pio2+0x320>)
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	ee10 0a10 	vmov	r0, s0
 800dc48:	a3a9      	add	r3, pc, #676	; (adr r3, 800def0 <__ieee754_rem_pio2+0x2e0>)
 800dc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc4e:	4639      	mov	r1, r7
 800dc50:	dd36      	ble.n	800dcc0 <__ieee754_rem_pio2+0xb0>
 800dc52:	f7f2 fb19 	bl	8000288 <__aeabi_dsub>
 800dc56:	45a8      	cmp	r8, r5
 800dc58:	4606      	mov	r6, r0
 800dc5a:	460f      	mov	r7, r1
 800dc5c:	d018      	beq.n	800dc90 <__ieee754_rem_pio2+0x80>
 800dc5e:	a3a6      	add	r3, pc, #664	; (adr r3, 800def8 <__ieee754_rem_pio2+0x2e8>)
 800dc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc64:	f7f2 fb10 	bl	8000288 <__aeabi_dsub>
 800dc68:	4602      	mov	r2, r0
 800dc6a:	460b      	mov	r3, r1
 800dc6c:	e9c4 2300 	strd	r2, r3, [r4]
 800dc70:	4630      	mov	r0, r6
 800dc72:	4639      	mov	r1, r7
 800dc74:	f7f2 fb08 	bl	8000288 <__aeabi_dsub>
 800dc78:	a39f      	add	r3, pc, #636	; (adr r3, 800def8 <__ieee754_rem_pio2+0x2e8>)
 800dc7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7e:	f7f2 fb03 	bl	8000288 <__aeabi_dsub>
 800dc82:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dc86:	2501      	movs	r5, #1
 800dc88:	4628      	mov	r0, r5
 800dc8a:	b00d      	add	sp, #52	; 0x34
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc90:	a39b      	add	r3, pc, #620	; (adr r3, 800df00 <__ieee754_rem_pio2+0x2f0>)
 800dc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc96:	f7f2 faf7 	bl	8000288 <__aeabi_dsub>
 800dc9a:	a39b      	add	r3, pc, #620	; (adr r3, 800df08 <__ieee754_rem_pio2+0x2f8>)
 800dc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca0:	4606      	mov	r6, r0
 800dca2:	460f      	mov	r7, r1
 800dca4:	f7f2 faf0 	bl	8000288 <__aeabi_dsub>
 800dca8:	4602      	mov	r2, r0
 800dcaa:	460b      	mov	r3, r1
 800dcac:	e9c4 2300 	strd	r2, r3, [r4]
 800dcb0:	4630      	mov	r0, r6
 800dcb2:	4639      	mov	r1, r7
 800dcb4:	f7f2 fae8 	bl	8000288 <__aeabi_dsub>
 800dcb8:	a393      	add	r3, pc, #588	; (adr r3, 800df08 <__ieee754_rem_pio2+0x2f8>)
 800dcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbe:	e7de      	b.n	800dc7e <__ieee754_rem_pio2+0x6e>
 800dcc0:	f7f2 fae4 	bl	800028c <__adddf3>
 800dcc4:	45a8      	cmp	r8, r5
 800dcc6:	4606      	mov	r6, r0
 800dcc8:	460f      	mov	r7, r1
 800dcca:	d016      	beq.n	800dcfa <__ieee754_rem_pio2+0xea>
 800dccc:	a38a      	add	r3, pc, #552	; (adr r3, 800def8 <__ieee754_rem_pio2+0x2e8>)
 800dcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcd2:	f7f2 fadb 	bl	800028c <__adddf3>
 800dcd6:	4602      	mov	r2, r0
 800dcd8:	460b      	mov	r3, r1
 800dcda:	e9c4 2300 	strd	r2, r3, [r4]
 800dcde:	4630      	mov	r0, r6
 800dce0:	4639      	mov	r1, r7
 800dce2:	f7f2 fad1 	bl	8000288 <__aeabi_dsub>
 800dce6:	a384      	add	r3, pc, #528	; (adr r3, 800def8 <__ieee754_rem_pio2+0x2e8>)
 800dce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcec:	f7f2 face 	bl	800028c <__adddf3>
 800dcf0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800dcf4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dcf8:	e7c6      	b.n	800dc88 <__ieee754_rem_pio2+0x78>
 800dcfa:	a381      	add	r3, pc, #516	; (adr r3, 800df00 <__ieee754_rem_pio2+0x2f0>)
 800dcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd00:	f7f2 fac4 	bl	800028c <__adddf3>
 800dd04:	a380      	add	r3, pc, #512	; (adr r3, 800df08 <__ieee754_rem_pio2+0x2f8>)
 800dd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd0a:	4606      	mov	r6, r0
 800dd0c:	460f      	mov	r7, r1
 800dd0e:	f7f2 fabd 	bl	800028c <__adddf3>
 800dd12:	4602      	mov	r2, r0
 800dd14:	460b      	mov	r3, r1
 800dd16:	e9c4 2300 	strd	r2, r3, [r4]
 800dd1a:	4630      	mov	r0, r6
 800dd1c:	4639      	mov	r1, r7
 800dd1e:	f7f2 fab3 	bl	8000288 <__aeabi_dsub>
 800dd22:	a379      	add	r3, pc, #484	; (adr r3, 800df08 <__ieee754_rem_pio2+0x2f8>)
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	e7e0      	b.n	800dcec <__ieee754_rem_pio2+0xdc>
 800dd2a:	4b82      	ldr	r3, [pc, #520]	; (800df34 <__ieee754_rem_pio2+0x324>)
 800dd2c:	4598      	cmp	r8, r3
 800dd2e:	f300 80d0 	bgt.w	800ded2 <__ieee754_rem_pio2+0x2c2>
 800dd32:	f000 fed3 	bl	800eadc <fabs>
 800dd36:	ec57 6b10 	vmov	r6, r7, d0
 800dd3a:	ee10 0a10 	vmov	r0, s0
 800dd3e:	a374      	add	r3, pc, #464	; (adr r3, 800df10 <__ieee754_rem_pio2+0x300>)
 800dd40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd44:	4639      	mov	r1, r7
 800dd46:	f7f2 fc57 	bl	80005f8 <__aeabi_dmul>
 800dd4a:	2200      	movs	r2, #0
 800dd4c:	4b7a      	ldr	r3, [pc, #488]	; (800df38 <__ieee754_rem_pio2+0x328>)
 800dd4e:	f7f2 fa9d 	bl	800028c <__adddf3>
 800dd52:	f7f2 ff01 	bl	8000b58 <__aeabi_d2iz>
 800dd56:	4605      	mov	r5, r0
 800dd58:	f7f2 fbe4 	bl	8000524 <__aeabi_i2d>
 800dd5c:	a364      	add	r3, pc, #400	; (adr r3, 800def0 <__ieee754_rem_pio2+0x2e0>)
 800dd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dd66:	f7f2 fc47 	bl	80005f8 <__aeabi_dmul>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4630      	mov	r0, r6
 800dd70:	4639      	mov	r1, r7
 800dd72:	f7f2 fa89 	bl	8000288 <__aeabi_dsub>
 800dd76:	a360      	add	r3, pc, #384	; (adr r3, 800def8 <__ieee754_rem_pio2+0x2e8>)
 800dd78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd7c:	4682      	mov	sl, r0
 800dd7e:	468b      	mov	fp, r1
 800dd80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dd84:	f7f2 fc38 	bl	80005f8 <__aeabi_dmul>
 800dd88:	2d1f      	cmp	r5, #31
 800dd8a:	4606      	mov	r6, r0
 800dd8c:	460f      	mov	r7, r1
 800dd8e:	dc0c      	bgt.n	800ddaa <__ieee754_rem_pio2+0x19a>
 800dd90:	1e6a      	subs	r2, r5, #1
 800dd92:	4b6a      	ldr	r3, [pc, #424]	; (800df3c <__ieee754_rem_pio2+0x32c>)
 800dd94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd98:	4543      	cmp	r3, r8
 800dd9a:	d006      	beq.n	800ddaa <__ieee754_rem_pio2+0x19a>
 800dd9c:	4632      	mov	r2, r6
 800dd9e:	463b      	mov	r3, r7
 800dda0:	4650      	mov	r0, sl
 800dda2:	4659      	mov	r1, fp
 800dda4:	f7f2 fa70 	bl	8000288 <__aeabi_dsub>
 800dda8:	e00e      	b.n	800ddc8 <__ieee754_rem_pio2+0x1b8>
 800ddaa:	4632      	mov	r2, r6
 800ddac:	463b      	mov	r3, r7
 800ddae:	4650      	mov	r0, sl
 800ddb0:	4659      	mov	r1, fp
 800ddb2:	f7f2 fa69 	bl	8000288 <__aeabi_dsub>
 800ddb6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ddba:	9305      	str	r3, [sp, #20]
 800ddbc:	9a05      	ldr	r2, [sp, #20]
 800ddbe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ddc2:	1ad3      	subs	r3, r2, r3
 800ddc4:	2b10      	cmp	r3, #16
 800ddc6:	dc02      	bgt.n	800ddce <__ieee754_rem_pio2+0x1be>
 800ddc8:	e9c4 0100 	strd	r0, r1, [r4]
 800ddcc:	e039      	b.n	800de42 <__ieee754_rem_pio2+0x232>
 800ddce:	a34c      	add	r3, pc, #304	; (adr r3, 800df00 <__ieee754_rem_pio2+0x2f0>)
 800ddd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ddd8:	f7f2 fc0e 	bl	80005f8 <__aeabi_dmul>
 800dddc:	4606      	mov	r6, r0
 800ddde:	460f      	mov	r7, r1
 800dde0:	4602      	mov	r2, r0
 800dde2:	460b      	mov	r3, r1
 800dde4:	4650      	mov	r0, sl
 800dde6:	4659      	mov	r1, fp
 800dde8:	f7f2 fa4e 	bl	8000288 <__aeabi_dsub>
 800ddec:	4602      	mov	r2, r0
 800ddee:	460b      	mov	r3, r1
 800ddf0:	4680      	mov	r8, r0
 800ddf2:	4689      	mov	r9, r1
 800ddf4:	4650      	mov	r0, sl
 800ddf6:	4659      	mov	r1, fp
 800ddf8:	f7f2 fa46 	bl	8000288 <__aeabi_dsub>
 800ddfc:	4632      	mov	r2, r6
 800ddfe:	463b      	mov	r3, r7
 800de00:	f7f2 fa42 	bl	8000288 <__aeabi_dsub>
 800de04:	a340      	add	r3, pc, #256	; (adr r3, 800df08 <__ieee754_rem_pio2+0x2f8>)
 800de06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0a:	4606      	mov	r6, r0
 800de0c:	460f      	mov	r7, r1
 800de0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de12:	f7f2 fbf1 	bl	80005f8 <__aeabi_dmul>
 800de16:	4632      	mov	r2, r6
 800de18:	463b      	mov	r3, r7
 800de1a:	f7f2 fa35 	bl	8000288 <__aeabi_dsub>
 800de1e:	4602      	mov	r2, r0
 800de20:	460b      	mov	r3, r1
 800de22:	4606      	mov	r6, r0
 800de24:	460f      	mov	r7, r1
 800de26:	4640      	mov	r0, r8
 800de28:	4649      	mov	r1, r9
 800de2a:	f7f2 fa2d 	bl	8000288 <__aeabi_dsub>
 800de2e:	9a05      	ldr	r2, [sp, #20]
 800de30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800de34:	1ad3      	subs	r3, r2, r3
 800de36:	2b31      	cmp	r3, #49	; 0x31
 800de38:	dc20      	bgt.n	800de7c <__ieee754_rem_pio2+0x26c>
 800de3a:	e9c4 0100 	strd	r0, r1, [r4]
 800de3e:	46c2      	mov	sl, r8
 800de40:	46cb      	mov	fp, r9
 800de42:	e9d4 8900 	ldrd	r8, r9, [r4]
 800de46:	4650      	mov	r0, sl
 800de48:	4642      	mov	r2, r8
 800de4a:	464b      	mov	r3, r9
 800de4c:	4659      	mov	r1, fp
 800de4e:	f7f2 fa1b 	bl	8000288 <__aeabi_dsub>
 800de52:	463b      	mov	r3, r7
 800de54:	4632      	mov	r2, r6
 800de56:	f7f2 fa17 	bl	8000288 <__aeabi_dsub>
 800de5a:	9b04      	ldr	r3, [sp, #16]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800de62:	f6bf af11 	bge.w	800dc88 <__ieee754_rem_pio2+0x78>
 800de66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800de6a:	6063      	str	r3, [r4, #4]
 800de6c:	f8c4 8000 	str.w	r8, [r4]
 800de70:	60a0      	str	r0, [r4, #8]
 800de72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de76:	60e3      	str	r3, [r4, #12]
 800de78:	426d      	negs	r5, r5
 800de7a:	e705      	b.n	800dc88 <__ieee754_rem_pio2+0x78>
 800de7c:	a326      	add	r3, pc, #152	; (adr r3, 800df18 <__ieee754_rem_pio2+0x308>)
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800de86:	f7f2 fbb7 	bl	80005f8 <__aeabi_dmul>
 800de8a:	4606      	mov	r6, r0
 800de8c:	460f      	mov	r7, r1
 800de8e:	4602      	mov	r2, r0
 800de90:	460b      	mov	r3, r1
 800de92:	4640      	mov	r0, r8
 800de94:	4649      	mov	r1, r9
 800de96:	f7f2 f9f7 	bl	8000288 <__aeabi_dsub>
 800de9a:	4602      	mov	r2, r0
 800de9c:	460b      	mov	r3, r1
 800de9e:	4682      	mov	sl, r0
 800dea0:	468b      	mov	fp, r1
 800dea2:	4640      	mov	r0, r8
 800dea4:	4649      	mov	r1, r9
 800dea6:	f7f2 f9ef 	bl	8000288 <__aeabi_dsub>
 800deaa:	4632      	mov	r2, r6
 800deac:	463b      	mov	r3, r7
 800deae:	f7f2 f9eb 	bl	8000288 <__aeabi_dsub>
 800deb2:	a31b      	add	r3, pc, #108	; (adr r3, 800df20 <__ieee754_rem_pio2+0x310>)
 800deb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb8:	4606      	mov	r6, r0
 800deba:	460f      	mov	r7, r1
 800debc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dec0:	f7f2 fb9a 	bl	80005f8 <__aeabi_dmul>
 800dec4:	4632      	mov	r2, r6
 800dec6:	463b      	mov	r3, r7
 800dec8:	f7f2 f9de 	bl	8000288 <__aeabi_dsub>
 800decc:	4606      	mov	r6, r0
 800dece:	460f      	mov	r7, r1
 800ded0:	e764      	b.n	800dd9c <__ieee754_rem_pio2+0x18c>
 800ded2:	4b1b      	ldr	r3, [pc, #108]	; (800df40 <__ieee754_rem_pio2+0x330>)
 800ded4:	4598      	cmp	r8, r3
 800ded6:	dd35      	ble.n	800df44 <__ieee754_rem_pio2+0x334>
 800ded8:	ee10 2a10 	vmov	r2, s0
 800dedc:	463b      	mov	r3, r7
 800dede:	4630      	mov	r0, r6
 800dee0:	4639      	mov	r1, r7
 800dee2:	f7f2 f9d1 	bl	8000288 <__aeabi_dsub>
 800dee6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800deea:	e9c4 0100 	strd	r0, r1, [r4]
 800deee:	e6a1      	b.n	800dc34 <__ieee754_rem_pio2+0x24>
 800def0:	54400000 	.word	0x54400000
 800def4:	3ff921fb 	.word	0x3ff921fb
 800def8:	1a626331 	.word	0x1a626331
 800defc:	3dd0b461 	.word	0x3dd0b461
 800df00:	1a600000 	.word	0x1a600000
 800df04:	3dd0b461 	.word	0x3dd0b461
 800df08:	2e037073 	.word	0x2e037073
 800df0c:	3ba3198a 	.word	0x3ba3198a
 800df10:	6dc9c883 	.word	0x6dc9c883
 800df14:	3fe45f30 	.word	0x3fe45f30
 800df18:	2e000000 	.word	0x2e000000
 800df1c:	3ba3198a 	.word	0x3ba3198a
 800df20:	252049c1 	.word	0x252049c1
 800df24:	397b839a 	.word	0x397b839a
 800df28:	3fe921fb 	.word	0x3fe921fb
 800df2c:	4002d97b 	.word	0x4002d97b
 800df30:	3ff921fb 	.word	0x3ff921fb
 800df34:	413921fb 	.word	0x413921fb
 800df38:	3fe00000 	.word	0x3fe00000
 800df3c:	0800f08c 	.word	0x0800f08c
 800df40:	7fefffff 	.word	0x7fefffff
 800df44:	ea4f 5528 	mov.w	r5, r8, asr #20
 800df48:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800df4c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800df50:	4630      	mov	r0, r6
 800df52:	460f      	mov	r7, r1
 800df54:	f7f2 fe00 	bl	8000b58 <__aeabi_d2iz>
 800df58:	f7f2 fae4 	bl	8000524 <__aeabi_i2d>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4630      	mov	r0, r6
 800df62:	4639      	mov	r1, r7
 800df64:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800df68:	f7f2 f98e 	bl	8000288 <__aeabi_dsub>
 800df6c:	2200      	movs	r2, #0
 800df6e:	4b1f      	ldr	r3, [pc, #124]	; (800dfec <__ieee754_rem_pio2+0x3dc>)
 800df70:	f7f2 fb42 	bl	80005f8 <__aeabi_dmul>
 800df74:	460f      	mov	r7, r1
 800df76:	4606      	mov	r6, r0
 800df78:	f7f2 fdee 	bl	8000b58 <__aeabi_d2iz>
 800df7c:	f7f2 fad2 	bl	8000524 <__aeabi_i2d>
 800df80:	4602      	mov	r2, r0
 800df82:	460b      	mov	r3, r1
 800df84:	4630      	mov	r0, r6
 800df86:	4639      	mov	r1, r7
 800df88:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df8c:	f7f2 f97c 	bl	8000288 <__aeabi_dsub>
 800df90:	2200      	movs	r2, #0
 800df92:	4b16      	ldr	r3, [pc, #88]	; (800dfec <__ieee754_rem_pio2+0x3dc>)
 800df94:	f7f2 fb30 	bl	80005f8 <__aeabi_dmul>
 800df98:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800df9c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800dfa0:	f04f 0803 	mov.w	r8, #3
 800dfa4:	2600      	movs	r6, #0
 800dfa6:	2700      	movs	r7, #0
 800dfa8:	4632      	mov	r2, r6
 800dfaa:	463b      	mov	r3, r7
 800dfac:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800dfb0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800dfb4:	f7f2 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800dfb8:	b9b0      	cbnz	r0, 800dfe8 <__ieee754_rem_pio2+0x3d8>
 800dfba:	4b0d      	ldr	r3, [pc, #52]	; (800dff0 <__ieee754_rem_pio2+0x3e0>)
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	2302      	movs	r3, #2
 800dfc0:	9300      	str	r3, [sp, #0]
 800dfc2:	462a      	mov	r2, r5
 800dfc4:	4643      	mov	r3, r8
 800dfc6:	4621      	mov	r1, r4
 800dfc8:	a806      	add	r0, sp, #24
 800dfca:	f000 f98d 	bl	800e2e8 <__kernel_rem_pio2>
 800dfce:	9b04      	ldr	r3, [sp, #16]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	4605      	mov	r5, r0
 800dfd4:	f6bf ae58 	bge.w	800dc88 <__ieee754_rem_pio2+0x78>
 800dfd8:	6863      	ldr	r3, [r4, #4]
 800dfda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dfde:	6063      	str	r3, [r4, #4]
 800dfe0:	68e3      	ldr	r3, [r4, #12]
 800dfe2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dfe6:	e746      	b.n	800de76 <__ieee754_rem_pio2+0x266>
 800dfe8:	46d0      	mov	r8, sl
 800dfea:	e7dd      	b.n	800dfa8 <__ieee754_rem_pio2+0x398>
 800dfec:	41700000 	.word	0x41700000
 800dff0:	0800f10c 	.word	0x0800f10c

0800dff4 <__ieee754_sqrt>:
 800dff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dff8:	4955      	ldr	r1, [pc, #340]	; (800e150 <__ieee754_sqrt+0x15c>)
 800dffa:	ec55 4b10 	vmov	r4, r5, d0
 800dffe:	43a9      	bics	r1, r5
 800e000:	462b      	mov	r3, r5
 800e002:	462a      	mov	r2, r5
 800e004:	d112      	bne.n	800e02c <__ieee754_sqrt+0x38>
 800e006:	ee10 2a10 	vmov	r2, s0
 800e00a:	ee10 0a10 	vmov	r0, s0
 800e00e:	4629      	mov	r1, r5
 800e010:	f7f2 faf2 	bl	80005f8 <__aeabi_dmul>
 800e014:	4602      	mov	r2, r0
 800e016:	460b      	mov	r3, r1
 800e018:	4620      	mov	r0, r4
 800e01a:	4629      	mov	r1, r5
 800e01c:	f7f2 f936 	bl	800028c <__adddf3>
 800e020:	4604      	mov	r4, r0
 800e022:	460d      	mov	r5, r1
 800e024:	ec45 4b10 	vmov	d0, r4, r5
 800e028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e02c:	2d00      	cmp	r5, #0
 800e02e:	ee10 0a10 	vmov	r0, s0
 800e032:	4621      	mov	r1, r4
 800e034:	dc0f      	bgt.n	800e056 <__ieee754_sqrt+0x62>
 800e036:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800e03a:	4330      	orrs	r0, r6
 800e03c:	d0f2      	beq.n	800e024 <__ieee754_sqrt+0x30>
 800e03e:	b155      	cbz	r5, 800e056 <__ieee754_sqrt+0x62>
 800e040:	ee10 2a10 	vmov	r2, s0
 800e044:	4620      	mov	r0, r4
 800e046:	4629      	mov	r1, r5
 800e048:	f7f2 f91e 	bl	8000288 <__aeabi_dsub>
 800e04c:	4602      	mov	r2, r0
 800e04e:	460b      	mov	r3, r1
 800e050:	f7f2 fbfc 	bl	800084c <__aeabi_ddiv>
 800e054:	e7e4      	b.n	800e020 <__ieee754_sqrt+0x2c>
 800e056:	151b      	asrs	r3, r3, #20
 800e058:	d073      	beq.n	800e142 <__ieee754_sqrt+0x14e>
 800e05a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800e05e:	07dd      	lsls	r5, r3, #31
 800e060:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800e064:	bf48      	it	mi
 800e066:	0fc8      	lsrmi	r0, r1, #31
 800e068:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800e06c:	bf44      	itt	mi
 800e06e:	0049      	lslmi	r1, r1, #1
 800e070:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800e074:	2500      	movs	r5, #0
 800e076:	1058      	asrs	r0, r3, #1
 800e078:	0fcb      	lsrs	r3, r1, #31
 800e07a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800e07e:	0049      	lsls	r1, r1, #1
 800e080:	2316      	movs	r3, #22
 800e082:	462c      	mov	r4, r5
 800e084:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800e088:	19a7      	adds	r7, r4, r6
 800e08a:	4297      	cmp	r7, r2
 800e08c:	bfde      	ittt	le
 800e08e:	19bc      	addle	r4, r7, r6
 800e090:	1bd2      	suble	r2, r2, r7
 800e092:	19ad      	addle	r5, r5, r6
 800e094:	0fcf      	lsrs	r7, r1, #31
 800e096:	3b01      	subs	r3, #1
 800e098:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800e09c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e0a4:	d1f0      	bne.n	800e088 <__ieee754_sqrt+0x94>
 800e0a6:	f04f 0c20 	mov.w	ip, #32
 800e0aa:	469e      	mov	lr, r3
 800e0ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800e0b0:	42a2      	cmp	r2, r4
 800e0b2:	eb06 070e 	add.w	r7, r6, lr
 800e0b6:	dc02      	bgt.n	800e0be <__ieee754_sqrt+0xca>
 800e0b8:	d112      	bne.n	800e0e0 <__ieee754_sqrt+0xec>
 800e0ba:	428f      	cmp	r7, r1
 800e0bc:	d810      	bhi.n	800e0e0 <__ieee754_sqrt+0xec>
 800e0be:	2f00      	cmp	r7, #0
 800e0c0:	eb07 0e06 	add.w	lr, r7, r6
 800e0c4:	da42      	bge.n	800e14c <__ieee754_sqrt+0x158>
 800e0c6:	f1be 0f00 	cmp.w	lr, #0
 800e0ca:	db3f      	blt.n	800e14c <__ieee754_sqrt+0x158>
 800e0cc:	f104 0801 	add.w	r8, r4, #1
 800e0d0:	1b12      	subs	r2, r2, r4
 800e0d2:	428f      	cmp	r7, r1
 800e0d4:	bf88      	it	hi
 800e0d6:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800e0da:	1bc9      	subs	r1, r1, r7
 800e0dc:	4433      	add	r3, r6
 800e0de:	4644      	mov	r4, r8
 800e0e0:	0052      	lsls	r2, r2, #1
 800e0e2:	f1bc 0c01 	subs.w	ip, ip, #1
 800e0e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800e0ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800e0ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e0f2:	d1dd      	bne.n	800e0b0 <__ieee754_sqrt+0xbc>
 800e0f4:	430a      	orrs	r2, r1
 800e0f6:	d006      	beq.n	800e106 <__ieee754_sqrt+0x112>
 800e0f8:	1c5c      	adds	r4, r3, #1
 800e0fa:	bf13      	iteet	ne
 800e0fc:	3301      	addne	r3, #1
 800e0fe:	3501      	addeq	r5, #1
 800e100:	4663      	moveq	r3, ip
 800e102:	f023 0301 	bicne.w	r3, r3, #1
 800e106:	106a      	asrs	r2, r5, #1
 800e108:	085b      	lsrs	r3, r3, #1
 800e10a:	07e9      	lsls	r1, r5, #31
 800e10c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800e110:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800e114:	bf48      	it	mi
 800e116:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800e11a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800e11e:	461c      	mov	r4, r3
 800e120:	e780      	b.n	800e024 <__ieee754_sqrt+0x30>
 800e122:	0aca      	lsrs	r2, r1, #11
 800e124:	3815      	subs	r0, #21
 800e126:	0549      	lsls	r1, r1, #21
 800e128:	2a00      	cmp	r2, #0
 800e12a:	d0fa      	beq.n	800e122 <__ieee754_sqrt+0x12e>
 800e12c:	02d6      	lsls	r6, r2, #11
 800e12e:	d50a      	bpl.n	800e146 <__ieee754_sqrt+0x152>
 800e130:	f1c3 0420 	rsb	r4, r3, #32
 800e134:	fa21 f404 	lsr.w	r4, r1, r4
 800e138:	1e5d      	subs	r5, r3, #1
 800e13a:	4099      	lsls	r1, r3
 800e13c:	4322      	orrs	r2, r4
 800e13e:	1b43      	subs	r3, r0, r5
 800e140:	e78b      	b.n	800e05a <__ieee754_sqrt+0x66>
 800e142:	4618      	mov	r0, r3
 800e144:	e7f0      	b.n	800e128 <__ieee754_sqrt+0x134>
 800e146:	0052      	lsls	r2, r2, #1
 800e148:	3301      	adds	r3, #1
 800e14a:	e7ef      	b.n	800e12c <__ieee754_sqrt+0x138>
 800e14c:	46a0      	mov	r8, r4
 800e14e:	e7bf      	b.n	800e0d0 <__ieee754_sqrt+0xdc>
 800e150:	7ff00000 	.word	0x7ff00000
 800e154:	00000000 	.word	0x00000000

0800e158 <__kernel_cos>:
 800e158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e15c:	ec59 8b10 	vmov	r8, r9, d0
 800e160:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800e164:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800e168:	ed2d 8b02 	vpush	{d8}
 800e16c:	eeb0 8a41 	vmov.f32	s16, s2
 800e170:	eef0 8a61 	vmov.f32	s17, s3
 800e174:	da07      	bge.n	800e186 <__kernel_cos+0x2e>
 800e176:	ee10 0a10 	vmov	r0, s0
 800e17a:	4649      	mov	r1, r9
 800e17c:	f7f2 fcec 	bl	8000b58 <__aeabi_d2iz>
 800e180:	2800      	cmp	r0, #0
 800e182:	f000 8089 	beq.w	800e298 <__kernel_cos+0x140>
 800e186:	4642      	mov	r2, r8
 800e188:	464b      	mov	r3, r9
 800e18a:	4640      	mov	r0, r8
 800e18c:	4649      	mov	r1, r9
 800e18e:	f7f2 fa33 	bl	80005f8 <__aeabi_dmul>
 800e192:	2200      	movs	r2, #0
 800e194:	4b4e      	ldr	r3, [pc, #312]	; (800e2d0 <__kernel_cos+0x178>)
 800e196:	4604      	mov	r4, r0
 800e198:	460d      	mov	r5, r1
 800e19a:	f7f2 fa2d 	bl	80005f8 <__aeabi_dmul>
 800e19e:	a340      	add	r3, pc, #256	; (adr r3, 800e2a0 <__kernel_cos+0x148>)
 800e1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1a4:	4682      	mov	sl, r0
 800e1a6:	468b      	mov	fp, r1
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	4629      	mov	r1, r5
 800e1ac:	f7f2 fa24 	bl	80005f8 <__aeabi_dmul>
 800e1b0:	a33d      	add	r3, pc, #244	; (adr r3, 800e2a8 <__kernel_cos+0x150>)
 800e1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b6:	f7f2 f869 	bl	800028c <__adddf3>
 800e1ba:	4622      	mov	r2, r4
 800e1bc:	462b      	mov	r3, r5
 800e1be:	f7f2 fa1b 	bl	80005f8 <__aeabi_dmul>
 800e1c2:	a33b      	add	r3, pc, #236	; (adr r3, 800e2b0 <__kernel_cos+0x158>)
 800e1c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c8:	f7f2 f85e 	bl	8000288 <__aeabi_dsub>
 800e1cc:	4622      	mov	r2, r4
 800e1ce:	462b      	mov	r3, r5
 800e1d0:	f7f2 fa12 	bl	80005f8 <__aeabi_dmul>
 800e1d4:	a338      	add	r3, pc, #224	; (adr r3, 800e2b8 <__kernel_cos+0x160>)
 800e1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1da:	f7f2 f857 	bl	800028c <__adddf3>
 800e1de:	4622      	mov	r2, r4
 800e1e0:	462b      	mov	r3, r5
 800e1e2:	f7f2 fa09 	bl	80005f8 <__aeabi_dmul>
 800e1e6:	a336      	add	r3, pc, #216	; (adr r3, 800e2c0 <__kernel_cos+0x168>)
 800e1e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1ec:	f7f2 f84c 	bl	8000288 <__aeabi_dsub>
 800e1f0:	4622      	mov	r2, r4
 800e1f2:	462b      	mov	r3, r5
 800e1f4:	f7f2 fa00 	bl	80005f8 <__aeabi_dmul>
 800e1f8:	a333      	add	r3, pc, #204	; (adr r3, 800e2c8 <__kernel_cos+0x170>)
 800e1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1fe:	f7f2 f845 	bl	800028c <__adddf3>
 800e202:	4622      	mov	r2, r4
 800e204:	462b      	mov	r3, r5
 800e206:	f7f2 f9f7 	bl	80005f8 <__aeabi_dmul>
 800e20a:	4622      	mov	r2, r4
 800e20c:	462b      	mov	r3, r5
 800e20e:	f7f2 f9f3 	bl	80005f8 <__aeabi_dmul>
 800e212:	ec53 2b18 	vmov	r2, r3, d8
 800e216:	4604      	mov	r4, r0
 800e218:	460d      	mov	r5, r1
 800e21a:	4640      	mov	r0, r8
 800e21c:	4649      	mov	r1, r9
 800e21e:	f7f2 f9eb 	bl	80005f8 <__aeabi_dmul>
 800e222:	460b      	mov	r3, r1
 800e224:	4602      	mov	r2, r0
 800e226:	4629      	mov	r1, r5
 800e228:	4620      	mov	r0, r4
 800e22a:	f7f2 f82d 	bl	8000288 <__aeabi_dsub>
 800e22e:	4b29      	ldr	r3, [pc, #164]	; (800e2d4 <__kernel_cos+0x17c>)
 800e230:	429e      	cmp	r6, r3
 800e232:	4680      	mov	r8, r0
 800e234:	4689      	mov	r9, r1
 800e236:	dc11      	bgt.n	800e25c <__kernel_cos+0x104>
 800e238:	4602      	mov	r2, r0
 800e23a:	460b      	mov	r3, r1
 800e23c:	4650      	mov	r0, sl
 800e23e:	4659      	mov	r1, fp
 800e240:	f7f2 f822 	bl	8000288 <__aeabi_dsub>
 800e244:	460b      	mov	r3, r1
 800e246:	4924      	ldr	r1, [pc, #144]	; (800e2d8 <__kernel_cos+0x180>)
 800e248:	4602      	mov	r2, r0
 800e24a:	2000      	movs	r0, #0
 800e24c:	f7f2 f81c 	bl	8000288 <__aeabi_dsub>
 800e250:	ecbd 8b02 	vpop	{d8}
 800e254:	ec41 0b10 	vmov	d0, r0, r1
 800e258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e25c:	4b1f      	ldr	r3, [pc, #124]	; (800e2dc <__kernel_cos+0x184>)
 800e25e:	491e      	ldr	r1, [pc, #120]	; (800e2d8 <__kernel_cos+0x180>)
 800e260:	429e      	cmp	r6, r3
 800e262:	bfcc      	ite	gt
 800e264:	4d1e      	ldrgt	r5, [pc, #120]	; (800e2e0 <__kernel_cos+0x188>)
 800e266:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800e26a:	2400      	movs	r4, #0
 800e26c:	4622      	mov	r2, r4
 800e26e:	462b      	mov	r3, r5
 800e270:	2000      	movs	r0, #0
 800e272:	f7f2 f809 	bl	8000288 <__aeabi_dsub>
 800e276:	4622      	mov	r2, r4
 800e278:	4606      	mov	r6, r0
 800e27a:	460f      	mov	r7, r1
 800e27c:	462b      	mov	r3, r5
 800e27e:	4650      	mov	r0, sl
 800e280:	4659      	mov	r1, fp
 800e282:	f7f2 f801 	bl	8000288 <__aeabi_dsub>
 800e286:	4642      	mov	r2, r8
 800e288:	464b      	mov	r3, r9
 800e28a:	f7f1 fffd 	bl	8000288 <__aeabi_dsub>
 800e28e:	4602      	mov	r2, r0
 800e290:	460b      	mov	r3, r1
 800e292:	4630      	mov	r0, r6
 800e294:	4639      	mov	r1, r7
 800e296:	e7d9      	b.n	800e24c <__kernel_cos+0xf4>
 800e298:	2000      	movs	r0, #0
 800e29a:	490f      	ldr	r1, [pc, #60]	; (800e2d8 <__kernel_cos+0x180>)
 800e29c:	e7d8      	b.n	800e250 <__kernel_cos+0xf8>
 800e29e:	bf00      	nop
 800e2a0:	be8838d4 	.word	0xbe8838d4
 800e2a4:	bda8fae9 	.word	0xbda8fae9
 800e2a8:	bdb4b1c4 	.word	0xbdb4b1c4
 800e2ac:	3e21ee9e 	.word	0x3e21ee9e
 800e2b0:	809c52ad 	.word	0x809c52ad
 800e2b4:	3e927e4f 	.word	0x3e927e4f
 800e2b8:	19cb1590 	.word	0x19cb1590
 800e2bc:	3efa01a0 	.word	0x3efa01a0
 800e2c0:	16c15177 	.word	0x16c15177
 800e2c4:	3f56c16c 	.word	0x3f56c16c
 800e2c8:	5555554c 	.word	0x5555554c
 800e2cc:	3fa55555 	.word	0x3fa55555
 800e2d0:	3fe00000 	.word	0x3fe00000
 800e2d4:	3fd33332 	.word	0x3fd33332
 800e2d8:	3ff00000 	.word	0x3ff00000
 800e2dc:	3fe90000 	.word	0x3fe90000
 800e2e0:	3fd20000 	.word	0x3fd20000
 800e2e4:	00000000 	.word	0x00000000

0800e2e8 <__kernel_rem_pio2>:
 800e2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ec:	ed2d 8b02 	vpush	{d8}
 800e2f0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800e2f4:	1ed4      	subs	r4, r2, #3
 800e2f6:	9308      	str	r3, [sp, #32]
 800e2f8:	9101      	str	r1, [sp, #4]
 800e2fa:	4bc5      	ldr	r3, [pc, #788]	; (800e610 <__kernel_rem_pio2+0x328>)
 800e2fc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800e2fe:	9009      	str	r0, [sp, #36]	; 0x24
 800e300:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e304:	9304      	str	r3, [sp, #16]
 800e306:	9b08      	ldr	r3, [sp, #32]
 800e308:	3b01      	subs	r3, #1
 800e30a:	9307      	str	r3, [sp, #28]
 800e30c:	2318      	movs	r3, #24
 800e30e:	fb94 f4f3 	sdiv	r4, r4, r3
 800e312:	f06f 0317 	mvn.w	r3, #23
 800e316:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800e31a:	fb04 3303 	mla	r3, r4, r3, r3
 800e31e:	eb03 0a02 	add.w	sl, r3, r2
 800e322:	9b04      	ldr	r3, [sp, #16]
 800e324:	9a07      	ldr	r2, [sp, #28]
 800e326:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800e600 <__kernel_rem_pio2+0x318>
 800e32a:	eb03 0802 	add.w	r8, r3, r2
 800e32e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e330:	1aa7      	subs	r7, r4, r2
 800e332:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800e336:	ae22      	add	r6, sp, #136	; 0x88
 800e338:	2500      	movs	r5, #0
 800e33a:	4545      	cmp	r5, r8
 800e33c:	dd13      	ble.n	800e366 <__kernel_rem_pio2+0x7e>
 800e33e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800e600 <__kernel_rem_pio2+0x318>
 800e342:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800e346:	2600      	movs	r6, #0
 800e348:	9b04      	ldr	r3, [sp, #16]
 800e34a:	429e      	cmp	r6, r3
 800e34c:	dc32      	bgt.n	800e3b4 <__kernel_rem_pio2+0xcc>
 800e34e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e350:	9302      	str	r3, [sp, #8]
 800e352:	9b08      	ldr	r3, [sp, #32]
 800e354:	199d      	adds	r5, r3, r6
 800e356:	ab22      	add	r3, sp, #136	; 0x88
 800e358:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800e35c:	9306      	str	r3, [sp, #24]
 800e35e:	ec59 8b18 	vmov	r8, r9, d8
 800e362:	2700      	movs	r7, #0
 800e364:	e01f      	b.n	800e3a6 <__kernel_rem_pio2+0xbe>
 800e366:	42ef      	cmn	r7, r5
 800e368:	d407      	bmi.n	800e37a <__kernel_rem_pio2+0x92>
 800e36a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800e36e:	f7f2 f8d9 	bl	8000524 <__aeabi_i2d>
 800e372:	e8e6 0102 	strd	r0, r1, [r6], #8
 800e376:	3501      	adds	r5, #1
 800e378:	e7df      	b.n	800e33a <__kernel_rem_pio2+0x52>
 800e37a:	ec51 0b18 	vmov	r0, r1, d8
 800e37e:	e7f8      	b.n	800e372 <__kernel_rem_pio2+0x8a>
 800e380:	9906      	ldr	r1, [sp, #24]
 800e382:	9d02      	ldr	r5, [sp, #8]
 800e384:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800e388:	9106      	str	r1, [sp, #24]
 800e38a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800e38e:	9502      	str	r5, [sp, #8]
 800e390:	f7f2 f932 	bl	80005f8 <__aeabi_dmul>
 800e394:	4602      	mov	r2, r0
 800e396:	460b      	mov	r3, r1
 800e398:	4640      	mov	r0, r8
 800e39a:	4649      	mov	r1, r9
 800e39c:	f7f1 ff76 	bl	800028c <__adddf3>
 800e3a0:	3701      	adds	r7, #1
 800e3a2:	4680      	mov	r8, r0
 800e3a4:	4689      	mov	r9, r1
 800e3a6:	9b07      	ldr	r3, [sp, #28]
 800e3a8:	429f      	cmp	r7, r3
 800e3aa:	dde9      	ble.n	800e380 <__kernel_rem_pio2+0x98>
 800e3ac:	e8eb 8902 	strd	r8, r9, [fp], #8
 800e3b0:	3601      	adds	r6, #1
 800e3b2:	e7c9      	b.n	800e348 <__kernel_rem_pio2+0x60>
 800e3b4:	9b04      	ldr	r3, [sp, #16]
 800e3b6:	aa0e      	add	r2, sp, #56	; 0x38
 800e3b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e3bc:	930c      	str	r3, [sp, #48]	; 0x30
 800e3be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800e3c0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800e3c4:	9c04      	ldr	r4, [sp, #16]
 800e3c6:	930b      	str	r3, [sp, #44]	; 0x2c
 800e3c8:	ab9a      	add	r3, sp, #616	; 0x268
 800e3ca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800e3ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e3d2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e3d6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800e3da:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800e3de:	ab9a      	add	r3, sp, #616	; 0x268
 800e3e0:	445b      	add	r3, fp
 800e3e2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800e3e6:	2500      	movs	r5, #0
 800e3e8:	1b63      	subs	r3, r4, r5
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	dc78      	bgt.n	800e4e0 <__kernel_rem_pio2+0x1f8>
 800e3ee:	4650      	mov	r0, sl
 800e3f0:	ec49 8b10 	vmov	d0, r8, r9
 800e3f4:	f000 fc04 	bl	800ec00 <scalbn>
 800e3f8:	ec57 6b10 	vmov	r6, r7, d0
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800e402:	ee10 0a10 	vmov	r0, s0
 800e406:	4639      	mov	r1, r7
 800e408:	f7f2 f8f6 	bl	80005f8 <__aeabi_dmul>
 800e40c:	ec41 0b10 	vmov	d0, r0, r1
 800e410:	f000 fb6e 	bl	800eaf0 <floor>
 800e414:	2200      	movs	r2, #0
 800e416:	ec51 0b10 	vmov	r0, r1, d0
 800e41a:	4b7e      	ldr	r3, [pc, #504]	; (800e614 <__kernel_rem_pio2+0x32c>)
 800e41c:	f7f2 f8ec 	bl	80005f8 <__aeabi_dmul>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4630      	mov	r0, r6
 800e426:	4639      	mov	r1, r7
 800e428:	f7f1 ff2e 	bl	8000288 <__aeabi_dsub>
 800e42c:	460f      	mov	r7, r1
 800e42e:	4606      	mov	r6, r0
 800e430:	f7f2 fb92 	bl	8000b58 <__aeabi_d2iz>
 800e434:	9006      	str	r0, [sp, #24]
 800e436:	f7f2 f875 	bl	8000524 <__aeabi_i2d>
 800e43a:	4602      	mov	r2, r0
 800e43c:	460b      	mov	r3, r1
 800e43e:	4630      	mov	r0, r6
 800e440:	4639      	mov	r1, r7
 800e442:	f7f1 ff21 	bl	8000288 <__aeabi_dsub>
 800e446:	f1ba 0f00 	cmp.w	sl, #0
 800e44a:	4606      	mov	r6, r0
 800e44c:	460f      	mov	r7, r1
 800e44e:	dd6c      	ble.n	800e52a <__kernel_rem_pio2+0x242>
 800e450:	1e62      	subs	r2, r4, #1
 800e452:	ab0e      	add	r3, sp, #56	; 0x38
 800e454:	f1ca 0118 	rsb	r1, sl, #24
 800e458:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e45c:	9d06      	ldr	r5, [sp, #24]
 800e45e:	fa40 f301 	asr.w	r3, r0, r1
 800e462:	441d      	add	r5, r3
 800e464:	408b      	lsls	r3, r1
 800e466:	1ac0      	subs	r0, r0, r3
 800e468:	ab0e      	add	r3, sp, #56	; 0x38
 800e46a:	9506      	str	r5, [sp, #24]
 800e46c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800e470:	f1ca 0317 	rsb	r3, sl, #23
 800e474:	fa40 f303 	asr.w	r3, r0, r3
 800e478:	9302      	str	r3, [sp, #8]
 800e47a:	9b02      	ldr	r3, [sp, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	dd62      	ble.n	800e546 <__kernel_rem_pio2+0x25e>
 800e480:	9b06      	ldr	r3, [sp, #24]
 800e482:	2200      	movs	r2, #0
 800e484:	3301      	adds	r3, #1
 800e486:	9306      	str	r3, [sp, #24]
 800e488:	4615      	mov	r5, r2
 800e48a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800e48e:	4294      	cmp	r4, r2
 800e490:	f300 8095 	bgt.w	800e5be <__kernel_rem_pio2+0x2d6>
 800e494:	f1ba 0f00 	cmp.w	sl, #0
 800e498:	dd07      	ble.n	800e4aa <__kernel_rem_pio2+0x1c2>
 800e49a:	f1ba 0f01 	cmp.w	sl, #1
 800e49e:	f000 80a2 	beq.w	800e5e6 <__kernel_rem_pio2+0x2fe>
 800e4a2:	f1ba 0f02 	cmp.w	sl, #2
 800e4a6:	f000 80c1 	beq.w	800e62c <__kernel_rem_pio2+0x344>
 800e4aa:	9b02      	ldr	r3, [sp, #8]
 800e4ac:	2b02      	cmp	r3, #2
 800e4ae:	d14a      	bne.n	800e546 <__kernel_rem_pio2+0x25e>
 800e4b0:	4632      	mov	r2, r6
 800e4b2:	463b      	mov	r3, r7
 800e4b4:	2000      	movs	r0, #0
 800e4b6:	4958      	ldr	r1, [pc, #352]	; (800e618 <__kernel_rem_pio2+0x330>)
 800e4b8:	f7f1 fee6 	bl	8000288 <__aeabi_dsub>
 800e4bc:	4606      	mov	r6, r0
 800e4be:	460f      	mov	r7, r1
 800e4c0:	2d00      	cmp	r5, #0
 800e4c2:	d040      	beq.n	800e546 <__kernel_rem_pio2+0x25e>
 800e4c4:	4650      	mov	r0, sl
 800e4c6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800e608 <__kernel_rem_pio2+0x320>
 800e4ca:	f000 fb99 	bl	800ec00 <scalbn>
 800e4ce:	4630      	mov	r0, r6
 800e4d0:	4639      	mov	r1, r7
 800e4d2:	ec53 2b10 	vmov	r2, r3, d0
 800e4d6:	f7f1 fed7 	bl	8000288 <__aeabi_dsub>
 800e4da:	4606      	mov	r6, r0
 800e4dc:	460f      	mov	r7, r1
 800e4de:	e032      	b.n	800e546 <__kernel_rem_pio2+0x25e>
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	4b4e      	ldr	r3, [pc, #312]	; (800e61c <__kernel_rem_pio2+0x334>)
 800e4e4:	4640      	mov	r0, r8
 800e4e6:	4649      	mov	r1, r9
 800e4e8:	f7f2 f886 	bl	80005f8 <__aeabi_dmul>
 800e4ec:	f7f2 fb34 	bl	8000b58 <__aeabi_d2iz>
 800e4f0:	f7f2 f818 	bl	8000524 <__aeabi_i2d>
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	4b4a      	ldr	r3, [pc, #296]	; (800e620 <__kernel_rem_pio2+0x338>)
 800e4f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4fc:	f7f2 f87c 	bl	80005f8 <__aeabi_dmul>
 800e500:	4602      	mov	r2, r0
 800e502:	460b      	mov	r3, r1
 800e504:	4640      	mov	r0, r8
 800e506:	4649      	mov	r1, r9
 800e508:	f7f1 febe 	bl	8000288 <__aeabi_dsub>
 800e50c:	f7f2 fb24 	bl	8000b58 <__aeabi_d2iz>
 800e510:	ab0e      	add	r3, sp, #56	; 0x38
 800e512:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800e516:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800e51a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e51e:	f7f1 feb5 	bl	800028c <__adddf3>
 800e522:	3501      	adds	r5, #1
 800e524:	4680      	mov	r8, r0
 800e526:	4689      	mov	r9, r1
 800e528:	e75e      	b.n	800e3e8 <__kernel_rem_pio2+0x100>
 800e52a:	d105      	bne.n	800e538 <__kernel_rem_pio2+0x250>
 800e52c:	1e63      	subs	r3, r4, #1
 800e52e:	aa0e      	add	r2, sp, #56	; 0x38
 800e530:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e534:	15c3      	asrs	r3, r0, #23
 800e536:	e79f      	b.n	800e478 <__kernel_rem_pio2+0x190>
 800e538:	2200      	movs	r2, #0
 800e53a:	4b3a      	ldr	r3, [pc, #232]	; (800e624 <__kernel_rem_pio2+0x33c>)
 800e53c:	f7f2 fae2 	bl	8000b04 <__aeabi_dcmpge>
 800e540:	2800      	cmp	r0, #0
 800e542:	d139      	bne.n	800e5b8 <__kernel_rem_pio2+0x2d0>
 800e544:	9002      	str	r0, [sp, #8]
 800e546:	2200      	movs	r2, #0
 800e548:	2300      	movs	r3, #0
 800e54a:	4630      	mov	r0, r6
 800e54c:	4639      	mov	r1, r7
 800e54e:	f7f2 fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 800e552:	2800      	cmp	r0, #0
 800e554:	f000 80c7 	beq.w	800e6e6 <__kernel_rem_pio2+0x3fe>
 800e558:	1e65      	subs	r5, r4, #1
 800e55a:	462b      	mov	r3, r5
 800e55c:	2200      	movs	r2, #0
 800e55e:	9904      	ldr	r1, [sp, #16]
 800e560:	428b      	cmp	r3, r1
 800e562:	da6a      	bge.n	800e63a <__kernel_rem_pio2+0x352>
 800e564:	2a00      	cmp	r2, #0
 800e566:	f000 8088 	beq.w	800e67a <__kernel_rem_pio2+0x392>
 800e56a:	ab0e      	add	r3, sp, #56	; 0x38
 800e56c:	f1aa 0a18 	sub.w	sl, sl, #24
 800e570:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800e574:	2b00      	cmp	r3, #0
 800e576:	f000 80b4 	beq.w	800e6e2 <__kernel_rem_pio2+0x3fa>
 800e57a:	4650      	mov	r0, sl
 800e57c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800e608 <__kernel_rem_pio2+0x320>
 800e580:	f000 fb3e 	bl	800ec00 <scalbn>
 800e584:	00ec      	lsls	r4, r5, #3
 800e586:	ab72      	add	r3, sp, #456	; 0x1c8
 800e588:	191e      	adds	r6, r3, r4
 800e58a:	ec59 8b10 	vmov	r8, r9, d0
 800e58e:	f106 0a08 	add.w	sl, r6, #8
 800e592:	462f      	mov	r7, r5
 800e594:	2f00      	cmp	r7, #0
 800e596:	f280 80df 	bge.w	800e758 <__kernel_rem_pio2+0x470>
 800e59a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800e600 <__kernel_rem_pio2+0x318>
 800e59e:	f04f 0a00 	mov.w	sl, #0
 800e5a2:	eba5 030a 	sub.w	r3, r5, sl
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f2c0 810a 	blt.w	800e7c0 <__kernel_rem_pio2+0x4d8>
 800e5ac:	f8df b078 	ldr.w	fp, [pc, #120]	; 800e628 <__kernel_rem_pio2+0x340>
 800e5b0:	ec59 8b18 	vmov	r8, r9, d8
 800e5b4:	2700      	movs	r7, #0
 800e5b6:	e0f5      	b.n	800e7a4 <__kernel_rem_pio2+0x4bc>
 800e5b8:	2302      	movs	r3, #2
 800e5ba:	9302      	str	r3, [sp, #8]
 800e5bc:	e760      	b.n	800e480 <__kernel_rem_pio2+0x198>
 800e5be:	ab0e      	add	r3, sp, #56	; 0x38
 800e5c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5c4:	b94d      	cbnz	r5, 800e5da <__kernel_rem_pio2+0x2f2>
 800e5c6:	b12b      	cbz	r3, 800e5d4 <__kernel_rem_pio2+0x2ec>
 800e5c8:	a80e      	add	r0, sp, #56	; 0x38
 800e5ca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800e5ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	3201      	adds	r2, #1
 800e5d6:	461d      	mov	r5, r3
 800e5d8:	e759      	b.n	800e48e <__kernel_rem_pio2+0x1a6>
 800e5da:	a80e      	add	r0, sp, #56	; 0x38
 800e5dc:	1acb      	subs	r3, r1, r3
 800e5de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800e5e2:	462b      	mov	r3, r5
 800e5e4:	e7f6      	b.n	800e5d4 <__kernel_rem_pio2+0x2ec>
 800e5e6:	1e62      	subs	r2, r4, #1
 800e5e8:	ab0e      	add	r3, sp, #56	; 0x38
 800e5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e5f2:	a90e      	add	r1, sp, #56	; 0x38
 800e5f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e5f8:	e757      	b.n	800e4aa <__kernel_rem_pio2+0x1c2>
 800e5fa:	bf00      	nop
 800e5fc:	f3af 8000 	nop.w
	...
 800e60c:	3ff00000 	.word	0x3ff00000
 800e610:	0800f258 	.word	0x0800f258
 800e614:	40200000 	.word	0x40200000
 800e618:	3ff00000 	.word	0x3ff00000
 800e61c:	3e700000 	.word	0x3e700000
 800e620:	41700000 	.word	0x41700000
 800e624:	3fe00000 	.word	0x3fe00000
 800e628:	0800f218 	.word	0x0800f218
 800e62c:	1e62      	subs	r2, r4, #1
 800e62e:	ab0e      	add	r3, sp, #56	; 0x38
 800e630:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e634:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e638:	e7db      	b.n	800e5f2 <__kernel_rem_pio2+0x30a>
 800e63a:	a90e      	add	r1, sp, #56	; 0x38
 800e63c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800e640:	3b01      	subs	r3, #1
 800e642:	430a      	orrs	r2, r1
 800e644:	e78b      	b.n	800e55e <__kernel_rem_pio2+0x276>
 800e646:	3301      	adds	r3, #1
 800e648:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800e64c:	2900      	cmp	r1, #0
 800e64e:	d0fa      	beq.n	800e646 <__kernel_rem_pio2+0x35e>
 800e650:	9a08      	ldr	r2, [sp, #32]
 800e652:	4422      	add	r2, r4
 800e654:	00d2      	lsls	r2, r2, #3
 800e656:	a922      	add	r1, sp, #136	; 0x88
 800e658:	18e3      	adds	r3, r4, r3
 800e65a:	9206      	str	r2, [sp, #24]
 800e65c:	440a      	add	r2, r1
 800e65e:	9302      	str	r3, [sp, #8]
 800e660:	f10b 0108 	add.w	r1, fp, #8
 800e664:	f102 0308 	add.w	r3, r2, #8
 800e668:	1c66      	adds	r6, r4, #1
 800e66a:	910a      	str	r1, [sp, #40]	; 0x28
 800e66c:	2500      	movs	r5, #0
 800e66e:	930d      	str	r3, [sp, #52]	; 0x34
 800e670:	9b02      	ldr	r3, [sp, #8]
 800e672:	42b3      	cmp	r3, r6
 800e674:	da04      	bge.n	800e680 <__kernel_rem_pio2+0x398>
 800e676:	461c      	mov	r4, r3
 800e678:	e6a6      	b.n	800e3c8 <__kernel_rem_pio2+0xe0>
 800e67a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e67c:	2301      	movs	r3, #1
 800e67e:	e7e3      	b.n	800e648 <__kernel_rem_pio2+0x360>
 800e680:	9b06      	ldr	r3, [sp, #24]
 800e682:	18ef      	adds	r7, r5, r3
 800e684:	ab22      	add	r3, sp, #136	; 0x88
 800e686:	441f      	add	r7, r3
 800e688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e68a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e68e:	f7f1 ff49 	bl	8000524 <__aeabi_i2d>
 800e692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e694:	461c      	mov	r4, r3
 800e696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e698:	e9c7 0100 	strd	r0, r1, [r7]
 800e69c:	eb03 0b05 	add.w	fp, r3, r5
 800e6a0:	2700      	movs	r7, #0
 800e6a2:	f04f 0800 	mov.w	r8, #0
 800e6a6:	f04f 0900 	mov.w	r9, #0
 800e6aa:	9b07      	ldr	r3, [sp, #28]
 800e6ac:	429f      	cmp	r7, r3
 800e6ae:	dd08      	ble.n	800e6c2 <__kernel_rem_pio2+0x3da>
 800e6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6b2:	aa72      	add	r2, sp, #456	; 0x1c8
 800e6b4:	18eb      	adds	r3, r5, r3
 800e6b6:	4413      	add	r3, r2
 800e6b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800e6bc:	3601      	adds	r6, #1
 800e6be:	3508      	adds	r5, #8
 800e6c0:	e7d6      	b.n	800e670 <__kernel_rem_pio2+0x388>
 800e6c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800e6c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800e6ca:	f7f1 ff95 	bl	80005f8 <__aeabi_dmul>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4640      	mov	r0, r8
 800e6d4:	4649      	mov	r1, r9
 800e6d6:	f7f1 fdd9 	bl	800028c <__adddf3>
 800e6da:	3701      	adds	r7, #1
 800e6dc:	4680      	mov	r8, r0
 800e6de:	4689      	mov	r9, r1
 800e6e0:	e7e3      	b.n	800e6aa <__kernel_rem_pio2+0x3c2>
 800e6e2:	3d01      	subs	r5, #1
 800e6e4:	e741      	b.n	800e56a <__kernel_rem_pio2+0x282>
 800e6e6:	f1ca 0000 	rsb	r0, sl, #0
 800e6ea:	ec47 6b10 	vmov	d0, r6, r7
 800e6ee:	f000 fa87 	bl	800ec00 <scalbn>
 800e6f2:	ec57 6b10 	vmov	r6, r7, d0
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	4b99      	ldr	r3, [pc, #612]	; (800e960 <__kernel_rem_pio2+0x678>)
 800e6fa:	ee10 0a10 	vmov	r0, s0
 800e6fe:	4639      	mov	r1, r7
 800e700:	f7f2 fa00 	bl	8000b04 <__aeabi_dcmpge>
 800e704:	b1f8      	cbz	r0, 800e746 <__kernel_rem_pio2+0x45e>
 800e706:	2200      	movs	r2, #0
 800e708:	4b96      	ldr	r3, [pc, #600]	; (800e964 <__kernel_rem_pio2+0x67c>)
 800e70a:	4630      	mov	r0, r6
 800e70c:	4639      	mov	r1, r7
 800e70e:	f7f1 ff73 	bl	80005f8 <__aeabi_dmul>
 800e712:	f7f2 fa21 	bl	8000b58 <__aeabi_d2iz>
 800e716:	4680      	mov	r8, r0
 800e718:	f7f1 ff04 	bl	8000524 <__aeabi_i2d>
 800e71c:	2200      	movs	r2, #0
 800e71e:	4b90      	ldr	r3, [pc, #576]	; (800e960 <__kernel_rem_pio2+0x678>)
 800e720:	f7f1 ff6a 	bl	80005f8 <__aeabi_dmul>
 800e724:	460b      	mov	r3, r1
 800e726:	4602      	mov	r2, r0
 800e728:	4639      	mov	r1, r7
 800e72a:	4630      	mov	r0, r6
 800e72c:	f7f1 fdac 	bl	8000288 <__aeabi_dsub>
 800e730:	f7f2 fa12 	bl	8000b58 <__aeabi_d2iz>
 800e734:	1c65      	adds	r5, r4, #1
 800e736:	ab0e      	add	r3, sp, #56	; 0x38
 800e738:	f10a 0a18 	add.w	sl, sl, #24
 800e73c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e740:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800e744:	e719      	b.n	800e57a <__kernel_rem_pio2+0x292>
 800e746:	4630      	mov	r0, r6
 800e748:	4639      	mov	r1, r7
 800e74a:	f7f2 fa05 	bl	8000b58 <__aeabi_d2iz>
 800e74e:	ab0e      	add	r3, sp, #56	; 0x38
 800e750:	4625      	mov	r5, r4
 800e752:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800e756:	e710      	b.n	800e57a <__kernel_rem_pio2+0x292>
 800e758:	ab0e      	add	r3, sp, #56	; 0x38
 800e75a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800e75e:	f7f1 fee1 	bl	8000524 <__aeabi_i2d>
 800e762:	4642      	mov	r2, r8
 800e764:	464b      	mov	r3, r9
 800e766:	f7f1 ff47 	bl	80005f8 <__aeabi_dmul>
 800e76a:	2200      	movs	r2, #0
 800e76c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800e770:	4b7c      	ldr	r3, [pc, #496]	; (800e964 <__kernel_rem_pio2+0x67c>)
 800e772:	4640      	mov	r0, r8
 800e774:	4649      	mov	r1, r9
 800e776:	f7f1 ff3f 	bl	80005f8 <__aeabi_dmul>
 800e77a:	3f01      	subs	r7, #1
 800e77c:	4680      	mov	r8, r0
 800e77e:	4689      	mov	r9, r1
 800e780:	e708      	b.n	800e594 <__kernel_rem_pio2+0x2ac>
 800e782:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800e786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e78a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800e78e:	f7f1 ff33 	bl	80005f8 <__aeabi_dmul>
 800e792:	4602      	mov	r2, r0
 800e794:	460b      	mov	r3, r1
 800e796:	4640      	mov	r0, r8
 800e798:	4649      	mov	r1, r9
 800e79a:	f7f1 fd77 	bl	800028c <__adddf3>
 800e79e:	3701      	adds	r7, #1
 800e7a0:	4680      	mov	r8, r0
 800e7a2:	4689      	mov	r9, r1
 800e7a4:	9b04      	ldr	r3, [sp, #16]
 800e7a6:	429f      	cmp	r7, r3
 800e7a8:	dc01      	bgt.n	800e7ae <__kernel_rem_pio2+0x4c6>
 800e7aa:	45ba      	cmp	sl, r7
 800e7ac:	dae9      	bge.n	800e782 <__kernel_rem_pio2+0x49a>
 800e7ae:	ab4a      	add	r3, sp, #296	; 0x128
 800e7b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e7b4:	e9c3 8900 	strd	r8, r9, [r3]
 800e7b8:	f10a 0a01 	add.w	sl, sl, #1
 800e7bc:	3e08      	subs	r6, #8
 800e7be:	e6f0      	b.n	800e5a2 <__kernel_rem_pio2+0x2ba>
 800e7c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800e7c2:	2b03      	cmp	r3, #3
 800e7c4:	d85b      	bhi.n	800e87e <__kernel_rem_pio2+0x596>
 800e7c6:	e8df f003 	tbb	[pc, r3]
 800e7ca:	264a      	.short	0x264a
 800e7cc:	0226      	.short	0x0226
 800e7ce:	ab9a      	add	r3, sp, #616	; 0x268
 800e7d0:	441c      	add	r4, r3
 800e7d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e7d6:	46a2      	mov	sl, r4
 800e7d8:	46ab      	mov	fp, r5
 800e7da:	f1bb 0f00 	cmp.w	fp, #0
 800e7de:	dc6c      	bgt.n	800e8ba <__kernel_rem_pio2+0x5d2>
 800e7e0:	46a2      	mov	sl, r4
 800e7e2:	46ab      	mov	fp, r5
 800e7e4:	f1bb 0f01 	cmp.w	fp, #1
 800e7e8:	f300 8086 	bgt.w	800e8f8 <__kernel_rem_pio2+0x610>
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	2d01      	cmp	r5, #1
 800e7f2:	f300 80a0 	bgt.w	800e936 <__kernel_rem_pio2+0x64e>
 800e7f6:	9b02      	ldr	r3, [sp, #8]
 800e7f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800e7fc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800e800:	2b00      	cmp	r3, #0
 800e802:	f040 809e 	bne.w	800e942 <__kernel_rem_pio2+0x65a>
 800e806:	9b01      	ldr	r3, [sp, #4]
 800e808:	e9c3 7800 	strd	r7, r8, [r3]
 800e80c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800e810:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800e814:	e033      	b.n	800e87e <__kernel_rem_pio2+0x596>
 800e816:	3408      	adds	r4, #8
 800e818:	ab4a      	add	r3, sp, #296	; 0x128
 800e81a:	441c      	add	r4, r3
 800e81c:	462e      	mov	r6, r5
 800e81e:	2000      	movs	r0, #0
 800e820:	2100      	movs	r1, #0
 800e822:	2e00      	cmp	r6, #0
 800e824:	da3a      	bge.n	800e89c <__kernel_rem_pio2+0x5b4>
 800e826:	9b02      	ldr	r3, [sp, #8]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d03d      	beq.n	800e8a8 <__kernel_rem_pio2+0x5c0>
 800e82c:	4602      	mov	r2, r0
 800e82e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e832:	9c01      	ldr	r4, [sp, #4]
 800e834:	e9c4 2300 	strd	r2, r3, [r4]
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800e840:	f7f1 fd22 	bl	8000288 <__aeabi_dsub>
 800e844:	ae4c      	add	r6, sp, #304	; 0x130
 800e846:	2401      	movs	r4, #1
 800e848:	42a5      	cmp	r5, r4
 800e84a:	da30      	bge.n	800e8ae <__kernel_rem_pio2+0x5c6>
 800e84c:	9b02      	ldr	r3, [sp, #8]
 800e84e:	b113      	cbz	r3, 800e856 <__kernel_rem_pio2+0x56e>
 800e850:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e854:	4619      	mov	r1, r3
 800e856:	9b01      	ldr	r3, [sp, #4]
 800e858:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800e85c:	e00f      	b.n	800e87e <__kernel_rem_pio2+0x596>
 800e85e:	ab9a      	add	r3, sp, #616	; 0x268
 800e860:	441c      	add	r4, r3
 800e862:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800e866:	2000      	movs	r0, #0
 800e868:	2100      	movs	r1, #0
 800e86a:	2d00      	cmp	r5, #0
 800e86c:	da10      	bge.n	800e890 <__kernel_rem_pio2+0x5a8>
 800e86e:	9b02      	ldr	r3, [sp, #8]
 800e870:	b113      	cbz	r3, 800e878 <__kernel_rem_pio2+0x590>
 800e872:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e876:	4619      	mov	r1, r3
 800e878:	9b01      	ldr	r3, [sp, #4]
 800e87a:	e9c3 0100 	strd	r0, r1, [r3]
 800e87e:	9b06      	ldr	r3, [sp, #24]
 800e880:	f003 0007 	and.w	r0, r3, #7
 800e884:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800e888:	ecbd 8b02 	vpop	{d8}
 800e88c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e890:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e894:	f7f1 fcfa 	bl	800028c <__adddf3>
 800e898:	3d01      	subs	r5, #1
 800e89a:	e7e6      	b.n	800e86a <__kernel_rem_pio2+0x582>
 800e89c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e8a0:	f7f1 fcf4 	bl	800028c <__adddf3>
 800e8a4:	3e01      	subs	r6, #1
 800e8a6:	e7bc      	b.n	800e822 <__kernel_rem_pio2+0x53a>
 800e8a8:	4602      	mov	r2, r0
 800e8aa:	460b      	mov	r3, r1
 800e8ac:	e7c1      	b.n	800e832 <__kernel_rem_pio2+0x54a>
 800e8ae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800e8b2:	f7f1 fceb 	bl	800028c <__adddf3>
 800e8b6:	3401      	adds	r4, #1
 800e8b8:	e7c6      	b.n	800e848 <__kernel_rem_pio2+0x560>
 800e8ba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800e8be:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e8c2:	4640      	mov	r0, r8
 800e8c4:	ec53 2b17 	vmov	r2, r3, d7
 800e8c8:	4649      	mov	r1, r9
 800e8ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e8ce:	f7f1 fcdd 	bl	800028c <__adddf3>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	460f      	mov	r7, r1
 800e8da:	4640      	mov	r0, r8
 800e8dc:	4649      	mov	r1, r9
 800e8de:	f7f1 fcd3 	bl	8000288 <__aeabi_dsub>
 800e8e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8e6:	f7f1 fcd1 	bl	800028c <__adddf3>
 800e8ea:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e8ee:	e9ca 0100 	strd	r0, r1, [sl]
 800e8f2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800e8f6:	e770      	b.n	800e7da <__kernel_rem_pio2+0x4f2>
 800e8f8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800e8fc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800e900:	4630      	mov	r0, r6
 800e902:	ec53 2b17 	vmov	r2, r3, d7
 800e906:	4639      	mov	r1, r7
 800e908:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e90c:	f7f1 fcbe 	bl	800028c <__adddf3>
 800e910:	4602      	mov	r2, r0
 800e912:	460b      	mov	r3, r1
 800e914:	4680      	mov	r8, r0
 800e916:	4689      	mov	r9, r1
 800e918:	4630      	mov	r0, r6
 800e91a:	4639      	mov	r1, r7
 800e91c:	f7f1 fcb4 	bl	8000288 <__aeabi_dsub>
 800e920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e924:	f7f1 fcb2 	bl	800028c <__adddf3>
 800e928:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800e92c:	e9ca 0100 	strd	r0, r1, [sl]
 800e930:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800e934:	e756      	b.n	800e7e4 <__kernel_rem_pio2+0x4fc>
 800e936:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800e93a:	f7f1 fca7 	bl	800028c <__adddf3>
 800e93e:	3d01      	subs	r5, #1
 800e940:	e756      	b.n	800e7f0 <__kernel_rem_pio2+0x508>
 800e942:	9b01      	ldr	r3, [sp, #4]
 800e944:	9a01      	ldr	r2, [sp, #4]
 800e946:	601f      	str	r7, [r3, #0]
 800e948:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800e94c:	605c      	str	r4, [r3, #4]
 800e94e:	609d      	str	r5, [r3, #8]
 800e950:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800e954:	60d3      	str	r3, [r2, #12]
 800e956:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e95a:	6110      	str	r0, [r2, #16]
 800e95c:	6153      	str	r3, [r2, #20]
 800e95e:	e78e      	b.n	800e87e <__kernel_rem_pio2+0x596>
 800e960:	41700000 	.word	0x41700000
 800e964:	3e700000 	.word	0x3e700000

0800e968 <__kernel_sin>:
 800e968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e96c:	ec55 4b10 	vmov	r4, r5, d0
 800e970:	b085      	sub	sp, #20
 800e972:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e976:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800e97a:	ed8d 1b00 	vstr	d1, [sp]
 800e97e:	9002      	str	r0, [sp, #8]
 800e980:	da06      	bge.n	800e990 <__kernel_sin+0x28>
 800e982:	ee10 0a10 	vmov	r0, s0
 800e986:	4629      	mov	r1, r5
 800e988:	f7f2 f8e6 	bl	8000b58 <__aeabi_d2iz>
 800e98c:	2800      	cmp	r0, #0
 800e98e:	d051      	beq.n	800ea34 <__kernel_sin+0xcc>
 800e990:	4622      	mov	r2, r4
 800e992:	462b      	mov	r3, r5
 800e994:	4620      	mov	r0, r4
 800e996:	4629      	mov	r1, r5
 800e998:	f7f1 fe2e 	bl	80005f8 <__aeabi_dmul>
 800e99c:	4682      	mov	sl, r0
 800e99e:	468b      	mov	fp, r1
 800e9a0:	4602      	mov	r2, r0
 800e9a2:	460b      	mov	r3, r1
 800e9a4:	4620      	mov	r0, r4
 800e9a6:	4629      	mov	r1, r5
 800e9a8:	f7f1 fe26 	bl	80005f8 <__aeabi_dmul>
 800e9ac:	a341      	add	r3, pc, #260	; (adr r3, 800eab4 <__kernel_sin+0x14c>)
 800e9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b2:	4680      	mov	r8, r0
 800e9b4:	4689      	mov	r9, r1
 800e9b6:	4650      	mov	r0, sl
 800e9b8:	4659      	mov	r1, fp
 800e9ba:	f7f1 fe1d 	bl	80005f8 <__aeabi_dmul>
 800e9be:	a33f      	add	r3, pc, #252	; (adr r3, 800eabc <__kernel_sin+0x154>)
 800e9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c4:	f7f1 fc60 	bl	8000288 <__aeabi_dsub>
 800e9c8:	4652      	mov	r2, sl
 800e9ca:	465b      	mov	r3, fp
 800e9cc:	f7f1 fe14 	bl	80005f8 <__aeabi_dmul>
 800e9d0:	a33c      	add	r3, pc, #240	; (adr r3, 800eac4 <__kernel_sin+0x15c>)
 800e9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d6:	f7f1 fc59 	bl	800028c <__adddf3>
 800e9da:	4652      	mov	r2, sl
 800e9dc:	465b      	mov	r3, fp
 800e9de:	f7f1 fe0b 	bl	80005f8 <__aeabi_dmul>
 800e9e2:	a33a      	add	r3, pc, #232	; (adr r3, 800eacc <__kernel_sin+0x164>)
 800e9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e8:	f7f1 fc4e 	bl	8000288 <__aeabi_dsub>
 800e9ec:	4652      	mov	r2, sl
 800e9ee:	465b      	mov	r3, fp
 800e9f0:	f7f1 fe02 	bl	80005f8 <__aeabi_dmul>
 800e9f4:	a337      	add	r3, pc, #220	; (adr r3, 800ead4 <__kernel_sin+0x16c>)
 800e9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9fa:	f7f1 fc47 	bl	800028c <__adddf3>
 800e9fe:	9b02      	ldr	r3, [sp, #8]
 800ea00:	4606      	mov	r6, r0
 800ea02:	460f      	mov	r7, r1
 800ea04:	b9db      	cbnz	r3, 800ea3e <__kernel_sin+0xd6>
 800ea06:	4602      	mov	r2, r0
 800ea08:	460b      	mov	r3, r1
 800ea0a:	4650      	mov	r0, sl
 800ea0c:	4659      	mov	r1, fp
 800ea0e:	f7f1 fdf3 	bl	80005f8 <__aeabi_dmul>
 800ea12:	a325      	add	r3, pc, #148	; (adr r3, 800eaa8 <__kernel_sin+0x140>)
 800ea14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea18:	f7f1 fc36 	bl	8000288 <__aeabi_dsub>
 800ea1c:	4642      	mov	r2, r8
 800ea1e:	464b      	mov	r3, r9
 800ea20:	f7f1 fdea 	bl	80005f8 <__aeabi_dmul>
 800ea24:	4602      	mov	r2, r0
 800ea26:	460b      	mov	r3, r1
 800ea28:	4620      	mov	r0, r4
 800ea2a:	4629      	mov	r1, r5
 800ea2c:	f7f1 fc2e 	bl	800028c <__adddf3>
 800ea30:	4604      	mov	r4, r0
 800ea32:	460d      	mov	r5, r1
 800ea34:	ec45 4b10 	vmov	d0, r4, r5
 800ea38:	b005      	add	sp, #20
 800ea3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea3e:	2200      	movs	r2, #0
 800ea40:	4b1b      	ldr	r3, [pc, #108]	; (800eab0 <__kernel_sin+0x148>)
 800ea42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea46:	f7f1 fdd7 	bl	80005f8 <__aeabi_dmul>
 800ea4a:	4632      	mov	r2, r6
 800ea4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ea50:	463b      	mov	r3, r7
 800ea52:	4640      	mov	r0, r8
 800ea54:	4649      	mov	r1, r9
 800ea56:	f7f1 fdcf 	bl	80005f8 <__aeabi_dmul>
 800ea5a:	4602      	mov	r2, r0
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea62:	f7f1 fc11 	bl	8000288 <__aeabi_dsub>
 800ea66:	4652      	mov	r2, sl
 800ea68:	465b      	mov	r3, fp
 800ea6a:	f7f1 fdc5 	bl	80005f8 <__aeabi_dmul>
 800ea6e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea72:	f7f1 fc09 	bl	8000288 <__aeabi_dsub>
 800ea76:	a30c      	add	r3, pc, #48	; (adr r3, 800eaa8 <__kernel_sin+0x140>)
 800ea78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea7c:	4606      	mov	r6, r0
 800ea7e:	460f      	mov	r7, r1
 800ea80:	4640      	mov	r0, r8
 800ea82:	4649      	mov	r1, r9
 800ea84:	f7f1 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ea88:	4602      	mov	r2, r0
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	4639      	mov	r1, r7
 800ea90:	f7f1 fbfc 	bl	800028c <__adddf3>
 800ea94:	4602      	mov	r2, r0
 800ea96:	460b      	mov	r3, r1
 800ea98:	4620      	mov	r0, r4
 800ea9a:	4629      	mov	r1, r5
 800ea9c:	f7f1 fbf4 	bl	8000288 <__aeabi_dsub>
 800eaa0:	e7c6      	b.n	800ea30 <__kernel_sin+0xc8>
 800eaa2:	bf00      	nop
 800eaa4:	f3af 8000 	nop.w
 800eaa8:	55555549 	.word	0x55555549
 800eaac:	3fc55555 	.word	0x3fc55555
 800eab0:	3fe00000 	.word	0x3fe00000
 800eab4:	5acfd57c 	.word	0x5acfd57c
 800eab8:	3de5d93a 	.word	0x3de5d93a
 800eabc:	8a2b9ceb 	.word	0x8a2b9ceb
 800eac0:	3e5ae5e6 	.word	0x3e5ae5e6
 800eac4:	57b1fe7d 	.word	0x57b1fe7d
 800eac8:	3ec71de3 	.word	0x3ec71de3
 800eacc:	19c161d5 	.word	0x19c161d5
 800ead0:	3f2a01a0 	.word	0x3f2a01a0
 800ead4:	1110f8a6 	.word	0x1110f8a6
 800ead8:	3f811111 	.word	0x3f811111

0800eadc <fabs>:
 800eadc:	ec51 0b10 	vmov	r0, r1, d0
 800eae0:	ee10 2a10 	vmov	r2, s0
 800eae4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eae8:	ec43 2b10 	vmov	d0, r2, r3
 800eaec:	4770      	bx	lr
	...

0800eaf0 <floor>:
 800eaf0:	ec51 0b10 	vmov	r0, r1, d0
 800eaf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eaf8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800eafc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800eb00:	2e13      	cmp	r6, #19
 800eb02:	460c      	mov	r4, r1
 800eb04:	ee10 5a10 	vmov	r5, s0
 800eb08:	4680      	mov	r8, r0
 800eb0a:	dc34      	bgt.n	800eb76 <floor+0x86>
 800eb0c:	2e00      	cmp	r6, #0
 800eb0e:	da16      	bge.n	800eb3e <floor+0x4e>
 800eb10:	a335      	add	r3, pc, #212	; (adr r3, 800ebe8 <floor+0xf8>)
 800eb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb16:	f7f1 fbb9 	bl	800028c <__adddf3>
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	2300      	movs	r3, #0
 800eb1e:	f7f1 fffb 	bl	8000b18 <__aeabi_dcmpgt>
 800eb22:	b148      	cbz	r0, 800eb38 <floor+0x48>
 800eb24:	2c00      	cmp	r4, #0
 800eb26:	da59      	bge.n	800ebdc <floor+0xec>
 800eb28:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800eb2c:	4a30      	ldr	r2, [pc, #192]	; (800ebf0 <floor+0x100>)
 800eb2e:	432b      	orrs	r3, r5
 800eb30:	2500      	movs	r5, #0
 800eb32:	42ab      	cmp	r3, r5
 800eb34:	bf18      	it	ne
 800eb36:	4614      	movne	r4, r2
 800eb38:	4621      	mov	r1, r4
 800eb3a:	4628      	mov	r0, r5
 800eb3c:	e025      	b.n	800eb8a <floor+0x9a>
 800eb3e:	4f2d      	ldr	r7, [pc, #180]	; (800ebf4 <floor+0x104>)
 800eb40:	4137      	asrs	r7, r6
 800eb42:	ea01 0307 	and.w	r3, r1, r7
 800eb46:	4303      	orrs	r3, r0
 800eb48:	d01f      	beq.n	800eb8a <floor+0x9a>
 800eb4a:	a327      	add	r3, pc, #156	; (adr r3, 800ebe8 <floor+0xf8>)
 800eb4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb50:	f7f1 fb9c 	bl	800028c <__adddf3>
 800eb54:	2200      	movs	r2, #0
 800eb56:	2300      	movs	r3, #0
 800eb58:	f7f1 ffde 	bl	8000b18 <__aeabi_dcmpgt>
 800eb5c:	2800      	cmp	r0, #0
 800eb5e:	d0eb      	beq.n	800eb38 <floor+0x48>
 800eb60:	2c00      	cmp	r4, #0
 800eb62:	bfbe      	ittt	lt
 800eb64:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800eb68:	fa43 f606 	asrlt.w	r6, r3, r6
 800eb6c:	19a4      	addlt	r4, r4, r6
 800eb6e:	ea24 0407 	bic.w	r4, r4, r7
 800eb72:	2500      	movs	r5, #0
 800eb74:	e7e0      	b.n	800eb38 <floor+0x48>
 800eb76:	2e33      	cmp	r6, #51	; 0x33
 800eb78:	dd0b      	ble.n	800eb92 <floor+0xa2>
 800eb7a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800eb7e:	d104      	bne.n	800eb8a <floor+0x9a>
 800eb80:	ee10 2a10 	vmov	r2, s0
 800eb84:	460b      	mov	r3, r1
 800eb86:	f7f1 fb81 	bl	800028c <__adddf3>
 800eb8a:	ec41 0b10 	vmov	d0, r0, r1
 800eb8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb92:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800eb96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb9a:	fa23 f707 	lsr.w	r7, r3, r7
 800eb9e:	4207      	tst	r7, r0
 800eba0:	d0f3      	beq.n	800eb8a <floor+0x9a>
 800eba2:	a311      	add	r3, pc, #68	; (adr r3, 800ebe8 <floor+0xf8>)
 800eba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eba8:	f7f1 fb70 	bl	800028c <__adddf3>
 800ebac:	2200      	movs	r2, #0
 800ebae:	2300      	movs	r3, #0
 800ebb0:	f7f1 ffb2 	bl	8000b18 <__aeabi_dcmpgt>
 800ebb4:	2800      	cmp	r0, #0
 800ebb6:	d0bf      	beq.n	800eb38 <floor+0x48>
 800ebb8:	2c00      	cmp	r4, #0
 800ebba:	da02      	bge.n	800ebc2 <floor+0xd2>
 800ebbc:	2e14      	cmp	r6, #20
 800ebbe:	d103      	bne.n	800ebc8 <floor+0xd8>
 800ebc0:	3401      	adds	r4, #1
 800ebc2:	ea25 0507 	bic.w	r5, r5, r7
 800ebc6:	e7b7      	b.n	800eb38 <floor+0x48>
 800ebc8:	2301      	movs	r3, #1
 800ebca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800ebce:	fa03 f606 	lsl.w	r6, r3, r6
 800ebd2:	4435      	add	r5, r6
 800ebd4:	4545      	cmp	r5, r8
 800ebd6:	bf38      	it	cc
 800ebd8:	18e4      	addcc	r4, r4, r3
 800ebda:	e7f2      	b.n	800ebc2 <floor+0xd2>
 800ebdc:	2500      	movs	r5, #0
 800ebde:	462c      	mov	r4, r5
 800ebe0:	e7aa      	b.n	800eb38 <floor+0x48>
 800ebe2:	bf00      	nop
 800ebe4:	f3af 8000 	nop.w
 800ebe8:	8800759c 	.word	0x8800759c
 800ebec:	7e37e43c 	.word	0x7e37e43c
 800ebf0:	bff00000 	.word	0xbff00000
 800ebf4:	000fffff 	.word	0x000fffff

0800ebf8 <matherr>:
 800ebf8:	2000      	movs	r0, #0
 800ebfa:	4770      	bx	lr
 800ebfc:	0000      	movs	r0, r0
	...

0800ec00 <scalbn>:
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	ec55 4b10 	vmov	r4, r5, d0
 800ec06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800ec0a:	4606      	mov	r6, r0
 800ec0c:	462b      	mov	r3, r5
 800ec0e:	b9aa      	cbnz	r2, 800ec3c <scalbn+0x3c>
 800ec10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ec14:	4323      	orrs	r3, r4
 800ec16:	d03b      	beq.n	800ec90 <scalbn+0x90>
 800ec18:	4b31      	ldr	r3, [pc, #196]	; (800ece0 <scalbn+0xe0>)
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	2200      	movs	r2, #0
 800ec1e:	ee10 0a10 	vmov	r0, s0
 800ec22:	f7f1 fce9 	bl	80005f8 <__aeabi_dmul>
 800ec26:	4b2f      	ldr	r3, [pc, #188]	; (800ece4 <scalbn+0xe4>)
 800ec28:	429e      	cmp	r6, r3
 800ec2a:	4604      	mov	r4, r0
 800ec2c:	460d      	mov	r5, r1
 800ec2e:	da12      	bge.n	800ec56 <scalbn+0x56>
 800ec30:	a327      	add	r3, pc, #156	; (adr r3, 800ecd0 <scalbn+0xd0>)
 800ec32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec36:	f7f1 fcdf 	bl	80005f8 <__aeabi_dmul>
 800ec3a:	e009      	b.n	800ec50 <scalbn+0x50>
 800ec3c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ec40:	428a      	cmp	r2, r1
 800ec42:	d10c      	bne.n	800ec5e <scalbn+0x5e>
 800ec44:	ee10 2a10 	vmov	r2, s0
 800ec48:	4620      	mov	r0, r4
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	f7f1 fb1e 	bl	800028c <__adddf3>
 800ec50:	4604      	mov	r4, r0
 800ec52:	460d      	mov	r5, r1
 800ec54:	e01c      	b.n	800ec90 <scalbn+0x90>
 800ec56:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	3a36      	subs	r2, #54	; 0x36
 800ec5e:	4432      	add	r2, r6
 800ec60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ec64:	428a      	cmp	r2, r1
 800ec66:	dd0b      	ble.n	800ec80 <scalbn+0x80>
 800ec68:	ec45 4b11 	vmov	d1, r4, r5
 800ec6c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800ecd8 <scalbn+0xd8>
 800ec70:	f000 f83c 	bl	800ecec <copysign>
 800ec74:	a318      	add	r3, pc, #96	; (adr r3, 800ecd8 <scalbn+0xd8>)
 800ec76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec7a:	ec51 0b10 	vmov	r0, r1, d0
 800ec7e:	e7da      	b.n	800ec36 <scalbn+0x36>
 800ec80:	2a00      	cmp	r2, #0
 800ec82:	dd08      	ble.n	800ec96 <scalbn+0x96>
 800ec84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ec88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ec8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ec90:	ec45 4b10 	vmov	d0, r4, r5
 800ec94:	bd70      	pop	{r4, r5, r6, pc}
 800ec96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ec9a:	da0d      	bge.n	800ecb8 <scalbn+0xb8>
 800ec9c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800eca0:	429e      	cmp	r6, r3
 800eca2:	ec45 4b11 	vmov	d1, r4, r5
 800eca6:	dce1      	bgt.n	800ec6c <scalbn+0x6c>
 800eca8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800ecd0 <scalbn+0xd0>
 800ecac:	f000 f81e 	bl	800ecec <copysign>
 800ecb0:	a307      	add	r3, pc, #28	; (adr r3, 800ecd0 <scalbn+0xd0>)
 800ecb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecb6:	e7e0      	b.n	800ec7a <scalbn+0x7a>
 800ecb8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ecbc:	3236      	adds	r2, #54	; 0x36
 800ecbe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ecc2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	4629      	mov	r1, r5
 800ecca:	2200      	movs	r2, #0
 800eccc:	4b06      	ldr	r3, [pc, #24]	; (800ece8 <scalbn+0xe8>)
 800ecce:	e7b2      	b.n	800ec36 <scalbn+0x36>
 800ecd0:	c2f8f359 	.word	0xc2f8f359
 800ecd4:	01a56e1f 	.word	0x01a56e1f
 800ecd8:	8800759c 	.word	0x8800759c
 800ecdc:	7e37e43c 	.word	0x7e37e43c
 800ece0:	43500000 	.word	0x43500000
 800ece4:	ffff3cb0 	.word	0xffff3cb0
 800ece8:	3c900000 	.word	0x3c900000

0800ecec <copysign>:
 800ecec:	ec51 0b10 	vmov	r0, r1, d0
 800ecf0:	ee11 0a90 	vmov	r0, s3
 800ecf4:	ee10 2a10 	vmov	r2, s0
 800ecf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800ecfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800ed00:	ea41 0300 	orr.w	r3, r1, r0
 800ed04:	ec43 2b10 	vmov	d0, r2, r3
 800ed08:	4770      	bx	lr
	...

0800ed0c <_init>:
 800ed0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed0e:	bf00      	nop
 800ed10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed12:	bc08      	pop	{r3}
 800ed14:	469e      	mov	lr, r3
 800ed16:	4770      	bx	lr

0800ed18 <_fini>:
 800ed18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed1a:	bf00      	nop
 800ed1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ed1e:	bc08      	pop	{r3}
 800ed20:	469e      	mov	lr, r3
 800ed22:	4770      	bx	lr
